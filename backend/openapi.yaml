openapi: 3.0.0
tags:
  - name: AIBrush

info:
  title: AIBrush API
  description: Orchestration backend for AI Brush
  version: 1.0.0
  contact:
    email: admin@aibrush.art
servers:
  - url: https://www.aibrush.art
  - url: /
paths:
  /api/images:
    get:
      description: Get a list of saved images
      operationId: listImages
      tags:
        - AIBrush
      parameters:
        - name: cursor
          in: query
          required: false
          schema:
            type: integer
        - name: filter
          in: query
          required: false
          schema:
            type: string
        - name: limit
          in: query
          required: false
          schema:
            type: integer
        - name: direction
          in: query
          required: false
          schema:
            type: string
            enum:
              - asc
              - desc
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImageList"
    # create image
    post:
      description: Create a new image
      operationId: createImage
      tags:
        - AIBrush
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateImageInput"
      responses:
        "201":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImageList"
  /api/images/{id}:
    get:
      description: Get a saved image by id
      operationId: getImage
      tags:
        - AIBrush
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Image"
    # update image
    patch:
      description: Update a saved image
      operationId: updateImage
      tags:
        - AIBrush
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateImageInput"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Image"
    delete:
      description: Delete a saved image
      operationId: deleteImage
      tags:
        - AIBrush
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Success
  /api/images/{id}/upload-urls:
    get:
      description: Get upload urls for image assets
      operationId: getImageUploadUrls
      tags:
        - AIBrush
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImageUrls"
  /api/images/{id}/download-urls:
    get:
      description: Get download urls for image assets
      operationId: getImageDownloadUrls
      tags:
        - AIBrush
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImageUrls"
  /api/batch-get-images:
    post:
      description: Get a list of saved images by id
      operationId: batchGetImages
      tags:
        - AIBrush
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BatchGetImagesInput"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImageList"
  /api/images/{id}.image.png:
    get:
      description: Get the binary image data
      operationId: getImageData
      tags:
        - AIBrush
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            image/png:
              schema:
                type: string
                format: binary
    put:
      description: Upload the binary image data
      operationId: uploadImageData
      tags:
        - AIBrush
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          image/png:
            schema:
              type: string
              format: binary
      responses:
        "200":
          description: Success
  # get image mask.png
  /api/images/{id}.mask.png:
    get:
      description: Get the binary mask data
      operationId: getMaskData
      tags:
        - AIBrush
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            image/png:
              schema:
                type: string
                format: binary
  /api/images/{id}.thumbnail.png:
    get:
      description: Get the binary thumbnail data
      operationId: getThumbnailData
      tags:
        - AIBrush
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            image/png:
              schema:
                type: string
                format: binary
    put:
      description: Upload the binary thumbnail data
      operationId: uploadThumbnailData
      tags:
        - AIBrush
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          image/png:
            schema:
              type: string
              format: binary
      responses:
        "200":
          description: Success
  # handle image .npy files
  /api/images/{id}.npy:
    get:
      description: Get the binary image data
      operationId: getNpyData
      tags:
        - AIBrush
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary

  /api/images/{id}.mp4:
    get:
      description: Get the binary video data
      operationId: getVideoData
      tags:
        - AIBrush
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            video/mp4:
              schema:
                type: string
                format: binary
    put:
      description: Update the video data
      operationId: updateVideoData
      tags:
        - AIBrush
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          video/mp4:
            schema:
              type: string
              format: binary
      responses:
        "200":
          description: Success
  /api/process-image:
    put:
      description: Get the next pending image and set its status to processing.
      operationId: processImage
      tags:
        - AIBrush
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProcessImageInput"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Image"

  /api/invite-codes:
    post:
      description: Create a new invite code
      operationId: createInviteCode
      tags:
        - AIBrush
      responses:
        "201":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InviteCode"
  /api/is-admin:
    get:
      description: Check if the user is admin
      operationId: isAdmin
      tags:
        - AIBrush
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IsAdminResponse"
  /api/assets-url:
    get:
      description: Get the assets url
      operationId: getAssetsUrl
      tags:
        - AIBrush
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AssetsUrl"
  # login by email
  /api/auth/login:
    post:
      description: Login by email
      operationId: login
      tags:
        - AIBrush
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginInput"
      responses:
        "204":
          description: Success
  /api/auth/verify:
    post:
      description: Verify Login code
      operationId: verify
      tags:
        - AIBrush
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VerifyLoginInput"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginResult"
        "400":
          description: Invalid code
  /api/auth/refresh:
    post:
      description: Refresh Login code
      operationId: refresh
      tags:
        - AIBrush
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RefreshLoginInput"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginResult"
  /api/auth/service-accounts:
    post:
      description: Create a service account
      operationId: createServiceAccount
      tags:
        - AIBrush
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateServiceAccountInput"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginResult"

  # workers
  /api/workers:
    get:
      description: Get the list of workers
      operationId: getWorkers
      tags:
        - AIBrush
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WorkerList"
    post:
      description: Create a new worker
      operationId: createWorker
      tags:
        - AIBrush
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpsertWorkerInput"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Worker"
  /api/workers/{worker_id}:
    get:
      description: Get a worker
      operationId: getWorker
      tags:
        - AIBrush
      parameters:
        - name: worker_id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Worker"
    put:
      description: Update a worker
      operationId: updateWorker
      tags:
        - AIBrush
      parameters:
        - name: worker_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpsertWorkerInput"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Worker"
    delete:
      description: Delete a worker
      operationId: deleteWorker
      tags:
        - AIBrush
      parameters:
        - name: worker_id
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Success
  # generate a login code
  /api/workers/{worker_id}/login-code:
    post:
      description: Generate a login code for a worker
      operationId: generateWorkerLoginCode
      tags:
        - AIBrush
      parameters:
        - name: worker_id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WorkerLoginCode"
  # log in as a worker, using the login code
  /api/worker-login:
    post:
      description: Log in as a worker
      operationId: loginAsWorker
      tags:
        - AIBrush
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WorkerLoginCode"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginResult"
  # get/put for worker config
  /api/workers/{worker_id}/config:
    get:
      description: Get a worker config
      operationId: getWorkerConfig
      tags:
        - AIBrush
      parameters:
        - name: worker_id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WorkerConfig"
    put:
      description: Update a worker config
      operationId: updateWorkerConfig
      tags:
        - AIBrush
      parameters:
        - name: worker_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpsertWorkerConfigInput"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WorkerConfig"
  /api/worker-ping:
    post:
      description: Ping a worker
      operationId: pingWorker
      tags:
        - AIBrush
      responses:
        "201":
          description: Success
  /api/discord-login:
    post:
      description: Log in with Discord
      operationId: discordLogin
      tags:
        - AIBrush
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DiscordLogin"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginResult"
  /api/features:
    get:
      description: Get the features
      operationId: getFeatures
      tags:
        - AIBrush
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FeatureList"

  # healthcheck
  /api/healthcheck:
    get:
      description: Healthcheck
      operationId: healthcheck
      tags:
        - AIBrush
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Healthcheck"
  # metrics
  # post only
  /api/metrics:
    post:
      description: Add Metrics
      operationId: addMetrics
      tags:
        - AIBrush
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddMetricsInput"
      responses:
        "200":
          description: Success
  /api/boost:
    get:
      description: Get the boost for the current user
      operationId: getBoost
      tags:
        - AIBrush
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Boost"
    put:
      description: Update the boost level for the current user
      operationId: updateBoost
      tags:
        - AIBrush
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateBoostRequest"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateBoostResponse"
  /api/boosts:
    get:
      description: Get the boost for all users
      operationId: listBoosts
      tags:
        - AIBrush
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BoostList"
  /api/boost/{user_id}:
    get:
      description: Get the boost for a user
      operationId: getBoostForUser
      tags:
        - AIBrush
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Boost"
  /api/boost/{user_id}/deposit:
    post:
      description: Deposit to a user's boost
      operationId: depositBoost
      tags:
        - AIBrush
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DepositRequest"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Boost"

components:
  schemas:
    CreateImageInput:
      type: object
      properties:
        status:
          type: string
          enum:
            - pending
            - processing
            - completed
            - saved
            - error
        phrases:
          type: array
          items:
            type: string
        negative_phrases:
          type: array
          items:
            type: string
        label:
          type: string
        iterations:
          type: integer
        parent:
          type: string
        encoded_image:
          type: string
        encoded_mask:
          type: string
        encoded_npy:
          type: string
        enable_video:
          type: boolean
        enable_zoom:
          type: boolean
        zoom_frequency:
          type: integer
        zoom_scale:
          type: number
        zoom_shift_x:
          type: number
        zoom_shift_y:
          type: number
        model:
          type: string
        # glid-3 xl specific options
        glid_3_xl_skip_iterations:
          type: number
        glid_3_xl_clip_guidance:
          type: boolean
        glid_3_xl_clip_guidance_scale:
          type: number
        height:
          type: integer
          enum: [128, 256, 384, 512, 640, 768, 896, 1024]
        width:
          type: integer
          enum: [128, 256, 384, 512, 640, 768, 896, 1024]
        uncrop_offset_x:
          type: integer
        uncrop_offset_y:
          type: integer
        stable_diffusion_strength:
          type: number
        count:
          type: integer
        nsfw:
          type: boolean
        temporary:
          type: boolean

    UpdateImageInput:
      type: object
      properties:
        label:
          type: string
        current_iterations:
          type: integer
        status:
          type: string
          enum: [pending, processing, completed, saved, error]
        encoded_image:
          type: string
        encoded_npy:
          type: string
        score:
          type: number
        negative_score:
          type: number
        nsfw:
          type: boolean
        deleted_at:
          type: number
          nullable: true

    Image:
      properties:
        id:
          type: string
        created_at:
          type: integer
        created_by:
          type: string
        updated_at:
          type: integer
        phrases:
          type: array
          items:
            type: string
        negative_phrases:
          type: array
          items:
            type: string
        label:
          type: string
        parent:
          type: string
        iterations:
          type: integer
        current_iterations:
          type: integer
        score:
          type: number
        negative_score:
          type: number
        status:
          type: string
          enum: [pending, processing, completed, saved, error]
        enable_video:
          type: boolean
        enable_zoom:
          type: boolean
        zoom_frequency:
          type: integer
        zoom_scale:
          type: number
        zoom_shift_x:
          type: number
        zoom_shift_y:
          type: number
        model:
          type: string
        # glid-3 xl specific options
        glid_3_xl_skip_iterations:
          type: number
        glid_3_xl_clip_guidance:
          type: boolean
        glid_3_xl_clip_guidance_scale:
          type: number
        width:
          type: integer
          enum: [128, 256, 384, 512, 640, 768, 896, 1024]
        height:
          type: integer
          enum: [128, 256, 384, 512, 640, 768, 896, 1024]
        uncrop_offset_x:
          type: integer
          enum: [-896, -768, -640, -512, -384, -256, -128, 0, 128, 256, 384, 512, 640, 768, 896]
        uncrop_offset_y:
          type: integer
          enum: [-896, -768, -640, -512, -384, -256, -128, 0, 128, 256, 384, 512, 640, 768, 896]
        stable_diffusion_strength:
          type: number
        nsfw:
          type: boolean
        temporary:
          type: boolean
        deleted_at:
          type: integer
        worker_id:
          type: string
      required:
        - id
        - created_at
        - created_by
        - updated_at
        - phrases
        - negative_phrases
        - label
        - parent
        - iterations
        - current_iterations
        - score
        - negative_score
        - status
        - enable_video
        - model
        - width
        - height
        - stable_diffusion_strength
        - nsfw
        - temporary
    ImageList:
      properties:
        images:
          type: array
          items:
            $ref: "#/components/schemas/Image"
    BatchGetImagesInput:
      type: object
      properties:
        ids:
          type: array
          items:
            type: string
      required:
        - ids
    ProcessImageInput:
      properties:
        model:
          type: string
        peek:
          type: boolean
    ImageUrls:
      properties:
        image_url:
          type: string
        mask_url:
          type: string
        thumbnail_url:
          type: string
    LoginInput:
      type: object
      properties:
        email:
          type: string
        invite_code:
          type: string
    VerifyLoginInput:
      type: object
      properties:
        email:
          type: string
        code:
          type: string
    RefreshLoginInput:
      type: object
      properties:
        refreshToken:
          type: string
      required:
        - refresh_token
    LoginResult:
      type: object
      properties:
        accessToken:
          type: string
        refreshToken:
          type: string
    AssetsUrl:
      type: object
      properties:
        assets_url:
          type: string
      required:
        - assets_url
    Healthcheck:
      type: object
      properties:
        status:
          type: string
          enum: [ok]
    CreateServiceAccountInput:
      type: object
      properties:
        type:
          type: string
          enum: [public, private]
    User:
      type: object
      properties:
        id:
          type: string
        active:
          type: boolean
    InviteCode:
      type: object
      properties:
        id:
          type: string
        created_at:
          type: integer
        created_by:
          type: string
    IsAdminResponse:
      type: object
      properties:
        is_admin:
          type: boolean
    FeatureList:
      type: object
      properties:
        terms_uri:
          type: string
        privacy_uri:
          type: string
# public addMetric(name: string, value: any, type: "gauge" | "count", attributes: any)
    MetricAttribute:
      type: object
      properties:
        name:
          type: string
        value:
          type: string
    AddMetricItem:
      type: object
      properties:
        name:
          type: string
        value:
          type: number
        type:
          type: string
          enum: [gauge, count]
        attributes:
          type: array
          items:
            $ref: "#/components/schemas/MetricAttribute"
      required:
        - name
        - value
        - type
        - attributes
    AddMetricsInput:
      type: object
      properties:
        metrics:
          type: array
          items:
            $ref: "#/components/schemas/AddMetricItem"
      required:
        - metrics
    # workers
    # id, created_at, display_name, login_code
    Worker:
      type: object
      properties:
        id:
          type: string
        created_at:
          type: integer
        display_name:
          type: string
        last_ping:
          type: integer
        status:
          type: string
          enum: [idle, active]
        login_code:
          type: string
        engine:
          type: string
        num_gpus:
          type: integer
        cloud_instance_id:
          type: string
        gpu_type:
          type: string
      required:
        - id
        - created_at
        - display_name
    WorkerList:
      type: object
      properties:
        workers:
          type: array
          items:
            $ref: "#/components/schemas/Worker"
    WorkerLoginCode:
      type: object
      properties:
        login_code:
          type: string
      required:
        - login_code
    UpsertWorkerInput:
      type: object
      properties:
        display_name:
          type: string
        status:
          type: string
          enum: [idle, active]
    WorkerGpuConfig:
      type: object
      properties:
        gpu_num:
          type: integer
        model:
          type: string
      required:
        - gpu_num
        - model
    WorkerConfig:
      type: object
      properties:
        worker_id:
          type: string
        gpu_configs:
          type: array
          items:
            $ref: "#/components/schemas/WorkerGpuConfig"
      required:
        - worker_id
    UpsertWorkerConfigInput:
      type: object
      properties:
        gpu_configs:
          type: array
          items:
            $ref: "#/components/schemas/WorkerGpuConfig"
      required:
        - worker_id
        - model
        - pool_assignment
    Order:
      type: object
      properties:
        id:
          type: string
        created_by:
          type: string
        created_at:
          type: integer
        ends_at:
          type: integer
        is_active:
          type: boolean
        gpu_count:
          type: integer
        amount_paid_cents:
          type: integer
      required:
        - id
        - created_by
        - created_at
        - ends_at
        - is_active
        - gpu_count
        - amount_paid_cents
    DiscordLogin:
      type: object
      properties:
        code:
          type: string
      required:
        - code
    Boost:
      type: object
      properties:
        user_id:
          type: string
        activated_at:
          type: integer
        balance:
          type: integer
          description: "Balance in 1/2 gpu milliseconds (.1 cents)"
        level:
          type: integer
        is_active:
          type: boolean
          description: "Whether the boost is active"
      required:
        - user_id
        - activated_at
        - balance
        - level
    DepositRequest:
      type: object
      properties:
        amount:
          type: integer
          description: "Amount in 1/2 gpu milliseconds (.1 cents)"
        level:
          type: integer
          description: "Boost level to activate after deposit"
      required:
        - amount
        - level
    UpdateBoostRequest:
      type: object
      properties:
        level:
          type: integer
          description: "Boost level to set for current user"
        is_active:
          type: boolean
          description: "Whether to activate or deactivate the boost"
    UpdateBoostResponse:
      type: object
      properties:
        level:
          type: integer
        balance:
          type: integer
          description: "Balance in 1/2 gpu milliseconds (.1 cents)"
        is_active:
          type: boolean
          description: "Whether the boost is active"
        error:
          type: string
    BoostList:
      type: object
      properties:
        boosts:
          type: array
          items:
            $ref: "#/components/schemas/Boost"
      required:
        - boosts
