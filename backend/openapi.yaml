openapi: 3.0.0
tags:
  - name: AIBrush

info:
  title: AIBrush API
  description: Orchestration backend for AI Brush
  version: 1.0.0
  contact:
    email: admin@aibrush.art
servers:
  - url: https://www.aibrush.art
  - url: /
paths:
  /api/images:
    get:
      description: Get a list of saved images
      operationId: listImages
      tags:
        - AIBrush
      parameters:
        - name: cursor
          in: query
          required: false
          schema:
            type: integer
        - name: filter
          in: query
          required: false
          schema:
            type: string
        - name: limit
          in: query
          required: false
          schema:
            type: integer
        - name: direction
          in: query
          required: false
          schema:
            type: string
            enum:
              - asc
              - desc
        - name: fields
          in: query
          required: false
          schema:
            type: string
          description: >
            Comma-separated list of fields to include in the response images.
            For example: "id,params,created_at"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImageList"
    # create image
    # post:
    #   description: Create a new image
    #   operationId: createImage
    #   tags:
    #     - AIBrush
    #   requestBody:
    #     content:
    #       application/json:
    #         schema:
    #           $ref: "#/components/schemas/CreateImageInput"
    #   responses:
    #     "201":
    #       description: Success
    #       content:
    #         application/json:
    #           schema:
    #             $ref: "#/components/schemas/ImageList"
  /api/images/{id}:
    get:
      description: Get a saved image by id
      operationId: getImage
      tags:
        - AIBrush
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Image"
    # # update image
    # patch:
    #   description: Update a saved image
    #   operationId: updateImage
    #   tags:
    #     - AIBrush
    #   parameters:
    #     - name: id
    #       in: path
    #       required: true
    #       schema:
    #         type: string
    #   requestBody:
    #     content:
    #       application/json:
    #         schema:
    #           $ref: "#/components/schemas/UpdateImageInput"
    #   responses:
    #     "200":
    #       description: Success
    #       content:
    #         application/json:
    #           schema:
    #             $ref: "#/components/schemas/Image"
    delete:
      description: Delete a saved image
      operationId: deleteImage
      tags:
        - AIBrush
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Success
  /api/images/{id}/upload-urls:
    get:
      description: Get upload urls for image assets
      operationId: getImageUploadUrls
      tags:
        - AIBrush
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImageUrls"
  /api/images/{id}/download-urls:
    get:
      description: Get download urls for image assets
      operationId: getImageDownloadUrls
      tags:
        - AIBrush
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImageUrls"
  /api/batch-get-images:
    post:
      description: Get a list of saved images by id
      operationId: batchGetImages
      tags:
        - AIBrush
      parameters:
        - name: fields
          in: query
          required: false
          schema:
            type: string
          description: >
            Comma-separated list of fields to include in the response images.
            For example: "id,params,created_at"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BatchGetImagesInput"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImageList"
  # /api/images/{id}.image.png:
  #   get:
  #     description: Get the binary image data
  #     operationId: getImageData
  #     tags:
  #       - AIBrush
  #     parameters:
  #       - name: id
  #         in: path
  #         required: true
  #         schema:
  #           type: string
  #     responses:
  #       "200":
  #         description: Success
  #         content:
  #           image/png:
  #             schema:
  #               type: string
  #               format: binary
  #   put:
  #     description: Upload the binary image data
  #     operationId: uploadImageData
  #     tags:
  #       - AIBrush
  #     parameters:
  #       - name: id
  #         in: path
  #         required: true
  #         schema:
  #           type: string
  #     requestBody:
  #       content:
  #         image/png:
  #           schema:
  #             type: string
  #             format: binary
  #     responses:
  #       "200":
  #         description: Success
  # get image mask.png
  # /api/images/{id}.mask.png:
  #   get:
  #     description: Get the binary mask data
  #     operationId: getMaskData
  #     tags:
  #       - AIBrush
  #     parameters:
  #       - name: id
  #         in: path
  #         required: true
  #         schema:
  #           type: string
  #     responses:
  #       "200":
  #         description: Success
  #         content:
  #           image/png:
  #             schema:
  #               type: string
  #               format: binary
  # /api/images/{id}.thumbnail.png:
  #   get:
  #     description: Get the binary thumbnail data
  #     operationId: getThumbnailData
  #     tags:
  #       - AIBrush
  #     parameters:
  #       - name: id
  #         in: path
  #         required: true
  #         schema:
  #           type: string
  #     responses:
  #       "200":
  #         description: Success
  #         content:
  #           image/png:
  #             schema:
  #               type: string
  #               format: binary
  #   put:
  #     description: Upload the binary thumbnail data
  #     operationId: uploadThumbnailData
  #     tags:
  #       - AIBrush
  #     parameters:
  #       - name: id
  #         in: path
  #         required: true
  #         schema:
  #           type: string
  #     requestBody:
  #       content:
  #         image/png:
  #           schema:
  #             type: string
  #             format: binary
  #     responses:
  #       "200":
  #         description: Success

  # /api/invite-codes:
  #   post:
  #     description: Create a new invite code
  #     operationId: createInviteCode
  #     tags:
  #       - AIBrush
  #     responses:
  #       "201":
  #         description: Success
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/InviteCode"
  /api/is-admin:
    get:
      description: Check if the user is admin
      operationId: isAdmin
      tags:
        - AIBrush
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IsAdminResponse"
  /api/assets-url:
    get:
      description: Get the assets url
      operationId: getAssetsUrl
      tags:
        - AIBrush
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AssetsUrl"
  # login by email
  /api/auth/login:
    post:
      description: Login by email
      operationId: login
      tags:
        - AIBrush
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginInput"
      responses:
        "204":
          description: Success
  /api/auth/verify:
    post:
      description: Verify Login code
      operationId: verify
      tags:
        - AIBrush
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VerifyLoginInput"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginResult"
        "400":
          description: Invalid code
  /api/auth/refresh:
    post:
      description: Refresh Login code
      operationId: refresh
      tags:
        - AIBrush
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RefreshLoginInput"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginResult"
  /api/discord-login:
    post:
      description: Log in with Discord
      operationId: discordLogin
      tags:
        - AIBrush
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DiscordLogin"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginResult"
  /api/features:
    get:
      description: Get the features
      operationId: getFeatures
      tags:
        - AIBrush
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FeatureList"

  # healthcheck
  /api/healthcheck:
    get:
      description: Healthcheck
      operationId: healthcheck
      tags:
        - AIBrush
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Healthcheck"
  # metrics
  # post only
  /api/metrics:
    post:
      description: Add Metrics
      operationId: addMetrics
      tags:
        - AIBrush
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddMetricsInput"
      responses:
        "200":
          description: Success
  /api/global-settings/{key}:
    get:
      description: Get the global settings
      operationId: getGlobalSettings
      tags:
        - AIBrush
      # there is a key parameter
      parameters:
        - name: key
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GlobalSettings"
    put:
      description: Update the global settings
      operationId: updateGlobalSettings
      tags:
        - AIBrush
      parameters:
        - name: key
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateGlobalSettingsRequest"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GlobalSettings"
  /api/stable-diffusion-models:
    get:
      summary: Get available models
      operationId: getModels
      tags:
        - AIBrush
      responses:
        '200':
          description: A list of available models
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  $ref: '#/components/schemas/StableDiffusionModel'
  # /api/temporary-images:
  #   post:
  #     description: Create a new temporary image
  #     operationId: createTemporaryImage
  #     tags:
  #       - AIBrush
  #     parameters:
  #       - name: format
  #         in: query
  #         required: true
  #         schema:
  #           type: string
  #     responses:
  #       "201":
  #         description: Success
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/TemporaryImage"
  /api/credits:
    get:
      description: Get the user's credit balance
      operationId: getCredits
      tags:
        - AIBrush
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Credits"
  /api/deposit-codes:
    post:
      description: Create a new deposit code
      operationId: createDepositCode
      tags:
        - AIBrush
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateDepositCodeInput"
      responses:
        "201":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DepositCode"
  /api/deposit-codes/{code}:
    post:
      description: Redeem a deposit code
      operationId: redeemDepositCode
      tags:
        - AIBrush
      parameters:
        - name: code
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Success
  /api/stripe-sessions:
    post:
      description: Create a new Stripe session
      operationId: createStripeSession
      tags:
        - AIBrush
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateStripeSessionInput"
      responses:
        "201":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StripeSession"

components:
  schemas:
    StableDiffusionModel:
      type: object
      properties:
        name:
          type: string
          description: The name of the model
        baseline:
          type: string
          description: The baseline model used
        type:
          type: string
          description: The type of the model (e.g., ckpt)
        description:
          type: string
          description: A short description of the model
        tags:
          type: array
          items:
            type: string
          description: Tags associated with the model
        showcases:
          type: array
          items:
            type: string
            format: uri
          description: A list of URIs for showcase images
        version:
          type: string
          description: The version of the model
        style:
          type: string
          description: The style of the model (e.g., anime, furry)
        nsfw:
          type: boolean
          description: Whether the model is Not Safe For Work (NSFW)
        download_all:
          type: boolean
          description: Whether to download all model files
        config:
          type: object
          description: Configuration information for the model
        available:
          type: boolean
          description: Whether the model is available for use
        inpainting:
          type: boolean
          description: Whether the model is an inpainting model
      required:
        - name
        - baseline
        - type
        - description
        - tags
        - showcases
        - version
        - style
        - nsfw
        - download_all
        - config
        - available
        - inpainting
    StatusEnum:
      type: string
      enum:
        - pending
        - processing
        - completed
        - saved
        - error
        - deleted
    CreateImageInput:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/StatusEnum'
        label:
          type: string
        parent:
          type: string
        encoded_image:
          type: string
        encoded_mask:
          type: string
        tmp_image_id:
          type: string
        tmp_jpg_id:
          type: string
        tmp_mask_id:
          type: string
        tmp_thumbnail_id:
          type: string
        model:
          type: string
        params:
          $ref: '#/components/schemas/ImageParams'
        count:
          type: integer
        nsfw:
          type: boolean
        temporary:
          type: boolean
      required:
        - model
        - params
        - count

    UpdateImageInput:
      type: object
      properties:
        label:
          type: string
        status:
          $ref: '#/components/schemas/StatusEnum'
        encoded_image:
          type: string
        encoded_npy:
          type: string
        score:
          type: number
        negative_score:
          type: number
        nsfw:
          type: boolean
        deleted_at:
          type: number
          nullable: true
        error:
          type: string
    LoraConfig:
      type: object
      properties:
        name:
          type: string
        strength:
          type: number
      required:
        - name
        - strength

    ImageParams:
      type: object
      properties:
        prompt:
          type: string
        steps:
          type: integer
        negative_prompt:
          type: string
        width:
          type: integer
        height:
          type: integer
        denoising_strength:
          type: number
        cfg_scale:
          type: number
        seed:
          type: string
        controlnet_type:
          type: string
          enum: [canny, hed, depth, normal, openpose, seg, scribble, fakescribbles, hough]
        augmentation:
          type: string
          enum: [face_restore, remove_background, upscale]
        loras:
          type: array
          items:
            $ref: '#/components/schemas/LoraConfig'
    Image:
      properties:
        id:
          type: string
        created_at:
          type: integer
        created_by:
          type: string
        updated_at:
          type: integer
        params:
          $ref: '#/components/schemas/ImageParams'
        label:
          type: string
        parent:
          type: string
        score:
          type: number
        negative_score:
          type: number
        status:
          $ref: '#/components/schemas/StatusEnum'
        model:
          type: string
        nsfw:
          type: boolean
        temporary:
          type: boolean
        deleted_at:
          type: integer
        error:
          type: string
      required:
        - id
        - created_at
        - created_by
        - updated_at
        - params
        - label
        - parent
        - score
        - negative_score
        - status
        - model
        - nsfw
        - temporary

    ImageList:
      properties:
        images:
          type: array
          items:
            $ref: "#/components/schemas/Image"
    BatchGetImagesInput:
      type: object
      properties:
        ids:
          type: array
          items:
            type: string
      required:
        - ids
    ImageUrls:
      properties:
        init_image_url:
          type: string
        image_url:
          type: string
        mask_url:
          type: string
        thumbnail_url:
          type: string
    LoginInput:
      type: object
      properties:
        email:
          type: string
        invite_code:
          type: string
    VerifyLoginInput:
      type: object
      properties:
        email:
          type: string
        code:
          type: string
    RefreshLoginInput:
      type: object
      properties:
        refreshToken:
          type: string
      required:
        - refresh_token
    LoginResult:
      type: object
      properties:
        accessToken:
          type: string
        refreshToken:
          type: string
    AssetsUrl:
      type: object
      properties:
        assets_url:
          type: string
      required:
        - assets_url
    Healthcheck:
      type: object
      properties:
        status:
          type: string
          enum: [ok]
    User:
      type: object
      properties:
        id:
          type: string
        active:
          type: boolean
        customer_id:
          type: string
        manifest_id:
          type: string
      required:
        - id
        - active
    InviteCode:
      type: object
      properties:
        id:
          type: string
        created_at:
          type: integer
        created_by:
          type: string
    IsAdminResponse:
      type: object
      properties:
        is_admin:
          type: boolean
    FeatureList:
      type: object
      properties:
        terms_uri:
          type: string
        privacy_uri:
          type: string
# public addMetric(name: string, value: any, type: "gauge" | "count", attributes: any)
    MetricAttribute:
      type: object
      properties:
        name:
          type: string
        value:
          type: string
    AddMetricItem:
      type: object
      properties:
        name:
          type: string
        value:
          type: number
        type:
          type: string
          enum: [gauge, count]
        attributes:
          type: array
          items:
            $ref: "#/components/schemas/MetricAttribute"
      required:
        - name
        - value
        - type
        - attributes
    AddMetricsInput:
      type: object
      properties:
        metrics:
          type: array
          items:
            $ref: "#/components/schemas/AddMetricItem"
      required:
        - metrics
    # workers
    # id, created_at, display_name, login_code
    Worker:
      type: object
      properties:
        id:
          type: string
        created_at:
          type: integer
        display_name:
          type: string
        last_ping:
          type: integer
        status:
          type: string
          enum: [idle, active]
        login_code:
          type: string
        engine:
          type: string
        num_gpus:
          type: integer
        cloud_instance_id:
          type: string
        gpu_type:
          type: string
      required:
        - id
        - created_at
        - display_name
    WorkerList:
      type: object
      properties:
        workers:
          type: array
          items:
            $ref: "#/components/schemas/Worker"
    WorkerLoginCode:
      type: object
      properties:
        login_code:
          type: string
      required:
        - login_code
    UpsertWorkerInput:
      type: object
      properties:
        display_name:
          type: string
        status:
          type: string
          enum: [idle, active]
    WorkerGpuConfig:
      type: object
      properties:
        gpu_num:
          type: integer
        model:
          type: string
      required:
        - gpu_num
        - model
    WorkerConfig:
      type: object
      properties:
        worker_id:
          type: string
        gpu_configs:
          type: array
          items:
            $ref: "#/components/schemas/WorkerGpuConfig"
      required:
        - worker_id
    UpsertWorkerConfigInput:
      type: object
      properties:
        gpu_configs:
          type: array
          items:
            $ref: "#/components/schemas/WorkerGpuConfig"
      required:
        - worker_id
        - model
        - pool_assignment
    Order:
      type: object
      properties:
        id:
          type: string
        created_by:
          type: string
        created_at:
          type: integer
        ends_at:
          type: integer
        is_active:
          type: boolean
        gpu_count:
          type: integer
        amount_paid_cents:
          type: integer
      required:
        - id
        - created_by
        - created_at
        - ends_at
        - is_active
        - gpu_count
        - amount_paid_cents
    DiscordLogin:
      type: object
      properties:
        code:
          type: string
      required:
        - code
    DepositRequest:
      type: object
      properties:
        amount:
          type: integer
          description: "Amount in credits"
      required:
        - amount
    GlobalSettings:
      type: object
      properties:
        settings_key:
          type: string
        settings_json:
          type: object
      required:
        - settings_key
        - settings_json
    UpdateGlobalSettingsRequest:
      type: object
      properties:
        settings_json:
          type: object
      required:
        - settings_json
    TemporaryImage:
      type: object
      properties:
        id:
          type: string
        upload_url:
          type: string
      required:
        - id
        - upload_url
    Credits:
      type: object
      properties:
        free_credits:
          type: integer
        paid_credits:
          type: integer
      required:
        - free_credits
        - paid_credits
    CreateDepositCodeInput:
      type: object
      properties:
        amount:
          type: integer
      required:
        - code
        - amount
    DepositCode:
      type: object
      properties:
        code:
          type: string
        amount:
          type: integer
      required:
        - code
        - amount
    CreateStripeSessionInput:
      type: object
      properties:
        product_id:
          type: string
        success_url:
          type: string
        cancel_url:
          type: string
      required:
        - product_id
        - success_url
        - cancel_url
    StripeSession:
      type: object
      properties:
        session_id:
          type: string
      required:
        - session_id
