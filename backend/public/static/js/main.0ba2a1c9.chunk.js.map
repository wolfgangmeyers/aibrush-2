{"version":3,"sources":["components/AspectRatioSelector.tsx","pages/image-editor/PaletteButton.tsx","components/PendingImagesThumbnail.tsx","components/PendingImages.tsx","components/CopyToClipboardIcon.tsx","components/ImagePopup.tsx","pages/image-editor/enhance-tool.tsx","client/api.ts","client/base.ts","client/common.ts","pages/image-editor/smudge-tool.tsx","pages/image-editor/inpaint-tool.tsx","pages/image-editor/ImageEditor.tsx","pages/image-editor/renderer.ts","lib/aspecRatios.ts","pages/image-editor/mask-editor-controls.tsx","pages/image-editor/import-export.tsx","pages/image-editor/augment-tool.tsx","components/OutOfCreditsModal.tsx","components/PaymentStatusModal.tsx","lib/imageutil.ts","components/BusyModal.tsx","lib/localImagesStore.ts","pages/Login.tsx","components/TokenRefresher.tsx","components/Healthchecker.tsx","pages/admin/GenerateCode.tsx","pages/admin/GlobalSettings.tsx","pages/admin/Admin.tsx","pages/DeletedImages.tsx","pages/DiscordLogin.tsx","pages/LocalDeletedImages.tsx","lib/kvstore.ts","pages/SavedImagesPage.tsx","lib/imagesCache.ts","pages/TestPage.tsx","components/CreditsBalance.tsx","pages/pricing/PricingCard.tsx","pages/pricing/RedeemPopup.tsx","pages/pricing/PricingPage.tsx","App.tsx","config.ts","reportWebVitals.ts","index.tsx","pages/image-editor/zoomHelper.tsx","pages/image-editor/tool.ts","lib/apisocket.ts","lib/recentList.ts","components/CostIndicator.tsx","components/ImageThumbnail.tsx","lib/supportedModels.ts","components/SeedInput.tsx","components/TextInputWithHistory.tsx","components/ImagePrompt.tsx","components/ProgressBar.tsx","lib/sleep.ts","lib/credits.ts","components/ModelList.tsx","lib/localcache.ts","components/ModelSelector.tsx","components/Alerts.tsx","pages/image-editor/ColorPicker.tsx","pages/image-editor/pencil-tool.tsx","pages/image-editor/selection-tool.tsx","lib/upscale.ts","pages/Homepage.tsx"],"names":["AspectRatioSelector","aspectRatio","onChange","disabled","aspectRatioDetails","aspectRatios","className","style","minHeight","display","alignItems","width","height","border","margin","float","displayName","type","min","max","length","value","e","parseInt","target","PaletteButton","selectedColor","color","onClick","backgroundColor","PendingImagesThumbnail","pendingCount","processingCount","useState","hover","setHover","icon","marginTop","onMouseEnter","onMouseLeave","backgroundImage","backgroundSize","cursor","background","lineHeight","fontSize","marginBottom","PendingImages","images","onDeleteImage","onCancel","show","imageIcon","image","status","pendingDiv","map","phrases","params","prompt","substring","id","onHide","Header","closeButton","Title","Body","Footer","CopyToClipboardIcon","text","copied","setCopied","onCopy","setTimeout","marginLeft","undefined","ImagePopup","assetsUrl","censorNSFW","onClose","onDelete","onFork","onEdit","onNSFW","onSave","img","useRef","src","updated_at","imageData","score","negative_prompt","negative_score","showNSFW","setShowNSFW","useEffect","current","onerror","title","label","indexOf","Modal","size","ref","maxWidth","maxHeight","marginRight","filter","nsfw","alt","displayStatus","charAt","toUpperCase","slice","StatusEnum","Pending","Processing","Completed","Saved","Error","position","top","statusBadge","model","href","seed","anonymousClient","axios","create","eraserWidthModifier","EnhanceTool","renderer","selectionTool","pencilTool","negativePrompt","count","variationStrength","_dirty","worker","idCounter","_state","stateHandler","selectionControlsListener","maskHandler","selectedImageDataIndex","selectedImageData","panning","erasing","progressListener","errorListener","dirtyListener","SelectionTool","PencilTool","selectSupported","state","selectionArgs","getArgs","selectionOverlay","x","y","getWidth","getHeight","updateArgs","brushColor","ImageUtilWorker","this","dirty","listener","handler","error","destroy","setCursor","outpaint","getUpscaleLevel","event","zoomHelper","translateMouseToCanvasCoordinates","nativeEvent","offsetX","offsetY","button","ImageData","data","erasePoint","onMouseDown","getSelectionOverlay","baseWidth","Math","eraserRadius","floor","relX","relY","startX","startY","endX","endY","i","j","index","distance","sqrt","pow","alphaPct","alpha","setEditImage","featherWidth","radius","onPan","updateCursor","onMouseMove","onMouseUp","onWheel","args","console","log","api","imageId","maskData","loadImageDataElement","imageElement","canvas","document","createElement","ctx","getContext","drawImage","getImageData","newId","req","alphaMode","feather","pixels","alphaPixels","processRequest","resp","updatedImageData","remove","isMasked","deleteMask","createMask","progress","apisocket","a","notifyError","encodedImage","getEncodedImage","convertPNGToJPG","encodedMask","getEncodedMask","input","defaultArgs","createTemporaryImage","tmpInitImage","binaryImageData","Buffer","from","updateProgress","put","upload_url","headers","onUploadProgress","progressEvent","percentCompleted","loaded","total","tmp_jpg_id","tmpMaskImage","binaryMaskData","tmp_mask_id","parent","denoising_strength","ceil","temporary","createImage","newImages","completed","lastUpdate","moment","onMessage","msg","JSON","parse","NOTIFICATION_IMAGE_UPDATED","loadImageData","addMessageListener","startTime","lastCheck","completeCount","sleep","diff","pendingIds","batchGetImages","ids","updatedImagesResult","updatedImages","byId","reduce","acc","updated","isAfter","removeMessageListener","sort","b","push","direction","saveListener","commitSelection","negative_phrases","BaseTool","EnhanceControls","tool","setCount","setDirty","setVariationStrength","setPrompt","setNegativePrompt","setModel","selectingModel","setSelectingModel","setState","setIsMasked","setProgress","setError","onChangeState","onChangeMask","onProgress","onError","onDirty","cost","calculateImagesCost","role","data-dismiss","aria-label","aria-hidden","lockAspectRatio","htmlFor","step","round","parseFloat","imagesCost","onConfirm","onRevert","cancel","confirm","erase","submit","mask","when","message","onSelectModel","initialSelectedModel","inpainting","AddMetricItemTypeEnum","HealthcheckStatusEnum","ImageParamsControlnetTypeEnum","ImageParamsAugmentationEnum","UpsertWorkerInputStatusEnum","WorkerStatusEnum","BASE_PATH","replace","BaseAPI","configuration","basePath","globalAxios","RequiredError","field","name","DUMMY_BASE_URL","assertParamExists","functionName","paramName","paramValue","setSearchParams","url","searchParams","URLSearchParams","search","objects","object","key","Array","isArray","delete","item","append","set","toString","serializeDataIfNeeded","requestOptions","nonString","isJsonMime","stringify","toPathString","pathname","hash","createRequestFunction","axiosArgs","axiosRequestArgs","options","request","AIBrushApiFp","localVarAxiosParamCreator","addMetrics","addMetricsInput","localVarUrlObj","URL","baseOptions","localVarRequestOptions","method","localVarQueryParameter","localVarHeaderParameter","query","headersFromBaseOptions","fields","batchGetImagesInput","createDepositCode","createDepositCodeInput","createImageInput","createInviteCode","createStripeSession","createStripeSessionInput","format","deleteImage","localVarPath","encodeURIComponent","String","discordLogin","getAssetsUrl","getCredits","getFeatures","getGlobalSettings","getImage","getImageDownloadUrls","getImageUploadUrls","getMaskData","getModels","getThumbnailData","healthcheck","isAdmin","listImages","limit","login","loginInput","redeemDepositCode","code","refresh","refreshLoginInput","updateGlobalSettings","updateGlobalSettingsRequest","updateImage","updateImageInput","uploadImageData","body","uploadThumbnailData","verify","verifyLoginInput","AIBrushApiAxiosParamCreator","localVarAxiosArgs","AIBrushApi","then","SmudgeTool","brushSize","brushOpacity","lastX","lastY","smudging","sync","smudgeLine","copyEditImageFromBaseImage","SmudgeControls","setBrushSize","setBrushOpacity","visibility","InpaintTool","imageWidth","imageHeight","selectionWidth","render","alphaMask","snapshot","undo","clearRedoStack","expandToOverlay","tmpImagePromises","Promise","all","tmpImages","binaryImages","uploadPromises","tmpImage","binaryImage","tmp_image_id","closestAspectRatio","getClosestAspectRatio","selection_overlay","window","InpaintControls","setoutpaint","checked","defaults","common","ImageEditor","localImages","showSelectionControls","setShowSelectionControls","tools","iconClass","constructor","r","renderControls","t","onShowSelectionControls","colors","defaultColors","setImage","setRenderer","setTool","canUndo","setCanUndo","canRedo","setCanRedo","busyMessage","setBusyMessage","useParams","history","useHistory","canvasRef","onSelectTool","toolconfig","newTool","onSaveImage","saveNewImage","newArgs","newImage","uuid","saveImage","renderTool","buttonClass","isSelected","preventDefault","localImage","imageSrc","download_urls","get","image_url","responseType","base64ImageData","Image","onload","createRenderer","setBaseImage","loadImage","onSnapshot","addEventListener","removeEventListener","textAlign","paddingBottom","redo","verticalAlign","touchAction","userSelect","onTouchStart","onTouchMove","onTouchEnd","select","left","transform","resetView","Renderer","undoStack","redoStack","currentSnapshot","backgroundLayer","baseImageLayer","editLayer","maskLayer","selectionOverlayPreview","hasSelection","zoom","snapshotListener","allowRedo","pop","clearRect","putImageData","notifySnapshotListener","shift","context","setTransform","globalAlpha","drawOverlay","resetMask","fillStyle","fillRect","pattern","createPattern","createCheckeredPattern","color1","color2","updateSelectionOverlay","initializeBackgroundLayer","setSelectionOverlay","updateZoomAndOffset","lineWidth","strokeStyle","strokeRect","beginPath","arc","PI","stroke","fill","moveTo","lineTo","result","toDataURL","split","selection","imageDataToEncodedImage","erasure","layer","convertErasureToMask","imageLayer","brushx","brushy","absx","leftEdge","rightEdge","topEdge","bottomEdge","absy","contains","x1","y1","x2","y2","lineCap","unitVector","totalRed","totalGreen","totalBlue","averageRed","averageGreen","averageBlue","pixel","g","rgbToHex","minX","minY","newCanvas","AspectRatio","cfg","newWidth","newHeight","DEFAULT_ASPECT_RATIO","tests","aRatio","bRatio","abs","MaskEditor","setBrushColor","flexDirection","flexWrap","ImportExportControls","backupImage","setBackupImage","files","byteString","atob","buffer","ArrayBuffer","intArray","Uint8Array","charCodeAt","blob","Blob","saveAs","onExport","AugmentControls","activeAugmentation","setActiveAugmentation","imageWorker","setImageWorker","lastError","setLastError","augmentImageData","augmentation","c","imageDataToCanvas","Upscale","FaceRestore","createResp","processingImage","checkResp","downloadUrls","imageDataResp","binaryImageToDataBase64","decodeImage","upscaleFactor","newImageData","onAugment","fixImageSize","valueOf","timestamp","OutOfCreditsModal","centered","to","variant","PaymentStatusModal","paymentStatus","setShow","handleClose","resolve","reject","dataUrl","urls","catch","err","splitImage","initImage","tile_size","num_tiles_x","num_tiles_y","tiles","x0","y0","tile","numTilesX","numTilesY","tileSize","mergeTiles","splitResult","tileCanvas","resizeImage","numWorkers","workers","callbacks","Worker","process","bind","postMessage","terminate","createEncodedThumbnail","cropWidth","cropHeight","cropX","cropY","base64","resizeEncodedImage","encodedImageToBlob","binaryString","arr","uploadBlob","signedUrl","xhr","XMLHttpRequest","open","setRequestHeader","send","BusyModal","children","backdrop","keyboard","LocalImagesStore","db","indexedDB","onupgradeneeded","evt","imagesStore","objectStoreNames","transaction","objectStore","createObjectStore","keyPath","createIndex","unique","onsuccess","_","legacyImage","join","stable_diffusion_strength","steps","iterations","store","hydrateImage","cleanupDeletedImages","deleted_at","hardDeleteImage","range","IDBKeyRange","lowerBound","upperBound","openCursor","toLowerCase","includes","continue","imagesRequest","clear","olderThan","getDeletedImages","deletedImages","promises","subtract","Login","props","email","setEmail","emailSubmitted","setEmailSubmitted","setCode","setErr","location","inviteCode","qs","onLogin","match","client","invite_code","onVerify","fontWeight","placeholder","aria-describedby","trim","host","protocol","redirectUri","discordLink","TokenRefresher","onCredentialsRefreshed","onCredentialsExpired","credentials","interval","setInterval","refreshToken","loginResult","clearInterval","Healthchecker","healthCheck","setHealthCheck","GenerateCode","amount","setAmount","generatedCode","setGeneratedCode","handleSubmit","Form","onSubmit","InputGroup","Control","Append","Button","Alert","GlobalSettings","minimum_worker_allocations","stable_diffusion","stable_diffusion_inpainting","swinir","workerSettings","setWorkerSettings","saving","setSaving","loadWorkerSettings","settings","settings_json","saveWorkerSettings","Admin","DeletedImages","setImages","deleting","setDeleting","loadImages","add","onDeleteAllImages","onRestoreImage","goBack","borderBottom","ImageThumbnail","paddingTop","DiscordLogin","accessToken","LocalDeletedImages","clearDeletedImages","KVStore","dbConfig","dbName","storeName","createDB","getDB","savedImagesCache","kvstore","order","batchGetIds","deleteItem","getItem","savedImage","batchResult","setItem","SavedImagesPage","apiSocket","creating","selectedImage","setSelectedImage","showPendingImages","setShowPendingImages","hasMore","setHasMore","setSearch","searchDebounce","setSearchDebounce","bulkDeleteSelecting","setBulkDeleteSelecting","bulkDeleting","setBulkDeleting","bulkDeleteIds","setBulkDeleteIds","setCensorNSFW","handle","clearTimeout","find","imagesResult","sortImages","pollImages","latestCursor","findIndex","deletedIds","updatedImage","timerHandle","uniqueIds","Set","payload","NOTIFICATION_IMAGE_DELETED","isPendingOrProcessing","aScore","bScore","onLoadMore","minUpdatedAt","forEach","imagesById","onThumbnailClicked","onConfirmBulkDelete","Object","keys","completedOrSavedImages","pendingOrProcessingImages","pendingImages","processingImages","Dropdown","Toggle","Menu","Item","dataLength","next","loader","bulkDelete","res","TestPage","originalImage","setOriginalImage","upscaledImage","setUpscaledImage","upscaleImageData","onImageSelected","originalImageData","upscaledTile","upscaledImageData","upscale","feathered","upscaledCanvas","CreditsBalance","free_credits","paid_credits","credits","setCredits","fetchCredits","pollHandle","NOTIFICATION_CREDITS_UPDATED","PricingCard","price","description","buttonText","onButtonClick","Card","Text","paddingRight","RedeemPopup","Spinner","animation","getContent","PricingPage","redeemingState","setRedeemingState","stripe","setStripe","handleBuy","product","alert","baseUrl","product_id","success_url","cancel_url","redirectToCheckout","sessionId","session_id","loadStripe","stripeInstance","loadStripeLibrary","justifyContent","Row","Col","lg","Group","controlId","config","apiUrl","httpClient","localStorage","ApiSocket","updateHttpClient","App","setCredentials","setAssetsUrl","setIsAdmin","features","setFeatures","onLogout","removeItem","init","assets_url","storedCredentials","is_admin","updateToken","connect","path","exact","Homepage","bottom","privacy_uri","terms_uri","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","getElementById","ZoomHelper","startTouches","startZoom","startOffsetX","startOffsetY","originalZoom","getZoom","getOffsetX","getOffsetY","canvasPoint","deltaY","xDiff","yDiff","movementX","movementY","rect","getBoundingClientRect","touches","canvasRect","getCanvas","startTouch1","startTouch2","touch1","touch2","startDistance","clientX","clientY","startCenterX","startCenterY","centerX","centerY","startCanvasPoint","xDiff2","yDiff2","mouseX","mouseY","touchHandle","_pinchZooming","_panning","_updateCursor","touch","identifier","pageX","pageY","screenX","screenY","messageListeners","l","close","WebSocket","onopen","onmessage","onclose","RecentList","listSize","modelsJson","models","recentModels","getRecentItems","modelIndex","splice","unshift","saveRecentItems","recentNegativePrompts","CostIndicator","retry","setRetry","backgroundRepeat","backgroundPosition","readOnly","supportedModels","controlnetTypes","SeedInput","setSeed","useCustomSeed","setUseCustomSeed","FormGroup","FormCheck","random","FormControl","TextInputWithHistory","onBlur","onSelect","eventKey","padding","overflow","defaultNegativePrompt","encoded_image","encoded_mask","getItems","ImagePrompt","setAspectRatio","parentId","setParentId","advancedView","setAdvancedView","setEncodedImage","controlnetType","setControlnetType","cfgScale","setCfgScale","setSize","defaultAspectRatio","setAspectRatioDetails","originalWidth","setOriginalWidth","originalHeight","setOriginalHeight","resetState","addItem","controlnet_type","cfg_scale","bestMatch","scale","file","HTMLCanvasElement","scaledAspectRatio","borderTopLeftRadius","textDecoration","aspectRatioId","toFixed","ModelSelector","ProgressBar","aria-valuenow","aria-valuemin","aria-valuemax","ms","ModelList","selectedModel","innerWidth","innerHeight","setMaxHeight","handleResize","ListGroup","overflowY","active","cache","storage","ttl","expiry","Date","now","itemStr","initialValue","cachedValue","setValue","useCache","setModels","setSelectedModel","searchTerm","setSearchTerm","filteredModels","setSortedModels","recentModelNames","recentModelIndices","sortedModels","aIndex","bIndex","values","sm","showcases","alertType","timeout","ErrorNotification","SuccessNotification","ColorPicker","onColorSelected","displayColorPicker","setDisplayColorPicker","tmpColor","setTmpColor","zIndex","right","hex","onChangeComplete","isDrawing","colorPicking","lastPickedColor","colorPickedListener","drawPoint","getPixel","drawLine","Controls","palette","setPalette","addToPalette","onColorPicked","beginColorpicker","clamp","setSelectionOverlayPreview","upscaleLevel","setCreating","parentImage","setParentImage","loadingParent","setLoadingParent","savingImage","setSavingImage","uploadProgress","setUploadingProgress","errTime","setErrTime","success","setSuccess","successTime","setSuccessTime","outOfCredits","setOutOfCredits","useLocation","scrollTo","encodedJpg","response","onEditNewImage","created_at","created_by","lock","pendingById","statusChange","ignoreQueryPrefix","loadParent","createInput","encodedThumbnail","binaryThumbnailData","uploadUrls","thumbnail_url"],"mappings":"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","file":"static/js/main.0ba2a1c9.chunk.js","sourcesContent":["import React, { FC, useEffect, useRef, useState } from \"react\";\n\nimport { aspectRatios, DEFAULT_ASPECT_RATIO, getClosestAspectRatio } from \"../lib/aspecRatios\";\n\ninterface Props {\n    aspectRatio: number;\n    onChange: (aspectRatio: number) => void;\n    disabled?: boolean;\n}\n\nexport const AspectRatioSelector: FC<Props> = ({ aspectRatio, onChange, disabled }) => {\n    const aspectRatioDetails = aspectRatios[aspectRatio];\n    return (\n        <div className=\"form-group\">\n            <div\n                style={{\n                    minHeight: \"140px\",\n                    display: \"flex\",\n                    alignItems: \"center\",\n                }}\n            >\n                {/* aspect ratio slider, goes from 0 -> aspectRatios.length - 1 */}\n                <div\n                    style={{\n                        width: aspectRatioDetails.width / 8,\n                        height: aspectRatioDetails.height / 8,\n                        // dotted line options: dotted, dashed, solid, double, groove, ridge, inset, outset, none, hidden\n                        border: \"1px dashed white\",\n                        margin: \"auto\",\n                    }}\n                ></div>\n            </div>\n            <label style={{width: \"100%\"}}>\n                Aspect Ratio\n                <small className=\"form-text text-muted\" style={{float: \"right\"}}>\n                    {aspectRatioDetails.displayName}\n                </small>\n            </label>\n            <input\n                type=\"range\"\n                disabled={disabled}\n                className=\"form-control-range\"\n                min={0}\n                max={aspectRatios.length - 1}\n                value={aspectRatio}\n                onChange={(e) => {\n                    onChange(parseInt(e.target.value));\n                }}\n            />\n        </div>\n    );\n};\n","import React, { FC, useState, useEffect } from \"react\";\n\ninterface Props {\n    selectedColor: string;\n    color: string;\n    onClick: (color: string) => void;\n}\n\nexport const PaletteButton: FC<Props> = ({ selectedColor, color, onClick }) => {\n    let className = \"palette-button\";\n    if (selectedColor === color) {\n        className += \" selected\";\n    } else if (color == \"#000000\") {\n        className += \" black\";\n    }\n    return (\n        <div\n            className={className}\n            style={{ backgroundColor: color }}\n            onClick={() => onClick(color)}\n        ></div>\n    );\n};\n","import React, { FC, useEffect, useState } from \"react\";\n\ninterface Props {\n    pendingCount: number;\n    processingCount: number;\n    onClick?: () => void;\n}\n\nexport const PendingImagesThumbnail: FC<Props> = ({\n    pendingCount,\n    processingCount,\n    onClick,\n}) => {\n    const [hover, setHover] = useState(false);\n\n    // on mouse in/out, set hover state\n    const onMouseEnter = () => setHover(true);\n    const onMouseLeave = () => setHover(false);\n    let icon = (\n        <i style={{ marginTop: \"20px\" }} className=\"fa fa-hourglass-half\"></i>\n    );\n\n    if (processingCount > 0) {\n        icon = (\n            <i style={{ marginTop: \"20px\" }} className=\"fa fa-cog fa-spin\"></i>\n        );\n    }\n\n    return (\n        <div\n            onMouseEnter={onMouseEnter}\n            onMouseLeave={onMouseLeave}\n            style={{\n                backgroundImage: `url(/images/default.png)`,\n                backgroundSize: \"contain\",\n                width: \"128px\",\n                height: \"128px\",\n                margin: \"8px\",\n                float: \"left\",\n                cursor: \"pointer\",\n            }}\n            onClick={onClick}\n        >\n            {hover && (\n                <div\n                    style={{\n                        background: \"rgba(255, 255, 255, 0.5)\",\n                        color: \"black\",\n                        width: \"100%\",\n                        height: \"100%\",\n                        lineHeight: \"1\",\n                        fontSize: \"20px\",\n                    }}\n                >\n                    <br/>\n                    {pendingCount > 0 && (\n                        <div style={{ marginBottom: \"24px\" }}>\n                            {pendingCount} pending\n                        </div>\n                    )}\n                    {processingCount > 0 && (\n                        <div>{processingCount} processing</div>\n                    )}\n                </div>\n            )}\n            {!hover && (\n                <div\n                    style={{\n                        background: \"rgba(255, 255, 255, 0.3)\",\n                        color: \"#555\",\n                        width: \"100%\",\n                        height: \"100%\",\n                        fontSize: \"80px\",\n                    }}\n                >\n                    {icon}\n                </div>\n            )}\n        </div>\n    );\n};\n","import React, {FC, useEffect, useState} from \"react\";\nimport { Modal } from \"react-bootstrap\";\nimport { Image } from \"../client/api\";\n\ninterface Props {\n    images: Image[];\n    onDeleteImage: (image: Image) => void;\n    onCancel: () => void;\n    show: boolean;\n}\n\nexport const PendingImages: FC<Props> = ({\n    images,\n    onDeleteImage,\n    onCancel,\n    show,\n}) => {\n\n    function imageIcon(image: Image) {\n        if (image.status === \"pending\") {\n            return <i className=\"fa fa-hourglass-half\"></i>;\n        } else if (image.status === \"processing\") {\n            return <i className=\"fa fa-cog fa-spin\"></i>;\n        }\n    }\n\n    const truncate = (phrases: string) => {\n        if (phrases.length > 35) {\n            return phrases.substring(0, 35) + \"...\";\n        }\n        return phrases;\n    }\n\n    // refactor from table to div layout\n    const pendingDiv = (\n        <div>\n            <div style={{marginBottom: \"8px\"}}>\n                <div style={{display: \"inline-block\", width: \"100px\"}}>\n                    Status\n                </div>\n                <div style={{display: \"inline-block\", width: \"250px\"}}>\n                    Phrases\n                </div>\n                <div style={{display: \"inline-block\", width: \"100px\"}}>\n                    Action\n                </div>\n            </div>\n            {images.map((image) => (\n                <div key={image.id} style={{marginBottom: \"8px\"}}>\n                    <div style={{display: \"inline-block\", width: \"100px\"}}>\n                        {imageIcon(image)}&nbsp;{image.status}\n                    </div>\n                    <div style={{display: \"inline-block\", width: \"250px\"}}>\n                        {/* if more than 30 chars, truncate with ellipsis*/}\n                        {truncate(image.params.prompt || \"\")}\n                    </div>\n                    <div style={{display: \"inline-block\", width: \"100px\"}}>\n                        <button\n                            className=\"btn btn-danger btn-sm image-popup-delete-button\"\n                            onClick={() => onDeleteImage(image)}\n                        >\n                            <i className=\"fa fa-trash\"></i>&nbsp;Delete\n                        </button>\n                    </div>\n                </div>\n            ))}\n        </div>\n    );\n\n    return (\n        <Modal show={show} onHide={onCancel}>\n            <Modal.Header closeButton>\n                <Modal.Title>Pending Images</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                {pendingDiv}\n            </Modal.Body>\n            <Modal.Footer>\n                <button className=\"btn btn-secondary\" onClick={onCancel}>\n                    Close\n                </button>\n            </Modal.Footer>\n        </Modal>\n    );\n};","import React, { useState } from 'react';\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\n\ninterface CopyToClipboardIconProps {\n  text: string;\n}\n\nconst CopyToClipboardIcon: React.FC<CopyToClipboardIconProps> = ({ text }) => {\n  const [copied, setCopied] = useState(false);\n\n  const handleCopy = () => {\n    setCopied(true);\n    setTimeout(() => setCopied(false), 5000); // Reset icon after 5 seconds\n  };\n\n  return (\n    <CopyToClipboard text={text} onCopy={handleCopy}>\n      <span style={{cursor: \"pointer\", marginLeft: \"8px\"}}>\n        {/* <FontAwesomeIcon icon={copied ? faCheck : faCopy} style={{ color: copied ? 'green' : undefined }} /> */}\n        <i className={`fas fa-${copied ? 'check' : 'copy'}`} style={{ color: copied ? 'green' : undefined }} />\n      </span>\n    </CopyToClipboard>\n  );\n};\n\nexport default CopyToClipboardIcon;\n","import React, { FC, useEffect, useRef, useState } from \"react\";\nimport { Modal } from \"react-bootstrap\";\nimport { CreateImageInput, Image, StatusEnum } from \"../client/api\";\nimport { LocalImage } from \"../lib/localImagesStore\";\nimport CopyToClipboard from \"react-copy-to-clipboard\";\nimport CopyToClipboardIcon from \"./CopyToClipboardIcon\";\n\ninterface ImagePopupProps {\n    assetsUrl: string;\n    image: LocalImage;\n    censorNSFW: boolean;\n    onClose: () => void;\n    onDelete?: (image: LocalImage) => void;\n    onFork?: (image: LocalImage) => void;\n    onEdit?: (image: LocalImage) => void;\n    onNSFW?: (image: LocalImage, nsfw: boolean) => void;\n    onSave?: (image: LocalImage) => void;\n}\n\nexport const ImagePopup: FC<ImagePopupProps> = ({\n    assetsUrl,\n    image,\n    censorNSFW,\n    onClose,\n    onDelete,\n    onFork,\n    onEdit,\n    onNSFW,\n    onSave,\n}) => {\n    const img = useRef<HTMLImageElement>(null);\n    let src = `${assetsUrl}/${image.id}.image.png?updated_at=${image.updated_at}`;\n    if (image.imageData) {\n        src = image.imageData;\n    }\n    let score = image.score;\n    if (image.params.negative_prompt && image.negative_score != 0) {\n        score -= image.negative_score;\n    }\n    const [showNSFW, setShowNSFW] = useState(false);\n\n    const statusBadge = (status: string) => {\n        const displayStatus = status.charAt(0).toUpperCase() + status.slice(1);\n        let icon = \"fa fa-question-circle\";\n        switch (status) {\n            case StatusEnum.Pending:\n                icon = \"fas fa-hourglass-half\";\n                break;\n            case StatusEnum.Processing:\n                icon = \"fas fa-cog fa-spin\";\n                break;\n            case StatusEnum.Completed:\n                icon = \"fas fa-check\";\n                break;\n            case StatusEnum.Saved:\n                icon = \"fas fa-save\";\n                break;\n            case StatusEnum.Error:\n                icon = \"fas fa-exclamation-circle\";\n                break;\n        }\n        return (\n            <>\n                <span style={{ fontSize: \"24px\" }}>\n                    <i\n                        className={`${icon} status-badge status-badge-${status}`}\n                        style={{\n                            fontSize: \"10px\",\n                            position: \"relative\",\n                            top: \"-1px\",\n                        }}\n                    ></i>\n                    &nbsp;{displayStatus}\n                </span>\n            </>\n        );\n    };\n\n    useEffect(() => {\n        if (!img.current) {\n            return;\n        }\n        img.current.onerror = () => {\n            if (!img.current) {\n                return;\n            }\n            img.current.src = \"/images/default.png\";\n        };\n    }, [img]);\n\n    let title = image.label;\n    if (!title) {\n        title = image.params.prompt!;\n    }\n    if (title.indexOf(\",\") > 0) {\n        title = title.substring(0, title.indexOf(\",\"));\n    }\n\n    // if open, show modal with image\n    return (\n        <Modal show={true} onHide={onClose} size=\"xl\">\n            <Modal.Header closeButton>\n                <Modal.Title>{title}</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <img\n                    ref={img}\n                    style={{\n                        maxWidth: \"100%\",\n                        maxHeight: \"1024px\",\n                        display: \"block\",\n                        marginLeft: \"auto\",\n                        marginRight: \"auto\",\n                        filter:\n                            image.nsfw && censorNSFW && !showNSFW\n                                ? \"blur(30px)\"\n                                : \"\",\n                    }}\n                    id={`image-popup-${image.id}`}\n                    src={src}\n                    alt={image.label}\n                />\n                {/* List these fields: status, iterations, phrases */}\n                <div className=\"row\">\n                    <div className=\"col-lg-12\"></div>\n                </div>\n                {/* controls */}\n                <div className=\"row\">\n                    <div className=\"col-lg-12\">\n                        <div\n                            className=\"image-popup-controls\"\n                            style={{ marginTop: \"40px\" }}\n                        >\n                            {statusBadge(image.status)}\n                            <div style={{ float: \"right\" }}>\n                                {onFork &&\n                                    (image.status === StatusEnum.Saved ||\n                                        image.status ===\n                                            StatusEnum.Completed) && (\n                                        <button\n                                            className=\"btn btn-secondary btn-sm image-popup-button\"\n                                            onClick={() => onFork(image)}\n                                            style={{ marginRight: \"5px\" }}\n                                        >\n                                            <i className=\"fas fa-code-branch\"></i>\n                                            &nbsp;VARIATIONS\n                                        </button>\n                                    )}\n                                {onDelete && (\n                                    <button\n                                        className=\"btn btn-danger btn-sm image-popup-delete-button\"\n                                        onClick={() =>\n                                            onDelete && onDelete(image)\n                                        }\n                                        style={{ marginRight: \"5px\" }}\n                                    >\n                                        <i className=\"fas fa-trash-alt\"></i>\n                                        &nbsp;DELETE\n                                    </button>\n                                )}\n                                {onEdit && (\n                                    <button\n                                        className=\"btn btn-primary btn-sm image-popup-button edit-button\"\n                                        onClick={() => onEdit && onEdit(image)}\n                                        style={{ marginRight: \"5px\" }}\n                                    >\n                                        <i className=\"fas fa-edit\"></i>\n                                        &nbsp;EDIT\n                                    </button>\n                                )}\n                                {onSave && (\n                                    <button\n                                        className=\"btn btn-primary btn-sm image-popup-button\"\n                                        onClick={() => onSave && onSave(image)}\n                                        style={{ marginRight: \"5px\" }}\n                                    >\n                                        <i className=\"fas fa-save\"></i>\n                                        &nbsp;SAVE\n                                    </button>\n                                )}\n                                {image.nsfw && censorNSFW && (\n                                    <button\n                                        className=\"btn btn-primary btn-sm image-popup-button\"\n                                        onClick={() => setShowNSFW(!showNSFW)}\n                                        style={{ marginRight: \"5px\" }}\n                                    >\n                                        <i className=\"fas fa-eye\"></i>\n                                        &nbsp;{showNSFW ? \"HIDE\" : \"SHOW\"}\n                                    </button>\n                                )}\n                            </div>\n                        </div>\n                        <div\n                            className=\"image-popup-controls\"\n                            style={{ marginTop: \"28px\", marginBottom: \"85px\" }}\n                        >\n                            {/* Horde interface doesn't support score yet */}\n                            {/* <div>\n                                Similarity to prompt: {(score * 200).toFixed(2)}\n                                %\n                            </div> */}\n                            <div>\n                                Image dimensions: {image.params.width} x{\" \"}\n                                {image.params.height}\n                            </div>\n                            <div>Model: {image.model}</div>\n                            {image.nsfw && (\n                                <>\n                                    <div>\n                                        {/* alert warning icon */}\n                                        <i\n                                            className=\"fas fa-exclamation-triangle\"\n                                            style={{\n                                                color: \"orange\",\n                                                fontSize: \"18px\",\n                                                position: \"relative\",\n                                                top: \"2px\",\n                                            }}\n                                        ></i>\n                                        &nbsp;May contain NSFW content\n                                    </div>\n                                    {onNSFW && (\n                                        <a\n                                            href=\"javascript:void(0)\"\n                                            onClick={() => onNSFW(image, false)}\n                                        >\n                                            Mark as Safe for Work\n                                        </a>\n                                    )}\n                                </>\n                            )}\n                            {image.params.seed && (\n                                <div>Seed: {image.params.seed}</div>\n                            )}\n                            {!image.nsfw && (\n                                <>\n                                    <div>\n                                        {/* green check icon */}\n                                        <i\n                                            className=\"fas fa-check\"\n                                            style={{\n                                                color: \"green\",\n                                                fontSize: \"18px\",\n                                                position: \"relative\",\n                                                top: \"2px\",\n                                            }}\n                                        ></i>\n                                        &nbsp;Safe for Work\n                                    </div>\n                                    {onNSFW && (\n                                        <a\n                                            href=\"javascript:void(0)\"\n                                            onClick={() => onNSFW(image, true)}\n                                        >\n                                            Mark as Not Safe for Work\n                                        </a>\n                                    )}\n                                </>\n                            )}\n                            <div style={{marginTop: \"8px\"}}>\n                                Prompt: {image.params.prompt}\n                                <CopyToClipboardIcon text={image.params.prompt!} />\n                            </div>\n                            <div style={{marginTop: \"8px\"}}>\n                                Negative Prompt: {image.params.negative_prompt}\n                                <CopyToClipboardIcon text={image.params.negative_prompt!} />\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </Modal.Body>\n        </Modal>\n    );\n};\n","import React, { FC, useState, useEffect, useRef } from \"react\";\nimport axios from \"axios\";\nimport { Prompt } from \"react-router\";\nimport { loadImageAsync } from \"../../lib/loadImage\";\n\nimport { sleep } from \"../../lib/sleep\";\nimport { defaultArgs } from \"../../components/ImagePrompt\";\nimport { Tool, BaseTool } from \"./tool\";\nimport { Renderer } from \"./renderer\";\nimport { Cursor, Rect } from \"./models\";\nimport {\n    AIBrushApi,\n    CreateImageInput,\n    Image as APIImage,\n    ImageList,\n    StatusEnum,\n} from \"../../client\";\nimport { ZoomHelper } from \"./zoomHelper\";\nimport { getClosestAspectRatio } from \"../../lib/aspecRatios\";\nimport { convertPNGToJPG, ImageUtilWorker, ImageWorkerRequest, loadImageDataElement } from \"../../lib/imageutil\";\nimport { SelectionTool, Controls as SelectionControls } from \"./selection-tool\";\nimport { getUpscaleLevel } from \"../../lib/upscale\";\nimport { ApiSocket, NOTIFICATION_IMAGE_UPDATED } from \"../../lib/apisocket\";\nimport moment from \"moment\";\nimport { supportedModels } from \"../../lib/supportedModels\";\nimport { ProgressBar } from \"../../components/ProgressBar\";\nimport { calculateImagesCost } from \"../../lib/credits\";\nimport { CostIndicator } from \"../../components/CostIndicator\";\nimport ModelSelector from \"../../components/ModelSelector\";\nimport { PencilTool } from \"./pencil-tool\";\nimport { MaskEditor } from \"./mask-editor-controls\";\n\nconst anonymousClient = axios.create();\n\ntype EnhanceToolState =\n    | \"select\"\n    | \"default\"\n    | \"uploading\"\n    | \"processing\"\n    | \"confirm\"\n    | \"erase\"\n    | \"mask\";\n\n// eraser width modifier adds a solid core with a feather edge\n// equal to the what is used on enhanced selections\nconst eraserWidthModifier = 1.3;\n\ninterface ImageWithData extends APIImage {\n    data?: ImageData;\n}\n\nexport class EnhanceTool extends BaseTool implements Tool {\n    readonly selectionTool: SelectionTool;\n    readonly pencilTool: PencilTool;\n\n    private prompt: string = \"\";\n    private negativePrompt: string = \"\";\n    private model: string = \"Epic Diffusion\";\n    private count: number = 4;\n    private variationStrength: number = 0.35;\n    private _dirty = false;\n    private worker: ImageUtilWorker;\n    private idCounter = 0;\n\n    private _state: EnhanceToolState = \"default\";\n    private stateHandler: (state: EnhanceToolState) => void = () => {};\n    private selectionControlsListener: (show: boolean) => void = () => {};\n    private maskHandler: (isMasked: boolean) => void = () => {};\n\n    private imageData: Array<ImageData> = [];\n    private selectedImageDataIndex: number = -1;\n    private selectedImageData: ImageData | null = null;\n    private panning = false;\n    private erasing = false;\n    private progressListener?: (progress: number) => void;\n    private errorListener?: (error: string | null) => void;\n    private dirtyListener?: (dirty: boolean) => void;\n\n    set dirty(dirty: boolean) {\n        this._dirty = dirty;\n        if (this.dirtyListener) {\n            this.dirtyListener(dirty);\n        }\n    }\n\n    get dirty() {\n        return this._dirty;\n    }\n\n    onDirty(listener: (dirty: boolean) => void): void {\n        this.dirtyListener = listener;\n    }\n\n    onError(handler: (error: string | null) => void) {\n        this.errorListener = handler;\n    }\n\n    private notifyError(error: string | null) {\n        if (this.errorListener) {\n            this.errorListener(error);\n        }\n    }\n\n    get state(): EnhanceToolState {\n        return this._state;\n    }\n\n    set state(state: EnhanceToolState) {\n        if (state !== this._state) {\n            if (this._state == \"select\") {\n                this.selectionTool.destroy();\n            }\n            if (this._state === \"mask\") {\n                this.renderer.setCursor(undefined);\n            }\n            if (this._state === \"erase\") {\n                this.renderer.setCursor(undefined);\n            }\n            this._state = state;\n            this.stateHandler(state);\n            if (state == \"confirm\") {\n                this.selectionControlsListener(true);\n            } else {\n                this.selectionControlsListener(false);\n                if (state == \"select\") {\n                    this.selectionTool.updateArgs({\n                        ...this.selectionTool.getArgs(),\n                        outpaint: false,\n                    });\n                }\n            }\n        }\n    }\n\n    selectSupported(): boolean {\n        return !(\n            getUpscaleLevel(\n                this.renderer.getWidth(),\n                this.renderer.getHeight()\n            ) === 0 && this.renderer.getWidth()\n        );\n    }\n\n    constructor(renderer: Renderer) {\n        super(renderer, \"enhance\");\n        this.selectionTool = new SelectionTool(renderer);\n        this.pencilTool = new PencilTool(\n            renderer,\n            \"mask\",\n            \"#000000\",\n            \"mask-editor\"\n        );\n        if (this.selectSupported()) {\n            this.state = \"select\";\n        } else {\n            this.state = \"default\";\n        }\n        let selectionArgs = this.selectionTool.getArgs();\n        if (!this.selectSupported()) {\n            selectionArgs = {\n                ...selectionArgs,\n                selectionOverlay: {\n                    x: 0,\n                    y: 0,\n                    width: this.renderer.getWidth(),\n                    height: this.renderer.getHeight(),\n                },\n            };\n        }\n        this.selectionTool.updateArgs(selectionArgs);\n        this.pencilTool.updateArgs({\n            ...this.pencilTool.getArgs(),\n            brushColor: \"#000000\",\n        });\n        this.worker = new ImageUtilWorker();\n    }\n\n    onMouseDown(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        if (this.state == \"select\") {\n            this.selectionTool.onMouseDown(event);\n            return;\n        }\n        if (this.state == \"mask\") {\n            this.pencilTool.onMouseDown(event);\n            return;\n        }\n        let { x, y } = this.zoomHelper.translateMouseToCanvasCoordinates(\n            event.nativeEvent.offsetX,\n            event.nativeEvent.offsetY\n        );\n        if (event.button === 1) {\n            this.panning = true;\n            return;\n        }\n        if (this.state == \"erase\" && this.selectedImageData) {\n            this.erasing = true;\n            // clone selected ImageData\n            this.selectedImageData = new ImageData(\n                this.selectedImageData.data.slice(),\n                this.selectedImageData.width,\n                this.selectedImageData.height\n            );\n\n            this.erasePoint(x, y);\n        }\n    }\n\n    // TODO: on erase cancel and on erase confirm\n    // either restore the image data from the array\n    // or overwrite the array with the new image data\n\n    private erasePoint(x: number, y: number) {\n        const selectionOverlay = this.renderer.getSelectionOverlay()!;\n        const baseWidth = Math.min(\n            selectionOverlay.width,\n            selectionOverlay.height\n        );\n        const eraserRadius = Math.floor((baseWidth / 8) * eraserWidthModifier);\n\n        const relX = x - selectionOverlay.x;\n        const relY = y - selectionOverlay.y;\n        const imageData = this.selectedImageData!;\n\n        const startX = Math.max(0, relX - eraserRadius);\n        const startY = Math.max(0, relY - eraserRadius);\n        const endX = Math.min(imageData.width, relX + eraserRadius);\n        const endY = Math.min(imageData.height, relY + eraserRadius);\n\n        // relX=64.28541697636388, relY=64.24464312259761, startX=0.28541697636387653, startY=0.24464312259760845, endX=128.28541697636388, endY=128.2446431225976\n\n        for (let i = startX; i < endX; i++) {\n            for (let j = startY; j < endY; j++) {\n                const index = (j * imageData.width + i) * 4;\n                const distance = Math.sqrt(\n                    Math.pow(i - relX, 2) + Math.pow(j - relY, 2)\n                );\n                if (distance < eraserRadius) {\n                    // set alpha to a linear gradient from the center,\n                    // 100% in the middle and 0% at the edge\n                    const alphaPct =\n                        (distance / eraserRadius) * eraserWidthModifier -\n                        (eraserWidthModifier - 1);\n\n                    const alpha = Math.min(\n                        Math.floor(alphaPct * 255),\n                        imageData.data[index + 3]\n                    );\n                    imageData.data[index + 3] = alpha;\n                }\n            }\n        }\n        this.renderer.setEditImage(imageData);\n    }\n\n    private updateCursor(x: number, y: number) {\n        if (this.state == \"erase\" && this.selectedImageData) {\n            const selectionOverlay = this.renderer.getSelectionOverlay()!;\n            const baseWidth = Math.min(\n                selectionOverlay.width,\n                selectionOverlay.height\n            );\n            const featherWidth = Math.floor(baseWidth / 8);\n            this.renderer.setCursor({\n                color: \"white\",\n                radius: featherWidth * eraserWidthModifier,\n                type: \"circle\",\n                x,\n                y,\n            });\n        } else {\n            this.renderer.setCursor({\n                color: \"white\",\n                radius: 10,\n                type: \"crosshairs\",\n                x,\n                y,\n            });\n        }\n    }\n\n    onMouseMove(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        if (this.state == \"select\") {\n            this.selectionTool.onMouseMove(event);\n            return;\n        }\n        if (this.state == \"mask\") {\n            this.pencilTool.onMouseMove(event);\n            return;\n        }\n        let { x, y } = this.zoomHelper.translateMouseToCanvasCoordinates(\n            event.nativeEvent.offsetX,\n            event.nativeEvent.offsetY\n        );\n        if (this.panning) {\n            this.zoomHelper.onPan(event);\n        }\n\n        this.updateCursor(x, y);\n        if (this.erasing) {\n            this.erasePoint(x, y);\n        }\n    }\n\n    onMouseUp(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        if (this.state == \"select\") {\n            this.selectionTool.onMouseUp(event);\n        }\n        if (this.state == \"mask\") {\n            this.pencilTool.onMouseUp(event);\n        }\n        this.panning = false;\n        this.erasing = false;\n    }\n\n    onMouseLeave(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>): void {\n        if (this.state == \"select\") {\n            this.selectionTool.onMouseLeave(event);\n        }\n        if (this.state == \"mask\") {\n            this.pencilTool.onMouseLeave(event);\n        }\n        this.panning = false;\n        this.erasing = false;\n    }\n\n    onWheel(event: WheelEvent) {\n        this.zoomHelper.onWheel(event);\n        let { x, y } = this.zoomHelper.translateMouseToCanvasCoordinates(\n            event.offsetX,\n            event.offsetY\n        );\n        this.updateCursor(x, y);\n    }\n\n    updateArgs(args: any) {\n        args = {\n            ...this.getArgs(),\n            ...args,\n        };\n        this.prompt = args.prompt || \"\";\n        this.negativePrompt = args.negativePrompt || \"\";\n        this.model = args.model || \"Epic Diffusion\";\n        this.count = args.count || 4;\n        this.variationStrength = args.variationStrength || 0.75;\n        console.log(\"updateArgs\", args);\n    }\n\n    onChangeState(handler: (state: EnhanceToolState) => void) {\n        this.stateHandler = handler;\n    }\n\n    onChangeMask(handler: (isMasked: boolean) => void) {\n        this.maskHandler = handler;\n    }\n\n    onShowSelectionControls(listener: (show: boolean) => void): void {\n        this.selectionControlsListener = listener;\n    }\n\n    onProgress(listener: (progress: number) => void): void {\n        this.progressListener = listener;\n    }\n\n    private newId(): string {\n        return `${this.idCounter++}`;\n    }\n\n    private async loadImageData(\n        api: AIBrushApi,\n        imageId: string,\n        maskData: ImageData | undefined,\n        selectionOverlay: Rect\n    ): Promise<ImageData> {\n        const imageElement = await loadImageDataElement(api, imageId);\n        const canvas = document.createElement(\"canvas\");\n        canvas.width = selectionOverlay.width;\n        canvas.height = selectionOverlay.height;\n        const ctx = canvas.getContext(\"2d\");\n        if (!ctx) {\n            throw new Error(\"Failed to get canvas context\");\n        }\n        ctx.drawImage(\n            imageElement,\n            0,\n            0,\n            selectionOverlay.width,\n            selectionOverlay.height\n        );\n        const imageData = ctx.getImageData(\n            0,\n            0,\n            selectionOverlay.width,\n            selectionOverlay.height\n        );\n        const id = this.newId();\n        const req: ImageWorkerRequest = {\n            id,\n            alphaMode: \"none\",\n            feather: true,\n            height: this.renderer.getHeight(),\n            width: this.renderer.getWidth(),\n            pixels: imageData.data,\n            selectionOverlay,\n        }\n        if (maskData) {\n            req.alphaMode = \"mask\";\n            req.alphaPixels = maskData.data;\n        }\n        const resp = await this.worker.processRequest(req);\n        const updatedImageData = new ImageData(\n            resp.pixels,\n            imageData.width,\n            imageData.height\n        );\n        // remove canvas\n        canvas.remove();\n        return updatedImageData;\n    }\n\n    cancel() {\n        if (this.state == \"erase\") {\n            this.state = \"confirm\";\n            this.selectedImageData =\n                this.imageData[this.selectedImageDataIndex];\n            this.renderer.setEditImage(this.selectedImageData);\n        } else {\n            if (this.selectSupported()) {\n                this.state = \"select\";\n            } else {\n                this.state = \"default\";\n            }\n            this.imageData = [];\n            this.renderer.setEditImage(null);\n            this.dirty = false;\n        }\n    }\n\n    erase() {\n        this.state = \"erase\";\n    }\n\n    mask() {\n        if (this.renderer.isMasked()) {\n            this.renderer.deleteMask();\n        }\n        this.renderer.createMask();\n        this.state = \"mask\";\n        this.maskHandler(true);\n    }\n\n    deleteMask() {\n        this.renderer.deleteMask();\n        if (this.state == \"mask\") {\n            this.state = \"default\";\n        }\n        this.maskHandler(false);\n    }\n\n    private updateProgress(progress: number) {\n        if (this.progressListener) {\n            this.progressListener(progress);\n        }\n    }\n\n    async submit(api: AIBrushApi, apisocket: ApiSocket, image: APIImage) {\n        this.dirty = true;\n        this.notifyError(null);\n        const selectionOverlay = this.renderer.getSelectionOverlay();\n        let encodedImage = this.renderer.getEncodedImage(selectionOverlay!);\n        if (!encodedImage) {\n            console.error(\"No selection\");\n            return;\n        }\n        encodedImage = await convertPNGToJPG(encodedImage);\n        let encodedMask: string | undefined;\n        let maskData: ImageData | undefined;\n        if (this.renderer.isMasked()) {\n            encodedMask = this.renderer.getEncodedMask(selectionOverlay!, \"mask\");\n            maskData = this.renderer.getImageData(selectionOverlay!, \"mask\");\n        }\n\n        const input: CreateImageInput = defaultArgs();\n\n        const tmpInitImage = await api.createTemporaryImage(\"jpg\");\n        // convert base64 to binary\n        const binaryImageData = Buffer.from(encodedImage, \"base64\");\n        this.state = \"uploading\";\n        this.updateProgress(0);\n        await anonymousClient.put(\n            tmpInitImage.data.upload_url,\n            binaryImageData,\n            {\n                headers: {\n                    \"Content-Type\": \"image/jpeg\",\n                },\n                onUploadProgress: (progressEvent: any) => {\n                    let percentCompleted =\n                        progressEvent.loaded / progressEvent.total;\n                    if (encodedMask) {\n                        percentCompleted /= 2;\n                    }\n                    this.updateProgress(percentCompleted);\n                },\n            }\n        );\n        input.tmp_jpg_id = tmpInitImage.data.id;\n\n        if (encodedMask) {\n            const tmpMaskImage = await api.createTemporaryImage(\"png\");\n            const binaryMaskData = Buffer.from(encodedMask, \"base64\");\n            await anonymousClient.put(tmpMaskImage.data.upload_url, binaryMaskData, {\n                headers: {\n                    \"Content-Type\": \"image/png\",\n                },\n                onUploadProgress: (progressEvent: any) => {\n                    let percentCompleted = 0.5 + progressEvent.loaded / progressEvent.total / 2;\n                    this.updateProgress(percentCompleted);\n                },\n            });\n            input.tmp_mask_id = tmpMaskImage.data.id;\n        }\n\n        input.label = \"\";\n        input.parent = image.id;\n        input.params.prompt = this.prompt || image.params.prompt;\n        input.params.negative_prompt =\n            this.negativePrompt || image.params.negative_prompt;\n        input.params.denoising_strength = this.variationStrength;\n        input.count = this.count;\n        input.model = this.model;\n        input.nsfw = image.nsfw;\n\n        input.params.width = selectionOverlay!.width;\n        input.params.height = selectionOverlay!.height;\n        // round width and height up to the nearest multiple of 64\n        input.params.width = Math.ceil(input.params.width / 64) * 64;\n        input.params.height = Math.ceil(input.params.height / 64) * 64;\n        input.temporary = true;\n\n        let resp: ImageList | null = null;\n\n        try {\n            resp = (await api.createImage(input)).data;\n        } catch (err) {\n            console.error(\"Error creating images\", err);\n            this.notifyError(\"Failed to create image\");\n            this.state = \"default\";\n            return;\n        }\n        this.state = \"processing\";\n        let newImages: Array<ImageWithData> | undefined = resp.images;\n        if (!newImages || newImages.length === 0) {\n            this.state = \"default\";\n            throw new Error(\"No images returned\");\n        }\n        let completed = false;\n\n        let lastUpdate = moment();\n\n        const onMessage = async (msg: string) => {\n            const img = JSON.parse(msg) as any;\n            if (\n                img.type === NOTIFICATION_IMAGE_UPDATED &&\n                img.status === StatusEnum.Completed\n            ) {\n                lastUpdate = moment();\n                for (let i = 0; i < newImages!.length; i++) {\n                    if (newImages![i].id === img.id) {\n                        const imageData = await this.loadImageData(\n                            api,\n                            newImages![i].id,\n                            maskData,\n                            selectionOverlay!\n                        );\n                        newImages![i].data = imageData;\n                        newImages![i].status = StatusEnum.Completed;\n                    }\n                }\n            } else if (img.status == StatusEnum.Error) {\n                for (let i = 0; i < newImages!.length; i++) {\n                    if (newImages![i].id === img.id) {\n                        newImages![i].status = StatusEnum.Error;\n                    }\n                }\n            }\n        };\n        apisocket.addMessageListener(onMessage);\n        try {\n            let startTime = moment();\n            let lastCheck = moment();\n\n            while (!completed) {\n                let completeCount = 0;\n                await sleep(1000);\n                // poll for completion\n                for (let i = 0; i < newImages!.length; i++) {\n                    if (\n                        newImages![i].status === StatusEnum.Completed ||\n                        newImages![i].status === StatusEnum.Error\n                    ) {\n                        completeCount++;\n                        continue;\n                    }\n                }\n                this.updateProgress(completeCount / newImages!.length);\n                if (completeCount === newImages!.length) {\n                    completed = true;\n                }\n\n                // fallback if sockets don't catch one\n                if (moment().diff(lastCheck, \"seconds\") > 10) {\n                    // get list of ids that aren't completed and batch get them.\n                    const pendingIds = newImages\n                        .filter(\n                            (img) =>\n                                img.status === StatusEnum.Pending ||\n                                img.status === StatusEnum.Processing\n                        )\n                        .map((img) => img.id);\n                    console.log(\"Checking pending images\", pendingIds);\n                    const updatedImagesResult = await api.batchGetImages(\n                        undefined,\n                        {\n                            ids: pendingIds,\n                        }\n                    );\n                    const updatedImages = updatedImagesResult.data.images;\n                    const byId = updatedImages!.reduce((acc, img) => {\n                        acc[img.id] = img;\n                        return acc;\n                    }, {} as Record<string, APIImage>);\n                    for (let i = 0; i < newImages!.length; i++) {\n                        if (\n                            newImages![i].status === StatusEnum.Pending ||\n                            newImages![i].status === StatusEnum.Processing\n                        ) {\n                            const updated = byId[newImages![i].id];\n                            if (updated) {\n                                newImages![i].status = updated.status;\n                                if (updated.status === StatusEnum.Completed) {\n                                    lastUpdate = moment();\n                                    const imageData = await this.loadImageData(\n                                        api,\n                                        newImages![i].id,\n                                        maskData,\n                                        selectionOverlay!\n                                    );\n                                    newImages![i].data = imageData;\n                                }\n                            }\n                        }\n                    }\n                    lastCheck = moment();\n                }\n                // timeout of 2 minutes\n                if (\n                    (lastUpdate.isAfter(startTime) &&\n                        moment().diff(lastUpdate, \"seconds\") > 30) ||\n                    moment().diff(startTime, \"minutes\") > 2\n                ) {\n                    completed = true;\n                }\n            }\n        } finally {\n            apisocket.removeMessageListener(onMessage);\n        }\n\n        // sort images by score descending\n        newImages!.sort((a, b) => {\n            return b.score - a.score;\n        });\n        newImages = newImages!.filter((img) => {\n            return img.status === StatusEnum.Completed;\n        });\n\n        this.imageData = [];\n        for (let i = 0; i < newImages!.length; i++) {\n            if (newImages![i].data) {\n                this.imageData.push(newImages![i].data as ImageData);\n            }\n        }\n        if (this.imageData.length === 0) {\n            this.state = \"default\";\n            this.notifyError(\"No images returned\");\n            return;\n        }\n        this.renderer.setEditImage(this.imageData[0]);\n        this.selectedImageDataIndex = 0;\n        this.selectedImageData = this.imageData[0];\n        this.state = \"confirm\";\n        this.deleteMask();\n    }\n\n    select(direction: \"left\" | \"right\") {\n        if (direction == \"left\") {\n            this.selectedImageDataIndex--;\n            if (this.selectedImageDataIndex < -1) {\n                this.selectedImageDataIndex = this.imageData.length - 1;\n            }\n        }\n        if (direction == \"right\") {\n            this.selectedImageDataIndex++;\n            if (this.selectedImageDataIndex >= this.imageData.length) {\n                this.selectedImageDataIndex = -1;\n            }\n        }\n        if (this.selectedImageDataIndex === -1) {\n            this.selectedImageData = null;\n        } else {\n            this.selectedImageData =\n                this.imageData[this.selectedImageDataIndex];\n        }\n        this.renderer.setEditImage(this.selectedImageData);\n    }\n\n    onSaveImage(listener: (encodedImage: string, args?: any) => void): void {\n        this.saveListener = listener;\n    }\n\n    confirm() {\n        this.renderer.commitSelection();\n        if (this.selectSupported()) {\n            this.state = \"select\";\n        } else {\n            this.state = \"default\";\n        }\n        this.imageData = [];\n        const encodedImage = this.renderer.getEncodedImage(null);\n        if (encodedImage && this.saveListener) {\n            this.saveListener(encodedImage, {\n                phrases: [this.prompt],\n                negative_phrases: [this.negativePrompt],\n                model: this.model,\n            });\n        }\n        this.dirty = false;\n    }\n\n    destroy(): boolean {\n        if (this.renderer.isMasked()) {\n            this.renderer.deleteMask();\n        }\n        this.renderer.setCursor(undefined);\n        this.worker.destroy();\n        return true;\n    }\n}\n\ninterface ControlsProps {\n    api: AIBrushApi;\n    apisocket: ApiSocket;\n    image: APIImage;\n    renderer: Renderer;\n    tool: EnhanceTool;\n}\n\nexport const EnhanceControls: FC<ControlsProps> = ({\n    api,\n    apisocket,\n    image,\n    renderer,\n    tool,\n}) => {\n    const [count, setCount] = useState(4);\n    const [dirty, setDirty] = useState(false);\n    const [variationStrength, setVariationStrength] = useState(0.35);\n    const [prompt, setPrompt] = useState(image.params.prompt || \"\");\n    const [negativePrompt, setNegativePrompt] = useState(\n        image.params.negative_prompt || \"\"\n    );\n    const [model, setModel] = useState(\n        image.model == \"swinir\" || image.model == \"stable_diffusion\"\n            ? \"Epic Diffusion\"\n            : image.model\n    );\n    const [selectingModel, setSelectingModel] = useState<boolean>(false);\n    const [state, setState] = useState<EnhanceToolState>(tool.state);\n    const [isMasked, setIsMasked] = useState<boolean>(tool.renderer.isMasked());\n    const [progress, setProgress] = useState(0);\n    const [error, setError] = useState<string | null>(null);\n\n    tool.onChangeState(setState);\n    tool.onChangeMask(setIsMasked);\n    tool.onProgress(setProgress);\n    tool.onError(setError);\n    tool.onDirty(setDirty);\n\n    const selectionOverlay: Rect =\n        tool.selectionTool.getArgs().selectionOverlay;\n    let cost = count;\n    if (selectionOverlay) {\n        cost = calculateImagesCost(\n            count,\n            selectionOverlay.width,\n            selectionOverlay.height\n        );\n    }\n\n    if (state == \"processing\" || state == \"uploading\") {\n        return (\n            <div style={{ marginTop: \"16px\" }}>\n                <i className=\"fa fa-spinner fa-spin\"></i>&nbsp;{\" \"}\n                {state === \"processing\" ? \"Enhancing...\" : \"Uploading...\"}\n                <br />\n                <ProgressBar progress={progress} />\n            </div>\n        );\n    }\n\n    return (\n        <div\n            style={{\n                marginTop: \"16px\",\n                marginBottom: \"8px\",\n                marginLeft: \"16px\",\n            }}\n        >\n            {error && (\n                <div className=\"alert alert-danger\" role=\"alert\">\n                    {/* dismiss button */}\n                    <button\n                        type=\"button\"\n                        className=\"close\"\n                        data-dismiss=\"alert\"\n                        aria-label=\"Close\"\n                        onClick={() => setError(null)}\n                    >\n                        <span aria-hidden=\"true\">&times;</span>\n                    </button>\n                    {error}\n                </div>\n            )}\n            {state === \"select\" && (\n                <>\n                    <p>\n                        {/* info icon */}\n                        <i className=\"fa fa-info-circle\"></i>&nbsp; Move the\n                        selection rectangle to the area that you want to enhance\n                    </p>\n                    <SelectionControls\n                        renderer={renderer}\n                        tool={tool.selectionTool}\n                        lockAspectRatio={true}\n                    />\n                </>\n            )}\n            {state === \"default\" && (\n                <>\n                    <p>\n                        {/* info icon */}\n                        <i className=\"fa fa-info-circle\"></i>&nbsp; Confirm the\n                        parameters below and continue\n                    </p>\n                    {/* prompt */}\n                    <div className=\"form-group\">\n                        <label htmlFor=\"prompt\">Prompt</label>\n                        <input\n                            type=\"text\"\n                            className=\"form-control\"\n                            id=\"prompt\"\n                            value={prompt}\n                            onChange={(e) => {\n                                setPrompt(e.target.value);\n                            }}\n                        />\n                        <small className=\"form-text text-muted\">\n                            Customize the text prompt here\n                        </small>\n                    </div>\n                    {/* negative prompt */}\n                    <div className=\"form-group\">\n                        <label htmlFor=\"negative-prompt\">Negative Prompt</label>\n                        <input\n                            type=\"text\"\n                            className=\"form-control\"\n                            id=\"negative-prompt\"\n                            value={negativePrompt}\n                            onChange={(e) => {\n                                setNegativePrompt(e.target.value);\n                            }}\n                        />\n                        <small className=\"form-text text-muted\">\n                            Customize the negative text prompt here\n                        </small>\n                    </div>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"count\">Count: {count}</label>\n                        <input\n                            type=\"range\"\n                            className=\"form-control-range\"\n                            id=\"count\"\n                            min=\"1\"\n                            max=\"10\"\n                            step=\"1\"\n                            value={count}\n                            onChange={(e) => {\n                                setCount(parseInt(e.target.value));\n                            }}\n                        />\n                        <small className=\"form-text text-muted\">\n                            Number of enhancement options\n                        </small>\n                    </div>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"variation-strength\">\n                            Variation Strength:{\" \"}\n                            {Math.round(variationStrength * 100)}%\n                        </label>\n                        <input\n                            type=\"range\"\n                            className=\"form-control-range\"\n                            id=\"variation-strength\"\n                            min=\"0\"\n                            max=\"1\"\n                            step=\"0.05\"\n                            value={variationStrength}\n                            onChange={(e) => {\n                                setVariationStrength(\n                                    parseFloat(e.target.value)\n                                );\n                            }}\n                        />\n                        <small className=\"form-text text-muted\">\n                            How much variation to use\n                        </small>\n                    </div>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"model\">Model</label>\n                        {/* <select\n                            className=\"form-control\"\n                            id=\"model\"\n                            value={model}\n                            onChange={(e) => setModel(e.target.value)}\n                        >\n                            {supportedModels.map((model) => (\n                                <option value={model} key={`model-${model}`}>\n                                    {model}\n                                </option>\n                            ))}\n                        </select> */}\n                        <div>\n                            <button\n                                type=\"button\"\n                                className=\"btn btn-secondary light-button\"\n                                onClick={() => setSelectingModel(true)}\n                            >\n                                {model}&nbsp;\n                                <i className=\"fas fa-caret-down\"></i>\n                            </button>\n                        </div>\n                        <small className=\"form-text text-muted\">\n                            Select the model to use\n                        </small>\n                    </div>\n                    <div className=\"form-group\">\n                        <CostIndicator imagesCost={cost} />\n                    </div>\n                </>\n            )}\n            {state === \"erase\" && (\n                <p>\n                    {/* info icon */}\n                    <i className=\"fa fa-info-circle\"></i>&nbsp; Erase any\n                    undesired sections before saving\n                </p>\n            )}\n            {state === \"mask\" && (\n                <MaskEditor\n                    onConfirm={() => (tool.state = \"default\")}\n                    onRevert={() => {\n                        tool.deleteMask();\n                    }}\n                    tool={tool.pencilTool}\n                />\n            )}\n\n            <div className=\"form-group\">\n                {state === \"select\" && (\n                    <button\n                        type=\"button\"\n                        className=\"btn btn-primary btn-sm\"\n                        onClick={() => {\n                            tool.state = \"default\";\n                        }}\n                        style={{ marginRight: \"8px\" }}\n                    >\n                        {/* magic icon */}\n                        <i className=\"fa fa-magic\"></i>&nbsp; Continue\n                    </button>\n                )}\n                {((state === \"default\" && tool.selectSupported()) ||\n                    state === \"confirm\" ||\n                    state === \"erase\") && (\n                    <button\n                        className=\"btn btn-primary btn-sm\"\n                        onClick={() => {\n                            tool.cancel();\n                        }}\n                        style={{ marginRight: \"8px\" }}\n                    >\n                        {/* cancel icon */}\n                        <i className=\"fa fa-times\"></i>&nbsp; Revert\n                    </button>\n                )}\n                {(state === \"confirm\" || state === \"erase\") && (\n                    <button\n                        className=\"btn btn-primary btn-sm\"\n                        onClick={() => tool.confirm()}\n                        style={{ marginRight: \"8px\" }}\n                    >\n                        <i className=\"fa fa-save\"></i>&nbsp; Save\n                    </button>\n                )}\n                {state === \"confirm\" && (\n                    <>\n                        <button\n                            className=\"btn btn-primary btn-sm\"\n                            onClick={() => tool.erase()}\n                            style={{ marginRight: \"8px\" }}\n                        >\n                            <i className=\"fa fa-eraser\"></i>&nbsp; Erase\n                        </button>\n                    </>\n                )}\n                {state === \"default\" && (\n                    <>\n                        <button\n                            className=\"btn btn-primary btn-sm\"\n                            onClick={() => {\n                                tool.updateArgs({\n                                    count,\n                                    variationStrength,\n                                    prompt,\n                                    negativePrompt,\n                                    model,\n                                });\n                                tool.submit(api, apisocket, image);\n                            }}\n                            style={{ marginRight: \"8px\" }}\n                        >\n                            <i className=\"fa fa-magic\"></i>&nbsp; Enhance\n                        </button>\n                        <button\n                            className=\"btn btn-primary btn-sm\"\n                            onClick={() => tool.mask()}\n                            style={{ marginRight: \"8px\" }}\n                        >\n                            <i className=\"fa fa-cut\"></i>&nbsp; Mask\n                        </button>\n                        {isMasked && (\n                            <button\n                                className=\"btn btn-danger btn-sm\"\n                                onClick={() => tool.deleteMask()}\n                                style={{ marginRight: \"8px\" }}\n                            >\n                                <i className=\"fa fa-cut\"></i>&nbsp; Unmask\n                            </button>\n                        )}\n                    </>\n                )}\n            </div>\n            <Prompt\n                when={dirty}\n                message=\"Are you sure you want to leave? Your changes will be lost.\"\n            />\n            {selectingModel && (\n                <ModelSelector\n                    api={api}\n                    onCancel={() => setSelectingModel(false)}\n                    onSelectModel={(model) => {\n                        setModel(model);\n                        setSelectingModel(false);\n                    }}\n                    initialSelectedModel={model}\n                    inpainting={false}\n                />\n            )}\n        </div>\n    );\n};\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * AIBrush API\n * Orchestration backend for AI Brush\n *\n * The version of the OpenAPI document: 1.0.0\n * Contact: admin@aibrush.art\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport { Configuration } from './configuration';\nimport globalAxios, { AxiosPromise, AxiosInstance } from 'axios';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';\n\n/**\n * \n * @export\n * @interface AddMetricItem\n */\nexport interface AddMetricItem {\n    /**\n     * \n     * @type {string}\n     * @memberof AddMetricItem\n     */\n    name: string;\n    /**\n     * \n     * @type {number}\n     * @memberof AddMetricItem\n     */\n    value: number;\n    /**\n     * \n     * @type {string}\n     * @memberof AddMetricItem\n     */\n    type: AddMetricItemTypeEnum;\n    /**\n     * \n     * @type {Array<MetricAttribute>}\n     * @memberof AddMetricItem\n     */\n    attributes: Array<MetricAttribute>;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum AddMetricItemTypeEnum {\n    Gauge = 'gauge',\n    Count = 'count'\n}\n\n/**\n * \n * @export\n * @interface AddMetricsInput\n */\nexport interface AddMetricsInput {\n    /**\n     * \n     * @type {Array<AddMetricItem>}\n     * @memberof AddMetricsInput\n     */\n    metrics: Array<AddMetricItem>;\n}\n/**\n * \n * @export\n * @interface AssetsUrl\n */\nexport interface AssetsUrl {\n    /**\n     * \n     * @type {string}\n     * @memberof AssetsUrl\n     */\n    assets_url: string;\n}\n/**\n * \n * @export\n * @interface BatchGetImagesInput\n */\nexport interface BatchGetImagesInput {\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof BatchGetImagesInput\n     */\n    ids: Array<string>;\n}\n/**\n * \n * @export\n * @interface CreateDepositCodeInput\n */\nexport interface CreateDepositCodeInput {\n    /**\n     * \n     * @type {number}\n     * @memberof CreateDepositCodeInput\n     */\n    amount: number;\n}\n/**\n * \n * @export\n * @interface CreateImageInput\n */\nexport interface CreateImageInput {\n    /**\n     * \n     * @type {StatusEnum}\n     * @memberof CreateImageInput\n     */\n    status?: StatusEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateImageInput\n     */\n    label?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateImageInput\n     */\n    parent?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateImageInput\n     */\n    encoded_image?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateImageInput\n     */\n    encoded_mask?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateImageInput\n     */\n    tmp_image_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateImageInput\n     */\n    tmp_jpg_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateImageInput\n     */\n    tmp_mask_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateImageInput\n     */\n    tmp_thumbnail_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateImageInput\n     */\n    model: string;\n    /**\n     * \n     * @type {ImageParams}\n     * @memberof CreateImageInput\n     */\n    params: ImageParams;\n    /**\n     * \n     * @type {number}\n     * @memberof CreateImageInput\n     */\n    count: number;\n    /**\n     * \n     * @type {boolean}\n     * @memberof CreateImageInput\n     */\n    nsfw?: boolean;\n    /**\n     * \n     * @type {boolean}\n     * @memberof CreateImageInput\n     */\n    temporary?: boolean;\n}\n/**\n * \n * @export\n * @interface CreateStripeSessionInput\n */\nexport interface CreateStripeSessionInput {\n    /**\n     * \n     * @type {string}\n     * @memberof CreateStripeSessionInput\n     */\n    product_id: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateStripeSessionInput\n     */\n    success_url: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateStripeSessionInput\n     */\n    cancel_url: string;\n}\n/**\n * \n * @export\n * @interface Credits\n */\nexport interface Credits {\n    /**\n     * \n     * @type {number}\n     * @memberof Credits\n     */\n    free_credits: number;\n    /**\n     * \n     * @type {number}\n     * @memberof Credits\n     */\n    paid_credits: number;\n}\n/**\n * \n * @export\n * @interface DepositCode\n */\nexport interface DepositCode {\n    /**\n     * \n     * @type {string}\n     * @memberof DepositCode\n     */\n    code: string;\n    /**\n     * \n     * @type {number}\n     * @memberof DepositCode\n     */\n    amount: number;\n}\n/**\n * \n * @export\n * @interface DepositRequest\n */\nexport interface DepositRequest {\n    /**\n     * Amount in credits\n     * @type {number}\n     * @memberof DepositRequest\n     */\n    amount: number;\n}\n/**\n * \n * @export\n * @interface DiscordLogin\n */\nexport interface DiscordLogin {\n    /**\n     * \n     * @type {string}\n     * @memberof DiscordLogin\n     */\n    code: string;\n}\n/**\n * \n * @export\n * @interface FeatureList\n */\nexport interface FeatureList {\n    /**\n     * \n     * @type {string}\n     * @memberof FeatureList\n     */\n    terms_uri?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof FeatureList\n     */\n    privacy_uri?: string;\n}\n/**\n * \n * @export\n * @interface GlobalSettings\n */\nexport interface GlobalSettings {\n    /**\n     * \n     * @type {string}\n     * @memberof GlobalSettings\n     */\n    settings_key: string;\n    /**\n     * \n     * @type {object}\n     * @memberof GlobalSettings\n     */\n    settings_json: object;\n}\n/**\n * \n * @export\n * @interface Healthcheck\n */\nexport interface Healthcheck {\n    /**\n     * \n     * @type {string}\n     * @memberof Healthcheck\n     */\n    status?: HealthcheckStatusEnum;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum HealthcheckStatusEnum {\n    Ok = 'ok'\n}\n\n/**\n * \n * @export\n * @interface Image\n */\nexport interface Image {\n    /**\n     * \n     * @type {string}\n     * @memberof Image\n     */\n    id: string;\n    /**\n     * \n     * @type {number}\n     * @memberof Image\n     */\n    created_at: number;\n    /**\n     * \n     * @type {string}\n     * @memberof Image\n     */\n    created_by: string;\n    /**\n     * \n     * @type {number}\n     * @memberof Image\n     */\n    updated_at: number;\n    /**\n     * \n     * @type {ImageParams}\n     * @memberof Image\n     */\n    params: ImageParams;\n    /**\n     * \n     * @type {string}\n     * @memberof Image\n     */\n    label: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Image\n     */\n    parent: string;\n    /**\n     * \n     * @type {number}\n     * @memberof Image\n     */\n    score: number;\n    /**\n     * \n     * @type {number}\n     * @memberof Image\n     */\n    negative_score: number;\n    /**\n     * \n     * @type {StatusEnum}\n     * @memberof Image\n     */\n    status: StatusEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof Image\n     */\n    model: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof Image\n     */\n    nsfw: boolean;\n    /**\n     * \n     * @type {boolean}\n     * @memberof Image\n     */\n    temporary: boolean;\n    /**\n     * \n     * @type {number}\n     * @memberof Image\n     */\n    deleted_at?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof Image\n     */\n    error?: string;\n}\n/**\n * \n * @export\n * @interface ImageList\n */\nexport interface ImageList {\n    /**\n     * \n     * @type {Array<Image>}\n     * @memberof ImageList\n     */\n    images?: Array<Image>;\n}\n/**\n * \n * @export\n * @interface ImageParams\n */\nexport interface ImageParams {\n    /**\n     * \n     * @type {string}\n     * @memberof ImageParams\n     */\n    prompt?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof ImageParams\n     */\n    steps?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof ImageParams\n     */\n    negative_prompt?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof ImageParams\n     */\n    width?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof ImageParams\n     */\n    height?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof ImageParams\n     */\n    denoising_strength?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof ImageParams\n     */\n    cfg_scale?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof ImageParams\n     */\n    seed?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ImageParams\n     */\n    controlnet_type?: ImageParamsControlnetTypeEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof ImageParams\n     */\n    augmentation?: ImageParamsAugmentationEnum;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum ImageParamsControlnetTypeEnum {\n    Canny = 'canny',\n    Hed = 'hed',\n    Depth = 'depth',\n    Normal = 'normal',\n    Openpose = 'openpose',\n    Seg = 'seg',\n    Scribble = 'scribble',\n    Fakescribbles = 'fakescribbles',\n    Hough = 'hough'\n}\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum ImageParamsAugmentationEnum {\n    FaceRestore = 'face_restore',\n    RemoveBackground = 'remove_background',\n    Upscale = 'upscale'\n}\n\n/**\n * \n * @export\n * @interface ImageUrls\n */\nexport interface ImageUrls {\n    /**\n     * \n     * @type {string}\n     * @memberof ImageUrls\n     */\n    init_image_url?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ImageUrls\n     */\n    image_url?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ImageUrls\n     */\n    mask_url?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ImageUrls\n     */\n    thumbnail_url?: string;\n}\n/**\n * \n * @export\n * @interface InviteCode\n */\nexport interface InviteCode {\n    /**\n     * \n     * @type {string}\n     * @memberof InviteCode\n     */\n    id?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof InviteCode\n     */\n    created_at?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof InviteCode\n     */\n    created_by?: string;\n}\n/**\n * \n * @export\n * @interface IsAdminResponse\n */\nexport interface IsAdminResponse {\n    /**\n     * \n     * @type {boolean}\n     * @memberof IsAdminResponse\n     */\n    is_admin?: boolean;\n}\n/**\n * \n * @export\n * @interface LoginInput\n */\nexport interface LoginInput {\n    /**\n     * \n     * @type {string}\n     * @memberof LoginInput\n     */\n    email?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof LoginInput\n     */\n    invite_code?: string;\n}\n/**\n * \n * @export\n * @interface LoginResult\n */\nexport interface LoginResult {\n    /**\n     * \n     * @type {string}\n     * @memberof LoginResult\n     */\n    accessToken?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof LoginResult\n     */\n    refreshToken?: string;\n}\n/**\n * \n * @export\n * @interface MetricAttribute\n */\nexport interface MetricAttribute {\n    /**\n     * \n     * @type {string}\n     * @memberof MetricAttribute\n     */\n    name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof MetricAttribute\n     */\n    value?: string;\n}\n/**\n * \n * @export\n * @interface Order\n */\nexport interface Order {\n    /**\n     * \n     * @type {string}\n     * @memberof Order\n     */\n    id: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Order\n     */\n    created_by: string;\n    /**\n     * \n     * @type {number}\n     * @memberof Order\n     */\n    created_at: number;\n    /**\n     * \n     * @type {number}\n     * @memberof Order\n     */\n    ends_at: number;\n    /**\n     * \n     * @type {boolean}\n     * @memberof Order\n     */\n    is_active: boolean;\n    /**\n     * \n     * @type {number}\n     * @memberof Order\n     */\n    gpu_count: number;\n    /**\n     * \n     * @type {number}\n     * @memberof Order\n     */\n    amount_paid_cents: number;\n}\n/**\n * \n * @export\n * @interface RefreshLoginInput\n */\nexport interface RefreshLoginInput {\n    /**\n     * \n     * @type {string}\n     * @memberof RefreshLoginInput\n     */\n    refreshToken?: string;\n}\n/**\n * \n * @export\n * @interface StableDiffusionModel\n */\nexport interface StableDiffusionModel {\n    /**\n     * The name of the model\n     * @type {string}\n     * @memberof StableDiffusionModel\n     */\n    name: string;\n    /**\n     * The baseline model used\n     * @type {string}\n     * @memberof StableDiffusionModel\n     */\n    baseline: string;\n    /**\n     * The type of the model (e.g., ckpt)\n     * @type {string}\n     * @memberof StableDiffusionModel\n     */\n    type: string;\n    /**\n     * A short description of the model\n     * @type {string}\n     * @memberof StableDiffusionModel\n     */\n    description: string;\n    /**\n     * Tags associated with the model\n     * @type {Array<string>}\n     * @memberof StableDiffusionModel\n     */\n    tags: Array<string>;\n    /**\n     * A list of URIs for showcase images\n     * @type {Array<string>}\n     * @memberof StableDiffusionModel\n     */\n    showcases: Array<string>;\n    /**\n     * The version of the model\n     * @type {string}\n     * @memberof StableDiffusionModel\n     */\n    version: string;\n    /**\n     * The style of the model (e.g., anime, furry)\n     * @type {string}\n     * @memberof StableDiffusionModel\n     */\n    style: string;\n    /**\n     * Whether the model is Not Safe For Work (NSFW)\n     * @type {boolean}\n     * @memberof StableDiffusionModel\n     */\n    nsfw: boolean;\n    /**\n     * Whether to download all model files\n     * @type {boolean}\n     * @memberof StableDiffusionModel\n     */\n    download_all: boolean;\n    /**\n     * Configuration information for the model\n     * @type {object}\n     * @memberof StableDiffusionModel\n     */\n    config: object;\n    /**\n     * Whether the model is available for use\n     * @type {boolean}\n     * @memberof StableDiffusionModel\n     */\n    available: boolean;\n    /**\n     * Whether the model is an inpainting model\n     * @type {boolean}\n     * @memberof StableDiffusionModel\n     */\n    inpainting: boolean;\n}\n/**\n * \n * @export\n * @enum {string}\n */\n\nexport enum StatusEnum {\n    Pending = 'pending',\n    Processing = 'processing',\n    Completed = 'completed',\n    Saved = 'saved',\n    Error = 'error',\n    Deleted = 'deleted'\n}\n\n/**\n * \n * @export\n * @interface StripeSession\n */\nexport interface StripeSession {\n    /**\n     * \n     * @type {string}\n     * @memberof StripeSession\n     */\n    session_id: string;\n}\n/**\n * \n * @export\n * @interface TemporaryImage\n */\nexport interface TemporaryImage {\n    /**\n     * \n     * @type {string}\n     * @memberof TemporaryImage\n     */\n    id: string;\n    /**\n     * \n     * @type {string}\n     * @memberof TemporaryImage\n     */\n    upload_url: string;\n}\n/**\n * \n * @export\n * @interface UpdateGlobalSettingsRequest\n */\nexport interface UpdateGlobalSettingsRequest {\n    /**\n     * \n     * @type {object}\n     * @memberof UpdateGlobalSettingsRequest\n     */\n    settings_json: object;\n}\n/**\n * \n * @export\n * @interface UpdateImageInput\n */\nexport interface UpdateImageInput {\n    /**\n     * \n     * @type {string}\n     * @memberof UpdateImageInput\n     */\n    label?: string;\n    /**\n     * \n     * @type {StatusEnum}\n     * @memberof UpdateImageInput\n     */\n    status?: StatusEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof UpdateImageInput\n     */\n    encoded_image?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof UpdateImageInput\n     */\n    encoded_npy?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof UpdateImageInput\n     */\n    score?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof UpdateImageInput\n     */\n    negative_score?: number;\n    /**\n     * \n     * @type {boolean}\n     * @memberof UpdateImageInput\n     */\n    nsfw?: boolean;\n    /**\n     * \n     * @type {number}\n     * @memberof UpdateImageInput\n     */\n    deleted_at?: number | null;\n    /**\n     * \n     * @type {string}\n     * @memberof UpdateImageInput\n     */\n    error?: string;\n}\n/**\n * \n * @export\n * @interface UpsertWorkerConfigInput\n */\nexport interface UpsertWorkerConfigInput {\n    /**\n     * \n     * @type {Array<WorkerGpuConfig>}\n     * @memberof UpsertWorkerConfigInput\n     */\n    gpu_configs?: Array<WorkerGpuConfig>;\n}\n/**\n * \n * @export\n * @interface UpsertWorkerInput\n */\nexport interface UpsertWorkerInput {\n    /**\n     * \n     * @type {string}\n     * @memberof UpsertWorkerInput\n     */\n    display_name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof UpsertWorkerInput\n     */\n    status?: UpsertWorkerInputStatusEnum;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum UpsertWorkerInputStatusEnum {\n    Idle = 'idle',\n    Active = 'active'\n}\n\n/**\n * \n * @export\n * @interface User\n */\nexport interface User {\n    /**\n     * \n     * @type {string}\n     * @memberof User\n     */\n    id?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof User\n     */\n    active?: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof User\n     */\n    customer_id?: string;\n}\n/**\n * \n * @export\n * @interface VerifyLoginInput\n */\nexport interface VerifyLoginInput {\n    /**\n     * \n     * @type {string}\n     * @memberof VerifyLoginInput\n     */\n    email?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof VerifyLoginInput\n     */\n    code?: string;\n}\n/**\n * \n * @export\n * @interface Worker\n */\nexport interface Worker {\n    /**\n     * \n     * @type {string}\n     * @memberof Worker\n     */\n    id: string;\n    /**\n     * \n     * @type {number}\n     * @memberof Worker\n     */\n    created_at: number;\n    /**\n     * \n     * @type {string}\n     * @memberof Worker\n     */\n    display_name: string;\n    /**\n     * \n     * @type {number}\n     * @memberof Worker\n     */\n    last_ping?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof Worker\n     */\n    status?: WorkerStatusEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof Worker\n     */\n    login_code?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Worker\n     */\n    engine?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof Worker\n     */\n    num_gpus?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof Worker\n     */\n    cloud_instance_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Worker\n     */\n    gpu_type?: string;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum WorkerStatusEnum {\n    Idle = 'idle',\n    Active = 'active'\n}\n\n/**\n * \n * @export\n * @interface WorkerConfig\n */\nexport interface WorkerConfig {\n    /**\n     * \n     * @type {string}\n     * @memberof WorkerConfig\n     */\n    worker_id: string;\n    /**\n     * \n     * @type {Array<WorkerGpuConfig>}\n     * @memberof WorkerConfig\n     */\n    gpu_configs?: Array<WorkerGpuConfig>;\n}\n/**\n * \n * @export\n * @interface WorkerGpuConfig\n */\nexport interface WorkerGpuConfig {\n    /**\n     * \n     * @type {number}\n     * @memberof WorkerGpuConfig\n     */\n    gpu_num: number;\n    /**\n     * \n     * @type {string}\n     * @memberof WorkerGpuConfig\n     */\n    model: string;\n}\n/**\n * \n * @export\n * @interface WorkerList\n */\nexport interface WorkerList {\n    /**\n     * \n     * @type {Array<Worker>}\n     * @memberof WorkerList\n     */\n    workers?: Array<Worker>;\n}\n/**\n * \n * @export\n * @interface WorkerLoginCode\n */\nexport interface WorkerLoginCode {\n    /**\n     * \n     * @type {string}\n     * @memberof WorkerLoginCode\n     */\n    login_code: string;\n}\n\n/**\n * AIBrushApi - axios parameter creator\n * @export\n */\nexport const AIBrushApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * Add Metrics\n         * @param {AddMetricsInput} [addMetricsInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        addMetrics: async (addMetricsInput?: AddMetricsInput, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/metrics`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(addMetricsInput, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get a list of saved images by id\n         * @param {string} [fields] Comma-separated list of fields to include in the response images. For example: \\&quot;id,params,created_at\\&quot; \n         * @param {BatchGetImagesInput} [batchGetImagesInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        batchGetImages: async (fields?: string, batchGetImagesInput?: BatchGetImagesInput, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/batch-get-images`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (fields !== undefined) {\n                localVarQueryParameter['fields'] = fields;\n            }\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(batchGetImagesInput, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Create a new deposit code\n         * @param {CreateDepositCodeInput} [createDepositCodeInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createDepositCode: async (createDepositCodeInput?: CreateDepositCodeInput, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/deposit-codes`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(createDepositCodeInput, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Create a new image\n         * @param {CreateImageInput} [createImageInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createImage: async (createImageInput?: CreateImageInput, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/images`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(createImageInput, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Create a new invite code\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createInviteCode: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/invite-codes`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Create a new Stripe session\n         * @param {CreateStripeSessionInput} [createStripeSessionInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createStripeSession: async (createStripeSessionInput?: CreateStripeSessionInput, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/stripe-sessions`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(createStripeSessionInput, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Create a new temporary image\n         * @param {string} format \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createTemporaryImage: async (format: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'format' is not null or undefined\n            assertParamExists('createTemporaryImage', 'format', format)\n            const localVarPath = `/api/temporary-images`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (format !== undefined) {\n                localVarQueryParameter['format'] = format;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Delete a saved image\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteImage: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('deleteImage', 'id', id)\n            const localVarPath = `/api/images/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Log in with Discord\n         * @param {DiscordLogin} [discordLogin] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        discordLogin: async (discordLogin?: DiscordLogin, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/discord-login`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(discordLogin, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get the assets url\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getAssetsUrl: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/assets-url`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get the user\\'s credit balance\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getCredits: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/credits`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get the features\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getFeatures: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/features`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get the global settings\n         * @param {string} key \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getGlobalSettings: async (key: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'key' is not null or undefined\n            assertParamExists('getGlobalSettings', 'key', key)\n            const localVarPath = `/api/global-settings/{key}`\n                .replace(`{${\"key\"}}`, encodeURIComponent(String(key)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get a saved image by id\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getImage: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('getImage', 'id', id)\n            const localVarPath = `/api/images/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get the binary image data\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getImageData: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('getImageData', 'id', id)\n            const localVarPath = `/api/images/{id}.image.png`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get download urls for image assets\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getImageDownloadUrls: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('getImageDownloadUrls', 'id', id)\n            const localVarPath = `/api/images/{id}/download-urls`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get upload urls for image assets\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getImageUploadUrls: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('getImageUploadUrls', 'id', id)\n            const localVarPath = `/api/images/{id}/upload-urls`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get the binary mask data\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getMaskData: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('getMaskData', 'id', id)\n            const localVarPath = `/api/images/{id}.mask.png`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Get available models\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getModels: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/stable-diffusion-models`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get the binary thumbnail data\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getThumbnailData: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('getThumbnailData', 'id', id)\n            const localVarPath = `/api/images/{id}.thumbnail.png`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Healthcheck\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        healthcheck: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/healthcheck`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Check if the user is admin\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        isAdmin: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/is-admin`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get a list of saved images\n         * @param {number} [cursor] \n         * @param {string} [filter] \n         * @param {number} [limit] \n         * @param {'asc' | 'desc'} [direction] \n         * @param {string} [fields] Comma-separated list of fields to include in the response images. For example: \\&quot;id,params,created_at\\&quot; \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listImages: async (cursor?: number, filter?: string, limit?: number, direction?: 'asc' | 'desc', fields?: string, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/images`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (cursor !== undefined) {\n                localVarQueryParameter['cursor'] = cursor;\n            }\n\n            if (filter !== undefined) {\n                localVarQueryParameter['filter'] = filter;\n            }\n\n            if (limit !== undefined) {\n                localVarQueryParameter['limit'] = limit;\n            }\n\n            if (direction !== undefined) {\n                localVarQueryParameter['direction'] = direction;\n            }\n\n            if (fields !== undefined) {\n                localVarQueryParameter['fields'] = fields;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Login by email\n         * @param {LoginInput} [loginInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        login: async (loginInput?: LoginInput, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/auth/login`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(loginInput, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Redeem a deposit code\n         * @param {string} code \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        redeemDepositCode: async (code: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'code' is not null or undefined\n            assertParamExists('redeemDepositCode', 'code', code)\n            const localVarPath = `/api/deposit-codes/{code}`\n                .replace(`{${\"code\"}}`, encodeURIComponent(String(code)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Refresh Login code\n         * @param {RefreshLoginInput} [refreshLoginInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        refresh: async (refreshLoginInput?: RefreshLoginInput, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/auth/refresh`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(refreshLoginInput, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Update the global settings\n         * @param {string} key \n         * @param {UpdateGlobalSettingsRequest} [updateGlobalSettingsRequest] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateGlobalSettings: async (key: string, updateGlobalSettingsRequest?: UpdateGlobalSettingsRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'key' is not null or undefined\n            assertParamExists('updateGlobalSettings', 'key', key)\n            const localVarPath = `/api/global-settings/{key}`\n                .replace(`{${\"key\"}}`, encodeURIComponent(String(key)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(updateGlobalSettingsRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Update a saved image\n         * @param {string} id \n         * @param {UpdateImageInput} [updateImageInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateImage: async (id: string, updateImageInput?: UpdateImageInput, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('updateImage', 'id', id)\n            const localVarPath = `/api/images/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(updateImageInput, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Upload the binary image data\n         * @param {string} id \n         * @param {any} [body] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        uploadImageData: async (id: string, body?: any, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('uploadImageData', 'id', id)\n            const localVarPath = `/api/images/{id}.image.png`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'image/png';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Upload the binary thumbnail data\n         * @param {string} id \n         * @param {any} [body] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        uploadThumbnailData: async (id: string, body?: any, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('uploadThumbnailData', 'id', id)\n            const localVarPath = `/api/images/{id}.thumbnail.png`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'image/png';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Verify Login code\n         * @param {VerifyLoginInput} [verifyLoginInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        verify: async (verifyLoginInput?: VerifyLoginInput, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/auth/verify`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(verifyLoginInput, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * AIBrushApi - functional programming interface\n * @export\n */\nexport const AIBrushApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = AIBrushApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * Add Metrics\n         * @param {AddMetricsInput} [addMetricsInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async addMetrics(addMetricsInput?: AddMetricsInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.addMetrics(addMetricsInput, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get a list of saved images by id\n         * @param {string} [fields] Comma-separated list of fields to include in the response images. For example: \\&quot;id,params,created_at\\&quot; \n         * @param {BatchGetImagesInput} [batchGetImagesInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async batchGetImages(fields?: string, batchGetImagesInput?: BatchGetImagesInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImageList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.batchGetImages(fields, batchGetImagesInput, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Create a new deposit code\n         * @param {CreateDepositCodeInput} [createDepositCodeInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createDepositCode(createDepositCodeInput?: CreateDepositCodeInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DepositCode>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.createDepositCode(createDepositCodeInput, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Create a new image\n         * @param {CreateImageInput} [createImageInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createImage(createImageInput?: CreateImageInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImageList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.createImage(createImageInput, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Create a new invite code\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createInviteCode(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InviteCode>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.createInviteCode(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Create a new Stripe session\n         * @param {CreateStripeSessionInput} [createStripeSessionInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createStripeSession(createStripeSessionInput?: CreateStripeSessionInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StripeSession>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.createStripeSession(createStripeSessionInput, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Create a new temporary image\n         * @param {string} format \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createTemporaryImage(format: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TemporaryImage>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.createTemporaryImage(format, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Delete a saved image\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async deleteImage(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteImage(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Log in with Discord\n         * @param {DiscordLogin} [discordLogin] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async discordLogin(discordLogin?: DiscordLogin, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginResult>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.discordLogin(discordLogin, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get the assets url\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getAssetsUrl(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssetsUrl>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getAssetsUrl(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get the user\\'s credit balance\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getCredits(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Credits>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getCredits(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get the features\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getFeatures(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeatureList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getFeatures(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get the global settings\n         * @param {string} key \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getGlobalSettings(key: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GlobalSettings>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getGlobalSettings(key, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get a saved image by id\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getImage(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Image>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getImage(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get the binary image data\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getImageData(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getImageData(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get download urls for image assets\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getImageDownloadUrls(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImageUrls>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getImageDownloadUrls(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get upload urls for image assets\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getImageUploadUrls(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImageUrls>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getImageUploadUrls(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get the binary mask data\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getMaskData(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getMaskData(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Get available models\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getModels(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: StableDiffusionModel; }>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getModels(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get the binary thumbnail data\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getThumbnailData(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getThumbnailData(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Healthcheck\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async healthcheck(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Healthcheck>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.healthcheck(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Check if the user is admin\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async isAdmin(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IsAdminResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.isAdmin(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get a list of saved images\n         * @param {number} [cursor] \n         * @param {string} [filter] \n         * @param {number} [limit] \n         * @param {'asc' | 'desc'} [direction] \n         * @param {string} [fields] Comma-separated list of fields to include in the response images. For example: \\&quot;id,params,created_at\\&quot; \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listImages(cursor?: number, filter?: string, limit?: number, direction?: 'asc' | 'desc', fields?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImageList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.listImages(cursor, filter, limit, direction, fields, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Login by email\n         * @param {LoginInput} [loginInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async login(loginInput?: LoginInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.login(loginInput, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Redeem a deposit code\n         * @param {string} code \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async redeemDepositCode(code: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.redeemDepositCode(code, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Refresh Login code\n         * @param {RefreshLoginInput} [refreshLoginInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async refresh(refreshLoginInput?: RefreshLoginInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginResult>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.refresh(refreshLoginInput, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Update the global settings\n         * @param {string} key \n         * @param {UpdateGlobalSettingsRequest} [updateGlobalSettingsRequest] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async updateGlobalSettings(key: string, updateGlobalSettingsRequest?: UpdateGlobalSettingsRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GlobalSettings>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.updateGlobalSettings(key, updateGlobalSettingsRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Update a saved image\n         * @param {string} id \n         * @param {UpdateImageInput} [updateImageInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async updateImage(id: string, updateImageInput?: UpdateImageInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Image>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.updateImage(id, updateImageInput, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Upload the binary image data\n         * @param {string} id \n         * @param {any} [body] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async uploadImageData(id: string, body?: any, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadImageData(id, body, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Upload the binary thumbnail data\n         * @param {string} id \n         * @param {any} [body] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async uploadThumbnailData(id: string, body?: any, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadThumbnailData(id, body, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Verify Login code\n         * @param {VerifyLoginInput} [verifyLoginInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async verify(verifyLoginInput?: VerifyLoginInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginResult>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.verify(verifyLoginInput, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n    }\n};\n\n/**\n * AIBrushApi - factory interface\n * @export\n */\nexport const AIBrushApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = AIBrushApiFp(configuration)\n    return {\n        /**\n         * Add Metrics\n         * @param {AddMetricsInput} [addMetricsInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        addMetrics(addMetricsInput?: AddMetricsInput, options?: any): AxiosPromise<void> {\n            return localVarFp.addMetrics(addMetricsInput, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get a list of saved images by id\n         * @param {string} [fields] Comma-separated list of fields to include in the response images. For example: \\&quot;id,params,created_at\\&quot; \n         * @param {BatchGetImagesInput} [batchGetImagesInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        batchGetImages(fields?: string, batchGetImagesInput?: BatchGetImagesInput, options?: any): AxiosPromise<ImageList> {\n            return localVarFp.batchGetImages(fields, batchGetImagesInput, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Create a new deposit code\n         * @param {CreateDepositCodeInput} [createDepositCodeInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createDepositCode(createDepositCodeInput?: CreateDepositCodeInput, options?: any): AxiosPromise<DepositCode> {\n            return localVarFp.createDepositCode(createDepositCodeInput, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Create a new image\n         * @param {CreateImageInput} [createImageInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createImage(createImageInput?: CreateImageInput, options?: any): AxiosPromise<ImageList> {\n            return localVarFp.createImage(createImageInput, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Create a new invite code\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createInviteCode(options?: any): AxiosPromise<InviteCode> {\n            return localVarFp.createInviteCode(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Create a new Stripe session\n         * @param {CreateStripeSessionInput} [createStripeSessionInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createStripeSession(createStripeSessionInput?: CreateStripeSessionInput, options?: any): AxiosPromise<StripeSession> {\n            return localVarFp.createStripeSession(createStripeSessionInput, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Create a new temporary image\n         * @param {string} format \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createTemporaryImage(format: string, options?: any): AxiosPromise<TemporaryImage> {\n            return localVarFp.createTemporaryImage(format, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Delete a saved image\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteImage(id: string, options?: any): AxiosPromise<void> {\n            return localVarFp.deleteImage(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Log in with Discord\n         * @param {DiscordLogin} [discordLogin] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        discordLogin(discordLogin?: DiscordLogin, options?: any): AxiosPromise<LoginResult> {\n            return localVarFp.discordLogin(discordLogin, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get the assets url\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getAssetsUrl(options?: any): AxiosPromise<AssetsUrl> {\n            return localVarFp.getAssetsUrl(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get the user\\'s credit balance\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getCredits(options?: any): AxiosPromise<Credits> {\n            return localVarFp.getCredits(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get the features\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getFeatures(options?: any): AxiosPromise<FeatureList> {\n            return localVarFp.getFeatures(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get the global settings\n         * @param {string} key \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getGlobalSettings(key: string, options?: any): AxiosPromise<GlobalSettings> {\n            return localVarFp.getGlobalSettings(key, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get a saved image by id\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getImage(id: string, options?: any): AxiosPromise<Image> {\n            return localVarFp.getImage(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get the binary image data\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getImageData(id: string, options?: any): AxiosPromise<any> {\n            return localVarFp.getImageData(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get download urls for image assets\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getImageDownloadUrls(id: string, options?: any): AxiosPromise<ImageUrls> {\n            return localVarFp.getImageDownloadUrls(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get upload urls for image assets\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getImageUploadUrls(id: string, options?: any): AxiosPromise<ImageUrls> {\n            return localVarFp.getImageUploadUrls(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get the binary mask data\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getMaskData(id: string, options?: any): AxiosPromise<any> {\n            return localVarFp.getMaskData(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Get available models\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getModels(options?: any): AxiosPromise<{ [key: string]: StableDiffusionModel; }> {\n            return localVarFp.getModels(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get the binary thumbnail data\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getThumbnailData(id: string, options?: any): AxiosPromise<any> {\n            return localVarFp.getThumbnailData(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Healthcheck\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        healthcheck(options?: any): AxiosPromise<Healthcheck> {\n            return localVarFp.healthcheck(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Check if the user is admin\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        isAdmin(options?: any): AxiosPromise<IsAdminResponse> {\n            return localVarFp.isAdmin(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get a list of saved images\n         * @param {number} [cursor] \n         * @param {string} [filter] \n         * @param {number} [limit] \n         * @param {'asc' | 'desc'} [direction] \n         * @param {string} [fields] Comma-separated list of fields to include in the response images. For example: \\&quot;id,params,created_at\\&quot; \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listImages(cursor?: number, filter?: string, limit?: number, direction?: 'asc' | 'desc', fields?: string, options?: any): AxiosPromise<ImageList> {\n            return localVarFp.listImages(cursor, filter, limit, direction, fields, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Login by email\n         * @param {LoginInput} [loginInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        login(loginInput?: LoginInput, options?: any): AxiosPromise<void> {\n            return localVarFp.login(loginInput, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Redeem a deposit code\n         * @param {string} code \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        redeemDepositCode(code: string, options?: any): AxiosPromise<void> {\n            return localVarFp.redeemDepositCode(code, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Refresh Login code\n         * @param {RefreshLoginInput} [refreshLoginInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        refresh(refreshLoginInput?: RefreshLoginInput, options?: any): AxiosPromise<LoginResult> {\n            return localVarFp.refresh(refreshLoginInput, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Update the global settings\n         * @param {string} key \n         * @param {UpdateGlobalSettingsRequest} [updateGlobalSettingsRequest] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateGlobalSettings(key: string, updateGlobalSettingsRequest?: UpdateGlobalSettingsRequest, options?: any): AxiosPromise<GlobalSettings> {\n            return localVarFp.updateGlobalSettings(key, updateGlobalSettingsRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Update a saved image\n         * @param {string} id \n         * @param {UpdateImageInput} [updateImageInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateImage(id: string, updateImageInput?: UpdateImageInput, options?: any): AxiosPromise<Image> {\n            return localVarFp.updateImage(id, updateImageInput, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Upload the binary image data\n         * @param {string} id \n         * @param {any} [body] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        uploadImageData(id: string, body?: any, options?: any): AxiosPromise<void> {\n            return localVarFp.uploadImageData(id, body, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Upload the binary thumbnail data\n         * @param {string} id \n         * @param {any} [body] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        uploadThumbnailData(id: string, body?: any, options?: any): AxiosPromise<void> {\n            return localVarFp.uploadThumbnailData(id, body, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Verify Login code\n         * @param {VerifyLoginInput} [verifyLoginInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        verify(verifyLoginInput?: VerifyLoginInput, options?: any): AxiosPromise<LoginResult> {\n            return localVarFp.verify(verifyLoginInput, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * AIBrushApi - object-oriented interface\n * @export\n * @class AIBrushApi\n * @extends {BaseAPI}\n */\nexport class AIBrushApi extends BaseAPI {\n    /**\n     * Add Metrics\n     * @param {AddMetricsInput} [addMetricsInput] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public addMetrics(addMetricsInput?: AddMetricsInput, options?: any) {\n        return AIBrushApiFp(this.configuration).addMetrics(addMetricsInput, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get a list of saved images by id\n     * @param {string} [fields] Comma-separated list of fields to include in the response images. For example: \\&quot;id,params,created_at\\&quot; \n     * @param {BatchGetImagesInput} [batchGetImagesInput] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public batchGetImages(fields?: string, batchGetImagesInput?: BatchGetImagesInput, options?: any) {\n        return AIBrushApiFp(this.configuration).batchGetImages(fields, batchGetImagesInput, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Create a new deposit code\n     * @param {CreateDepositCodeInput} [createDepositCodeInput] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public createDepositCode(createDepositCodeInput?: CreateDepositCodeInput, options?: any) {\n        return AIBrushApiFp(this.configuration).createDepositCode(createDepositCodeInput, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Create a new image\n     * @param {CreateImageInput} [createImageInput] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public createImage(createImageInput?: CreateImageInput, options?: any) {\n        return AIBrushApiFp(this.configuration).createImage(createImageInput, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Create a new invite code\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public createInviteCode(options?: any) {\n        return AIBrushApiFp(this.configuration).createInviteCode(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Create a new Stripe session\n     * @param {CreateStripeSessionInput} [createStripeSessionInput] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public createStripeSession(createStripeSessionInput?: CreateStripeSessionInput, options?: any) {\n        return AIBrushApiFp(this.configuration).createStripeSession(createStripeSessionInput, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Create a new temporary image\n     * @param {string} format \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public createTemporaryImage(format: string, options?: any) {\n        return AIBrushApiFp(this.configuration).createTemporaryImage(format, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Delete a saved image\n     * @param {string} id \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public deleteImage(id: string, options?: any) {\n        return AIBrushApiFp(this.configuration).deleteImage(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Log in with Discord\n     * @param {DiscordLogin} [discordLogin] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public discordLogin(discordLogin?: DiscordLogin, options?: any) {\n        return AIBrushApiFp(this.configuration).discordLogin(discordLogin, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get the assets url\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public getAssetsUrl(options?: any) {\n        return AIBrushApiFp(this.configuration).getAssetsUrl(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get the user\\'s credit balance\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public getCredits(options?: any) {\n        return AIBrushApiFp(this.configuration).getCredits(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get the features\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public getFeatures(options?: any) {\n        return AIBrushApiFp(this.configuration).getFeatures(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get the global settings\n     * @param {string} key \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public getGlobalSettings(key: string, options?: any) {\n        return AIBrushApiFp(this.configuration).getGlobalSettings(key, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get a saved image by id\n     * @param {string} id \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public getImage(id: string, options?: any) {\n        return AIBrushApiFp(this.configuration).getImage(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get the binary image data\n     * @param {string} id \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public getImageData(id: string, options?: any) {\n        return AIBrushApiFp(this.configuration).getImageData(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get download urls for image assets\n     * @param {string} id \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public getImageDownloadUrls(id: string, options?: any) {\n        return AIBrushApiFp(this.configuration).getImageDownloadUrls(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get upload urls for image assets\n     * @param {string} id \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public getImageUploadUrls(id: string, options?: any) {\n        return AIBrushApiFp(this.configuration).getImageUploadUrls(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get the binary mask data\n     * @param {string} id \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public getMaskData(id: string, options?: any) {\n        return AIBrushApiFp(this.configuration).getMaskData(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Get available models\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public getModels(options?: any) {\n        return AIBrushApiFp(this.configuration).getModels(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get the binary thumbnail data\n     * @param {string} id \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public getThumbnailData(id: string, options?: any) {\n        return AIBrushApiFp(this.configuration).getThumbnailData(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Healthcheck\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public healthcheck(options?: any) {\n        return AIBrushApiFp(this.configuration).healthcheck(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Check if the user is admin\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public isAdmin(options?: any) {\n        return AIBrushApiFp(this.configuration).isAdmin(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get a list of saved images\n     * @param {number} [cursor] \n     * @param {string} [filter] \n     * @param {number} [limit] \n     * @param {'asc' | 'desc'} [direction] \n     * @param {string} [fields] Comma-separated list of fields to include in the response images. For example: \\&quot;id,params,created_at\\&quot; \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public listImages(cursor?: number, filter?: string, limit?: number, direction?: 'asc' | 'desc', fields?: string, options?: any) {\n        return AIBrushApiFp(this.configuration).listImages(cursor, filter, limit, direction, fields, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Login by email\n     * @param {LoginInput} [loginInput] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public login(loginInput?: LoginInput, options?: any) {\n        return AIBrushApiFp(this.configuration).login(loginInput, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Redeem a deposit code\n     * @param {string} code \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public redeemDepositCode(code: string, options?: any) {\n        return AIBrushApiFp(this.configuration).redeemDepositCode(code, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Refresh Login code\n     * @param {RefreshLoginInput} [refreshLoginInput] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public refresh(refreshLoginInput?: RefreshLoginInput, options?: any) {\n        return AIBrushApiFp(this.configuration).refresh(refreshLoginInput, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Update the global settings\n     * @param {string} key \n     * @param {UpdateGlobalSettingsRequest} [updateGlobalSettingsRequest] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public updateGlobalSettings(key: string, updateGlobalSettingsRequest?: UpdateGlobalSettingsRequest, options?: any) {\n        return AIBrushApiFp(this.configuration).updateGlobalSettings(key, updateGlobalSettingsRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Update a saved image\n     * @param {string} id \n     * @param {UpdateImageInput} [updateImageInput] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public updateImage(id: string, updateImageInput?: UpdateImageInput, options?: any) {\n        return AIBrushApiFp(this.configuration).updateImage(id, updateImageInput, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Upload the binary image data\n     * @param {string} id \n     * @param {any} [body] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public uploadImageData(id: string, body?: any, options?: any) {\n        return AIBrushApiFp(this.configuration).uploadImageData(id, body, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Upload the binary thumbnail data\n     * @param {string} id \n     * @param {any} [body] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public uploadThumbnailData(id: string, body?: any, options?: any) {\n        return AIBrushApiFp(this.configuration).uploadThumbnailData(id, body, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Verify Login code\n     * @param {VerifyLoginInput} [verifyLoginInput] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public verify(verifyLoginInput?: VerifyLoginInput, options?: any) {\n        return AIBrushApiFp(this.configuration).verify(verifyLoginInput, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n\n\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * AIBrush API\n * Orchestration backend for AI Brush\n *\n * The version of the OpenAPI document: 1.0.0\n * Contact: admin@aibrush.art\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport { Configuration } from \"./configuration\";\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport globalAxios, { AxiosPromise, AxiosInstance } from 'axios';\n\nexport const BASE_PATH = \"https://www.aibrush.art\".replace(/\\/+$/, \"\");\n\n/**\n *\n * @export\n */\nexport const COLLECTION_FORMATS = {\n    csv: \",\",\n    ssv: \" \",\n    tsv: \"\\t\",\n    pipes: \"|\",\n};\n\n/**\n *\n * @export\n * @interface RequestArgs\n */\nexport interface RequestArgs {\n    url: string;\n    options: any;\n}\n\n/**\n *\n * @export\n * @class BaseAPI\n */\nexport class BaseAPI {\n    protected configuration: Configuration | undefined;\n\n    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected axios: AxiosInstance = globalAxios) {\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = configuration.basePath || this.basePath;\n        }\n    }\n};\n\n/**\n *\n * @export\n * @class RequiredError\n * @extends {Error}\n */\nexport class RequiredError extends Error {\n    name: \"RequiredError\" = \"RequiredError\";\n    constructor(public field: string, msg?: string) {\n        super(msg);\n    }\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * AIBrush API\n * Orchestration backend for AI Brush\n *\n * The version of the OpenAPI document: 1.0.0\n * Contact: admin@aibrush.art\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport { Configuration } from \"./configuration\";\nimport { RequiredError,　RequestArgs } from \"./base\";\nimport { AxiosInstance } from 'axios';\n\n/**\n *\n * @export\n */\nexport const DUMMY_BASE_URL = 'https://example.com'\n\n/**\n *\n * @throws {RequiredError}\n * @export\n */\nexport const assertParamExists = function (functionName: string, paramName: string, paramValue: unknown) {\n    if (paramValue === null || paramValue === undefined) {\n        throw new RequiredError(paramName, `Required parameter ${paramName} was null or undefined when calling ${functionName}.`);\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setApiKeyToObject = async function (object: any, keyParamName: string, configuration?: Configuration) {\n    if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n            ? await configuration.apiKey(keyParamName)\n            : await configuration.apiKey;\n        object[keyParamName] = localVarApiKeyValue;\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setBasicAuthToObject = function (object: any, configuration?: Configuration) {\n    if (configuration && (configuration.username || configuration.password)) {\n        object[\"auth\"] = { username: configuration.username, password: configuration.password };\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setBearerAuthToObject = async function (object: any, configuration?: Configuration) {\n    if (configuration && configuration.accessToken) {\n        const accessToken = typeof configuration.accessToken === 'function'\n            ? await configuration.accessToken()\n            : await configuration.accessToken;\n        object[\"Authorization\"] = \"Bearer \" + accessToken;\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setOAuthToObject = async function (object: any, name: string, scopes: string[], configuration?: Configuration) {\n    if (configuration && configuration.accessToken) {\n        const localVarAccessTokenValue = typeof configuration.accessToken === 'function'\n            ? await configuration.accessToken(name, scopes)\n            : await configuration.accessToken;\n        object[\"Authorization\"] = \"Bearer \" + localVarAccessTokenValue;\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setSearchParams = function (url: URL, ...objects: any[]) {\n    const searchParams = new URLSearchParams(url.search);\n    for (const object of objects) {\n        for (const key in object) {\n            if (Array.isArray(object[key])) {\n                searchParams.delete(key);\n                for (const item of object[key]) {\n                    searchParams.append(key, item);\n                }\n            } else {\n                searchParams.set(key, object[key]);\n            }\n        }\n    }\n    url.search = searchParams.toString();\n}\n\n/**\n *\n * @export\n */\nexport const serializeDataIfNeeded = function (value: any, requestOptions: any, configuration?: Configuration) {\n    const nonString = typeof value !== 'string';\n    const needsSerialization = nonString && configuration && configuration.isJsonMime\n        ? configuration.isJsonMime(requestOptions.headers['Content-Type'])\n        : nonString;\n    return needsSerialization\n        ? JSON.stringify(value !== undefined ? value : {})\n        : (value || \"\");\n}\n\n/**\n *\n * @export\n */\nexport const toPathString = function (url: URL) {\n    return url.pathname + url.search + url.hash\n}\n\n/**\n *\n * @export\n */\nexport const createRequestFunction = function (axiosArgs: RequestArgs, globalAxios: AxiosInstance, BASE_PATH: string, configuration?: Configuration) {\n    return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n        const axiosRequestArgs = {...axiosArgs.options, url: (configuration?.basePath || basePath) + axiosArgs.url};\n        return axios.request(axiosRequestArgs);\n    };\n}\n","import React, { FC, useState, useEffect } from \"react\";\nimport { Renderer } from \"./renderer\";\nimport { BaseTool, Tool } from \"./tool\";\nimport { ZoomHelper } from \"./zoomHelper\";\n\nexport class SmudgeTool extends BaseTool implements Tool {\n    private brushSize = 10;\n    private brushOpacity = 0.2;\n\n    private lastX = 0;\n    private lastY = 0;\n    private panning = false;\n    private smudging = false;\n    private _dirty = false;\n\n    set dirty(dirty: boolean) {\n        this._dirty = dirty;\n        if (this.dirtyListener) {\n            this.dirtyListener(dirty);\n        }\n    }\n\n    get dirty() {\n        return this._dirty;\n    }\n\n    private dirtyListener?: (dirty: boolean) => void;\n\n    constructor(renderer: Renderer) {\n        super(renderer, \"smudge\");\n    }\n\n    private sync() {\n        this.renderer.setCursor({\n            type: \"circle\",\n            color: \"white\",\n            radius: this.brushSize / 2,\n            x: this.lastX,\n            y: this.lastY,\n        });\n    }\n\n    updateArgs(args: any) {\n        super.updateArgs(args);\n        this.brushSize = args.brushSize || 10;\n        this.brushOpacity = args.brushOpacity || 0.2;\n        this.sync();\n    }\n\n    onMouseMove(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>): void {\n        let { x, y } = this.zoomHelper.translateMouseToCanvasCoordinates(\n            event.nativeEvent.offsetX,\n            event.nativeEvent.offsetY\n        );\n\n        if (this.panning) {\n            this.zoomHelper.onPan(event);\n        } else if (this.smudging) {\n            this.renderer.smudgeLine(\n                this.lastX,\n                this.lastY,\n                x,\n                y,\n                this.brushSize,\n                this.brushOpacity\n            );\n            this.dirty = true;\n        }\n\n        this.lastX = x;\n        this.lastY = y;\n        this.sync();\n    }\n\n    onWheel(event: WheelEvent) {\n        this.zoomHelper.onWheel(event);\n        this.sync();\n    }\n\n    onMouseDown(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        if (event.button === 0) {\n            this.smudging = true;\n            if (!this.dirty) {\n                this.renderer.copyEditImageFromBaseImage();\n            }\n            this.dirty = true;\n            let { x, y } = this.zoomHelper.translateMouseToCanvasCoordinates(\n                event.nativeEvent.offsetX,\n                event.nativeEvent.offsetY\n            );\n            this.lastX = x;\n            this.lastY = y;\n            this.sync();\n        } else if (event.button === 1) {\n            this.panning = true;\n        }\n        this.sync();\n    }\n\n    onMouseUp(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        this.smudging = false;\n        this.panning = false;\n        this.sync();\n    }\n\n    onSaveImage(listener: (encodedImage: string) => void): void {\n        this.saveListener = listener;\n    }\n\n    onDirty(listener: (dirty: boolean) => void): void {\n        this.dirtyListener = listener;\n    }\n\n    cancel() {\n        // kind of a hack, clears the selection layer\n        this.renderer.setEditImage(null);\n        this.dirty = false;\n    }\n\n    confirm() {\n        this.renderer.commitSelection();\n        const encodedImage = this.renderer.getEncodedImage(null);\n        if (encodedImage && this.saveListener) {\n            this.saveListener(encodedImage);\n        }\n        this.dirty = false;\n    }\n\n    destroy(): boolean {\n        if (this.dirty) {\n            this.renderer.commitSelection();\n        }\n        return true;\n    }\n}\n\ninterface Props {\n    renderer: Renderer;\n    tool: SmudgeTool;\n}\n\nexport const SmudgeControls: FC<Props> = ({ renderer, tool }) => {\n    const [brushSize, setBrushSize] = useState(10);\n    const [brushOpacity, setBrushOpacity] = useState(0.2);\n    const [dirty, setDirty] = useState(false);\n\n    tool.onDirty(setDirty);\n\n    useEffect(() => {\n        tool.updateArgs({\n            brushSize,\n            brushOpacity,\n        });\n    }, [brushSize, brushOpacity]);\n\n    return (\n        <div style={{ marginTop: \"16px\" }}>\n            <div className=\"form-group\">\n                <label style={{ width: \"100%\" }}>\n                    Brush size\n                    <small\n                        className=\"form-text text-muted\"\n                        style={{ float: \"right\" }}\n                    >\n                        {brushSize}px\n                    </small>\n                </label>\n                <input\n                    type=\"range\"\n                    className=\"form-control-range\"\n                    min=\"1\"\n                    max=\"100\"\n                    value={brushSize}\n                    onChange={(e) => setBrushSize(parseInt(e.target.value))}\n                />\n            </div>\n            <div className=\"form-group\">\n                <label style={{ width: \"100%\" }}>\n                    Brush opacity\n                    <small\n                        className=\"form-text text-muted\"\n                        style={{ float: \"right\" }}\n                    >\n                        {Math.round(brushOpacity * 100)}%\n                    </small>\n                </label>\n                <input\n                    type=\"range\"\n                    className=\"form-control-range\"\n                    min=\"0\"\n                    max=\"1\"\n                    step=\"0.01\"\n                    value={brushOpacity}\n                    onChange={(e) =>\n                        setBrushOpacity(parseFloat(e.target.value))\n                    }\n                />\n            </div>\n            <div\n                className=\"form-group\"\n                style={{\n                    marginTop: \"16px\",\n                    visibility: dirty ? \"visible\" : \"hidden\",\n                }}\n            >\n                <button\n                    className=\"btn btn-secondary\"\n                    onClick={() => tool.cancel()}\n                >\n                    Revert\n                </button>\n                <button\n                    className=\"btn btn-primary\"\n                    onClick={() => tool.confirm()}\n                    style={{ marginLeft: \"8px\" }}\n                >\n                    Save\n                </button>\n            </div>\n        </div>\n    );\n};\n","import React, { FC, useState, useEffect, useRef } from \"react\";\nimport axios from \"axios\";\nimport { Prompt } from \"react-router\";\n\nimport { sleep } from \"../../lib/sleep\";\nimport { defaultArgs } from \"../../components/ImagePrompt\";\nimport { Tool, BaseTool } from \"./tool\";\nimport { Renderer } from \"./renderer\";\nimport { SelectionTool } from \"./selection-tool\";\nimport { Cursor, Rect } from \"./models\";\nimport {\n    AIBrushApi,\n    CreateImageInput,\n    Image as APIImage,\n    ImageList,\n    StatusEnum,\n} from \"../../client\";\nimport { ZoomHelper } from \"./zoomHelper\";\nimport { getClosestAspectRatio } from \"../../lib/aspecRatios\";\nimport { getUpscaleLevel } from \"../../lib/upscale\";\nimport {\n    applyAlphaMask,\n    featherEdges,\n    ImageUtilWorker,\n    loadImageDataElement,\n} from \"../../lib/imageutil\";\nimport { ApiSocket, NOTIFICATION_IMAGE_UPDATED } from \"../../lib/apisocket\";\nimport moment from \"moment\";\nimport { ProgressBar } from \"../../components/ProgressBar\";\nimport { calculateImagesCost } from \"../../lib/credits\";\nimport { CostIndicator } from \"../../components/CostIndicator\";\nimport ModelSelector from \"../../components/ModelSelector\";\n\nconst anonymousClient = axios.create();\n\ntype InpaintToolState =\n    | \"select\"\n    | \"erase\"\n    | \"inpaint\"\n    | \"uploading\"\n    | \"processing\"\n    | \"confirm\"\n    | undefined;\n\ninterface ImageWithData extends APIImage {\n    data?: ImageData;\n}\n\nexport class InpaintTool extends BaseTool implements Tool {\n    private selectionTool: SelectionTool;\n    private prompt: string = \"\";\n    private negativePrompt: string = \"\";\n    private count: number = 4;\n    private brushSize: number = 10;\n    private _dirty = false;\n    private worker: ImageUtilWorker;\n    private idCounter = 0;\n\n    private _state: InpaintToolState;\n    private stateHandler: (state: InpaintToolState) => void = () => {};\n    private selectionControlsListener: (show: boolean) => void = () => {};\n\n    private imageData: Array<ImageData> = [];\n    private selectedImageDataIndex: number = -1;\n    private selectedImageData: ImageData | null = null;\n    private panning = false;\n    private erasing = false;\n    private progressListener?: (progress: number) => void;\n    private errorListener?: (error: string | null) => void;\n    private dirtyListener?: (dirty: boolean) => void;\n\n    set dirty(dirty: boolean) {\n        this._dirty = dirty;\n        if (this.dirtyListener) {\n            this.dirtyListener(dirty);\n        }\n    }\n\n    get dirty() {\n        return this._dirty;\n    }\n\n    private newId(): string {\n        return `${this.idCounter++}`;\n    }\n\n    onError(handler: (error: string | null) => void) {\n        this.errorListener = handler;\n    }\n\n    private notifyError(error: string | null) {\n        if (this.errorListener) {\n            this.errorListener(error);\n        }\n    }\n\n    get state(): InpaintToolState {\n        return this._state;\n    }\n\n    set state(state: InpaintToolState) {\n        if (state != this._state) {\n            if (this._state == \"select\") {\n                this.selectionTool.destroy();\n            }\n            if (this._state === \"erase\") {\n                this.renderer.setCursor(undefined);\n            }\n            this._state = state;\n            this.stateHandler(state);\n\n            if (state == \"confirm\") {\n                this.selectionControlsListener(true);\n            } else {\n                this.selectionControlsListener(false);\n                if (state == \"select\") {\n                    const imageWidth = this.renderer.getWidth();\n                    const imageHeight = this.renderer.getHeight();\n                    const selectionWidth = Math.min(\n                        imageWidth,\n                        imageHeight,\n                        512\n                    );\n                    this.selectionTool.updateArgs({\n                        selectionOverlay: {\n                            x: 0,\n                            y: 0,\n                            width: selectionWidth,\n                            height: selectionWidth,\n                        },\n                    });\n                }\n            }\n        }\n    }\n\n    selectSupported(): boolean {\n        // return !(\n        //     this.renderer.getWidth() == this.renderer.getHeight() &&\n        //     getUpscaleLevel(\n        //         this.renderer.getWidth(),\n        //         this.renderer.getHeight()\n        //     ) === 0\n        // );\n        return true;\n    }\n\n    constructor(renderer: Renderer) {\n        super(renderer, \"inpaint\");\n        this.selectionTool = new SelectionTool(renderer);\n        if (this.selectSupported()) {\n            this.state = \"select\";\n            this.selectionTool.updateArgs({\n                outpaint: this.getArgs().outpaint,\n            });\n        } else {\n            this.state = \"erase\";\n        }\n        this.worker = new ImageUtilWorker();\n    }\n\n    onMouseDown(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        if (this.state == \"select\") {\n            this.selectionTool.onMouseDown(event);\n            return;\n        }\n        let { x, y } = this.zoomHelper.translateMouseToCanvasCoordinates(\n            event.nativeEvent.offsetX,\n            event.nativeEvent.offsetY\n        );\n        if (event.button === 1) {\n            this.panning = true;\n            return;\n        }\n        if (this.state == \"erase\") {\n            this.erasing = true;\n            this.erasePoint(x, y);\n        }\n    }\n\n    private erasePoint(x: number, y: number) {\n        if (!this.dirty) {\n            this.dirty = true;\n        }\n        this.renderer.erasePoint(x, y, this.brushSize);\n        this.renderer.render();\n    }\n\n    private updateCursor(x: number, y: number) {\n        if (this.state == \"erase\") {\n            this.renderer.setCursor({\n                color: \"white\",\n                radius: this.brushSize / 2,\n                type: \"circle\",\n                x,\n                y,\n            });\n        } else {\n            this.renderer.setCursor({\n                color: \"white\",\n                radius: 10,\n                type: \"crosshairs\",\n                x,\n                y,\n            });\n        }\n    }\n\n    onMouseMove(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        let { x, y } = this.zoomHelper.translateMouseToCanvasCoordinates(\n            event.nativeEvent.offsetX,\n            event.nativeEvent.offsetY\n        );\n        this.updateCursor(x, y);\n        if (this.state == \"select\") {\n            this.selectionTool.onMouseMove(event);\n            return;\n        }\n\n        if (this.panning) {\n            this.zoomHelper.onPan(event);\n        }\n\n        if (this.erasing) {\n            this.erasePoint(x, y);\n        }\n    }\n\n    onMouseUp(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        if (this.state == \"select\") {\n            this.selectionTool.onMouseUp(event);\n        }\n        this.panning = false;\n        this.erasing = false;\n    }\n\n    onMouseLeave(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>): void {\n        if (this.state == \"select\") {\n            this.selectionTool.onMouseLeave(event);\n        }\n        this.panning = false;\n        this.erasing = false;\n    }\n\n    onWheel(event: WheelEvent) {\n        this.zoomHelper.onWheel(event);\n        let { x, y } = this.zoomHelper.translateMouseToCanvasCoordinates(\n            event.offsetX,\n            event.offsetY\n        );\n        this.updateCursor(x, y);\n    }\n\n    updateArgs(args: any) {\n        args = {\n            ...this.getArgs(),\n            ...args,\n        };\n        super.updateArgs(args);\n        this.prompt = args.prompt || \"\";\n        this.negativePrompt = args.negativePrompt || \"\";\n        this.count = args.count || 4;\n        this.brushSize = args.brushSize || 10;\n\n        this.updateCursor(\n            this.renderer.getWidth() / 2,\n            this.renderer.getHeight() / 2\n        );\n        this.selectionTool.updateArgs({\n            outpaint: args.outpaint,\n        });\n    }\n\n    onChangeState(handler: (state: InpaintToolState) => void) {\n        this.stateHandler = handler;\n    }\n\n    onShowSelectionControls(listener: (show: boolean) => void): void {\n        this.selectionControlsListener = listener;\n    }\n\n    onProgress(listener: (progress: number) => void): void {\n        this.progressListener = listener;\n    }\n\n    private async loadImageData(\n        api: AIBrushApi,\n        imageId: string,\n        alphaMask: ImageData,\n        selectionOverlay: Rect\n    ): Promise<ImageData> {\n        const imageElement = await loadImageDataElement(api, imageId);\n        const canvas = document.createElement(\"canvas\");\n        canvas.width = selectionOverlay.width;\n        canvas.height = selectionOverlay.height;\n        const ctx = canvas.getContext(\"2d\");\n        if (!ctx) {\n            throw new Error(\"Failed to get canvas context\");\n        }\n        ctx.drawImage(\n            imageElement,\n            0,\n            0,\n            selectionOverlay.width,\n            selectionOverlay.height\n        );\n        const imageData = ctx.getImageData(\n            0,\n            0,\n            selectionOverlay.width,\n            selectionOverlay.height\n        );\n\n        const id = this.newId();\n        const resp = await this.worker.processRequest({\n            id,\n            alphaMode: \"alpha\",\n            alphaPixels: alphaMask.data,\n            feather: true,\n            height: this.renderer.getHeight(),\n            width: this.renderer.getWidth(),\n            pixels: imageData.data,\n            selectionOverlay,\n            featherWidth: 10,\n        });\n        const updatedImageData = new ImageData(\n            resp.pixels,\n            imageData.width,\n            imageData.height\n        );\n        // remove canvas\n        canvas.remove();\n        return updatedImageData;\n    }\n\n    cancel() {\n        if (this.selectSupported()) {\n            this.state = \"select\";\n        } else {\n            this.state = \"erase\";\n        }\n        this.renderer.snapshot();\n        this.renderer.undo();\n        this.renderer.clearRedoStack();\n        this.imageData = [];\n        this.renderer.setEditImage(null);\n        this.dirty = false;\n    }\n\n    private updateProgress(progress: number) {\n        if (this.progressListener) {\n            this.progressListener(progress);\n        }\n    }\n\n    async submit(\n        api: AIBrushApi,\n        apisocket: ApiSocket,\n        image: APIImage,\n        model: string\n    ) {\n        this.notifyError(null);\n        let selectionOverlay = this.renderer.getSelectionOverlay();\n        if (!selectionOverlay) {\n            console.error(\"No selection\");\n            return;\n        }\n\n        if (this.getArgs().outpaint) {\n            // check if selection overlay is out of renderer bounds (width, height)\n            if (\n                selectionOverlay.x < 0 ||\n                selectionOverlay.y < 0 ||\n                selectionOverlay.x + selectionOverlay.width >\n                    this.renderer.getWidth() ||\n                selectionOverlay.y + selectionOverlay.height >\n                    this.renderer.getHeight()\n            ) {\n                this.renderer.expandToOverlay();\n                selectionOverlay = this.renderer.getSelectionOverlay()!;\n            }\n        }\n\n        this.state = \"uploading\";\n        this.updateProgress(0);\n\n        // get the erased area, then undo the erase to get the original image\n        const encodedMask = this.renderer.getEncodedMask(selectionOverlay);\n        const maskData = this.renderer.getImageData(selectionOverlay);\n        // hack to restore the image\n        this.renderer.snapshot();\n        this.renderer.undo();\n        this.renderer.clearRedoStack();\n\n        const encodedImage = this.renderer.getEncodedImage(selectionOverlay);\n\n        // upload temporary images in parallel\n        const tmpImagePromises = [\n            api.createTemporaryImage(\"png\"),\n            api.createTemporaryImage(\"png\"),\n        ];\n        const tmpImages = await Promise.all(tmpImagePromises);\n        const binaryImages = [\n            Buffer.from(encodedImage!, \"base64\"),\n            Buffer.from(encodedMask!, \"base64\"),\n        ];\n        const progress = [0, 0];\n        const uploadPromises: Array<Promise<any>> = [];\n        for (let i = 0; i < tmpImages.length; i++) {\n            const tmpImage = tmpImages[i].data;\n            const binaryImage = binaryImages[i];\n            uploadPromises.push(\n                anonymousClient.put(tmpImage.upload_url, binaryImage, {\n                    headers: {\n                        \"Content-Type\": \"image/png\",\n                    },\n                    onUploadProgress: (e) => {\n                        progress[i] = e.loaded / e.total;\n                        this.updateProgress((progress[0] + progress[1]) / 2);\n                    },\n                })\n            );\n        }\n        await Promise.all(uploadPromises);\n\n        const input: CreateImageInput = defaultArgs();\n        input.label = \"\";\n        // input.encoded_image = encodedImage;\n        // input.encoded_mask = encodedMask;\n        input.tmp_image_id = tmpImages[0].data.id;\n        input.tmp_mask_id = tmpImages[1].data.id;\n        input.parent = image.id;\n        input.params.prompt = this.prompt || image.params.prompt;\n        input.params.negative_prompt =\n            this.negativePrompt || image.params.negative_prompt;\n        input.params.denoising_strength = 1;\n        input.count = this.count;\n        input.model = model;\n\n        const closestAspectRatio = getClosestAspectRatio(\n            selectionOverlay!.width,\n            selectionOverlay!.height\n        );\n        input.params.width = closestAspectRatio.width;\n        input.params.height = closestAspectRatio.height;\n        input.temporary = true;\n\n        let resp: ImageList | null = null;\n\n        try {\n            resp = (await api.createImage(input)).data;\n        } catch (err) {\n            console.error(\"Error creating images\", err);\n            this.notifyError(\"Failed to create image\");\n            this.state = \"select\";\n            return;\n        }\n        this.state = \"processing\";\n        this.updateProgress(0);\n        let newImages: Array<ImageWithData> | undefined = resp.images;\n        if (!newImages || newImages.length === 0) {\n            this.state = \"select\";\n            throw new Error(\"No images returned\");\n        }\n        let completed = false;\n        let lastUpdate = moment();\n\n        const onMessage = async (msg: string) => {\n            console.log(\"inpaint onMessage\", msg);\n            const img = JSON.parse(msg) as any;\n            if (\n                img.type === NOTIFICATION_IMAGE_UPDATED &&\n                img.status === StatusEnum.Completed\n            ) {\n                lastUpdate = moment();\n                for (let i = 0; i < newImages!.length; i++) {\n                    if (newImages![i].id === img.id) {\n                        const imageData = await this.loadImageData(\n                            api,\n                            newImages![i].id,\n                            maskData!,\n                            selectionOverlay!\n                        );\n                        newImages![i].data = imageData;\n                        newImages![i].status = StatusEnum.Completed;\n                    }\n                }\n            } else if (img.status === StatusEnum.Error) {\n                for (let i = 0; i < newImages!.length; i++) {\n                    if (newImages![i].id === img.id) {\n                        newImages![i].status = StatusEnum.Error;\n                    }\n                }\n            }\n        };\n        apisocket.addMessageListener(onMessage);\n        try {\n            let startTime = moment();\n            let lastCheck = moment();\n            while (!completed) {\n                let completeCount = 0;\n                await sleep(100);\n                // poll for completion\n                for (let i = 0; i < newImages!.length; i++) {\n                    if (\n                        newImages![i].status === StatusEnum.Completed ||\n                        newImages![i].status === StatusEnum.Error\n                    ) {\n                        completeCount++;\n                        continue;\n                    }\n                }\n                this.updateProgress(completeCount / newImages!.length);\n                if (completeCount === newImages!.length) {\n                    completed = true;\n                    continue;\n                }\n\n                // fallback if sockets don't catch one\n                if (moment().diff(lastCheck, \"seconds\") > 10) {\n                    // get list of ids that aren't completed and batch get them.\n                    const pendingIds = newImages\n                        .filter(\n                            (img) =>\n                                img.status === StatusEnum.Pending ||\n                                img.status === StatusEnum.Processing\n                        )\n                        .map((img) => img.id);\n                    console.log(\"Checking pending images\", pendingIds);\n                    const updatedImagesResult = await api.batchGetImages(\n                        undefined,\n                        {\n                            ids: pendingIds,\n                        }\n                    );\n                    const updatedImages = updatedImagesResult.data.images;\n                    const byId = updatedImages!.reduce((acc, img) => {\n                        acc[img.id] = img;\n                        return acc;\n                    }, {} as Record<string, APIImage>);\n                    for (let i = 0; i < newImages!.length; i++) {\n                        if (\n                            newImages![i].status === StatusEnum.Pending ||\n                            newImages![i].status === StatusEnum.Processing\n                        ) {\n                            const updated = byId[newImages![i].id];\n                            if (updated) {\n                                newImages![i].status = updated.status;\n                                if (updated.status === StatusEnum.Completed) {\n                                    lastUpdate = moment();\n                                    const imageData = await this.loadImageData(\n                                        api,\n                                        newImages![i].id,\n                                        maskData!,\n                                        selectionOverlay!\n                                    );\n                                    newImages![i].data = imageData;\n                                }\n                            }\n                        }\n                    }\n                    lastCheck = moment();\n                }\n                // timeout of 2 minutes\n                if (\n                    (lastUpdate.isAfter(startTime) &&\n                        moment().diff(lastUpdate, \"seconds\") > 30) ||\n                    moment().diff(startTime, \"minutes\") > 2\n                ) {\n                    completed = true;\n                }\n            }\n        } finally {\n            apisocket.removeMessageListener(onMessage);\n        }\n\n        // sort images by score descending\n        newImages!.sort((a, b) => {\n            return b.score - a.score;\n        });\n        newImages = newImages!.filter((img) => {\n            return img.status === StatusEnum.Completed;\n        });\n\n        this.imageData = [];\n        for (let i = 0; i < newImages!.length; i++) {\n            if (newImages![i].data) {\n                this.imageData.push(newImages![i].data as ImageData);\n            }\n        }\n        if (this.imageData.length === 0) {\n            this.state = \"select\";\n            this.notifyError(\"No images returned\");\n            return;\n        }\n        this.renderer.setEditImage(this.imageData[0]);\n        this.selectedImageDataIndex = 0;\n        this.selectedImageData = this.imageData[0];\n        this.state = \"confirm\";\n    }\n\n    onDirty(listener: (dirty: boolean) => void): void {\n        this.dirtyListener = listener;\n    }\n\n    select(direction: \"left\" | \"right\") {\n        if (direction == \"left\") {\n            this.selectedImageDataIndex--;\n            if (this.selectedImageDataIndex < -1) {\n                this.selectedImageDataIndex = this.imageData.length - 1;\n            }\n        }\n        if (direction == \"right\") {\n            this.selectedImageDataIndex++;\n            if (this.selectedImageDataIndex >= this.imageData.length) {\n                this.selectedImageDataIndex = -1;\n            }\n        }\n        if (this.selectedImageDataIndex === -1) {\n            this.selectedImageData = null;\n        } else {\n            this.selectedImageData =\n                this.imageData[this.selectedImageDataIndex];\n        }\n        this.renderer.setEditImage(this.selectedImageData);\n    }\n\n    onSaveImage(listener: (encodedImage: string, args?: any) => void): void {\n        this.saveListener = listener;\n    }\n\n    confirm() {\n        this.renderer.commitSelection();\n\n        this.imageData = [];\n        const encodedImage = this.renderer.getEncodedImage(null);\n        if (encodedImage && this.saveListener) {\n            this.saveListener(encodedImage, {\n                phrases: [this.prompt],\n                negative_phrases: [this.negativePrompt],\n                selection_overlay: this.renderer.getSelectionOverlay(),\n            });\n        }\n        this.dirty = false;\n        if (this.selectSupported()) {\n            this.state = \"select\";\n        } else {\n            this.state = \"erase\";\n        }\n    }\n\n    destroy(): boolean {\n        if (this.dirty) {\n            if (!window.confirm(\"Discard changes?\")) {\n                return false;\n            }\n        }\n        this.renderer.setCursor(undefined);\n        this.renderer.setEditImage(null);\n        this.worker.destroy();\n        return true;\n    }\n}\n\ninterface ControlsProps {\n    api: AIBrushApi;\n    apisocket: ApiSocket;\n    image: APIImage;\n    renderer: Renderer;\n    tool: InpaintTool;\n}\n\nexport const InpaintControls: FC<ControlsProps> = ({\n    api,\n    apisocket,\n    image,\n    renderer,\n    tool,\n}) => {\n    const [count, setCount] = useState(4);\n    const [prompt, setPrompt] = useState(image.params.prompt || \"\");\n    const [negativePrompt, setNegativePrompt] = useState(\n        image.params.negative_prompt || \"\"\n    );\n    const [state, setState] = useState<InpaintToolState>(tool.state);\n    const [progress, setProgress] = useState(0);\n    const [error, setError] = useState<string | null>(null);\n    const [brushSize, setBrushSize] = useState(10);\n    const [dirty, setDirty] = useState(false);\n    const [outpaint, setoutpaint] = useState<boolean | undefined>(\n        tool.getArgs().outpaint\n    );\n    const [model, setModel] = useState(\"Deliberate Inpainting\");\n    const [selectingModel, setSelectingModel] = useState(false);\n\n    useEffect(() => {\n        tool.updateArgs({\n            brushSize,\n        });\n    }, [brushSize]);\n\n    tool.onChangeState(setState);\n    tool.onProgress(setProgress);\n    tool.onError(setError);\n    tool.onDirty(setDirty);\n\n    const onSelectModel = (model: string) => {\n        setModel(model);\n        setSelectingModel(false);\n    };\n\n    if (state === \"uploading\" || state === \"processing\") {\n        return (\n            <div style={{ marginTop: \"16px\" }}>\n                <i className=\"fa fa-spinner fa-spin\"></i>&nbsp;{\" \"}\n                {state === \"uploading\" ? \"Uploading...\" : \"Inpainting...\"}\n                <br />\n                <ProgressBar progress={progress} />\n            </div>\n        );\n    }\n    return (\n        <div\n            style={{\n                marginTop: \"16px\",\n                marginBottom: \"8px\",\n                marginLeft: \"16px\",\n            }}\n        >\n            {error && (\n                <div className=\"alert alert-danger\" role=\"alert\">\n                    {/* dismiss button */}\n                    <button\n                        type=\"button\"\n                        className=\"close\"\n                        data-dismiss=\"alert\"\n                        aria-label=\"Close\"\n                        onClick={() => setError(null)}\n                    >\n                        <span aria-hidden=\"true\">&times;</span>\n                    </button>\n                    {error}\n                </div>\n            )}\n            {state === \"select\" && (\n                <>\n                    <p>\n                        {/* info icon */}\n                        <i className=\"fa fa-info-circle\"></i>&nbsp; Move the\n                        selection rectangle to the area that you want to\n                        inpaint. For outpainting, try zooming out.\n                    </p>\n                    <div className=\"form-group\">\n                        {/* allow outpaint checkbox */}\n                        <div className=\"form-check\">\n                            <input\n                                className=\"form-check-input\"\n                                type=\"checkbox\"\n                                id=\"allowoutpaint\"\n                                checked={!!outpaint}\n                                onChange={(e) => {\n                                    setoutpaint(e.target.checked);\n                                    tool.updateArgs({\n                                        outpaint: e.target.checked,\n                                    });\n                                }}\n                            />\n                            <label\n                                className=\"form-check-label\"\n                                htmlFor=\"allowoutpaint\"\n                            >\n                                Allow outpainting\n                            </label>\n                        </div>\n                    </div>\n                </>\n            )}\n\n            {state === \"erase\" && (\n                <>\n                    <p>\n                        {/* info icon */}\n                        <i className=\"fa fa-info-circle\"></i>&nbsp; Erase the\n                        area that you want to inpaint.\n                    </p>\n                    <div className=\"form-group\">\n                        <label style={{ width: \"100%\" }}>\n                            Brush size\n                            <small\n                                className=\"form-text text-muted\"\n                                style={{ float: \"right\" }}\n                            >\n                                {brushSize}px\n                            </small>\n                        </label>\n                        <input\n                            type=\"range\"\n                            className=\"form-control-range\"\n                            min=\"1\"\n                            max=\"100\"\n                            value={brushSize}\n                            onChange={(e) =>\n                                setBrushSize(parseInt(e.target.value))\n                            }\n                        />\n                    </div>\n                </>\n            )}\n\n            {state === \"inpaint\" && (\n                <>\n                    <p>\n                        {/* info icon */}\n                        <i className=\"fa fa-info-circle\"></i>&nbsp; Confirm the\n                        parameters below and continue\n                    </p>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"prompt\">Prompt</label>\n                        <input\n                            type=\"text\"\n                            className=\"form-control\"\n                            id=\"prompt\"\n                            value={prompt}\n                            onChange={(e) => {\n                                setPrompt(e.target.value);\n                            }}\n                        />\n                        <small className=\"form-text text-muted\">\n                            Customize the text prompt here\n                        </small>\n                    </div>\n                    {/* negative prompt */}\n                    <div className=\"form-group\">\n                        <label htmlFor=\"negativeprompt\">Negative prompt</label>\n                        <input\n                            type=\"text\"\n                            className=\"form-control\"\n                            value={negativePrompt}\n                            onChange={(e) => {\n                                setNegativePrompt(e.target.value);\n                            }}\n                        />\n                        <small className=\"form-text text-muted\">\n                            Customize the negative text prompt here\n                        </small>\n                    </div>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"count\">Count: {count}</label>\n                        <input\n                            type=\"range\"\n                            className=\"form-control-range\"\n                            id=\"count\"\n                            min=\"1\"\n                            max=\"10\"\n                            step=\"1\"\n                            value={count}\n                            onChange={(e) => {\n                                setCount(parseInt(e.target.value));\n                            }}\n                        />\n                        <small className=\"form-text text-muted\">\n                            Number of inpaint options\n                        </small>\n                    </div>\n                    {/* select model dropdown */}\n                    {/* options: stable_diffusion_inpainting, \"Epic Diffusion\", \"Deliberate\" */}\n                    <div className=\"form-group\">\n                        <label htmlFor=\"model\">Model</label>\n                        <div>\n                            <button\n                                type=\"button\"\n                                className=\"btn btn-secondary light-button\"\n                                onClick={() => setSelectingModel(true)}\n                            >\n                                {model}&nbsp;\n                                <i className=\"fas fa-caret-down\"></i>\n                            </button>\n                        </div>\n                        <small className=\"form-text text-muted\">\n                            Select the inpaint model\n                        </small>\n                    </div>\n                    <div className=\"form-group\">\n                        <CostIndicator imagesCost={count} />\n                    </div>\n                </>\n            )}\n\n            {state === \"confirm\" && (\n                <>\n                    <p>\n                        Use the <i className=\"fa fa-arrow-left\"></i> and{\" \"}\n                        <i className=\"fa fa-arrow-right\"></i> buttons to\n                        navigate between the inpaint options\n                    </p>\n                </>\n            )}\n\n            <div className=\"form-group\">\n                {(dirty ||\n                    state === \"confirm\" ||\n                    (state == \"erase\" && tool.selectSupported()) ||\n                    state == \"inpaint\") && (\n                    <button\n                        style={{ marginRight: \"8px\" }}\n                        className=\"btn btn-primary btn-sm\"\n                        onClick={() => {\n                            tool.cancel();\n                        }}\n                    >\n                        {/* cancel icon */}\n                        <i className=\"fa fa-times\"></i>&nbsp; Revert\n                    </button>\n                )}\n\n                {state === \"confirm\" && (\n                    <>\n                        <button\n                            className=\"btn btn-primary btn-sm\"\n                            onClick={() => tool.confirm()}\n                            style={{ marginRight: \"8px\" }}\n                        >\n                            {/* save icon */}\n                            <i className=\"fa fa-save\"></i>&nbsp; Save\n                        </button>\n                    </>\n                )}\n                {state == \"select\" && (\n                    <button\n                        style={{ marginRight: \"8px\" }}\n                        type=\"button\"\n                        className=\"btn btn-primary btn-sm\"\n                        onClick={() => (tool.state = \"erase\")}\n                    >\n                        <i className=\"fa fa-eraser\"></i>&nbsp; Continue\n                    </button>\n                )}\n                {state == \"erase\" && (\n                    <button\n                        style={{ marginRight: \"8px\" }}\n                        type=\"button\"\n                        className=\"btn btn-primary btn-sm\"\n                        onClick={() => (tool.state = \"inpaint\")}\n                    >\n                        <i className=\"fa fa-paint-brush\"></i>&nbsp; Continue\n                    </button>\n                )}\n                {state === \"inpaint\" && (\n                    <button\n                        style={{ marginRight: \"8px\" }}\n                        className=\"btn btn-primary btn-sm\"\n                        onClick={() => {\n                            tool.updateArgs({\n                                count,\n                                prompt,\n                                negativePrompt,\n                            });\n                            tool.submit(api, apisocket, image, model);\n                        }}\n                    >\n                        {/* paint icon */}\n                        <i className=\"fa fa-paint-brush\"></i>&nbsp; Inpaint\n                    </button>\n                )}\n            </div>\n            <Prompt\n                when={dirty}\n                message=\"Are you sure you want to leave? Your changes will be lost.\"\n            />\n            {selectingModel && (\n                <ModelSelector\n                    api={api}\n                    onCancel={() => setSelectingModel(false)}\n                    onSelectModel={onSelectModel}\n                    initialSelectedModel={model}\n                    inpainting={true}\n                />\n            )}\n        </div>\n    );\n};\n","import React, { useState, useEffect, useRef } from \"react\";\nimport { useParams, useHistory } from \"react-router-dom\";\nimport axios, { AxiosInstance } from \"axios\";\nimport * as uuid from \"uuid\";\n\nimport { AIBrushApi } from \"../../client\";\nimport { getUpscaleLevel } from \"../../lib/upscale\";\nimport \"./ImageEditor.css\";\nimport { createRenderer, Renderer } from \"./renderer\";\nimport { Tool, BaseTool } from \"./tool\";\nimport { SelectionTool, Controls as SelectionControls } from \"./selection-tool\";\nimport { EnhanceTool, EnhanceControls } from \"./enhance-tool\";\nimport { PencilTool, Controls as PencilControls, defaultColors } from \"./pencil-tool\";\nimport { SmudgeTool, SmudgeControls } from \"./smudge-tool\";\nimport { ImportExportControls } from \"./import-export\";\nimport { InpaintControls, InpaintTool } from \"./inpaint-tool\";\nimport { AugmentControls } from \"./augment-tool\";\nimport { defaultArgs } from \"../../components/ImagePrompt\";\nimport { ApiSocket } from \"../../lib/apisocket\";\nimport {\n    createEncodedThumbnail,\n    encodedImageToBlob,\n    uploadBlob,\n} from \"../../lib/imageutil\";\nimport { BusyModal } from \"../../components/BusyModal\";\nimport { LocalImage, LocalImagesStore } from \"../../lib/localImagesStore\";\nimport { render } from \"@testing-library/react\";\n\ninterface CanPreventDefault {\n    preventDefault: () => void;\n}\n\ninterface Props {\n    api: AIBrushApi;\n    apisocket: ApiSocket;\n    assetsUrl: string;\n    localImages: LocalImagesStore;\n}\n\ninterface ToolConfig {\n    name: string;\n    iconClass: string;\n    constructor: (r: Renderer) => Tool;\n    renderControls: (t: Tool, renderer: Renderer) => JSX.Element;\n    defaultArgs: any;\n}\n\nexport const anonymousClient = axios.create();\ndelete anonymousClient.defaults.headers.common[\"Authorization\"];\n\nexport const ImageEditor: React.FC<Props> = ({\n    api,\n    apisocket,\n    localImages,\n}) => {\n    const [showSelectionControls, setShowSelectionControls] = useState(false);\n    const tools: Array<ToolConfig> = [\n        {\n            name: \"inpaint\",\n            iconClass: \"fas fa-paint-brush\",\n            constructor: (r: Renderer) => new InpaintTool(r),\n            defaultArgs: {},\n            renderControls: (t: Tool, renderer: Renderer) => {\n                t.onShowSelectionControls(setShowSelectionControls);\n                return (\n                    <InpaintControls\n                        tool={t as InpaintTool}\n                        renderer={renderer}\n                        api={api}\n                        apisocket={apisocket}\n                        image={image!}\n                    />\n                );\n            },\n        },\n        {\n            name: \"enhance\",\n            iconClass: \"fas fa-magic\",\n            constructor: (r: Renderer) => new EnhanceTool(r),\n            defaultArgs: {\n                variationStrength: 0.75,\n            },\n            renderControls: (t: Tool, renderer: Renderer) => {\n                t.onShowSelectionControls(setShowSelectionControls);\n                return (\n                    <EnhanceControls\n                        tool={t as EnhanceTool}\n                        renderer={renderer}\n                        api={api}\n                        apisocket={apisocket}\n                        image={image!}\n                    />\n                );\n            },\n        },\n        {\n            name: \"pencil\",\n            iconClass: \"fas fa-pencil-alt\",\n            constructor: (r: Renderer) => new PencilTool(r, \"base\"),\n            defaultArgs: {},\n            renderControls: (t: Tool, renderer: Renderer) => {\n                return (\n                    <PencilControls\n                        tool={t as PencilTool}\n                        renderer={renderer}\n                        colors={defaultColors}\n                    />\n                );\n            },\n        },\n        {\n            name: \"smudge\",\n            // finger icon\n            iconClass: \"fas fa-hand-pointer\",\n            constructor: (r: Renderer) => new SmudgeTool(r),\n            defaultArgs: {},\n            renderControls: (t: Tool, renderer: Renderer) => {\n                return (\n                    <SmudgeControls\n                        tool={t as SmudgeTool}\n                        renderer={renderer}\n                    />\n                );\n            },\n        },\n        {\n            name: \"import-export\",\n            iconClass: \"fas fa-file-import\",\n            constructor: (r: Renderer) => new BaseTool(r, \"import-export\"),\n            defaultArgs: {},\n            renderControls: (t: Tool, renderer: Renderer) => {\n                return (\n                    <ImportExportControls\n                        renderer={renderer}\n                        tool={t as BaseTool}\n                        api={api}\n                    />\n                );\n            },\n        },\n        {\n            name: \"augment\",\n            iconClass: \"fas fa-image\",\n            constructor: (r: Renderer) => new BaseTool(r, \"augment\"),\n            defaultArgs: {},\n            renderControls: (t: Tool, renderer: Renderer) => {\n                return (\n                    <AugmentControls\n                        renderer={renderer}\n                        tool={t as BaseTool}\n                        api={api}\n                        image={image!}\n                    />\n                );\n            },\n        },\n    ];\n\n    const [image, setImage] = useState<LocalImage | null>(null);\n    const [renderer, setRenderer] = useState<Renderer | null>(null);\n    const [tool, setTool] = useState<Tool | null>(null);\n    const [canUndo, setCanUndo] = useState(false);\n    const [canRedo, setCanRedo] = useState(false);\n    const [busyMessage, setBusyMessage] = useState<string | null>(null);\n\n    const { id } = useParams<{ id: string }>();\n    const history = useHistory();\n\n    const canvasRef = useRef<HTMLCanvasElement>(null);\n\n    const onSelectTool = (toolconfig: ToolConfig) => {\n        if (renderer) {\n            if (tool) {\n                if (!tool.destroy()) {\n                    return;\n                }\n            }\n            const newTool = toolconfig.constructor(renderer);\n            setTool(newTool);\n            newTool.onSaveImage((encodedImage, args = {}) => {\n                console.log(\"Saving image...\");\n                saveNewImage(encodedImage, args);\n            });\n        }\n    };\n\n    /**\n     * Saves a new image to the server\n     *\n     * @param encodedImage base64 encoded image\n     * @param newArgs may contain new phrases and negative phrases\n     */\n    const saveNewImage = async (encodedImage: string, newArgs: any) => {\n        if (!image || !encodedImage) {\n            throw new Error(\"Cannot save new image without existing image\");\n        }\n        if (!renderer) {\n            throw new Error(\"Cannot save new image without renderer\");\n        }\n        setBusyMessage(\"Saving image...\");\n        try {\n            const newImage: LocalImage = {\n                ...image,\n                params: {\n                    ...image.params,\n                    width: renderer!.getWidth() as any,\n                    height: renderer!.getHeight() as any,\n                },\n                id: uuid.v4(),\n                imageData: `data:image/png;base64,${encodedImage}`,\n            };\n            await localImages.saveImage(newImage);\n\n            // switch url and state to new image\n            setImage(newImage);\n            history.replace(`/image-editor/${newImage.id}`);\n        } finally {\n            setBusyMessage(null);\n        }\n    };\n\n    useEffect(() => {\n        if (image) {\n            return;\n        }\n\n        async function loadImage() {\n            const localImage = await localImages.getImage(id);\n            let imageSrc = \"\";\n            if (localImage) {\n                setImage(localImage);\n                imageSrc = localImage.imageData!;\n            } else {\n                const image = (await api.getImage(id)).data;\n                setImage(image);\n                const download_urls = await api.getImageDownloadUrls(id);\n                // Loading up data as binary, base64 encoding into image url\n                // bypasses browser security nonsense about cross-domain images\n                const resp = await anonymousClient.get(\n                    download_urls.data.image_url!,\n                    {\n                        responseType: \"arraybuffer\",\n                    }\n                );\n                const binaryImageData = Buffer.from(resp.data, \"binary\");\n                const base64ImageData = binaryImageData.toString(\"base64\");\n                imageSrc = `data:image/png;base64,${base64ImageData}`;\n            }\n\n            const imageElement = new Image();\n            imageElement.src = imageSrc;\n            imageElement.onload = () => {\n                if (!canvasRef.current) {\n                    console.error(\"Failed to get canvas\");\n                    return;\n                }\n                const renderer = createRenderer(canvasRef.current);\n                renderer.setBaseImage(imageElement);\n                setRenderer(renderer);\n            };\n        }\n        loadImage();\n    }, [image, id]);\n\n    // this covers the case that an image is upscaled to max, the upscale tool needs to\n    // be hidden and deselected.\n    useEffect(() => {\n        if (\n            image &&\n            tool &&\n            tool.name == \"upscale\" &&\n            image.params.width! * image.params.height! >= 2048 * 2048\n        ) {\n            onSelectTool(tools[0]);\n        }\n    }, [image, tool]);\n\n    useEffect(() => {\n        if (renderer) {\n            onSelectTool(tools[0]);\n            renderer.onSnapshot(() => {\n                setCanUndo(renderer.canUndo());\n                setCanRedo(renderer.canRedo());\n            });\n        }\n    }, [renderer]);\n\n    useEffect(() => {\n        if (canvasRef.current) {\n            const listener = (e: WheelEvent) => {\n                if (tool) {\n                    e.preventDefault();\n                    tool.onWheel(e);\n                }\n            };\n            canvasRef.current.addEventListener(\"wheel\", listener);\n            return () => {\n                canvasRef.current?.removeEventListener(\"wheel\", listener);\n            };\n        }\n    }, [tool, canvasRef.current]);\n\n    function renderTool(t: ToolConfig) {\n        if (!image) {\n            return null;\n        }\n        if (\n            t.name == \"upscale\" &&\n            image.params.width! * image.params.height! >= 2048 * 2048\n        ) {\n            return null;\n        }\n        let buttonClass = `btn btn-secondary light-button image-editor-tool-button`;\n        const isSelected = tool && tool.name == t.name;\n        if (isSelected) {\n            buttonClass = `btn btn-primary image-editor-tool-button`;\n        }\n        return (\n            <div className=\"form-group\" key={t.name}>\n                <button className={buttonClass} onClick={() => onSelectTool(t)}>\n                    <i className={t.iconClass}></i>\n                </button>\n                {/* capitalize tool name */}\n                <label>\n                    {t.name.charAt(0).toUpperCase() + t.name.slice(1)}\n                </label>\n                {isSelected && t.renderControls(tool!, renderer!)}\n            </div>\n        );\n    }\n\n    function preventDefault(e: CanPreventDefault): boolean {\n        e.preventDefault();\n        return true;\n    }\n\n    return (\n        <>\n            <div className=\"row\">\n                <div className=\"col-12\">\n                    <h1 style={{ fontSize: \"40px\", textAlign: \"left\" }}>\n                        <i\n                            style={{ cursor: \"pointer\" }}\n                            onClick={() => history.push(`/images/${id}`)}\n                            className=\"fas fa-chevron-left\"\n                        ></i>\n                        &nbsp; AI Edit\n                    </h1>\n                </div>\n            </div>\n            <div\n                className=\"row\"\n                style={{ marginTop: \"32px\", paddingBottom: \"120px\" }}\n            >\n                <div className=\"col-lg-3\">\n                    {renderer && (\n                        <>\n                            {tools.map((tool) => renderTool(tool))}\n                            {(canRedo || canUndo) && (\n                                <div className=\"form-group\">\n                                    <div className=\"btn-group\">\n                                        <button\n                                            className=\"btn btn-primary image-popup-button\"\n                                            disabled={!renderer || !canUndo}\n                                            onClick={() =>\n                                                renderer && renderer.undo()\n                                            }\n                                        >\n                                            {/* undo */}\n                                            <i className=\"fas fa-undo\"></i>\n                                        </button>\n                                        <button\n                                            className=\"btn btn-primary image-popup-button\"\n                                            disabled={!renderer || !canRedo}\n                                            onClick={() =>\n                                                renderer && renderer.redo()\n                                            }\n                                        >\n                                            <i className=\"fas fa-redo\"></i>\n                                        </button>\n                                    </div>\n                                </div>\n                            )}\n                        </>\n                    )}\n                </div>\n                <div className=\"col-lg-9\">\n                    <div style={{ verticalAlign: \"middle\" }}>\n                        <div>\n                            <canvas\n                                style={{\n                                    cursor: \"none\",\n                                    touchAction: \"none\",\n                                    userSelect: \"none\",\n                                }}\n                                ref={canvasRef}\n                                className=\"image-editor-canvas\"\n                                onMouseDown={(e) =>\n                                    preventDefault(e) &&\n                                    tool &&\n                                    tool.onMouseDown(e)\n                                }\n                                onMouseMove={(e) =>\n                                    preventDefault(e) &&\n                                    tool &&\n                                    tool.onMouseMove(e)\n                                }\n                                onMouseUp={(e) =>\n                                    preventDefault(e) &&\n                                    tool &&\n                                    tool.onMouseUp(e)\n                                }\n                                onMouseLeave={(e) =>\n                                    preventDefault(e) &&\n                                    tool &&\n                                    tool.onMouseLeave(e)\n                                }\n                                onTouchStart={(e) =>\n                                    preventDefault(e) &&\n                                    tool &&\n                                    tool.onTouchStart(e)\n                                }\n                                onTouchMove={(e) =>\n                                    preventDefault(e) &&\n                                    tool &&\n                                    tool.onTouchMove(e)\n                                }\n                                onTouchEnd={(e) =>\n                                    preventDefault(e) &&\n                                    tool &&\n                                    tool.onTouchEnd(e)\n                                }\n                            ></canvas>\n                            {showSelectionControls && (\n                                <>\n                                    <button\n                                        className=\"btn btn-secondary canvas-select-left\"\n                                        onClick={() => tool!.select(\"left\")}\n                                    >\n                                        <i className=\"fas fa-chevron-left\"></i>\n                                    </button>\n                                    <button\n                                        className=\"btn btn-secondary canvas-select-right\"\n                                        onClick={() => tool!.select(\"right\")}\n                                    >\n                                        <i className=\"fas fa-chevron-right\"></i>\n                                    </button>\n                                </>\n                            )}\n                        </div>\n                    </div>\n                    <div className=\"row\">\n                        <button\n                            className=\"btn btn-primary\"\n                            // center horizontally\n                            style={{\n                                position: \"absolute\",\n                                left: \"50%\",\n                                transform: \"translate(-50%, 0)\",\n                            }}\n                            onClick={() => {\n                                if (renderer) {\n                                    renderer.resetView();\n                                }\n                            }}\n                        >\n                            {/* reset zoom */}\n                            <i className=\"fas fa-search-plus\"></i>&nbsp; Reset\n                            View\n                        </button>\n                        {/* redo */}\n                    </div>\n                    {/* vertically center button within the div */}\n                </div>\n            </div>\n            {busyMessage && (\n                <BusyModal show={true} title=\"Please Wait\">\n                    {busyMessage}\n                </BusyModal>\n            )}\n        </>\n    );\n};\n","import { Cursor, Rect } from \"./models\";\n\nconst maxSnapshots = 10;\n\nexport class Renderer {\n    private undoStack: ImageData[] = [];\n    private redoStack: ImageData[] = [];\n    private currentSnapshot: ImageData | undefined;\n\n    private backgroundLayer: HTMLCanvasElement;\n    private baseImageLayer: HTMLCanvasElement;\n    private editLayer: HTMLCanvasElement;\n    private maskLayer: HTMLCanvasElement | undefined;\n    // private overlayLayer: HTMLCanvasElement;\n\n    private selectionOverlay: Rect | undefined;\n    private selectionOverlayPreview: Rect | undefined;\n    private hasSelection: boolean = false;\n    private cursor: Cursor | undefined;\n\n    private zoom: number;\n    private offsetX: number;\n    private offsetY: number;\n    private width = 0;\n    private height = 0;\n\n    private snapshotListener: (() => void) | null = null;\n\n    constructor(private readonly canvas: HTMLCanvasElement) {\n        canvas.width = 512;\n        canvas.height = 512;\n        // invisible canvas elements\n        this.backgroundLayer = document.createElement(\"canvas\");\n        this.backgroundLayer.width = 512;\n        this.backgroundLayer.height = 512;\n        this.baseImageLayer = document.createElement(\"canvas\");\n        this.editLayer = document.createElement(\"canvas\");\n        // this.overlayLayer = document.createElement(\"canvas\");\n\n        this.zoom = 1;\n        this.offsetX = 0;\n        this.offsetY = 0;\n    }\n\n    undo(allowRedo: boolean = true) {\n        if (this.undoStack.length > 0 && this.currentSnapshot) {\n            const imageData = this.undoStack.pop()!;\n            if (allowRedo) {\n                this.redoStack.push(this.currentSnapshot);\n            }\n            this.currentSnapshot = imageData;\n            // set as base image\n            const ctx = this.baseImageLayer.getContext(\"2d\");\n            if (ctx) {\n                ctx.clearRect(\n                    0,\n                    0,\n                    this.baseImageLayer.width,\n                    this.baseImageLayer.height\n                );\n                ctx.putImageData(imageData, 0, 0);\n                this.render();\n            }\n            this.notifySnapshotListener();\n        }\n    }\n\n    redo() {\n        if (this.redoStack.length > 0 && this.currentSnapshot) {\n            this.undoStack.push(this.currentSnapshot);\n            const imageData = this.redoStack.pop()!;\n            this.currentSnapshot = imageData;\n\n            // set as base image\n            const ctx = this.baseImageLayer.getContext(\"2d\");\n            if (ctx) {\n                ctx.putImageData(imageData, 0, 0);\n                this.render();\n            }\n            this.notifySnapshotListener();\n        }\n    }\n\n    clearRedoStack() {\n        this.redoStack = [];\n        this.notifySnapshotListener();\n    }\n\n    canUndo(): boolean {\n        return !this.hasSelection && this.undoStack.length > 0;\n    }\n\n    canRedo(): boolean {\n        return !this.hasSelection && this.redoStack.length > 0;\n    }\n\n    onSnapshot(listener: () => void) {\n        this.snapshotListener = listener;\n    }\n\n    snapshot() {\n        const ctx = this.baseImageLayer.getContext(\"2d\");\n        if (ctx) {\n            const snapshot = ctx.getImageData(\n                0,\n                0,\n                this.baseImageLayer.width,\n                this.baseImageLayer.height\n            );\n            if (this.currentSnapshot) {\n                this.undoStack.push(this.currentSnapshot);\n                this.currentSnapshot = snapshot;\n                if (this.redoStack.length > 0) {\n                    this.redoStack = [];\n                }\n                if (this.undoStack.length > maxSnapshots) {\n                    this.undoStack.shift();\n                }\n            } else {\n                this.currentSnapshot = snapshot;\n            }\n\n            this.notifySnapshotListener();\n        }\n    }\n\n    private notifySnapshotListener() {\n        if (this.snapshotListener) {\n            this.snapshotListener();\n        }\n    }\n\n    render() {\n        const context = this.canvas.getContext(\"2d\");\n        if (context) {\n            context.clearRect(0, 0, this.width, this.height);\n            context.drawImage(this.backgroundLayer, 0, 0);\n            // apply zoom and offset\n            context.setTransform(\n                this.zoom,\n                0,\n                0,\n                this.zoom,\n                this.offsetX * this.zoom,\n                this.offsetY * this.zoom\n            );\n            // context.drawImage(this.backgroundLayer, 0, 0);\n            context.drawImage(this.baseImageLayer, 0, 0);\n            context.drawImage(this.editLayer, 0, 0);\n            // draw this.maskLayer at 0.3 opacity\n            if (this.maskLayer) {\n                context.globalAlpha = 0.3;\n                context.drawImage(this.maskLayer, 0, 0);\n                context.globalAlpha = 1;\n            }\n\n            // context.drawImage(this.overlayLayer, 0, 0);\n            this.drawOverlay(context, this.width, this.height);\n            context.setTransform(1, 0, 0, 1, 0, 0);\n        }\n    }\n\n    createMask() {\n        this.maskLayer = document.createElement(\"canvas\");\n        this.maskLayer.width = this.width;\n        this.maskLayer.height = this.height;\n        this.resetMask();\n    }\n\n    resetMask() {\n        if (this.maskLayer) {\n            const ctx = this.maskLayer.getContext(\"2d\");\n            if (ctx) {\n                ctx.fillStyle = \"#FFFFFF\";\n                ctx.fillRect(0, 0, this.width, this.height);\n            }\n            this.render();\n        }\n    }\n\n    deleteMask() {\n        this.maskLayer = undefined;\n        this.render();\n    }\n\n    isMasked() {\n        return this.maskLayer !== undefined;\n    }\n\n    getCanvas(): HTMLCanvasElement {\n        return this.canvas;\n    }\n\n    private initializeBackgroundLayer() {\n        // checkered background\n        // #DEDEDE\n        // #FFFFFF\n        // 10x10 pixel squares\n        const ctx = this.backgroundLayer.getContext(\"2d\");\n        if (ctx) {\n            const pattern = ctx.createPattern(\n                this.createCheckeredPattern(20, 20, \"#808080\", \"#AAAAAA\"),\n                \"repeat\"\n            );\n            if (pattern) {\n                ctx.fillStyle = pattern;\n                ctx.fillRect(\n                    0,\n                    0,\n                    this.backgroundLayer.width,\n                    this.backgroundLayer.height\n                );\n            }\n        }\n    }\n\n    private createCheckeredPattern(\n        width: number,\n        height: number,\n        color1: string,\n        color2: string\n    ): HTMLCanvasElement {\n        const canvas = document.createElement(\"canvas\");\n        canvas.width = width;\n        canvas.height = height;\n        const ctx = canvas.getContext(\"2d\");\n        if (ctx) {\n            ctx.fillStyle = color1;\n            ctx.fillRect(0, 0, width, height);\n            ctx.fillStyle = color2;\n            ctx.fillRect(0, 0, width / 2, height / 2);\n            ctx.fillRect(width / 2, height / 2, width / 2, height / 2);\n        }\n        return canvas;\n    }\n\n    setBaseImage(\n        image: HTMLImageElement | HTMLCanvasElement,\n        updateSelectionOverlay = true\n    ) {\n        const context = this.baseImageLayer.getContext(\"2d\");\n        if (context) {\n            // set size of all layers\n            // TODO: adapt for an always-square canvas\n            this.initializeBackgroundLayer();\n\n            this.baseImageLayer.width = image.width;\n            this.baseImageLayer.height = image.height;\n            this.editLayer.width = image.width;\n            this.editLayer.height = image.height;\n            this.maskLayer = undefined;\n            // set image size\n            this.width = image.width;\n            this.height = image.height;\n            // this.canvas.width = image.width;\n            // this.canvas.height = image.height;\n            context.drawImage(image, 0, 0);\n\n            if (updateSelectionOverlay) {\n                // set 512x512 selection overlay at the center of the image\n                this.setSelectionOverlay({\n                    x: (image.width - 512) / 2,\n                    y: (image.height - 512) / 2,\n                    width: 512,\n                    height: 512,\n                });\n            }\n            this.resetView();\n            // this.render(); // already called by updateZoomAndOffset\n            this.snapshot();\n        }\n    }\n\n    resetView() {\n        // determine zoom based on image difference from canvas size\n        const maxWidth = Math.max(this.width, this.height);\n        const zoom = this.canvas.width / maxWidth;\n\n        let offsetX = 0;\n        let offsetY = 0;\n\n        if (this.width > this.height) {\n            offsetY = (this.width - this.height) / 2;\n        } else if (this.height > this.width) {\n            offsetX = (this.height - this.width) / 2;\n        }\n\n        this.updateZoomAndOffset(zoom, offsetX, offsetY);\n    }\n\n    setEditImage(imageData: ImageData | null) {\n        this.hasSelection = !!imageData;\n        const context = this.editLayer.getContext(\"2d\");\n        if (context && this.selectionOverlay) {\n            context.clearRect(\n                0,\n                0,\n                this.editLayer.width,\n                this.editLayer.height\n            );\n            if (imageData) {\n                context.putImageData(\n                    imageData,\n                    this.selectionOverlay.x,\n                    this.selectionOverlay.y\n                );\n            }\n            // edit image makes the selection rect and preview disappear\n            // so redraw the overlay\n            this.hasSelection = !!imageData;\n            this.render();\n        }\n        this.notifySnapshotListener();\n    }\n\n    private drawOverlay(\n        context: CanvasRenderingContext2D,\n        width: number,\n        height: number\n    ) {\n        const lineWidth = Math.max(this.width / 512, this.height / 512);\n        if (context) {\n            context.strokeStyle = \"white\";\n            context.lineWidth = lineWidth;\n            context.strokeRect(0, 0, width, height);\n\n            if (!this.hasSelection && this.selectionOverlay) {\n                context.strokeStyle = \"white\";\n                context.lineWidth = lineWidth;\n                context.strokeRect(\n                    this.selectionOverlay.x,\n                    this.selectionOverlay.y,\n                    this.selectionOverlay.width,\n                    this.selectionOverlay.height\n                );\n            }\n            if (!this.hasSelection && this.selectionOverlayPreview) {\n                context.strokeStyle = \"cyan\";\n                context.lineWidth = lineWidth;\n                context.strokeRect(\n                    this.selectionOverlayPreview.x,\n                    this.selectionOverlayPreview.y,\n                    this.selectionOverlayPreview.width,\n                    this.selectionOverlayPreview.height\n                );\n            }\n            if (this.cursor) {\n                if (this.cursor.type === \"circle\") {\n                    context.lineWidth = lineWidth;\n                    context.strokeStyle = this.cursor.color;\n                    // context.globalAlpha = 0.5;\n                    context.beginPath();\n                    context.arc(\n                        this.cursor.x,\n                        this.cursor.y,\n                        this.cursor.radius,\n                        0,\n                        2 * Math.PI\n                    );\n                    context.stroke();\n                } else if (this.cursor.type === \"circle-fill\") {\n                    context.fillStyle = this.cursor.color;\n                    context.strokeStyle = this.cursor.color;\n                    // context.lineWidth = lineWidth;\n                    // context.globalAlpha = 0.5;\n                    context.beginPath();\n                    context.arc(\n                        this.cursor.x,\n                        this.cursor.y,\n                        this.cursor.radius,\n                        0,\n                        2 * Math.PI\n                    );\n                    context.stroke();\n                    // set alpha to 0.5 and fill\n                    context.globalAlpha = 0.5;\n                    context.beginPath();\n                    context.arc(\n                        this.cursor.x,\n                        this.cursor.y,\n                        this.cursor.radius,\n                        0,\n                        2 * Math.PI\n                    );\n                    context.fill();\n                    context.globalAlpha = 1;\n                } else if (this.cursor.type == \"crosshairs\") {\n                    // draw crosshairs based on cursor radius\n                    context.strokeStyle = this.cursor.color;\n                    context.lineWidth = lineWidth;\n                    context.beginPath();\n                    context.moveTo(\n                        this.cursor.x - this.cursor.radius,\n                        this.cursor.y\n                    );\n                    context.lineTo(\n                        this.cursor.x + this.cursor.radius,\n                        this.cursor.y\n                    );\n                    context.moveTo(\n                        this.cursor.x,\n                        this.cursor.y - this.cursor.radius\n                    );\n                    context.lineTo(\n                        this.cursor.x,\n                        this.cursor.y + this.cursor.radius\n                    );\n                    context.stroke();\n                } else if (this.cursor.type === \"colorpicker\") {\n                    // TODO: add croshairs\n                    context.lineWidth = this.cursor.radius * 0.75;\n                    context.strokeStyle = this.cursor.color;\n                    // context.globalAlpha = 0.5;\n                    context.beginPath();\n                    context.arc(\n                        this.cursor.x,\n                        this.cursor.y,\n                        this.cursor.radius,\n                        0,\n                        2 * Math.PI\n                    );\n                    context.stroke();\n\n                    // draw crosshairs (black)\n                    context.lineWidth = lineWidth;\n                    context.strokeStyle = \"black\";\n                    context.beginPath();\n                    context.moveTo(\n                        this.cursor.x - this.cursor.radius,\n                        this.cursor.y\n                    );\n                    context.lineTo(\n                        this.cursor.x + this.cursor.radius,\n                        this.cursor.y\n                    );\n                    context.moveTo(\n                        this.cursor.x,\n                        this.cursor.y - this.cursor.radius\n                    );\n                    context.lineTo(\n                        this.cursor.x,\n                        this.cursor.y + this.cursor.radius\n                    );\n                    context.stroke();\n                }\n            }\n        }\n    }\n\n    setSelectionOverlay(selectionOverlay: Rect | undefined) {\n        this.selectionOverlay = selectionOverlay;\n        this.render();\n    }\n\n    setSelectionOverlayPreview(selectionOverlayPreview: Rect | undefined) {\n        this.selectionOverlayPreview = selectionOverlayPreview;\n        this.render();\n    }\n\n    setCursor(cursor: Cursor | undefined) {\n        this.cursor = cursor;\n        this.render();\n    }\n\n    getSelectionOverlay(): Rect | undefined {\n        return this.selectionOverlay;\n    }\n\n    getZoom(): number {\n        return this.zoom;\n    }\n\n    getOffsetX(): number {\n        return this.offsetX;\n    }\n\n    getOffsetY(): number {\n        return this.offsetY;\n    }\n\n    updateZoomAndOffset(zoom: number, offsetX: number, offsetY: number) {\n        // console.log(`zoom: ${zoom}, offset: ${offsetX}, ${offsetY}`)\n        this.zoom = zoom;\n        this.offsetX = offsetX;\n        this.offsetY = offsetY;\n        this.render();\n    }\n\n    getWidth(): number {\n        return this.width;\n    }\n\n    getHeight(): number {\n        return this.height;\n    }\n\n    private imageDataToEncodedImage(imageData: ImageData): string | undefined {\n        // create a canvas and draw the image data on it\n        const canvas = document.createElement(\"canvas\");\n        canvas.width = imageData.width;\n        canvas.height = imageData.height;\n        const context = canvas.getContext(\"2d\");\n        if (context) {\n            context.putImageData(imageData, 0, 0);\n            // return the data url of the canvas\n            const result = canvas.toDataURL(\"image/png\");\n            // cleanup the canvas\n            canvas.remove();\n            // extract base64 data from data url\n            return result.split(\",\")[1];\n        }\n    }\n\n    getEncodedImage(selection: Rect | null): string | undefined {\n        const imageData = this.getImageData(selection);\n        if (imageData) {\n            return this.imageDataToEncodedImage(imageData);\n        }\n    }\n\n    private convertErasureToMask(\n        erasure: ImageData,\n    ): ImageData {\n        // for each pixel, if alpha < 255, set to white, otherwise set to black\n        const mask = erasure;\n        for (let i = 0; i < erasure.data.length; i += 4) {\n            let white = erasure.data[i + 3] < 255;\n            if (white) {\n                mask.data[i] = 255;\n                mask.data[i + 1] = 255;\n                mask.data[i + 2] = 255;\n                mask.data[i + 3] = 255;\n            } else {\n                mask.data[i] = 0;\n                mask.data[i + 1] = 0;\n                mask.data[i + 2] = 0;\n                mask.data[i + 3] = 255;\n            }\n        }\n        return mask;\n    }\n\n    getEncodedMask(\n        selection: Rect | null,\n        layer: \"base\" | \"mask\" = \"base\"\n    ): string | undefined {\n        const imageData = this.getImageData(selection, layer)!;\n        if (!imageData) {\n            return;\n        }\n        if (layer === \"base\") {\n            const mask = this.convertErasureToMask(imageData);\n            return this.imageDataToEncodedImage(mask);\n        } else {\n            return this.imageDataToEncodedImage(imageData);\n        }\n    }\n\n    getImageData(\n        selection: Rect | null,\n        layer: \"base\" | \"mask\" = \"base\"\n    ): ImageData | undefined {\n        if (!selection) {\n            selection = {\n                x: 0,\n                y: 0,\n                width: this.width,\n                height: this.height,\n            };\n        }\n        // get image data of the selection\n        const imageLayer =\n            layer === \"base\" ? this.baseImageLayer : this.maskLayer;\n        if (!imageLayer) {\n            return;\n        }\n        let context = imageLayer.getContext(\"2d\");\n        if (context) {\n            const imageData = context.getImageData(\n                selection.x,\n                selection.y,\n                selection.width,\n                selection.height\n            );\n            return imageData;\n        }\n    }\n\n    commitSelection() {\n        // draw the selection overlay on the base image layer\n        const context = this.baseImageLayer.getContext(\"2d\");\n        if (context) {\n            context.drawImage(this.editLayer, 0, 0);\n            this.setEditImage(null);\n            this.snapshot();\n        }\n    }\n\n    drawPoint(x: number, y: number, brushSize: number, color: string, layer: \"base\" | \"mask\" = \"base\"): void {\n        // draw on selection layer\n        const imageLayer = layer === \"base\" ? this.editLayer : this.maskLayer;\n        if (!imageLayer) {\n            return;\n        }\n        const context = imageLayer.getContext(\"2d\");\n        if (context) {\n            context.fillStyle = color;\n            context.beginPath();\n            context.arc(x, y, brushSize / 2, 0, 2 * Math.PI);\n            context.fill();\n        }\n        this.render();\n    }\n\n    erasePoint(brushx: number, brushy: number, brushSize: number): void {\n        if (!this.selectionOverlay) {\n            throw new Error(\"No selection overlay\");\n        }\n        // get image data centered on x, y with brushSize width and height\n        const context = this.baseImageLayer.getContext(\"2d\");\n        if (context) {\n            const imageData = context.getImageData(\n                brushx - brushSize / 2,\n                brushy - brushSize / 2,\n                brushSize,\n                brushSize\n            );\n            // set alpha to 0 in a circle centered on x, y with radius brushSize / 2\n            for (let i = 0; i < imageData.data.length; i += 4) {\n                const x = (i / 4) % brushSize;\n                const y = Math.floor(i / 4 / brushSize);\n\n                const absx = x - brushSize / 2 + brushx;\n                // three pixel barrier on each edge UNLESS the selection overlay borders that edge\n                let leftEdge = this.selectionOverlay.x;\n                if (leftEdge > 0) {\n                    leftEdge += 10;\n                }\n                let rightEdge =\n                    this.selectionOverlay.x + this.selectionOverlay.width;\n                if (rightEdge < this.width) {\n                    rightEdge -= 10;\n                }\n                let topEdge = this.selectionOverlay.y;\n                if (topEdge > 0) {\n                    topEdge += 10;\n                }\n                let bottomEdge =\n                    this.selectionOverlay.y + this.selectionOverlay.height;\n                if (bottomEdge < this.canvas.height) {\n                    bottomEdge -= 10;\n                }\n\n                const containsx = absx > leftEdge && absx < rightEdge;\n                const absy = y - brushSize / 2 + brushy;\n                const containsy = absy > topEdge && absy < bottomEdge;\n                const contains = containsx && containsy;\n\n                // check if x, y is within the selection overlay\n                if (this.selectionOverlay && !contains) {\n                    continue;\n                }\n\n                const distance = Math.sqrt(\n                    Math.pow(x - brushSize / 2, 2) +\n                        Math.pow(y - brushSize / 2, 2)\n                );\n                if (distance < brushSize / 2) {\n                    imageData.data[i + 3] = 0;\n                }\n            }\n            // draw the image data on the selection layer\n            context.putImageData(\n                imageData,\n                brushx - brushSize / 2,\n                brushy - brushSize / 2\n            );\n        }\n    }\n\n    drawLine(\n        x1: number,\n        y1: number,\n        x2: number,\n        y2: number,\n        brushSize: number,\n        color: string,\n        layer: \"base\" | \"mask\" = \"base\"\n    ): void {\n        const imageLayer = layer === \"base\" ? this.editLayer : this.maskLayer;\n        if (!imageLayer) {\n            return;\n        }\n        // draw on selection layer\n        const context = imageLayer.getContext(\"2d\");\n        if (context) {\n            context.strokeStyle = color;\n            context.lineWidth = brushSize;\n            context.lineCap = \"round\";\n            context.beginPath();\n            context.moveTo(x1, y1);\n            context.lineTo(x2, y2);\n            context.stroke();\n        }\n        this.render();\n    }\n\n    smudgeLine(\n        x1: number,\n        y1: number,\n        x2: number,\n        y2: number,\n        brushSize: number,\n        brushOpacity: number\n    ): void {\n        const unitVector = {\n            x: x2 - x1,\n            y: y2 - y1,\n        };\n        const length = Math.sqrt(\n            unitVector.x * unitVector.x + unitVector.y * unitVector.y\n        );\n        unitVector.x /= length;\n        unitVector.y /= length;\n\n        // for each point on the line, get image data (brushSize x brushSize) from edit layer\n        // average pixel values that are within the brush circle.\n        // update the image data with the averaged pixel values in the\n        // brush circle, then put the image data back on the edit layer\n        // at the point on the line\n\n        const context = this.editLayer.getContext(\"2d\");\n        if (context) {\n            for (let i = 0; i < length; i++) {\n                const x = x1 + i * unitVector.x;\n                const y = y1 + i * unitVector.y;\n\n                const imageData = context.getImageData(\n                    x - brushSize / 2,\n                    y - brushSize / 2,\n                    brushSize,\n                    brushSize\n                );\n\n                let totalRed = 0;\n                let totalGreen = 0;\n                let totalBlue = 0;\n                let count = 0.0;\n\n                // average pixel values\n                for (let y = 0; y < imageData.height; y++) {\n                    for (let x = 0; x < imageData.width; x++) {\n                        const index = (y * imageData.width + x) * 4;\n                        const distance = Math.sqrt(\n                            (x - brushSize / 2) * (x - brushSize / 2) +\n                                (y - brushSize / 2) * (y - brushSize / 2)\n                        );\n                        if (distance <= brushSize / 2) {\n                            // get the pixel value from the image data\n                            const r = imageData.data[index];\n                            const g = imageData.data[index + 1];\n                            const b = imageData.data[index + 2];\n\n                            totalRed += r;\n                            totalGreen += g;\n                            totalBlue += b;\n                            count++;\n                        }\n                    }\n                }\n\n                // update the image data with the averaged pixel values\n                // these need to be weighted by the brush opacity\n                const averageRed = totalRed / count;\n                const averageGreen = totalGreen / count;\n                const averageBlue = totalBlue / count;\n                for (let y = 0; y < imageData.height; y++) {\n                    for (let x = 0; x < imageData.width; x++) {\n                        const index = (y * imageData.width + x) * 4;\n                        const distance = Math.sqrt(\n                            (x - brushSize / 2) * (x - brushSize / 2) +\n                                (y - brushSize / 2) * (y - brushSize / 2)\n                        );\n                        if (distance <= brushSize / 2) {\n                            imageData.data[index] =\n                                averageRed * brushOpacity +\n                                imageData.data[index] * (1 - brushOpacity);\n                            imageData.data[index + 1] =\n                                averageGreen * brushOpacity +\n                                imageData.data[index + 1] * (1 - brushOpacity);\n                            imageData.data[index + 2] =\n                                averageBlue * brushOpacity +\n                                imageData.data[index + 2] * (1 - brushOpacity);\n                        }\n                    }\n                }\n\n                // put the image data back on the edit layer\n                context.putImageData(\n                    imageData,\n                    x - brushSize / 2,\n                    y - brushSize / 2\n                );\n            }\n        }\n        this.render();\n    }\n\n    getPixel(x: number, y: number): string {\n        const context = this.baseImageLayer.getContext(\"2d\");\n        // get pixel as hex string\n        if (context) {\n            const pixel = context.getImageData(x, y, 1, 1).data;\n            return (\n                \"#\" +\n                (\"000000\" + rgbToHex(pixel[0], pixel[1], pixel[2])).slice(-6)\n            );\n        }\n        return \"#000000\";\n    }\n\n    copyEditImageFromBaseImage(): void {\n        // copy the base image to the edit layer\n        const context = this.editLayer.getContext(\"2d\");\n        if (context) {\n            context.drawImage(this.baseImageLayer, 0, 0);\n        }\n        this.render();\n        this.hasSelection = true;\n        this.notifySnapshotListener();\n    }\n\n    expandToOverlay() {\n        if (!this.selectionOverlay) {\n            throw new Error(\"No selection overlay\");\n        }\n        const minX = Math.min(0, this.selectionOverlay.x);\n        const minY = Math.min(0, this.selectionOverlay.y);\n        const maxX = Math.max(\n            this.selectionOverlay.x + this.selectionOverlay.width,\n            this.baseImageLayer.width\n        );\n        const maxY = Math.max(\n            this.selectionOverlay.y + this.selectionOverlay.height,\n            this.baseImageLayer.height\n        );\n        const width = maxX - minX;\n        const height = maxY - minY;\n\n        // create a new canvas with the expanded size\n        const newCanvas = document.createElement(\"canvas\");\n        newCanvas.width = width;\n        newCanvas.height = height;\n        // draw the base image on the new canvas.\n        // if overlay.x is negative, image.x is overlay.x * -1\n        // if overlay.x is 0 or positive, image.x is 0\n        // if overlay.y is negative, image.y is overlay.y * -1\n        // if overlay.y is 0 or positive, image.y is 0\n        const context = newCanvas.getContext(\"2d\");\n        if (context) {\n            context.drawImage(\n                this.baseImageLayer,\n                Math.max(0, this.selectionOverlay.x * -1),\n                Math.max(0, this.selectionOverlay.y * -1)\n            );\n        }\n        if (this.selectionOverlay.x < 0) {\n            this.selectionOverlay.x = 0;\n        }\n        if (this.selectionOverlay.y < 0) {\n            this.selectionOverlay.y = 0;\n        }\n        console.log(`new Canvas size: ${width} x ${height}`);\n        this.setBaseImage(newCanvas, false);\n    }\n}\n\nfunction rgbToHex(r: number, g: number, b: number) {\n    if (r > 255 || g > 255 || b > 255) throw \"Invalid color component\";\n    return ((r << 16) | (g << 8) | b).toString(16);\n}\n\nexport function createRenderer(canvas: HTMLCanvasElement): Renderer {\n    return new Renderer(canvas);\n}\n","// export interface AspectRatio {\n//     displayName: string;\n//     width: number;\n//     height: number;\n//     id: number;\n\n//     scale: (size: number) => AspectRatio;\n// }\n\nexport class AspectRatio implements AspectRatio {\n    readonly displayName: string;\n    readonly width: number;\n    readonly height: number;\n    readonly id: number;\n\n    constructor(cfg: any) {\n        this.displayName = cfg.displayName;\n        this.width = cfg.width;\n        this.height = cfg.height;\n        this.id = cfg.id;\n    }\n\n    scale(size: number): AspectRatio {\n        const newWidth = this.width * size;\n        const newHeight = this.height * size;\n\n        return new AspectRatio({\n            id: this.id,\n            displayName: this.displayName,\n            // round width and height up to the nearest multiple of 64\n            width: Math.ceil(newWidth / 64) * 64,\n            height: Math.ceil(newHeight / 64) * 64,\n        });\n    }\n}\n\nexport const DEFAULT_ASPECT_RATIO = 5;\n\nexport const aspectRatios: AspectRatio[] = [\n    {\n        displayName: \"4:1\",\n        width: 1024,\n        height: 256,\n        id: 0,\n    },\n    {\n        displayName: \"3:1\",\n        width: 768,\n        height: 256,\n        id: 1,\n    },\n    {\n        displayName: \"2:1\",\n        width: 640,\n        height: 320,\n        id: 2,\n    },\n    {\n        displayName: \"3:2\",\n        width: 576,\n        height: 384,\n        id: 3,\n    },\n    {\n        displayName: \"5:4\",\n        width: 640,\n        height: 512,\n        id: 4,\n    },\n    {\n        displayName: \"1:1\",\n        width: 512,\n        height: 512,\n        id: 5,\n    },\n    {\n        displayName: \"4:5\",\n        width: 512,\n        height: 640,\n        id: 6,\n    },\n    {\n        displayName: \"2:3\",\n        width: 384,\n        height: 576,\n        id: 7,\n    },\n    {\n        displayName: \"1:2\",\n        width: 320,\n        height: 640,\n        id: 8,\n    },\n    {\n        displayName: \"1:3\",\n        width: 256,\n        height: 768,\n        id: 9,\n    },\n    {\n        displayName: \"1:4\",\n        width: 256,\n        height: 1024,\n        id: 10,\n    }\n].map((cfg) => new AspectRatio(cfg));\n\nexport function getClosestAspectRatio(width: number, height: number): AspectRatio {\n    const aspectRatio = width / height;\n\n    const tests = [...aspectRatios];\n    tests.sort((a, b) => {\n        const aRatio = a.width / a.height;\n        const bRatio = b.width / b.height;\n        return (\n            Math.abs(aRatio - aspectRatio) -\n            Math.abs(bRatio - aspectRatio)\n        );\n    });\n    const bestMatch = tests[0];\n    return bestMatch;\n}\n\n\n","import { FC, useEffect, useState } from \"react\";\nimport { PaletteButton } from \"./PaletteButton\";\nimport { PencilTool } from \"./pencil-tool\";\nimport { Renderer } from \"./renderer\";\n\ninterface MaskEditorProps {\n    // renderer: Renderer;\n    tool: PencilTool;\n    onConfirm: () => void;\n    onRevert: () => void;\n}\n\nconst colors = [\"#000000\", \"#FFFFFF\"];\n\nexport const MaskEditor: FC<MaskEditorProps> = ({\n    // renderer,\n    tool,\n    onConfirm,\n    onRevert,\n}) => {\n    const [brushSize, setBrushSize] = useState(10);\n    const [brushColor, setBrushColor] = useState(colors[0]);\n\n    useEffect(() => {\n        tool.updateArgs({\n            brushSize,\n            brushColor,\n        });\n    }, [brushSize, brushColor]);\n\n    return (\n        <div style={{ marginTop: \"16px\" }}>\n            <div className=\"form-group\">\n                <label style={{ width: \"100%\" }}>\n                    Brush size\n                    <small\n                        className=\"form-text text-muted\"\n                        style={{ float: \"right\" }}\n                    >\n                        {brushSize}px\n                    </small>\n                </label>\n                <input\n                    type=\"range\"\n                    className=\"form-control-range\"\n                    min=\"1\"\n                    max=\"100\"\n                    value={brushSize}\n                    onChange={(e) => setBrushSize(parseInt(e.target.value))}\n                />\n            </div>\n            <div\n                style={{\n                    display: \"flex\",\n                    flexDirection: \"row\",\n                    flexWrap: \"wrap\",\n                }}\n            >\n                {colors.map((color, i) => (\n                    <PaletteButton\n                        key={i}\n                        selectedColor={brushColor}\n                        color={color}\n                        onClick={(color) => setBrushColor(color)}\n                    />\n                ))}\n            </div>\n            <div className=\"form-group\" style={{ marginTop: \"16px\" }}>\n                <i className=\"fa fa-info-circle\"></i>&nbsp;Masking: areas that\n                are painted white will be changed, areas that are painted black\n                will be left unchanged.\n            </div>\n            <div className=\"form-group\" style={{ marginTop: \"16px\" }}>\n                <button className=\"btn btn-secondary\" onClick={onRevert}>\n                    Revert\n                </button>\n                <button\n                    className=\"btn btn-primary\"\n                    onClick={onConfirm}\n                    style={{ marginLeft: \"8px\" }}\n                >\n                    Save\n                </button>\n            </div>\n        </div>\n    );\n};\n","import React, { FC, useState, useEffect } from \"react\";\nimport loadImage from \"blueimp-load-image\";\nimport saveAs from \"file-saver\";\n\nimport { AIBrushApi } from \"../../client\";\nimport { Renderer } from \"./renderer\";\nimport { BaseTool, Tool } from \"./tool\";\n\ninterface Props {\n    renderer: Renderer;\n    tool: BaseTool;\n    api: AIBrushApi;\n}\n\nexport const ImportExportControls: FC<Props> = ({ renderer, tool }) => {\n\n    const [backupImage, setBackupImage] = useState<string | undefined>();\n\n    const onImageSelected = (event: React.ChangeEvent<HTMLInputElement>) => {\n        const files = event.target.files;\n        if (files && files.length > 0) {\n            loadImage(\n                files[0],\n                (img) => {\n                    const backupImage = renderer.getEncodedImage(null);\n                    setBackupImage(backupImage);\n                    renderer.setBaseImage(img as HTMLImageElement);\n                },\n                { canvas: false }\n            );\n        }\n    };\n\n    const onExport = () => {\n        const encodedImage = renderer.getEncodedImage(null);\n        if (encodedImage) {\n            // base64 decode\n            const byteString = atob(encodedImage);\n            // save as file\n            const buffer = new ArrayBuffer(byteString.length);\n            const intArray = new Uint8Array(buffer);\n            for (let i = 0; i < byteString.length; i++) {\n                intArray[i] = byteString.charCodeAt(i);\n            }\n            const blob = new Blob([intArray], { type: \"image/png\" });\n            saveAs(blob, \"image.png\");\n        }\n    };\n\n    if (backupImage) {\n        return (\n            <div className=\"form-group\" style={{marginTop: \"16px\"}}>\n                <button\n                    className=\"btn btn-primary\"\n                    onClick={() => {\n                        setBackupImage(undefined);\n                        const img = new Image();\n                        // set src as data uri\n                        const src = \"data:image/png;base64,\" + backupImage;\n                        img.src = src;\n                        img.onload = () => {\n                            renderer.setBaseImage(img);\n                        };\n                    }}\n                >\n                    {/* cancel icon */}\n                    <i className=\"fas fa-times\"></i>&nbsp;\n                    Revert\n                </button>\n                <button\n                    className=\"btn btn-primary\"\n                    onClick={() => {\n                        setBackupImage(undefined);\n                        if (tool.saveListener) {\n                            const encodedImage = renderer.getEncodedImage(null);\n                            if (encodedImage) {\n                                tool.saveListener(encodedImage);\n                            }\n                        }\n                    }}\n                    style={{marginLeft: \"8px\"}}\n                >\n                    {/* save icon */}\n                    <i className=\"fas fa-save\"></i>&nbsp;\n                    Save\n                </button>\n            </div>\n        );\n    }\n\n    // Show buttons for import and export and \"save a copy\"\n    return (\n        <>\n            <div className=\"form-group\" style={{marginTop: \"16px\"}}>\n                <label\n                    id=\"loadimage-wrapper\"\n                    className={`btn btn-primary `}\n                    style={{ display: \"inline\" }}\n                >\n                    {/* upload image */}\n                    <i className=\"fas fa-upload\"></i>&nbsp; Import Image\n                    <input\n                        id=\"loadimage\"\n                        type=\"file\"\n                        style={{ display: \"none\" }}\n                        onChange={onImageSelected}\n                    />\n                </label>\n            </div>\n            <div className=\"form-group\">\n                <button\n                    className=\"btn btn-primary\"\n                    onClick={() => {\n                        onExport();\n                    }}\n                    style={{ marginLeft: \"8px\"}}\n                >\n                    <i className=\"fas fa-download\"></i>&nbsp; Export Image\n                </button>\n            </div>\n        </>\n    );\n};\n","import React, { FC, useState, useEffect } from \"react\";\nimport loadImage from \"blueimp-load-image\";\nimport saveAs from \"file-saver\";\nimport axios from \"axios\";\nimport * as uuid from \"uuid\";\n\nimport { sleep } from \"../../lib/sleep\";\n\nimport {\n    AIBrushApi,\n    CreateImageInput,\n    ImageParamsAugmentationEnum,\n    Image as APIImage,\n    StatusEnum,\n} from \"../../client\";\nimport { Renderer } from \"./renderer\";\nimport { BaseTool, Tool } from \"./tool\";\nimport {\n    splitImage,\n    mergeTiles,\n    ImageUtilWorker,\n    imageDataToCanvas,\n    fixImageSize,\n    decodeImage,\n    binaryImageToDataBase64,\n    SplitResult,\n} from \"../../lib/imageutil\";\nimport { defaultArgs } from \"../../components/ImagePrompt\";\nimport { ErrorNotification } from \"../../components/Alerts\";\nimport moment from \"moment\";\nimport { calculateImagesCost } from \"../../lib/credits\";\nimport { CostIndicator } from \"../../components/CostIndicator\";\n\nexport const anonymousClient = axios.create();\n\ninterface Props {\n    renderer: Renderer;\n    tool: BaseTool;\n    api: AIBrushApi;\n    image: APIImage;\n}\n\nexport const AugmentControls: FC<Props> = ({ renderer, tool, api, image }) => {\n    const [backupImage, setBackupImage] = useState<string | undefined>();\n    const [activeAugmentation, setActiveAugmentation] = useState<\n        \"upscale\" | \"face_restore\" | null\n    >(null);\n    const [imageWorker, setImageWorker] = useState<\n        ImageUtilWorker | undefined\n    >();\n    const [error, setError] = useState<string | null>(null);\n    const [lastError, setLastError] = useState<number>(0);\n\n    useEffect(() => {\n        const imageWorker = new ImageUtilWorker();\n        setImageWorker(imageWorker);\n        return () => {\n            imageWorker.destroy();\n        };\n    }, []);\n\n    const augmentImageData = async (\n        imageData: ImageData,\n        augmentation: \"upscale\" | \"face_restore\"\n    ): Promise<ImageData> => {\n        if (!imageWorker) {\n            throw new Error(\"Image worker not initialized\");\n        }\n        let c = imageDataToCanvas(imageData);\n        let encodedImage = c.toDataURL(\"image/jpeg\").split(\",\")[1];\n        c.remove();\n        const input: CreateImageInput = defaultArgs();\n        input.label = \"\";\n        // input.encoded_image = encodedImage;\n\n        const tmpInitImage = await api.createTemporaryImage(\"jpg\");\n        const binaryImageData = Buffer.from(encodedImage, \"base64\");\n        await anonymousClient.put(\n            tmpInitImage.data.upload_url!,\n            binaryImageData,\n            {\n                headers: {\n                    \"Content-Type\": \"image/png\",\n                },\n            }\n        );\n\n        input.tmp_image_id = tmpInitImage.data.id;\n        input.params.prompt = image.params.prompt;\n        input.params.negative_prompt = image.params.negative_prompt;\n        input.params.denoising_strength = 0.05;\n        input.count = 1;\n        input.model = \"stable_diffusion\";\n        input.nsfw = true;\n        input.temporary = true;\n        input.params.width = imageData.width;\n        input.params.height = imageData.height;\n        input.params.augmentation =\n            augmentation === \"upscale\"\n                ? ImageParamsAugmentationEnum.Upscale\n                : ImageParamsAugmentationEnum.FaceRestore;\n\n        const createResp = await api.createImage(input);\n        let processingImage = createResp.data.images![0];\n        while (processingImage.status !== StatusEnum.Completed) {\n            await sleep(2000);\n            const checkResp = await api.getImage(processingImage.id);\n            processingImage = checkResp.data;\n            if (processingImage.status === StatusEnum.Error) {\n                throw new Error(\"Augmentation failed\");\n            }\n        }\n        const downloadUrls = await api.getImageDownloadUrls(processingImage.id);\n\n        // download image data, convert to canvas and resize to 2x original,\n        // convert back to image data and return.\n        const imageDataResp = await anonymousClient.get(\n            downloadUrls.data.image_url!,\n            {\n                responseType: \"arraybuffer\",\n            }\n        );\n        encodedImage = binaryImageToDataBase64(imageDataResp.data);\n        const img = await decodeImage(encodedImage);\n        c = document.createElement(\"canvas\");\n        const upscaleFactor = augmentation === \"upscale\" ? 2 : 1;\n        c.width = imageData.width * upscaleFactor;\n        c.height = imageData.height * upscaleFactor;\n        const ctx = c.getContext(\"2d\")!;\n        ctx.drawImage(img, 0, 0, c.width, c.height);\n        const newImageData = ctx.getImageData(0, 0, c.width, c.height);\n        c.remove();\n        return newImageData;\n    };\n\n    const onAugment = async (augmentation: \"upscale\" | \"face_restore\") => {\n        setActiveAugmentation(augmentation);\n        setError(null);\n        try {\n            const backupImage = renderer.getEncodedImage(null);\n            setBackupImage(backupImage);\n            let imageData = renderer.getImageData(null);\n            if (!imageData) {\n                return;\n            }\n            // ensure width and height are multiples of 64\n            if ((imageData.width % 64) + (imageData.height % 64) !== 0) {\n                const c = fixImageSize(imageDataToCanvas(imageData));\n                imageData = c\n                    .getContext(\"2d\")!\n                    .getImageData(0, 0, c.width, c.height);\n            }\n\n            const newImageData = await augmentImageData(\n                imageData,\n                augmentation\n            );\n            const newCanvas = imageDataToCanvas(newImageData);\n            renderer.setBaseImage(newCanvas);\n            newCanvas.remove();\n        } catch (err: any) {\n            setError(err.message || \"Augmentation failed\");\n            setLastError(moment().valueOf());\n        } finally {\n            setActiveAugmentation(null);\n        }\n    };\n\n    if (activeAugmentation) {\n        return (\n            <div className=\"form-group\" style={{ marginTop: \"16px\" }}>\n                <i className=\"fas fa-spinner fa-spin\"></i>&nbsp;{\" \"}\n                {activeAugmentation === \"upscale\"\n                    ? \"Upscaling...\"\n                    : \"Restoring faces...\"}\n            </div>\n        );\n    }\n\n    if (backupImage) {\n        return (\n            <div className=\"form-group\" style={{ marginTop: \"16px\" }}>\n                <ErrorNotification message={error} timestamp={lastError} />\n                <button\n                    className=\"btn btn-primary\"\n                    onClick={() => {\n                        setBackupImage(undefined);\n                        const img = new Image();\n                        // set src as data uri\n                        const src = \"data:image/png;base64,\" + backupImage;\n                        img.src = src;\n                        img.onload = () => {\n                            renderer.setBaseImage(img);\n                        };\n                    }}\n                >\n                    {/* cancel icon */}\n                    <i className=\"fas fa-times\"></i>&nbsp; Revert\n                </button>\n                <button\n                    className=\"btn btn-primary\"\n                    onClick={() => {\n                        setBackupImage(undefined);\n                        if (tool.saveListener) {\n                            const encodedImage = renderer.getEncodedImage(null);\n                            if (encodedImage) {\n                                tool.saveListener(encodedImage);\n                            }\n                        }\n                    }}\n                    style={{ marginLeft: \"8px\" }}\n                >\n                    {/* save icon */}\n                    <i className=\"fas fa-save\"></i>&nbsp; Save\n                </button>\n            </div>\n        );\n    }\n\n    const maxSize = 2048 * 2048;\n    if (renderer.getWidth() * renderer.getHeight() > maxSize) {\n        return (\n            <div style={{ marginTop: \"16px\" }}>\n                This image is too large to augment.\n            </div>\n        );\n    }\n\n    const cost = calculateImagesCost(1, image.params.width!, image.params.height!);\n\n    // Show buttons for import and export and \"save a copy\"\n    return (\n        <>\n            <ErrorNotification message={error} timestamp={lastError} />\n            <div className=\"form-group\" style={{ marginTop: \"16px\" }}>\n                <button\n                    className=\"btn btn-primary\"\n                    onClick={() => {\n                        onAugment(\"upscale\");\n                    }}\n                    style={{ marginLeft: \"8px\" }}\n                >\n                    {/* upscale icon */}\n                    <i className=\"fas fa-arrows-alt\"></i>&nbsp; Upscale Image 2x\n                </button>\n            </div>\n            <div className=\"form-group\" style={{ marginTop: \"16px\" }}>\n                <button\n                    className=\"btn btn-primary\"\n                    onClick={() => {\n                        onAugment(\"face_restore\");\n                    }}\n                    style={{ marginLeft: \"8px\" }}\n                >\n                    {/* face restore icon */}\n                    <i className=\"fas fa-smile\"></i>&nbsp; Restore Faces\n                </button>\n            </div>\n            <div className=\"form-group\" style={{ marginTop: \"16px\" }}>\n                <CostIndicator imagesCost={cost} />\n            </div>\n        </>\n    );\n};\n","import React from \"react\";\nimport { Modal, Button } from \"react-bootstrap\";\nimport { Link, useHistory } from \"react-router-dom\";\n\ninterface OutOfCreditsModalProps {\n    show: boolean;\n    onHide: () => void;\n}\n\nconst OutOfCreditsModal: React.FC<OutOfCreditsModalProps> = ({\n    show,\n    onHide,\n}) => {\n    const history = useHistory();\n\n    const redirectToPricing = () => {\n        onHide();\n        history.push(\"/pricing\");\n    };\n\n    return (\n        <Modal show={show} onHide={onHide} centered>\n            <Modal.Header closeButton>\n                <Modal.Title>Out of Credits</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                Oops! It looks like you've run out of credits for today. But\n                don't worry, you'll receive 100 free credits tomorrow to\n                continue creating amazing images. Can't wait? Check out our\n                affordable <Link to=\"/pricing\">pricing options</Link> to get instant access to more credits\n                and unleash your creativity without limits!\n            </Modal.Body>\n            <Modal.Footer>\n                <Button variant=\"secondary\" onClick={onHide}>\n                    Close\n                </Button>\n                <Button variant=\"primary\" onClick={redirectToPricing}>\n                    Visit Pricing Page\n                </Button>\n            </Modal.Footer>\n        </Modal>\n    );\n};\n\nexport default OutOfCreditsModal;\n","import React, { useEffect, useState } from \"react\";\nimport { Modal, Button } from \"react-bootstrap\";\nimport { useHistory } from \"react-router-dom\";\n\ninterface PaymentStatusModalProps {\n    paymentStatus?: \"success\" | \"canceled\";\n}\n\nconst PaymentStatusModal: React.FC<PaymentStatusModalProps> = ({\n    paymentStatus,\n}) => {\n    const [show, setShow] = useState(false);\n    const history = useHistory();\n\n    useEffect(() => {\n        if (paymentStatus) {\n            setShow(true);\n        }\n    }, [paymentStatus]);\n\n    const handleClose = () => {\n        setShow(false);\n        history.push(\"/\");\n    };\n\n    return (\n        <Modal show={show} onHide={handleClose}>\n            <Modal.Header closeButton>\n                <Modal.Title>Payment Status</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                {paymentStatus === \"success\"\n                    ? \"Payment succeeded!\"\n                    : \"Payment canceled.\"}\n            </Modal.Body>\n            <Modal.Footer>\n                <Button variant=\"secondary\" onClick={handleClose}>\n                    Close\n                </Button>\n            </Modal.Footer>\n        </Modal>\n    );\n};\n\nexport default PaymentStatusModal;\n","import axios from \"axios\";\nimport { AIBrushApi } from \"../client\";\nimport { Rect } from \"../pages/image-editor/models\";\n\nconst anonymousClient = axios.create();\n\nexport interface SplitResult {\n    numTilesX: number;\n    numTilesY: number;\n    tileSize: number;\n    imageWidth: number;\n    imageHeight: number;\n    tiles: ImageData[][]; // [x][y]\n}\n\nexport function convertPNGToJPG(encodedImage: string): Promise<string> {\n    return new Promise((resolve, reject) => {\n        const image = new Image();\n        image.onload = () => {\n            const canvas = document.createElement(\"canvas\");\n            try {\n                canvas.width = image.width;\n                canvas.height = image.height;\n                const ctx = canvas.getContext(\"2d\");\n                if (!ctx) {\n                    throw new Error(\"Could not get canvas context\");\n                }\n                ctx.drawImage(image, 0, 0);\n                const dataUrl = canvas.toDataURL(\"image/jpeg\");\n                resolve(dataUrl.split(\",\")[1]);\n            } finally {\n                canvas.remove();\n            }\n        };\n        image.src = `data:image/png;base64,${encodedImage}`\n    });\n}\n\nexport function loadImageDataElement(\n    api: AIBrushApi,\n    imageId: string\n): Promise<HTMLImageElement> {\n    return new Promise((resolve, reject) => {\n        api.getImageDownloadUrls(imageId)\n            .then((urls) => {\n                anonymousClient\n                    .get(urls.data.image_url!, {\n                        responseType: \"arraybuffer\",\n                    })\n                    .then((resp) => {\n                        const binaryImageData = Buffer.from(\n                            resp.data,\n                            \"binary\"\n                        );\n                        const base64ImageData =\n                            binaryImageData.toString(\"base64\");\n                        const src = `data:image/png;base64,${base64ImageData}`;\n                        const imageElement = new Image();\n                        imageElement.src = src;\n                        imageElement.onload = () => {\n                            resolve(imageElement);\n                        };\n                    })\n                    .catch((err) => reject(err));\n            })\n            .catch((err) => reject(err));\n    });\n}\n\n// split image for individual upscales\nexport function splitImage(initImage: ImageData) {\n    // Check if the image area is larger than 512x512\n    if (initImage.width * initImage.height > 512 * 512) {\n        // use a temporary canvas to split the image\n        const canvas = document.createElement(\"canvas\");\n        try {\n            canvas.width = initImage.width;\n            canvas.height = initImage.height;\n            const ctx = canvas.getContext(\"2d\");\n            if (!ctx) {\n                throw new Error(\"Could not get canvas context\");\n            }\n            ctx.putImageData(initImage, 0, 0);\n            const tile_size = Math.min(initImage.width, initImage.height, 512);\n            // split the image into 512x512 tiles\n            // they need to overlap by at least 32 pixels\n            // so that the edges can be merged\n\n            // calculate the number of tiles in each dimension\n            const num_tiles_x = Math.ceil(initImage.width / (tile_size - 32));\n            const num_tiles_y = Math.ceil(initImage.height / (tile_size - 32));\n\n            const tiles: ImageData[][] = [];\n            for (let x = 0; x < num_tiles_x; x++) {\n                tiles.push([]);\n                for (let y = 0; y < num_tiles_y; y++) {\n                    // calculate the bounding box of the tile\n                    const x0 = x * (tile_size - 32);\n                    const y0 = y * (tile_size - 32);\n                    const x1 = Math.min(x0 + tile_size, initImage.width);\n                    const y1 = Math.min(y0 + tile_size, initImage.height);\n                    // crop the tile\n                    const tile = ctx.getImageData(x0, y0, x1 - x0, y1 - y0);\n                    tiles[x].push(tile);\n                }\n            }\n            return {\n                numTilesX: num_tiles_x,\n                numTilesY: num_tiles_y,\n                tileSize: tile_size,\n                imageWidth: initImage.width,\n                imageHeight: initImage.height,\n                tiles,\n            };\n        } finally {\n            canvas.remove();\n        }\n    } else {\n        return null;\n    }\n}\n\n// merge the tiles back into a single image\n// tiles should be 2x original size\nexport function mergeTiles(splitResult: SplitResult): ImageData {\n    // create a new image\n    const canvas = document.createElement(\"canvas\");\n    try {\n        canvas.width = splitResult.imageWidth;\n        canvas.height = splitResult.imageHeight;\n        const ctx = canvas.getContext(\"2d\");\n        if (!ctx) {\n            throw new Error(\"Could not get canvas context\");\n        }\n        for (let x = 0; x < splitResult.numTilesX; x++) {\n            for (let y = 0; y < splitResult.numTilesY; y++) {\n                // load the tile\n                const tile = splitResult.tiles[x][y];\n                const tileCanvas = imageDataToCanvas(tile);\n\n                // paste the tile into the new image\n                ctx.drawImage(\n                    tileCanvas,\n                    x * (splitResult.tileSize - 64),\n                    y * (splitResult.tileSize - 64)\n                );\n            }\n        }\n        return ctx.getImageData(\n            0,\n            0,\n            splitResult.imageWidth,\n            splitResult.imageHeight\n        );\n    } finally {\n        canvas.remove();\n    }\n}\n\nexport function imageDataToCanvas(imageData: ImageData): HTMLCanvasElement {\n    const canvas = document.createElement(\"canvas\");\n    canvas.width = imageData.width;\n    canvas.height = imageData.height;\n    const ctx = canvas.getContext(\"2d\");\n    if (!ctx) {\n        throw new Error(\"Could not get canvas context\");\n    }\n    ctx.putImageData(imageData, 0, 0);\n    return canvas;\n}\n\n// extract resizing logic from above function into a reusable resizeImage function\nexport function resizeImage(\n    image: HTMLCanvasElement,\n    width: number,\n    height: number\n): HTMLCanvasElement {\n    const canvas = document.createElement(\"canvas\");\n    try {\n        canvas.width = width;\n        canvas.height = height;\n        const ctx = canvas.getContext(\"2d\");\n        if (!ctx) {\n            throw new Error(\"Could not get canvas context\");\n        }\n        ctx.drawImage(image, 0, 0, width, height);\n        return canvas;\n    } finally {\n        image.remove();\n    }\n}\n\n// re-implement fixImageSize using resizeImage\nexport function fixImageSize(image: HTMLCanvasElement): HTMLCanvasElement {\n    // if the width and the height are divisible by 64, return the image data\n    // otherwise, resize up to the next multiple of 64\n    const width = Math.ceil(image.width / 64) * 64;\n    const height = Math.ceil(image.height / 64) * 64;\n    if (width == image.width && height == image.height) {\n        return image;\n    }\n    return resizeImage(image, width, height);\n}\n\nexport function featherEdges(\n    selectionOverlay: Rect,\n    imageWidth: number,\n    imageHeight: number,\n    imageData: ImageData,\n    featherWidth?: number\n) {\n    const featherLeftEdge = selectionOverlay.x != 0;\n    const featherRightEdge =\n        selectionOverlay.x + selectionOverlay.width != imageWidth;\n    const featherTopEdge = selectionOverlay.y != 0;\n    const featherBottomEdge =\n        selectionOverlay.y + selectionOverlay.height != imageHeight;\n\n    const baseWidth = Math.min(selectionOverlay.width, selectionOverlay.height);\n    if (!featherWidth) {\n        featherWidth = Math.floor(baseWidth / 8);\n    }\n\n    if (featherTopEdge) {\n        for (let y = 0; y < featherWidth; y++) {\n            for (let x = 0; x < selectionOverlay.width; x++) {\n                const pixelIndex = (y * selectionOverlay.width + x) * 4;\n                const alpha = (y / featherWidth) * 255;\n                const existingAlpha = imageData.data[pixelIndex + 3];\n                imageData.data[pixelIndex + 3] = Math.min(alpha, existingAlpha);\n            }\n        }\n    }\n    if (featherBottomEdge) {\n        for (\n            let y = selectionOverlay.height - featherWidth;\n            y < selectionOverlay.height;\n            y++\n        ) {\n            for (let x = 0; x < selectionOverlay.width; x++) {\n                const pixelIndex = (y * selectionOverlay.width + x) * 4;\n                const alpha =\n                    ((selectionOverlay.height - y) / featherWidth) * 255;\n                const existingAlpha = imageData.data[pixelIndex + 3];\n                imageData.data[pixelIndex + 3] = Math.min(alpha, existingAlpha);\n            }\n        }\n    }\n    if (featherLeftEdge) {\n        for (let x = 0; x < featherWidth; x++) {\n            for (let y = 0; y < selectionOverlay.height; y++) {\n                const pixelIndex = (y * selectionOverlay.width + x) * 4;\n                const alpha = (x / featherWidth) * 255;\n                const existingAlpha = imageData.data[pixelIndex + 3];\n                imageData.data[pixelIndex + 3] = Math.min(alpha, existingAlpha);\n            }\n        }\n    }\n    if (featherRightEdge) {\n        for (\n            let x = selectionOverlay.width - featherWidth;\n            x < selectionOverlay.width;\n            x++\n        ) {\n            for (let y = 0; y < selectionOverlay.height; y++) {\n                const pixelIndex = (y * selectionOverlay.width + x) * 4;\n                const alpha =\n                    ((selectionOverlay.width - x) / featherWidth) * 255;\n                const existingAlpha = imageData.data[pixelIndex + 3];\n                imageData.data[pixelIndex + 3] = Math.min(alpha, existingAlpha);\n            }\n        }\n    }\n}\n\nexport function applyAlphaMask(imageData: ImageData, alphaMask: ImageData) {\n    if (\n        imageData.width != alphaMask.width ||\n        imageData.height != alphaMask.height\n    ) {\n        throw new Error(\"imageData and alphaMask are not the same size\");\n    }\n    const spread = 10;\n    for (let x = 0; x < imageData.width; x++) {\n        for (let y = 0; y < imageData.height; y++) {\n            // r, g, b, a\n            // if transparency within 10 pixels, set alpha to 1, otherwise to zero.\n            // binary alpha inversion with spread\n            let alpha = false;\n            for (\n                let x2 = Math.max(0, x - spread);\n                x2 < Math.min(imageData.width, x + spread);\n                x2++\n            ) {\n                for (\n                    let y2 = Math.max(0, y - spread);\n                    y2 < Math.min(imageData.height, y + spread);\n                    y2++\n                ) {\n                    const alphaValue =\n                        alphaMask.data[y2 * alphaMask.width * 4 + x2 * 4 + 3];\n                    if (alphaValue < 255) {\n                        alpha = true;\n                    }\n                }\n            }\n            const alphaIndex = y * imageData.width * 4 + x * 4 + 3;\n            if (alpha) {\n                imageData.data[alphaIndex] = 255;\n            } else {\n                imageData.data[alphaIndex] = 0;\n            }\n        }\n    }\n}\n\nexport interface ImageWorkerRequest {\n    id: string;\n    feather: boolean;\n    upscale?: boolean;\n    alphaMode: \"none\" | \"mask\" | \"alpha\";\n    pixels: Uint8ClampedArray;\n    alphaPixels?: Uint8ClampedArray;\n    width: number;\n    height: number;\n    featherWidth?: number;\n    selectionOverlay: Rect;\n}\n\nexport interface ImageWorkerResponse {\n    id: string;\n    pixels: Uint8ClampedArray;\n}\n\nexport class ImageUtilWorker {\n    private workers: Array<Worker> = [];\n    private callbacks: { [key: string]: (event: MessageEvent) => void } = {};\n    private cursor = 0;\n\n    constructor(numWorkers = 3) {\n        for (let i = 0; i < numWorkers; i++) {\n            this.workers[i] = new Worker(\n                `${process.env.PUBLIC_URL}/workers/imageutil.js`\n            );\n            this.workers[i].addEventListener(\n                \"message\",\n                this.onMessage.bind(this)\n            );\n        }\n    }\n\n    onMessage(event: MessageEvent) {\n        const resp = event.data as ImageWorkerResponse;\n        this.callbacks[resp.id](event);\n        delete this.callbacks[resp.id];\n    }\n\n    async processRequest(\n        request: ImageWorkerRequest\n    ): Promise<ImageWorkerResponse> {\n        return new Promise((resolve, reject) => {\n            this.callbacks[request.id] = (event) => {\n                resolve(event.data);\n            };\n            this.workers[this.cursor].postMessage({\n                ...request,\n            });\n            this.cursor = (this.cursor + 1) % this.workers.length;\n        });\n    }\n\n    destroy() {\n        for (let key in this.workers) {\n            this.workers[key].terminate();\n        }\n    }\n}\n\nexport function createEncodedThumbnail(encodedImage: string): Promise<string> {\n    return new Promise((resolve, reject) => {\n        // use html5 canvas\n        // crop to square aspect ratio on 128x128 canvas\n        const canvas = document.createElement(\"canvas\");\n        canvas.width = 128;\n        canvas.height = 128;\n\n        const image = new Image();\n        image.src = `data:image/png;base64,${encodedImage}`;\n        image.onload = () => {\n            const context = canvas.getContext(\"2d\");\n            if (!context) {\n                throw new Error(\"Could not create canvas context\");\n            }\n            const width = 128;\n            const height = 128;\n            canvas.width = width;\n            canvas.height = height;\n\n            const aspectRatio = image.width / image.height;\n            const cropWidth =\n                aspectRatio > 1 ? image.width : image.height * aspectRatio;\n            const cropHeight =\n                aspectRatio > 1 ? image.width / aspectRatio : image.height;\n            const cropX = (image.width - cropWidth) / 2;\n            const cropY = (image.height - cropHeight) / 2;\n            context.drawImage(\n                image,\n                cropX,\n                cropY,\n                cropWidth,\n                cropHeight,\n                0,\n                0,\n                width,\n                height\n            );\n\n            // save to png\n            const imageUrl = canvas.toDataURL(\"image/png\");\n            const base64 = imageUrl.split(\",\")[1];\n            resolve(base64);\n        };\n    });\n}\n\nexport function decodeImage(encodedImage: string): Promise<HTMLImageElement> {\n    return new Promise((resolve, reject) => {\n        const image = new Image();\n        image.src = `data:image/png;base64,${encodedImage}`;\n        image.onload = () => {\n            resolve(image);\n        };\n    });\n}\n\nexport function binaryImageToDataBase64(binaryImage: any): string {\n    const buf = Buffer.from(binaryImage, \"binary\");\n    return buf.toString(\"base64\");\n}\n\nexport function resizeEncodedImage(\n    encodedImage: string,\n    width: number,\n    height: number,\n    format: \"png\" | \"jpeg\",\n): Promise<string> {\n    return new Promise((resolve, reject) => {\n        // use html5 canvas\n        // crop to square aspect ratio on 128x128 canvas\n        const canvas = document.createElement(\"canvas\");\n        canvas.width = width;\n        canvas.height = height;\n\n        const image = new Image();\n        image.src = `data:image/${format};base64,${encodedImage}`;\n        image.onload = () => {\n            const context = canvas.getContext(\"2d\");\n            if (!context) {\n                throw new Error(\"Could not create canvas context\");\n            }\n            canvas.width = width;\n            canvas.height = height;\n\n            context.drawImage(\n                image,\n                0,\n                0,\n                image.width,\n                image.height,\n                0,\n                0,\n                width,\n                height\n            );\n\n            // save to png\n            const imageUrl = canvas.toDataURL(\"image/${format}\");\n            const base64 = imageUrl.split(\",\")[1];\n            resolve(base64);\n        };\n    });\n}\n\nexport function encodedImageToBlob(encodedImage: string): Blob {\n    const binaryString = atob(encodedImage);\n    const arr = [];\n    for (let i = 0; i < binaryString.length; i++) {\n        arr.push(binaryString.charCodeAt(i));\n    }\n    return new Blob([new Uint8Array(arr)], {\n        type: \"image/png\",\n    });\n}\n\n// This function is made to work with S3 presigned urls.\n// Solution found at https://stackoverflow.com/questions/22531114/how-to-upload-to-aws-s3-directly-from-browser-using-a-pre-signed-url-instead-of\nexport function uploadBlob(signedUrl: string, blob: Blob): Promise<void> {\n    return new Promise((resolve, reject) => {\n        var xhr = new XMLHttpRequest();\n        xhr.open(\"PUT\", signedUrl, true);\n        xhr.setRequestHeader(\"Content-Type\", \"image/png\");\n        xhr.onload = () => {\n            if (xhr.status < 400) {\n                // success!\n                resolve();\n            }\n        };\n        xhr.onerror = (err) => {\n            // error...\n            reject(err);\n        };\n        xhr.send(blob); // `file` is a File object here\n    });\n}\n","import React, { FC, useEffect, useRef, useState } from \"react\";\nimport { Modal } from \"react-bootstrap\";\nimport { propTypes } from \"react-bootstrap/esm/Image\";\n\ninterface Props {\n    show: boolean;\n    title?: string;\n}\n\n// Show modal with child contents\nexport const BusyModal: FC<Props> = ({ show, title, children }) => {\n    return (\n        <Modal show={show} backdrop=\"static\" keyboard={false}>\n            <Modal.Header closeButton>\n                <Modal.Title>{title || \"Processing\"}</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                {children || (\n                    <div className=\"d-flex justify-content-center\">\n                        <div className=\"spinner-border\" role=\"status\">\n                            <span className=\"sr-only\">Please Wait...</span>\n                        </div>\n                    </div>\n                )}\n            </Modal.Body>\n        </Modal>\n    );\n};\n","import moment from \"moment\";\n\nimport { Image } from \"../client\";\n\nexport interface LocalImage extends Image {\n    imageData?: string;\n}\n\n/**\n * This class uses indexedDB to store images locally.\n */\nexport class LocalImagesStore {\n    private db: IDBDatabase | null = null;\n\n    init(): Promise<void> {\n        return new Promise((resolve, reject) => {\n            const request = indexedDB.open(\"aibrush\", 4);\n            request.onupgradeneeded = (evt) => {\n                const db = request.result;\n                // create object store if it doesn't exist\n                // const imagesStore = db.createObjectStore(\"images\", { keyPath: \"id\" });\n                let imagesStore: IDBObjectStore;\n                if (!db.objectStoreNames.contains(\"images\")) {\n                    imagesStore = db.createObjectStore(\"images\", {\n                        keyPath: \"id\",\n                    });\n                } else {\n                    imagesStore = request.transaction?.objectStore(\n                        \"images\"\n                    ) as IDBObjectStore;\n                }\n                imagesStore.createIndex(\"updated_at\", \"updated_at\", {\n                    unique: false,\n                });\n                imagesStore.createIndex(\"deleted_at\", \"deleted_at\", {\n                    unique: false,\n                });\n                console.log(\"Local images store updated\");\n            };\n            request.onsuccess = (_) => {\n                this.db = request.result;\n                console.log(\"Local images store initialized\");\n                resolve();\n            };\n            request.onerror = (evt) => {\n                console.error(\"error opening indexeddb\", evt);\n                reject(evt);\n            };\n        });\n    }\n\n    // migrate old images to new format\n    private hydrateImage(image: LocalImage): LocalImage {\n        if (!image) {\n            return image;\n        }\n        if (!image.params) {\n            const legacyImage = image as any;\n            image.params = {\n                prompt: legacyImage.phrases.join(\", \"),\n                negative_prompt: legacyImage.negative_phrases.join(\", \"),\n                width: legacyImage.width,\n                height: legacyImage.height,\n                denoising_strength: legacyImage.stable_diffusion_strength,\n                steps: legacyImage.iterations,\n            }\n        }\n        return image;\n    }\n\n    async getImage(id: string): Promise<LocalImage | null> {\n        if (!this.db) {\n            throw new Error(\"not initialized\");\n        }\n        const transaction = this.db.transaction([\"images\"]);\n        const store = transaction.objectStore(\"images\");\n        const request = store.get(id);\n        return new Promise((resolve, reject) => {\n            request.onsuccess = (evt) => {\n                resolve(this.hydrateImage(request.result));\n            };\n            request.onerror = (evt) => {\n                console.error(\"error getting image\", evt);\n                reject(evt);\n            };\n        });\n    }\n\n    async saveImage(image: LocalImage): Promise<void> {\n        if (!this.db) {\n            throw new Error(\"not initialized\");\n        }\n        await this.cleanupDeletedImages();\n        const transaction = this.db.transaction([\"images\"], \"readwrite\");\n        const store = transaction.objectStore(\"images\");\n        const request = store.put({\n            ...image,\n            updated_at: moment().valueOf(),\n        });\n        return new Promise((resolve, reject) => {\n            request.onsuccess = (evt) => {\n                resolve();\n            };\n            request.onerror = (evt) => {\n                console.error(\"error saving image\", evt);\n                reject(evt);\n            };\n        });\n    }\n\n    async hardDeleteImage(id: string): Promise<void> {\n        if (!this.db) {\n            throw new Error(\"not initialized\");\n        }\n        const transaction = this.db.transaction([\"images\"], \"readwrite\");\n        const store = transaction.objectStore(\"images\");\n        const request = store.delete(id);\n        return new Promise((resolve, reject) => {\n            request.onsuccess = (evt) => {\n                console.log(`image ${id} permanently deleted`);\n                resolve();\n            };\n            request.onerror = (evt) => {\n                console.error(\"error deleting image\", evt);\n                reject(evt);\n            };\n        });\n    }\n\n    async deleteImage(id: string): Promise<void> {\n        if (!this.db) {\n            throw new Error(\"not initialized\");\n        }\n        // fetch the image first. If it has a deletedAt timestamp already, or if it's not\n        // in \"completed\" state, hard delete it. Otherwise, set the deletedAt timestamp.\n        const image = await this.getImage(id);\n        if (!image) {\n            console.error(\"image not found\", id);\n            return;\n        }\n        if (image.deleted_at || image.status !== \"completed\") {\n            return this.hardDeleteImage(id);\n        }\n        const transaction = this.db.transaction([\"images\"], \"readwrite\");\n        const store = transaction.objectStore(\"images\");\n        const request = store.put({\n            ...image,\n            deleted_at: moment().valueOf(),\n        });\n        return new Promise((resolve, reject) => {\n            request.onsuccess = (evt) => {\n                resolve();\n            };\n            request.onerror = (evt) => {\n                console.error(\"error deleting image\", evt);\n                reject(evt);\n            };\n        });\n    }\n\n    async listImages(\n        updated_at: number,\n        direction: IDBCursorDirection,\n        count: number,\n        search: string\n    ): Promise<LocalImage[]> {\n        // use updated_at index\n        if (!this.db) {\n            throw new Error(\"not initialized\");\n        }\n        const transaction = this.db.transaction([\"images\"]);\n        const store = transaction.objectStore(\"images\");\n        const index = store.index(\"updated_at\");\n        const range =\n            direction == \"next\"\n                ? IDBKeyRange.lowerBound(updated_at)\n                : IDBKeyRange.upperBound(updated_at);\n        const request = index.openCursor(range, direction);\n        return new Promise((resolve, reject) => {\n            const images: LocalImage[] = [];\n            request.onsuccess = (evt) => {\n                const cursor = request.result;\n                if (cursor) {\n                    const image: LocalImage = this.hydrateImage(cursor.value);\n                    const prompt = (image.params.prompt || \"\").toLowerCase();\n                    if (\n                        !image.deleted_at &&\n                        (!search || prompt.includes(search.toLowerCase()))\n                    ) {\n                        images.push(image);\n                    }\n                    if (images.length < count) {\n                        cursor.continue();\n                    } else {\n                        resolve(images);\n                    }\n                } else {\n                    resolve(images);\n                }\n            };\n            request.onerror = (evt) => {\n                console.error(\"error listing images\", evt);\n                reject(evt);\n            };\n        });\n    }\n\n    async clearImages(): Promise<void> {\n        // clear from both indexes\n        if (!this.db) {\n            throw new Error(\"not initialized\");\n        }\n        const transaction = this.db.transaction([\"images\"], \"readwrite\");\n        const imagesStore = transaction.objectStore(\"images\");\n        const imagesRequest = imagesStore.clear();\n        return new Promise((resolve, reject) => {\n            imagesRequest.onsuccess = (evt) => {\n                resolve();\n            };\n            imagesRequest.onerror = (evt) => {\n                console.error(\"error clearing images\", evt);\n                reject(evt);\n            };\n        });\n    }\n\n    async getDeletedImages(olderThan?: number): Promise<LocalImage[]> {\n        if (!this.db) {\n            throw new Error(\"not initialized\");\n        }\n        // refactor to use deleted_at index\n        const transaction = this.db.transaction([\"images\"]);\n        const store = transaction.objectStore(\"images\");\n        const index = store.index(\"deleted_at\");\n        // const request = index.openCursor();\n        // get cursor for all deleted_at values\n        const request = index.openCursor(\n            olderThan\n                ? IDBKeyRange.upperBound(olderThan)\n                : IDBKeyRange.lowerBound(1),\n            olderThan ? \"prev\" : \"next\"\n        );\n        return new Promise((resolve, reject) => {\n            const images: LocalImage[] = [];\n            request.onsuccess = (evt) => {\n                const cursor = request.result;\n                if (cursor) {\n                    const image: LocalImage = cursor.value;\n                    if (images.length < 50 && image.deleted_at) {\n                        images.push(cursor.value);\n                    }\n                    cursor.continue();\n                } else {\n                    resolve(images);\n                }\n            };\n            request.onerror = (evt) => {\n                console.error(\"error listing images\", evt);\n                reject(evt);\n            };\n        });\n    }\n\n    async clearDeletedImages(): Promise<void> {\n        if (!this.db) {\n            throw new Error(\"not initialized\");\n        }\n        let deletedImages = await this.getDeletedImages();\n        while (deletedImages.length > 0) {\n            // hard delete all deleted images\n            const promises = deletedImages.map((image) => {\n                return this.hardDeleteImage(image.id);\n            });\n            await Promise.all(promises);\n            deletedImages = await this.getDeletedImages();\n        }\n    }\n\n    async cleanupDeletedImages(): Promise<void> {\n        // delete images that are more than 1 day old\n        let deletedImages = await this.getDeletedImages(\n            moment().subtract(1, \"hours\").valueOf()\n        );\n        while (deletedImages.length > 0) {\n            // hard delete all deleted images\n            const promises = deletedImages.map((image) => {\n                return this.hardDeleteImage(image.id);\n            });\n            await Promise.all(promises);\n            deletedImages = await this.getDeletedImages(\n                moment().subtract(1, \"hours\").valueOf()\n            );\n        }\n    }\n}\n","// Login react component with hooks\nimport React, { useState, FC } from \"react\";\nimport * as axios from \"axios\";\nimport qs from \"qs\";\nimport { AIBrushApi, LoginResult } from \"../client/api\";\n\nconsole.log(process.env)\nconst DISCORD_CLIENT_ID = \"1043951225944678490\";\n\ninterface LoginProps {\n    client: AIBrushApi;\n    onLogin: (loginResult: LoginResult) => void;\n}\n\nexport const Login: FC<LoginProps> = (props) => {\n    // login form accepts email only\n    const [email, setEmail] = useState(\"\");\n    const [emailSubmitted, setEmailSubmitted] = useState(false);\n    const [code, setCode] = useState(\"\");\n    const [err, setErr] = useState(\"\");\n\n    // check query string for invite_code\n    const query = window.location.search;\n    const queryParams = qs.parse(query.substring(1));\n    const inviteCode = queryParams[\"invite_code\"];\n\n    const onLogin = async () => {\n        // clear error\n        setErr(\"\");\n        // validate valid email\n        if (!email.match(/^[^@]+@[^@]+\\.[^@]+$/)) {\n            setErr(\"Invalid email address\");\n            return;\n        }\n\n        try {\n            await props.client.login({\n                email: email,\n                invite_code: inviteCode as string,\n            });\n            setEmailSubmitted(true);\n        } catch (err) {\n            console.error(err);\n            setErr(\"Could not login\");\n        }\n    };\n\n    const discordLink = () => {\n        // localhost url:\n        // https://discord.com/api/oauth2/authorize?client_id=1043951225944678490&redirect_uri=http%3A%2F%2Flocalhost%3A3001%2Fdiscord-login&response_type=code&scope=identify%20email\n        // prod url:\n        // https://discord.com/api/oauth2/authorize?client_id=1043951225944678490&redirect_uri=https%3A%2F%2Fwww.aibrush.art%2Fdiscord-login&response_type=code&scope=identify%20email\n        const host = window.location.host;\n        const protocol = window.location.protocol;\n        const redirectUri = `${protocol}//${host}/discord-login`;\n        const url = `https://discord.com/api/oauth2/authorize?client_id=${DISCORD_CLIENT_ID}&redirect_uri=${redirectUri}&response_type=code&scope=identify%20email`;\n        return url;\n    };\n\n    const onVerify = async () => {\n        // clear error\n        setErr(\"\");\n        // attempt to verify code\n        try {\n            const result = await props.client.verify({\n                email,\n                code,\n            });\n            props.onLogin(result.data);\n        } catch (err) {\n            console.error(err);\n            setErr(\"Failed to verify code\");\n        }\n    };\n\n    // bootstrap login form\n    return (\n        <>\n            <div\n                className=\"row\"\n                style={{\n                    height: \"100vh\",\n                    marginLeft: \"0px\",\n                    marginRight: \"0px\",\n                }}\n            >\n                <div className=\"col-md-6 login-splash\">\n                    {/* <div className=\"center-cropped\" style={{backgroundImage: \"url(/images/scifi-dreamland.png)\"}}></div> */}\n                    <img\n                        className=\"center-cropped\"\n                        src=\"/images/scifi-dreamland.png\"\n                    />\n                </div>\n                <div className=\"col-md-6\">\n                    <div\n                        style={{\n                            fontWeight: 500,\n                            fontSize: \"48px\",\n                            marginTop: \"200px\",\n                        }}\n                    >\n                        AiBrush\n                    </div>\n\n                    <div\n                        style={{\n                            marginLeft: \"10%\",\n                            marginRight: \"10%\",\n                            marginTop: \"88px\",\n                            marginBottom: \"24px\",\n                        }}\n                    >\n                        Login With Email\n                    </div>\n                    {/* Display error if one is set */}\n                    {/* Use <p class=\"text-danger\" */}\n                    {err && <p className=\"text-danger\">{err}</p>}\n                    {err && (\n                        <p className=\"text-info\">\n                            If you don't have an account yet, request one by\n                            sending an email to{\" \"}\n                            <a href=\"mailto:admin@aibrush.art\">\n                                admin@aibrush.art\n                            </a>\n                        </p>\n                    )}\n                    <div\n                        style={{\n                            marginLeft: \"10%\",\n                            marginRight: \"10%\",\n                            marginTop: \"24px\",\n                            textAlign: \"left\",\n                        }}\n                    >\n                        {/* If email submitted, show verify code form*/}\n                        {emailSubmitted && (\n                            <>\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"verifyCode\">\n                                        Verify Code\n                                    </label>\n                                    <input\n                                        type=\"text\"\n                                        className=\"form-control\"\n                                        id=\"verifyCode\"\n                                        placeholder=\"Verification Code\"\n                                        value={code}\n                                        onChange={(e) =>\n                                            setCode(e.target.value)\n                                        }\n                                    />\n                                </div>\n                                {/* Cancel verification and go back to email */}\n                                <button\n                                    className=\"btn btn-secondary\"\n                                    onClick={() => setEmailSubmitted(false)}\n                                >\n                                    Cancel\n                                </button>\n                                &nbsp;\n                                {/* Verify code */}\n                                <button\n                                    type=\"button\"\n                                    className=\"btn btn-primary\"\n                                    onClick={(e) => {\n                                        e.preventDefault();\n                                        onVerify();\n                                    }}\n                                >\n                                    Verify\n                                </button>\n                            </>\n                        )}\n                        {/* Else, show login form */}\n                        {!emailSubmitted && (\n                            <>\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"email\">Email address</label>\n                                    <input\n                                        type=\"email\"\n                                        className=\"form-control\"\n                                        id=\"email\"\n                                        aria-describedby=\"emailHelp\"\n                                        placeholder=\"Enter email\"\n                                        value={email}\n                                        onChange={(e) =>\n                                            setEmail(e.target.value.trim())\n                                        }\n                                    />\n                                </div>\n                                <button\n                                    type=\"button\"\n                                    className=\"btn btn-primary\"\n                                    style={{ float: \"right\" }}\n                                    onClick={(e) => {\n                                        e.preventDefault();\n                                        onLogin();\n                                    }}\n                                >\n                                    Login\n                                </button>\n                            </>\n                        )}\n                    </div>\n                    <div\n                        style={{\n                            marginLeft: \"10%\",\n                            marginRight: \"10%\",\n                            marginTop: \"88px\",\n                            marginBottom: \"24px\",\n                        }}\n                    >\n                        <hr/>\n                        OR\n                    </div>\n                    <div\n                        style={{\n                            marginLeft: \"10%\",\n                            marginRight: \"10%\",\n                            marginTop: \"24px\",\n                        }}\n                    >\n                        <a href={discordLink()} className=\"btn btn-primary\">\n                            <i className=\"fab fa-discord\"></i> Login With Discord\n                        </a>\n                    </div>\n                </div>\n            </div>\n        </>\n    );\n};\n","// Given a set of credentials, this component will refresh them\n// every 5 minutes and invoke the onCredentialsRefreshed callback\n\nimport React, { useEffect, FC } from \"react\"\nimport { LoginResult, AIBrushApi } from \"../client/api\";\n\ninterface TokenRefresherProps {\n    onCredentialsRefreshed: (loginResult: LoginResult) => void;\n    onCredentialsExpired: () => void;\n    api: AIBrushApi;\n    credentials: LoginResult;\n}\n\nexport const TokenRefresher : FC<TokenRefresherProps> = ({ onCredentialsRefreshed, onCredentialsExpired, api, credentials }) => {\n    useEffect(() => {\n        const interval = setInterval(() => {\n            if (credentials && credentials.refreshToken) {\n                api.refresh({refreshToken: credentials.refreshToken}).then(loginResult => {\n                    onCredentialsRefreshed(loginResult.data);\n                }).catch(() => {\n                    onCredentialsExpired();\n                });\n            }\n\n        }, 5 * 60 * 1000);\n        return () => {\n            clearInterval(interval);\n        };\n    }, [credentials, api, onCredentialsRefreshed]);\n    return <div></div>;\n}","import React, { FC, useEffect, useState } from 'react';\nimport { AIBrushApi } from \"../client/api\";\n\ninterface HealthcheckerProps {\n    api: AIBrushApi;\n}\n\nexport const Healthchecker: FC<HealthcheckerProps> = ({ api }) => {\n    // automatically check health every 5 seconds\n    const [healthCheck, setHealthCheck] = useState(true);\n    \n    useEffect(() => {\n        const interval = setInterval(() => {\n            api.healthcheck().then(() => setHealthCheck(true)).catch(() => setHealthCheck(false));\n        }, 5000);\n\n        return () => clearInterval(interval);\n    }, [api]);\n\n    // only display bootstrap danger alert if healthcheck failed\n    // \"service is unavailable\"\n    return (\n        <div className=\"alert alert-danger\" role=\"alert\" style={{ display: healthCheck ? 'none' : 'block' }}>\n            <strong>Looks like we're having some trouble reaching the server.</strong>\n        </div>\n    );\n}\n\n","import React, { useState } from \"react\";\nimport { Button, Form, InputGroup, Alert } from \"react-bootstrap\";\nimport { AIBrushApi, CreateDepositCodeInput } from \"../../client/api\";\nimport CopyToClipboard from \"react-copy-to-clipboard\";\n\ninterface Props {\n    api: AIBrushApi;\n}\n\nconst GenerateCode: React.FC<Props> = ({ api }) => {\n    const [amount, setAmount] = useState<number>(100);\n    const [generatedCode, setGeneratedCode] = useState<string | null>(null);\n    const [copied, setCopied] = useState<boolean>(false);\n\n    const handleSubmit = async (event: React.FormEvent) => {\n        event.preventDefault();\n\n        const input: CreateDepositCodeInput = { amount };\n        const result = await api.createDepositCode(input);\n        setGeneratedCode(result.data.code);\n    };\n\n    const handleCopy = () => {\n        setCopied(true);\n        setTimeout(() => setCopied(false), 3000);\n    };\n\n    return (\n        <div>\n            <h4>Generate deposit code</h4>\n            <Form onSubmit={handleSubmit} style={{marginTop: \"16px\"}}>\n                <InputGroup className=\"mb-3\">\n                    {/* amount label */}\n                    <label style={{fontSize: \"24px\", marginRight: \"8px\"}}>Amount:</label>\n                    <Form.Control\n                        type=\"number\"\n                        placeholder=\"Amount\"\n                        value={amount}\n                        onChange={(e) => setAmount(parseInt(e.target.value))}\n                    />\n                    <InputGroup.Append>\n                        <Button\n                            variant=\"primary\"\n                            type=\"submit\"\n                            style={{ marginLeft: \"16px\" }}\n                        >\n                            Generate Code\n                        </Button>\n                    </InputGroup.Append>\n                </InputGroup>\n            </Form>\n\n            {generatedCode && (\n                <div className=\"mb-3\">\n                    <strong>Generated Code: </strong> {generatedCode}\n                    <CopyToClipboard text={generatedCode} onCopy={handleCopy}>\n                        <Button variant=\"secondary\" className=\"ml-2\">\n                            Copy to clipboard\n                        </Button>\n                    </CopyToClipboard>\n                </div>\n            )}\n\n            {copied && (\n                <Alert variant=\"success\">Code copied to clipboard!</Alert>\n            )}\n        </div>\n    );\n};\n\nexport default GenerateCode;\n","import { FC, useEffect, useState } from \"react\";\nimport { AIBrushApi } from \"../../client/api\";\nimport { WorkerSettings, WorkerSettingsJson } from \"../../lib/globalSettings\";\n\ninterface Props {\n    api: AIBrushApi;\n}\n\n// global settings all have a \"settings_key\" and \"settings_json\" field. settings_json is any.\n\n// default \"workers\" setting:\n// {\n//     \"minimum_worker_allocations\": {\n//         \"stable_diffusion\": 0,\n//         \"stable_diffusion_inpainting\": 0,\n//         \"swinir\": 0,\n//     }\n// }\n\nexport const GlobalSettings: FC<Props> = ({ api }) => {\n    const [workerSettings, setWorkerSettings] = useState<WorkerSettingsJson>({\n        minimum_worker_allocations: {\n            stable_diffusion: 0,\n            stable_diffusion_inpainting: 0,\n            swinir: 0,\n        },\n    });\n    const [saving, setSaving] = useState<boolean>(false);\n\n    const loadWorkerSettings = async () => {\n        const settings = await api.getGlobalSettings(\"workers\");\n        setWorkerSettings(settings.data.settings_json as any);\n    };\n\n    const saveWorkerSettings = async () => {\n        setSaving(true);\n        try {\n            await api.updateGlobalSettings(\"workers\", {\n                settings_json: workerSettings,\n            });\n        } finally {\n            setSaving(false);\n        }\n    };\n\n    useEffect(() => {\n        loadWorkerSettings();\n    }, []);\n\n    return (\n        <div style={{paddingBottom: \"48px\"}}>\n            {/* Header: Create new image */}\n            <div className=\"row\">\n                <div className=\"col-12\">\n                    <h1>Global Settings</h1>\n                </div>\n            </div>\n            {/* 50px vertical spacer */}\n            <div className=\"row\">\n                <div className=\"col-12\">\n                    <div className=\"spacer\" />\n                </div>\n            </div>\n            {/* slider from 0 to 10 for each model */}\n            <div className=\"row\">\n                <div className=\"col-12\">\n                    <label htmlFor=\"stable_diffusion\">\n                        stable_diffusion: {workerSettings.minimum_worker_allocations.stable_diffusion}\n                    </label>\n                    <input\n                        style={{marginLeft: \"16px\"}}\n                        type=\"range\"\n                        min={0}\n                        max={10}\n                        value={workerSettings.minimum_worker_allocations.stable_diffusion}\n                        className=\"form-range\"\n                        id=\"stable_diffusion\"\n                        onChange={(e) => {\n                            setWorkerSettings({\n                                ...workerSettings,\n                                minimum_worker_allocations: {\n                                    ...workerSettings.minimum_worker_allocations,\n                                    stable_diffusion: parseInt(e.target.value),\n                                },\n                            });\n                        }}\n                    />\n                </div>\n            </div>\n            <div className=\"row\">\n                <div className=\"col-12\">\n                    <label htmlFor=\"stable_diffusion_inpainting\">\n                        stable_diffusion_inpainting: {workerSettings.minimum_worker_allocations.stable_diffusion_inpainting}\n                    </label>\n                    <input\n                        style={{marginLeft: \"16px\"}}\n                        type=\"range\"\n                        min={0}\n                        max={10}\n                        value={workerSettings.minimum_worker_allocations.stable_diffusion_inpainting}\n                        className=\"form-range\"\n                        id=\"stable_diffusion_inpainting\"\n                        onChange={(e) => {\n                            setWorkerSettings({\n                                ...workerSettings,\n                                minimum_worker_allocations: {\n                                    ...workerSettings.minimum_worker_allocations,\n                                    stable_diffusion_inpainting: parseInt(e.target.value),\n                                },\n                            });\n                        }}\n                    />\n                </div>\n            </div>\n            <div className=\"row\">\n                <div className=\"col-12\">\n                    <label htmlFor=\"swinir\">\n                        swinir: {workerSettings.minimum_worker_allocations.swinir}\n                    </label>\n                    <input\n                        style={{marginLeft: \"16px\"}}\n                        type=\"range\"\n                        min={0}\n                        max={10}\n                        value={workerSettings.minimum_worker_allocations.swinir}\n                        className=\"form-range\"\n                        id=\"swinir\"\n                        onChange={(e) => {\n                            setWorkerSettings({\n                                ...workerSettings,\n                                minimum_worker_allocations: {\n                                    ...workerSettings.minimum_worker_allocations,\n                                    swinir: parseInt(e.target.value),\n                                },\n                            });\n                        }}\n                    />\n                </div>\n            </div>\n            \n            \n            {/* bottom row: save button */}\n            <div className=\"row\">\n                <div className=\"col-12\">\n                    <button className=\"btn btn-primary\" onClick={saveWorkerSettings} disabled={saving}>\n                        {saving ? <>\n                            <i className=\"fas fa-spinner fa-spin\" />\n                            &nbsp; Saving...\n                        </> : \"Save\"}\n                    </button>\n                </div>\n            </div>\n        </div>\n    );\n};","import React, { FC, useState, useEffect, useRef } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { AIBrushApi } from \"../../client/api\";\nimport GenerateCode from \"./GenerateCode\";\nimport { GlobalSettings } from \"./GlobalSettings\";\n\ninterface Props {\n    api: AIBrushApi;\n}\n\nexport const Admin: FC<Props> = ({ api }) => {\n    const [links, setLinks] = useState<string[]>([]);\n\n    const onGenerateLink = async () => {\n        const inviteCode = await api.createInviteCode();\n        setLinks([...links, `/?invite_code=${inviteCode.data.id}`]);\n    };\n\n    return (\n        <div style={{ paddingBottom: \"48px\" }}>\n            {/* Header: Create new image */}\n            <div className=\"row\">\n                <div className=\"col-12\">\n                    <h1>Admin features</h1>\n                </div>\n            </div>\n            {/* 50px vertical spacer */}\n            <div className=\"row\">\n                <div className=\"col-12\">\n                    <div className=\"spacer\" />\n                </div>\n            </div>\n            <div className=\"row\">\n                <div className=\"col-12\">\n                    <div\n                        className=\"d-flex justify-content-center align-items-center\"\n                        style={{ height: \"100%\" }}\n                    >\n                        <GenerateCode api={api} />\n                    </div>\n                </div>\n            </div>\n            <hr />\n            <GlobalSettings api={api} />\n        </div>\n    );\n};\n","import React, { FC, useEffect, useState } from \"react\";\nimport { AIBrushApi, Image } from \"../client\";\nimport moment from \"moment\";\nimport { ImageThumbnail } from \"../components/ImageThumbnail\";\nimport { useHistory } from \"react-router-dom\";\nimport { BusyModal } from \"../components/BusyModal\";\n\ninterface Props {\n    api: AIBrushApi;\n    assetsUrl: string;\n}\n\nexport const DeletedImages: FC<Props> = ({ api, assetsUrl }) => {\n    const [images, setImages] = useState<Image[]>([]);\n    const [deleting, setDeleting] = useState(false);\n\n    const history = useHistory();\n\n    const loadImages = async () => {\n        const cursor = moment().add(-24, \"hours\").valueOf();\n        // TODO: special api call for deleted images?\n        const resp = await api.listImages(cursor, \"\", 100, \"asc\");\n        setImages(\n            (\n                resp.data.images?.filter((image) => !!image.deleted_at) || []\n            ).sort((a, b) => {\n                if (a.deleted_at && b.deleted_at) {\n                    return b.deleted_at - a.deleted_at;\n                }\n                return 0;\n            })\n        );\n    };\n\n    const onDeleteImage = async (image: Image) => {\n        setImages(images.filter((i) => i.id !== image.id));\n        await api.deleteImage(image.id);\n    };\n\n    const onDeleteAllImages = async () => {\n        setDeleting(true);\n        try {\n            await Promise.all(images.map((image) => api.deleteImage(image.id)));\n            setImages([]);\n        } finally {\n            setDeleting(false);\n        }\n    };\n\n    const onRestoreImage = async (image: Image) => {\n        setImages(images.filter((i) => i.id !== image.id));\n        await api.updateImage(image.id, { deleted_at: null });\n    };\n\n    useEffect(() => {\n        loadImages();\n    }, [api]);\n\n    return (\n        <div>\n            <div>\n                <div className=\"row\">\n                    <div className=\"col-12\">\n                        <h1 style={{ fontSize: \"40px\", textAlign: \"left\" }}>\n                            <i\n                                style={{ cursor: \"pointer\" }}\n                                onClick={() => history.goBack()}\n                                className=\"fas fa-chevron-left\"\n                            ></i>\n                            &nbsp; Deleted Images\n                        </h1>\n                        {/* float right \"delete all\" button */}\n                        <button\n                            className=\"btn btn-danger btn-sm image-popup-delete-button\"\n                            onClick={onDeleteAllImages}\n                            style={{\n                                float: \"right\",\n                                marginRight: \"8px\",\n                            }}\n                        >\n                            <i className=\"fa fa-trash\"></i>&nbsp;Delete All\n                        </button>\n                    </div>\n                </div>\n                <div className=\"row\" style={{ marginTop: \"32px\" }}>\n                    <div className=\"col-sm-2 offset-sm-2\">Image</div>\n                    <div className=\"col-sm-8\">Action</div>\n                </div>\n                {images.map((image) => (\n                    <div\n                        className=\"row\"\n                        style={{\n                            marginTop: \"16px\",\n                            borderBottom: \"1px solid #303030\",\n                        }}\n                        key={image.id}\n                    >\n                        <div className=\"col-sm-2 offset-sm-2\">\n                            <ImageThumbnail\n                                assetsUrl={assetsUrl}\n                                image={image}\n                                censorNSFW={true}\n                            />\n                        </div>\n                        <div\n                            className=\"col-sm-8\"\n                            style={{\n                                paddingTop: \"64px\",\n                                paddingBottom: \"64px\",\n                            }}\n                        >\n                            <button\n                                className=\"btn btn-danger btn-sm image-popup-delete-button\"\n                                onClick={() => onDeleteImage(image)}\n                                style={{\n                                    marginRight: \"8px\",\n                                }}\n                            >\n                                <i className=\"fa fa-trash\"></i>&nbsp;Delete\n                            </button>\n                            <button\n                                className=\"btn btn-primary btn-sm image-popup-restore-button\"\n                                onClick={() => onRestoreImage(image)}\n                            >\n                                <i className=\"fa fa-undo\"></i>&nbsp;Restore\n                            </button>\n                        </div>\n                    </div>\n                ))}\n            </div>\n            <BusyModal show={deleting} title=\"Deleting Images\">\n                Please wait while we delete all images...\n            </BusyModal>\n        </div>\n    );\n};\n","import React, { useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { AIBrushApi, LoginResult } from \"../client\";\n\ninterface LoginProps {\n    client: AIBrushApi;\n    onLogin: (loginResult: LoginResult) => void;\n}\n\nexport const DiscordLogin: React.FC<LoginProps> = ({client, onLogin}) => {\n    const history = useHistory();\n    const code = new URLSearchParams(window.location.search).get(\"code\");\n    \n    useEffect(() => {\n        if (code) {\n            console.log(\"logging in with code\", code);\n            client.discordLogin({code}).then((result) => {\n                console.log(\"login result\", result);\n                if (result.data.accessToken) {\n                    onLogin(result.data);\n                }\n                \n                history.push(\"/\");\n            });\n        } else {\n            history.push(\"/\");\n        }\n    }, [])\n\n    return null;\n}","import React, { FC, useEffect, useState } from \"react\";\nimport { AIBrushApi, Image } from \"../client\";\nimport moment from \"moment\";\nimport { ImageThumbnail } from \"../components/ImageThumbnail\";\nimport { useHistory } from \"react-router-dom\";\nimport { LocalImagesStore } from \"../lib/localImagesStore\";\nimport { BusyModal } from \"../components/BusyModal\";\n\ninterface Props {\n    localImages: LocalImagesStore;\n}\n\nexport const LocalDeletedImages: FC<Props> = ({ localImages }) => {\n    const [images, setImages] = useState<Image[]>([]);\n    const [deleting, setDeleting] = useState(false);\n\n    const history = useHistory();\n\n    const loadImages = async () => {\n        const deletedImages = await localImages.getDeletedImages();\n        setImages(deletedImages);\n    };\n\n    const onDeleteImage = async (image: Image) => {\n        setImages(images.filter((i) => i.id !== image.id));\n        await localImages.deleteImage(image.id);\n        if (images.length <= 5) {\n            loadImages();\n        }\n    };\n\n    const onDeleteAllImages = async () => {\n        setDeleting(true);\n        try {\n            await localImages.clearDeletedImages();\n            setImages([]);\n        } finally {\n            setDeleting(false);\n        }\n    };\n\n    const onRestoreImage = async (image: Image) => {\n        setImages(images.filter((i) => i.id !== image.id));\n        await localImages.saveImage({\n            ...image,\n            deleted_at: undefined,\n        });\n    };\n\n    useEffect(() => {\n        loadImages();\n    }, [localImages]);\n\n    return (\n        <div>\n            <div>\n                <div className=\"row\">\n                    <div className=\"col-12\">\n                        <h1 style={{ fontSize: \"40px\", textAlign: \"left\" }}>\n                            <i\n                                style={{ cursor: \"pointer\" }}\n                                onClick={() => history.goBack()}\n                                className=\"fas fa-chevron-left\"\n                            ></i>\n                            &nbsp; Deleted Images\n                        </h1>\n                        <button\n                            className=\"btn btn-danger btn-sm image-popup-delete-button\"\n                            onClick={onDeleteAllImages}\n                            style={{\n                                float: \"right\",\n                                marginRight: \"8px\",\n                            }}\n                        >\n                            <i className=\"fa fa-trash\"></i>&nbsp;Delete All\n                        </button>\n                    </div>\n                </div>\n                <div className=\"row\" style={{ marginTop: \"32px\" }}>\n                    <div className=\"col-sm-2 offset-sm-2\">Image</div>\n                    <div className=\"col-sm-8\">Action</div>\n                </div>\n                {images.map((image) => (\n                    <div\n                        className=\"row\"\n                        style={{\n                            marginTop: \"16px\",\n                            borderBottom: \"1px solid #303030\",\n                        }}\n                        key={image.id}\n                    >\n                        <div className=\"col-sm-2 offset-sm-2\">\n                            <ImageThumbnail\n                                assetsUrl={\"\"}\n                                image={image}\n                                censorNSFW={true}\n                            />\n                        </div>\n                        <div\n                            className=\"col-sm-8\"\n                            style={{\n                                paddingTop: \"64px\",\n                                paddingBottom: \"64px\",\n                            }}\n                        >\n                            <button\n                                className=\"btn btn-danger btn-sm image-popup-delete-button\"\n                                onClick={() => onDeleteImage(image)}\n                                style={{\n                                    marginRight: \"8px\",\n                                }}\n                            >\n                                <i className=\"fa fa-trash\"></i>&nbsp;Delete\n                            </button>\n                            <button\n                                className=\"btn btn-primary btn-sm image-popup-restore-button\"\n                                onClick={() => onRestoreImage(image)}\n                            >\n                                <i className=\"fa fa-undo\"></i>&nbsp;Restore\n                            </button>\n                        </div>\n                    </div>\n                ))}\n            </div>\n            <BusyModal show={deleting} title=\"Deleting Images\">\n                Please wait while we delete all images...\n            </BusyModal>\n        </div>\n    );\n};\n","export interface DBConfig {\n    dbName: string;\n    storeName: string;\n};\n\nexport class KVStore<T> {\n    private dbConfig: DBConfig;\n    private db: IDBDatabase | null = null;\n\n    constructor(dbConfig: DBConfig) {\n        this.dbConfig = dbConfig;\n    }\n\n    private async createDB(): Promise<IDBDatabase> {\n        return new Promise((resolve, reject) => {\n            const request = indexedDB.open(this.dbConfig.dbName);\n\n            request.onupgradeneeded = () => {\n                const db = request.result;\n                db.createObjectStore(this.dbConfig.storeName);\n            };\n\n            request.onsuccess = () => {\n                resolve(request.result);\n            };\n\n            request.onerror = () => {\n                reject(request.error);\n            };\n        });\n    }\n\n    private async getDB(): Promise<IDBDatabase> {\n        if (!this.db) {\n            this.db = await this.createDB();\n        }\n        return this.db;\n    }\n\n\n    async getItem(key: string): Promise<T | null> {\n        const db = await this.getDB();\n\n        return new Promise((resolve, reject) => {\n            const transaction = db.transaction(this.dbConfig.storeName);\n            const store = transaction.objectStore(this.dbConfig.storeName);\n            const request = store.get(key);\n\n            request.onsuccess = () => {\n                resolve(request.result);\n            };\n\n            request.onerror = () => {\n                resolve(null);\n            };\n        });\n    }\n\n    async setItem(key: string, value: T): Promise<void> {\n        const db = await this.getDB();\n\n        return new Promise((resolve, reject) => {\n            const transaction = db.transaction(\n                this.dbConfig.storeName,\n                \"readwrite\"\n            );\n            const store = transaction.objectStore(this.dbConfig.storeName);\n            const request = store.put(value, key);\n\n            request.onsuccess = () => {\n                resolve();\n            };\n\n            request.onerror = () => {\n                resolve();\n            };\n        });\n    }\n\n    async deleteItem(key: string): Promise<void> {\n        const db = await this.getDB();\n\n        return new Promise((resolve, reject) => {\n            const transaction = db.transaction(\n                this.dbConfig.storeName,\n                \"readwrite\"\n            );\n            const store = transaction.objectStore(this.dbConfig.storeName);\n            const request = store.delete(key);\n\n            request.onsuccess = () => {\n                resolve();\n            };\n\n            request.onerror = () => {\n                resolve();\n            };\n        });\n    }\n}\n","// V2 page\nimport React, { FC, useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport Dropdown from \"react-bootstrap/Dropdown\";\nimport { useParams, useHistory, Link } from \"react-router-dom\";\nimport moment from \"moment\";\nimport ScrollToTop from \"react-scroll-to-top\";\nimport { AIBrushApi } from \"../client\";\nimport { CreateImageInput, Image, StatusEnum } from \"../client/api\";\nimport { ImageThumbnail } from \"../components/ImageThumbnail\";\nimport { ImagePrompt, defaultArgs } from \"../components/ImagePrompt\";\nimport {\n    createEncodedThumbnail,\n    encodedImageToBlob,\n    uploadBlob,\n} from \"../lib/imageutil\";\n\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport { ImagePopup } from \"../components/ImagePopup\";\nimport { BusyModal } from \"../components/BusyModal\";\nimport { PendingImagesThumbnail } from \"../components/PendingImagesThumbnail\";\nimport { PendingImages } from \"../components/PendingImages\";\nimport {\n    ApiSocket,\n    NOTIFICATION_IMAGE_DELETED,\n    NOTIFICATION_IMAGE_UPDATED,\n} from \"../lib/apisocket\";\nimport { KVStore } from \"../lib/kvstore\";\nimport { ImagesCache } from \"../lib/imagesCache\";\n\ninterface Props {\n    api: AIBrushApi;\n    apiSocket: ApiSocket;\n    assetsUrl: string;\n}\n\nconst savedImagesCache = new ImagesCache();\n\nexport const SavedImagesPage: FC<Props> = ({ api, apiSocket, assetsUrl }) => {\n    const [creating, setCreating] = useState(false);\n    const [selectedImage, setSelectedImage] = useState<Image | null>(null);\n    const [parentImage, setParentImage] = useState<Image | null>(null);\n\n    const [showPendingImages, setShowPendingImages] = useState(false);\n\n    const [images, setImages] = useState<Array<Image>>([]);\n    const [err, setErr] = useState<string | null>(null);\n    const [hasMore, setHasMore] = useState<boolean>(true);\n    const [search, setSearch] = useState<string>(\"\");\n    const [searchDebounce, setSearchDebounce] = useState<string>(\"\");\n\n    const [bulkDeleteSelecting, setBulkDeleteSelecting] = useState(false);\n    const [bulkDeleting, setBulkDeleting] = useState(false);\n    const [bulkDeleteIds, setBulkDeleteIds] = useState<{\n        [key: string]: boolean;\n    }>({});\n\n    const [censorNSFW, setCensorNSFW] = useState(true);\n\n    const { id } = useParams<{ id?: string }>();\n    const history = useHistory();\n\n    useEffect(() => {\n        let handle = setTimeout(() => {\n            setSearch(searchDebounce);\n        }, 500);\n        return () => {\n            clearTimeout(handle);\n        };\n    }, [searchDebounce]);\n\n    useEffect(() => {\n        if (id) {\n            // check if the image is already loaded\n            const image = images.find((image) => image.id === id);\n            if (image) {\n                setSelectedImage(image);\n            }\n            // refresh\n            api.getImage(id).then((image) => {\n                setSelectedImage(image.data);\n            });\n        } else {\n            setSelectedImage(null);\n        }\n    }, [id]);\n\n    const onSubmit = async (input: CreateImageInput) => {\n        setCreating(true);\n        setParentImage(null);\n        setErr(null);\n        window.scrollTo(0, 0);\n        try {\n            await api.createImage(input);\n        } catch (e: any) {\n            console.error(e);\n            setErr(\"Error creating image\");\n        } finally {\n            setCreating(false);\n        }\n    };\n\n    const onEditNewImage = async (input: CreateImageInput) => {\n        setCreating(true);\n        setParentImage(null);\n        setErr(null);\n        window.scrollTo(0, 0);\n        try {\n            const encodedImage = input.encoded_image!;\n            const encodedThumbnail = await createEncodedThumbnail(encodedImage);\n            const newImages = await api.createImage({\n                ...input,\n                encoded_image: undefined,\n            });\n            if (newImages.data.images) {\n                const image = newImages.data.images![0];\n                const uploadUrls = await api.getImageUploadUrls(image.id);\n                // convert base64 encoded image to binary to upload as image/png with axios\n                const blob = encodedImageToBlob(encodedImage);\n                const thumbnailBlob = encodedImageToBlob(encodedThumbnail);\n                const imagePromise = uploadBlob(\n                    uploadUrls.data.image_url!,\n                    blob\n                );\n                const thumbnailPromise = uploadBlob(\n                    uploadUrls.data.thumbnail_url!,\n                    thumbnailBlob\n                );\n                await Promise.all([imagePromise, thumbnailPromise]);\n\n                history.push(`/image-editor/${image.id}`);\n            }\n        } catch (e: any) {\n            console.error(e);\n            setErr(\"Error creating image\");\n        } finally {\n            setCreating(false);\n        }\n    };\n\n    const onNSFW = (image: Image, nsfw: boolean) => {\n        api.updateImage(image.id, { nsfw }).then((res) => {\n            setImages((images) => {\n                return images.map((i) => {\n                    if (i.id === image.id) {\n                        return res.data;\n                    }\n                    return i;\n                });\n            });\n            setSelectedImage(res.data);\n        });\n    };\n\n    useEffect(() => {\n        if (!api) {\n            return;\n        }\n        const loadImages = async () => {\n            console.log(\"Initial load images\");\n            // clear error\n            setErr(null);\n            setHasMore(true);\n            try {\n                const cursor = moment().add(1, \"minutes\").valueOf();\n                // const resp = await api.listImages(cursor, search, 100, \"desc\");\n                const imagesResult = await savedImagesCache.listImages(\n                    api,\n                    cursor,\n                    search,\n                    100,\n                    \"desc\"\n                );\n                if (imagesResult) {\n                    console.log(\"Initial load images\", imagesResult.length);\n                    setImages(imagesResult.sort(sortImages));\n                }\n                return 0;\n            } catch (err) {\n                setErr(\"Could not load images\");\n                console.error(err);\n            }\n        };\n        loadImages();\n    }, [api, search]);\n\n    useEffect(() => {\n        if (!api) {\n            return;\n        }\n\n        const pollImages = async (images: Array<Image>) => {\n            // clear error\n            setErr(null);\n            // set cursor to max updated_at from images\n            const cursor = images.reduce((max, image) => {\n                return Math.max(max, image.updated_at);\n            }, 0);\n\n            try {\n                const imagesResult = await savedImagesCache.listImages(\n                    api,\n                    cursor + 1,\n                    search,\n                    100,\n                    \"asc\"\n                );\n                if (imagesResult) {\n                    let latestCursor = cursor;\n                    for (let image of imagesResult) {\n                        if (image.updated_at > latestCursor) {\n                            latestCursor = image.updated_at;\n                        }\n                    }\n\n                    // split resp.data.images into \"new\" and \"updated\" lists\n                    // image is \"new\" if it's not in images\n                    const newImages = imagesResult.filter((image) => {\n                        return images.findIndex((i) => i.id === image.id) < 0;\n                    });\n                    const updatedImages = imagesResult.filter((image) => {\n                        return images.findIndex((i) => i.id === image.id) >= 0;\n                    });\n                    setImages((images) => {\n                        const deletedIds: { [key: string]: boolean } = {};\n                        for (let image of newImages) {\n                            if (image.deleted_at) {\n                                deletedIds[image.id] = true;\n                                console.log(\n                                    `Deleting image ${image.id} from list`\n                                );\n                            }\n                        }\n                        for (let image of updatedImages) {\n                            if (image.deleted_at) {\n                                deletedIds[image.id] = true;\n                                console.log(\n                                    `Deleting image ${image.id} from list`\n                                );\n                            }\n                        }\n                        images = images.filter(\n                            (image) => !deletedIds[image.id]\n                        );\n                        return [\n                            ...images.map((image) => {\n                                const updatedImage = updatedImages.find(\n                                    (i) => i.id === image.id\n                                );\n                                if (updatedImage) {\n                                    return updatedImage;\n                                }\n                                return image;\n                            }),\n                            ...newImages.filter((image) => !image.deleted_at),\n                        ].sort(sortImages);\n                    });\n                }\n                return images;\n            } catch (err) {\n                setErr(\"Could not load images\");\n                console.error(err);\n            }\n        };\n\n        // polling is now a fallback for when the websocket connection fails\n        const timerHandle = setInterval(() => {\n            pollImages(images);\n        }, 60 * 1000);\n        return () => {\n            clearInterval(timerHandle);\n        };\n    }, [api, images, search]);\n\n    useEffect(() => {\n        // de-duplicate images by id\n        // first check if there are any duplicates\n        // I know, I should figure out where the duplicates are coming from,\n        // but I'm lazy.\n        const ids = images.map((image) => image.id);\n        const uniqueIds = new Set(ids);\n        if (ids.length !== uniqueIds.size) {\n            setImages((images) => {\n                // there are duplicates\n                const uniqueImages = images.filter((image, index) => {\n                    return ids.indexOf(image.id) === index;\n                });\n                return uniqueImages.sort(sortImages);\n            });\n        }\n    }, [images]);\n\n    useEffect(() => {\n        const onMessage = async (message: string) => {\n            const payload = JSON.parse(message);\n            if (\n                payload.type === NOTIFICATION_IMAGE_UPDATED ||\n                payload.type === NOTIFICATION_IMAGE_DELETED\n            ) {\n                const updatedImage = await api.getImage(payload.id);\n                if (updatedImage.data.temporary) {\n                    return;\n                }\n                setImages((images) => {\n                    const index = images.findIndex(\n                        (image) => image.id === updatedImage.data.id\n                    );\n                    let updatedImages = images;\n                    if (index >= 0) {\n                        updatedImages = images.map((image) => {\n                            if (image.id === updatedImage.data.id) {\n                                return updatedImage.data;\n                            }\n                            return image;\n                        });\n                    } else {\n                        updatedImages = [...images, updatedImage.data];\n                    }\n                    return updatedImages.sort(sortImages);\n                });\n            }\n        };\n        apiSocket.addMessageListener(onMessage);\n        return () => {\n            apiSocket.removeMessageListener(onMessage);\n        };\n    }, [apiSocket]);\n\n    const isPendingOrProcessing = (image: Image) => {\n        return (\n            image.status === StatusEnum.Pending ||\n            image.status === StatusEnum.Processing\n        );\n    };\n\n    const sortImages = (a: Image, b: Image) => {\n        // pending and processing images always come first\n        if (isPendingOrProcessing(a) && !isPendingOrProcessing(b)) {\n            return -1;\n        } else if (!isPendingOrProcessing(a) && isPendingOrProcessing(b)) {\n            return 1;\n        }\n        // if the parent is the same, sort by score descending\n        // otherwise, sort by updated_at\n        if (\n            a.parent === b.parent &&\n            a.params.prompt == b.params.prompt &&\n            a.status !== StatusEnum.Pending &&\n            b.status !== StatusEnum.Pending\n        ) {\n            // if the score is the same, sort by updated_at\n            let aScore = a.score;\n            let bScore = b.score;\n            // working around a bug where negative score was assigned\n            // for an empty negative prompt.\n            if (a.params.prompt!.trim() !== \"\") {\n                aScore = aScore - a.negative_score;\n            }\n            if (b.params.prompt!.trim() !== \"\") {\n                bScore = bScore - b.negative_score;\n            }\n            if (aScore == bScore) {\n                return b.updated_at - a.updated_at;\n            }\n            return bScore - aScore;\n        }\n\n        return b.updated_at - a.updated_at;\n    };\n\n    const onLoadMore = async () => {\n        // get the minimum updated_at from images\n        let minUpdatedAt = moment().valueOf();\n        images.forEach((image) => {\n            minUpdatedAt = Math.min(minUpdatedAt, image.updated_at);\n        });\n        // load images in descending order from updated_at\n        let imagesResult = await savedImagesCache.listImages(\n            api,\n            minUpdatedAt - 1,\n            search,\n            100,\n            \"desc\"\n        );\n        if (imagesResult && imagesResult.length > 0) {\n            // combine images with new images and sort by updated_at descending\n            setImages((images) => {\n                const imagesById = images.reduce((acc, image) => {\n                    acc[image.id] = image;\n                    return acc;\n                }, {} as { [key: string]: Image });\n                imagesResult = (imagesResult || []).filter(\n                    (image) => !imagesById[image.id]\n                );\n                return [...images, ...(imagesResult || [])].sort(sortImages);\n            });\n        } else {\n            setHasMore(false);\n        }\n    };\n\n    const onDelete = async (image: Image) => {\n        try {\n            await api.deleteImage(image.id);\n        } catch (e) {\n            console.error(e);\n            setErr(\"Error deleting image\");\n        }\n    };\n\n    const onFork = async (image: Image) => {\n        history.push({\n            pathname: \"/\",\n            search: `?parent=${image.id}`,\n        });\n    };\n\n    const onEdit = async (image: Image) => {\n        history.push(`/image-editor/${image.id}`);\n    };\n\n    const onThumbnailClicked = (image: Image) => {\n        // setSelectedImage(image);\n        if (bulkDeleteSelecting) {\n            setBulkDeleteIds({\n                ...bulkDeleteIds,\n                [image.id]: !bulkDeleteIds[image.id],\n            });\n        } else {\n            history.push(`/saved/${image.id}`);\n        }\n    };\n\n    const handleCancelFork = () => {\n        setParentImage(null);\n        window.scrollTo(0, 0);\n    };\n\n    const onConfirmBulkDelete = async () => {\n        try {\n            setBulkDeleting(true);\n            // await api.deleteImages(Object.keys(bulkDeleteIds));\n            const promises = Object.keys(bulkDeleteIds).map((id) => {\n                return api.deleteImage(id);\n            });\n            await Promise.all(promises);\n            setImages((images) => {\n                return images.filter((image) => !bulkDeleteIds[image.id]);\n            });\n            setBulkDeleteIds({});\n            setBulkDeleteSelecting(false);\n        } catch (e) {\n            console.error(e);\n            setErr(\"Error deleting images\");\n        } finally {\n            setBulkDeleting(false);\n        }\n    };\n\n    const completedOrSavedImages = images.filter((image) => {\n        return (\n            !image.deleted_at &&\n            (image.status === StatusEnum.Completed ||\n                image.status === StatusEnum.Saved)\n        );\n    });\n\n    const pendingOrProcessingImages = images.filter(\n        (image) =>\n            !image.deleted_at &&\n            (image.status === StatusEnum.Pending ||\n                image.status === StatusEnum.Processing)\n    );\n\n    const pendingImages = pendingOrProcessingImages.filter(\n        (image) => image.status === StatusEnum.Pending\n    );\n\n    const processingImages = pendingOrProcessingImages.filter(\n        (image) => image.status === StatusEnum.Processing\n    );\n\n    return (\n        <>\n            <h1 style={{ fontSize: \"40px\", textAlign: \"left\" }}>\n                Welcome to AiBrush - Saved\n            </h1>\n\n            <div\n                className=\"saved-images\"\n                style={{ marginTop: \"48px\", paddingBottom: \"48px\" }}\n            >\n                <div style={{ textAlign: \"left\" }}>\n                    <div\n                        className=\"input-group\"\n                        style={{ marginBottom: \"16px\" }}\n                    >\n                        <input\n                            style={{}}\n                            value={searchDebounce}\n                            type=\"search\"\n                            className=\"form-control image-search\"\n                            placeholder=\"Search...\"\n                            onChange={(e) => setSearchDebounce(e.target.value)}\n                        />\n\n                        <div\n                            style={{\n                                float: \"right\",\n                            }}\n                        >\n                            {!bulkDeleteSelecting && (\n                                <>\n                                    <button\n                                        style={{ display: \"inline\" }}\n                                        className=\"btn btn-primary image-popup-button\"\n                                        onClick={() =>\n                                            setCensorNSFW(!censorNSFW)\n                                        }\n                                    >\n                                        {!censorNSFW && (\n                                            <i className=\"fas fa-eye\"></i>\n                                        )}\n                                        {censorNSFW && (\n                                            <i className=\"fas fa-eye-slash\"></i>\n                                        )}\n                                    </button>\n                                    <Dropdown\n                                        style={{\n                                            display: \"inline\",\n                                            marginLeft: \"8px\",\n                                        }}\n                                    >\n                                        <Dropdown.Toggle variant=\"danger\">\n                                            <i className=\"fas fa-trash\"></i>\n                                        </Dropdown.Toggle>\n\n                                        <Dropdown.Menu>\n                                            <Dropdown.Item\n                                                onClick={() =>\n                                                    setBulkDeleteSelecting(true)\n                                                }\n                                            >\n                                                Bulk Delete\n                                            </Dropdown.Item>\n                                            <Dropdown.Item\n                                                onClick={() =>\n                                                    history.push(\n                                                        \"/deleted-images\"\n                                                    )\n                                                }\n                                            >\n                                                View Deleted Images\n                                            </Dropdown.Item>\n                                        </Dropdown.Menu>\n                                    </Dropdown>\n                                </>\n                            )}\n                            {bulkDeleteSelecting && (\n                                <>\n                                    <button\n                                        className=\"btn btn-primary image-popup-button\"\n                                        onClick={() => {\n                                            setBulkDeleteSelecting(false);\n                                            setBulkDeleteIds({});\n                                        }}\n                                    >\n                                        Cancel\n                                    </button>\n                                    <button\n                                        style={{ marginLeft: \"8px\" }}\n                                        className=\"btn image-popup-delete-button\"\n                                        onClick={() => {\n                                            onConfirmBulkDelete();\n                                        }}\n                                    >\n                                        Delete\n                                    </button>\n                                </>\n                            )}\n                        </div>\n                    </div>\n                </div>\n                <InfiniteScroll\n                    dataLength={images.length}\n                    next={onLoadMore}\n                    hasMore={hasMore}\n                    loader={\n                        <>\n                            <hr />\n                            <h4>Loading...</h4>\n                        </>\n                    }\n                >\n                    {pendingOrProcessingImages.length > 0 && (\n                        <PendingImagesThumbnail\n                            pendingCount={pendingImages.length}\n                            processingCount={processingImages.length}\n                            onClick={() => {\n                                setShowPendingImages(true);\n                            }}\n                        />\n                    )}\n                    {completedOrSavedImages.map((image) => (\n                        <ImageThumbnail\n                            key={image.id}\n                            image={image}\n                            assetsUrl={assetsUrl}\n                            onClick={onThumbnailClicked}\n                            bulkDelete={\n                                bulkDeleteSelecting && bulkDeleteIds[image.id]\n                            }\n                            censorNSFW={censorNSFW}\n                        />\n                    ))}\n                </InfiniteScroll>\n            </div>\n\n            {selectedImage && (\n                <ImagePopup\n                    assetsUrl={assetsUrl}\n                    image={selectedImage}\n                    onClose={() => history.push(\"/saved\")}\n                    onDelete={(image) => {\n                        onDelete(image);\n                        setImages(images.filter((i) => i.id !== image.id));\n                        history.push(\"/saved\");\n                    }}\n                    onFork={(image) => {\n                        onFork(image);\n                    }}\n                    onEdit={(image) => {\n                        onEdit(image);\n                    }}\n                    onNSFW={onNSFW}\n                    censorNSFW={censorNSFW}\n                />\n            )}\n            <ScrollToTop />\n            <BusyModal show={creating} title=\"Creating images\">\n                <p>Please wait while we create your image.</p>\n            </BusyModal>\n            <BusyModal show={bulkDeleting} title=\"Deleting images\">\n                <p>Please wait while we delete your images.</p>\n            </BusyModal>\n            <PendingImages\n                images={pendingOrProcessingImages}\n                onCancel={() => setShowPendingImages(false)}\n                show={showPendingImages}\n                onDeleteImage={(image) => {\n                    onDelete(image);\n                    setImages(images.filter((i) => i.id !== image.id));\n                }}\n            />\n        </>\n    );\n};\n","\n\n// const imagesCache = new KVStore({\n//     dbName: \"saved-images\",\n//     storeName: \"images\",\n// })\n\nimport { AIBrushApi, Image } from \"../client\";\nimport { KVStore } from \"./kvstore\";\n\nexport class ImagesCache {\n\n    private kvstore: KVStore<Image>;\n\n    constructor() {\n        this.kvstore = new KVStore<Image>({\n            dbName: \"saved-images\",\n            storeName: \"images\",\n        });\n    }\n\n    async listImages(api: AIBrushApi, cursor: number, search: string, limit: number, order: \"asc\" | \"desc\"): Promise<Image[] | undefined> {\n        const resp = await api.listImages(cursor, search, limit, order, \"id,updated_at,deleted_at\");\n        if (!resp.data.images) {\n            return undefined;\n        }\n\n        const result: Image[] = [];\n        const batchGetIds: string[] = [];\n        for (const image of resp.data.images) {\n            if (image.deleted_at) {\n                await this.kvstore.deleteItem(image.id);\n            } else {\n                const savedImage = await this.kvstore.getItem(image.id);\n                if (savedImage && savedImage.updated_at === image.updated_at) {\n                    result.push(savedImage);\n                } else {\n                    batchGetIds.push(image.id);\n                }\n            }\n        }\n        if (batchGetIds.length > 0) {\n            const batchResult = await api.batchGetImages(undefined, {\n                ids: batchGetIds,\n            });\n            if (batchResult.data.images) {\n                for (const image of batchResult.data.images) {\n                    await this.kvstore.setItem(image.id, image);\n                    result.push(image);\n                }\n            }\n        }\n        return result;\n    }\n}","import { useEffect, useState, FC } from \"react\";\nimport loadImage from \"blueimp-load-image\";\nimport {\n    splitImage,\n    mergeTiles,\n    SplitResult,\n    ImageUtilWorker,\n} from \"../lib/imageutil\";\nimport * as uuid from \"uuid\";\n\nexport const TestPage: FC = () => {\n    const [originalImage, setOriginalImage] = useState<string | undefined>();\n    const [upscaledImage, setUpscaledImage] = useState<string | undefined>();\n    const [imageWorker, setImageWorker] = useState<\n        ImageUtilWorker | undefined\n    >();\n\n    useEffect(() => {\n        const imageWorker = new ImageUtilWorker();\n        setImageWorker(imageWorker);\n        return () => {\n            imageWorker.destroy();\n        };\n    }, []);\n\n    const imageDataToCanvas = (imageData: ImageData): HTMLCanvasElement => {\n        const canvas = document.createElement(\"canvas\");\n        canvas.width = imageData.width;\n        canvas.height = imageData.height;\n        const ctx = canvas.getContext(\"2d\");\n        if (!ctx) {\n            throw new Error(\"Could not get canvas context\");\n        }\n        ctx.putImageData(imageData, 0, 0);\n        return canvas;\n    };\n\n    const upscaleImageData = (imageData: ImageData): HTMLCanvasElement => {\n        console.log(\"upscaling image data\", imageData.width, imageData.height);\n        const canvas = document.createElement(\"canvas\");\n        canvas.width = imageData.width * 2;\n        canvas.height = imageData.height * 2;\n        const ctx = canvas.getContext(\"2d\");\n        if (!ctx) {\n            throw new Error(\"Could not get canvas context\");\n        }\n        const image = imageDataToCanvas(imageData);\n        ctx.drawImage(image, 0, 0, canvas.width, canvas.height);\n        return canvas;\n    };\n\n    const onImageSelected = async (\n        event: React.ChangeEvent<HTMLInputElement>\n    ) => {\n        if (!imageWorker) {\n            throw new Error(\"Image worker not initialized\");\n        }\n        const files = event.target.files;\n        if (files && files.length > 0) {\n            loadImage(\n                files[0],\n                async (img) => {\n                    const c = img as HTMLCanvasElement;\n                    const originalImage = c.toDataURL(\"image/png\");\n                    setOriginalImage(originalImage);\n\n                    const ctx = c.getContext(\"2d\");\n                    if (ctx) {\n                        const originalImageData = ctx.getImageData(\n                            0,\n                            0,\n                            c.width,\n                            c.height\n                        );\n                        const splitResult = splitImage(originalImageData);\n                        if (!splitResult) {\n                            setUpscaledImage(originalImage);\n                            return;\n                        }\n                        console.log(\"splitResult\", {\n                            numTilesX: splitResult.numTilesX,\n                            numTilesY: splitResult.numTilesY,\n                            tileSize: splitResult.tileSize,\n                        });\n                        splitResult.tileSize *= 2;\n                        splitResult.imageWidth *= 2;\n                        splitResult.imageHeight *= 2;\n                        for (let x = 0; x < splitResult.numTilesX; x++) {\n                            for (let y = 0; y < splitResult.numTilesY; y++) {\n                                const tile = splitResult.tiles[x][y];\n                                const upscaledTile = upscaleImageData(tile);\n                                const upscaledImageData = upscaledTile\n                                .getContext(\"2d\")!\n                                .getImageData(\n                                    0,\n                                    0,\n                                    upscaledTile.width,\n                                    upscaledTile.height\n                                );\n                                const id = uuid.v4();\n                                const feathered =\n                                    await imageWorker.processRequest({\n                                        id,\n                                        alphaMode: \"none\",\n                                        feather: true,\n                                        width: splitResult.imageWidth,\n                                        height: splitResult.imageHeight,\n                                        pixels: upscaledImageData.data,\n                                        selectionOverlay: {\n                                            x:\n                                                x *\n                                                (splitResult.tileSize - 64),\n                                            y:\n                                                y *\n                                                (splitResult.tileSize - 64),\n                                            width: upscaledTile.width,\n                                            height: upscaledTile.height,\n                                        },\n                                        upscale: true,\n                                        featherWidth: 64,\n                                    });\n\n                                splitResult.tiles[x][y] = new ImageData(feathered.pixels, upscaledTile.width, upscaledTile.height)\n                            }\n                        }\n                        const upscaledImageData = mergeTiles(splitResult);\n                        console.log(\n                            \"upscaled image data size\",\n                            upscaledImageData.width,\n                            upscaledImageData.height\n                        );\n                        const upscaledCanvas =\n                            imageDataToCanvas(upscaledImageData);\n                        const upscaledImage =\n                            upscaledCanvas.toDataURL(\"image/png\");\n                        setUpscaledImage(upscaledImage);\n                    }\n                },\n                { canvas: true }\n            );\n        }\n    };\n\n    return (\n        <div>\n            <input type=\"file\" onChange={onImageSelected} />\n            {originalImage && upscaledImage && (\n                <div>\n                    Original:\n                    <br />\n                    <img src={originalImage} />\n                    <br />\n                    Upscaled:\n                    <br />\n                    <img src={upscaledImage} />\n                </div>\n            )}\n        </div>\n    );\n};\n","import {FC, useEffect, useState} from \"react\";\nimport { AIBrushApi } from \"../client\";\nimport { ApiSocket, NOTIFICATION_CREDITS_UPDATED } from \"../lib/apisocket\";\n\ninterface Props {\n    api: AIBrushApi;\n    apisocket: ApiSocket;\n}\n\n// this component should fetch the credits balance {free_credits, paid_credits} from the server on mount.\n// it should also subscribe to the apisocket to receive updates to the credits balance (NOTIFICATION_CREDITS_UPDATED).\n// display paid credits above, free credits below.\n\nexport const CreditsBalance: FC<Props> = ({api, apisocket}) => {\n    const [credits, setCredits] = useState({free_credits: 0, paid_credits: 0});\n\n    useEffect(() => {\n        const fetchCredits = async () => {\n            const credits = await api.getCredits();\n            setCredits(credits.data);\n        };\n        fetchCredits();\n        const pollHandle = setInterval(fetchCredits, 60000);\n\n        const onMessage = (message: string) => {\n            const data = JSON.parse(message);\n            if (data.type === NOTIFICATION_CREDITS_UPDATED) {\n                fetchCredits();\n            }\n        }\n        apisocket.addMessageListener(onMessage);\n\n        return () => {\n            clearInterval(pollHandle);\n            apisocket.removeMessageListener(onMessage);\n        }\n    }, [api, apisocket]);\n\n    return (\n        <div>\n            <div style={{color: \"#00f0f0\"}}>\n                <span>Paid credits: </span>\n                <span>{credits.paid_credits}</span>\n            </div>\n            <div>\n                <span>Free credits: </span>\n                <span>{credits.free_credits}</span>\n            </div>\n        </div>\n    );\n};","import React from \"react\";\nimport { Card, Button } from \"react-bootstrap\";\n\nimport \"./PricingCard.css\";\n\ninterface PricingCardProps {\n    title: string;\n    price: number;\n    description: string;\n    buttonText: string;\n    onButtonClick: () => void;\n}\n\nconst PricingCard: React.FC<PricingCardProps> = ({\n    title,\n    price,\n    description,\n    buttonText,\n    onButtonClick,\n}) => {\n    return (\n        <Card style={{ width: \"18rem\", textAlign: \"center\" }} className=\"mb-4\">\n            <Card.Body>\n                <Card.Text style={{textAlign: \"right\", marginBottom: \"8px\"}}>\n                    <h3>${price}</h3>\n                </Card.Text>\n                <Card.Title style={{textAlign: \"left\", marginTop: \"0px\", marginBottom: \"24px\"}}>\n                    <i\n                        style={{fontSize: \"40px\", paddingRight: \"8px\"}}\n                        className={`font-weight-bold gradient-title`}\n                    >\n                        {title}\n                    </i>\n                </Card.Title>\n                <Card.Text>\n                    {description}\n                </Card.Text>\n                <Button variant=\"primary\" onClick={onButtonClick}>\n                    {buttonText}\n                </Button>\n            </Card.Body>\n        </Card>\n    );\n};\n\nexport default PricingCard;\n","// RedeemPopup.tsx\nimport React from 'react';\nimport { Modal, Button, Spinner } from 'react-bootstrap';\n\ninterface RedeemPopupProps {\n  state: 'busy' | 'success' | 'failure';\n  onHide: () => void;\n}\n\nconst RedeemPopup: React.FC<RedeemPopupProps> = ({ state, onHide }) => {\n  const getContent = () => {\n    switch (state) {\n      case 'busy':\n        return (\n          <>\n            <Modal.Header>\n              <Modal.Title>Redeeming Code</Modal.Title>\n            </Modal.Header>\n            <Modal.Body className=\"text-center\">\n              <Spinner animation=\"border\" />\n              <p>Processing your code...</p>\n            </Modal.Body>\n          </>\n        );\n      case 'success':\n        return (\n          <>\n            <Modal.Header>\n              <Modal.Title>Code Redeemed</Modal.Title>\n            </Modal.Header>\n            <Modal.Body className=\"text-center\">\n              <p>Your code has been successfully redeemed! You should see an update to your credits balance shortly.</p>\n            </Modal.Body>\n            <Modal.Footer>\n              <Button variant=\"primary\" onClick={onHide}>\n                Close\n              </Button>\n            </Modal.Footer>\n          </>\n        );\n      case 'failure':\n        return (\n          <>\n            <Modal.Header>\n              <Modal.Title>Code Redemption Failed</Modal.Title>\n            </Modal.Header>\n            <Modal.Body className=\"text-center\">\n              <p>Something went wrong. Please try again later or contact support.</p>\n            </Modal.Body>\n            <Modal.Footer>\n              <Button variant=\"danger\" onClick={onHide}>\n                Close\n              </Button>\n            </Modal.Footer>\n          </>\n        );\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <Modal show onHide={state === 'busy' ? undefined : onHide} centered>\n      {getContent()}\n    </Modal>\n  );\n};\n\nexport default RedeemPopup;\n","import { FC, useEffect, useState } from \"react\";\nimport { Row, Col, Form, Button } from \"react-bootstrap\";\nimport { loadStripe, Stripe } from \"@stripe/stripe-js\";\nimport { AIBrushApi } from \"../../client\";\nimport PricingCard from \"./PricingCard\";\n\nimport \"./PricingPage.css\";\nimport RedeemPopup from \"./RedeemPopup\";\n\ninterface Props {\n    api: AIBrushApi;\n}\n\nexport const PricingPage: FC<Props> = ({ api }) => {\n    const [code, setCode] = useState<string>(\"\");\n    const [redeemingState, setRedeemingState] = useState<\n        \"busy\" | \"success\" | \"failure\" | undefined\n    >(undefined);\n    const [stripe, setStripe] = useState<Stripe | undefined>(undefined);\n\n    const handleRedeemCode = (event: React.FormEvent<HTMLFormElement>) => {\n        event.preventDefault();\n        setRedeemingState(\"busy\");\n        setCode(\"\");\n        api.redeemDepositCode(code)\n            .then(() => {\n                setRedeemingState(\"success\");\n            })\n            .catch(() => {\n                setRedeemingState(\"failure\");\n            });\n    };\n\n    const handleBuy = async (product: string) => {\n        if (!stripe) {\n            // alert the user that payments aren't working, and they need to contact support\n            alert(\"Payments are not working right now. Please contact support at admin@aibrush.art.\");\n            return;\n        }\n        console.log(\"buying product\", product);\n        const baseUrl = `${window.location.protocol}//${window.location.host}`;\n        const result = await api.createStripeSession({\n            product_id: product,\n            success_url: `${baseUrl}/stripe-success`,\n            cancel_url: `${baseUrl}/stripe-cancel`,\n        });\n        console.log(\"got session id\", result.data)\n        await stripe.redirectToCheckout({ sessionId: result.data.session_id });\n    };\n\n    useEffect(() => {\n        const loadStripeLibrary = async () => {\n            const stripeInstance = await loadStripe(\"pk_live_51MB0zEC2IU2ctHz653kY6uo9UcwgPxmcw2ISGzThAAQMtklAV2kfuceigzlL9LjCNyXCJkcIouVajlX8ErrRtWaz00Tqobzi2s\");\n            if (!stripeInstance) {\n                console.error(\"Failed to load Stripe library\");\n                return;\n            }\n            setStripe(stripeInstance);\n        };\n\n        loadStripeLibrary();\n    }, []);\n\n    return (\n        <>\n            <h2>Unlock the Power of AI</h2>\n            <div\n                style={{\n                    display: \"flex\",\n                    justifyContent: \"center\",\n                    marginTop: \"40px\",\n                }}\n            >\n                <p\n                    style={{\n                        fontSize: \"20px\",\n                        textAlign: \"center\",\n                    }}\n                    className=\"pricing-page-desc\"\n                >\n                    Generate stunning images with our state-of-the-art Stable\n                    Diffusion AI with over 100 models to choose from. Purchase\n                    credits to create your unique masterpieces without breaking\n                    the bank. Choose from our flexible credit packages and get\n                    started today!\n                </p>\n            </div>\n            <Row\n                className=\"justify-content-center\"\n                style={{ maxWidth: \"1200px\", margin: \"64px auto\" }}\n            >\n                {/* starter, creative, pro */}\n                <Col lg={4} className=\"d-flex justify-content-center\">\n                    <PricingCard\n                        title=\"Starter\"\n                        price={2}\n                        description=\"Dip your toes into the world of AI-generated art with 600 credits. Perfect for first-time users who want to explore the possibilities.\"\n                        buttonText=\"Buy Now\"\n                        onButtonClick={() => {\n                            handleBuy(\"starter\");\n                        }}\n                    />\n                </Col>\n                <Col lg={4} className=\"d-flex justify-content-center\">\n                    <PricingCard\n                        title=\"Creative\"\n                        price={5}\n                        description=\"Fuel your creativity with 2000 credits, offering great value for budding artists and enthusiasts. Unleash your potential!\"\n                        buttonText=\"Buy Now\"\n                        onButtonClick={() => {\n                            handleBuy(\"creative\");\n                        }}\n                    />\n                </Col>\n                <Col lg={4} className=\"d-flex justify-content-center\">\n                    <PricingCard\n                        title=\"Pro\"\n                        price={10}\n                        description=\"Get the ultimate AI art experience with 6000 credits. Ideal for professionals and prolific creators who demand the best.\"\n                        buttonText=\"Buy Now\"\n                        onButtonClick={() => {\n                            handleBuy(\"pro\");\n                        }}\n                    />\n                </Col>\n            </Row>\n            <Row className=\"justify-content-center mt-5\">\n                <Col lg={6}>\n                    <h2 className=\"text-center mb-4\">Redeem Code</h2>\n                    <p className=\"text-center\">\n                        Have a gift code from our awesome admin? Enter it here\n                        to redeem your free credits and start creating!\n                    </p>\n                    <Form onSubmit={handleRedeemCode}>\n                        <Form.Group controlId=\"redeemCode\">\n                            <Form.Control\n                                type=\"text\"\n                                placeholder=\"Enter code here\"\n                                value={code}\n                                onChange={(e) => setCode(e.target.value)}\n                            />\n                        </Form.Group>\n                        <div\n                            className=\"text-center\"\n                            style={{ marginBottom: \"50px\" }}\n                        >\n                            <Button variant=\"primary\" type=\"submit\">\n                                Redeem\n                            </Button>\n                        </div>\n                    </Form>\n                </Col>\n            </Row>\n            {redeemingState && (\n                <RedeemPopup\n                    state={redeemingState}\n                    onHide={() => setRedeemingState(undefined)}\n                />\n            )}\n        </>\n    );\n};\n","import React, { useState, useEffect } from \"react\";\nimport * as axios from \"axios\";\nimport { BrowserRouter, Switch, Route, Link } from \"react-router-dom\";\nimport \"./App.css\";\nimport \"./bootstrap.min.css\";\nimport { AIBrushApi, LoginResult, FeatureList } from \"./client/api\";\nimport { LocalImagesStore } from \"./lib/localImagesStore\";\nimport { getConfig } from \"./config\";\nimport { Login } from \"./pages/Login\";\nimport { TokenRefresher } from \"./components/TokenRefresher\";\nimport { Healthchecker } from \"./components/Healthchecker\";\nimport { Admin } from \"./pages/admin/Admin\";\nimport { ImageEditor } from \"./pages/image-editor/ImageEditor\";\nimport { DeletedImages } from \"./pages/DeletedImages\";\n\n// V2 UI\nimport { Homepage } from \"./pages/Homepage\";\nimport { ApiSocket } from \"./lib/apisocket\";\nimport { DiscordLogin } from \"./pages/DiscordLogin\";\nimport { LocalDeletedImages } from \"./pages/LocalDeletedImages\";\nimport { SavedImagesPage } from \"./pages/SavedImagesPage\";\nimport { TestPage } from \"./pages/TestPage\";\nimport { CreditsBalance } from \"./components/CreditsBalance\";\nimport { PricingPage } from \"./pages/pricing/PricingPage\";\n\nconst config = getConfig();\nconst httpClient = axios.default.create();\nconst client = new AIBrushApi(\n    undefined,\n    localStorage.getItem(\"apiUrl\") || config.apiUrl,\n    httpClient\n);\nconst apiSocket: ApiSocket = new ApiSocket();\nconst localImages = new LocalImagesStore();\n\nfunction updateHttpClient(loginResult: LoginResult) {\n    if (loginResult.accessToken) {\n        httpClient.defaults.headers.common[\n            \"Authorization\"\n        ] = `Bearer ${loginResult.accessToken}`;\n    }\n}\n\nfunction App() {\n    const [credentials, setCredentials] = useState<LoginResult | null>(null);\n    const [assetsUrl, setAssetsUrl] = useState<string>(\"/api/images\");\n    const [isAdmin, setIsAdmin] = useState<boolean>(false);\n    const [features, setFeatures] = useState<FeatureList | null>(null);\n\n    const onLogout = () => {\n        setCredentials(null);\n        localStorage.removeItem(\"credentials\");\n        httpClient.defaults.headers.common[\"Authorization\"] = undefined;\n    };\n\n    const init = async () => {\n        console.log(\"App.init\");\n        await localImages.init();\n        client\n            .getAssetsUrl()\n            .then((result) => setAssetsUrl(result.data.assets_url));\n        client.getFeatures().then((result) => setFeatures(result.data));\n        const storedCredentials = localStorage.getItem(\"credentials\");\n        if (storedCredentials) {\n            // attempt to refresh token\n            try {\n                const credentials = JSON.parse(\n                    storedCredentials\n                ) as LoginResult;\n                updateHttpClient(credentials);\n                const result = await client.refresh({\n                    refreshToken: credentials.refreshToken,\n                });\n                setCredentials(result.data);\n\n                // save to storage\n                localStorage.setItem(\n                    \"credentials\",\n                    JSON.stringify(result.data)\n                );\n                updateHttpClient(result.data);\n                const isAdmin = await client.isAdmin();\n                setIsAdmin(!!isAdmin.data.is_admin);\n                apiSocket.updateToken(result.data.accessToken!);\n                apiSocket.connect();\n            } catch (e) {\n                console.log(e);\n                localStorage.removeItem(\"credentials\");\n            }\n        }\n    };\n\n    const onLogin = async (credentials: LoginResult) => {\n        localStorage.setItem(\"credentials\", JSON.stringify(credentials));\n        setCredentials(credentials);\n        updateHttpClient(credentials);\n        apiSocket.updateToken(credentials.accessToken!);\n        apiSocket.connect();\n    };\n\n    const onCredentialsExpired = () => {\n        onLogout();\n    };\n\n    useEffect(() => {\n        init();\n    }, []);\n\n    return (\n        <div className=\"App\">\n            <TokenRefresher\n                api={client}\n                credentials={credentials as LoginResult}\n                onCredentialsRefreshed={onLogin}\n                onCredentialsExpired={onCredentialsExpired}\n            />\n            <Healthchecker api={client} />\n\n            <BrowserRouter>\n                {/* if credentials are not set, show Login component */}\n                {!credentials && (\n                    <Switch>\n                        <Route path=\"/\" exact={true}>\n                            <Login client={client} onLogin={onLogin} />\n                        </Route>\n                        <Route path=\"/discord-login\">\n                            <DiscordLogin client={client} onLogin={onLogin} />\n                        </Route>\n                        {/* fallback route is login page */}\n                        <Route path=\"*\">\n                            <Login client={client} onLogin={onLogin} />\n                        </Route>\n                    </Switch>\n                )}\n                {credentials && (\n                    <div className=\"container\">\n                        <div className=\"row\">\n                            <div className=\"col-lg-12\">\n                                {/* if credentials are set, show a bootstrap logout button a the far top right corner div */}\n                                {credentials && (\n                                    <>\n                                        <button\n                                            className=\"btn btn-primary top-button\"\n                                            onClick={() => onLogout()}\n                                        >\n                                            {/* font awesome logout icon */}\n                                            <i className=\"fas fa-sign-out-alt\"></i>\n                                        </button>\n                                        {/* saved images */}\n                                        <Link\n                                            className=\"btn btn-primary top-button\"\n                                            to=\"/saved\"\n                                        >\n                                            {/* font awesome save icon */}\n                                            <i className=\"fas fa-save\"></i>\n                                        </Link>\n                                        {/* home button */}\n                                        <Link\n                                            className=\"btn btn-primary top-button\"\n                                            to=\"/\"\n                                        >\n                                            {/* font awesome home icon */}\n                                            <i className=\"fas fa-home\"></i>\n                                        </Link>\n                                        {/* Link to discord */}\n                                        <a\n                                            className=\"btn btn-primary top-button\"\n                                            href=\"https://discord.gg/HYcFpDeqKJ\"\n                                            target=\"_blank\"\n                                        >\n                                            {/* font awesome discord icon */}\n                                            <i className=\"fab fa-discord\"></i>\n                                        </a>\n                                        <Link\n                                            className=\"btn top-button pulse\"\n                                            to=\"/pricing\"\n                                            style={{\n                                                width: \"47px\",\n                                            }}\n                                        >\n                                            {/* font awesome bolt icon */}\n                                            <i className=\"fas fa-bolt\"></i>\n                                        </Link>\n                                    </>\n                                )}\n                            </div>\n                            <div\n                                className=\"col-lg-12\"\n                                style={{ textAlign: \"right\" }}\n                            >\n                                <CreditsBalance\n                                    api={client}\n                                    apisocket={apiSocket}\n                                />\n                            </div>\n                        </div>\n\n                        {/* if credentials are set, show the rest of the app */}\n\n                        <Switch>\n                            <Route path=\"/\" exact={true}>\n                                {/* <MainMenu isAdmin={isAdmin} /> */}\n                                <Homepage\n                                    api={client}\n                                    apiSocket={apiSocket}\n                                    assetsUrl={assetsUrl}\n                                    localImages={localImages}\n                                />\n                            </Route>\n                            <Route path=\"/stripe-success\">\n                                <Homepage\n                                    api={client}\n                                    apiSocket={apiSocket}\n                                    assetsUrl={assetsUrl}\n                                    localImages={localImages}\n                                    paymentStatus=\"success\"\n                                />\n                            </Route>\n                            <Route path=\"/stripe-cancel\">\n                                <Homepage\n                                    api={client}\n                                    apiSocket={apiSocket}\n                                    assetsUrl={assetsUrl}\n                                    localImages={localImages}\n                                    paymentStatus=\"canceled\"\n                                />\n                            </Route>\n                            <Route path=\"/images/:id\">\n                                <Homepage\n                                    api={client}\n                                    apiSocket={apiSocket}\n                                    assetsUrl={assetsUrl}\n                                    localImages={localImages}\n                                />\n                            </Route>\n                            <Route path=\"/saved\" exact={true}>\n                                {/* <MainMenu isAdmin={isAdmin} /> */}\n                                <SavedImagesPage\n                                    api={client}\n                                    apiSocket={apiSocket}\n                                    assetsUrl={assetsUrl}\n                                />\n                            </Route>\n                            <Route path=\"/saved/:id\" exact={true}>\n                                {/* <MainMenu isAdmin={isAdmin} /> */}\n                                <SavedImagesPage\n                                    api={client}\n                                    apiSocket={apiSocket}\n                                    assetsUrl={assetsUrl}\n                                />\n                            </Route>\n                            <Route path=\"/image-editor/:id\">\n                                <ImageEditor\n                                    api={client}\n                                    apisocket={apiSocket}\n                                    assetsUrl={assetsUrl}\n                                    localImages={localImages}\n                                />\n                            </Route>\n                            <Route path=\"/deleted-images\">\n                                <DeletedImages\n                                    api={client}\n                                    assetsUrl={assetsUrl}\n                                />\n                            </Route>\n                            <Route path=\"/local-deleted-images\">\n                                <LocalDeletedImages localImages={localImages} />\n                            </Route>\n                            <Route path=\"/pricing\">\n                                <PricingPage api={client} />\n                            </Route>\n                            <Route path=\"/testpage\">\n                                <TestPage />\n                            </Route>\n                            {isAdmin && (\n                                <>\n                                    <Route path=\"/admin\">\n                                        <Admin api={client} />\n                                    </Route>\n                                </>\n                            )}\n                        </Switch>\n                        <div\n                            // style={{ marginTop: \"100px\", padding: \"50px\" }}\n\n                            // use position:fixed to make the footer stick to the bottom of the page\n                            style={{\n                                position: \"fixed\",\n                                bottom: \"0\",\n                                left: \"0\",\n                                width: \"100%\",\n                                height: \"50px\",\n                                paddingTop: \"16px\",\n                                backgroundColor: \"#000000\",\n                            }}\n                        >\n                            {/* show external popout pages to terms and privacy policy, if they are present in the features */}\n                            {features && features.privacy_uri && (\n                                <a href={features.privacy_uri} target=\"_blank\">\n                                    Privacy Policy\n                                </a>\n                            )}\n                            {features && features.terms_uri && (\n                                <a\n                                    href={features.terms_uri}\n                                    target=\"_blank\"\n                                    style={{ marginLeft: \"20px\" }}\n                                >\n                                    Terms of Service\n                                </a>\n                            )}\n                            {/* link to mail to admin@aibrush.art */}\n                            <a\n                                href=\"mailto:admin@aibrush.art\"\n                                style={{ marginLeft: \"20px\" }}\n                            >\n                                Contact\n                            </a>\n                            <span\n                                style={{ float: \"right\", marginRight: \"50px\" }}\n                            >\n                                Powered by the{\" \"}\n                                <a\n                                    href=\"https://stablehorde.net/\"\n                                    target=\"_blank\"\n                                >\n                                    Stable Horde\n                                </a>\n                            </span>\n                        </div>\n                    </div>\n                )}\n            </BrowserRouter>\n        </div>\n    );\n}\n\nexport default App;\n","export interface Config {\n    apiUrl: string;\n}\n\nexport function getConfig(): Config {\n    // if (process.env.REACT_APP_ENV === \"prod\") {\n    //     return {\n    //         apiUrl: \"https://aibrush.ngrok.io\"\n    //     };\n    // } else if (process.env.REACT_APP_ENV === \"alt\") {\n    //     return {\n    //         apiUrl: \"\"\n    //     };\n    // } else {\n    //     return {\n    //         apiUrl: \"http://localhost:3000\"\n    //     };\n    // }\n    return {\n        apiUrl: \"\"\n    };\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import { Renderer } from \"./renderer\";\n\nexport class ZoomHelper {\n\n    private startTouches: React.TouchList | null;\n    private startZoom = 1;\n    private startOffsetX = 0;\n    private startOffsetY = 0;\n\n    constructor(private renderer: Renderer) {\n        this.startTouches = null;\n    }\n\n    onWheel(event: WheelEvent) {\n        const originalZoom = this.renderer.getZoom();\n        let zoom = this.renderer.getZoom();\n        let offsetX = this.renderer.getOffsetX();\n        let offsetY = this.renderer.getOffsetY();\n\n        let canvasPoint = this.translateMouseToCanvasCoordinates(\n            event.offsetX,\n            event.offsetY\n        );\n        // console.log(\"x: \" + x + \", y: \" + y);\n        \n        if (event.deltaY < 0) {\n            zoom += 0.1 * zoom;\n        } else {\n            zoom -= 0.1 * zoom;\n        }\n        zoom = Math.max(0.1, Math.min(zoom, 8.0));\n\n        let xDiff = canvasPoint.x - -offsetX;\n        let yDiff = canvasPoint.y - -offsetY;\n\n        // offsetX = canvasPoint.x - xDiff * (zoom / originalZoom);\n        // offsetY = canvasPoint.y - yDiff * (zoom / originalZoom);\n        offsetX -= xDiff * (zoom / originalZoom) - xDiff;\n        offsetY -= yDiff * (zoom / originalZoom) - yDiff;\n\n        this.renderer.updateZoomAndOffset(zoom, offsetX, offsetY);\n    }\n\n    onPan(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        let movementX = event.movementX;\n        let movementY = event.movementY;\n        // translate offset to canvas coordinates\n        let rect = (\n            event.target as HTMLCanvasElement\n        ).getBoundingClientRect();\n        movementX = (movementX / rect.width) * 512;\n        movementY = (movementY / rect.height) * 512;\n\n        let zoom = this.renderer.getZoom();\n        let offsetX = this.renderer.getOffsetX();\n        let offsetY = this.renderer.getOffsetY();\n\n        offsetX += movementX / zoom;\n        offsetY += movementY / zoom;\n\n        this.renderer.updateZoomAndOffset(zoom, offsetX, offsetY);\n    }\n\n    onTouchStart(event: React.TouchEvent<HTMLCanvasElement>) {\n        if (event.touches.length === 2) {\n            this.startTouches = event.touches;\n            this.startZoom = this.renderer.getZoom();\n            this.startOffsetX = this.renderer.getOffsetX();\n            this.startOffsetY = this.renderer.getOffsetY();\n        }\n    }\n\n    onTouchMove(event: React.TouchEvent<HTMLCanvasElement>) {\n        if (this.startTouches) {\n            const canvasRect = this.renderer.getCanvas().getBoundingClientRect();\n            const startTouch1 = this.startTouches[0];\n            const startTouch2 = this.startTouches[1];\n            const touch1 = event.touches[0];\n            const touch2 = event.touches[1];\n\n            const startDistance = Math.sqrt(\n                Math.pow(startTouch1.clientX - startTouch2.clientX, 2) +\n                Math.pow(startTouch1.clientY - startTouch2.clientY, 2)\n            );\n            const distance = Math.sqrt(\n                Math.pow(touch1.clientX - touch2.clientX, 2) +\n                Math.pow(touch1.clientY - touch2.clientY, 2)\n            );\n            const zoom = this.startZoom * (distance / startDistance);\n\n            const startCenterX = (startTouch1.clientX + startTouch2.clientX) / 2;\n            const startCenterY = (startTouch1.clientY + startTouch2.clientY) / 2;\n            const centerX = (touch1.clientX + touch2.clientX) / 2;\n            const centerY = (touch1.clientY + touch2.clientY) / 2;\n\n            const startCanvasPoint = this.translateMouseToCanvasCoordinates(\n                startCenterX - canvasRect.left,\n                startCenterY - canvasRect.top\n            );\n            const canvasPoint = this.translateMouseToCanvasCoordinates(\n                centerX - canvasRect.left,\n                centerY - canvasRect.top\n            );\n\n            let offsetX = this.startOffsetX;\n            let offsetY = this.startOffsetY;\n\n            let xDiff = canvasPoint.x - startCanvasPoint.x;\n            let yDiff = canvasPoint.y - startCanvasPoint.y;\n\n            let xDiff2 = canvasPoint.x - -this.renderer.getOffsetX();\n            let yDiff2 = canvasPoint.y - -this.renderer.getOffsetY();\n\n            offsetX -= xDiff2 * (zoom / this.startZoom) - xDiff2 - (xDiff * (distance / startDistance));\n            offsetY -= yDiff2 * (zoom / this.startZoom) - yDiff2 - (yDiff * (distance / startDistance));\n\n            this.renderer.updateZoomAndOffset(zoom, offsetX, offsetY);\n        }\n    }\n\n    onTouchEnd(event: React.TouchEvent<HTMLCanvasElement>) {\n        this.startTouches = null;\n    }\n\n\n    translateMouseToCanvasCoordinates(mouseX: number, mouseY: number, zoom?: number, offsetX?: number, offsetY?: number) {\n        let x = mouseX;\n        let y = mouseY;\n        // adjust for zoom\n        zoom = zoom || this.renderer.getZoom();\n        offsetX = offsetX || this.renderer.getOffsetX();\n        offsetY = offsetY || this.renderer.getOffsetY();\n        x = x / zoom;\n        y = y / zoom;\n\n        // translate offset to canvas coordinates\n        let rect = this.renderer.getCanvas().getBoundingClientRect();\n\n        // x = (x / rect.width) * this.renderer.getWidth();\n        // y = (y / rect.height) * this.renderer.getHeight();\n\n        x = (x / rect.width) * 512;\n        y = (y / rect.height) * 512;\n\n        x = Math.round(x - offsetX);\n        y = Math.round(y - offsetY);\n\n        return { x: x, y: y };\n    }\n\n    translateCanvasToMouseCoordinates(x: number, y: number, zoom?: number, offsetX?: number, offsetY?: number) {\n        zoom = zoom || this.renderer.getZoom();\n        offsetX = offsetX || this.renderer.getOffsetX();\n        offsetY = offsetY || this.renderer.getOffsetY();\n        x = x + offsetX;\n        y = y + offsetY;\n        x = x * zoom;\n        y = y * zoom;\n\n        // translate offset to canvas coordinates\n        let rect = this.renderer.getCanvas().getBoundingClientRect();\n        x = Math.round((x / this.renderer.getWidth()) * rect.width);\n        y = Math.round((y / this.renderer.getHeight()) * rect.height);\n\n        return { x: x, y: y };\n    }\n}","import React from \"react\";\nimport { Renderer } from \"./renderer\";\nimport { ZoomHelper } from \"./zoomHelper\";\n\nexport interface Tool {\n    name: string;\n    getArgs(): any;\n    updateArgs(args: any): void;\n    onMouseDown(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>): void;\n    onMouseMove(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>): void;\n    onMouseUp(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>): void;\n    onMouseLeave(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>): void;\n\n    onTouchStart(event: React.TouchEvent<HTMLCanvasElement>): void;\n    onTouchMove(event: React.TouchEvent<HTMLCanvasElement>): void;\n    onTouchEnd(event: React.TouchEvent<HTMLCanvasElement>): void;\n\n    onKeyDown(event: KeyboardEvent): void;\n    onKeyUp(event: KeyboardEvent): void;\n    onWheel(event: WheelEvent): void;\n    destroy(): boolean;\n    onShowSelectionControls(listener: (show: boolean) => void): void;\n    select(direction: \"left\" | \"right\"): void;\n    onSaveImage(listener: (encodedImage: string) => void): void;\n}\n\nexport class BaseTool implements Tool {\n    saveListener?: (encodedImage: string, args?: any) => void = () => {};\n\n    private touchHandle: number | undefined;\n\n    readonly zoomHelper: ZoomHelper;\n\n    private _pinchZooming = false;\n    private _panning = false;\n\n    constructor(readonly renderer: Renderer, readonly name: string) {\n        this.zoomHelper = new ZoomHelper(renderer);\n    }\n\n    getArgs(): any {\n        return JSON.parse(\n            localStorage.getItem(`tool_args_${this.name}`) || \"{}\"\n        );\n    }\n    updateArgs(args: any) {\n        localStorage.setItem(`tool_args_${this.name}`, JSON.stringify(args));\n    }\n    onMouseDown(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        if (event.button === 1) {\n            this._panning = true;\n        }\n    }\n    onMouseMove(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        if (this._panning) {\n            this.zoomHelper.onPan(event);\n        }\n        let { x, y } = this.zoomHelper.translateMouseToCanvasCoordinates(\n            event.nativeEvent.offsetX,\n            event.nativeEvent.offsetY\n        );\n        this._updateCursor(x, y);\n    }\n\n    private _updateCursor(x: number, y: number) {\n        this.renderer.setCursor({\n            color: \"white\",\n            radius: 10,\n            type: \"crosshairs\",\n            x,\n            y,\n        });\n    }\n\n    onMouseUp(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        if (this._panning) {\n            this._panning = false;\n        }\n    }\n    onMouseLeave(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {}\n\n    onTouchStart(event: React.TouchEvent<HTMLCanvasElement>) {\n        if (this.touchHandle) {\n            window.clearTimeout(this.touchHandle);\n        }\n        const touches: React.Touch[] = [];\n        // make a deep copy so that the values live past the delay\n        for (let i = 0; i < event.touches.length; i++) {\n            const touch = event.touches[i];\n            touches.push({\n                identifier: touch.identifier,\n                clientX: touch.clientX,\n                clientY: touch.clientY,\n                pageX: touch.pageX,\n                pageY: touch.pageY,\n                screenX: touch.screenX,\n                screenY: touch.screenY,\n                target: null,\n            } as any);\n        }\n        event = {\n            touches,\n        } as any;\n        this.touchHandle = window.setTimeout(() => {\n            this.touchHandle = undefined;\n            if (event.touches.length === 2) {\n                this._pinchZooming = true;\n                this.zoomHelper.onTouchStart(event);\n            } else {\n                const rect = this.renderer.getCanvas().getBoundingClientRect();\n                const touch = event.touches[0];\n                if (touch) {\n                    this.onMouseDown({\n                        type: \"touch\",\n                        button: 0,\n                        nativeEvent: {\n                            offsetX: touch.clientX - rect.left,\n                            offsetY: touch.clientY - rect.top,\n                        },\n                    } as any);\n                }\n            }\n        }, 200);\n    }\n    onTouchMove(event: React.TouchEvent<HTMLCanvasElement>) {\n        if (event.touches.length === 2) {\n            this.zoomHelper.onTouchMove(event);\n        } else {\n            const rect = this.renderer.getCanvas().getBoundingClientRect();\n            const touch = event.touches[0];\n            if (touch) {\n                this.onMouseMove({\n                    type: \"touch\",\n                    button: 0,\n                    nativeEvent: {\n                        offsetX: touch.clientX - rect.left,\n                        offsetY: touch.clientY - rect.top,\n                    },\n                } as any);\n            }\n        }\n    }\n    onTouchEnd(event: React.TouchEvent<HTMLCanvasElement>) {\n        if (this._pinchZooming) {\n            this._pinchZooming = false;\n            this.zoomHelper.onTouchEnd(event);\n        } else {\n            this.onMouseUp({\n                button: 0,\n                type: \"touch\",\n            } as any);\n        }\n    }\n\n    onKeyDown(event: KeyboardEvent) {}\n    onKeyUp(event: KeyboardEvent) {}\n    onWheel(event: WheelEvent) {\n        this.zoomHelper.onWheel(event);\n    }\n    destroy(): boolean {\n        return true;\n    }\n    onShowSelectionControls(listener: (show: boolean) => void) {}\n    select(direction: \"left\" | \"right\") {}\n    onSaveImage(listener: (encodedImage: string) => void) {\n        this.saveListener = listener;\n    }\n}\n","\nexport const NOTIFICATION_IMAGE_UPDATED = \"image_updated\";\nexport const NOTIFICATION_IMAGE_DELETED = \"image_deleted\";\nexport const NOTIFICATION_PENDING_IMAGE = \"pending_image\";\nexport const NOTIFICATION_CREDITS_UPDATED = \"credits_updated\";\n\ntype MessageListener = (message: string) => void;\n\nexport class ApiSocket {\n    private client?: WebSocket;\n    private accessToken?: string\n    // private messageListener?: (message: string) => void;\n    private messageListeners: MessageListener[] = [];\n\n    updateToken(accessToken: string) {\n        this.accessToken = accessToken;\n    }\n\n    // onMessage(listener?: (message: string) => void) {\n    //     this.messageListener = listener;\n    // }\n\n    addMessageListener(listener: MessageListener) {\n        this.messageListeners.push(listener);\n    }\n\n    removeMessageListener(listener: MessageListener) {\n        this.messageListeners = this.messageListeners.filter(l => l !== listener);\n    }\n\n    connect() {\n        if (!this.accessToken) {\n            throw new Error(\"unauthenticated\");\n        }\n        if (this.client) {\n            // will reconnect in one second automatically\n            // this is called every time the auth refreshes\n            this.client.close();\n            return;\n        }\n        // let host = window.location.host;\n        let host = \"www.aibrush.art\";\n        let protocol = \"wss\";\n        // if (host.includes(\"localhost\")) {\n        //   host = \"localhost:3000\";\n        //   protocol = \"ws\";\n        // }\n        this.client = new WebSocket(`${protocol}://${host}`);\n        this.client.onerror = err => console.error(err);\n        this.client.onopen = () => {\n            console.log(\"websocket connected\");\n            this.client!.send(this.accessToken!);\n        }\n        this.client.onmessage = evt => {\n            console.log(\"server push\", evt.data);\n            for (const listener of this.messageListeners) {\n                listener(evt.data as string);\n            }\n        }\n        this.client.onclose = () => {\n          console.log(\"websocket closed\");\n          this.client = undefined;\n          setTimeout(() => this.connect(), 500);\n        }\n    }\n}\n","export class RecentList {\n    private key: string;\n    private listSize: number;\n\n    constructor(key: string, listSize: number) {\n        this.key = key;\n        this.listSize = listSize;\n    }\n\n    private getRecentItems(): string[] {\n        const modelsJson = localStorage.getItem(this.key);\n        return modelsJson ? JSON.parse(modelsJson) : [];\n    }\n\n    private saveRecentItems(models: string[]): void {\n        localStorage.setItem(this.key, JSON.stringify(models));\n    }\n\n    addItem(model: string): void {\n        const recentModels = this.getRecentItems();\n        const modelIndex = recentModels.indexOf(model);\n\n        if (modelIndex !== -1) {\n            recentModels.splice(modelIndex, 1);\n        }\n\n        recentModels.unshift(model);\n\n        if (recentModels.length > this.listSize) {\n            recentModels.pop();\n        }\n\n        this.saveRecentItems(recentModels);\n    }\n\n    getItems(): string[] {\n        return this.getRecentItems();\n    }\n}\n\nexport const recentModels = new RecentList(\"recent-models\", 20);\nexport const recentNegativePrompts = new RecentList(\"recent-negative-prompts\", 20);\nexport const recentPrompts = new RecentList(\"recent-positive-prompts\", 20);","import { FC } from \"react\";\n\ninterface Props {\n    imagesCost: number;\n}\n\nexport const CostIndicator: FC<Props> = ({ imagesCost }) => {\n    return (\n        <div style={{ textAlign: \"left\" }}>\n            <span className=\"helptext\" style={{ color: \"#00f0f0\" }}>\n                Cost: {imagesCost} credit{imagesCost > 1 ? \"s\" : \"\"}&nbsp;\n                <i\n                    className=\"fas fa-info-circle\"\n                    style={{ cursor: \"pointer\" }}\n                    onClick={() =>\n                        alert(\n                            \"The cost is based on the image count and the size of each image. A single 512x512 image costs 1 credit.\"\n                        )\n                    }\n                ></i>\n            </span>\n        </div>\n    );\n};\n","import React, { FC, useEffect, useState } from \"react\";\nimport moment from \"moment\";\nimport { Image, StatusEnum } from \"../client/api\";\nimport { LocalImage } from \"../lib/localImagesStore\";\n\ninterface Props {\n    assetsUrl: string;\n    image: LocalImage;\n    censorNSFW: boolean;\n    bulkDelete?: boolean;\n    onClick?: (image: Image) => void;\n}\n\nexport const ImageThumbnail: FC<Props> = ({ assetsUrl, image, censorNSFW, bulkDelete, onClick }) => {\n    const src = `${assetsUrl}/${image.id}.thumbnail.png?updated_at=${image.updated_at}`;\n    const [retry, setRetry] = useState(\"\");\n\n    useEffect(() => {\n        // This is to help deal with eventual consistency from S3.\n        // if image.updated_at (unix timestamp in milliseconds) is less than a minute ago, try to reload the image\n        if (moment().diff(moment(image.updated_at), \"minutes\") < 1) {\n            setRetry(\"\");\n            const t = setTimeout(() => {\n                setRetry(\"&retry\")\n            }, 3000);\n            return () => clearTimeout(t);\n        }\n    }, [image.id, image.updated_at])\n\n    let label = image.label;\n    if (image.label === \"\") {\n        label = image.params.prompt || \"\";\n    }\n    if (label.indexOf(\",\") !== -1) {\n        label = label.substring(0, label.indexOf(\",\"));\n    }\n    \n    let className = \"image-thumbnail\";\n    if (bulkDelete) {\n        className += \" bulk-delete\";\n    }\n\n    let backgroundImage = `url(${src}${retry}), url(/images/default.png)`;\n    if (image.imageData) {\n        backgroundImage = `url(${image.imageData}), url(/images/default.png)`;\n    }\n\n    return (\n        <div\n            className={className}\n            style={{\n                backgroundImage,\n                backgroundRepeat: \"no-repeat\",\n                backgroundPosition: \"center\",\n                filter: (image.nsfw && censorNSFW) ? \"blur(8px)\" : undefined,\n            }}\n            onClick={() => onClick && onClick(image)}\n        >\n            {!bulkDelete && <div className=\"image-thumbnail-label\">\n                {label}\n            </div>}\n\n            {bulkDelete && <div className=\"image-thumbnail-label\">\n                <input type=\"checkbox\" style={{\n                    width: \"20px\",\n                    height: \"20px\",\n                    marginLeft: \"16px\",\n                    marginTop: \"16px\",\n                }} checked readOnly />\n            </div>}\n\n            {image.status === StatusEnum.Pending && <div className=\"image-thumbnail-pending\">\n                <i style={{marginTop: \"20px\"}} className=\"fa fa-hourglass-half\"></i>\n            </div>}\n            {\n                image.status === StatusEnum.Processing && <div className=\"image-thumbnail-pending\">\n                    <i style={{marginTop: \"20px\"}} className=\"fa fa-cog fa-spin\"></i>\n                </div>\n            }\n        </div>\n    );\n};\n","\nexport const supportedModels = [\n    \"Epic Diffusion\",\n    \"Rev Animated\",\n    \"Anything v3\",\n    \"Hentai Diffusion\",\n    \"Ranma Diffusion\",\n    \"URPM\",\n    \"Deliberate\",\n    \"GTA5 Artwork Diffusion\",\n    \"ChilloutMix\",\n    \"Realism Engine\",\n    \"AIO Pixel Art\",\n    \"Microworlds\",\n    \"Microchars\",\n    \"OrbAI\",\n    \"App Icon Diffusion\",\n];\n\n// canny, hed, depth, normal, openpose, seg, scribble, fakescribbles, hough\nexport const controlnetTypes = [\n    \"canny\",\n    \"hed\",\n    \"depth\",\n    \"normal\",\n    \"openpose\",\n    \"seg\",\n    \"scribble\",\n    \"fakescribbles\",\n    \"hough\",\n]","import { FC, useState, FormEvent } from \"react\";\nimport { Form, FormGroup, FormControl, FormText, FormCheck } from \"react-bootstrap\";\n\ninterface Props {\n    seed: string;\n    setSeed: (seed: string) => void;\n}\n\nexport const SeedInput: FC<Props> = ({seed, setSeed}) => {\n    const [useCustomSeed, setUseCustomSeed] = useState(false);\n\n    const onChangeCustomSeed = () => {\n        setUseCustomSeed(!useCustomSeed);\n        if (useCustomSeed) {\n            setSeed(\"\");\n        } else {\n            // set seed to a random number\n            setSeed(Math.floor(Math.random() * 1000000000).toString());\n        }\n    };\n\n    return (\n        <Form>\n            <FormGroup>\n                <FormCheck \n                    type=\"checkbox\"\n                    label=\"Use Custom Seed\"\n                    checked={useCustomSeed}\n                    onChange={(e) => onChangeCustomSeed()}\n                />\n            </FormGroup>\n\n            {useCustomSeed && (\n                <FormGroup>\n                    <FormControl\n                        type=\"text\"\n                        // value={seed}\n                        // onChange={(e) => setSeed(e.target.value)}\n                        placeholder=\"Enter seed\"\n                        value={seed}\n                        onChange={(e: any) => setSeed(e.target.value)}\n                    />\n                </FormGroup> \n            )}\n        </Form>\n    );\n};\n","import React, { useState } from \"react\";\nimport { InputGroup, FormControl, Dropdown } from \"react-bootstrap\";\n\ninterface TextInputWithHistoryProps {\n    value: string;\n    onChange: (newValue: string) => void;\n    history: string[];\n}\n\nconst TextInputWithHistory: React.FC<TextInputWithHistoryProps> = ({\n    value,\n    onChange,\n    history,\n}) => {\n    const [show, setShow] = useState(false);\n\n    const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        onChange(event.target.value);\n    };\n\n    const handleDropdownSelect = (eventKey: string | null) => {\n        if (eventKey) {\n            onChange(eventKey);\n        }\n        setShow(false);\n    };\n\n    const handleInputClick = () => {\n        setShow(!show);\n    };\n\n    return (\n        <div>\n            <FormControl\n                value={value}\n                onChange={handleInputChange}\n                onClick={handleInputClick}\n                onBlur={() => {\n                    setTimeout(() => setShow(false), 200);\n                }}\n            />\n            <Dropdown show={show} onSelect={handleDropdownSelect}>\n                <Dropdown.Toggle\n                    variant=\"success\"\n                    id=\"dropdown-basic\"\n                    style={{ height: \"0px\", padding: \"0px\", visibility: \"hidden\", position: \"absolute\" }}\n                />\n                <Dropdown.Menu style={{width: \"100%\", overflow: \"hidden\"}}>\n                    {history.map((item, index) => (\n                        <Dropdown.Item eventKey={item} key={index}>\n                            {item}\n                        </Dropdown.Item>\n                    ))}\n                </Dropdown.Menu>\n            </Dropdown>\n        </div>\n    );\n};\n\nexport default TextInputWithHistory;\n","import React, { FC, useEffect, useState } from \"react\";\nimport { CreateImageInput, StatusEnum, Image, AIBrushApi } from \"../client\";\nimport {\n    aspectRatios,\n    DEFAULT_ASPECT_RATIO,\n    getClosestAspectRatio,\n    AspectRatio,\n} from \"../lib/aspecRatios\";\nimport loadImage from \"blueimp-load-image\";\nimport { AspectRatioSelector } from \"./AspectRatioSelector\";\nimport { getUpscaleLevel } from \"../lib/upscale\";\nimport { resizeEncodedImage } from \"../lib/imageutil\";\nimport { LocalImage } from \"../lib/localImagesStore\";\nimport { controlnetTypes, supportedModels } from \"../lib/supportedModels\";\nimport { SeedInput } from \"./SeedInput\";\nimport ModelSelector from \"./ModelSelector\";\nimport { calculateImagesCost } from \"../lib/credits\";\nimport { CostIndicator } from \"./CostIndicator\";\nimport { recentPrompts, recentNegativePrompts } from \"../lib/recentList\";\nimport TextInputWithHistory from \"./TextInputWithHistory\";\n\ninterface Props {\n    api: AIBrushApi;\n    parent: LocalImage | null;\n    creating: boolean;\n    assetsUrl: string;\n    onSubmit: (input: CreateImageInput) => void;\n    // go straight to editor without variations\n    onEdit: (input: CreateImageInput) => void;\n    onCancel: () => void;\n}\n\nexport function defaultArgs(): CreateImageInput {\n    return {\n        params: {\n            prompt: \"\",\n            negative_prompt: defaultNegativePrompt(),\n            width: 512,\n            height: 512,\n            steps: 20,\n            denoising_strength: 0.75,\n        },\n        label: \"\",\n        encoded_image: \"\",\n        encoded_mask: \"\",\n        model: \"Epic Diffusion\",\n        count: 4,\n    };\n}\n\nfunction defaultNegativePrompt(): string {\n    return recentNegativePrompts.getItems()[0] || \"low quality, distorted, deformed, dull, boring, plain, ugly, noise\";\n}\n\nexport const ImagePrompt: FC<Props> = ({\n    api,\n    parent,\n    creating,\n    assetsUrl,\n    onSubmit,\n    onCancel,\n    onEdit,\n}) => {\n    const [prompt, setPrompt] = useState<string>(\"\");\n    const [negativePrompt, setNegativePrompt] = useState<string>(\n        defaultNegativePrompt()\n    );\n    const [count, setCount] = useState<number>(4);\n    const [variationStrength, setVariationStrength] = useState<number>(0.75);\n    const [aspectRatio, setAspectRatio] =\n        useState<number>(DEFAULT_ASPECT_RATIO);\n    const [parentId, setParentId] = useState<string | null>(null);\n    const [advancedView, setAdvancedView] = useState<boolean>(false);\n    const [encodedImage, setEncodedImage] = useState<string>(\"\");\n    const [model, setModel] = useState<string>(\"Epic Diffusion\");\n\n    const [selectingModel, setSelectingModel] = useState<boolean>(false);\n\n    const [controlnetType, setControlnetType] = useState<string | undefined>();\n    const [cfgScale, setCfgScale] = useState<number>(7.5);\n    const [seed, setSeed] = useState<string>(\"\");\n    const [size, setSize] = useState<number>(1);\n    const defaultAspectRatio = aspectRatios[DEFAULT_ASPECT_RATIO];\n\n    const [aspectRatioDetails, setAspectRatioDetails] = useState<AspectRatio>(\n        aspectRatios[DEFAULT_ASPECT_RATIO]\n    );\n    let [originalWidth, setOriginalWidth] = useState<number>(\n        defaultAspectRatio.width\n    );\n    let [originalHeight, setOriginalHeight] = useState<number>(\n        defaultAspectRatio.height\n    );\n\n    // const aspectRatioDetails = aspectRatios[aspectRatio];\n\n    const resetState = () => {\n        setPrompt(\"\");\n        setNegativePrompt(recentNegativePrompts.getItems()[0] || defaultNegativePrompt);\n        // setCount(4);\n        setAdvancedView(false);\n        setParentId(null);\n        // setVariationStrength(0.75);\n        setAspectRatio(DEFAULT_ASPECT_RATIO);\n        setAspectRatioDetails(aspectRatios[DEFAULT_ASPECT_RATIO]);\n        setEncodedImage(\"\");\n        // setCfgScale(7.5);\n        setSeed(\"\");\n    };\n\n    const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\n        if (negativePrompt) {\n            recentNegativePrompts.addItem(negativePrompt);\n        }\n        e.preventDefault();\n        const args = defaultArgs();\n        args.params.prompt = prompt || \"\";\n        args.params.negative_prompt = negativePrompt || \"\";\n        args.count = seed ? 1 : count;\n        args.parent = parentId || undefined;\n        args.params.denoising_strength = variationStrength;\n        args.nsfw = true;\n        args.model = model;\n        args.temporary = true;\n        args.params.controlnet_type = controlnetType as any;\n        args.params.cfg_scale = cfgScale;\n        args.params.seed = seed || undefined;\n        if (parent) {\n            const bestMatch = getClosestAspectRatio(\n                parent.params.width!,\n                parent.params.height!\n            ).scale(size);\n            args.params.width = bestMatch.width;\n            args.params.height = bestMatch.height;\n        } else {\n            const bestMatch = getClosestAspectRatio(\n                aspectRatioDetails.width,\n                aspectRatioDetails.height\n            ).scale(size);\n            args.params.width = bestMatch.width;\n            args.params.height = bestMatch.height;\n        }\n        if (encodedImage) {\n            args.encoded_image = await resizeEncodedImage(\n                encodedImage,\n                args.params.width,\n                args.params.height,\n                \"png\"\n            );\n        }\n\n        resetState();\n        onSubmit(args);\n    };\n\n    const handleEdit = () => {\n        if (!encodedImage) {\n            console.error(\"Cannot edit without existing image\");\n            return;\n        }\n        if (negativePrompt) {\n            recentNegativePrompts.addItem(negativePrompt);\n        }\n        const args = defaultArgs();\n        args.params.prompt = prompt || \"\";\n        args.params.negative_prompt = negativePrompt || \"\";\n        args.count = 1;\n        args.parent = parentId || undefined;\n        // args.stable_diffusion_strength = variationStrength;\n        args.params.denoising_strength = variationStrength;\n        args.status = StatusEnum.Completed;\n        args.params.width = originalWidth;\n        args.params.height = originalHeight;\n        args.params.cfg_scale = cfgScale;\n        args.nsfw = true;\n        args.model = model;\n        if (encodedImage) {\n            args.encoded_image = encodedImage;\n        }\n\n        resetState();\n        onEdit(args);\n    };\n\n    const handleCancel = () => {\n        resetState();\n        onCancel();\n    };\n\n    const onSelectModel = (model: string) => {\n        setModel(model);\n        setSelectingModel(false);\n    };\n\n    const onImageSelected = async (e: React.ChangeEvent<HTMLInputElement>) => {\n        const file = e.target.files && e.target.files[0];\n        if (!file) {\n            return;\n        }\n        loadImage(\n            file,\n            (img: Event | HTMLImageElement | HTMLCanvasElement) => {\n                if (!(img instanceof HTMLCanvasElement)) {\n                    return;\n                }\n                // try to match width and height to a supported aspect ratio\n                const width = img.width;\n                const height = img.height;\n                let bestMatch = getClosestAspectRatio(width, height);\n\n                const canvas = document.createElement(\"canvas\");\n                // canvas.width = bestMatch.width;\n                // canvas.height = bestMatch.height;\n                canvas.width = width;\n                canvas.height = height;\n                const ctx = canvas.getContext(\"2d\");\n                if (!ctx) {\n                    return;\n                }\n                ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n\n                // convert image to base64\n                // const canvas = img as HTMLCanvasElement\n                const dataUrl = canvas.toDataURL(\"image/png\");\n                const base64 = dataUrl.split(\",\")[1];\n                setEncodedImage(base64);\n                // get the index of the best match\n                setAspectRatio(\n                    aspectRatios.findIndex((a) => a.id === bestMatch.id)\n                );\n                setAspectRatioDetails(bestMatch);\n                setOriginalWidth(width);\n                setOriginalHeight(height);\n                // remove canvas\n                canvas.remove();\n            },\n            {\n                maxWidth: 4096,\n                maxHeight: 4096,\n                canvas: true,\n            }\n        );\n    };\n\n    useEffect(() => {\n        if (parent) {\n            const imageData = parent.imageData;\n            if (imageData) {\n                setEncodedImage(imageData.split(\",\")[1]);\n            }\n            setPrompt(parent.params.prompt || \"\");\n            setNegativePrompt(\n                parent.params.negative_prompt || defaultNegativePrompt()\n            );\n            setCount(4);\n            setParentId(parent.id);\n            setAdvancedView(true);\n            setVariationStrength(parent.params.denoising_strength || 0.75);\n            setModel(\n                supportedModels.indexOf(parent.model) > -1\n                    ? parent.model\n                    : \"Epic Diffusion\"\n            );\n            setCfgScale(parent.params.cfg_scale || 7.5);\n        } else {\n            resetState();\n        }\n    }, [parent]);\n\n    // unset controlnet when encodedImage is null\n    useEffect(() => {\n        if (!encodedImage) {\n            setControlnetType(undefined);\n        }\n    }, [encodedImage]);\n\n    const scaledAspectRatio = aspectRatioDetails.scale(size);\n    const imagesCost = calculateImagesCost(\n        count,\n        scaledAspectRatio.width,\n        scaledAspectRatio.height\n    );\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <div className=\"homepage-prompt\">\n                <div className=\"input-group\">\n                    <input\n                        className=\"form-control prompt\"\n                        placeholder=\"What would you like to create?\"\n                        value={prompt}\n                        onChange={(e) => setPrompt(e.target.value)}\n                    />\n\n                    <div className=\"input-group-append\">\n                        <select\n                            className=\"form-control prompt-count\"\n                            style={{ borderTopLeftRadius: \"0px\" }}\n                            value={seed ? 1 : count}\n                            onChange={(e) => setCount(parseInt(e.target.value))}\n                            disabled={!!seed}\n                        >\n                            <option value={1}>1</option>\n                            <option>2</option>\n                            <option>3</option>\n                            <option>4</option>\n                            <option>5</option>\n                            <option>6</option>\n                            <option>7</option>\n                            <option>8</option>\n                            <option>9</option>\n                            <option>10</option>\n                        </select>\n                        <button\n                            type=\"submit\"\n                            className=\"btn btn-secondary light-button\"\n                            style={{ marginLeft: \"8px\" }}\n                            disabled={!prompt || creating}\n                        >\n                            {/* paintbrush button */}\n                            {!creating && (\n                                <i className=\"fas fa-paint-brush\"></i>\n                            )}\n                            {/* spinner button */}\n                            {creating && (\n                                <i className=\"fas fa-spinner fa-spin\"></i>\n                            )}\n                        </button>\n                    </div>\n                </div>\n                <CostIndicator imagesCost={imagesCost} />\n                <div\n                    style={{\n                        marginTop: \"24px\",\n                    }}\n                >\n                    <a\n                        href=\"javascript:void(0)\"\n                        onClick={() => setAdvancedView(!advancedView)}\n                        style={{\n                            color: \"white\",\n                            textDecoration: \"underline\",\n                        }}\n                    >\n                        Advanced\n                    </a>\n                    &nbsp;\n                    {advancedView ? (\n                        <i className=\"fas fa-chevron-up\"></i>\n                    ) : (\n                        <i className=\"fas fa-chevron-down\"></i>\n                    )}\n                </div>\n                {advancedView && (\n                    <div className=\"homepage-prompt-advanced\">\n                        {encodedImage && (\n                            <div className=\"form-group\">\n                                <label>Init Image</label>\n                                <img\n                                    style={{\n                                        display: \"block\",\n                                        marginLeft: \"auto\",\n                                        marginRight: \"auto\",\n                                        maxWidth: \"100%\",\n                                    }}\n                                    src={`data:image/png;base64,${encodedImage}`}\n                                />\n                            </div>\n                        )}\n                        {!parent && !encodedImage && (\n                            <AspectRatioSelector\n                                aspectRatio={aspectRatio}\n                                onChange={(aspectRatioId) => {\n                                    setAspectRatio(aspectRatioId);\n                                    setAspectRatioDetails(\n                                        aspectRatios[aspectRatioId]\n                                    );\n                                }}\n                            />\n                        )}\n                        <div className=\"form-group\">\n                            <div\n                                style={{\n                                    display: \"block\",\n                                    maxWidth: encodedImage ? \"350px\" : \"180px\",\n                                    marginTop: \"40px\",\n                                    marginRight: \"auto\",\n                                    marginLeft: \"auto\",\n                                }}\n                            >\n                                <label\n                                    id=\"loadimage-wrapper\"\n                                    className={`btn btn-primary `}\n                                    style={{ display: \"inline\" }}\n                                >\n                                    {/* upload image */}\n                                    <i className=\"fas fa-upload\"></i>&nbsp;\n                                    {encodedImage || parent\n                                        ? \"Replace Image\"\n                                        : \"Upload Image\"}\n                                    <input\n                                        id=\"loadimage\"\n                                        type=\"file\"\n                                        style={{ display: \"none\" }}\n                                        onChange={onImageSelected}\n                                    />\n                                </label>\n                                {encodedImage && (\n                                    <label\n                                        className=\"btn btn-secondary\"\n                                        onClick={() => setEncodedImage(\"\")}\n                                        style={{ display: \"inline\" }}\n                                    >\n                                        {/* remove image */}\n                                        <i className=\"fas fa-trash\"></i>&nbsp;\n                                        Remove Image\n                                    </label>\n                                )}\n                            </div>\n                        </div>\n                        <div className=\"form-group\">\n                            <label htmlFor=\"model\">Model</label>\n                            <div>\n                                <button\n                                    type=\"button\"\n                                    className=\"btn btn-secondary light-button\"\n                                    onClick={() => setSelectingModel(true)}\n                                >\n                                    {model}&nbsp;\n                                    <i className=\"fas fa-caret-down\"></i>\n                                </button>\n                            </div>\n                        </div>\n                        <div className=\"form-group\">\n                            {/* negative prompt */}\n                            <label htmlFor=\"negativePrompt\">\n                                Negative Prompt\n                            </label>\n                            {/* <input\n                                type=\"text\"\n                                className=\"form-control\"\n                                id=\"negativePrompt\"\n                                placeholder=\"What would you like to avoid?\"\n                                value={negativePrompt}\n                                onChange={(e) =>\n                                    setNegativePrompt(e.target.value)\n                                }\n                            /> */}\n                            <TextInputWithHistory\n                                history={recentNegativePrompts.getItems()}\n                                value={negativePrompt}\n                                onChange={setNegativePrompt}\n                            />\n                            <span className=\"helptext\">\n                                Try descriptive words like \"blurry\" or\n                                \"distorted\"\n                            </span>\n                        </div>\n                        {!seed && (\n                            <div className=\"form-group\">\n                                <label htmlFor=\"count\">Count: {count}</label>\n                                {/* range slider from 1 to 20 */}\n                                <input\n                                    type=\"range\"\n                                    className=\"form-control-range\"\n                                    id=\"count\"\n                                    min=\"1\"\n                                    max=\"10\"\n                                    value={count}\n                                    onChange={(e) =>\n                                        setCount(parseInt(e.target.value))\n                                    }\n                                />\n                                <span className=\"helptext\">\n                                    This is how many images you want to generate\n                                </span>\n                            </div>\n                        )}\n                        {/* size slider */}\n                        <div className=\"form-group\">\n                            <label htmlFor=\"size\">Size: {scaledAspectRatio.width} x {scaledAspectRatio.height}</label>\n                            {/* range slider from 1 to 2 in increments of 0.1 */}\n                            <input\n                                type=\"range\"\n                                className=\"form-control-range\"\n                                id=\"size\"\n                                min=\"1\"\n                                max=\"2\"\n                                step=\"0.1\"\n                                value={size}\n                                onChange={(e) =>\n                                    setSize(parseFloat(e.target.value))\n                                }\n                            />\n                            <span className=\"helptext\">\n                                This allows you to adjust the size of your images. Larger images cost more credits.\n                            </span>\n                        </div>\n\n                        {(parentId || encodedImage) && (\n                            <div className=\"form-group\">\n                                {/* variation strength */}\n                                <label htmlFor=\"variationStrength\">\n                                    Variation Strength:&nbsp;\n                                    {(variationStrength * 100).toFixed(0)}%\n                                </label>\n                                <input\n                                    type=\"range\"\n                                    className=\"form-control-range\"\n                                    id=\"variationStrength\"\n                                    min=\"0.05\"\n                                    max=\"0.95\"\n                                    step=\"0.05\"\n                                    value={variationStrength}\n                                    onChange={(e) =>\n                                        setVariationStrength(\n                                            parseFloat(e.target.value)\n                                        )\n                                    }\n                                />\n                                <span className=\"helptext\">\n                                    This is how much variation you want to see\n                                    from the parent image\n                                </span>\n                            </div>\n                        )}\n                        {encodedImage && (\n                            // controlnet type - canny, hed, depth, normal, openpose, seg, scribble, fakescribbles, hough\n                            <div className=\"form-group\">\n                                <label htmlFor=\"controlNetType\">\n                                    Control Net Type\n                                </label>\n                                <select\n                                    className=\"form-control\"\n                                    id=\"controlNetType\"\n                                    value={controlnetType}\n                                    onChange={(e) =>\n                                        setControlnetType(e.target.value)\n                                    }\n                                >\n                                    <option value=\"\">None</option>\n                                    {controlnetTypes.map((type) => (\n                                        <option\n                                            value={type}\n                                            key={`type-${type}`}\n                                        >\n                                            {type}\n                                        </option>\n                                    ))}\n                                </select>\n                                <span className=\"helptext\">\n                                    Controlnet is an advanced way of controlling\n                                    the output of image generation. You can read\n                                    more about it{\" \"}\n                                    <a\n                                        target=\"_blank\"\n                                        href=\"https://bootcamp.uxdesign.cc/controlnet-and-stable-diffusion-a-game-changer-for-ai-image-generation-83555cb942fc\"\n                                    >\n                                        here.\n                                    </a>\n                                </span>\n                            </div>\n                        )}\n                        {/* cfg scale. Slider from 1 to 20 in increments of 0.1 */}\n                        <div className=\"form-group\">\n                            <label>CFG Scale: {cfgScale.toFixed(1)}</label>\n                            <input\n                                type=\"range\"\n                                className=\"form-control-range\"\n                                min=\"1\"\n                                max=\"20\"\n                                step=\"0.5\"\n                                value={cfgScale}\n                                onChange={(e) =>\n                                    setCfgScale(parseFloat(e.target.value))\n                                }\n                            />\n                            <span className=\"helptext\">\n                                Adjust the CFG scale to control how much the\n                                image looks like the prompt.\n                            </span>\n                        </div>\n                        <SeedInput seed={seed} setSeed={setSeed} />\n\n                        <div\n                            className=\"form-group\"\n                            style={{ minHeight: \"20px\" }}\n                        >\n                            <div className=\"float-right\">\n                                {parent && (\n                                    <button\n                                        type=\"button\"\n                                        className=\"btn btn-secondary light-button\"\n                                        onClick={handleCancel}\n                                    >\n                                        <i className=\"fas fa-times\"></i>\n                                        &nbsp;CANCEL\n                                    </button>\n                                )}\n                                <button\n                                    type=\"submit\"\n                                    className=\"btn btn-primary\"\n                                    style={{ marginLeft: \"8px\" }}\n                                    disabled={!prompt || creating}\n                                >\n                                    {/* paintbrush button */}\n                                    {!creating && (\n                                        <i className=\"fas fa-paint-brush\"></i>\n                                    )}\n                                    {/* spinner button */}\n                                    {creating && (\n                                        <i className=\"fas fa-spinner fa-spin\"></i>\n                                    )}\n                                    &nbsp;PAINT\n                                </button>\n                                {encodedImage && (\n                                    <button\n                                        type=\"button\"\n                                        className=\"btn btn-secondary light-button\"\n                                        onClick={handleEdit}\n                                        style={{ marginLeft: \"8px\" }}\n                                        disabled={!prompt || creating}\n                                    >\n                                        <i className=\"fas fa-edit\"></i>\n                                        &nbsp;EDIT\n                                    </button>\n                                )}\n                            </div>\n                        </div>\n                    </div>\n                )}\n            </div>\n            {selectingModel && (\n                <ModelSelector\n                    api={api}\n                    onCancel={() => setSelectingModel(false)}\n                    onSelectModel={onSelectModel}\n                    initialSelectedModel={model}\n                    inpainting={false}\n                />\n            )}\n        </form>\n    );\n};\n","import { FC } from \"react\";\n\ninterface Props {\n    progress: number;\n}\n\nexport const ProgressBar: FC<Props> = ({ progress }) => {\n    return (\n        <div className=\"progress\" style={{ height: \"20px\", marginTop: \"16px\" }}>\n            <div\n                className=\"progress-bar\"\n                role=\"progressbar\"\n                style={{ width: `${progress * 100}%` }}\n                aria-valuenow={progress * 100}\n                aria-valuemin={0}\n                aria-valuemax={100}\n            >\n                {Math.round(progress * 100)}%\n            </div>\n        </div>\n    );\n};\n","export function sleep(ms: number): Promise<void> {\n    return new Promise(resolve => window.setTimeout(resolve, ms));\n}\n","const BASE_IMAGE_SIZE = 512 * 512;\n\nexport function calculateImagesCost(count: number, width: number, height: number): number {\n    // 512x512 = 1 credit\n    // floor(count * width * height / 512 / 512)\n    return Math.max(count * Math.floor(width * height / BASE_IMAGE_SIZE), 1);\n}","import { FC, useEffect, useState } from \"react\";\nimport { ListGroup } from \"react-bootstrap\";\nimport { StableDiffusionModel } from \"../client\";\n\ninterface Props {\n    models: StableDiffusionModel[];\n    onSelectModel: (model: StableDiffusionModel) => void;\n    selectedModel: string;\n}\n\nconst MOBILE_HEIGHT_PERCENT = 0.3;\n\nexport const ModelList: FC<Props> = ({ models, onSelectModel, selectedModel }) => {\n    const [maxHeight, setMaxHeight] = useState(window.innerWidth < 576 ? window.innerHeight * MOBILE_HEIGHT_PERCENT : window.innerHeight * 0.7); // Set maxHeight to 80% of the viewport height\n\n    useEffect(() => {\n        const handleResize = () => {\n            let maxHeight = window.innerHeight * 0.7;\n            if (window.innerWidth < 576) {\n                maxHeight = window.innerHeight * MOBILE_HEIGHT_PERCENT;\n            }\n            setMaxHeight(maxHeight); // Update maxHeight based on the current viewport height\n        };\n\n        window.addEventListener(\"resize\", handleResize);\n        return () => {\n            window.removeEventListener(\"resize\", handleResize);\n        };\n    }, []);\n\n    return (\n        <ListGroup\n            style={{\n                maxHeight: `${maxHeight}px`,\n                overflowY: \"auto\",\n                border: \"1px solid #808080\",\n                marginBottom: \"8px\",\n            }}\n        >\n            {models.map((model) => (\n                <ListGroup.Item\n                    key={model.name}\n                    active={selectedModel === model.name}\n                    onClick={() => onSelectModel(model)}\n                    style={{\n                        cursor: \"pointer\",\n                    }}\n                >\n                    {model.name}\n                </ListGroup.Item>\n            ))}\n        </ListGroup>\n    );\n};\n","import { useState, useEffect } from \"react\";\n\nexport class SimpleCache {\n    private storage: Storage;\n\n    constructor() {\n        this.storage = window.localStorage;\n    }\n\n    setItem(key: string, value: any, ttl = 60 * 60) {\n        const item: {\n            value: any;\n            expiry: number;\n        } = {\n            value,\n            expiry: Date.now() + ttl * 1000,\n        };\n        this.storage.setItem(key, JSON.stringify(item));\n    }\n\n    getItem(key: string): any {\n        try {\n            const itemStr = this.storage.getItem(key);\n            if (!itemStr) {\n                return null;\n            }\n    \n            const item: {\n                value: any;\n                expiry: number;\n            } = JSON.parse(itemStr);\n            if (Date.now() > item.expiry) {\n                this.storage.removeItem(key);\n                return null;\n            }\n            return item.value;\n        } catch (error) {\n            console.error(error);\n            return null;\n        }\n    }\n\n    removeItem(key: string) {\n        this.storage.removeItem(key);\n    }\n\n    clear() {\n        this.storage.clear();\n    }\n}\n\nconst cache = new SimpleCache();\n\nexport function useCache<T>(key: string, initialValue: T): [T, React.Dispatch<React.SetStateAction<T>>] {\n  const [value, setValue] = useState<T>(() => {\n    const cachedValue = cache.getItem(key);\n    return cachedValue !== null ? cachedValue : initialValue;\n  });\n\n  useEffect(() => {\n    cache.setItem(key, value);\n  }, [key, value]);\n\n  return [value, setValue];\n}\n","import React, { useEffect, useState } from \"react\";\nimport { Button, Modal, Form, ListGroup, Row, Col } from \"react-bootstrap\";\nimport axios from \"axios\";\nimport { AIBrushApi, StableDiffusionModel } from \"../client\";\nimport { ModelList } from \"./ModelList\";\nimport { useCache } from \"../lib/localcache\";\nimport { recentModels } from \"../lib/recentList\";\n\nconst httpclient = axios.create();\n\ninterface ModelSelectorProps {\n    api: AIBrushApi;\n    initialSelectedModel: string;\n    onSelectModel: (model: string) => void;\n    onCancel: () => void;\n    inpainting: boolean;\n}\n\n\n\nconst ModelSelector: React.FC<ModelSelectorProps> = ({\n    api,\n    initialSelectedModel,\n    onSelectModel,\n    onCancel,\n    inpainting,\n}) => {\n    const [models, setModels] = useCache<StableDiffusionModel[]>(\"models\", []);\n    const [selectedModel, setSelectedModel] =\n        useState<StableDiffusionModel | null>(null);\n    const [searchTerm, setSearchTerm] = useState(\"\");\n\n    const filteredModels = models.filter((model) =>\n        model.inpainting === inpainting && model.name.toLowerCase().includes(searchTerm.toLowerCase())\n    );\n\n    const handleSelect = () => {\n        console.log(\"Selected model:\", selectedModel);\n        if (selectedModel) {\n            onSelectModel(selectedModel.name);\n        }\n    };\n\n    const handleSearch = (e: React.ChangeEvent<HTMLInputElement>) => {\n        setSearchTerm(e.target.value);\n    };\n\n    const handleModelClick = (model: StableDiffusionModel) => {\n        setSelectedModel(model);\n    };\n\n    useEffect(() => {\n        const setSortedModels = (\n            selectedModel: StableDiffusionModel,\n            models: StableDiffusionModel[]\n        ) => {\n            recentModels.addItem(selectedModel.name);\n\n            const recentModelNames = recentModels.getItems();\n            // map from model name to index\n            const recentModelIndices: { [key: string]: number } = {};\n            recentModelNames.forEach((name, index) => {\n                recentModelIndices[name] = index;\n            });\n            // sort models by recentness\n            const sortedModels = models.sort((a, b) => {\n                const aIndex = recentModelIndices[a.name];\n                const bIndex = recentModelIndices[b.name];\n                if (aIndex === undefined && bIndex === undefined) {\n                    return 0;\n                } else if (aIndex === undefined) {\n                    return 1;\n                } else if (bIndex === undefined) {\n                    return -1;\n                } else {\n                    return aIndex - bIndex;\n                }\n            });\n\n            setModels(sortedModels);\n        };\n\n        if (!models || models.length === 0) {\n            api.getModels().then((res) => {\n                console.log(res);\n                const selectedModel =\n                    res.data[initialSelectedModel] ||\n                    Object.values(res.data)[0];\n                console.log(\"Selected model:\", selectedModel);\n                setSelectedModel(selectedModel);\n                setSortedModels(selectedModel, Object.values(res.data));\n            });\n        } else {\n            const selectedModel =\n                models.find((model) => model.name === initialSelectedModel) ||\n                models[0];\n            setSelectedModel(selectedModel);\n            setSortedModels(selectedModel, models);\n        }\n    }, [api, models]);\n\n    useEffect(() => {\n        if (initialSelectedModel) {\n            recentModels.addItem(initialSelectedModel);\n        }\n    }, [initialSelectedModel]);\n\n    return (\n        <>\n            <Modal show={true} onHide={onCancel} size=\"xl\">\n                <Modal.Header closeButton>\n                    <Modal.Title>Select Model</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <Form.Control\n                        type=\"text\"\n                        placeholder=\"Search\"\n                        value={searchTerm}\n                        onChange={handleSearch}\n                    />\n                    <Row className=\"mt-3\">\n                        <Col sm={4}>\n                            <ModelList\n                                models={filteredModels}\n                                onSelectModel={handleModelClick}\n                                selectedModel={selectedModel?.name || \"\"}\n                            />\n                        </Col>\n                        <Col sm={8}>\n                            {selectedModel && (\n                                <>\n                                    <h5>{selectedModel.name}</h5>\n                                    <p>{selectedModel.description}</p>\n                                    {selectedModel.showcases &&\n                                        selectedModel.showcases.length > 0 && (\n                                            <img\n                                                src={selectedModel.showcases[0]}\n                                                alt=\"Showcase\"\n                                                style={{\n                                                    width: \"70%\",\n                                                }}\n                                            />\n                                        )}\n                                </>\n                            )}\n                        </Col>\n                    </Row>\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button variant=\"secondary\" onClick={onCancel}>\n                        Cancel\n                    </Button>\n                    <Button\n                        variant=\"primary\"\n                        onClick={handleSelect}\n                        disabled={!selectedModel}\n                    >\n                        Select\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n        </>\n    );\n};\n\nexport default ModelSelector;\n","import React, { FC, useEffect, useState } from 'react';\nimport moment from \"moment\";\n\n// implement an error notification component\n// error message and timestamp are passed in as props\n// but close button can make the error message disappear\n\n// show error when the timestamp or message changes with useEffect hook\n// hide error when the close button is clicked\n\ninterface Props {\n    message: string | null;\n    timestamp: number;\n}\n\ninterface AlertProps {\n    message: string;\n    timestamp: number;\n    alertType: 'success' | 'info' | 'warning' | 'danger';\n}\n\nconst Alert: FC<AlertProps> = ({ message, timestamp, alertType }) => {\n    const [show, setShow] = useState(!!message);\n\n    useEffect(() => {\n        setShow(!!message);\n        // set a timeout of 10 seconds to hide the message if it is currently showing\n        if (message) {\n            const timeout = setTimeout(() => {\n                setShow(false);\n            }, 10000);\n            return () => {\n                clearTimeout(timeout);\n            };\n        }\n    }, [message, timestamp]);\n\n    if (!show) {\n        return null;\n    }\n\n    return (\n        <div className={`alert alert-${alertType} ${show ? 'show' : 'hide'}`}>\n            <button\n                type=\"button\"\n                className=\"close\"\n                onClick={() => setShow(false)}\n            >\n                &times;\n            </button>\n            {message}\n        </div>\n    );\n};\n\nexport const ErrorNotification: FC<Props> = ({ message, timestamp }) => {\n    return (\n        <Alert message={message || ''} timestamp={timestamp} alertType=\"danger\" />\n    );\n};\n\nexport const SuccessNotification: FC<Props> = ({ message, timestamp }) => {\n    return (\n        <Alert message={message || ''} timestamp={timestamp} alertType=\"success\" />\n    );\n};\n","import React, { FC, useState, useEffect } from \"react\";\nimport { ChromePicker } from \"react-color\";\n\n// class ButtonExample extends React.Component {\n//   state = {\n//     displayColorPicker: false,\n//   };\n\n//   handleClick = () => {\n//     this.setState({ displayColorPicker: !this.state.displayColorPicker })\n//   };\n\n//   handleClose = () => {\n//     this.setState({ displayColorPicker: false })\n//   };\n\n//   render() {\n//     const popover = {\n//       position: 'absolute',\n//       zIndex: '2',\n//     }\n//     const cover = {\n//       position: 'fixed',\n//       top: '0px',\n//       right: '0px',\n//       bottom: '0px',\n//       left: '0px',\n//     }\n//     return (\n//       <div>\n//         <button onClick={ this.handleClick }>Pick Color</button>\n//         { this.state.displayColorPicker ? <div style={ popover }>\n//           <div style={ cover } onClick={ this.handleClose }/>\n//           <ChromePicker />\n//         </div> : null }\n//       </div>\n//     )\n//   }\n// }\n\ninterface Props {\n    color: string;\n    onColorSelected: (color: string) => void;\n}\n\nexport const ColorPicker: FC<Props> = ({ color, onColorSelected }) => {\n    const [displayColorPicker, setDisplayColorPicker] = useState(false);\n    const [tmpColor, setTmpColor] = useState(color);\n\n    const handleClick = () => {\n        setDisplayColorPicker(!displayColorPicker);\n        if (displayColorPicker) {\n            onColorSelected(tmpColor);\n        }\n    };\n\n    const handleClose = () => {\n        setDisplayColorPicker(false);\n        if (displayColorPicker) {\n            onColorSelected(tmpColor);\n        }\n    };\n\n    const popover: React.CSSProperties = {\n        position: \"absolute\",\n        zIndex: 2,\n    };\n    const cover: React.CSSProperties = {\n        position: \"fixed\",\n        top: \"0px\",\n        right: \"0px\",\n        bottom: \"0px\",\n        left: \"0px\",\n    };\n\n    return (\n        <>\n            <button className=\"color-picker\" onClick={handleClick}>\n                <i className=\"fas fa-plus\" />\n            </button>\n            {displayColorPicker ? (\n                <div style={popover}>\n                    <div style={cover} onClick={handleClose} />\n                    <ChromePicker\n                        color={tmpColor}\n                        onChange={(color) => setTmpColor(color.hex)}\n                        onChangeComplete={(color) => setTmpColor(color.hex)}\n                    />\n                </div>\n            ) : null}\n        </>\n    );\n};\n","import React, { FC, useEffect, useState } from \"react\";\nimport { ChromePicker } from \"react-color\";\n\nimport { Renderer } from \"./renderer\";\nimport { BaseTool, Tool } from \"./tool\";\nimport { ZoomHelper } from \"./zoomHelper\";\nimport { PaletteButton } from \"./PaletteButton\";\nimport { ColorPicker } from \"./ColorPicker\";\n\nexport const defaultColors = [\n    \"#FFFFFF\",\n    \"#5A2C02\",\n    \"#386EB6\",\n    \"#6B31A1\",\n    \"#CB2C26\",\n    \"#000000\",\n    \"#888888\",\n    \"#50B050\",\n    \"#FBDB37\",\n    \"#E88D2D\",\n];\n\nexport class PencilTool extends BaseTool implements Tool {\n    private brushSize = 10;\n\n    private panning = false;\n    private isDrawing = false;\n    private lastX = 0;\n    private lastY = 0;\n    private colorPicking = false;\n    private lastPickedColor = \"#000000\";\n    private _dirty = false;\n\n    set dirty(dirty: boolean) {\n        this._dirty = dirty;\n        if (this.dirtyListener) {\n            this.dirtyListener(dirty);\n        }\n    }\n\n    get dirty() {\n        return this._dirty;\n    }\n\n    private dirtyListener?: (dirty: boolean) => void;\n    private colorPickedListener?: (color: string) => void;\n\n    constructor(\n        renderer: Renderer,\n        private layer: \"base\" | \"mask\",\n        private brushColor = defaultColors[0],\n        name = \"pencil\"\n    ) {\n        super(renderer, name);\n    }\n\n    private sync() {\n        if (this.colorPicking) {\n            this.renderer.setCursor({\n                x: this.lastX,\n                y: this.lastY,\n                radius: this.renderer.getWidth() / 20,\n                color: this.lastPickedColor,\n                type: \"colorpicker\",\n            });\n        } else {\n            this.renderer.setCursor({\n                x: this.lastX,\n                y: this.lastY,\n                radius: this.brushSize / 2,\n                color: this.brushColor,\n                type: \"circle-fill\",\n            });\n        }\n    }\n\n    updateArgs(args: any) {\n        super.updateArgs(args);\n        this.brushSize = args.brushSize || 10;\n        this.brushColor = args.brushColor || defaultColors[0];\n        this.sync();\n    }\n\n    onMouseDown(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        if (this.colorPicking) {\n            return;\n        }\n        if (event.button === 0) {\n            let { x, y } = this.zoomHelper.translateMouseToCanvasCoordinates(\n                event.nativeEvent.offsetX,\n                event.nativeEvent.offsetY\n            );\n            this.renderer.drawPoint(\n                x,\n                y,\n                this.brushSize,\n                this.brushColor,\n                this.layer\n            );\n            this.isDrawing = true;\n            this.lastX = x;\n            this.lastY = y;\n            this.dirty = true;\n        } else if (event.button === 1) {\n            this.panning = true;\n        }\n        this.sync();\n    }\n\n    onMouseMove(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>): void {\n        let { x, y } = this.zoomHelper.translateMouseToCanvasCoordinates(\n            event.nativeEvent.offsetX,\n            event.nativeEvent.offsetY\n        );\n        if (this.colorPicking) {\n            this.lastPickedColor = this.renderer.getPixel(x, y);\n        } else if (this.panning) {\n            this.zoomHelper.onPan(event);\n        } else {\n            if (this.isDrawing) {\n                this.renderer.drawLine(\n                    this.lastX,\n                    this.lastY,\n                    x,\n                    y,\n                    this.brushSize,\n                    this.brushColor,\n                    this.layer\n                );\n                this.dirty = true;\n            }\n        }\n        this.lastX = x;\n        this.lastY = y;\n        this.sync();\n    }\n\n    onMouseUp(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>): void {\n        if (event.button === 0) {\n            this.isDrawing = false;\n            if (this.colorPicking) {\n                this.colorPicking = false;\n                this.brushColor = this.lastPickedColor;\n                if (this.colorPickedListener) {\n                    this.colorPickedListener(this.lastPickedColor);\n                }\n            }\n        } else if (event.button === 1) {\n            this.panning = false;\n        }\n        this.sync();\n    }\n\n    onWheel(event: WheelEvent) {\n        this.zoomHelper.onWheel(event);\n        this.sync();\n    }\n\n    cancel() {\n        // kind of a hack, clears the selection layer\n        this.renderer.setEditImage(null);\n        this.dirty = false;\n    }\n\n    confirm() {\n        this.renderer.commitSelection();\n        const encodedImage = this.renderer.getEncodedImage(null);\n        if (encodedImage && this.saveListener) {\n            this.saveListener(encodedImage);\n        }\n        this.dirty = false;\n    }\n\n    onSaveImage(listener: (encodedImage: string) => void): void {\n        this.saveListener = listener;\n    }\n\n    onDirty(listener: (dirty: boolean) => void): void {\n        this.dirtyListener = listener;\n    }\n\n    destroy(): boolean {\n        if (this.dirty) {\n            this.renderer.commitSelection();\n        }\n        return true;\n    }\n\n    beginColorpicker(): void {\n        this.colorPicking = true;\n        this.sync();\n    }\n\n    onColorPicked(listener: (color: string) => void): void {\n        this.colorPickedListener = listener;\n    }\n}\n\ninterface ControlsProps {\n    renderer: Renderer;\n    tool: PencilTool;\n    colors: string[];\n}\n\nconst MAX_PALETTE_SIZE = 30;\n\nfunction addToPalette(palette: string[], color: string): string[] {\n    if (palette.indexOf(color) === -1) {\n        // insert at the beginning\n        palette = [color, ...palette];\n    }\n    if (palette.length > MAX_PALETTE_SIZE) {\n        palette = palette.slice(0, MAX_PALETTE_SIZE);\n    }\n    return palette;\n}\n\nexport const Controls: FC<ControlsProps> = ({ renderer, tool, colors }) => {\n    const [brushSize, setBrushSize] = useState(10);\n    const [brushColor, setBrushColor] = useState(colors[0]);\n    const [palette, setPalette] = useState(colors);\n    const [dirty, setDirty] = useState(false);\n\n    tool.onDirty(setDirty);\n\n    useEffect(() => {\n        tool.updateArgs({\n            brushSize,\n            brushColor,\n            palette,\n        });\n    }, [brushSize, brushColor, palette]);\n\n    const onColorSelected = (color: string) => {\n        setBrushColor(color);\n        setPalette(addToPalette(palette, color));\n    };\n\n    tool.onColorPicked(onColorSelected);\n\n    return (\n        <div style={{ marginTop: \"16px\" }}>\n            <div className=\"form-group\">\n                <label style={{ width: \"100%\" }}>\n                    Brush size\n                    <small\n                        className=\"form-text text-muted\"\n                        style={{ float: \"right\" }}\n                    >\n                        {brushSize}px\n                    </small>\n                </label>\n                <input\n                    type=\"range\"\n                    className=\"form-control-range\"\n                    min=\"1\"\n                    max=\"100\"\n                    value={brushSize}\n                    onChange={(e) => setBrushSize(parseInt(e.target.value))}\n                />\n            </div>\n            <div\n                style={{\n                    display: \"flex\",\n                    flexDirection: \"row\",\n                    flexWrap: \"wrap\",\n                }}\n            >\n                {palette.map((color, i) => (\n                    <PaletteButton\n                        key={i}\n                        selectedColor={brushColor}\n                        color={color}\n                        onClick={(color) => setBrushColor(color)}\n                    />\n                ))}\n                {/* <div\n                    className=\"color-picker\"\n                    style={{ textAlign: \"center\", backgroundColor: \"#ccc\" }}\n                >\n                    <i className=\"fas fa-eye-dropper\" />\n                </div> */}\n                <button\n                    className=\"color-picker\"\n                    onClick={() => tool.beginColorpicker()}\n                >\n                    <i className=\"fas fa-eye-dropper\" />\n                </button>\n                <ColorPicker\n                    color={brushColor}\n                    onColorSelected={(color) => onColorSelected(color)}\n                />\n            </div>\n            <div\n                className=\"form-group\"\n                style={{\n                    marginTop: \"16px\",\n                    visibility: dirty ? \"visible\" : \"hidden\",\n                }}\n            >\n                <button\n                    className=\"btn btn-secondary\"\n                    onClick={() => tool.cancel()}\n                >\n                    Revert\n                </button>\n                <button\n                    className=\"btn btn-primary\"\n                    onClick={() => tool.confirm()}\n                    style={{ marginLeft: \"8px\" }}\n                >\n                    Save\n                </button>\n            </div>\n        </div>\n    );\n};\n","import React, { useState, useEffect } from \"react\";\nimport { Renderer } from \"./renderer\";\nimport { Cursor, Rect } from \"./models\";\nimport { Tool, BaseTool } from \"./tool\";\nimport { AspectRatioSelector } from \"../../components/AspectRatioSelector\";\nimport { getUpscaleLevel } from \"../../lib/upscale\";\nimport {\n    DEFAULT_ASPECT_RATIO,\n    aspectRatios,\n    getClosestAspectRatio,\n} from \"../../lib/aspecRatios\";\nimport { ZoomHelper } from \"./zoomHelper\";\nimport { runInThisContext } from \"vm\";\n\nexport class SelectionTool extends BaseTool implements Tool {\n    private selectionOverlay: Rect | undefined;\n    private selectionOverlayPreview: Rect | undefined;\n    private outpaint?: boolean;\n\n    // private selectionWidth: number = 512;\n    // private selectionHeight: number = 512;\n\n    private panning = false;\n\n    // TODO: size modifier to make the selection overlay smaller\n\n    constructor(renderer: Renderer) {\n        super(renderer, \"select\");\n    }\n\n    updateArgs(args: any) {\n        args = {\n            ...this.getArgs(),\n            ...args,\n        }\n        super.updateArgs(args);\n        this.selectionOverlay = args.selectionOverlay || {\n            x: 0,\n            y: 0,\n            width: 512,\n            height: 512,\n        };\n        this.outpaint = args.outpaint;\n        if (!this.outpaint) {\n            this.selectionOverlay = this.clamp(this.selectionOverlay!);\n        }\n        this.sync();\n    }\n\n    private clamp(rect: Rect): Rect {\n        const imageWidth = this.renderer.getWidth();\n        const imageHeight = this.renderer.getHeight();\n        let x = rect.x;\n        let y = rect.y;\n        let width = rect.width;\n        let height = rect.height;\n        // clamp to the canvas\n        x = Math.max(0, Math.min(x, imageWidth - this.selectionOverlay!.width));\n        y = Math.max(0, Math.min(y, imageHeight - rect.height));\n        x = Math.min(x, imageWidth - rect.width);\n        y = Math.min(y, imageHeight - rect.height);\n        width = Math.min(width, imageWidth);\n        height = Math.min(height, imageHeight);\n        return {\n            x: x,\n            y: y,\n            width: width,\n            height: height,\n        };\n    }\n\n    private sync(): void {\n        this.renderer.setSelectionOverlay(this.selectionOverlay);\n        this.renderer.setSelectionOverlayPreview(this.selectionOverlayPreview);\n    }\n\n    onMouseDown(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        if (event.type == \"touch\") {\n            this.onMouseMove(event);\n        } else if (event.button === 0) {\n            this.selectionOverlay = this.selectionOverlayPreview;\n            this.selectionOverlayPreview = undefined;\n            this.sync();\n            this.updateArgs({\n                selectionOverlay: this.selectionOverlay,\n            });\n        } else if (event.button === 1) {\n            this.panning = true;\n        }\n    }\n\n    onMouseMove(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        const imageWidth = this.renderer.getWidth();\n        const imageHeight = this.renderer.getHeight();\n        if (this.panning) {\n            this.zoomHelper.onPan(event);\n        } else {\n            let { x, y } = this.zoomHelper.translateMouseToCanvasCoordinates(\n                event.nativeEvent.offsetX,\n                event.nativeEvent.offsetY\n            );\n\n            // round to the nearest 16 pixels\n            x = Math.round(x / 16) * 16;\n            y = Math.round(y / 16) * 16;\n            // offset by -256 to center the rect\n            x -= 256;\n            y -= 256;\n\n            this.selectionOverlayPreview = {\n                x: x,\n                y: y,\n                width: this.selectionOverlay!.width,\n                height: this.selectionOverlay!.height,\n            };\n\n            if (!this.outpaint) {\n                this.selectionOverlayPreview = this.clamp(this.selectionOverlayPreview);\n            }\n\n            \n            this.sync();\n        }\n    }\n\n    onMouseUp(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        if (event.button === 0 && event.type == \"touch\") {\n            this.selectionOverlay = this.selectionOverlayPreview;\n            this.selectionOverlayPreview = undefined;\n            this.sync();\n            this.updateArgs({\n                selectionOverlay: this.selectionOverlay,\n            });\n        }\n        this.panning = false;\n    }\n\n    onMouseLeave(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        this.selectionOverlayPreview = undefined;\n        this.panning = false;\n        this.sync();\n    }\n\n    onWheel(event: WheelEvent) {\n        this.zoomHelper.onWheel(event);\n    }\n\n    destroy() {\n        // this.renderer.setSelectionOverlay(undefined);\n        this.renderer.setSelectionOverlayPreview(undefined);\n        return true;\n    }\n}\n\ninterface ControlsProps {\n    renderer: Renderer;\n    tool: Tool;\n    /** Lock aspect ratio for smaller images */\n    lockAspectRatio?: boolean;\n    outpaint?: boolean;\n}\n\nexport const Controls: React.FC<ControlsProps> = ({\n    renderer,\n    tool,\n    lockAspectRatio,\n    outpaint,\n}) => {\n    const upscaleLevel = getUpscaleLevel(\n        renderer.getWidth(),\n        renderer.getHeight()\n    );\n    const [aspectRatio, setAspectRatio] = useState(DEFAULT_ASPECT_RATIO);\n    const [size, setSize] = useState(1);\n\n    useEffect(() => {\n        const upscaleLevel = getUpscaleLevel(\n            renderer.getWidth(),\n            renderer.getHeight()\n        );\n        // lock aspect ratio to image\n        if (upscaleLevel === 0 && lockAspectRatio) {\n            const aspectRatio = getClosestAspectRatio(\n                renderer.getWidth(),\n                renderer.getHeight()\n            );\n            setAspectRatio(aspectRatio.id);\n            tool.updateArgs({\n                selectionOverlay: {\n                    x: 0,\n                    y: 0,\n                    width: aspectRatio.width,\n                    height: aspectRatio.height,\n                },\n                outpaint,\n            });\n        } else {\n            const args = tool.getArgs();\n            if (args.selectionOverlay) {\n                // restore args\n                const aspectRatio = getClosestAspectRatio(\n                    args.selectionOverlay.width,\n                    args.selectionOverlay.height\n                );\n                setAspectRatio(aspectRatio.id);\n                setSize(args.selectionOverlay.width / aspectRatio.width);\n                tool.updateArgs(args);\n            } else {\n                // set default args\n                args.selectionOverlay = {\n                    x: 0,\n                    y: 0,\n                    width: aspectRatios[aspectRatio].width,\n                    height: aspectRatios[aspectRatio].height,\n                };\n                args.outpaint = outpaint;\n                tool.updateArgs(args);\n            }\n        }\n    }, [tool]);\n\n    function onChange(aspectRatioId: number, size: number) {\n        const args = tool.getArgs();\n        const aspectRatio = aspectRatios[aspectRatioId];\n        if (args.selectionOverlay) {\n            const xDiff =\n                args.selectionOverlay.width - aspectRatio.width * size;\n            const yDiff =\n                args.selectionOverlay.height - aspectRatio.height * size;\n            args.selectionOverlay.width = Math.round(aspectRatio.width * size);\n            args.selectionOverlay.height = Math.round(\n                aspectRatio.height * size\n            );\n            args.selectionOverlay.x += xDiff / 2;\n            args.selectionOverlay.y += yDiff / 2;\n            if (!outpaint) {\n                // clamp to canvas\n                args.selectionOverlay.x = Math.round(\n                    Math.max(\n                        0,\n                        Math.min(\n                            args.selectionOverlay.x,\n                            renderer.getWidth() - args.selectionOverlay.width\n                        )\n                    )\n                );\n                args.selectionOverlay.y = Math.round(\n                    Math.max(\n                        0,\n                        Math.min(\n                            args.selectionOverlay.y,\n                            renderer.getHeight() - args.selectionOverlay.height\n                        )\n                    )\n                );\n            }\n        }\n        tool.updateArgs({\n            selectionOverlay: args.selectionOverlay,\n        });\n    }\n\n    return (\n        <>\n            {upscaleLevel > 0 && (\n                <AspectRatioSelector\n                    aspectRatio={aspectRatio}\n                    onChange={(aspectRatioId) => {\n                        onChange(aspectRatioId, size);\n                        setAspectRatio(aspectRatioId);\n                    }}\n                />\n            )}\n            <div className=\"form-group\">\n                <label htmlFor=\"size\" style={{ width: \"100%\" }}>\n                    Size\n                    <small\n                        className=\"form-text text-muted\"\n                        style={{ float: \"right\" }}\n                    >\n                        {Math.round(size * 100)}%\n                    </small>\n                </label>\n                {/* range from 0.1 to 1 */}\n                <input\n                    type=\"range\"\n                    className=\"form-control-range\"\n                    id=\"size\"\n                    min=\"1\"\n                    max=\"2\"\n                    step=\"0.1\"\n                    value={size}\n                    onChange={(event) => {\n                        onChange(aspectRatio, parseFloat(event.target.value));\n                        setSize(parseFloat(event.target.value));\n                    }}\n                />\n            </div>\n        </>\n    );\n};\n","import { aspectRatios } from \"./aspecRatios\";\n\nexport function getUpscaleLevel(width: number, height: number): number {\n    for (let i = 0; i < aspectRatios.length; i++) {\n        const aspectRatio = aspectRatios[i];\n        if (width * height <= aspectRatio.width * aspectRatio.height) {\n            return 0;\n        }\n        // if (width === aspectRatio.width && height === aspectRatio.height) {\n        //     return upscaleLevel;\n        // }\n    }\n    width /= 2;\n    height /= 2;\n    for (let i = 0; i < aspectRatios.length; i++) {\n        const aspectRatio = aspectRatios[i];\n        if (width * height <= aspectRatio.width * aspectRatio.height) {\n            return 1;\n        }\n        // if (width === aspectRatio.width && height === aspectRatio.height) {\n        //     return upscaleLevel;\n        // }\n    }\n    return 2;\n}\n","// V2 page\nimport { FC, useState, useEffect } from \"react\";\nimport * as uuid from \"uuid\";\nimport axios from \"axios\";\nimport qs from \"qs\";\nimport Dropdown from \"react-bootstrap/Dropdown\";\nimport { useParams, useHistory, Link, useLocation } from \"react-router-dom\";\nimport moment from \"moment\";\nimport ScrollToTop from \"react-scroll-to-top\";\nimport { AIBrushApi } from \"../client\";\nimport { CreateImageInput, StatusEnum, TemporaryImage } from \"../client/api\";\nimport { ImageThumbnail } from \"../components/ImageThumbnail\";\nimport { ImagePrompt, defaultArgs } from \"../components/ImagePrompt\";\nimport {\n    convertPNGToJPG,\n    createEncodedThumbnail,\n    encodedImageToBlob,\n    uploadBlob,\n} from \"../lib/imageutil\";\n\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport { ImagePopup } from \"../components/ImagePopup\";\nimport { BusyModal } from \"../components/BusyModal\";\nimport { PendingImagesThumbnail } from \"../components/PendingImagesThumbnail\";\nimport { PendingImages } from \"../components/PendingImages\";\nimport { ApiSocket } from \"../lib/apisocket\";\nimport { LocalImagesStore, LocalImage } from \"../lib/localImagesStore\";\nimport { ErrorNotification, SuccessNotification } from \"../components/Alerts\";\nimport { sleep } from \"../lib/sleep\";\nimport { ProgressBar } from \"../components/ProgressBar\";\nimport OutOfCreditsModal from \"../components/OutOfCreditsModal\";\nimport PaymentStatusModal from \"../components/PaymentStatusModal\";\n\nexport const anonymousClient = axios.create();\ndelete anonymousClient.defaults.headers.common[\"Authorization\"];\n\ninterface Props {\n    api: AIBrushApi;\n    apiSocket: ApiSocket;\n    assetsUrl: string;\n    localImages: LocalImagesStore;\n    paymentStatus?: \"success\" | \"canceled\";\n}\n\nexport const Homepage: FC<Props> = ({\n    api,\n    apiSocket,\n    assetsUrl,\n    localImages,\n    paymentStatus,\n}) => {\n    const [creating, setCreating] = useState(false);\n    const [selectedImage, setSelectedImage] = useState<LocalImage | null>(null);\n    const [parentImage, setParentImage] = useState<LocalImage | null>(null);\n    const [loadingParent, setLoadingParent] = useState(false);\n    const [savingImage, setSavingImage] = useState(false);\n    const [uploadProgress, setUploadingProgress] = useState(0);\n\n    const [showPendingImages, setShowPendingImages] = useState(false);\n\n    const [images, setImages] = useState<Array<LocalImage>>([]);\n    const [err, setErr] = useState<string | null>(null);\n    const [errTime, setErrTime] = useState<number>(0);\n    const [success, setSuccess] = useState<string | null>(null);\n    const [successTime, setSuccessTime] = useState<number>(0);\n\n    const [hasMore, setHasMore] = useState<boolean>(true);\n    const [search, setSearch] = useState<string>(\"\");\n    const [searchDebounce, setSearchDebounce] = useState<string>(\"\");\n\n    const [bulkDeleteSelecting, setBulkDeleteSelecting] = useState(false);\n    const [bulkDeleting, setBulkDeleting] = useState(false);\n    const [bulkDeleteIds, setBulkDeleteIds] = useState<{\n        [key: string]: boolean;\n    }>({});\n\n    const [censorNSFW, setCensorNSFW] = useState(true);\n    const [outOfCredits, setOutOfCredits] = useState(false);\n\n    const { id } = useParams<{ id?: string }>();\n    const history = useHistory();\n    const location = useLocation();\n\n    const onError = (err: string) => {\n        setErr(err);\n        setErrTime(moment().valueOf());\n    };\n\n    useEffect(() => {\n        let handle = setTimeout(() => {\n            setSearch(searchDebounce);\n        }, 500);\n        return () => {\n            clearTimeout(handle);\n        };\n    }, [searchDebounce]);\n\n    useEffect(() => {\n        if (id) {\n            // check if the image is already loaded\n            const image = images.find((image) => image.id === id);\n            if (image) {\n                setSelectedImage(image);\n            }\n            // refresh\n            localImages.getImage(id).then((image) => {\n                setSelectedImage(image);\n                if (!image) {\n                    history.replace(\"/\");\n                }\n            });\n        } else {\n            setSelectedImage(null);\n        }\n    }, [id]);\n\n    const onSubmit = async (input: CreateImageInput) => {\n        setCreating(true);\n        setParentImage(null);\n        setErr(null);\n        window.scrollTo(0, 0);\n        setUploadingProgress(0);\n        try {\n            if (input.encoded_image) {\n                const encodedJpg = await convertPNGToJPG(input.encoded_image);\n                const tmpInitImage = await api.createTemporaryImage(\"jpg\");\n                // convert base64 to binary\n                const binaryImageData = Buffer.from(\n                    encodedJpg,\n                    \"base64\"\n                );\n                await anonymousClient.put(\n                    tmpInitImage.data.upload_url,\n                    binaryImageData,\n                    {\n                        headers: {\n                            \"Content-Type\": \"image/jpeg\",\n                        },\n                        onUploadProgress: (progressEvent: any) => {\n                            const percentCompleted =\n                                progressEvent.loaded / progressEvent.total;\n                            setUploadingProgress(percentCompleted);\n                        },\n                    }\n                );\n                input.encoded_image = undefined;\n                input.tmp_jpg_id = tmpInitImage.data.id;\n            }\n\n            const newImages = await api.createImage(input);\n            if (newImages.data.images) {\n                for (let image of newImages.data.images || []) {\n                    localImages.saveImage(image);\n                }\n                setImages((images) => {\n                    return [...newImages.data.images!, ...images].sort(\n                        sortImages\n                    );\n                });\n            } else {\n                onError(\"Could not create images\");\n            }\n        } catch (e: any) {\n            console.error(e);\n            if (e.response?.data?.message?.includes(\"credits\")) {\n                setOutOfCredits(true);\n                return;\n            }\n            onError(\"Error creating images\");\n        } finally {\n            setCreating(false);\n        }\n    };\n\n    const onEditNewImage = async (input: CreateImageInput) => {\n        setCreating(true);\n        setParentImage(null);\n        setErr(null);\n        window.scrollTo(0, 0);\n        try {\n            const encodedImage = input.encoded_image!;\n            const newImage: LocalImage = {\n                created_at: moment().valueOf(),\n                updated_at: moment().valueOf(),\n                created_by: \"\",\n                params: {\n                    steps: 20,\n                    width: input.params.width,\n                    height: input.params.height,\n                    prompt: input.params.prompt,\n                    negative_prompt: input.params.negative_prompt,\n                    denoising_strength: input.params.denoising_strength,\n                },\n                label: \"\",\n                id: uuid.v4(),\n                model: input.model!,\n                negative_score: 0,\n                nsfw: !!input.nsfw,\n                parent: input.parent!,\n                score: 0,\n                status: StatusEnum.Completed,\n                temporary: false,\n                imageData: `data:image/png;base64,${encodedImage}`,\n            };\n            await localImages.saveImage(newImage);\n\n            history.push(`/image-editor/${newImage.id}`);\n        } catch (e: any) {\n            console.error(e);\n            onError(\"Error creating image\");\n        } finally {\n            setCreating(false);\n        }\n    };\n\n    const onNSFW = async (updatedImage: LocalImage, nsfw: boolean) => {\n        updatedImage = {\n            ...updatedImage,\n            nsfw,\n        };\n        await localImages.saveImage(updatedImage);\n        setImages((images) => {\n            return images.map((image) => {\n                if (updatedImage.id === image.id) {\n                    return {\n                        ...image,\n                        nsfw,\n                    };\n                }\n                return image;\n            });\n        });\n        setSelectedImage(updatedImage);\n    };\n\n    const loadImages = async (search: string) => {\n        console.log(\"Initial load images\");\n        // clear error\n        setErr(null);\n        setHasMore(true);\n        try {\n            const cursor = moment().add(1, \"minutes\").valueOf();\n            const resp = await localImages.listImages(\n                cursor,\n                \"prev\",\n                100,\n                search\n            );\n            setImages(resp.sort(sortImages));\n            return;\n        } catch (err) {\n            onError(\"Could not load images\");\n            console.error(err);\n        }\n    };\n\n    useEffect(() => {\n        loadImages(search);\n    }, [search]);\n\n    useEffect(() => {\n        if (!api) {\n            return;\n        }\n        let lock = false;\n\n        const pollImages = async (images: Array<LocalImage>) => {\n            if (lock) {\n                return;\n            }\n            lock = true;\n\n            const pendingOrProcessingImages = images.filter((image) => {\n                return (\n                    image.status === \"pending\" || image.status === \"processing\"\n                );\n            });\n            if (pendingOrProcessingImages.length === 0) {\n                return;\n            }\n\n            const pendingById = pendingOrProcessingImages.reduce(\n                (acc, image) => {\n                    acc[image.id] = image;\n                    return acc;\n                },\n                {} as Record<string, LocalImage>\n            );\n\n            try {\n                const resp = await api.batchGetImages(\"id,status,nsfw,error\", {\n                    ids: pendingOrProcessingImages.map((image) => image.id),\n                });\n\n                if (resp.data.images) {\n                    const updatedImages: Array<LocalImage> =\n                        resp.data.images || [];\n                    let statusChange = false;\n                    for (let i = 0; i < updatedImages.length; i++) {\n                        let img = updatedImages[i];\n                        if (pendingById[img.id].status !== img.status) {\n                            statusChange = true;\n                        }\n                        img = {\n                            ...pendingById[img.id],\n                            ...img,\n                        };\n                        updatedImages[i] = img;\n\n                        if (img.status == StatusEnum.Error) {\n                            onError(\n                                img.error ||\n                                    \"Some images failed to generate, please make sure your prompt doesn't violate our terms of service\"\n                            );\n                            await api.deleteImage(img.id);\n                            await localImages.deleteImage(img.id);\n                            continue;\n                        }\n\n                        if (img.status === StatusEnum.Completed) {\n                            const downloadUrls = await api.getImageDownloadUrls(\n                                img.id\n                            );\n                            const resp = await anonymousClient.get(\n                                downloadUrls.data.image_url!,\n                                {\n                                    responseType: \"arraybuffer\",\n                                }\n                            );\n                            const binaryImageData = Buffer.from(\n                                resp.data,\n                                \"binary\"\n                            );\n                            const base64ImageData =\n                                binaryImageData.toString(\"base64\");\n                            const src = `data:image/png;base64,${base64ImageData}`;\n                            img.imageData = src;\n                        }\n                        await localImages.saveImage(img);\n                    }\n                    if (statusChange) {\n                        setImages((images) => {\n                            return [\n                                ...images.map((image) => {\n                                    const updatedImage = updatedImages.find(\n                                        (i) => i.id === image.id\n                                    );\n                                    if (updatedImage) {\n                                        return updatedImage;\n                                    }\n                                    return image;\n                                }),\n                            ].sort(sortImages);\n                        });\n                    }\n                }\n            } catch (err) {\n                onError(\"Could not load images\");\n                console.error(err);\n            } finally {\n                lock = false;\n            }\n        };\n\n        const timerHandle = setInterval(() => {\n            pollImages(images);\n        }, 2 * 1000);\n        return () => {\n            clearInterval(timerHandle);\n        };\n    }, [api, images, search]);\n\n    // load parent image from saved images if an id is on the query string\n    useEffect(() => {\n        const loadParent = async () => {\n            const search = qs.parse(location.search, {\n                ignoreQueryPrefix: true,\n            });\n            if (search.parent) {\n                setLoadingParent(true);\n                try {\n                    const parentImage = await api.getImage(\n                        search.parent as string\n                    );\n                    if (parentImage.data) {\n                        const downloadUrls = await api.getImageDownloadUrls(\n                            parentImage.data.id\n                        );\n                        const resp = await anonymousClient.get(\n                            downloadUrls.data.image_url!,\n                            {\n                                responseType: \"arraybuffer\",\n                            }\n                        );\n                        const binaryImageData = Buffer.from(\n                            resp.data,\n                            \"binary\"\n                        );\n                        const base64ImageData =\n                            binaryImageData.toString(\"base64\");\n                        const src = `data:image/png;base64,${base64ImageData}`;\n                        setParentImage({\n                            ...parentImage.data,\n                            imageData: src,\n                        });\n                        history.push(\"/\");\n                    }\n                } finally {\n                    setLoadingParent(false);\n                }\n            }\n        };\n        loadParent();\n    }, [location.search]);\n\n    const isPendingOrProcessing = (image: LocalImage) => {\n        return (\n            image.status === StatusEnum.Pending ||\n            image.status === StatusEnum.Processing\n        );\n    };\n\n    const sortImages = (a: LocalImage, b: LocalImage) => {\n        // pending and processing images always come first\n        if (isPendingOrProcessing(a) && !isPendingOrProcessing(b)) {\n            return -1;\n        } else if (!isPendingOrProcessing(a) && isPendingOrProcessing(b)) {\n            return 1;\n        }\n        // if the parent is the same, sort by score descending\n        // otherwise, sort by updated_at\n        if (\n            a.parent === b.parent &&\n            a.params.prompt == b.params.prompt &&\n            a.status !== StatusEnum.Pending &&\n            b.status !== StatusEnum.Pending\n        ) {\n            // if the score is the same, sort by updated_at\n            let aScore = a.score;\n            let bScore = b.score;\n            // working around a bug where negative score was assigned\n            // for an empty negative prompt.\n            if (a.params.prompt!.trim() !== \"\") {\n                aScore = aScore - a.negative_score;\n            }\n            if (b.params.prompt!.trim() !== \"\") {\n                bScore = bScore - b.negative_score;\n            }\n            if (aScore == bScore) {\n                return b.updated_at - a.updated_at;\n            }\n            return bScore - aScore;\n        }\n\n        return b.updated_at - a.updated_at;\n    };\n\n    const onLoadMore = async () => {\n        // get the minimum updated_at from images\n        let minUpdatedAt = moment().valueOf();\n        images.forEach((image) => {\n            minUpdatedAt = Math.min(minUpdatedAt, image.updated_at);\n        });\n        // load images in descending order from updated_at\n        let resp = await localImages.listImages(\n            minUpdatedAt - 1,\n            \"prev\",\n            100,\n            search\n        );\n        if (resp.length > 0) {\n            // combine images with new images and sort by updated_at descending\n            setImages((images) => {\n                // filtering is required due to a race condition\n                const imagesById = images.reduce((acc, image) => {\n                    acc[image.id] = image;\n                    return acc;\n                }, {} as { [key: string]: LocalImage });\n                resp = resp.filter((image) => !imagesById[image.id]);\n                return [...images, ...resp]\n                    .filter((image) => !image.deleted_at)\n                    .sort(sortImages);\n            });\n        } else {\n            setHasMore(false);\n        }\n    };\n\n    const onDelete = async (image: LocalImage) => {\n        try {\n            // await api.deleteImage(image.id);\n            await localImages.deleteImage(image.id);\n            setImages((images) => {\n                return images.filter((i) => i.id !== image.id);\n            });\n            history.push(\"/\");\n        } catch (e) {\n            console.error(e);\n            onError(\"Error deleting image\");\n        }\n    };\n\n    const onFork = async (image: LocalImage) => {\n        setParentImage(image);\n        // setSelectedImage(null);\n        history.push(\"/\");\n        window.scrollTo(0, 0);\n    };\n\n    const onSave = async (image: LocalImage) => {\n        setSavingImage(true);\n        try {\n            history.push(\"/\");\n            const createInput: CreateImageInput = {\n                count: 1,\n                // encoded_image: image.imageData!.split(\",\")[1],\n                params: image.params,\n                status: StatusEnum.Saved,\n                temporary: false,\n                label: \"\",\n                model: image.model,\n            };\n\n            const encodedImage = image.imageData!.split(\",\")[1];\n\n            // convert base64 to binary\n            const binaryImageData = Buffer.from(encodedImage, \"base64\");\n            const encodedThumbnail = await createEncodedThumbnail(encodedImage);\n            const binaryThumbnailData = Buffer.from(encodedThumbnail, \"base64\");\n\n            const createResp = await api.createImage(createInput);\n            const imageId = createResp.data.images![0].id;\n            const uploadUrls = await api.getImageUploadUrls(imageId);\n            await anonymousClient.put(\n                uploadUrls.data.thumbnail_url!,\n                binaryThumbnailData,\n                {\n                    headers: {\n                        \"Content-Type\": \"image/png\",\n                    },\n                    onUploadProgress: (progressEvent: any) => {\n                        const percentCompleted =\n                            progressEvent.loaded / progressEvent.total;\n                        setUploadingProgress(percentCompleted / 2);\n                    },\n                }\n            );\n            await anonymousClient.put(\n                uploadUrls.data.image_url!,\n                binaryImageData,\n                {\n                    headers: {\n                        \"Content-Type\": \"image/png\",\n                    },\n                    onUploadProgress: (progressEvent: any) => {\n                        const percentCompleted =\n                            progressEvent.loaded / progressEvent.total;\n                        setUploadingProgress(percentCompleted / 2 + 0.5);\n                    },\n                }\n            );\n\n            await localImages.hardDeleteImage(image.id);\n            setImages((images) => {\n                return images.filter((i) => i.id !== image.id);\n            });\n            setSuccess(\"Image saved\");\n            setSuccessTime(moment().valueOf());\n        } catch (e) {\n            console.error(e);\n            onError(\"Error saving image\");\n        } finally {\n            setSavingImage(false);\n        }\n    };\n\n    const onEdit = async (image: LocalImage) => {\n        history.push(`/image-editor/${image.id}`);\n    };\n\n    const onThumbnailClicked = (image: LocalImage) => {\n        // setSelectedImage(image);\n        if (bulkDeleteSelecting) {\n            setBulkDeleteIds({\n                ...bulkDeleteIds,\n                [image.id]: !bulkDeleteIds[image.id],\n            });\n        } else {\n            history.push(`/images/${image.id}`);\n        }\n    };\n\n    const handleCancelFork = () => {\n        setParentImage(null);\n        window.scrollTo(0, 0);\n    };\n\n    const onConfirmBulkDelete = async () => {\n        try {\n            setBulkDeleting(true);\n            const promises = Object.keys(bulkDeleteIds).map((id) => {\n                return localImages.deleteImage(id);\n            });\n            await Promise.all(promises);\n            setImages((images) => {\n                return images.filter((image) => !bulkDeleteIds[image.id]);\n            });\n            setBulkDeleteIds({});\n            setBulkDeleteSelecting(false);\n        } catch (e) {\n            console.error(e);\n            onError(\"Error deleting images\");\n        } finally {\n            setBulkDeleting(false);\n        }\n    };\n\n    const completedOrSavedImages = images.filter((image) => {\n        return (\n            !image.deleted_at &&\n            (image.status === StatusEnum.Completed ||\n                image.status === StatusEnum.Saved)\n        );\n    });\n\n    const pendingOrProcessingImages = images.filter(\n        (image) =>\n            !image.deleted_at &&\n            (image.status === StatusEnum.Pending ||\n                image.status === StatusEnum.Processing)\n    );\n\n    const pendingImages = pendingOrProcessingImages.filter(\n        (image) => image.status === StatusEnum.Pending\n    );\n\n    const processingImages = pendingOrProcessingImages.filter(\n        (image) => image.status === StatusEnum.Processing\n    );\n\n    return (\n        <>\n            <h1 style={{ fontSize: \"40px\", textAlign: \"left\" }}>\n                Welcome to AiBrush - Home\n            </h1>\n\n            <ErrorNotification message={err} timestamp={errTime} />\n            <SuccessNotification message={success} timestamp={successTime} />\n\n            <ImagePrompt\n                api={api}\n                assetsUrl={assetsUrl}\n                creating={creating}\n                onSubmit={onSubmit}\n                onEdit={onEditNewImage}\n                parent={parentImage}\n                onCancel={() => handleCancelFork()}\n            />\n            <hr />\n\n            <div\n                className=\"homepage-images\"\n                style={{ marginTop: \"48px\", paddingBottom: \"48px\" }}\n            >\n                <div style={{ textAlign: \"left\" }}>\n                    <div\n                        className=\"input-group\"\n                        style={{ marginBottom: \"16px\" }}\n                    >\n                        <input\n                            style={{}}\n                            value={searchDebounce}\n                            type=\"search\"\n                            className=\"form-control image-search\"\n                            placeholder=\"Search...\"\n                            onChange={(e) => setSearchDebounce(e.target.value)}\n                        />\n\n                        <div\n                            style={{\n                                float: \"right\",\n                            }}\n                        >\n                            {!bulkDeleteSelecting && (\n                                <>\n                                    <button\n                                        style={{ display: \"inline\" }}\n                                        className=\"btn btn-primary image-popup-button\"\n                                        onClick={() =>\n                                            setCensorNSFW(!censorNSFW)\n                                        }\n                                    >\n                                        {!censorNSFW && (\n                                            <i className=\"fas fa-eye\"></i>\n                                        )}\n                                        {censorNSFW && (\n                                            <i className=\"fas fa-eye-slash\"></i>\n                                        )}\n                                    </button>\n                                    <Dropdown\n                                        style={{\n                                            display: \"inline\",\n                                            marginLeft: \"8px\",\n                                        }}\n                                    >\n                                        <Dropdown.Toggle variant=\"danger\">\n                                            <i className=\"fas fa-trash\"></i>\n                                        </Dropdown.Toggle>\n\n                                        <Dropdown.Menu>\n                                            <Dropdown.Item\n                                                onClick={() =>\n                                                    setBulkDeleteSelecting(true)\n                                                }\n                                            >\n                                                Bulk Delete\n                                            </Dropdown.Item>\n                                            <Dropdown.Item\n                                                onClick={() =>\n                                                    history.push(\n                                                        \"/local-deleted-images\"\n                                                    )\n                                                }\n                                            >\n                                                View Deleted Images\n                                            </Dropdown.Item>\n                                        </Dropdown.Menu>\n                                    </Dropdown>\n                                </>\n                            )}\n                            {bulkDeleteSelecting && (\n                                <>\n                                    <button\n                                        className=\"btn btn-primary image-popup-button\"\n                                        onClick={() => {\n                                            setBulkDeleteSelecting(false);\n                                            setBulkDeleteIds({});\n                                        }}\n                                    >\n                                        Cancel\n                                    </button>\n                                    <button\n                                        style={{ marginLeft: \"8px\" }}\n                                        className=\"btn image-popup-delete-button\"\n                                        onClick={() => {\n                                            onConfirmBulkDelete();\n                                        }}\n                                    >\n                                        Delete\n                                    </button>\n                                </>\n                            )}\n                        </div>\n                    </div>\n                </div>\n                <InfiniteScroll\n                    dataLength={images.length}\n                    next={onLoadMore}\n                    hasMore={hasMore}\n                    loader={\n                        <>\n                            <hr />\n                            <h4>Loading...</h4>\n                        </>\n                    }\n                >\n                    {pendingOrProcessingImages.length > 0 && (\n                        <PendingImagesThumbnail\n                            pendingCount={pendingImages.length}\n                            processingCount={processingImages.length}\n                            onClick={() => {\n                                setShowPendingImages(true);\n                            }}\n                        />\n                    )}\n                    {completedOrSavedImages.map((image) => (\n                        <ImageThumbnail\n                            key={image.id}\n                            image={image}\n                            assetsUrl={assetsUrl}\n                            onClick={onThumbnailClicked}\n                            bulkDelete={\n                                bulkDeleteSelecting && bulkDeleteIds[image.id]\n                            }\n                            censorNSFW={censorNSFW}\n                        />\n                    ))}\n                </InfiniteScroll>\n            </div>\n\n            {selectedImage && (\n                <ImagePopup\n                    assetsUrl={assetsUrl}\n                    image={selectedImage}\n                    onClose={() => history.push(\"/\")}\n                    onDelete={(image) => {\n                        onDelete(image);\n                        setImages(images.filter((i) => i.id !== image.id));\n                        history.push(\"/\");\n                    }}\n                    onFork={(image) => {\n                        onFork(image);\n                        history.push(\"/\");\n                    }}\n                    onEdit={(image) => {\n                        onEdit(image);\n                    }}\n                    onSave={(image) => {\n                        onSave(image);\n                    }}\n                    onNSFW={onNSFW}\n                    censorNSFW={censorNSFW}\n                />\n            )}\n            <ScrollToTop />\n            <BusyModal show={creating} title=\"Creating images\">\n                <p>Please wait while we create your image.</p>\n                <ProgressBar progress={uploadProgress} />\n            </BusyModal>\n            <BusyModal show={bulkDeleting} title=\"Deleting images\">\n                <p>Please wait while we delete your images.</p>\n            </BusyModal>\n            <BusyModal show={loadingParent} title=\"Loading parent image\">\n                <p>Please wait while we load the parent image.</p>\n            </BusyModal>\n            <BusyModal show={savingImage} title=\"Saving image\">\n                {/* bootstrap progress bar for uploadProgress (0-1 value) */}\n                <ProgressBar progress={uploadProgress} />\n            </BusyModal>\n            <PendingImages\n                images={pendingOrProcessingImages}\n                onCancel={() => setShowPendingImages(false)}\n                show={showPendingImages}\n                onDeleteImage={(image) => {\n                    onDelete(image);\n                    setImages(images.filter((i) => i.id !== image.id));\n                }}\n            />\n            <OutOfCreditsModal\n                show={outOfCredits}\n                onHide={() => setOutOfCredits(false)}\n            />\n            <PaymentStatusModal paymentStatus={paymentStatus} />\n        </>\n    );\n};\n"],"sourceRoot":""}