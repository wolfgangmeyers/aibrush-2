{"version":3,"sources":["pages/image-editor/selection-tool.tsx","lib/upscale.ts","pages/Homepage.tsx","components/AspectRatioSelector.tsx","lib/kvstore.ts","pages/image-editor/PaletteButton.tsx","components/PendingImagesThumbnail.tsx","components/PendingImages.tsx","components/CopyToClipboardIcon.tsx","components/Swipe.tsx","components/ImagePopup.tsx","pages/image-editor/enhance-tool.tsx","pages/image-editor/smudge-tool.tsx","pages/image-editor/inpaint-tool.tsx","client/api.ts","client/base.ts","client/common.ts","lib/imageutil.ts","pages/image-editor/ImageEditor.tsx","pages/image-editor/renderer.ts","lib/aspecRatios.ts","pages/image-editor/mask-editor-controls.tsx","pages/image-editor/import-export.tsx","pages/image-editor/augment-tool.tsx","components/OutOfCreditsModal.tsx","components/PaymentStatusModal.tsx","lib/recentList.ts","components/BusyModal.tsx","lib/localImagesStore.ts","pages/Login.tsx","components/TokenRefresher.tsx","components/Healthchecker.tsx","pages/admin/GenerateCode.tsx","pages/admin/GlobalSettings.tsx","pages/admin/Admin.tsx","pages/DeletedImages.tsx","pages/DiscordLogin.tsx","pages/LocalDeletedImages.tsx","pages/SavedImagesPage.tsx","lib/imagesCache.ts","pages/TestPage.tsx","components/CreditsBalance.tsx","App.tsx","config.ts","reportWebVitals.ts","index.tsx","pages/image-editor/zoomHelper.tsx","pages/image-editor/tool.ts","lib/apisocket.ts","lib/recentLoras.ts","components/LoraSelector.tsx","components/CostIndicator.tsx","components/ImageThumbnail.tsx","lib/supportedModels.ts","components/SeedInput.tsx","components/TextInputWithHistory.tsx","components/ImagePrompt.tsx","components/ProgressBar.tsx","lib/sleep.ts","lib/credits.ts","components/SelectedLora.tsx","components/LoraTriggers.tsx","components/ModelList.tsx","lib/localcache.ts","components/ModelSelector.tsx","components/ResetToDefaultIcon.tsx","components/Alerts.tsx","pages/image-editor/ColorPicker.tsx","pages/image-editor/pencil-tool.tsx"],"names":["SelectionTool","renderer","selectionOverlay","selectionOverlayPreview","outpaint","panning","args","this","getArgs","x","y","width","height","clamp","sync","rect","imageWidth","getWidth","imageHeight","getHeight","Math","max","min","setSelectionOverlay","setSelectionOverlayPreview","event","type","onMouseMove","button","undefined","updateArgs","zoomHelper","onPan","translateMouseToCanvasCoordinates","nativeEvent","offsetX","offsetY","round","onWheel","BaseTool","Controls","tool","lockAspectRatio","upscaleLevel","getUpscaleLevel","useState","DEFAULT_ASPECT_RATIO","aspectRatio","setAspectRatio","size","setSize","onChange","aspectRatioId","aspectRatios","xDiff","yDiff","useEffect","getClosestAspectRatio","id","className","htmlFor","style","float","step","value","parseFloat","target","i","length","anonymousClient","axios","create","defaults","headers","common","Homepage","api","assetsUrl","apiSocket","localImages","paymentStatus","creating","setCreating","selectedImage","setSelectedImage","parentImage","setParentImage","loadingParent","setLoadingParent","savingImage","setSavingImage","uploadProgress","setUploadingProgress","showPendingImages","setShowPendingImages","images","setImages","err","setErr","errTime","setErrTime","success","setSuccess","successTime","setSuccessTime","hasMore","setHasMore","search","setSearch","searchDebounce","setSearchDebounce","bulkDeleteSelecting","setBulkDeleteSelecting","bulkDeleting","setBulkDeleting","bulkDeleteIds","setBulkDeleteIds","censorNSFW","setCensorNSFW","outOfCredits","setOutOfCredits","useParams","history","useHistory","location","useLocation","onError","moment","valueOf","handle","setTimeout","clearTimeout","image","find","getImage","then","replace","onSubmit","input","a","window","scrollTo","encoded_image","convertPNGToJPG","encodedJpg","createTemporaryImage","tmpInitImage","binaryImageData","Buffer","from","put","data","upload_url","onUploadProgress","progressEvent","percentCompleted","loaded","total","tmp_jpg_id","createImage","newImages","saveImage","sort","sortImages","console","error","response","message","includes","onEditNewImage","encodedImage","createBlankImage","params","newImage","created_at","updated_at","created_by","steps","prompt","negative_prompt","denoising_strength","label","uuid","model","negative_score","nsfw","parent","score","status","StatusEnum","Completed","temporary","imageData","push","onNSFW","updatedImage","map","loadImages","log","cursor","add","listImages","resp","lock","pollImages","pendingOrProcessingImages","filter","pendingById","reduce","acc","batchGetImages","ids","updatedImages","statusChange","img","Error","deleteImage","getImageDownloadUrls","downloadUrls","get","image_url","responseType","base64ImageData","toString","src","timerHandle","setInterval","clearInterval","qs","parse","ignoreQueryPrefix","loadParent","isPendingOrProcessing","Pending","Processing","b","aScore","bScore","trim","onLoadMore","minUpdatedAt","forEach","imagesById","deleted_at","onDelete","nextImage","index","findIndex","onFork","onSave","createInput","count","Saved","split","createEncodedThumbnail","encodedThumbnail","binaryThumbnailData","createResp","imageId","getImageUploadUrls","uploadUrls","thumbnail_url","hardDeleteImage","onEdit","onThumbnailClicked","onConfirmBulkDelete","promises","Object","keys","Promise","all","completedOrSavedImages","pendingImages","processingImages","fontSize","textAlign","timestamp","onCancel","marginTop","paddingBottom","marginBottom","placeholder","e","display","onClick","marginLeft","Toggle","variant","Menu","Item","dataLength","next","loader","pendingCount","processingCount","bulkDelete","onClose","onSwipe","direction","newIndex","show","title","progress","onDeleteImage","onHide","AspectRatioSelector","disabled","aspectRatioDetails","minHeight","alignItems","border","margin","displayName","parseInt","KVStore","dbConfig","db","resolve","reject","request","indexedDB","open","dbName","onupgradeneeded","result","createObjectStore","storeName","onsuccess","onerror","createDB","key","getDB","transaction","objectStore","delete","getAll","PaletteButton","selectedColor","color","onColorSelected","displayColorPicker","setDisplayColorPicker","tmpColor","setTmpColor","backgroundColor","onDoubleClick","position","zIndex","hex","onChangeComplete","marginRight","PendingImagesThumbnail","hover","setHover","icon","onMouseEnter","onMouseLeave","backgroundImage","backgroundSize","background","lineHeight","PendingImages","imageIcon","pendingDiv","phrases","substring","Header","closeButton","Title","Body","Footer","CopyToClipboardIcon","text","copied","setCopied","onCopy","Swipe","children","touchStart","setTouchStart","touchEnd","setTouchEnd","onTouchStart","targetTouches","clientX","onTouchMove","onTouchEnd","distance","isLeftSwipe","ImagePopup","useRef","showNSFW","setShowNSFW","current","indexOf","swipeArrowMargin","innerWidth","maxImageHeight","innerHeight","Modal","left","top","transform","padding","ref","maxWidth","maxHeight","alt","right","displayStatus","charAt","toUpperCase","slice","statusBadge","href","seed","eraserWidthModifier","EnhanceTool","selectionTool","pencilTool","negativePrompt","variationStrength","loras","_dirty","worker","idCounter","_state","stateHandler","selectionControlsListener","maskHandler","selectedImageDataIndex","selectedImageData","erasing","progressListener","errorListener","dirtyListener","PencilTool","selectSupported","state","selectionArgs","brushColor","setCursor","ImageUtilWorker","dirty","listener","handler","destroy","ImageData","erasePoint","onMouseDown","getSelectionOverlay","baseWidth","eraserRadius","floor","relX","relY","startX","startY","endX","endY","j","sqrt","pow","alphaPct","alpha","setEditImage","featherWidth","radius","updateCursor","onMouseUp","maskData","loadImageDataElement","imageElement","canvas","document","createElement","ctx","getContext","drawImage","getImageData","newId","req","alphaMode","feather","pixels","alphaPixels","processRequest","updatedImageData","remove","isMasked","deleteMask","createMask","apisocket","notifyError","getEncodedImage","encodedMask","getEncodedMask","defaultArgs","updateProgress","tmpMaskImage","binaryMaskData","tmp_mask_id","ceil","completed","lastUpdate","onMessage","msg","JSON","NOTIFICATION_IMAGE_UPDATED","loadImageData","addMessageListener","startTime","lastCheck","completeCount","sleep","diff","pendingIds","updatedImagesResult","byId","updated","isAfter","removeMessageListener","saveListener","commitSelection","negative_phrases","EnhanceControls","setCount","setDirty","setVariationStrength","setPrompt","setNegativePrompt","setModel","selectingModel","setSelectingModel","setState","setIsMasked","setProgress","setError","selectingLora","setSelectingLora","selectedLoras","setSelectedLoras","onChangeState","onChangeMask","onProgress","onDirty","selectedLorasFromConfigs","selected","cost","calculateImagesCost","role","data-dismiss","aria-label","aria-hidden","onAddTrigger","trigger","parts","endsWith","join","lora","onRemove","selectedLora","config","name","onRemoveLora","imagesCost","onConfirm","onRevert","cancel","confirm","erase","submit","mask","when","onSelectModel","initialSelectedModel","inpainting","onAddLora","SmudgeTool","brushSize","brushOpacity","lastX","lastY","smudging","smudgeLine","copyEditImageFromBaseImage","SmudgeControls","setBrushSize","setBrushOpacity","visibility","InpaintTool","selectionWidth","render","alphaMask","snapshot","undo","clearRedoStack","expandToOverlay","tmpImagePromises","tmpImages","binaryImages","uploadPromises","tmpImage","binaryImage","tmp_image_id","closestAspectRatio","selection_overlay","InpaintControls","setoutpaint","checked","AddMetricItemTypeEnum","HealthcheckStatusEnum","ImageParamsControlnetTypeEnum","ImageParamsAugmentationEnum","UpsertWorkerInputStatusEnum","WorkerStatusEnum","BASE_PATH","BaseAPI","configuration","basePath","globalAxios","RequiredError","field","DUMMY_BASE_URL","assertParamExists","functionName","paramName","paramValue","setSearchParams","url","searchParams","URLSearchParams","objects","object","Array","isArray","item","append","set","serializeDataIfNeeded","requestOptions","nonString","isJsonMime","stringify","toPathString","pathname","hash","createRequestFunction","axiosArgs","axiosRequestArgs","options","AIBrushApiFp","localVarAxiosParamCreator","addMetrics","addMetricsInput","localVarUrlObj","URL","baseOptions","localVarRequestOptions","method","localVarQueryParameter","localVarHeaderParameter","query","headersFromBaseOptions","fields","batchGetImagesInput","createDepositCode","createDepositCodeInput","createImageInput","createInviteCode","createStripeSession","createStripeSessionInput","format","localVarPath","encodeURIComponent","String","discordLogin","getAssetsUrl","getCredits","getFeatures","getGlobalSettings","getMaskData","getModels","getThumbnailData","healthcheck","isAdmin","limit","login","loginInput","redeemDepositCode","code","refresh","refreshLoginInput","updateGlobalSettings","updateGlobalSettingsRequest","updateImage","updateImageInput","uploadImageData","body","uploadThumbnailData","verify","verifyLoginInput","AIBrushApiAxiosParamCreator","localVarAxiosArgs","AIBrushApi","Image","onload","dataUrl","toDataURL","urls","catch","splitImage","initImage","putImageData","tile_size","num_tiles_x","num_tiles_y","tiles","x0","y0","x1","y1","tile","numTilesX","numTilesY","tileSize","mergeTiles","splitResult","tileCanvas","imageDataToCanvas","fixImageSize","resizeImage","context","fillStyle","fillRect","numWorkers","workers","callbacks","Worker","process","addEventListener","bind","postMessage","terminate","thumbSize","cropX","cropY","cropDimension","base64","decodeImage","binaryImageToDataBase64","resizeEncodedImage","encodedImageToBlob","binaryString","atob","arr","charCodeAt","Blob","Uint8Array","uploadBlob","signedUrl","blob","xhr","XMLHttpRequest","setRequestHeader","send","ImageEditor","showSelectionControls","setShowSelectionControls","tools","iconClass","constructor","r","renderControls","t","onShowSelectionControls","colors","defaultColors","setImage","setRenderer","setTool","toolConfig","setToolConfig","canUndo","setCanUndo","canRedo","setCanRedo","busyMessage","setBusyMessage","canvasRef","onSelectTool","toolconfig","newTool","onSaveImage","saveNewImage","newArgs","preventDefault","localImage","imageSrc","download_urls","createRenderer","setBaseImage","loadImage","onSnapshot","removeEventListener","updateCanvasSize","resetView","buttonClass","renderTool","redo","verticalAlign","touchAction","userSelect","select","Renderer","undoStack","redoStack","currentSnapshot","backgroundLayer","baseImageLayer","editLayer","maskLayer","hasSelection","zoom","snapshotListener","initializeBackgroundLayer","allowRedo","pop","clearRect","notifySnapshotListener","shift","setTransform","globalAlpha","drawOverlay","resetMask","pattern","createPattern","createCheckeredPattern","color1","color2","updateSelectionOverlay","updateZoomAndOffset","lineWidth","strokeStyle","strokeRect","beginPath","arc","PI","stroke","fill","moveTo","lineTo","selection","imageDataToEncodedImage","erasure","layer","convertErasureToMask","imageLayer","brushx","brushy","absx","leftEdge","rightEdge","topEdge","bottomEdge","absy","contains","x2","y2","lineCap","unitVector","totalRed","totalGreen","totalBlue","averageRed","averageGreen","averageBlue","pixel","g","rgbToHex","minX","minY","newCanvas","AspectRatio","cfg","newWidth","newHeight","tests","aRatio","bRatio","abs","MaskEditor","setBrushColor","flexDirection","flexWrap","invertMask","ImportExportControls","backupImage","setBackupImage","files","byteString","buffer","ArrayBuffer","intArray","saveAs","onExport","AugmentControls","activeAugmentation","setActiveAugmentation","imageWorker","setImageWorker","lastError","setLastError","augmentImageData","augmentation","c","Upscale","FaceRestore","processingImage","checkResp","imageDataResp","upscaleFactor","newImageData","onAugment","OutOfCreditsModal","centered","to","PaymentStatusModal","setShow","handleClose","RecentList","listSize","modelsJson","localStorage","getItem","models","setItem","removed","recentModels","getRecentItems","modelIndex","splice","unshift","saveRecentItems","recentNegativePrompts","recentLoras","BusyModal","backdrop","keyboard","LocalImagesStore","evt","imagesStore","objectStoreNames","keyPath","createIndex","unique","_","legacyImage","stable_diffusion_strength","iterations","store","hydrateImage","cleanupDeletedImages","range","IDBKeyRange","lowerBound","upperBound","openCursor","toLowerCase","continue","imagesRequest","clear","olderThan","getDeletedImages","deletedImages","subtract","Login","props","email","setEmail","emailSubmitted","setEmailSubmitted","setCode","inviteCode","onLogin","match","client","invite_code","onVerify","fontWeight","aria-describedby","host","protocol","redirectUri","discordLink","TokenRefresher","onCredentialsRefreshed","onCredentialsExpired","credentials","interval","refreshToken","loginResult","Healthchecker","healthCheck","setHealthCheck","GenerateCode","amount","setAmount","generatedCode","setGeneratedCode","handleSubmit","Form","InputGroup","Control","Append","Button","Alert","GlobalSettings","minimum_worker_allocations","stable_diffusion","stable_diffusion_inpainting","swinir","workerSettings","setWorkerSettings","saving","setSaving","loadWorkerSettings","settings","settings_json","saveWorkerSettings","Admin","DeletedImages","deleting","setDeleting","onDeleteAllImages","onRestoreImage","goBack","borderBottom","ImageThumbnail","paddingTop","DiscordLogin","accessToken","LocalDeletedImages","clearDeletedImages","savedImagesCache","kvstore","order","batchGetIds","deleteItem","savedImage","batchResult","SavedImagesPage","imagesResult","latestCursor","deletedIds","uniqueIds","Set","payload","NOTIFICATION_IMAGE_DELETED","Dropdown","res","TestPage","originalImage","setOriginalImage","upscaledImage","setUpscaledImage","upscaleImageData","onImageSelected","originalImageData","upscaledTile","upscaledImageData","upscale","feathered","upscaledCanvas","CreditsBalance","apiUrl","httpClient","ApiSocket","updateHttpClient","App","setCredentials","setAssetsUrl","setIsAdmin","features","setFeatures","onLogout","removeItem","init","assets_url","storedCredentials","is_admin","updateToken","connect","path","exact","bottom","privacy_uri","terms_uri","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","getElementById","ZoomHelper","startTouches","startZoom","startOffsetX","startOffsetY","originalZoom","getZoom","getOffsetX","getOffsetY","canvasPoint","deltaY","movementX","movementY","getBoundingClientRect","getCanvas","touches","canvasRect","startTouch1","startTouch2","touch1","touch2","startDistance","clientY","startCenterX","startCenterY","centerX","centerY","startCanvasPoint","xDiff2","yDiff2","mouseX","mouseY","touchHandle","_pinchZooming","_panning","_updateCursor","touch","identifier","pageX","pageY","screenX","screenY","messageListeners","l","close","WebSocket","onopen","onmessage","onclose","migrateToIDs","recentList","getItems","migrateRequired","reverse","addItem","recentLoraIDs","loraID","savedLora","loraId","configs","getLora","LoraModal","inputValue","setInputValue","strength","setStrength","recentItems","setRecentItems","busy","setBusy","handleSearch","useCallback","modelId","listRecentLoras","items","fetchRecentLoras","filteredItems","recentItem","Group","as","Row","Col","sm","ListGroup","overflowY","action","Label","column","dangerouslySetInnerHTML","__html","DOMPurify","sanitize","description","allowCommercialUse","creator","username","tags","tag","modelVersions","version","baseModel","trainedWords","word","idx","addLora","CostIndicator","retry","setRetry","backgroundRepeat","backgroundPosition","readOnly","controlnetTypes","SeedInput","setSeed","useCustomSeed","setUseCustomSeed","FormGroup","FormCheck","random","FormControl","TextInputWithHistory","onBlur","onSelect","eventKey","overflow","defaultNegativePrompt","encoded_mask","ImagePrompt","parentId","setParentId","advancedView","setAdvancedView","setEncodedImage","controlnetType","setControlnetType","cfgScale","setCfgScale","defaultAspectRatio","setAspectRatioDetails","originalWidth","setOriginalWidth","originalHeight","setOriginalHeight","resetState","controlnet_type","cfg_scale","bestMatch","scale","file","HTMLCanvasElement","scaledAspectRatio","borderTopLeftRadius","LoraTriggers","textDecoration","SelectedLora","toFixed","ModelSelector","ProgressBar","aria-valuenow","aria-valuemin","aria-valuemax","ms","SelectedLoraTag","allTriggers","renderTooltip","placement","overlay","ModelList","selectedModel","setMaxHeight","handleResize","active","cache","storage","ttl","expiry","Date","now","itemStr","initialValue","cachedValue","setValue","useCache","setModels","setSelectedModel","searchTerm","setSearchTerm","filteredModels","setSortedModels","recentModelNames","recentModelIndices","sortedModels","aIndex","bIndex","values","showcases","ResetToDefaultIcon","alertType","timeout","ErrorNotification","SuccessNotification","ColorPicker","isDrawing","colorPicking","lastPickedColor","colorPickedListener","drawPoint","getPixel","drawLine","palette","setPalette","addToPalette","onColorPicked","beginColorpicker"],"mappings":"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","file":"static/js/main.174af3d2.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Renderer } from \"./renderer\";\nimport { Cursor, Rect } from \"./models\";\nimport { Tool, BaseTool } from \"./tool\";\nimport { AspectRatioSelector } from \"../../components/AspectRatioSelector\";\nimport { getUpscaleLevel } from \"../../lib/upscale\";\nimport {\n    DEFAULT_ASPECT_RATIO,\n    aspectRatios,\n    getClosestAspectRatio,\n} from \"../../lib/aspecRatios\";\nimport { ZoomHelper } from \"./zoomHelper\";\nimport { runInThisContext } from \"vm\";\n\nexport class SelectionTool extends BaseTool implements Tool {\n    private selectionOverlay: Rect | undefined;\n    private selectionOverlayPreview: Rect | undefined;\n    private outpaint?: boolean;\n\n    // private selectionWidth: number = 512;\n    // private selectionHeight: number = 512;\n\n    private panning = false;\n\n    // TODO: size modifier to make the selection overlay smaller\n\n    constructor(renderer: Renderer) {\n        super(renderer, \"select\");\n    }\n\n    updateArgs(args: any) {\n        args = {\n            ...this.getArgs(),\n            ...args,\n        }\n        super.updateArgs(args);\n        this.selectionOverlay = args.selectionOverlay || {\n            x: 0,\n            y: 0,\n            width: 512,\n            height: 512,\n        };\n        this.outpaint = args.outpaint;\n        if (!this.outpaint) {\n            this.selectionOverlay = this.clamp(this.selectionOverlay!);\n        }\n        this.sync();\n    }\n\n    private clamp(rect: Rect): Rect {\n        const imageWidth = this.renderer.getWidth();\n        const imageHeight = this.renderer.getHeight();\n        let x = rect.x;\n        let y = rect.y;\n        let width = rect.width;\n        let height = rect.height;\n        // clamp to the canvas\n        x = Math.max(0, Math.min(x, imageWidth - this.selectionOverlay!.width));\n        y = Math.max(0, Math.min(y, imageHeight - rect.height));\n        x = Math.min(x, imageWidth - rect.width);\n        y = Math.min(y, imageHeight - rect.height);\n        width = Math.min(width, imageWidth);\n        height = Math.min(height, imageHeight);\n        return {\n            x: x,\n            y: y,\n            width: width,\n            height: height,\n        };\n    }\n\n    private sync(): void {\n        this.renderer.setSelectionOverlay(this.selectionOverlay);\n        this.renderer.setSelectionOverlayPreview(this.selectionOverlayPreview);\n    }\n\n    onMouseDown(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        if (event.type == \"touch\") {\n            this.onMouseMove(event);\n        } else if (event.button === 0) {\n            this.selectionOverlay = this.selectionOverlayPreview;\n            this.selectionOverlayPreview = undefined;\n            this.sync();\n            this.updateArgs({\n                selectionOverlay: this.selectionOverlay,\n            });\n        } else if (event.button === 1) {\n            this.panning = true;\n        }\n    }\n\n    onMouseMove(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        const imageWidth = this.renderer.getWidth();\n        const imageHeight = this.renderer.getHeight();\n        if (this.panning) {\n            this.zoomHelper.onPan(event);\n        } else {\n            let { x, y } = this.zoomHelper.translateMouseToCanvasCoordinates(\n                event.nativeEvent.offsetX,\n                event.nativeEvent.offsetY\n            );\n\n            // round to the nearest 16 pixels\n            x = Math.round(x / 16) * 16;\n            y = Math.round(y / 16) * 16;\n            // offset by -256 to center the rect\n            x -= 256;\n            y -= 256;\n\n            this.selectionOverlayPreview = {\n                x: x,\n                y: y,\n                width: this.selectionOverlay!.width,\n                height: this.selectionOverlay!.height,\n            };\n\n            if (!this.outpaint) {\n                this.selectionOverlayPreview = this.clamp(this.selectionOverlayPreview);\n            }\n\n            \n            this.sync();\n        }\n    }\n\n    onMouseUp(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        if (event.button === 0 && event.type == \"touch\") {\n            this.selectionOverlay = this.selectionOverlayPreview;\n            this.selectionOverlayPreview = undefined;\n            this.sync();\n            this.updateArgs({\n                selectionOverlay: this.selectionOverlay,\n            });\n        }\n        this.panning = false;\n    }\n\n    onMouseLeave(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        this.selectionOverlayPreview = undefined;\n        this.panning = false;\n        this.sync();\n    }\n\n    onWheel(event: WheelEvent) {\n        this.zoomHelper.onWheel(event);\n    }\n\n    destroy() {\n        // this.renderer.setSelectionOverlay(undefined);\n        this.renderer.setSelectionOverlayPreview(undefined);\n        return true;\n    }\n}\n\ninterface ControlsProps {\n    renderer: Renderer;\n    tool: Tool;\n    /** Lock aspect ratio for smaller images */\n    lockAspectRatio?: boolean;\n    outpaint?: boolean;\n}\n\nexport const Controls: React.FC<ControlsProps> = ({\n    renderer,\n    tool,\n    lockAspectRatio,\n    outpaint,\n}) => {\n    const upscaleLevel = getUpscaleLevel(\n        renderer.getWidth(),\n        renderer.getHeight()\n    );\n    const [aspectRatio, setAspectRatio] = useState(DEFAULT_ASPECT_RATIO);\n    const [size, setSize] = useState(1);\n\n    useEffect(() => {\n        const upscaleLevel = getUpscaleLevel(\n            renderer.getWidth(),\n            renderer.getHeight()\n        );\n        // lock aspect ratio to image\n        if (upscaleLevel === 0 && lockAspectRatio) {\n            const aspectRatio = getClosestAspectRatio(\n                renderer.getWidth(),\n                renderer.getHeight()\n            );\n            setAspectRatio(aspectRatio.id);\n            tool.updateArgs({\n                selectionOverlay: {\n                    x: 0,\n                    y: 0,\n                    width: aspectRatio.width,\n                    height: aspectRatio.height,\n                },\n                outpaint,\n            });\n        } else {\n            const args = tool.getArgs();\n            if (args.selectionOverlay) {\n                // restore args\n                const aspectRatio = getClosestAspectRatio(\n                    args.selectionOverlay.width,\n                    args.selectionOverlay.height\n                );\n                setAspectRatio(aspectRatio.id);\n                setSize(args.selectionOverlay.width / aspectRatio.width);\n                tool.updateArgs(args);\n            } else {\n                // set default args\n                args.selectionOverlay = {\n                    x: 0,\n                    y: 0,\n                    width: aspectRatios[aspectRatio].width,\n                    height: aspectRatios[aspectRatio].height,\n                };\n                args.outpaint = outpaint;\n                tool.updateArgs(args);\n            }\n        }\n    }, [tool]);\n\n    function onChange(aspectRatioId: number, size: number) {\n        const args = tool.getArgs();\n        const aspectRatio = aspectRatios[aspectRatioId];\n        if (args.selectionOverlay) {\n            const xDiff =\n                args.selectionOverlay.width - aspectRatio.width * size;\n            const yDiff =\n                args.selectionOverlay.height - aspectRatio.height * size;\n            args.selectionOverlay.width = Math.round(aspectRatio.width * size);\n            args.selectionOverlay.height = Math.round(\n                aspectRatio.height * size\n            );\n            args.selectionOverlay.x += xDiff / 2;\n            args.selectionOverlay.y += yDiff / 2;\n            if (!outpaint) {\n                // clamp to canvas\n                args.selectionOverlay.x = Math.round(\n                    Math.max(\n                        0,\n                        Math.min(\n                            args.selectionOverlay.x,\n                            renderer.getWidth() - args.selectionOverlay.width\n                        )\n                    )\n                );\n                args.selectionOverlay.y = Math.round(\n                    Math.max(\n                        0,\n                        Math.min(\n                            args.selectionOverlay.y,\n                            renderer.getHeight() - args.selectionOverlay.height\n                        )\n                    )\n                );\n            }\n        }\n        tool.updateArgs({\n            selectionOverlay: args.selectionOverlay,\n        });\n    }\n\n    return (\n        <>\n            {upscaleLevel > 0 && (\n                <AspectRatioSelector\n                    aspectRatio={aspectRatio}\n                    onChange={(aspectRatioId) => {\n                        onChange(aspectRatioId, size);\n                        setAspectRatio(aspectRatioId);\n                    }}\n                />\n            )}\n            <div className=\"form-group\">\n                <label htmlFor=\"size\" style={{ width: \"100%\" }}>\n                    Size\n                    <small\n                        className=\"form-text text-muted\"\n                        style={{ float: \"right\" }}\n                    >\n                        {Math.round(size * 100)}%\n                    </small>\n                </label>\n                {/* range from 0.1 to 1 */}\n                <input\n                    type=\"range\"\n                    className=\"form-control-range\"\n                    id=\"size\"\n                    min=\"1\"\n                    max=\"2\"\n                    step=\"0.1\"\n                    value={size}\n                    onChange={(event) => {\n                        onChange(aspectRatio, parseFloat(event.target.value));\n                        setSize(parseFloat(event.target.value));\n                    }}\n                />\n            </div>\n        </>\n    );\n};\n","import { aspectRatios } from \"./aspecRatios\";\n\nexport function getUpscaleLevel(width: number, height: number): number {\n    for (let i = 0; i < aspectRatios.length; i++) {\n        const aspectRatio = aspectRatios[i];\n        if (width * height <= aspectRatio.width * aspectRatio.height) {\n            return 0;\n        }\n        // if (width === aspectRatio.width && height === aspectRatio.height) {\n        //     return upscaleLevel;\n        // }\n    }\n    width /= 2;\n    height /= 2;\n    for (let i = 0; i < aspectRatios.length; i++) {\n        const aspectRatio = aspectRatios[i];\n        if (width * height <= aspectRatio.width * aspectRatio.height) {\n            return 1;\n        }\n        // if (width === aspectRatio.width && height === aspectRatio.height) {\n        //     return upscaleLevel;\n        // }\n    }\n    return 2;\n}\n","// V2 page\nimport { FC, useState, useEffect } from \"react\";\nimport * as uuid from \"uuid\";\nimport axios from \"axios\";\nimport qs from \"qs\";\nimport Dropdown from \"react-bootstrap/Dropdown\";\nimport { useParams, useHistory, Link, useLocation } from \"react-router-dom\";\nimport moment from \"moment\";\nimport ScrollToTop from \"react-scroll-to-top\";\nimport { AIBrushApi } from \"../client\";\nimport { CreateImageInput, StatusEnum, TemporaryImage } from \"../client/api\";\nimport { ImageThumbnail } from \"../components/ImageThumbnail\";\nimport { ImagePrompt, defaultArgs } from \"../components/ImagePrompt\";\nimport {\n    convertPNGToJPG,\n    createBlankImage,\n    createEncodedThumbnail,\n    encodedImageToBlob,\n    uploadBlob,\n} from \"../lib/imageutil\";\n\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport { ImagePopup } from \"../components/ImagePopup\";\nimport { BusyModal } from \"../components/BusyModal\";\nimport { PendingImagesThumbnail } from \"../components/PendingImagesThumbnail\";\nimport { PendingImages } from \"../components/PendingImages\";\nimport { ApiSocket } from \"../lib/apisocket\";\nimport { LocalImagesStore, LocalImage } from \"../lib/localImagesStore\";\nimport { ErrorNotification, SuccessNotification } from \"../components/Alerts\";\nimport { sleep } from \"../lib/sleep\";\nimport { ProgressBar } from \"../components/ProgressBar\";\nimport OutOfCreditsModal from \"../components/OutOfCreditsModal\";\nimport PaymentStatusModal from \"../components/PaymentStatusModal\";\n\nexport const anonymousClient = axios.create();\ndelete anonymousClient.defaults.headers.common[\"Authorization\"];\n\ninterface Props {\n    api: AIBrushApi;\n    apiSocket: ApiSocket;\n    assetsUrl: string;\n    localImages: LocalImagesStore;\n    paymentStatus?: \"success\" | \"canceled\";\n}\n\nexport const Homepage: FC<Props> = ({\n    api,\n    apiSocket,\n    assetsUrl,\n    localImages,\n    paymentStatus,\n}) => {\n    const [creating, setCreating] = useState(false);\n    const [selectedImage, setSelectedImage] = useState<LocalImage | null>(null);\n    const [parentImage, setParentImage] = useState<LocalImage | null>(null);\n    const [loadingParent, setLoadingParent] = useState(false);\n    const [savingImage, setSavingImage] = useState(false);\n    const [uploadProgress, setUploadingProgress] = useState(0);\n\n    const [showPendingImages, setShowPendingImages] = useState(false);\n\n    const [images, setImages] = useState<Array<LocalImage>>([]);\n    const [err, setErr] = useState<string | null>(null);\n    const [errTime, setErrTime] = useState<number>(0);\n    const [success, setSuccess] = useState<string | null>(null);\n    const [successTime, setSuccessTime] = useState<number>(0);\n\n    const [hasMore, setHasMore] = useState<boolean>(true);\n    const [search, setSearch] = useState<string>(\"\");\n    const [searchDebounce, setSearchDebounce] = useState<string>(\"\");\n\n    const [bulkDeleteSelecting, setBulkDeleteSelecting] = useState(false);\n    const [bulkDeleting, setBulkDeleting] = useState(false);\n    const [bulkDeleteIds, setBulkDeleteIds] = useState<{\n        [key: string]: boolean;\n    }>({});\n\n    const [censorNSFW, setCensorNSFW] = useState(true);\n    const [outOfCredits, setOutOfCredits] = useState(false);\n\n    const { id } = useParams<{ id?: string }>();\n    const history = useHistory();\n    const location = useLocation();\n\n    const onError = (err: string) => {\n        setErr(err);\n        setErrTime(moment().valueOf());\n    };\n\n    useEffect(() => {\n        let handle = setTimeout(() => {\n            setSearch(searchDebounce);\n        }, 500);\n        return () => {\n            clearTimeout(handle);\n        };\n    }, [searchDebounce]);\n\n    useEffect(() => {\n        if (id) {\n            // check if the image is already loaded\n            const image = images.find((image) => image.id === id);\n            if (image) {\n                setSelectedImage(image);\n            }\n            // refresh\n            localImages.getImage(id).then((image) => {\n                setSelectedImage(image);\n                if (!image) {\n                    history.replace(\"/\");\n                }\n            });\n        } else {\n            setSelectedImage(null);\n        }\n    }, [id]);\n\n    const onSubmit = async (input: CreateImageInput) => {\n        setCreating(true);\n        setParentImage(null);\n        setErr(null);\n        window.scrollTo(0, 0);\n        setUploadingProgress(0);\n        try {\n            if (input.encoded_image) {\n                const encodedJpg = await convertPNGToJPG(input.encoded_image);\n                const tmpInitImage = await api.createTemporaryImage(\"jpg\");\n                // convert base64 to binary\n                const binaryImageData = Buffer.from(\n                    encodedJpg,\n                    \"base64\"\n                );\n                await anonymousClient.put(\n                    tmpInitImage.data.upload_url,\n                    binaryImageData,\n                    {\n                        headers: {\n                            \"Content-Type\": \"image/jpeg\",\n                        },\n                        onUploadProgress: (progressEvent: any) => {\n                            const percentCompleted =\n                                progressEvent.loaded / progressEvent.total;\n                            setUploadingProgress(percentCompleted);\n                        },\n                    }\n                );\n                input.encoded_image = undefined;\n                input.tmp_jpg_id = tmpInitImage.data.id;\n            }\n\n            const newImages = await api.createImage(input);\n            if (newImages.data.images) {\n                for (let image of newImages.data.images || []) {\n                    localImages.saveImage(image);\n                }\n                setImages((images) => {\n                    return [...newImages.data.images!, ...images].sort(\n                        sortImages\n                    );\n                });\n            } else {\n                onError(\"Could not create images\");\n            }\n        } catch (e: any) {\n            console.error(e);\n            if (e.response?.data?.message?.includes(\"credits\")) {\n                setOutOfCredits(true);\n                return;\n            }\n            onError(\"Error creating images\");\n        } finally {\n            setCreating(false);\n        }\n    };\n\n    const onEditNewImage = async (input: CreateImageInput) => {\n        setCreating(true);\n        setParentImage(null);\n        setErr(null);\n        window.scrollTo(0, 0);\n        try {\n            let encodedImage = input.encoded_image;\n            if (!encodedImage) {\n                encodedImage = createBlankImage(\n                    \"#ffffff\",\n                    input.params.width!,\n                    input.params.height!,\n                )\n            }\n            const newImage: LocalImage = {\n                created_at: moment().valueOf(),\n                updated_at: moment().valueOf(),\n                created_by: \"\",\n                params: {\n                    steps: 20,\n                    width: input.params.width,\n                    height: input.params.height,\n                    prompt: input.params.prompt,\n                    negative_prompt: input.params.negative_prompt,\n                    denoising_strength: input.params.denoising_strength,\n                },\n                label: \"\",\n                id: uuid.v4(),\n                model: input.model!,\n                negative_score: 0,\n                nsfw: !!input.nsfw,\n                parent: input.parent!,\n                score: 0,\n                status: StatusEnum.Completed,\n                temporary: false,\n                imageData: `data:image/png;base64,${encodedImage}`,\n            };\n            await localImages.saveImage(newImage);\n\n            history.push(`/image-editor/${newImage.id}`);\n        } catch (e: any) {\n            console.error(e);\n            onError(\"Error creating image\");\n        } finally {\n            setCreating(false);\n        }\n    };\n\n    const onNSFW = async (updatedImage: LocalImage, nsfw: boolean) => {\n        updatedImage = {\n            ...updatedImage,\n            nsfw,\n        };\n        await localImages.saveImage(updatedImage);\n        setImages((images) => {\n            return images.map((image) => {\n                if (updatedImage.id === image.id) {\n                    return {\n                        ...image,\n                        nsfw,\n                    };\n                }\n                return image;\n            });\n        });\n        setSelectedImage(updatedImage);\n    };\n\n    const loadImages = async (search: string) => {\n        console.log(\"Initial load images\");\n        // clear error\n        setErr(null);\n        setHasMore(true);\n        try {\n            const cursor = moment().add(1, \"minutes\").valueOf();\n            const resp = await localImages.listImages(\n                cursor,\n                \"prev\",\n                100,\n                search\n            );\n            setImages(resp.sort(sortImages));\n            return;\n        } catch (err) {\n            onError(\"Could not load images\");\n            console.error(err);\n        }\n    };\n\n    useEffect(() => {\n        loadImages(search);\n    }, [search]);\n\n    useEffect(() => {\n        if (!api) {\n            return;\n        }\n        let lock = false;\n\n        const pollImages = async (images: Array<LocalImage>) => {\n            if (lock) {\n                return;\n            }\n            lock = true;\n\n            const pendingOrProcessingImages = images.filter((image) => {\n                return (\n                    image.status === \"pending\" || image.status === \"processing\"\n                );\n            });\n            if (pendingOrProcessingImages.length === 0) {\n                return;\n            }\n\n            const pendingById = pendingOrProcessingImages.reduce(\n                (acc, image) => {\n                    acc[image.id] = image;\n                    return acc;\n                },\n                {} as Record<string, LocalImage>\n            );\n\n            try {\n                const resp = await api.batchGetImages(\"id,status,nsfw,error\", {\n                    ids: pendingOrProcessingImages.map((image) => image.id),\n                });\n\n                if (resp.data.images) {\n                    const updatedImages: Array<LocalImage> =\n                        resp.data.images || [];\n                    let statusChange = false;\n                    for (let i = 0; i < updatedImages.length; i++) {\n                        let img = updatedImages[i];\n                        if (pendingById[img.id].status !== img.status) {\n                            statusChange = true;\n                        }\n                        img = {\n                            ...pendingById[img.id],\n                            ...img,\n                        };\n                        updatedImages[i] = img;\n\n                        if (img.status == StatusEnum.Error) {\n                            onError(\n                                img.error ||\n                                    \"Some images failed to generate, please make sure your prompt doesn't violate our terms of service\"\n                            );\n                            await api.deleteImage(img.id);\n                            await localImages.deleteImage(img.id);\n                            continue;\n                        }\n\n                        if (img.status === StatusEnum.Completed) {\n                            const downloadUrls = await api.getImageDownloadUrls(\n                                img.id\n                            );\n                            const resp = await anonymousClient.get(\n                                downloadUrls.data.image_url!,\n                                {\n                                    responseType: \"arraybuffer\",\n                                }\n                            );\n                            const binaryImageData = Buffer.from(\n                                resp.data,\n                                \"binary\"\n                            );\n                            const base64ImageData =\n                                binaryImageData.toString(\"base64\");\n                            const src = `data:image/png;base64,${base64ImageData}`;\n                            img.imageData = src;\n                        }\n                        await localImages.saveImage(img);\n                    }\n                    if (statusChange) {\n                        setImages((images) => {\n                            return [\n                                ...images.map((image) => {\n                                    const updatedImage = updatedImages.find(\n                                        (i) => i.id === image.id\n                                    );\n                                    if (updatedImage) {\n                                        return updatedImage;\n                                    }\n                                    return image;\n                                }),\n                            ].sort(sortImages);\n                        });\n                    }\n                }\n            } catch (err) {\n                onError(\"Could not load images\");\n                console.error(err);\n            } finally {\n                lock = false;\n            }\n        };\n\n        const timerHandle = setInterval(() => {\n            pollImages(images);\n        }, 2 * 1000);\n        return () => {\n            clearInterval(timerHandle);\n        };\n    }, [api, images, search]);\n\n    // load parent image from saved images if an id is on the query string\n    useEffect(() => {\n        const loadParent = async () => {\n            const search = qs.parse(location.search, {\n                ignoreQueryPrefix: true,\n            });\n            if (search.parent) {\n                setLoadingParent(true);\n                try {\n                    const parentImage = await api.getImage(\n                        search.parent as string\n                    );\n                    if (parentImage.data) {\n                        const downloadUrls = await api.getImageDownloadUrls(\n                            parentImage.data.id\n                        );\n                        const resp = await anonymousClient.get(\n                            downloadUrls.data.image_url!,\n                            {\n                                responseType: \"arraybuffer\",\n                            }\n                        );\n                        const binaryImageData = Buffer.from(\n                            resp.data,\n                            \"binary\"\n                        );\n                        const base64ImageData =\n                            binaryImageData.toString(\"base64\");\n                        const src = `data:image/png;base64,${base64ImageData}`;\n                        setParentImage({\n                            ...parentImage.data,\n                            imageData: src,\n                        });\n                        history.push(\"/\");\n                    }\n                } finally {\n                    setLoadingParent(false);\n                }\n            }\n        };\n        loadParent();\n    }, [location.search]);\n\n    const isPendingOrProcessing = (image: LocalImage) => {\n        return (\n            image.status === StatusEnum.Pending ||\n            image.status === StatusEnum.Processing\n        );\n    };\n\n    const sortImages = (a: LocalImage, b: LocalImage) => {\n        // pending and processing images always come first\n        if (isPendingOrProcessing(a) && !isPendingOrProcessing(b)) {\n            return -1;\n        } else if (!isPendingOrProcessing(a) && isPendingOrProcessing(b)) {\n            return 1;\n        }\n        // if the parent is the same, sort by score descending\n        // otherwise, sort by updated_at\n        if (\n            a.parent === b.parent &&\n            a.params.prompt == b.params.prompt &&\n            a.status !== StatusEnum.Pending &&\n            b.status !== StatusEnum.Pending\n        ) {\n            // if the score is the same, sort by updated_at\n            let aScore = a.score;\n            let bScore = b.score;\n            // working around a bug where negative score was assigned\n            // for an empty negative prompt.\n            if (a.params.prompt!.trim() !== \"\") {\n                aScore = aScore - a.negative_score;\n            }\n            if (b.params.prompt!.trim() !== \"\") {\n                bScore = bScore - b.negative_score;\n            }\n            if (aScore == bScore) {\n                return b.updated_at - a.updated_at;\n            }\n            return bScore - aScore;\n        }\n\n        return b.updated_at - a.updated_at;\n    };\n\n    const onLoadMore = async () => {\n        // get the minimum updated_at from images\n        let minUpdatedAt = moment().valueOf();\n        images.forEach((image) => {\n            minUpdatedAt = Math.min(minUpdatedAt, image.updated_at);\n        });\n        // load images in descending order from updated_at\n        let resp = await localImages.listImages(\n            minUpdatedAt - 1,\n            \"prev\",\n            100,\n            search\n        );\n        if (resp.length > 0) {\n            // combine images with new images and sort by updated_at descending\n            setImages((images) => {\n                // filtering is required due to a race condition\n                const imagesById = images.reduce((acc, image) => {\n                    acc[image.id] = image;\n                    return acc;\n                }, {} as { [key: string]: LocalImage });\n                resp = resp.filter((image) => !imagesById[image.id]);\n                return [...images, ...resp]\n                    .filter((image) => !image.deleted_at)\n                    .sort(sortImages);\n            });\n        } else {\n            setHasMore(false);\n        }\n    };\n\n    const onDelete = async (image: LocalImage) => {\n        try {\n            // await api.deleteImage(image.id);\n            let nextImage = null;\n            if (selectedImage) {\n                const index = images.findIndex(\n                    (i) => i.id === selectedImage.id\n                );\n                if (index > 0) {\n                    nextImage = images[index - 1];\n                } else if (index === 0 && images.length > 1) {\n                    nextImage = images[1];\n                }\n\n            }\n            await localImages.deleteImage(image.id);\n            setImages((images) => {\n                return images.filter((i) => i.id !== image.id);\n            });\n            if (nextImage) {\n                history.push(`/images/${nextImage.id}`);\n            } else {\n                history.push(\"/\");\n            }\n        } catch (e) {\n            console.error(e);\n            onError(\"Error deleting image\");\n        }\n    };\n\n    const onFork = async (image: LocalImage) => {\n        setParentImage(image);\n        // setSelectedImage(null);\n        history.push(\"/\");\n        window.scrollTo(0, 0);\n    };\n\n    const onSave = async (image: LocalImage) => {\n        setSavingImage(true);\n        try {\n            history.push(\"/\");\n            const createInput: CreateImageInput = {\n                count: 1,\n                params: image.params,\n                status: StatusEnum.Saved,\n                temporary: false,\n                label: \"\",\n                model: image.model,\n                nsfw: image.nsfw,\n            };\n\n            const encodedImage = image.imageData!.split(\",\")[1];\n\n            // convert base64 to binary\n            const binaryImageData = Buffer.from(encodedImage, \"base64\");\n            const encodedThumbnail = await createEncodedThumbnail(encodedImage);\n            const binaryThumbnailData = Buffer.from(encodedThumbnail, \"base64\");\n\n            const createResp = await api.createImage(createInput);\n            const imageId = createResp.data.images![0].id;\n            const uploadUrls = await api.getImageUploadUrls(imageId);\n            await anonymousClient.put(\n                uploadUrls.data.thumbnail_url!,\n                binaryThumbnailData,\n                {\n                    headers: {\n                        \"Content-Type\": \"image/png\",\n                    },\n                    onUploadProgress: (progressEvent: any) => {\n                        const percentCompleted =\n                            progressEvent.loaded / progressEvent.total;\n                        setUploadingProgress(percentCompleted / 2);\n                    },\n                }\n            );\n            await anonymousClient.put(\n                uploadUrls.data.image_url!,\n                binaryImageData,\n                {\n                    headers: {\n                        \"Content-Type\": \"image/png\",\n                    },\n                    onUploadProgress: (progressEvent: any) => {\n                        const percentCompleted =\n                            progressEvent.loaded / progressEvent.total;\n                        setUploadingProgress(percentCompleted / 2 + 0.5);\n                    },\n                }\n            );\n\n            await localImages.hardDeleteImage(image.id);\n            setImages((images) => {\n                return images.filter((i) => i.id !== image.id);\n            });\n            setSuccess(\"Image saved\");\n            setSuccessTime(moment().valueOf());\n        } catch (e) {\n            console.error(e);\n            onError(\"Error saving image\");\n        } finally {\n            setSavingImage(false);\n        }\n    };\n\n    const onEdit = async (image: LocalImage) => {\n        history.push(`/image-editor/${image.id}`);\n    };\n\n    const onThumbnailClicked = (image: LocalImage) => {\n        // setSelectedImage(image);\n        if (bulkDeleteSelecting) {\n            setBulkDeleteIds({\n                ...bulkDeleteIds,\n                [image.id]: !bulkDeleteIds[image.id],\n            });\n        } else {\n            history.push(`/images/${image.id}`);\n        }\n    };\n\n    const handleCancelFork = () => {\n        setParentImage(null);\n        window.scrollTo(0, 0);\n    };\n\n    const onConfirmBulkDelete = async () => {\n        try {\n            setBulkDeleting(true);\n            const promises = Object.keys(bulkDeleteIds).map((id) => {\n                return localImages.deleteImage(id);\n            });\n            await Promise.all(promises);\n            setImages((images) => {\n                return images.filter((image) => !bulkDeleteIds[image.id]);\n            });\n            setBulkDeleteIds({});\n            setBulkDeleteSelecting(false);\n        } catch (e) {\n            console.error(e);\n            onError(\"Error deleting images\");\n        } finally {\n            setBulkDeleting(false);\n        }\n    };\n\n    const completedOrSavedImages = images.filter((image) => {\n        return (\n            !image.deleted_at &&\n            (image.status === StatusEnum.Completed ||\n                image.status === StatusEnum.Saved)\n        );\n    });\n\n    const pendingOrProcessingImages = images.filter(\n        (image) =>\n            !image.deleted_at &&\n            (image.status === StatusEnum.Pending ||\n                image.status === StatusEnum.Processing)\n    );\n\n    const pendingImages = pendingOrProcessingImages.filter(\n        (image) => image.status === StatusEnum.Pending\n    );\n\n    const processingImages = pendingOrProcessingImages.filter(\n        (image) => image.status === StatusEnum.Processing\n    );\n\n    const onSwipe = (image: LocalImage, direction: number) => {\n        // select the previous or next image from the currently selected one\n        const index = images.findIndex((i) => i.id === image.id);\n        if (index === -1) {\n            return;\n        }\n        const newIndex = index + direction;\n        if (newIndex < 0 || newIndex >= images.length) {\n            return;\n        }\n        const newImage = images[newIndex];\n        onThumbnailClicked(newImage);\n    }\n\n    return (\n        <>\n            <h1 style={{ fontSize: \"40px\", textAlign: \"left\" }}>\n                Welcome to AiBrush - Home\n            </h1>\n\n            <ErrorNotification message={err} timestamp={errTime} />\n            <SuccessNotification message={success} timestamp={successTime} />\n\n            <ImagePrompt\n                api={api}\n                assetsUrl={assetsUrl}\n                creating={creating}\n                onSubmit={onSubmit}\n                onEdit={onEditNewImage}\n                parent={parentImage}\n                onCancel={() => handleCancelFork()}\n            />\n            <hr />\n\n            <div\n                className=\"homepage-images\"\n                style={{ marginTop: \"48px\", paddingBottom: \"48px\" }}\n            >\n                <div style={{ textAlign: \"left\" }}>\n                    <div\n                        className=\"input-group\"\n                        style={{ marginBottom: \"16px\" }}\n                    >\n                        <input\n                            style={{}}\n                            value={searchDebounce}\n                            type=\"search\"\n                            className=\"form-control image-search\"\n                            placeholder=\"Search...\"\n                            onChange={(e) => setSearchDebounce(e.target.value)}\n                        />\n\n                        <div\n                            style={{\n                                float: \"right\",\n                            }}\n                        >\n                            {!bulkDeleteSelecting && (\n                                <>\n                                    <button\n                                        style={{ display: \"inline\" }}\n                                        className=\"btn btn-primary image-popup-button\"\n                                        onClick={() =>\n                                            setCensorNSFW(!censorNSFW)\n                                        }\n                                    >\n                                        {!censorNSFW && (\n                                            <i className=\"fas fa-eye\"></i>\n                                        )}\n                                        {censorNSFW && (\n                                            <i className=\"fas fa-eye-slash\"></i>\n                                        )}\n                                    </button>\n                                    <Dropdown\n                                        style={{\n                                            display: \"inline\",\n                                            marginLeft: \"8px\",\n                                        }}\n                                    >\n                                        <Dropdown.Toggle variant=\"danger\">\n                                            <i className=\"fas fa-trash\"></i>\n                                        </Dropdown.Toggle>\n\n                                        <Dropdown.Menu>\n                                            <Dropdown.Item\n                                                onClick={() =>\n                                                    setBulkDeleteSelecting(true)\n                                                }\n                                            >\n                                                Bulk Delete\n                                            </Dropdown.Item>\n                                            <Dropdown.Item\n                                                onClick={() =>\n                                                    history.push(\n                                                        \"/local-deleted-images\"\n                                                    )\n                                                }\n                                            >\n                                                View Deleted Images\n                                            </Dropdown.Item>\n                                        </Dropdown.Menu>\n                                    </Dropdown>\n                                </>\n                            )}\n                            {bulkDeleteSelecting && (\n                                <>\n                                    <button\n                                        className=\"btn btn-primary image-popup-button\"\n                                        onClick={() => {\n                                            setBulkDeleteSelecting(false);\n                                            setBulkDeleteIds({});\n                                        }}\n                                    >\n                                        Cancel\n                                    </button>\n                                    <button\n                                        style={{ marginLeft: \"8px\" }}\n                                        className=\"btn image-popup-delete-button\"\n                                        onClick={() => {\n                                            onConfirmBulkDelete();\n                                        }}\n                                    >\n                                        Delete\n                                    </button>\n                                </>\n                            )}\n                        </div>\n                    </div>\n                </div>\n                <InfiniteScroll\n                    dataLength={images.length}\n                    next={onLoadMore}\n                    hasMore={hasMore}\n                    loader={\n                        <>\n                            <hr />\n                            <h4>Loading...</h4>\n                        </>\n                    }\n                >\n                    {pendingOrProcessingImages.length > 0 && (\n                        <PendingImagesThumbnail\n                            pendingCount={pendingImages.length}\n                            processingCount={processingImages.length}\n                            onClick={() => {\n                                setShowPendingImages(true);\n                            }}\n                        />\n                    )}\n                    {completedOrSavedImages.map((image) => (\n                        <ImageThumbnail\n                            key={image.id}\n                            image={image}\n                            assetsUrl={assetsUrl}\n                            onClick={onThumbnailClicked}\n                            bulkDelete={\n                                bulkDeleteSelecting && bulkDeleteIds[image.id]\n                            }\n                            censorNSFW={censorNSFW}\n                        />\n                    ))}\n                </InfiniteScroll>\n            </div>\n\n            {selectedImage && (\n                <ImagePopup\n                    assetsUrl={assetsUrl}\n                    image={selectedImage}\n                    onClose={() => history.push(\"/\")}\n                    onDelete={(image) => {\n                        onDelete(image);\n                        setImages(images.filter((i) => i.id !== image.id));\n                        history.push(\"/\");\n                    }}\n                    onFork={(image) => {\n                        onFork(image);\n                        history.push(\"/\");\n                    }}\n                    onEdit={(image) => {\n                        onEdit(image);\n                    }}\n                    onSave={(image) => {\n                        onSave(image);\n                    }}\n                    onNSFW={onNSFW}\n                    censorNSFW={censorNSFW}\n                    onSwipe={onSwipe}\n                />\n            )}\n            <ScrollToTop />\n            <BusyModal show={creating} title=\"Creating images\">\n                <p>Please wait while we create your image.</p>\n                <ProgressBar progress={uploadProgress} />\n            </BusyModal>\n            <BusyModal show={bulkDeleting} title=\"Deleting images\">\n                <p>Please wait while we delete your images.</p>\n            </BusyModal>\n            <BusyModal show={loadingParent} title=\"Loading parent image\">\n                <p>Please wait while we load the parent image.</p>\n            </BusyModal>\n            <BusyModal show={savingImage} title=\"Saving image\">\n                {/* bootstrap progress bar for uploadProgress (0-1 value) */}\n                <ProgressBar progress={uploadProgress} />\n            </BusyModal>\n            <PendingImages\n                images={pendingOrProcessingImages}\n                onCancel={() => setShowPendingImages(false)}\n                show={showPendingImages}\n                onDeleteImage={(image) => {\n                    onDelete(image);\n                    setImages(images.filter((i) => i.id !== image.id));\n                }}\n            />\n            <OutOfCreditsModal\n                show={outOfCredits}\n                onHide={() => setOutOfCredits(false)}\n            />\n            <PaymentStatusModal paymentStatus={paymentStatus} />\n        </>\n    );\n};\n","import React, { FC, useEffect, useRef, useState } from \"react\";\n\nimport { aspectRatios, DEFAULT_ASPECT_RATIO, getClosestAspectRatio } from \"../lib/aspecRatios\";\n\ninterface Props {\n    aspectRatio: number;\n    onChange: (aspectRatio: number) => void;\n    disabled?: boolean;\n}\n\nexport const AspectRatioSelector: FC<Props> = ({ aspectRatio, onChange, disabled }) => {\n    const aspectRatioDetails = aspectRatios[aspectRatio];\n    return (\n        <div className=\"form-group\">\n            <div\n                style={{\n                    minHeight: \"140px\",\n                    display: \"flex\",\n                    alignItems: \"center\",\n                }}\n            >\n                {/* aspect ratio slider, goes from 0 -> aspectRatios.length - 1 */}\n                <div\n                    style={{\n                        width: aspectRatioDetails.width / 8,\n                        height: aspectRatioDetails.height / 8,\n                        // dotted line options: dotted, dashed, solid, double, groove, ridge, inset, outset, none, hidden\n                        border: \"1px dashed white\",\n                        margin: \"auto\",\n                    }}\n                ></div>\n            </div>\n            <label style={{width: \"100%\"}}>\n                Aspect Ratio\n                <small className=\"form-text text-muted\" style={{float: \"right\"}}>\n                    {aspectRatioDetails.displayName}\n                </small>\n            </label>\n            <input\n                type=\"range\"\n                disabled={disabled}\n                className=\"form-control-range\"\n                min={0}\n                max={aspectRatios.length - 1}\n                value={aspectRatio}\n                onChange={(e) => {\n                    onChange(parseInt(e.target.value));\n                }}\n            />\n        </div>\n    );\n};\n","export interface DBConfig {\n    dbName: string;\n    storeName: string;\n};\n\nexport class KVStore<T> {\n    private dbConfig: DBConfig;\n    private db: IDBDatabase | null = null;\n\n    constructor(dbConfig: DBConfig) {\n        this.dbConfig = dbConfig;\n    }\n\n    private async createDB(): Promise<IDBDatabase> {\n        return new Promise((resolve, reject) => {\n            const request = indexedDB.open(this.dbConfig.dbName);\n\n            request.onupgradeneeded = () => {\n                const db = request.result;\n                db.createObjectStore(this.dbConfig.storeName);\n            };\n\n            request.onsuccess = () => {\n                resolve(request.result);\n            };\n\n            request.onerror = () => {\n                reject(request.error);\n            };\n        });\n    }\n\n    private async getDB(): Promise<IDBDatabase> {\n        if (!this.db) {\n            this.db = await this.createDB();\n        }\n        return this.db;\n    }\n\n\n    async getItem(key: string): Promise<T | null> {\n        const db = await this.getDB();\n\n        return new Promise((resolve, reject) => {\n            const transaction = db.transaction(this.dbConfig.storeName);\n            const store = transaction.objectStore(this.dbConfig.storeName);\n            const request = store.get(key);\n\n            request.onsuccess = () => {\n                resolve(request.result);\n            };\n\n            request.onerror = () => {\n                resolve(null);\n            };\n        });\n    }\n\n    async setItem(key: string, value: T): Promise<void> {\n        const db = await this.getDB();\n\n        return new Promise((resolve, reject) => {\n            const transaction = db.transaction(\n                this.dbConfig.storeName,\n                \"readwrite\"\n            );\n            const store = transaction.objectStore(this.dbConfig.storeName);\n            const request = store.put(value, key);\n\n            request.onsuccess = () => {\n                resolve();\n            };\n\n            request.onerror = () => {\n                resolve();\n            };\n        });\n    }\n\n    async deleteItem(key: string): Promise<void> {\n        const db = await this.getDB();\n\n        return new Promise((resolve, reject) => {\n            const transaction = db.transaction(\n                this.dbConfig.storeName,\n                \"readwrite\"\n            );\n            const store = transaction.objectStore(this.dbConfig.storeName);\n            const request = store.delete(key);\n\n            request.onsuccess = () => {\n                resolve();\n            };\n\n            request.onerror = () => {\n                resolve();\n            };\n        });\n    }\n\n    async getAllItems(): Promise<T[]> {\n        const db = await this.getDB();\n\n        return new Promise((resolve, reject) => {\n            const transaction = db.transaction(this.dbConfig.storeName);\n            const store = transaction.objectStore(this.dbConfig.storeName);\n            const request = store.getAll();\n\n            request.onsuccess = () => {\n                resolve(request.result);\n            };\n\n            request.onerror = () => {\n                resolve([]);\n            };\n        });\n    }\n}\n","import React, { FC, useState, useEffect } from \"react\";\nimport { ChromePicker } from \"react-color\";\n\ninterface Props {\n    selectedColor: string;\n    color: string;\n    onClick: (color: string) => void;\n    onColorSelected?: (color: string) => void;\n}\n\nexport const PaletteButton: FC<Props> = ({\n    selectedColor,\n    color,\n    onClick,\n    onColorSelected,\n}) => {\n    const [displayColorPicker, setDisplayColorPicker] = useState(false);\n    const [tmpColor, setTmpColor] = useState(color);\n\n    useEffect(() => {\n        setTmpColor(color);\n    }, [color]);\n\n    const popover: React.CSSProperties = {\n        position: \"absolute\",\n        zIndex: 2,\n    };\n\n    let className = \"palette-button\";\n    if (selectedColor === color) {\n        className += \" selected\";\n    } else if (color == \"#000000\") {\n        className += \" black\";\n    }\n    return (\n        <>\n            <div\n                className={className}\n                style={{ backgroundColor: color }}\n                onClick={() => onClick(color)}\n                onDoubleClick={() => setDisplayColorPicker(!displayColorPicker)}\n            ></div>\n            {onColorSelected && displayColorPicker ? (\n                <div style={popover}>\n                    {/* <div style={cover} onClick={handleClose} /> */}\n                    <ChromePicker\n                        color={tmpColor}\n                        onChange={(color) => setTmpColor(color.hex)}\n                        onChangeComplete={(color) => setTmpColor(color.hex)}\n                    />\n                    <button\n                        className=\"btn btn-primary\"\n                        style={{ marginRight: \"8px\", marginLeft: \"16px\" }}\n                        onClick={() => {\n                            onColorSelected(tmpColor);\n                            setDisplayColorPicker(false);\n                        }}\n                    >\n                        <i className=\"fas fa-check\" />\n                    </button>\n                    <button\n                        className=\"btn btn-primary\"\n                        onClick={() => setDisplayColorPicker(false)}\n                    >\n                        <i className=\"fas fa-times\" />\n                    </button>\n                </div>\n            ) : null}\n        </>\n    );\n};\n","import React, { FC, useEffect, useState } from \"react\";\n\ninterface Props {\n    pendingCount: number;\n    processingCount: number;\n    onClick?: () => void;\n}\n\nexport const PendingImagesThumbnail: FC<Props> = ({\n    pendingCount,\n    processingCount,\n    onClick,\n}) => {\n    const [hover, setHover] = useState(false);\n\n    // on mouse in/out, set hover state\n    const onMouseEnter = () => setHover(true);\n    const onMouseLeave = () => setHover(false);\n    let icon = (\n        <i style={{ marginTop: \"20px\" }} className=\"fa fa-hourglass-half\"></i>\n    );\n\n    if (processingCount > 0) {\n        icon = (\n            <i style={{ marginTop: \"20px\" }} className=\"fa fa-cog fa-spin\"></i>\n        );\n    }\n\n    return (\n        <div\n            onMouseEnter={onMouseEnter}\n            onMouseLeave={onMouseLeave}\n            style={{\n                backgroundImage: `url(/images/default.png)`,\n                backgroundSize: \"contain\",\n                width: \"128px\",\n                height: \"128px\",\n                margin: \"8px\",\n                float: \"left\",\n                cursor: \"pointer\",\n            }}\n            onClick={onClick}\n        >\n            {hover && (\n                <div\n                    style={{\n                        background: \"rgba(255, 255, 255, 0.5)\",\n                        color: \"black\",\n                        width: \"100%\",\n                        height: \"100%\",\n                        lineHeight: \"1\",\n                        fontSize: \"20px\",\n                    }}\n                >\n                    <br/>\n                    {pendingCount > 0 && (\n                        <div style={{ marginBottom: \"24px\" }}>\n                            {pendingCount} pending\n                        </div>\n                    )}\n                    {processingCount > 0 && (\n                        <div>{processingCount} processing</div>\n                    )}\n                </div>\n            )}\n            {!hover && (\n                <div\n                    style={{\n                        background: \"rgba(255, 255, 255, 0.3)\",\n                        color: \"#555\",\n                        width: \"100%\",\n                        height: \"100%\",\n                        fontSize: \"80px\",\n                    }}\n                >\n                    {icon}\n                </div>\n            )}\n        </div>\n    );\n};\n","import React, {FC, useEffect, useState} from \"react\";\nimport { Modal } from \"react-bootstrap\";\nimport { Image } from \"../client/api\";\n\ninterface Props {\n    images: Image[];\n    onDeleteImage: (image: Image) => void;\n    onCancel: () => void;\n    show: boolean;\n}\n\nexport const PendingImages: FC<Props> = ({\n    images,\n    onDeleteImage,\n    onCancel,\n    show,\n}) => {\n\n    function imageIcon(image: Image) {\n        if (image.status === \"pending\") {\n            return <i className=\"fa fa-hourglass-half\"></i>;\n        } else if (image.status === \"processing\") {\n            return <i className=\"fa fa-cog fa-spin\"></i>;\n        }\n    }\n\n    const truncate = (phrases: string) => {\n        if (phrases.length > 35) {\n            return phrases.substring(0, 35) + \"...\";\n        }\n        return phrases;\n    }\n\n    // refactor from table to div layout\n    const pendingDiv = (\n        <div>\n            <div style={{marginBottom: \"8px\"}}>\n                <div style={{display: \"inline-block\", width: \"100px\"}}>\n                    Status\n                </div>\n                <div style={{display: \"inline-block\", width: \"250px\"}}>\n                    Phrases\n                </div>\n                <div style={{display: \"inline-block\", width: \"100px\"}}>\n                    Action\n                </div>\n            </div>\n            {images.map((image) => (\n                <div key={image.id} style={{marginBottom: \"8px\"}}>\n                    <div style={{display: \"inline-block\", width: \"100px\"}}>\n                        {imageIcon(image)}&nbsp;{image.status}\n                    </div>\n                    <div style={{display: \"inline-block\", width: \"250px\"}}>\n                        {/* if more than 30 chars, truncate with ellipsis*/}\n                        {truncate(image.params.prompt || \"\")}\n                    </div>\n                    <div style={{display: \"inline-block\", width: \"100px\"}}>\n                        <button\n                            className=\"btn btn-danger btn-sm image-popup-delete-button\"\n                            onClick={() => onDeleteImage(image)}\n                        >\n                            <i className=\"fa fa-trash\"></i>&nbsp;Delete\n                        </button>\n                    </div>\n                </div>\n            ))}\n        </div>\n    );\n\n    return (\n        <Modal show={show} onHide={onCancel}>\n            <Modal.Header closeButton>\n                <Modal.Title>Pending Images</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                {pendingDiv}\n            </Modal.Body>\n            <Modal.Footer>\n                <button className=\"btn btn-secondary\" onClick={onCancel}>\n                    Close\n                </button>\n            </Modal.Footer>\n        </Modal>\n    );\n};","import React, { useState } from 'react';\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\n\ninterface CopyToClipboardIconProps {\n  text: string;\n}\n\nconst CopyToClipboardIcon: React.FC<CopyToClipboardIconProps> = ({ text }) => {\n  const [copied, setCopied] = useState(false);\n\n  const handleCopy = () => {\n    setCopied(true);\n    setTimeout(() => setCopied(false), 5000); // Reset icon after 5 seconds\n  };\n\n  return (\n    <CopyToClipboard text={text} onCopy={handleCopy}>\n      <span style={{cursor: \"pointer\", marginLeft: \"8px\"}}>\n        {/* <FontAwesomeIcon icon={copied ? faCheck : faCopy} style={{ color: copied ? 'green' : undefined }} /> */}\n        <i className={`fas fa-${copied ? 'check' : 'copy'}`} style={{ color: copied ? 'green' : undefined }} />\n      </span>\n    </CopyToClipboard>\n  );\n};\n\nexport default CopyToClipboardIcon;\n","import { useState, FC, TouchEvent } from \"react\";\n\ninterface Props {\n    onSwipe: (direction: number) => void;\n}\n\nexport const Swipe: FC<Props> = ({ onSwipe, children }) => {\n    const [touchStart, setTouchStart] = useState<number | null>(null)\n    const [touchEnd, setTouchEnd] = useState<number | null>(null);\n\n    // the required distance between touchStart and touchEnd to be detected as a swipe\n    const minSwipeDistance = 50;\n\n    const onTouchStart = (e: TouchEvent<HTMLDivElement>) => {\n        setTouchEnd(null); // otherwise the swipe is fired even with usual touch events\n        setTouchStart(e.targetTouches[0].clientX);\n    };\n\n    const onTouchMove = (e: TouchEvent<HTMLDivElement>) => setTouchEnd(e.targetTouches[0].clientX);\n\n    const onTouchEnd = () => {\n        if (!touchStart || !touchEnd) return;\n        const distance = touchStart - touchEnd;\n        const isLeftSwipe = distance > minSwipeDistance;\n        const isRightSwipe = distance < -minSwipeDistance;\n        if (isLeftSwipe || isRightSwipe) {\n            onSwipe(isLeftSwipe ? 1 : -1);\n        }\n    };\n\n    return (\n        <div\n            onTouchStart={onTouchStart}\n            onTouchMove={onTouchMove}\n            onTouchEnd={onTouchEnd}\n        >\n            {children}\n        </div>\n    );\n};\n","import React, { FC, useEffect, useRef, useState } from \"react\";\nimport { Modal } from \"react-bootstrap\";\nimport { CreateImageInput, Image, StatusEnum } from \"../client/api\";\nimport { LocalImage } from \"../lib/localImagesStore\";\nimport CopyToClipboard from \"react-copy-to-clipboard\";\nimport CopyToClipboardIcon from \"./CopyToClipboardIcon\";\nimport { Swipe } from \"./Swipe\";\n\ninterface ImagePopupProps {\n    assetsUrl: string;\n    image: LocalImage;\n    censorNSFW: boolean;\n    onClose: () => void;\n    onDelete?: (image: LocalImage) => void;\n    onFork?: (image: LocalImage) => void;\n    onEdit?: (image: LocalImage) => void;\n    onNSFW?: (image: LocalImage, nsfw: boolean) => void;\n    onSave?: (image: LocalImage) => void;\n    onSwipe?: (image: LocalImage, direction: number) => void;\n}\n\nexport const ImagePopup: FC<ImagePopupProps> = ({\n    assetsUrl,\n    image,\n    censorNSFW,\n    onClose,\n    onDelete,\n    onFork,\n    onEdit,\n    onNSFW,\n    onSave,\n    onSwipe,\n}) => {\n    const img = useRef<HTMLImageElement>(null);\n    let src = `${assetsUrl}/${image.id}.image.png?updated_at=${image.updated_at}`;\n    if (image.imageData) {\n        src = image.imageData;\n    }\n    let score = image.score;\n    if (image.params.negative_prompt && image.negative_score != 0) {\n        score -= image.negative_score;\n    }\n    const [showNSFW, setShowNSFW] = useState(false);\n\n    const statusBadge = (status: string) => {\n        const displayStatus = status.charAt(0).toUpperCase() + status.slice(1);\n        let icon = \"fa fa-question-circle\";\n        switch (status) {\n            case StatusEnum.Pending:\n                icon = \"fas fa-hourglass-half\";\n                break;\n            case StatusEnum.Processing:\n                icon = \"fas fa-cog fa-spin\";\n                break;\n            case StatusEnum.Completed:\n                icon = \"fas fa-check\";\n                break;\n            case StatusEnum.Saved:\n                icon = \"fas fa-save\";\n                break;\n            case StatusEnum.Error:\n                icon = \"fas fa-exclamation-circle\";\n                break;\n        }\n        return (\n            <>\n                <span style={{ fontSize: \"24px\" }}>\n                    <i\n                        className={`${icon} status-badge status-badge-${status}`}\n                        style={{\n                            fontSize: \"10px\",\n                            position: \"relative\",\n                            top: \"-1px\",\n                        }}\n                    ></i>\n                    &nbsp;{displayStatus}\n                </span>\n            </>\n        );\n    };\n\n    useEffect(() => {\n        if (!img.current) {\n            return;\n        }\n        img.current.onerror = () => {\n            if (!img.current) {\n                return;\n            }\n            img.current.src = \"/images/default.png\";\n        };\n    }, [img]);\n\n    let title = image.label;\n    if (!title) {\n        title = image.params.prompt!;\n    }\n    if (title.indexOf(\",\") > 0) {\n        title = title.substring(0, title.indexOf(\",\"));\n    }\n\n    let swipeArrowMargin = \"10px\";\n    if (window.innerWidth < 992) {\n        swipeArrowMargin = \"-30px\";\n    }\n    const maxImageHeight = window.innerHeight * 0.6 + \"px\";\n\n    // if open, show modal with image\n    return (\n        <Modal show={true} onHide={onClose} size=\"xl\">\n            <Modal.Header closeButton>\n                <Modal.Title>{title}</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <div style={{ position: \"relative\" }}>\n                    {/* Left button */}\n                    {onSwipe && (\n                        <button\n                            className=\"btn btn-secondary btn-sm image-popup-left-button\"\n                            style={{\n                                position: \"absolute\",\n                                left: swipeArrowMargin,\n                                top: \"50%\",\n                                transform: \"translateY(-50%)\",\n                                zIndex: 1,\n                                padding: \"5px 10px\",\n                            }}\n                            onClick={() => onSwipe(image, -1)}\n                        >\n                            <i className=\"fas fa-chevron-left\"></i>\n                        </button>\n                    )}\n                    <Swipe\n                        onSwipe={(direction) =>\n                            onSwipe && onSwipe(image, direction)\n                        }\n                    >\n                        <img\n                            ref={img}\n                            style={{\n                                maxWidth: \"100%\",\n                                maxHeight: maxImageHeight,\n                                display: \"block\",\n                                marginLeft: \"auto\",\n                                marginRight: \"auto\",\n                                filter:\n                                    image.nsfw && censorNSFW && !showNSFW\n                                        ? \"blur(30px)\"\n                                        : \"\",\n                            }}\n                            id={`image-popup-${image.id}`}\n                            src={src}\n                            alt={image.label}\n                        />\n                    </Swipe>\n                    {/* Right button */}\n                    <button\n                        className=\"btn btn-secondary btn-sm .image-popup-right-button\"\n                        style={{\n                            position: \"absolute\",\n                            right: swipeArrowMargin,\n                            top: \"50%\",\n                            transform: \"translateY(-50%)\",\n                            zIndex: 1,\n                            padding: \"5px 10px\",\n                        }}\n                        onClick={() => onSwipe && onSwipe(image, 1)}\n                    >\n                        <i className=\"fas fa-chevron-right\"></i>\n                    </button>\n                </div>\n                {/* List these fields: status, iterations, phrases */}\n                <div className=\"row\">\n                    <div className=\"col-lg-12\"></div>\n                </div>\n                {/* controls */}\n                <div className=\"row\">\n                    <div className=\"col-lg-12\">\n                        <div\n                            className=\"image-popup-controls\"\n                            style={{ marginTop: \"40px\" }}\n                        >\n                            {statusBadge(image.status)}\n                            <div style={{ float: \"right\" }}>\n                                {onFork &&\n                                    (image.status === StatusEnum.Saved ||\n                                        image.status ===\n                                            StatusEnum.Completed) && (\n                                        <button\n                                            className=\"btn btn-secondary btn-sm image-popup-button\"\n                                            onClick={() => onFork(image)}\n                                            style={{ marginRight: \"5px\" }}\n                                        >\n                                            <i className=\"fas fa-code-branch\"></i>\n                                            &nbsp;VARIATIONS\n                                        </button>\n                                    )}\n                                {onDelete && (\n                                    <button\n                                        className=\"btn btn-danger btn-sm image-popup-delete-button\"\n                                        onClick={() =>\n                                            onDelete && onDelete(image)\n                                        }\n                                        style={{ marginRight: \"5px\" }}\n                                    >\n                                        <i className=\"fas fa-trash-alt\"></i>\n                                        &nbsp;DELETE\n                                    </button>\n                                )}\n                                {onEdit && (\n                                    <button\n                                        className=\"btn btn-primary btn-sm image-popup-button edit-button\"\n                                        onClick={() => onEdit && onEdit(image)}\n                                        style={{ marginRight: \"5px\" }}\n                                    >\n                                        <i className=\"fas fa-edit\"></i>\n                                        &nbsp;EDIT\n                                    </button>\n                                )}\n                                {onSave && (\n                                    <button\n                                        className=\"btn btn-primary btn-sm image-popup-button\"\n                                        onClick={() => onSave && onSave(image)}\n                                        style={{ marginRight: \"5px\" }}\n                                    >\n                                        <i className=\"fas fa-save\"></i>\n                                        &nbsp;SAVE\n                                    </button>\n                                )}\n                                {image.nsfw && censorNSFW && (\n                                    <button\n                                        className=\"btn btn-primary btn-sm image-popup-button\"\n                                        onClick={() => setShowNSFW(!showNSFW)}\n                                        style={{ marginRight: \"5px\" }}\n                                    >\n                                        <i className=\"fas fa-eye\"></i>\n                                        &nbsp;{showNSFW ? \"HIDE\" : \"SHOW\"}\n                                    </button>\n                                )}\n                            </div>\n                        </div>\n                        <div\n                            className=\"image-popup-controls\"\n                            style={{ marginTop: \"28px\", marginBottom: \"85px\" }}\n                        >\n                            {/* Horde interface doesn't support score yet */}\n                            {/* <div>\n                                Similarity to prompt: {(score * 200).toFixed(2)}\n                                %\n                            </div> */}\n                            <div>\n                                Image dimensions: {image.params.width} x{\" \"}\n                                {image.params.height}\n                            </div>\n                            <div>Model: {image.model}</div>\n                            {image.nsfw && (\n                                <>\n                                    <div>\n                                        {/* alert warning icon */}\n                                        <i\n                                            className=\"fas fa-exclamation-triangle\"\n                                            style={{\n                                                color: \"orange\",\n                                                fontSize: \"18px\",\n                                                position: \"relative\",\n                                                top: \"2px\",\n                                            }}\n                                        ></i>\n                                        &nbsp;May contain NSFW content\n                                    </div>\n                                    {onNSFW && (\n                                        <a\n                                            href=\"javascript:void(0)\"\n                                            onClick={() => onNSFW(image, false)}\n                                        >\n                                            Mark as Safe for Work\n                                        </a>\n                                    )}\n                                </>\n                            )}\n                            {image.params.seed && (\n                                <div>Seed: {image.params.seed}</div>\n                            )}\n                            {!image.nsfw && (\n                                <>\n                                    <div>\n                                        {/* green check icon */}\n                                        <i\n                                            className=\"fas fa-check\"\n                                            style={{\n                                                color: \"green\",\n                                                fontSize: \"18px\",\n                                                position: \"relative\",\n                                                top: \"2px\",\n                                            }}\n                                        ></i>\n                                        &nbsp;Safe for Work\n                                    </div>\n                                    {onNSFW && (\n                                        <a\n                                            href=\"javascript:void(0)\"\n                                            onClick={() => onNSFW(image, true)}\n                                        >\n                                            Mark as Not Safe for Work\n                                        </a>\n                                    )}\n                                </>\n                            )}\n                            <div style={{ marginTop: \"8px\" }}>\n                                Prompt: {image.params.prompt}\n                                <CopyToClipboardIcon\n                                    text={image.params.prompt!}\n                                />\n                            </div>\n                            <div style={{ marginTop: \"8px\" }}>\n                                Negative Prompt: {image.params.negative_prompt}\n                                <CopyToClipboardIcon\n                                    text={image.params.negative_prompt!}\n                                />\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </Modal.Body>\n        </Modal>\n    );\n};\n","import React, { FC, useState, useEffect, useRef } from \"react\";\nimport axios from \"axios\";\nimport { Prompt } from \"react-router\";\nimport { loadImageAsync } from \"../../lib/loadImage\";\n\nimport { sleep } from \"../../lib/sleep\";\nimport { defaultArgs } from \"../../components/ImagePrompt\";\nimport { Tool, BaseTool } from \"./tool\";\nimport { Renderer } from \"./renderer\";\nimport { Cursor, Rect } from \"./models\";\nimport {\n    AIBrushApi,\n    CreateImageInput,\n    Image as APIImage,\n    ImageList,\n    LoraConfig,\n    StatusEnum,\n} from \"../../client\";\nimport { ZoomHelper } from \"./zoomHelper\";\nimport { getClosestAspectRatio } from \"../../lib/aspecRatios\";\nimport {\n    convertPNGToJPG,\n    ImageUtilWorker,\n    ImageWorkerRequest,\n    loadImageDataElement,\n} from \"../../lib/imageutil\";\nimport { SelectionTool, Controls as SelectionControls } from \"./selection-tool\";\nimport { getUpscaleLevel } from \"../../lib/upscale\";\nimport { ApiSocket, NOTIFICATION_IMAGE_UPDATED } from \"../../lib/apisocket\";\nimport moment from \"moment\";\nimport { ProgressBar } from \"../../components/ProgressBar\";\nimport { calculateImagesCost } from \"../../lib/credits\";\nimport { CostIndicator } from \"../../components/CostIndicator\";\nimport ModelSelector from \"../../components/ModelSelector\";\nimport { PencilTool } from \"./pencil-tool\";\nimport { MaskEditor } from \"./mask-editor-controls\";\nimport { ResetToDefaultIcon } from \"../../components/ResetToDefaultIcon\";\nimport { LoraModal, SelectedLora, selectedLorasFromConfigs } from \"../../components/LoraSelector\";\nimport { LoraTriggers } from \"../../components/LoraTriggers\";\nimport { SelectedLoraTag } from \"../../components/SelectedLora\";\n\nconst anonymousClient = axios.create();\n\ntype EnhanceToolState =\n    | \"select\"\n    | \"default\"\n    | \"uploading\"\n    | \"processing\"\n    | \"confirm\"\n    | \"erase\"\n    | \"mask\";\n\n// eraser width modifier adds a solid core with a feather edge\n// equal to the what is used on enhanced selections\nconst eraserWidthModifier = 1.3;\n\ninterface ImageWithData extends APIImage {\n    data?: ImageData;\n}\n\nexport class EnhanceTool extends BaseTool implements Tool {\n    readonly selectionTool: SelectionTool;\n    readonly pencilTool: PencilTool;\n\n    private prompt: string = \"\";\n    private negativePrompt: string = \"\";\n    private model: string = \"Epic Diffusion\";\n    private count: number = 4;\n    private variationStrength: number = 0.35;\n    private loras: LoraConfig[] = [];\n    private _dirty = false;\n    private worker: ImageUtilWorker;\n    private idCounter = 0;\n\n    private _state: EnhanceToolState = \"default\";\n    private stateHandler: (state: EnhanceToolState) => void = () => {};\n    private selectionControlsListener: (show: boolean) => void = () => {};\n    private maskHandler: (isMasked: boolean) => void = () => {};\n\n    private imageData: Array<ImageData> = [];\n    private selectedImageDataIndex: number = -1;\n    private selectedImageData: ImageData | null = null;\n    private panning = false;\n    private erasing = false;\n    private progressListener?: (progress: number) => void;\n    private errorListener?: (error: string | null) => void;\n    private dirtyListener?: (dirty: boolean) => void;\n\n    set dirty(dirty: boolean) {\n        this._dirty = dirty;\n        if (this.dirtyListener) {\n            this.dirtyListener(dirty);\n        }\n    }\n\n    get dirty() {\n        return this._dirty;\n    }\n\n    onDirty(listener: (dirty: boolean) => void): void {\n        this.dirtyListener = listener;\n    }\n\n    onError(handler: (error: string | null) => void) {\n        this.errorListener = handler;\n    }\n\n    private notifyError(error: string | null) {\n        if (this.errorListener) {\n            this.errorListener(error);\n        }\n    }\n\n    get state(): EnhanceToolState {\n        return this._state;\n    }\n\n    set state(state: EnhanceToolState) {\n        if (state !== this._state) {\n            this.renderer.setCursor(undefined);\n            if (this._state == \"select\") {\n                this.selectionTool.destroy();\n            }\n            // if (this._state === \"mask\") {\n            //     this.renderer.setCursor(undefined);\n            // }\n            // if (this._state === \"erase\") {\n            //     this.renderer.setCursor(undefined);\n            // }\n            this._state = state;\n            this.stateHandler(state);\n            if (state == \"confirm\") {\n                this.selectionControlsListener(true);\n            } else {\n                this.selectionControlsListener(false);\n                if (state == \"select\") {\n                    this.selectionTool.updateArgs({\n                        ...this.selectionTool.getArgs(),\n                        outpaint: false,\n                    });\n                }\n            }\n        }\n    }\n\n    selectSupported(): boolean {\n        return !(\n            getUpscaleLevel(\n                this.renderer.getWidth(),\n                this.renderer.getHeight()\n            ) === 0 && this.renderer.getWidth()\n        );\n    }\n\n    constructor(renderer: Renderer) {\n        super(renderer, \"enhance\");\n        this.selectionTool = new SelectionTool(renderer);\n        this.pencilTool = new PencilTool(\n            renderer,\n            \"mask\",\n            \"#FFFFFF\",\n            \"mask-editor\"\n        );\n        if (this.selectSupported()) {\n            this.state = \"select\";\n        } else {\n            this.state = \"default\";\n        }\n        let selectionArgs = this.selectionTool.getArgs();\n        if (!this.selectSupported()) {\n            selectionArgs = {\n                ...selectionArgs,\n                selectionOverlay: {\n                    x: 0,\n                    y: 0,\n                    width: this.renderer.getWidth(),\n                    height: this.renderer.getHeight(),\n                },\n            };\n        }\n        this.selectionTool.updateArgs(selectionArgs);\n        this.pencilTool.updateArgs({\n            ...this.pencilTool.getArgs(),\n            brushColor: \"#FFFFFF\",\n        });\n        // unset the cursor from the pencil tool (hack)\n        this.renderer.setCursor(undefined);\n        this.worker = new ImageUtilWorker();\n    }\n\n    onMouseDown(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        if (this.state == \"select\") {\n            this.selectionTool.onMouseDown(event);\n            return;\n        }\n        if (this.state == \"mask\") {\n            this.pencilTool.onMouseDown(event);\n            return;\n        }\n        let { x, y } = this.zoomHelper.translateMouseToCanvasCoordinates(\n            event.nativeEvent.offsetX,\n            event.nativeEvent.offsetY\n        );\n        if (event.button === 1) {\n            this.panning = true;\n            return;\n        }\n        if (this.state == \"erase\" && this.selectedImageData) {\n            this.erasing = true;\n            // clone selected ImageData\n            this.selectedImageData = new ImageData(\n                this.selectedImageData.data.slice(),\n                this.selectedImageData.width,\n                this.selectedImageData.height\n            );\n\n            this.erasePoint(x, y);\n        }\n    }\n\n    // TODO: on erase cancel and on erase confirm\n    // either restore the image data from the array\n    // or overwrite the array with the new image data\n\n    private erasePoint(x: number, y: number) {\n        const selectionOverlay = this.renderer.getSelectionOverlay()!;\n        const baseWidth = Math.min(\n            selectionOverlay.width,\n            selectionOverlay.height\n        );\n        const eraserRadius = Math.floor((baseWidth / 8) * eraserWidthModifier);\n\n        const relX = x - selectionOverlay.x;\n        const relY = y - selectionOverlay.y;\n        const imageData = this.selectedImageData!;\n\n        const startX = Math.max(0, relX - eraserRadius);\n        const startY = Math.max(0, relY - eraserRadius);\n        const endX = Math.min(imageData.width, relX + eraserRadius);\n        const endY = Math.min(imageData.height, relY + eraserRadius);\n\n        // relX=64.28541697636388, relY=64.24464312259761, startX=0.28541697636387653, startY=0.24464312259760845, endX=128.28541697636388, endY=128.2446431225976\n\n        for (let i = startX; i < endX; i++) {\n            for (let j = startY; j < endY; j++) {\n                const index = (j * imageData.width + i) * 4;\n                const distance = Math.sqrt(\n                    Math.pow(i - relX, 2) + Math.pow(j - relY, 2)\n                );\n                if (distance < eraserRadius) {\n                    // set alpha to a linear gradient from the center,\n                    // 100% in the middle and 0% at the edge\n                    const alphaPct =\n                        (distance / eraserRadius) * eraserWidthModifier -\n                        (eraserWidthModifier - 1);\n\n                    const alpha = Math.min(\n                        Math.floor(alphaPct * 255),\n                        imageData.data[index + 3]\n                    );\n                    imageData.data[index + 3] = alpha;\n                }\n            }\n        }\n        this.renderer.setEditImage(imageData);\n    }\n\n    private updateCursor(x: number, y: number) {\n        if (this.state == \"erase\" && this.selectedImageData) {\n            const selectionOverlay = this.renderer.getSelectionOverlay()!;\n            const baseWidth = Math.min(\n                selectionOverlay.width,\n                selectionOverlay.height\n            );\n            const featherWidth = Math.floor(baseWidth / 8);\n            this.renderer.setCursor({\n                color: \"white\",\n                radius: featherWidth * eraserWidthModifier,\n                type: \"circle\",\n                x,\n                y,\n            });\n        } else {\n            this.renderer.setCursor({\n                color: \"white\",\n                radius: 10,\n                type: \"crosshairs\",\n                x,\n                y,\n            });\n        }\n    }\n\n    onMouseMove(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        if (this.state == \"select\") {\n            this.selectionTool.onMouseMove(event);\n            return;\n        }\n        if (this.state == \"mask\") {\n            this.pencilTool.onMouseMove(event);\n            return;\n        }\n        let { x, y } = this.zoomHelper.translateMouseToCanvasCoordinates(\n            event.nativeEvent.offsetX,\n            event.nativeEvent.offsetY\n        );\n        if (this.panning) {\n            this.zoomHelper.onPan(event);\n        }\n\n        this.updateCursor(x, y);\n        if (this.erasing) {\n            this.erasePoint(x, y);\n        }\n    }\n\n    onMouseUp(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        if (this.state == \"select\") {\n            this.selectionTool.onMouseUp(event);\n        }\n        if (this.state == \"mask\") {\n            this.pencilTool.onMouseUp(event);\n        }\n        this.panning = false;\n        this.erasing = false;\n    }\n\n    onMouseLeave(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>): void {\n        if (this.state == \"select\") {\n            this.selectionTool.onMouseLeave(event);\n        }\n        if (this.state == \"mask\") {\n            this.pencilTool.onMouseLeave(event);\n        }\n        this.panning = false;\n        this.erasing = false;\n    }\n\n    onWheel(event: WheelEvent) {\n        this.zoomHelper.onWheel(event);\n        let { x, y } = this.zoomHelper.translateMouseToCanvasCoordinates(\n            event.offsetX,\n            event.offsetY\n        );\n        this.updateCursor(x, y);\n    }\n\n    updateArgs(args: any) {\n        args = {\n            ...this.getArgs(),\n            ...args,\n        };\n        this.prompt = args.prompt || \"\";\n        this.negativePrompt = args.negativePrompt || \"\";\n        this.model = args.model || \"Epic Diffusion\";\n        this.count = args.count || 4;\n        this.variationStrength = args.variationStrength || 0.75;\n        this.loras = args.loras || [];\n        console.log(\"updateArgs\", args);\n    }\n\n    onChangeState(handler: (state: EnhanceToolState) => void) {\n        this.stateHandler = handler;\n    }\n\n    onChangeMask(handler: (isMasked: boolean) => void) {\n        this.maskHandler = handler;\n    }\n\n    onShowSelectionControls(listener: (show: boolean) => void): void {\n        this.selectionControlsListener = listener;\n    }\n\n    onProgress(listener: (progress: number) => void): void {\n        this.progressListener = listener;\n    }\n\n    private newId(): string {\n        return `${this.idCounter++}`;\n    }\n\n    private async loadImageData(\n        api: AIBrushApi,\n        imageId: string,\n        maskData: ImageData | undefined,\n        selectionOverlay: Rect\n    ): Promise<ImageData> {\n        const imageElement = await loadImageDataElement(api, imageId);\n        const canvas = document.createElement(\"canvas\");\n        canvas.width = selectionOverlay.width;\n        canvas.height = selectionOverlay.height;\n        const ctx = canvas.getContext(\"2d\");\n        if (!ctx) {\n            throw new Error(\"Failed to get canvas context\");\n        }\n        ctx.drawImage(\n            imageElement,\n            0,\n            0,\n            selectionOverlay.width,\n            selectionOverlay.height\n        );\n        const imageData = ctx.getImageData(\n            0,\n            0,\n            selectionOverlay.width,\n            selectionOverlay.height\n        );\n        const id = this.newId();\n        const req: ImageWorkerRequest = {\n            id,\n            alphaMode: \"none\",\n            feather: true,\n            height: this.renderer.getHeight(),\n            width: this.renderer.getWidth(),\n            pixels: imageData.data,\n            selectionOverlay,\n        };\n        if (maskData) {\n            req.alphaMode = \"mask\";\n            req.alphaPixels = maskData.data;\n        }\n        const resp = await this.worker.processRequest(req);\n        const updatedImageData = new ImageData(\n            resp.pixels,\n            imageData.width,\n            imageData.height\n        );\n        // remove canvas\n        canvas.remove();\n        return updatedImageData;\n    }\n\n    cancel() {\n        if (this.state == \"erase\") {\n            this.state = \"confirm\";\n            this.selectedImageData =\n                this.imageData[this.selectedImageDataIndex];\n            this.renderer.setEditImage(this.selectedImageData);\n        } else {\n            if (this.selectSupported()) {\n                this.state = \"select\";\n            } else {\n                this.state = \"default\";\n            }\n            this.imageData = [];\n            this.renderer.setEditImage(null);\n            this.dirty = false;\n        }\n    }\n\n    erase() {\n        this.state = \"erase\";\n    }\n\n    mask() {\n        if (this.renderer.isMasked()) {\n            this.renderer.deleteMask();\n        }\n        this.renderer.createMask();\n        this.state = \"mask\";\n        this.maskHandler(true);\n    }\n\n    deleteMask() {\n        this.renderer.deleteMask();\n        if (this.state == \"mask\") {\n            this.state = \"default\";\n        }\n        this.maskHandler(false);\n    }\n\n    private updateProgress(progress: number) {\n        if (this.progressListener) {\n            this.progressListener(progress);\n        }\n    }\n\n    async submit(api: AIBrushApi, apisocket: ApiSocket, image: APIImage) {\n        this.dirty = true;\n        this.notifyError(null);\n        const selectionOverlay = this.renderer.getSelectionOverlay();\n        let encodedImage = this.renderer.getEncodedImage(selectionOverlay!);\n        if (!encodedImage) {\n            console.error(\"No selection\");\n            return;\n        }\n        encodedImage = await convertPNGToJPG(encodedImage);\n        let encodedMask: string | undefined;\n        let maskData: ImageData | undefined;\n        if (this.renderer.isMasked()) {\n            encodedMask = this.renderer.getEncodedMask(\n                selectionOverlay!,\n                \"mask\"\n            );\n            maskData = this.renderer.getImageData(selectionOverlay!, \"mask\");\n        }\n\n        const input: CreateImageInput = defaultArgs();\n\n        const tmpInitImage = await api.createTemporaryImage(\"jpg\");\n        // convert base64 to binary\n        const binaryImageData = Buffer.from(encodedImage, \"base64\");\n        this.state = \"uploading\";\n        this.updateProgress(0);\n        await anonymousClient.put(\n            tmpInitImage.data.upload_url,\n            binaryImageData,\n            {\n                headers: {\n                    \"Content-Type\": \"image/jpeg\",\n                },\n                onUploadProgress: (progressEvent: any) => {\n                    let percentCompleted =\n                        progressEvent.loaded / progressEvent.total;\n                    if (encodedMask) {\n                        percentCompleted /= 2;\n                    }\n                    this.updateProgress(percentCompleted);\n                },\n            }\n        );\n        input.tmp_jpg_id = tmpInitImage.data.id;\n\n        if (encodedMask) {\n            const tmpMaskImage = await api.createTemporaryImage(\"png\");\n            const binaryMaskData = Buffer.from(encodedMask, \"base64\");\n            await anonymousClient.put(\n                tmpMaskImage.data.upload_url,\n                binaryMaskData,\n                {\n                    headers: {\n                        \"Content-Type\": \"image/png\",\n                    },\n                    onUploadProgress: (progressEvent: any) => {\n                        let percentCompleted =\n                            0.5 +\n                            progressEvent.loaded / progressEvent.total / 2;\n                        this.updateProgress(percentCompleted);\n                    },\n                }\n            );\n            input.tmp_mask_id = tmpMaskImage.data.id;\n        }\n\n        input.label = \"\";\n        input.parent = image.id;\n        input.params.prompt = this.prompt || image.params.prompt;\n        input.params.negative_prompt =\n            this.negativePrompt || image.params.negative_prompt;\n        input.params.denoising_strength = this.variationStrength;\n        input.count = this.count;\n        input.model = this.model;\n        input.nsfw = image.nsfw;\n\n        input.params.width = selectionOverlay!.width;\n        input.params.height = selectionOverlay!.height;\n        // round width and height up to the nearest multiple of 64\n        input.params.width = Math.ceil(input.params.width / 64) * 64;\n        input.params.height = Math.ceil(input.params.height / 64) * 64;\n        input.params.loras = this.loras;\n        input.temporary = true;\n\n\n        let resp: ImageList | null = null;\n\n        try {\n            resp = (await api.createImage(input)).data;\n        } catch (err) {\n            console.error(\"Error creating images\", err);\n            this.notifyError(\"Failed to create image\");\n            this.state = \"default\";\n            return;\n        }\n        this.state = \"processing\";\n        let newImages: Array<ImageWithData> | undefined = resp.images;\n        if (!newImages || newImages.length === 0) {\n            this.state = \"default\";\n            throw new Error(\"No images returned\");\n        }\n        let completed = false;\n\n        let lastUpdate = moment();\n\n        const onMessage = async (msg: string) => {\n            const img = JSON.parse(msg) as any;\n            if (\n                img.type === NOTIFICATION_IMAGE_UPDATED &&\n                img.status === StatusEnum.Completed\n            ) {\n                lastUpdate = moment();\n                for (let i = 0; i < newImages!.length; i++) {\n                    if (newImages![i].id === img.id) {\n                        const imageData = await this.loadImageData(\n                            api,\n                            newImages![i].id,\n                            maskData,\n                            selectionOverlay!\n                        );\n                        newImages![i].data = imageData;\n                        newImages![i].status = StatusEnum.Completed;\n                    }\n                }\n            } else if (img.status == StatusEnum.Error) {\n                for (let i = 0; i < newImages!.length; i++) {\n                    if (newImages![i].id === img.id) {\n                        newImages![i].status = StatusEnum.Error;\n                    }\n                }\n            }\n        };\n        apisocket.addMessageListener(onMessage);\n        try {\n            let startTime = moment();\n            let lastCheck = moment();\n\n            while (!completed) {\n                let completeCount = 0;\n                await sleep(1000);\n                // poll for completion\n                for (let i = 0; i < newImages!.length; i++) {\n                    if (\n                        newImages![i].status === StatusEnum.Completed ||\n                        newImages![i].status === StatusEnum.Error\n                    ) {\n                        completeCount++;\n                        continue;\n                    }\n                }\n                this.updateProgress(completeCount / newImages!.length);\n                if (completeCount === newImages!.length) {\n                    completed = true;\n                }\n\n                // fallback if sockets don't catch one\n                if (moment().diff(lastCheck, \"seconds\") > 10) {\n                    // get list of ids that aren't completed and batch get them.\n                    const pendingIds = newImages\n                        .filter(\n                            (img) =>\n                                img.status === StatusEnum.Pending ||\n                                img.status === StatusEnum.Processing\n                        )\n                        .map((img) => img.id);\n                    console.log(\"Checking pending images\", pendingIds);\n                    const updatedImagesResult = await api.batchGetImages(\n                        undefined,\n                        {\n                            ids: pendingIds,\n                        }\n                    );\n                    const updatedImages = updatedImagesResult.data.images;\n                    const byId = updatedImages!.reduce((acc, img) => {\n                        acc[img.id] = img;\n                        return acc;\n                    }, {} as Record<string, APIImage>);\n                    for (let i = 0; i < newImages!.length; i++) {\n                        if (\n                            newImages![i].status === StatusEnum.Pending ||\n                            newImages![i].status === StatusEnum.Processing\n                        ) {\n                            const updated = byId[newImages![i].id];\n                            if (updated) {\n                                newImages![i].status = updated.status;\n                                if (updated.status === StatusEnum.Completed) {\n                                    lastUpdate = moment();\n                                    const imageData = await this.loadImageData(\n                                        api,\n                                        newImages![i].id,\n                                        maskData,\n                                        selectionOverlay!\n                                    );\n                                    newImages![i].data = imageData;\n                                }\n                            }\n                        }\n                    }\n                    lastCheck = moment();\n                }\n                // timeout of 2 minutes\n                if (\n                    (lastUpdate.isAfter(startTime) &&\n                        moment().diff(lastUpdate, \"seconds\") > 30) ||\n                    moment().diff(startTime, \"minutes\") > 2\n                ) {\n                    completed = true;\n                }\n            }\n        } finally {\n            apisocket.removeMessageListener(onMessage);\n        }\n\n        // sort images by score descending\n        newImages!.sort((a, b) => {\n            return b.score - a.score;\n        });\n        newImages = newImages!.filter((img) => {\n            return img.status === StatusEnum.Completed;\n        });\n\n        this.imageData = [];\n        for (let i = 0; i < newImages!.length; i++) {\n            if (newImages![i].data) {\n                this.imageData.push(newImages![i].data as ImageData);\n            }\n        }\n        if (this.imageData.length === 0) {\n            this.state = \"default\";\n            this.notifyError(\"No images returned\");\n            return;\n        }\n        this.renderer.setEditImage(this.imageData[0]);\n        this.selectedImageDataIndex = 0;\n        this.selectedImageData = this.imageData[0];\n        this.state = \"confirm\";\n        this.deleteMask();\n    }\n\n    select(direction: \"left\" | \"right\") {\n        if (direction == \"left\") {\n            this.selectedImageDataIndex--;\n            if (this.selectedImageDataIndex < -1) {\n                this.selectedImageDataIndex = this.imageData.length - 1;\n            }\n        }\n        if (direction == \"right\") {\n            this.selectedImageDataIndex++;\n            if (this.selectedImageDataIndex >= this.imageData.length) {\n                this.selectedImageDataIndex = -1;\n            }\n        }\n        if (this.selectedImageDataIndex === -1) {\n            this.selectedImageData = null;\n        } else {\n            this.selectedImageData =\n                this.imageData[this.selectedImageDataIndex];\n        }\n        this.renderer.setEditImage(this.selectedImageData);\n    }\n\n    onSaveImage(listener: (encodedImage: string, args?: any) => void): void {\n        this.saveListener = listener;\n    }\n\n    confirm() {\n        this.renderer.commitSelection();\n        if (this.selectSupported()) {\n            this.state = \"select\";\n        } else {\n            this.state = \"default\";\n        }\n        this.imageData = [];\n        const encodedImage = this.renderer.getEncodedImage(null);\n        if (encodedImage && this.saveListener) {\n            this.saveListener(encodedImage, {\n                phrases: [this.prompt],\n                negative_phrases: [this.negativePrompt],\n                model: this.model,\n            });\n        }\n        this.dirty = false;\n    }\n\n    destroy(): boolean {\n        if (this.renderer.isMasked()) {\n            this.renderer.deleteMask();\n        }\n        this.renderer.setCursor(undefined);\n        this.worker.destroy();\n        return true;\n    }\n}\n\ninterface ControlsProps {\n    api: AIBrushApi;\n    apisocket: ApiSocket;\n    image: APIImage;\n    renderer: Renderer;\n    tool: EnhanceTool;\n}\n\nexport const EnhanceControls: FC<ControlsProps> = ({\n    api,\n    apisocket,\n    image,\n    renderer,\n    tool,\n}) => {\n    const [count, setCount] = useState(4);\n    const [dirty, setDirty] = useState(false);\n    const [variationStrength, setVariationStrength] = useState(0.35);\n    const [prompt, setPrompt] = useState(image.params.prompt || \"\");\n    const [negativePrompt, setNegativePrompt] = useState(\n        image.params.negative_prompt || \"\"\n    );\n    const [model, setModel] = useState(\n        image.model == \"swinir\" || image.model == \"stable_diffusion\"\n            ? \"Epic Diffusion\"\n            : image.model\n    );\n    const [selectingModel, setSelectingModel] = useState<boolean>(false);\n    const [state, setState] = useState<EnhanceToolState>(tool.state);\n    const [isMasked, setIsMasked] = useState<boolean>(tool.renderer.isMasked());\n    const [progress, setProgress] = useState(0);\n    const [error, setError] = useState<string | null>(null);\n\n    const [selectingLora, setSelectingLora] = useState<boolean>(false);\n    const [selectedLoras, setSelectedLoras] = useState<SelectedLora[]>([]);\n\n    tool.onChangeState(setState);\n    tool.onChangeMask(setIsMasked);\n    tool.onProgress(setProgress);\n    tool.onError(setError);\n    tool.onDirty(setDirty);\n\n    useEffect(() => {\n        if (image.params.loras && image.params.loras.length > 0) {\n            selectedLorasFromConfigs(image.params.loras).then((selected) => {\n                setSelectedLoras(selected);\n            });\n        } else {\n            setSelectedLoras([]);\n        }\n    }, [image]);\n\n    const onAddLora = (lora: SelectedLora) => {\n        setSelectedLoras([...selectedLoras, lora]);\n        setSelectingLora(false);\n    };\n\n    const onRemoveLora = (lora: SelectedLora) => {\n        const updated = selectedLoras.filter(\n            (selectedLora) => selectedLora.config.name !== lora.config.name\n        )\n        setSelectedLoras(updated);\n    };\n\n    const onAddTrigger = (trigger: string) => {\n        const parts = [prompt];\n        if (prompt.length > 0 && !prompt.endsWith(\",\")) {\n            parts.push(\", \");\n        }\n        parts.push(trigger);\n        setPrompt(parts.join(\"\"));\n    };\n\n    const selectionOverlay: Rect =\n        tool.selectionTool.getArgs().selectionOverlay;\n    let cost = count;\n    if (selectionOverlay) {\n        cost = calculateImagesCost(\n            count,\n            selectionOverlay.width,\n            selectionOverlay.height\n        );\n    }\n\n    if (state == \"processing\" || state == \"uploading\") {\n        return (\n            <div style={{ marginTop: \"16px\" }}>\n                <i className=\"fa fa-spinner fa-spin\"></i>&nbsp;{\" \"}\n                {state === \"processing\" ? \"Enhancing...\" : \"Uploading...\"}\n                <br />\n                <ProgressBar progress={progress} />\n            </div>\n        );\n    }\n\n    return (\n        <div\n            style={{\n                marginTop: \"16px\",\n                marginBottom: \"8px\",\n                marginLeft: \"16px\",\n            }}\n        >\n            {error && (\n                <div className=\"alert alert-danger\" role=\"alert\">\n                    {/* dismiss button */}\n                    <button\n                        type=\"button\"\n                        className=\"close\"\n                        data-dismiss=\"alert\"\n                        aria-label=\"Close\"\n                        onClick={() => setError(null)}\n                    >\n                        <span aria-hidden=\"true\">&times;</span>\n                    </button>\n                    {error}\n                </div>\n            )}\n            {state === \"select\" && (\n                <>\n                    <p>\n                        {/* info icon */}\n                        <i className=\"fa fa-info-circle\"></i>&nbsp; Move the\n                        selection rectangle to the area that you want to enhance\n                    </p>\n                    <SelectionControls\n                        renderer={renderer}\n                        tool={tool.selectionTool}\n                        lockAspectRatio={true}\n                    />\n                </>\n            )}\n            {state === \"default\" && (\n                <>\n                    <p>\n                        {/* info icon */}\n                        <i className=\"fa fa-info-circle\"></i>&nbsp; Confirm the\n                        parameters below and continue\n                    </p>\n                    {/* prompt */}\n                    <div className=\"form-group\">\n                        <label htmlFor=\"prompt\">\n                            Prompt&nbsp;\n                            <ResetToDefaultIcon\n                                onClick={() =>\n                                    setPrompt(image.params.prompt || \"\")\n                                }\n                            />\n                        </label>\n                        {/* refresh icon */}\n\n                        <input\n                            type=\"text\"\n                            className=\"form-control\"\n                            id=\"prompt\"\n                            value={prompt}\n                            onChange={(e) => {\n                                setPrompt(e.target.value);\n                            }}\n                        />\n\n                        <small className=\"form-text text-muted\">\n                            Customize the text prompt here\n                        </small>\n                    </div>\n                    {selectedLoras.length > 0 && (\n                        <LoraTriggers\n                            prompt={prompt}\n                            selectedLoras={selectedLoras}\n                            onAddTrigger={onAddTrigger}\n                        />\n                    )}\n                    {/* negative prompt */}\n                    <div className=\"form-group\">\n                        <label htmlFor=\"negative-prompt\">\n                            Negative Prompt&nbsp;\n                            <ResetToDefaultIcon\n                                onClick={() =>\n                                    setNegativePrompt(\n                                        image.params.negative_prompt || \"\"\n                                    )\n                                }\n                            />\n                        </label>\n                        <input\n                            type=\"text\"\n                            className=\"form-control\"\n                            id=\"negative-prompt\"\n                            value={negativePrompt}\n                            onChange={(e) => {\n                                setNegativePrompt(e.target.value);\n                            }}\n                        />\n                        <small className=\"form-text text-muted\">\n                            Customize the negative text prompt here\n                        </small>\n                    </div>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"count\">Count: {count}</label>\n                        <input\n                            type=\"range\"\n                            className=\"form-control-range\"\n                            id=\"count\"\n                            min=\"1\"\n                            max=\"10\"\n                            step=\"1\"\n                            value={count}\n                            onChange={(e) => {\n                                setCount(parseInt(e.target.value));\n                            }}\n                        />\n                        <small className=\"form-text text-muted\">\n                            Number of enhancement options\n                        </small>\n                    </div>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"variation-strength\">\n                            Variation Strength:{\" \"}\n                            {Math.round(variationStrength * 100)}%\n                        </label>\n                        <input\n                            type=\"range\"\n                            className=\"form-control-range\"\n                            id=\"variation-strength\"\n                            min=\"0\"\n                            max=\"1\"\n                            step=\"0.05\"\n                            value={variationStrength}\n                            onChange={(e) => {\n                                setVariationStrength(\n                                    parseFloat(e.target.value)\n                                );\n                            }}\n                        />\n                        <small className=\"form-text text-muted\">\n                            How much variation to use\n                        </small>\n                    </div>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"model\">Model</label>\n                        <div>\n                            <button\n                                type=\"button\"\n                                className=\"btn btn-secondary light-button\"\n                                onClick={() => setSelectingModel(true)}\n                            >\n                                {model}&nbsp;\n                                <i className=\"fas fa-caret-down\"></i>\n                            </button>\n                        </div>\n                        <small className=\"form-text text-muted\">\n                            Select the model to use\n                        </small>\n                    </div>\n                    <div className=\"form-group\">\n                        {/* loras */}\n                        <label htmlFor=\"loras\">Loras</label>\n                        <div>\n                            {selectedLoras.map((lora) => (\n                                <SelectedLoraTag\n                                    key={lora.lora.name}\n                                    lora={lora}\n                                    onRemove={(lora) => onRemoveLora(lora)}\n                                />\n                            ))}\n                            {/* add lora button */}\n                            {selectedLoras.length < 5 && (\n                                <button\n                                    type=\"button\"\n                                    className=\"btn btn-secondary light-button\"\n                                    style={{ marginLeft: \"8px\" }}\n                                    onClick={() => setSelectingLora(true)}\n                                >\n                                    <i className=\"fas fa-plus\"></i>&nbsp;Add\n                                    Lora\n                                </button>\n                            )}\n                        </div>\n                    </div>\n                    <div className=\"form-group\">\n                        <CostIndicator imagesCost={cost} />\n                    </div>\n                </>\n            )}\n            {state === \"erase\" && (\n                <p>\n                    {/* info icon */}\n                    <i className=\"fa fa-info-circle\"></i>&nbsp; Erase any\n                    undesired sections before saving\n                </p>\n            )}\n            {state === \"mask\" && (\n                <MaskEditor\n                    onConfirm={() => (tool.state = \"default\")}\n                    onRevert={() => {\n                        tool.deleteMask();\n                    }}\n                    tool={tool.pencilTool}\n                />\n            )}\n\n            <div className=\"form-group\">\n                {state === \"select\" && (\n                    <button\n                        type=\"button\"\n                        className=\"btn btn-primary btn-sm\"\n                        onClick={() => {\n                            tool.state = \"default\";\n                        }}\n                        style={{ marginRight: \"8px\" }}\n                    >\n                        {/* magic icon */}\n                        <i className=\"fa fa-magic\"></i>&nbsp; Continue\n                    </button>\n                )}\n                {((state === \"default\" && tool.selectSupported()) ||\n                    state === \"confirm\" ||\n                    state === \"erase\") && (\n                    <button\n                        className=\"btn btn-primary btn-sm\"\n                        onClick={() => {\n                            tool.cancel();\n                        }}\n                        style={{ marginRight: \"8px\" }}\n                    >\n                        {/* cancel icon */}\n                        <i className=\"fa fa-times\"></i>&nbsp; Revert\n                    </button>\n                )}\n                {(state === \"confirm\" || state === \"erase\") && (\n                    <button\n                        className=\"btn btn-primary btn-sm\"\n                        onClick={() => tool.confirm()}\n                        style={{ marginRight: \"8px\" }}\n                    >\n                        <i className=\"fa fa-save\"></i>&nbsp; Save\n                    </button>\n                )}\n                {state === \"confirm\" && (\n                    <>\n                        <button\n                            className=\"btn btn-primary btn-sm\"\n                            onClick={() => tool.erase()}\n                            style={{ marginRight: \"8px\" }}\n                        >\n                            <i className=\"fa fa-eraser\"></i>&nbsp; Erase\n                        </button>\n                    </>\n                )}\n                {state === \"default\" && (\n                    <>\n                        <button\n                            className=\"btn btn-primary btn-sm\"\n                            onClick={() => {\n                                tool.updateArgs({\n                                    count,\n                                    variationStrength,\n                                    prompt,\n                                    negativePrompt,\n                                    model,\n                                    loras: selectedLoras.map(\n                                        (lora) => lora.config\n                                    ),\n                                });\n                                tool.submit(api, apisocket, image);\n                            }}\n                            style={{ marginRight: \"8px\" }}\n                        >\n                            <i className=\"fa fa-magic\"></i>&nbsp; Enhance\n                        </button>\n                        <button\n                            className=\"btn btn-primary btn-sm\"\n                            onClick={() => tool.mask()}\n                            style={{ marginRight: \"8px\" }}\n                        >\n                            <i className=\"fa fa-cut\"></i>&nbsp; Mask\n                        </button>\n                        {isMasked && (\n                            <button\n                                className=\"btn btn-danger btn-sm\"\n                                onClick={() => tool.deleteMask()}\n                                style={{ marginRight: \"8px\" }}\n                            >\n                                <i className=\"fa fa-cut\"></i>&nbsp; Unmask\n                            </button>\n                        )}\n                    </>\n                )}\n            </div>\n            <Prompt\n                when={dirty}\n                message=\"Are you sure you want to leave? Your changes will be lost.\"\n            />\n            {selectingModel && (\n                <ModelSelector\n                    api={api}\n                    onCancel={() => setSelectingModel(false)}\n                    onSelectModel={(model) => {\n                        setModel(model);\n                        setSelectingModel(false);\n                    }}\n                    initialSelectedModel={model}\n                    inpainting={false}\n                />\n            )}\n            {selectingLora && (\n                <LoraModal\n                    onCancel={() => setSelectingLora(false)}\n                    onConfirm={(lora) => onAddLora(lora)}\n                />\n            )}\n        </div>\n    );\n};\n","import React, { FC, useState, useEffect } from \"react\";\nimport { Renderer } from \"./renderer\";\nimport { BaseTool, Tool } from \"./tool\";\nimport { ZoomHelper } from \"./zoomHelper\";\n\nexport class SmudgeTool extends BaseTool implements Tool {\n    private brushSize = 10;\n    private brushOpacity = 0.2;\n\n    private lastX = 0;\n    private lastY = 0;\n    private panning = false;\n    private smudging = false;\n    private _dirty = false;\n\n    set dirty(dirty: boolean) {\n        this._dirty = dirty;\n        if (this.dirtyListener) {\n            this.dirtyListener(dirty);\n        }\n    }\n\n    get dirty() {\n        return this._dirty;\n    }\n\n    private dirtyListener?: (dirty: boolean) => void;\n\n    constructor(renderer: Renderer) {\n        super(renderer, \"smudge\");\n    }\n\n    private sync() {\n        this.renderer.setCursor({\n            type: \"circle\",\n            color: \"white\",\n            radius: this.brushSize / 2,\n            x: this.lastX,\n            y: this.lastY,\n        });\n    }\n\n    updateArgs(args: any) {\n        super.updateArgs(args);\n        this.brushSize = args.brushSize || 10;\n        this.brushOpacity = args.brushOpacity || 0.2;\n        this.sync();\n    }\n\n    onMouseMove(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>): void {\n        let { x, y } = this.zoomHelper.translateMouseToCanvasCoordinates(\n            event.nativeEvent.offsetX,\n            event.nativeEvent.offsetY\n        );\n\n        if (this.panning) {\n            this.zoomHelper.onPan(event);\n        } else if (this.smudging) {\n            this.renderer.smudgeLine(\n                this.lastX,\n                this.lastY,\n                x,\n                y,\n                this.brushSize,\n                this.brushOpacity\n            );\n            this.dirty = true;\n        }\n\n        this.lastX = x;\n        this.lastY = y;\n        this.sync();\n    }\n\n    onWheel(event: WheelEvent) {\n        this.zoomHelper.onWheel(event);\n        this.sync();\n    }\n\n    onMouseDown(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        if (event.button === 0) {\n            this.smudging = true;\n            if (!this.dirty) {\n                this.renderer.copyEditImageFromBaseImage();\n            }\n            this.dirty = true;\n            let { x, y } = this.zoomHelper.translateMouseToCanvasCoordinates(\n                event.nativeEvent.offsetX,\n                event.nativeEvent.offsetY\n            );\n            this.lastX = x;\n            this.lastY = y;\n            this.sync();\n        } else if (event.button === 1) {\n            this.panning = true;\n        }\n        this.sync();\n    }\n\n    onMouseUp(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        this.smudging = false;\n        this.panning = false;\n        this.sync();\n    }\n\n    onSaveImage(listener: (encodedImage: string) => void): void {\n        this.saveListener = listener;\n    }\n\n    onDirty(listener: (dirty: boolean) => void): void {\n        this.dirtyListener = listener;\n    }\n\n    cancel() {\n        // kind of a hack, clears the selection layer\n        this.renderer.setEditImage(null);\n        this.dirty = false;\n    }\n\n    confirm() {\n        this.renderer.commitSelection();\n        const encodedImage = this.renderer.getEncodedImage(null);\n        if (encodedImage && this.saveListener) {\n            this.saveListener(encodedImage);\n        }\n        this.dirty = false;\n    }\n\n    destroy(): boolean {\n        if (this.dirty) {\n            this.renderer.commitSelection();\n        }\n        return true;\n    }\n}\n\ninterface Props {\n    renderer: Renderer;\n    tool: SmudgeTool;\n}\n\nexport const SmudgeControls: FC<Props> = ({ renderer, tool }) => {\n    const [brushSize, setBrushSize] = useState(10);\n    const [brushOpacity, setBrushOpacity] = useState(0.2);\n    const [dirty, setDirty] = useState(false);\n\n    tool.onDirty(setDirty);\n\n    useEffect(() => {\n        tool.updateArgs({\n            brushSize,\n            brushOpacity,\n        });\n    }, [brushSize, brushOpacity]);\n\n    return (\n        <div style={{ marginTop: \"16px\" }}>\n            <div className=\"form-group\">\n                <label style={{ width: \"100%\" }}>\n                    Brush size\n                    <small\n                        className=\"form-text text-muted\"\n                        style={{ float: \"right\" }}\n                    >\n                        {brushSize}px\n                    </small>\n                </label>\n                <input\n                    type=\"range\"\n                    className=\"form-control-range\"\n                    min=\"1\"\n                    max=\"100\"\n                    value={brushSize}\n                    onChange={(e) => setBrushSize(parseInt(e.target.value))}\n                />\n            </div>\n            <div className=\"form-group\">\n                <label style={{ width: \"100%\" }}>\n                    Brush opacity\n                    <small\n                        className=\"form-text text-muted\"\n                        style={{ float: \"right\" }}\n                    >\n                        {Math.round(brushOpacity * 100)}%\n                    </small>\n                </label>\n                <input\n                    type=\"range\"\n                    className=\"form-control-range\"\n                    min=\"0\"\n                    max=\"1\"\n                    step=\"0.01\"\n                    value={brushOpacity}\n                    onChange={(e) =>\n                        setBrushOpacity(parseFloat(e.target.value))\n                    }\n                />\n            </div>\n            <div\n                className=\"form-group\"\n                style={{\n                    marginTop: \"16px\",\n                    visibility: dirty ? \"visible\" : \"hidden\",\n                }}\n            >\n                <button\n                    className=\"btn btn-secondary\"\n                    onClick={() => tool.cancel()}\n                >\n                    Revert\n                </button>\n                <button\n                    className=\"btn btn-primary\"\n                    onClick={() => tool.confirm()}\n                    style={{ marginLeft: \"8px\" }}\n                >\n                    Save\n                </button>\n            </div>\n        </div>\n    );\n};\n","import React, { FC, useState, useEffect, useRef } from \"react\";\nimport axios from \"axios\";\nimport { Prompt } from \"react-router\";\n\nimport { sleep } from \"../../lib/sleep\";\nimport { defaultArgs } from \"../../components/ImagePrompt\";\nimport { Tool, BaseTool } from \"./tool\";\nimport { Renderer } from \"./renderer\";\nimport { SelectionTool } from \"./selection-tool\";\nimport { Cursor, Rect } from \"./models\";\nimport {\n    AIBrushApi,\n    CreateImageInput,\n    Image as APIImage,\n    ImageList,\n    LoraConfig,\n    StatusEnum,\n} from \"../../client\";\nimport { ZoomHelper } from \"./zoomHelper\";\nimport { getClosestAspectRatio } from \"../../lib/aspecRatios\";\nimport { getUpscaleLevel } from \"../../lib/upscale\";\nimport {\n    applyAlphaMask,\n    featherEdges,\n    ImageUtilWorker,\n    loadImageDataElement,\n} from \"../../lib/imageutil\";\nimport { ApiSocket, NOTIFICATION_IMAGE_UPDATED } from \"../../lib/apisocket\";\nimport moment from \"moment\";\nimport { ProgressBar } from \"../../components/ProgressBar\";\nimport { calculateImagesCost } from \"../../lib/credits\";\nimport { CostIndicator } from \"../../components/CostIndicator\";\nimport ModelSelector from \"../../components/ModelSelector\";\nimport { ResetToDefaultIcon } from \"../../components/ResetToDefaultIcon\";\nimport { LoraModal, SelectedLora, selectedLorasFromConfigs } from \"../../components/LoraSelector\";\nimport { LoraTriggers } from \"../../components/LoraTriggers\";\nimport { SelectedLoraTag } from \"../../components/SelectedLora\";\n\nconst anonymousClient = axios.create();\n\ntype InpaintToolState =\n    | \"select\"\n    | \"erase\"\n    | \"inpaint\"\n    | \"uploading\"\n    | \"processing\"\n    | \"confirm\"\n    | undefined;\n\ninterface ImageWithData extends APIImage {\n    data?: ImageData;\n}\n\nexport class InpaintTool extends BaseTool implements Tool {\n    private selectionTool: SelectionTool;\n    private prompt: string = \"\";\n    private negativePrompt: string = \"\";\n    private count: number = 4;\n    private brushSize: number = 10;\n    private loras: LoraConfig[] = [];\n    private _dirty = false;\n    private worker: ImageUtilWorker;\n    private idCounter = 0;\n\n    private _state: InpaintToolState;\n    private stateHandler: (state: InpaintToolState) => void = () => {};\n    private selectionControlsListener: (show: boolean) => void = () => {};\n\n    private imageData: Array<ImageData> = [];\n    private selectedImageDataIndex: number = -1;\n    private selectedImageData: ImageData | null = null;\n    private panning = false;\n    private erasing = false;\n    private progressListener?: (progress: number) => void;\n    private errorListener?: (error: string | null) => void;\n    private dirtyListener?: (dirty: boolean) => void;\n\n    set dirty(dirty: boolean) {\n        this._dirty = dirty;\n        if (this.dirtyListener) {\n            this.dirtyListener(dirty);\n        }\n    }\n\n    get dirty() {\n        return this._dirty;\n    }\n\n    private newId(): string {\n        return `${this.idCounter++}`;\n    }\n\n    onError(handler: (error: string | null) => void) {\n        this.errorListener = handler;\n    }\n\n    private notifyError(error: string | null) {\n        if (this.errorListener) {\n            this.errorListener(error);\n        }\n    }\n\n    get state(): InpaintToolState {\n        return this._state;\n    }\n\n    set state(state: InpaintToolState) {\n        if (state != this._state) {\n            if (this._state == \"select\") {\n                this.selectionTool.destroy();\n            }\n            if (this._state === \"erase\") {\n                this.renderer.setCursor(undefined);\n            }\n            this._state = state;\n            this.stateHandler(state);\n\n            if (state == \"confirm\") {\n                this.selectionControlsListener(true);\n            } else {\n                this.selectionControlsListener(false);\n                if (state == \"select\") {\n                    const imageWidth = this.renderer.getWidth();\n                    const imageHeight = this.renderer.getHeight();\n                    const selectionWidth = Math.min(\n                        imageWidth,\n                        imageHeight,\n                        512\n                    );\n                    this.selectionTool.updateArgs({\n                        selectionOverlay: {\n                            x: 0,\n                            y: 0,\n                            width: selectionWidth,\n                            height: selectionWidth,\n                        },\n                    });\n                }\n            }\n        }\n    }\n\n    selectSupported(): boolean {\n        // return !(\n        //     this.renderer.getWidth() == this.renderer.getHeight() &&\n        //     getUpscaleLevel(\n        //         this.renderer.getWidth(),\n        //         this.renderer.getHeight()\n        //     ) === 0\n        // );\n        return true;\n    }\n\n    constructor(renderer: Renderer) {\n        super(renderer, \"inpaint\");\n        this.selectionTool = new SelectionTool(renderer);\n        if (this.selectSupported()) {\n            this.state = \"select\";\n            this.selectionTool.updateArgs({\n                outpaint: this.getArgs().outpaint,\n            });\n        } else {\n            this.state = \"erase\";\n        }\n        this.worker = new ImageUtilWorker();\n    }\n\n    onMouseDown(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        if (this.state == \"select\") {\n            this.selectionTool.onMouseDown(event);\n            return;\n        }\n        let { x, y } = this.zoomHelper.translateMouseToCanvasCoordinates(\n            event.nativeEvent.offsetX,\n            event.nativeEvent.offsetY\n        );\n        if (event.button === 1) {\n            this.panning = true;\n            return;\n        }\n        if (this.state == \"erase\") {\n            this.erasing = true;\n            this.erasePoint(x, y);\n        }\n    }\n\n    private erasePoint(x: number, y: number) {\n        if (!this.dirty) {\n            this.dirty = true;\n        }\n        this.renderer.erasePoint(x, y, this.brushSize);\n        this.renderer.render();\n    }\n\n    private updateCursor(x: number, y: number) {\n        if (this.state == \"erase\") {\n            this.renderer.setCursor({\n                color: \"white\",\n                radius: this.brushSize / 2,\n                type: \"circle\",\n                x,\n                y,\n            });\n        } else {\n            this.renderer.setCursor({\n                color: \"white\",\n                radius: 10,\n                type: \"crosshairs\",\n                x,\n                y,\n            });\n        }\n    }\n\n    onMouseMove(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        let { x, y } = this.zoomHelper.translateMouseToCanvasCoordinates(\n            event.nativeEvent.offsetX,\n            event.nativeEvent.offsetY\n        );\n        this.updateCursor(x, y);\n        if (this.state == \"select\") {\n            this.selectionTool.onMouseMove(event);\n            return;\n        }\n\n        if (this.panning) {\n            this.zoomHelper.onPan(event);\n        }\n\n        if (this.erasing) {\n            this.erasePoint(x, y);\n        }\n    }\n\n    onMouseUp(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        if (this.state == \"select\") {\n            this.selectionTool.onMouseUp(event);\n        }\n        this.panning = false;\n        this.erasing = false;\n    }\n\n    onMouseLeave(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>): void {\n        if (this.state == \"select\") {\n            this.selectionTool.onMouseLeave(event);\n        }\n        this.panning = false;\n        this.erasing = false;\n    }\n\n    onWheel(event: WheelEvent) {\n        this.zoomHelper.onWheel(event);\n        let { x, y } = this.zoomHelper.translateMouseToCanvasCoordinates(\n            event.offsetX,\n            event.offsetY\n        );\n        this.updateCursor(x, y);\n    }\n\n    updateArgs(args: any) {\n        args = {\n            ...this.getArgs(),\n            ...args,\n        };\n        super.updateArgs(args);\n        this.prompt = args.prompt || \"\";\n        this.negativePrompt = args.negativePrompt || \"\";\n        this.count = args.count || 4;\n        this.brushSize = args.brushSize || 10;\n        this.loras = args.loras || [];\n\n        this.updateCursor(\n            this.renderer.getWidth() / 2,\n            this.renderer.getHeight() / 2\n        );\n        this.selectionTool.updateArgs({\n            outpaint: args.outpaint,\n        });\n    }\n\n    onChangeState(handler: (state: InpaintToolState) => void) {\n        this.stateHandler = handler;\n    }\n\n    onShowSelectionControls(listener: (show: boolean) => void): void {\n        this.selectionControlsListener = listener;\n    }\n\n    onProgress(listener: (progress: number) => void): void {\n        this.progressListener = listener;\n    }\n\n    private async loadImageData(\n        api: AIBrushApi,\n        imageId: string,\n        alphaMask: ImageData,\n        selectionOverlay: Rect\n    ): Promise<ImageData> {\n        const imageElement = await loadImageDataElement(api, imageId);\n        const canvas = document.createElement(\"canvas\");\n        canvas.width = selectionOverlay.width;\n        canvas.height = selectionOverlay.height;\n        const ctx = canvas.getContext(\"2d\");\n        if (!ctx) {\n            throw new Error(\"Failed to get canvas context\");\n        }\n        ctx.drawImage(\n            imageElement,\n            0,\n            0,\n            selectionOverlay.width,\n            selectionOverlay.height\n        );\n        const imageData = ctx.getImageData(\n            0,\n            0,\n            selectionOverlay.width,\n            selectionOverlay.height\n        );\n\n        const id = this.newId();\n        const resp = await this.worker.processRequest({\n            id,\n            alphaMode: \"alpha\",\n            alphaPixels: alphaMask.data,\n            feather: true,\n            height: this.renderer.getHeight(),\n            width: this.renderer.getWidth(),\n            pixels: imageData.data,\n            selectionOverlay,\n            featherWidth: 10,\n        });\n        const updatedImageData = new ImageData(\n            resp.pixels,\n            imageData.width,\n            imageData.height\n        );\n        // remove canvas\n        canvas.remove();\n        return updatedImageData;\n    }\n\n    cancel() {\n        if (this.selectSupported()) {\n            this.state = \"select\";\n        } else {\n            this.state = \"erase\";\n        }\n        this.renderer.snapshot();\n        this.renderer.undo();\n        this.renderer.clearRedoStack();\n        this.imageData = [];\n        this.renderer.setEditImage(null);\n        this.dirty = false;\n    }\n\n    private updateProgress(progress: number) {\n        if (this.progressListener) {\n            this.progressListener(progress);\n        }\n    }\n\n    async submit(\n        api: AIBrushApi,\n        apisocket: ApiSocket,\n        image: APIImage,\n        model: string\n    ) {\n        this.notifyError(null);\n        let selectionOverlay = this.renderer.getSelectionOverlay();\n        if (!selectionOverlay) {\n            console.error(\"No selection\");\n            return;\n        }\n\n        if (this.getArgs().outpaint) {\n            // check if selection overlay is out of renderer bounds (width, height)\n            if (\n                selectionOverlay.x < 0 ||\n                selectionOverlay.y < 0 ||\n                selectionOverlay.x + selectionOverlay.width >\n                    this.renderer.getWidth() ||\n                selectionOverlay.y + selectionOverlay.height >\n                    this.renderer.getHeight()\n            ) {\n                this.renderer.expandToOverlay();\n                selectionOverlay = this.renderer.getSelectionOverlay()!;\n            }\n        }\n\n        this.state = \"uploading\";\n        this.updateProgress(0);\n\n        // get the erased area, then undo the erase to get the original image\n        const encodedMask = this.renderer.getEncodedMask(selectionOverlay);\n        const maskData = this.renderer.getImageData(selectionOverlay);\n        // hack to restore the image\n        this.renderer.snapshot();\n        this.renderer.undo();\n        this.renderer.clearRedoStack();\n\n        const encodedImage = this.renderer.getEncodedImage(selectionOverlay);\n\n        // upload temporary images in parallel\n        const tmpImagePromises = [\n            api.createTemporaryImage(\"png\"),\n            api.createTemporaryImage(\"png\"),\n        ];\n        const tmpImages = await Promise.all(tmpImagePromises);\n        const binaryImages = [\n            Buffer.from(encodedImage!, \"base64\"),\n            Buffer.from(encodedMask!, \"base64\"),\n        ];\n        const progress = [0, 0];\n        const uploadPromises: Array<Promise<any>> = [];\n        for (let i = 0; i < tmpImages.length; i++) {\n            const tmpImage = tmpImages[i].data;\n            const binaryImage = binaryImages[i];\n            uploadPromises.push(\n                anonymousClient.put(tmpImage.upload_url, binaryImage, {\n                    headers: {\n                        \"Content-Type\": \"image/png\",\n                    },\n                    onUploadProgress: (e) => {\n                        progress[i] = e.loaded / e.total;\n                        this.updateProgress((progress[0] + progress[1]) / 2);\n                    },\n                })\n            );\n        }\n        await Promise.all(uploadPromises);\n\n        const input: CreateImageInput = defaultArgs();\n        input.label = \"\";\n        // input.encoded_image = encodedImage;\n        // input.encoded_mask = encodedMask;\n        input.tmp_image_id = tmpImages[0].data.id;\n        input.tmp_mask_id = tmpImages[1].data.id;\n        input.parent = image.id;\n        input.params.prompt = this.prompt || image.params.prompt;\n        input.params.negative_prompt =\n            this.negativePrompt || image.params.negative_prompt;\n        input.params.denoising_strength = 1;\n        input.count = this.count;\n        input.model = model;\n\n        const closestAspectRatio = getClosestAspectRatio(\n            selectionOverlay!.width,\n            selectionOverlay!.height\n        );\n        input.params.width = closestAspectRatio.width;\n        input.params.height = closestAspectRatio.height;\n        input.params.loras = this.loras;\n        input.temporary = true;\n\n        let resp: ImageList | null = null;\n\n        try {\n            resp = (await api.createImage(input)).data;\n        } catch (err) {\n            console.error(\"Error creating images\", err);\n            this.notifyError(\"Failed to create image\");\n            this.state = \"select\";\n            return;\n        }\n        this.state = \"processing\";\n        this.updateProgress(0);\n        let newImages: Array<ImageWithData> | undefined = resp.images;\n        if (!newImages || newImages.length === 0) {\n            this.state = \"select\";\n            throw new Error(\"No images returned\");\n        }\n        let completed = false;\n        let lastUpdate = moment();\n\n        const onMessage = async (msg: string) => {\n            console.log(\"inpaint onMessage\", msg);\n            const img = JSON.parse(msg) as any;\n            if (\n                img.type === NOTIFICATION_IMAGE_UPDATED &&\n                img.status === StatusEnum.Completed\n            ) {\n                lastUpdate = moment();\n                for (let i = 0; i < newImages!.length; i++) {\n                    if (newImages![i].id === img.id) {\n                        const imageData = await this.loadImageData(\n                            api,\n                            newImages![i].id,\n                            maskData!,\n                            selectionOverlay!\n                        );\n                        newImages![i].data = imageData;\n                        newImages![i].status = StatusEnum.Completed;\n                    }\n                }\n            } else if (img.status === StatusEnum.Error) {\n                for (let i = 0; i < newImages!.length; i++) {\n                    if (newImages![i].id === img.id) {\n                        newImages![i].status = StatusEnum.Error;\n                    }\n                }\n            }\n        };\n        apisocket.addMessageListener(onMessage);\n        try {\n            let startTime = moment();\n            let lastCheck = moment();\n            while (!completed) {\n                let completeCount = 0;\n                await sleep(100);\n                // poll for completion\n                for (let i = 0; i < newImages!.length; i++) {\n                    if (\n                        newImages![i].status === StatusEnum.Completed ||\n                        newImages![i].status === StatusEnum.Error\n                    ) {\n                        completeCount++;\n                        continue;\n                    }\n                }\n                this.updateProgress(completeCount / newImages!.length);\n                if (completeCount === newImages!.length) {\n                    completed = true;\n                    continue;\n                }\n\n                // fallback if sockets don't catch one\n                if (moment().diff(lastCheck, \"seconds\") > 10) {\n                    // get list of ids that aren't completed and batch get them.\n                    const pendingIds = newImages\n                        .filter(\n                            (img) =>\n                                img.status === StatusEnum.Pending ||\n                                img.status === StatusEnum.Processing\n                        )\n                        .map((img) => img.id);\n                    console.log(\"Checking pending images\", pendingIds);\n                    const updatedImagesResult = await api.batchGetImages(\n                        undefined,\n                        {\n                            ids: pendingIds,\n                        }\n                    );\n                    const updatedImages = updatedImagesResult.data.images;\n                    const byId = updatedImages!.reduce((acc, img) => {\n                        acc[img.id] = img;\n                        return acc;\n                    }, {} as Record<string, APIImage>);\n                    for (let i = 0; i < newImages!.length; i++) {\n                        if (\n                            newImages![i].status === StatusEnum.Pending ||\n                            newImages![i].status === StatusEnum.Processing\n                        ) {\n                            const updated = byId[newImages![i].id];\n                            if (updated) {\n                                newImages![i].status = updated.status;\n                                if (updated.status === StatusEnum.Completed) {\n                                    lastUpdate = moment();\n                                    const imageData = await this.loadImageData(\n                                        api,\n                                        newImages![i].id,\n                                        maskData!,\n                                        selectionOverlay!\n                                    );\n                                    newImages![i].data = imageData;\n                                }\n                            }\n                        }\n                    }\n                    lastCheck = moment();\n                }\n                // timeout of 2 minutes\n                if (\n                    (lastUpdate.isAfter(startTime) &&\n                        moment().diff(lastUpdate, \"seconds\") > 30) ||\n                    moment().diff(startTime, \"minutes\") > 2\n                ) {\n                    completed = true;\n                }\n            }\n        } finally {\n            apisocket.removeMessageListener(onMessage);\n        }\n\n        // sort images by score descending\n        newImages!.sort((a, b) => {\n            return b.score - a.score;\n        });\n        newImages = newImages!.filter((img) => {\n            return img.status === StatusEnum.Completed;\n        });\n\n        this.imageData = [];\n        for (let i = 0; i < newImages!.length; i++) {\n            if (newImages![i].data) {\n                this.imageData.push(newImages![i].data as ImageData);\n            }\n        }\n        if (this.imageData.length === 0) {\n            this.state = \"select\";\n            this.notifyError(\"No images returned\");\n            return;\n        }\n        this.renderer.setEditImage(this.imageData[0]);\n        this.selectedImageDataIndex = 0;\n        this.selectedImageData = this.imageData[0];\n        this.state = \"confirm\";\n    }\n\n    onDirty(listener: (dirty: boolean) => void): void {\n        this.dirtyListener = listener;\n    }\n\n    select(direction: \"left\" | \"right\") {\n        if (direction == \"left\") {\n            this.selectedImageDataIndex--;\n            if (this.selectedImageDataIndex < -1) {\n                this.selectedImageDataIndex = this.imageData.length - 1;\n            }\n        }\n        if (direction == \"right\") {\n            this.selectedImageDataIndex++;\n            if (this.selectedImageDataIndex >= this.imageData.length) {\n                this.selectedImageDataIndex = -1;\n            }\n        }\n        if (this.selectedImageDataIndex === -1) {\n            this.selectedImageData = null;\n        } else {\n            this.selectedImageData =\n                this.imageData[this.selectedImageDataIndex];\n        }\n        this.renderer.setEditImage(this.selectedImageData);\n    }\n\n    onSaveImage(listener: (encodedImage: string, args?: any) => void): void {\n        this.saveListener = listener;\n    }\n\n    confirm() {\n        this.renderer.commitSelection();\n\n        this.imageData = [];\n        const encodedImage = this.renderer.getEncodedImage(null);\n        if (encodedImage && this.saveListener) {\n            this.saveListener(encodedImage, {\n                phrases: [this.prompt],\n                negative_phrases: [this.negativePrompt],\n                selection_overlay: this.renderer.getSelectionOverlay(),\n            });\n        }\n        this.dirty = false;\n        if (this.selectSupported()) {\n            this.state = \"select\";\n        } else {\n            this.state = \"erase\";\n        }\n    }\n\n    destroy(): boolean {\n        if (this.dirty) {\n            if (!window.confirm(\"Discard changes?\")) {\n                return false;\n            }\n        }\n        this.renderer.setCursor(undefined);\n        this.renderer.setEditImage(null);\n        this.worker.destroy();\n        return true;\n    }\n}\n\ninterface ControlsProps {\n    api: AIBrushApi;\n    apisocket: ApiSocket;\n    image: APIImage;\n    renderer: Renderer;\n    tool: InpaintTool;\n}\n\nexport const InpaintControls: FC<ControlsProps> = ({\n    api,\n    apisocket,\n    image,\n    renderer,\n    tool,\n}) => {\n    const [count, setCount] = useState(4);\n    const [prompt, setPrompt] = useState(image.params.prompt || \"\");\n    const [negativePrompt, setNegativePrompt] = useState(\n        image.params.negative_prompt || \"\"\n    );\n    const [state, setState] = useState<InpaintToolState>(tool.state);\n    const [progress, setProgress] = useState(0);\n    const [error, setError] = useState<string | null>(null);\n    const [brushSize, setBrushSize] = useState(10);\n    const [dirty, setDirty] = useState(false);\n    const [outpaint, setoutpaint] = useState<boolean | undefined>(\n        tool.getArgs().outpaint\n    );\n    const [model, setModel] = useState(\"Deliberate Inpainting\");\n    const [selectingModel, setSelectingModel] = useState(false);\n\n    const [selectingLora, setSelectingLora] = useState<boolean>(false);\n    const [selectedLoras, setSelectedLoras] = useState<SelectedLora[]>([]);\n\n    useEffect(() => {\n        tool.updateArgs({\n            brushSize,\n        });\n    }, [brushSize]);\n\n    useEffect(() => {\n        if (image.params.loras && image.params.loras.length > 0) {\n            selectedLorasFromConfigs(image.params.loras).then((selected) => {\n                setSelectedLoras(selected);\n            });\n        } else {\n            setSelectedLoras([]);\n        }\n    }, [image]);\n\n    tool.onChangeState(setState);\n    tool.onProgress(setProgress);\n    tool.onError(setError);\n    tool.onDirty(setDirty);\n\n    const onAddLora = (lora: SelectedLora) => {\n        setSelectedLoras([...selectedLoras, lora]);\n        setSelectingLora(false);\n    };\n\n    const onRemoveLora = (lora: SelectedLora) => {\n        const updated = selectedLoras.filter(\n            (selectedLora) => selectedLora.config.name !== lora.config.name\n        )\n        setSelectedLoras(updated);\n    };\n\n    const onAddTrigger = (trigger: string) => {\n        const parts = [prompt];\n        if (prompt.length > 0 && !prompt.endsWith(\",\")) {\n            parts.push(\", \");\n        }\n        parts.push(trigger);\n        setPrompt(parts.join(\"\"));\n    };\n\n    const onSelectModel = (model: string) => {\n        setModel(model);\n        setSelectingModel(false);\n    };\n\n    if (state === \"uploading\" || state === \"processing\") {\n        return (\n            <div style={{ marginTop: \"16px\" }}>\n                <i className=\"fa fa-spinner fa-spin\"></i>&nbsp;{\" \"}\n                {state === \"uploading\" ? \"Uploading...\" : \"Inpainting...\"}\n                <br />\n                <ProgressBar progress={progress} />\n            </div>\n        );\n    }\n    return (\n        <div\n            style={{\n                marginTop: \"16px\",\n                marginBottom: \"8px\",\n                marginLeft: \"16px\",\n            }}\n        >\n            {error && (\n                <div className=\"alert alert-danger\" role=\"alert\">\n                    {/* dismiss button */}\n                    <button\n                        type=\"button\"\n                        className=\"close\"\n                        data-dismiss=\"alert\"\n                        aria-label=\"Close\"\n                        onClick={() => setError(null)}\n                    >\n                        <span aria-hidden=\"true\">&times;</span>\n                    </button>\n                    {error}\n                </div>\n            )}\n            {state === \"select\" && (\n                <>\n                    <p>\n                        {/* info icon */}\n                        <i className=\"fa fa-info-circle\"></i>&nbsp; Move the\n                        selection rectangle to the area that you want to\n                        inpaint. For outpainting, try zooming out.\n                    </p>\n                    <div className=\"form-group\">\n                        {/* allow outpaint checkbox */}\n                        <div className=\"form-check\">\n                            <input\n                                className=\"form-check-input\"\n                                type=\"checkbox\"\n                                id=\"allowoutpaint\"\n                                checked={!!outpaint}\n                                onChange={(e) => {\n                                    setoutpaint(e.target.checked);\n                                    tool.updateArgs({\n                                        outpaint: e.target.checked,\n                                    });\n                                }}\n                            />\n                            <label\n                                className=\"form-check-label\"\n                                htmlFor=\"allowoutpaint\"\n                            >\n                                Allow outpainting\n                            </label>\n                        </div>\n                    </div>\n                </>\n            )}\n\n            {state === \"erase\" && (\n                <>\n                    <p>\n                        {/* info icon */}\n                        <i className=\"fa fa-info-circle\"></i>&nbsp; Erase the\n                        area that you want to inpaint.\n                    </p>\n                    <div className=\"form-group\">\n                        <label style={{ width: \"100%\" }}>\n                            Brush size\n                            <small\n                                className=\"form-text text-muted\"\n                                style={{ float: \"right\" }}\n                            >\n                                {brushSize}px\n                            </small>\n                        </label>\n                        <input\n                            type=\"range\"\n                            className=\"form-control-range\"\n                            min=\"1\"\n                            max=\"100\"\n                            value={brushSize}\n                            onChange={(e) =>\n                                setBrushSize(parseInt(e.target.value))\n                            }\n                        />\n                    </div>\n                </>\n            )}\n\n            {state === \"inpaint\" && (\n                <>\n                    <p>\n                        {/* info icon */}\n                        <i className=\"fa fa-info-circle\"></i>&nbsp; Confirm the\n                        parameters below and continue\n                    </p>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"prompt\">\n                            Prompt&nbsp;\n                            <ResetToDefaultIcon onClick={() => setPrompt(image.params.prompt || \"\")} />\n                        </label>\n                        <input\n                            type=\"text\"\n                            className=\"form-control\"\n                            id=\"prompt\"\n                            value={prompt}\n                            onChange={(e) => {\n                                setPrompt(e.target.value);\n                            }}\n                        />\n                        <small className=\"form-text text-muted\">\n                            Customize the text prompt here\n                        </small>\n                    </div>\n                    {selectedLoras.length > 0 && (\n                        <LoraTriggers\n                            prompt={prompt}\n                            selectedLoras={selectedLoras}\n                            onAddTrigger={onAddTrigger}\n                        />\n                    )}\n                    {/* negative prompt */}\n                    <div className=\"form-group\">\n                        <label htmlFor=\"negativeprompt\">\n                            Negative prompt&nbsp;\n                            <ResetToDefaultIcon onClick={() => setNegativePrompt(image.params.negative_prompt || \"\")} />\n                        </label>\n                        <input\n                            type=\"text\"\n                            className=\"form-control\"\n                            value={negativePrompt}\n                            onChange={(e) => {\n                                setNegativePrompt(e.target.value);\n                            }}\n                        />\n                        <small className=\"form-text text-muted\">\n                            Customize the negative text prompt here\n                        </small>\n                    </div>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"count\">Count: {count}</label>\n                        <input\n                            type=\"range\"\n                            className=\"form-control-range\"\n                            id=\"count\"\n                            min=\"1\"\n                            max=\"10\"\n                            step=\"1\"\n                            value={count}\n                            onChange={(e) => {\n                                setCount(parseInt(e.target.value));\n                            }}\n                        />\n                        <small className=\"form-text text-muted\">\n                            Number of inpaint options\n                        </small>\n                    </div>\n                    {/* select model dropdown */}\n                    {/* options: stable_diffusion_inpainting, \"Epic Diffusion\", \"Deliberate\" */}\n                    <div className=\"form-group\">\n                        <label htmlFor=\"model\">Model</label>\n                        <div>\n                            <button\n                                type=\"button\"\n                                className=\"btn btn-secondary light-button\"\n                                onClick={() => setSelectingModel(true)}\n                            >\n                                {model}&nbsp;\n                                <i className=\"fas fa-caret-down\"></i>\n                            </button>\n                        </div>\n                        <small className=\"form-text text-muted\">\n                            Select the inpaint model\n                        </small>\n                    </div>\n                    <div className=\"form-group\">\n                        {/* loras */}\n                        <label htmlFor=\"loras\">Loras</label>\n                        <div>\n                            {selectedLoras.map((lora) => (\n                                <SelectedLoraTag\n                                    key={lora.lora.name}\n                                    lora={lora}\n                                    onRemove={(lora) => onRemoveLora(lora)}\n                                />\n                            ))}\n                            {/* add lora button */}\n                            {selectedLoras.length < 5 && (\n                                <button\n                                    type=\"button\"\n                                    className=\"btn btn-secondary light-button\"\n                                    style={{ marginLeft: \"8px\" }}\n                                    onClick={() => setSelectingLora(true)}\n                                >\n                                    <i className=\"fas fa-plus\"></i>&nbsp;Add\n                                    Lora\n                                </button>\n                            )}\n                        </div>\n                    </div>\n                    <div className=\"form-group\">\n                        <CostIndicator imagesCost={count} />\n                    </div>\n                </>\n            )}\n\n            {state === \"confirm\" && (\n                <>\n                    <p>\n                        Use the <i className=\"fa fa-arrow-left\"></i> and{\" \"}\n                        <i className=\"fa fa-arrow-right\"></i> buttons to\n                        navigate between the inpaint options\n                    </p>\n                </>\n            )}\n\n            <div className=\"form-group\">\n                {(dirty ||\n                    state === \"confirm\" ||\n                    (state == \"erase\" && tool.selectSupported()) ||\n                    state == \"inpaint\") && (\n                    <button\n                        style={{ marginRight: \"8px\" }}\n                        className=\"btn btn-primary btn-sm\"\n                        onClick={() => {\n                            tool.cancel();\n                        }}\n                    >\n                        {/* cancel icon */}\n                        <i className=\"fa fa-times\"></i>&nbsp; Revert\n                    </button>\n                )}\n\n                {state === \"confirm\" && (\n                    <>\n                        <button\n                            className=\"btn btn-primary btn-sm\"\n                            onClick={() => tool.confirm()}\n                            style={{ marginRight: \"8px\" }}\n                        >\n                            {/* save icon */}\n                            <i className=\"fa fa-save\"></i>&nbsp; Save\n                        </button>\n                    </>\n                )}\n                {state == \"select\" && (\n                    <button\n                        style={{ marginRight: \"8px\" }}\n                        type=\"button\"\n                        className=\"btn btn-primary btn-sm\"\n                        onClick={() => (tool.state = \"erase\")}\n                    >\n                        <i className=\"fa fa-eraser\"></i>&nbsp; Continue\n                    </button>\n                )}\n                {state == \"erase\" && (\n                    <button\n                        style={{ marginRight: \"8px\" }}\n                        type=\"button\"\n                        className=\"btn btn-primary btn-sm\"\n                        onClick={() => (tool.state = \"inpaint\")}\n                    >\n                        <i className=\"fa fa-paint-brush\"></i>&nbsp; Continue\n                    </button>\n                )}\n                {state === \"inpaint\" && (\n                    <button\n                        style={{ marginRight: \"8px\" }}\n                        className=\"btn btn-primary btn-sm\"\n                        onClick={() => {\n                            tool.updateArgs({\n                                count,\n                                prompt,\n                                negativePrompt,\n                            });\n                            tool.submit(api, apisocket, image, model);\n                        }}\n                    >\n                        {/* paint icon */}\n                        <i className=\"fa fa-paint-brush\"></i>&nbsp; Inpaint\n                    </button>\n                )}\n            </div>\n            <Prompt\n                when={dirty}\n                message=\"Are you sure you want to leave? Your changes will be lost.\"\n            />\n            {selectingModel && (\n                <ModelSelector\n                    api={api}\n                    onCancel={() => setSelectingModel(false)}\n                    onSelectModel={onSelectModel}\n                    initialSelectedModel={model}\n                    inpainting={true}\n                />\n            )}\n            {selectingLora && (\n                <LoraModal\n                    onCancel={() => setSelectingLora(false)}\n                    onConfirm={(lora) => onAddLora(lora)}\n                />\n            )}\n        </div>\n    );\n};\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * AIBrush API\n * Orchestration backend for AI Brush\n *\n * The version of the OpenAPI document: 1.0.0\n * Contact: admin@aibrush.art\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport { Configuration } from './configuration';\nimport globalAxios, { AxiosPromise, AxiosInstance } from 'axios';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';\n\n/**\n * \n * @export\n * @interface AddMetricItem\n */\nexport interface AddMetricItem {\n    /**\n     * \n     * @type {string}\n     * @memberof AddMetricItem\n     */\n    name: string;\n    /**\n     * \n     * @type {number}\n     * @memberof AddMetricItem\n     */\n    value: number;\n    /**\n     * \n     * @type {string}\n     * @memberof AddMetricItem\n     */\n    type: AddMetricItemTypeEnum;\n    /**\n     * \n     * @type {Array<MetricAttribute>}\n     * @memberof AddMetricItem\n     */\n    attributes: Array<MetricAttribute>;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum AddMetricItemTypeEnum {\n    Gauge = 'gauge',\n    Count = 'count'\n}\n\n/**\n * \n * @export\n * @interface AddMetricsInput\n */\nexport interface AddMetricsInput {\n    /**\n     * \n     * @type {Array<AddMetricItem>}\n     * @memberof AddMetricsInput\n     */\n    metrics: Array<AddMetricItem>;\n}\n/**\n * \n * @export\n * @interface AssetsUrl\n */\nexport interface AssetsUrl {\n    /**\n     * \n     * @type {string}\n     * @memberof AssetsUrl\n     */\n    assets_url: string;\n}\n/**\n * \n * @export\n * @interface BatchGetImagesInput\n */\nexport interface BatchGetImagesInput {\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof BatchGetImagesInput\n     */\n    ids: Array<string>;\n}\n/**\n * \n * @export\n * @interface CreateDepositCodeInput\n */\nexport interface CreateDepositCodeInput {\n    /**\n     * \n     * @type {number}\n     * @memberof CreateDepositCodeInput\n     */\n    amount: number;\n}\n/**\n * \n * @export\n * @interface CreateImageInput\n */\nexport interface CreateImageInput {\n    /**\n     * \n     * @type {StatusEnum}\n     * @memberof CreateImageInput\n     */\n    status?: StatusEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateImageInput\n     */\n    label?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateImageInput\n     */\n    parent?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateImageInput\n     */\n    encoded_image?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateImageInput\n     */\n    encoded_mask?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateImageInput\n     */\n    tmp_image_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateImageInput\n     */\n    tmp_jpg_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateImageInput\n     */\n    tmp_mask_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateImageInput\n     */\n    tmp_thumbnail_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateImageInput\n     */\n    model: string;\n    /**\n     * \n     * @type {ImageParams}\n     * @memberof CreateImageInput\n     */\n    params: ImageParams;\n    /**\n     * \n     * @type {number}\n     * @memberof CreateImageInput\n     */\n    count: number;\n    /**\n     * \n     * @type {boolean}\n     * @memberof CreateImageInput\n     */\n    nsfw?: boolean;\n    /**\n     * \n     * @type {boolean}\n     * @memberof CreateImageInput\n     */\n    temporary?: boolean;\n}\n/**\n * \n * @export\n * @interface CreateStripeSessionInput\n */\nexport interface CreateStripeSessionInput {\n    /**\n     * \n     * @type {string}\n     * @memberof CreateStripeSessionInput\n     */\n    product_id: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateStripeSessionInput\n     */\n    success_url: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateStripeSessionInput\n     */\n    cancel_url: string;\n}\n/**\n * \n * @export\n * @interface Credits\n */\nexport interface Credits {\n    /**\n     * \n     * @type {number}\n     * @memberof Credits\n     */\n    free_credits: number;\n    /**\n     * \n     * @type {number}\n     * @memberof Credits\n     */\n    paid_credits: number;\n}\n/**\n * \n * @export\n * @interface DepositCode\n */\nexport interface DepositCode {\n    /**\n     * \n     * @type {string}\n     * @memberof DepositCode\n     */\n    code: string;\n    /**\n     * \n     * @type {number}\n     * @memberof DepositCode\n     */\n    amount: number;\n}\n/**\n * \n * @export\n * @interface DepositRequest\n */\nexport interface DepositRequest {\n    /**\n     * Amount in credits\n     * @type {number}\n     * @memberof DepositRequest\n     */\n    amount: number;\n}\n/**\n * \n * @export\n * @interface DiscordLogin\n */\nexport interface DiscordLogin {\n    /**\n     * \n     * @type {string}\n     * @memberof DiscordLogin\n     */\n    code: string;\n}\n/**\n * \n * @export\n * @interface FeatureList\n */\nexport interface FeatureList {\n    /**\n     * \n     * @type {string}\n     * @memberof FeatureList\n     */\n    terms_uri?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof FeatureList\n     */\n    privacy_uri?: string;\n}\n/**\n * \n * @export\n * @interface GlobalSettings\n */\nexport interface GlobalSettings {\n    /**\n     * \n     * @type {string}\n     * @memberof GlobalSettings\n     */\n    settings_key: string;\n    /**\n     * \n     * @type {object}\n     * @memberof GlobalSettings\n     */\n    settings_json: object;\n}\n/**\n * \n * @export\n * @interface Healthcheck\n */\nexport interface Healthcheck {\n    /**\n     * \n     * @type {string}\n     * @memberof Healthcheck\n     */\n    status?: HealthcheckStatusEnum;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum HealthcheckStatusEnum {\n    Ok = 'ok'\n}\n\n/**\n * \n * @export\n * @interface Image\n */\nexport interface Image {\n    /**\n     * \n     * @type {string}\n     * @memberof Image\n     */\n    id: string;\n    /**\n     * \n     * @type {number}\n     * @memberof Image\n     */\n    created_at: number;\n    /**\n     * \n     * @type {string}\n     * @memberof Image\n     */\n    created_by: string;\n    /**\n     * \n     * @type {number}\n     * @memberof Image\n     */\n    updated_at: number;\n    /**\n     * \n     * @type {ImageParams}\n     * @memberof Image\n     */\n    params: ImageParams;\n    /**\n     * \n     * @type {string}\n     * @memberof Image\n     */\n    label: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Image\n     */\n    parent: string;\n    /**\n     * \n     * @type {number}\n     * @memberof Image\n     */\n    score: number;\n    /**\n     * \n     * @type {number}\n     * @memberof Image\n     */\n    negative_score: number;\n    /**\n     * \n     * @type {StatusEnum}\n     * @memberof Image\n     */\n    status: StatusEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof Image\n     */\n    model: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof Image\n     */\n    nsfw: boolean;\n    /**\n     * \n     * @type {boolean}\n     * @memberof Image\n     */\n    temporary: boolean;\n    /**\n     * \n     * @type {number}\n     * @memberof Image\n     */\n    deleted_at?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof Image\n     */\n    error?: string;\n}\n/**\n * \n * @export\n * @interface ImageList\n */\nexport interface ImageList {\n    /**\n     * \n     * @type {Array<Image>}\n     * @memberof ImageList\n     */\n    images?: Array<Image>;\n}\n/**\n * \n * @export\n * @interface ImageParams\n */\nexport interface ImageParams {\n    /**\n     * \n     * @type {string}\n     * @memberof ImageParams\n     */\n    prompt?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof ImageParams\n     */\n    steps?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof ImageParams\n     */\n    negative_prompt?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof ImageParams\n     */\n    width?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof ImageParams\n     */\n    height?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof ImageParams\n     */\n    denoising_strength?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof ImageParams\n     */\n    cfg_scale?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof ImageParams\n     */\n    seed?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ImageParams\n     */\n    controlnet_type?: ImageParamsControlnetTypeEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof ImageParams\n     */\n    augmentation?: ImageParamsAugmentationEnum;\n    /**\n     * \n     * @type {Array<LoraConfig>}\n     * @memberof ImageParams\n     */\n    loras?: Array<LoraConfig>;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum ImageParamsControlnetTypeEnum {\n    Canny = 'canny',\n    Hed = 'hed',\n    Depth = 'depth',\n    Normal = 'normal',\n    Openpose = 'openpose',\n    Seg = 'seg',\n    Scribble = 'scribble',\n    Fakescribbles = 'fakescribbles',\n    Hough = 'hough'\n}\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum ImageParamsAugmentationEnum {\n    FaceRestore = 'face_restore',\n    RemoveBackground = 'remove_background',\n    Upscale = 'upscale'\n}\n\n/**\n * \n * @export\n * @interface ImageUrls\n */\nexport interface ImageUrls {\n    /**\n     * \n     * @type {string}\n     * @memberof ImageUrls\n     */\n    init_image_url?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ImageUrls\n     */\n    image_url?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ImageUrls\n     */\n    mask_url?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ImageUrls\n     */\n    thumbnail_url?: string;\n}\n/**\n * \n * @export\n * @interface InviteCode\n */\nexport interface InviteCode {\n    /**\n     * \n     * @type {string}\n     * @memberof InviteCode\n     */\n    id?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof InviteCode\n     */\n    created_at?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof InviteCode\n     */\n    created_by?: string;\n}\n/**\n * \n * @export\n * @interface IsAdminResponse\n */\nexport interface IsAdminResponse {\n    /**\n     * \n     * @type {boolean}\n     * @memberof IsAdminResponse\n     */\n    is_admin?: boolean;\n}\n/**\n * \n * @export\n * @interface LoginInput\n */\nexport interface LoginInput {\n    /**\n     * \n     * @type {string}\n     * @memberof LoginInput\n     */\n    email?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof LoginInput\n     */\n    invite_code?: string;\n}\n/**\n * \n * @export\n * @interface LoginResult\n */\nexport interface LoginResult {\n    /**\n     * \n     * @type {string}\n     * @memberof LoginResult\n     */\n    accessToken?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof LoginResult\n     */\n    refreshToken?: string;\n}\n/**\n * \n * @export\n * @interface LoraConfig\n */\nexport interface LoraConfig {\n    /**\n     * \n     * @type {string}\n     * @memberof LoraConfig\n     */\n    name: string;\n    /**\n     * \n     * @type {number}\n     * @memberof LoraConfig\n     */\n    strength: number;\n}\n/**\n * \n * @export\n * @interface MetricAttribute\n */\nexport interface MetricAttribute {\n    /**\n     * \n     * @type {string}\n     * @memberof MetricAttribute\n     */\n    name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof MetricAttribute\n     */\n    value?: string;\n}\n/**\n * \n * @export\n * @interface Order\n */\nexport interface Order {\n    /**\n     * \n     * @type {string}\n     * @memberof Order\n     */\n    id: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Order\n     */\n    created_by: string;\n    /**\n     * \n     * @type {number}\n     * @memberof Order\n     */\n    created_at: number;\n    /**\n     * \n     * @type {number}\n     * @memberof Order\n     */\n    ends_at: number;\n    /**\n     * \n     * @type {boolean}\n     * @memberof Order\n     */\n    is_active: boolean;\n    /**\n     * \n     * @type {number}\n     * @memberof Order\n     */\n    gpu_count: number;\n    /**\n     * \n     * @type {number}\n     * @memberof Order\n     */\n    amount_paid_cents: number;\n}\n/**\n * \n * @export\n * @interface RefreshLoginInput\n */\nexport interface RefreshLoginInput {\n    /**\n     * \n     * @type {string}\n     * @memberof RefreshLoginInput\n     */\n    refreshToken?: string;\n}\n/**\n * \n * @export\n * @interface StableDiffusionModel\n */\nexport interface StableDiffusionModel {\n    /**\n     * The name of the model\n     * @type {string}\n     * @memberof StableDiffusionModel\n     */\n    name: string;\n    /**\n     * The baseline model used\n     * @type {string}\n     * @memberof StableDiffusionModel\n     */\n    baseline: string;\n    /**\n     * The type of the model (e.g., ckpt)\n     * @type {string}\n     * @memberof StableDiffusionModel\n     */\n    type: string;\n    /**\n     * A short description of the model\n     * @type {string}\n     * @memberof StableDiffusionModel\n     */\n    description: string;\n    /**\n     * Tags associated with the model\n     * @type {Array<string>}\n     * @memberof StableDiffusionModel\n     */\n    tags: Array<string>;\n    /**\n     * A list of URIs for showcase images\n     * @type {Array<string>}\n     * @memberof StableDiffusionModel\n     */\n    showcases: Array<string>;\n    /**\n     * The version of the model\n     * @type {string}\n     * @memberof StableDiffusionModel\n     */\n    version: string;\n    /**\n     * The style of the model (e.g., anime, furry)\n     * @type {string}\n     * @memberof StableDiffusionModel\n     */\n    style: string;\n    /**\n     * Whether the model is Not Safe For Work (NSFW)\n     * @type {boolean}\n     * @memberof StableDiffusionModel\n     */\n    nsfw: boolean;\n    /**\n     * Whether to download all model files\n     * @type {boolean}\n     * @memberof StableDiffusionModel\n     */\n    download_all: boolean;\n    /**\n     * Configuration information for the model\n     * @type {object}\n     * @memberof StableDiffusionModel\n     */\n    config: object;\n    /**\n     * Whether the model is available for use\n     * @type {boolean}\n     * @memberof StableDiffusionModel\n     */\n    available: boolean;\n    /**\n     * Whether the model is an inpainting model\n     * @type {boolean}\n     * @memberof StableDiffusionModel\n     */\n    inpainting: boolean;\n}\n/**\n * \n * @export\n * @enum {string}\n */\n\nexport enum StatusEnum {\n    Pending = 'pending',\n    Processing = 'processing',\n    Completed = 'completed',\n    Saved = 'saved',\n    Error = 'error',\n    Deleted = 'deleted'\n}\n\n/**\n * \n * @export\n * @interface StripeSession\n */\nexport interface StripeSession {\n    /**\n     * \n     * @type {string}\n     * @memberof StripeSession\n     */\n    session_id: string;\n}\n/**\n * \n * @export\n * @interface TemporaryImage\n */\nexport interface TemporaryImage {\n    /**\n     * \n     * @type {string}\n     * @memberof TemporaryImage\n     */\n    id: string;\n    /**\n     * \n     * @type {string}\n     * @memberof TemporaryImage\n     */\n    upload_url: string;\n}\n/**\n * \n * @export\n * @interface UpdateGlobalSettingsRequest\n */\nexport interface UpdateGlobalSettingsRequest {\n    /**\n     * \n     * @type {object}\n     * @memberof UpdateGlobalSettingsRequest\n     */\n    settings_json: object;\n}\n/**\n * \n * @export\n * @interface UpdateImageInput\n */\nexport interface UpdateImageInput {\n    /**\n     * \n     * @type {string}\n     * @memberof UpdateImageInput\n     */\n    label?: string;\n    /**\n     * \n     * @type {StatusEnum}\n     * @memberof UpdateImageInput\n     */\n    status?: StatusEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof UpdateImageInput\n     */\n    encoded_image?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof UpdateImageInput\n     */\n    encoded_npy?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof UpdateImageInput\n     */\n    score?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof UpdateImageInput\n     */\n    negative_score?: number;\n    /**\n     * \n     * @type {boolean}\n     * @memberof UpdateImageInput\n     */\n    nsfw?: boolean;\n    /**\n     * \n     * @type {number}\n     * @memberof UpdateImageInput\n     */\n    deleted_at?: number | null;\n    /**\n     * \n     * @type {string}\n     * @memberof UpdateImageInput\n     */\n    error?: string;\n}\n/**\n * \n * @export\n * @interface UpsertWorkerConfigInput\n */\nexport interface UpsertWorkerConfigInput {\n    /**\n     * \n     * @type {Array<WorkerGpuConfig>}\n     * @memberof UpsertWorkerConfigInput\n     */\n    gpu_configs?: Array<WorkerGpuConfig>;\n}\n/**\n * \n * @export\n * @interface UpsertWorkerInput\n */\nexport interface UpsertWorkerInput {\n    /**\n     * \n     * @type {string}\n     * @memberof UpsertWorkerInput\n     */\n    display_name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof UpsertWorkerInput\n     */\n    status?: UpsertWorkerInputStatusEnum;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum UpsertWorkerInputStatusEnum {\n    Idle = 'idle',\n    Active = 'active'\n}\n\n/**\n * \n * @export\n * @interface User\n */\nexport interface User {\n    /**\n     * \n     * @type {string}\n     * @memberof User\n     */\n    id?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof User\n     */\n    active?: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof User\n     */\n    customer_id?: string;\n}\n/**\n * \n * @export\n * @interface VerifyLoginInput\n */\nexport interface VerifyLoginInput {\n    /**\n     * \n     * @type {string}\n     * @memberof VerifyLoginInput\n     */\n    email?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof VerifyLoginInput\n     */\n    code?: string;\n}\n/**\n * \n * @export\n * @interface Worker\n */\nexport interface Worker {\n    /**\n     * \n     * @type {string}\n     * @memberof Worker\n     */\n    id: string;\n    /**\n     * \n     * @type {number}\n     * @memberof Worker\n     */\n    created_at: number;\n    /**\n     * \n     * @type {string}\n     * @memberof Worker\n     */\n    display_name: string;\n    /**\n     * \n     * @type {number}\n     * @memberof Worker\n     */\n    last_ping?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof Worker\n     */\n    status?: WorkerStatusEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof Worker\n     */\n    login_code?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Worker\n     */\n    engine?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof Worker\n     */\n    num_gpus?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof Worker\n     */\n    cloud_instance_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Worker\n     */\n    gpu_type?: string;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum WorkerStatusEnum {\n    Idle = 'idle',\n    Active = 'active'\n}\n\n/**\n * \n * @export\n * @interface WorkerConfig\n */\nexport interface WorkerConfig {\n    /**\n     * \n     * @type {string}\n     * @memberof WorkerConfig\n     */\n    worker_id: string;\n    /**\n     * \n     * @type {Array<WorkerGpuConfig>}\n     * @memberof WorkerConfig\n     */\n    gpu_configs?: Array<WorkerGpuConfig>;\n}\n/**\n * \n * @export\n * @interface WorkerGpuConfig\n */\nexport interface WorkerGpuConfig {\n    /**\n     * \n     * @type {number}\n     * @memberof WorkerGpuConfig\n     */\n    gpu_num: number;\n    /**\n     * \n     * @type {string}\n     * @memberof WorkerGpuConfig\n     */\n    model: string;\n}\n/**\n * \n * @export\n * @interface WorkerList\n */\nexport interface WorkerList {\n    /**\n     * \n     * @type {Array<Worker>}\n     * @memberof WorkerList\n     */\n    workers?: Array<Worker>;\n}\n/**\n * \n * @export\n * @interface WorkerLoginCode\n */\nexport interface WorkerLoginCode {\n    /**\n     * \n     * @type {string}\n     * @memberof WorkerLoginCode\n     */\n    login_code: string;\n}\n\n/**\n * AIBrushApi - axios parameter creator\n * @export\n */\nexport const AIBrushApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * Add Metrics\n         * @param {AddMetricsInput} [addMetricsInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        addMetrics: async (addMetricsInput?: AddMetricsInput, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/metrics`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(addMetricsInput, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get a list of saved images by id\n         * @param {string} [fields] Comma-separated list of fields to include in the response images. For example: \\&quot;id,params,created_at\\&quot; \n         * @param {BatchGetImagesInput} [batchGetImagesInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        batchGetImages: async (fields?: string, batchGetImagesInput?: BatchGetImagesInput, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/batch-get-images`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (fields !== undefined) {\n                localVarQueryParameter['fields'] = fields;\n            }\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(batchGetImagesInput, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Create a new deposit code\n         * @param {CreateDepositCodeInput} [createDepositCodeInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createDepositCode: async (createDepositCodeInput?: CreateDepositCodeInput, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/deposit-codes`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(createDepositCodeInput, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Create a new image\n         * @param {CreateImageInput} [createImageInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createImage: async (createImageInput?: CreateImageInput, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/images`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(createImageInput, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Create a new invite code\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createInviteCode: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/invite-codes`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Create a new Stripe session\n         * @param {CreateStripeSessionInput} [createStripeSessionInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createStripeSession: async (createStripeSessionInput?: CreateStripeSessionInput, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/stripe-sessions`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(createStripeSessionInput, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Create a new temporary image\n         * @param {string} format \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createTemporaryImage: async (format: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'format' is not null or undefined\n            assertParamExists('createTemporaryImage', 'format', format)\n            const localVarPath = `/api/temporary-images`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (format !== undefined) {\n                localVarQueryParameter['format'] = format;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Delete a saved image\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteImage: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('deleteImage', 'id', id)\n            const localVarPath = `/api/images/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Log in with Discord\n         * @param {DiscordLogin} [discordLogin] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        discordLogin: async (discordLogin?: DiscordLogin, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/discord-login`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(discordLogin, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get the assets url\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getAssetsUrl: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/assets-url`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get the user\\'s credit balance\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getCredits: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/credits`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get the features\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getFeatures: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/features`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get the global settings\n         * @param {string} key \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getGlobalSettings: async (key: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'key' is not null or undefined\n            assertParamExists('getGlobalSettings', 'key', key)\n            const localVarPath = `/api/global-settings/{key}`\n                .replace(`{${\"key\"}}`, encodeURIComponent(String(key)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get a saved image by id\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getImage: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('getImage', 'id', id)\n            const localVarPath = `/api/images/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get the binary image data\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getImageData: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('getImageData', 'id', id)\n            const localVarPath = `/api/images/{id}.image.png`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get download urls for image assets\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getImageDownloadUrls: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('getImageDownloadUrls', 'id', id)\n            const localVarPath = `/api/images/{id}/download-urls`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get upload urls for image assets\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getImageUploadUrls: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('getImageUploadUrls', 'id', id)\n            const localVarPath = `/api/images/{id}/upload-urls`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get the binary mask data\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getMaskData: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('getMaskData', 'id', id)\n            const localVarPath = `/api/images/{id}.mask.png`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Get available models\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getModels: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/stable-diffusion-models`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get the binary thumbnail data\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getThumbnailData: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('getThumbnailData', 'id', id)\n            const localVarPath = `/api/images/{id}.thumbnail.png`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Healthcheck\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        healthcheck: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/healthcheck`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Check if the user is admin\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        isAdmin: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/is-admin`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get a list of saved images\n         * @param {number} [cursor] \n         * @param {string} [filter] \n         * @param {number} [limit] \n         * @param {'asc' | 'desc'} [direction] \n         * @param {string} [fields] Comma-separated list of fields to include in the response images. For example: \\&quot;id,params,created_at\\&quot; \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listImages: async (cursor?: number, filter?: string, limit?: number, direction?: 'asc' | 'desc', fields?: string, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/images`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (cursor !== undefined) {\n                localVarQueryParameter['cursor'] = cursor;\n            }\n\n            if (filter !== undefined) {\n                localVarQueryParameter['filter'] = filter;\n            }\n\n            if (limit !== undefined) {\n                localVarQueryParameter['limit'] = limit;\n            }\n\n            if (direction !== undefined) {\n                localVarQueryParameter['direction'] = direction;\n            }\n\n            if (fields !== undefined) {\n                localVarQueryParameter['fields'] = fields;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Login by email\n         * @param {LoginInput} [loginInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        login: async (loginInput?: LoginInput, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/auth/login`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(loginInput, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Redeem a deposit code\n         * @param {string} code \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        redeemDepositCode: async (code: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'code' is not null or undefined\n            assertParamExists('redeemDepositCode', 'code', code)\n            const localVarPath = `/api/deposit-codes/{code}`\n                .replace(`{${\"code\"}}`, encodeURIComponent(String(code)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Refresh Login code\n         * @param {RefreshLoginInput} [refreshLoginInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        refresh: async (refreshLoginInput?: RefreshLoginInput, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/auth/refresh`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(refreshLoginInput, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Update the global settings\n         * @param {string} key \n         * @param {UpdateGlobalSettingsRequest} [updateGlobalSettingsRequest] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateGlobalSettings: async (key: string, updateGlobalSettingsRequest?: UpdateGlobalSettingsRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'key' is not null or undefined\n            assertParamExists('updateGlobalSettings', 'key', key)\n            const localVarPath = `/api/global-settings/{key}`\n                .replace(`{${\"key\"}}`, encodeURIComponent(String(key)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(updateGlobalSettingsRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Update a saved image\n         * @param {string} id \n         * @param {UpdateImageInput} [updateImageInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateImage: async (id: string, updateImageInput?: UpdateImageInput, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('updateImage', 'id', id)\n            const localVarPath = `/api/images/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(updateImageInput, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Upload the binary image data\n         * @param {string} id \n         * @param {any} [body] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        uploadImageData: async (id: string, body?: any, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('uploadImageData', 'id', id)\n            const localVarPath = `/api/images/{id}.image.png`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'image/png';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Upload the binary thumbnail data\n         * @param {string} id \n         * @param {any} [body] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        uploadThumbnailData: async (id: string, body?: any, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('uploadThumbnailData', 'id', id)\n            const localVarPath = `/api/images/{id}.thumbnail.png`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'image/png';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Verify Login code\n         * @param {VerifyLoginInput} [verifyLoginInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        verify: async (verifyLoginInput?: VerifyLoginInput, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/auth/verify`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(verifyLoginInput, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * AIBrushApi - functional programming interface\n * @export\n */\nexport const AIBrushApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = AIBrushApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * Add Metrics\n         * @param {AddMetricsInput} [addMetricsInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async addMetrics(addMetricsInput?: AddMetricsInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.addMetrics(addMetricsInput, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get a list of saved images by id\n         * @param {string} [fields] Comma-separated list of fields to include in the response images. For example: \\&quot;id,params,created_at\\&quot; \n         * @param {BatchGetImagesInput} [batchGetImagesInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async batchGetImages(fields?: string, batchGetImagesInput?: BatchGetImagesInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImageList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.batchGetImages(fields, batchGetImagesInput, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Create a new deposit code\n         * @param {CreateDepositCodeInput} [createDepositCodeInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createDepositCode(createDepositCodeInput?: CreateDepositCodeInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DepositCode>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.createDepositCode(createDepositCodeInput, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Create a new image\n         * @param {CreateImageInput} [createImageInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createImage(createImageInput?: CreateImageInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImageList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.createImage(createImageInput, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Create a new invite code\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createInviteCode(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InviteCode>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.createInviteCode(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Create a new Stripe session\n         * @param {CreateStripeSessionInput} [createStripeSessionInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createStripeSession(createStripeSessionInput?: CreateStripeSessionInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StripeSession>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.createStripeSession(createStripeSessionInput, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Create a new temporary image\n         * @param {string} format \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createTemporaryImage(format: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TemporaryImage>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.createTemporaryImage(format, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Delete a saved image\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async deleteImage(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteImage(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Log in with Discord\n         * @param {DiscordLogin} [discordLogin] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async discordLogin(discordLogin?: DiscordLogin, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginResult>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.discordLogin(discordLogin, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get the assets url\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getAssetsUrl(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssetsUrl>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getAssetsUrl(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get the user\\'s credit balance\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getCredits(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Credits>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getCredits(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get the features\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getFeatures(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeatureList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getFeatures(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get the global settings\n         * @param {string} key \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getGlobalSettings(key: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GlobalSettings>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getGlobalSettings(key, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get a saved image by id\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getImage(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Image>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getImage(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get the binary image data\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getImageData(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getImageData(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get download urls for image assets\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getImageDownloadUrls(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImageUrls>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getImageDownloadUrls(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get upload urls for image assets\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getImageUploadUrls(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImageUrls>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getImageUploadUrls(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get the binary mask data\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getMaskData(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getMaskData(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Get available models\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getModels(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: StableDiffusionModel; }>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getModels(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get the binary thumbnail data\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getThumbnailData(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getThumbnailData(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Healthcheck\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async healthcheck(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Healthcheck>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.healthcheck(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Check if the user is admin\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async isAdmin(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IsAdminResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.isAdmin(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get a list of saved images\n         * @param {number} [cursor] \n         * @param {string} [filter] \n         * @param {number} [limit] \n         * @param {'asc' | 'desc'} [direction] \n         * @param {string} [fields] Comma-separated list of fields to include in the response images. For example: \\&quot;id,params,created_at\\&quot; \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listImages(cursor?: number, filter?: string, limit?: number, direction?: 'asc' | 'desc', fields?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImageList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.listImages(cursor, filter, limit, direction, fields, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Login by email\n         * @param {LoginInput} [loginInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async login(loginInput?: LoginInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.login(loginInput, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Redeem a deposit code\n         * @param {string} code \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async redeemDepositCode(code: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.redeemDepositCode(code, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Refresh Login code\n         * @param {RefreshLoginInput} [refreshLoginInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async refresh(refreshLoginInput?: RefreshLoginInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginResult>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.refresh(refreshLoginInput, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Update the global settings\n         * @param {string} key \n         * @param {UpdateGlobalSettingsRequest} [updateGlobalSettingsRequest] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async updateGlobalSettings(key: string, updateGlobalSettingsRequest?: UpdateGlobalSettingsRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GlobalSettings>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.updateGlobalSettings(key, updateGlobalSettingsRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Update a saved image\n         * @param {string} id \n         * @param {UpdateImageInput} [updateImageInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async updateImage(id: string, updateImageInput?: UpdateImageInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Image>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.updateImage(id, updateImageInput, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Upload the binary image data\n         * @param {string} id \n         * @param {any} [body] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async uploadImageData(id: string, body?: any, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadImageData(id, body, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Upload the binary thumbnail data\n         * @param {string} id \n         * @param {any} [body] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async uploadThumbnailData(id: string, body?: any, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadThumbnailData(id, body, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Verify Login code\n         * @param {VerifyLoginInput} [verifyLoginInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async verify(verifyLoginInput?: VerifyLoginInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginResult>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.verify(verifyLoginInput, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n    }\n};\n\n/**\n * AIBrushApi - factory interface\n * @export\n */\nexport const AIBrushApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = AIBrushApiFp(configuration)\n    return {\n        /**\n         * Add Metrics\n         * @param {AddMetricsInput} [addMetricsInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        addMetrics(addMetricsInput?: AddMetricsInput, options?: any): AxiosPromise<void> {\n            return localVarFp.addMetrics(addMetricsInput, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get a list of saved images by id\n         * @param {string} [fields] Comma-separated list of fields to include in the response images. For example: \\&quot;id,params,created_at\\&quot; \n         * @param {BatchGetImagesInput} [batchGetImagesInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        batchGetImages(fields?: string, batchGetImagesInput?: BatchGetImagesInput, options?: any): AxiosPromise<ImageList> {\n            return localVarFp.batchGetImages(fields, batchGetImagesInput, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Create a new deposit code\n         * @param {CreateDepositCodeInput} [createDepositCodeInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createDepositCode(createDepositCodeInput?: CreateDepositCodeInput, options?: any): AxiosPromise<DepositCode> {\n            return localVarFp.createDepositCode(createDepositCodeInput, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Create a new image\n         * @param {CreateImageInput} [createImageInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createImage(createImageInput?: CreateImageInput, options?: any): AxiosPromise<ImageList> {\n            return localVarFp.createImage(createImageInput, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Create a new invite code\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createInviteCode(options?: any): AxiosPromise<InviteCode> {\n            return localVarFp.createInviteCode(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Create a new Stripe session\n         * @param {CreateStripeSessionInput} [createStripeSessionInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createStripeSession(createStripeSessionInput?: CreateStripeSessionInput, options?: any): AxiosPromise<StripeSession> {\n            return localVarFp.createStripeSession(createStripeSessionInput, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Create a new temporary image\n         * @param {string} format \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createTemporaryImage(format: string, options?: any): AxiosPromise<TemporaryImage> {\n            return localVarFp.createTemporaryImage(format, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Delete a saved image\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteImage(id: string, options?: any): AxiosPromise<void> {\n            return localVarFp.deleteImage(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Log in with Discord\n         * @param {DiscordLogin} [discordLogin] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        discordLogin(discordLogin?: DiscordLogin, options?: any): AxiosPromise<LoginResult> {\n            return localVarFp.discordLogin(discordLogin, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get the assets url\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getAssetsUrl(options?: any): AxiosPromise<AssetsUrl> {\n            return localVarFp.getAssetsUrl(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get the user\\'s credit balance\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getCredits(options?: any): AxiosPromise<Credits> {\n            return localVarFp.getCredits(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get the features\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getFeatures(options?: any): AxiosPromise<FeatureList> {\n            return localVarFp.getFeatures(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get the global settings\n         * @param {string} key \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getGlobalSettings(key: string, options?: any): AxiosPromise<GlobalSettings> {\n            return localVarFp.getGlobalSettings(key, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get a saved image by id\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getImage(id: string, options?: any): AxiosPromise<Image> {\n            return localVarFp.getImage(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get the binary image data\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getImageData(id: string, options?: any): AxiosPromise<any> {\n            return localVarFp.getImageData(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get download urls for image assets\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getImageDownloadUrls(id: string, options?: any): AxiosPromise<ImageUrls> {\n            return localVarFp.getImageDownloadUrls(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get upload urls for image assets\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getImageUploadUrls(id: string, options?: any): AxiosPromise<ImageUrls> {\n            return localVarFp.getImageUploadUrls(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get the binary mask data\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getMaskData(id: string, options?: any): AxiosPromise<any> {\n            return localVarFp.getMaskData(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Get available models\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getModels(options?: any): AxiosPromise<{ [key: string]: StableDiffusionModel; }> {\n            return localVarFp.getModels(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get the binary thumbnail data\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getThumbnailData(id: string, options?: any): AxiosPromise<any> {\n            return localVarFp.getThumbnailData(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Healthcheck\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        healthcheck(options?: any): AxiosPromise<Healthcheck> {\n            return localVarFp.healthcheck(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Check if the user is admin\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        isAdmin(options?: any): AxiosPromise<IsAdminResponse> {\n            return localVarFp.isAdmin(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get a list of saved images\n         * @param {number} [cursor] \n         * @param {string} [filter] \n         * @param {number} [limit] \n         * @param {'asc' | 'desc'} [direction] \n         * @param {string} [fields] Comma-separated list of fields to include in the response images. For example: \\&quot;id,params,created_at\\&quot; \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listImages(cursor?: number, filter?: string, limit?: number, direction?: 'asc' | 'desc', fields?: string, options?: any): AxiosPromise<ImageList> {\n            return localVarFp.listImages(cursor, filter, limit, direction, fields, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Login by email\n         * @param {LoginInput} [loginInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        login(loginInput?: LoginInput, options?: any): AxiosPromise<void> {\n            return localVarFp.login(loginInput, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Redeem a deposit code\n         * @param {string} code \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        redeemDepositCode(code: string, options?: any): AxiosPromise<void> {\n            return localVarFp.redeemDepositCode(code, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Refresh Login code\n         * @param {RefreshLoginInput} [refreshLoginInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        refresh(refreshLoginInput?: RefreshLoginInput, options?: any): AxiosPromise<LoginResult> {\n            return localVarFp.refresh(refreshLoginInput, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Update the global settings\n         * @param {string} key \n         * @param {UpdateGlobalSettingsRequest} [updateGlobalSettingsRequest] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateGlobalSettings(key: string, updateGlobalSettingsRequest?: UpdateGlobalSettingsRequest, options?: any): AxiosPromise<GlobalSettings> {\n            return localVarFp.updateGlobalSettings(key, updateGlobalSettingsRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Update a saved image\n         * @param {string} id \n         * @param {UpdateImageInput} [updateImageInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateImage(id: string, updateImageInput?: UpdateImageInput, options?: any): AxiosPromise<Image> {\n            return localVarFp.updateImage(id, updateImageInput, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Upload the binary image data\n         * @param {string} id \n         * @param {any} [body] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        uploadImageData(id: string, body?: any, options?: any): AxiosPromise<void> {\n            return localVarFp.uploadImageData(id, body, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Upload the binary thumbnail data\n         * @param {string} id \n         * @param {any} [body] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        uploadThumbnailData(id: string, body?: any, options?: any): AxiosPromise<void> {\n            return localVarFp.uploadThumbnailData(id, body, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Verify Login code\n         * @param {VerifyLoginInput} [verifyLoginInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        verify(verifyLoginInput?: VerifyLoginInput, options?: any): AxiosPromise<LoginResult> {\n            return localVarFp.verify(verifyLoginInput, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * AIBrushApi - object-oriented interface\n * @export\n * @class AIBrushApi\n * @extends {BaseAPI}\n */\nexport class AIBrushApi extends BaseAPI {\n    /**\n     * Add Metrics\n     * @param {AddMetricsInput} [addMetricsInput] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public addMetrics(addMetricsInput?: AddMetricsInput, options?: any) {\n        return AIBrushApiFp(this.configuration).addMetrics(addMetricsInput, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get a list of saved images by id\n     * @param {string} [fields] Comma-separated list of fields to include in the response images. For example: \\&quot;id,params,created_at\\&quot; \n     * @param {BatchGetImagesInput} [batchGetImagesInput] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public batchGetImages(fields?: string, batchGetImagesInput?: BatchGetImagesInput, options?: any) {\n        return AIBrushApiFp(this.configuration).batchGetImages(fields, batchGetImagesInput, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Create a new deposit code\n     * @param {CreateDepositCodeInput} [createDepositCodeInput] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public createDepositCode(createDepositCodeInput?: CreateDepositCodeInput, options?: any) {\n        return AIBrushApiFp(this.configuration).createDepositCode(createDepositCodeInput, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Create a new image\n     * @param {CreateImageInput} [createImageInput] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public createImage(createImageInput?: CreateImageInput, options?: any) {\n        return AIBrushApiFp(this.configuration).createImage(createImageInput, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Create a new invite code\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public createInviteCode(options?: any) {\n        return AIBrushApiFp(this.configuration).createInviteCode(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Create a new Stripe session\n     * @param {CreateStripeSessionInput} [createStripeSessionInput] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public createStripeSession(createStripeSessionInput?: CreateStripeSessionInput, options?: any) {\n        return AIBrushApiFp(this.configuration).createStripeSession(createStripeSessionInput, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Create a new temporary image\n     * @param {string} format \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public createTemporaryImage(format: string, options?: any) {\n        return AIBrushApiFp(this.configuration).createTemporaryImage(format, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Delete a saved image\n     * @param {string} id \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public deleteImage(id: string, options?: any) {\n        return AIBrushApiFp(this.configuration).deleteImage(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Log in with Discord\n     * @param {DiscordLogin} [discordLogin] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public discordLogin(discordLogin?: DiscordLogin, options?: any) {\n        return AIBrushApiFp(this.configuration).discordLogin(discordLogin, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get the assets url\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public getAssetsUrl(options?: any) {\n        return AIBrushApiFp(this.configuration).getAssetsUrl(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get the user\\'s credit balance\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public getCredits(options?: any) {\n        return AIBrushApiFp(this.configuration).getCredits(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get the features\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public getFeatures(options?: any) {\n        return AIBrushApiFp(this.configuration).getFeatures(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get the global settings\n     * @param {string} key \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public getGlobalSettings(key: string, options?: any) {\n        return AIBrushApiFp(this.configuration).getGlobalSettings(key, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get a saved image by id\n     * @param {string} id \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public getImage(id: string, options?: any) {\n        return AIBrushApiFp(this.configuration).getImage(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get the binary image data\n     * @param {string} id \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public getImageData(id: string, options?: any) {\n        return AIBrushApiFp(this.configuration).getImageData(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get download urls for image assets\n     * @param {string} id \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public getImageDownloadUrls(id: string, options?: any) {\n        return AIBrushApiFp(this.configuration).getImageDownloadUrls(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get upload urls for image assets\n     * @param {string} id \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public getImageUploadUrls(id: string, options?: any) {\n        return AIBrushApiFp(this.configuration).getImageUploadUrls(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get the binary mask data\n     * @param {string} id \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public getMaskData(id: string, options?: any) {\n        return AIBrushApiFp(this.configuration).getMaskData(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Get available models\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public getModels(options?: any) {\n        return AIBrushApiFp(this.configuration).getModels(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get the binary thumbnail data\n     * @param {string} id \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public getThumbnailData(id: string, options?: any) {\n        return AIBrushApiFp(this.configuration).getThumbnailData(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Healthcheck\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public healthcheck(options?: any) {\n        return AIBrushApiFp(this.configuration).healthcheck(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Check if the user is admin\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public isAdmin(options?: any) {\n        return AIBrushApiFp(this.configuration).isAdmin(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get a list of saved images\n     * @param {number} [cursor] \n     * @param {string} [filter] \n     * @param {number} [limit] \n     * @param {'asc' | 'desc'} [direction] \n     * @param {string} [fields] Comma-separated list of fields to include in the response images. For example: \\&quot;id,params,created_at\\&quot; \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public listImages(cursor?: number, filter?: string, limit?: number, direction?: 'asc' | 'desc', fields?: string, options?: any) {\n        return AIBrushApiFp(this.configuration).listImages(cursor, filter, limit, direction, fields, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Login by email\n     * @param {LoginInput} [loginInput] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public login(loginInput?: LoginInput, options?: any) {\n        return AIBrushApiFp(this.configuration).login(loginInput, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Redeem a deposit code\n     * @param {string} code \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public redeemDepositCode(code: string, options?: any) {\n        return AIBrushApiFp(this.configuration).redeemDepositCode(code, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Refresh Login code\n     * @param {RefreshLoginInput} [refreshLoginInput] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public refresh(refreshLoginInput?: RefreshLoginInput, options?: any) {\n        return AIBrushApiFp(this.configuration).refresh(refreshLoginInput, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Update the global settings\n     * @param {string} key \n     * @param {UpdateGlobalSettingsRequest} [updateGlobalSettingsRequest] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public updateGlobalSettings(key: string, updateGlobalSettingsRequest?: UpdateGlobalSettingsRequest, options?: any) {\n        return AIBrushApiFp(this.configuration).updateGlobalSettings(key, updateGlobalSettingsRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Update a saved image\n     * @param {string} id \n     * @param {UpdateImageInput} [updateImageInput] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public updateImage(id: string, updateImageInput?: UpdateImageInput, options?: any) {\n        return AIBrushApiFp(this.configuration).updateImage(id, updateImageInput, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Upload the binary image data\n     * @param {string} id \n     * @param {any} [body] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public uploadImageData(id: string, body?: any, options?: any) {\n        return AIBrushApiFp(this.configuration).uploadImageData(id, body, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Upload the binary thumbnail data\n     * @param {string} id \n     * @param {any} [body] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public uploadThumbnailData(id: string, body?: any, options?: any) {\n        return AIBrushApiFp(this.configuration).uploadThumbnailData(id, body, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Verify Login code\n     * @param {VerifyLoginInput} [verifyLoginInput] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public verify(verifyLoginInput?: VerifyLoginInput, options?: any) {\n        return AIBrushApiFp(this.configuration).verify(verifyLoginInput, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n\n\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * AIBrush API\n * Orchestration backend for AI Brush\n *\n * The version of the OpenAPI document: 1.0.0\n * Contact: admin@aibrush.art\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport { Configuration } from \"./configuration\";\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport globalAxios, { AxiosPromise, AxiosInstance } from 'axios';\n\nexport const BASE_PATH = \"https://www.aibrush.art\".replace(/\\/+$/, \"\");\n\n/**\n *\n * @export\n */\nexport const COLLECTION_FORMATS = {\n    csv: \",\",\n    ssv: \" \",\n    tsv: \"\\t\",\n    pipes: \"|\",\n};\n\n/**\n *\n * @export\n * @interface RequestArgs\n */\nexport interface RequestArgs {\n    url: string;\n    options: any;\n}\n\n/**\n *\n * @export\n * @class BaseAPI\n */\nexport class BaseAPI {\n    protected configuration: Configuration | undefined;\n\n    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected axios: AxiosInstance = globalAxios) {\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = configuration.basePath || this.basePath;\n        }\n    }\n};\n\n/**\n *\n * @export\n * @class RequiredError\n * @extends {Error}\n */\nexport class RequiredError extends Error {\n    name: \"RequiredError\" = \"RequiredError\";\n    constructor(public field: string, msg?: string) {\n        super(msg);\n    }\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * AIBrush API\n * Orchestration backend for AI Brush\n *\n * The version of the OpenAPI document: 1.0.0\n * Contact: admin@aibrush.art\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport { Configuration } from \"./configuration\";\nimport { RequiredError,　RequestArgs } from \"./base\";\nimport { AxiosInstance } from 'axios';\n\n/**\n *\n * @export\n */\nexport const DUMMY_BASE_URL = 'https://example.com'\n\n/**\n *\n * @throws {RequiredError}\n * @export\n */\nexport const assertParamExists = function (functionName: string, paramName: string, paramValue: unknown) {\n    if (paramValue === null || paramValue === undefined) {\n        throw new RequiredError(paramName, `Required parameter ${paramName} was null or undefined when calling ${functionName}.`);\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setApiKeyToObject = async function (object: any, keyParamName: string, configuration?: Configuration) {\n    if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n            ? await configuration.apiKey(keyParamName)\n            : await configuration.apiKey;\n        object[keyParamName] = localVarApiKeyValue;\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setBasicAuthToObject = function (object: any, configuration?: Configuration) {\n    if (configuration && (configuration.username || configuration.password)) {\n        object[\"auth\"] = { username: configuration.username, password: configuration.password };\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setBearerAuthToObject = async function (object: any, configuration?: Configuration) {\n    if (configuration && configuration.accessToken) {\n        const accessToken = typeof configuration.accessToken === 'function'\n            ? await configuration.accessToken()\n            : await configuration.accessToken;\n        object[\"Authorization\"] = \"Bearer \" + accessToken;\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setOAuthToObject = async function (object: any, name: string, scopes: string[], configuration?: Configuration) {\n    if (configuration && configuration.accessToken) {\n        const localVarAccessTokenValue = typeof configuration.accessToken === 'function'\n            ? await configuration.accessToken(name, scopes)\n            : await configuration.accessToken;\n        object[\"Authorization\"] = \"Bearer \" + localVarAccessTokenValue;\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setSearchParams = function (url: URL, ...objects: any[]) {\n    const searchParams = new URLSearchParams(url.search);\n    for (const object of objects) {\n        for (const key in object) {\n            if (Array.isArray(object[key])) {\n                searchParams.delete(key);\n                for (const item of object[key]) {\n                    searchParams.append(key, item);\n                }\n            } else {\n                searchParams.set(key, object[key]);\n            }\n        }\n    }\n    url.search = searchParams.toString();\n}\n\n/**\n *\n * @export\n */\nexport const serializeDataIfNeeded = function (value: any, requestOptions: any, configuration?: Configuration) {\n    const nonString = typeof value !== 'string';\n    const needsSerialization = nonString && configuration && configuration.isJsonMime\n        ? configuration.isJsonMime(requestOptions.headers['Content-Type'])\n        : nonString;\n    return needsSerialization\n        ? JSON.stringify(value !== undefined ? value : {})\n        : (value || \"\");\n}\n\n/**\n *\n * @export\n */\nexport const toPathString = function (url: URL) {\n    return url.pathname + url.search + url.hash\n}\n\n/**\n *\n * @export\n */\nexport const createRequestFunction = function (axiosArgs: RequestArgs, globalAxios: AxiosInstance, BASE_PATH: string, configuration?: Configuration) {\n    return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n        const axiosRequestArgs = {...axiosArgs.options, url: (configuration?.basePath || basePath) + axiosArgs.url};\n        return axios.request(axiosRequestArgs);\n    };\n}\n","import axios from \"axios\";\nimport { AIBrushApi } from \"../client\";\nimport { Rect } from \"../pages/image-editor/models\";\n\nconst anonymousClient = axios.create();\n\nexport interface SplitResult {\n    numTilesX: number;\n    numTilesY: number;\n    tileSize: number;\n    imageWidth: number;\n    imageHeight: number;\n    tiles: ImageData[][]; // [x][y]\n}\n\nexport function convertPNGToJPG(encodedImage: string): Promise<string> {\n    return new Promise((resolve, reject) => {\n        const image = new Image();\n        image.onload = () => {\n            const canvas = document.createElement(\"canvas\");\n            try {\n                canvas.width = image.width;\n                canvas.height = image.height;\n                const ctx = canvas.getContext(\"2d\");\n                if (!ctx) {\n                    throw new Error(\"Could not get canvas context\");\n                }\n                ctx.drawImage(image, 0, 0);\n                const dataUrl = canvas.toDataURL(\"image/jpeg\");\n                resolve(dataUrl.split(\",\")[1]);\n            } finally {\n                canvas.remove();\n            }\n        };\n        image.src = `data:image/png;base64,${encodedImage}`;\n    });\n}\n\nexport function loadImageDataElement(\n    api: AIBrushApi,\n    imageId: string\n): Promise<HTMLImageElement> {\n    return new Promise((resolve, reject) => {\n        api.getImageDownloadUrls(imageId)\n            .then((urls) => {\n                anonymousClient\n                    .get(urls.data.image_url!, {\n                        responseType: \"arraybuffer\",\n                    })\n                    .then((resp) => {\n                        const binaryImageData = Buffer.from(\n                            resp.data,\n                            \"binary\"\n                        );\n                        const base64ImageData =\n                            binaryImageData.toString(\"base64\");\n                        const src = `data:image/png;base64,${base64ImageData}`;\n                        const imageElement = new Image();\n                        imageElement.src = src;\n                        imageElement.onload = () => {\n                            resolve(imageElement);\n                        };\n                    })\n                    .catch((err) => reject(err));\n            })\n            .catch((err) => reject(err));\n    });\n}\n\n// split image for individual upscales\nexport function splitImage(initImage: ImageData) {\n    // Check if the image area is larger than 512x512\n    if (initImage.width * initImage.height > 512 * 512) {\n        // use a temporary canvas to split the image\n        const canvas = document.createElement(\"canvas\");\n        try {\n            canvas.width = initImage.width;\n            canvas.height = initImage.height;\n            const ctx = canvas.getContext(\"2d\");\n            if (!ctx) {\n                throw new Error(\"Could not get canvas context\");\n            }\n            ctx.putImageData(initImage, 0, 0);\n            const tile_size = Math.min(initImage.width, initImage.height, 512);\n            // split the image into 512x512 tiles\n            // they need to overlap by at least 32 pixels\n            // so that the edges can be merged\n\n            // calculate the number of tiles in each dimension\n            const num_tiles_x = Math.ceil(initImage.width / (tile_size - 32));\n            const num_tiles_y = Math.ceil(initImage.height / (tile_size - 32));\n\n            const tiles: ImageData[][] = [];\n            for (let x = 0; x < num_tiles_x; x++) {\n                tiles.push([]);\n                for (let y = 0; y < num_tiles_y; y++) {\n                    // calculate the bounding box of the tile\n                    const x0 = x * (tile_size - 32);\n                    const y0 = y * (tile_size - 32);\n                    const x1 = Math.min(x0 + tile_size, initImage.width);\n                    const y1 = Math.min(y0 + tile_size, initImage.height);\n                    // crop the tile\n                    const tile = ctx.getImageData(x0, y0, x1 - x0, y1 - y0);\n                    tiles[x].push(tile);\n                }\n            }\n            return {\n                numTilesX: num_tiles_x,\n                numTilesY: num_tiles_y,\n                tileSize: tile_size,\n                imageWidth: initImage.width,\n                imageHeight: initImage.height,\n                tiles,\n            };\n        } finally {\n            canvas.remove();\n        }\n    } else {\n        return null;\n    }\n}\n\n// merge the tiles back into a single image\n// tiles should be 2x original size\nexport function mergeTiles(splitResult: SplitResult): ImageData {\n    // create a new image\n    const canvas = document.createElement(\"canvas\");\n    try {\n        canvas.width = splitResult.imageWidth;\n        canvas.height = splitResult.imageHeight;\n        const ctx = canvas.getContext(\"2d\");\n        if (!ctx) {\n            throw new Error(\"Could not get canvas context\");\n        }\n        for (let x = 0; x < splitResult.numTilesX; x++) {\n            for (let y = 0; y < splitResult.numTilesY; y++) {\n                // load the tile\n                const tile = splitResult.tiles[x][y];\n                const tileCanvas = imageDataToCanvas(tile);\n\n                // paste the tile into the new image\n                ctx.drawImage(\n                    tileCanvas,\n                    x * (splitResult.tileSize - 64),\n                    y * (splitResult.tileSize - 64)\n                );\n            }\n        }\n        return ctx.getImageData(\n            0,\n            0,\n            splitResult.imageWidth,\n            splitResult.imageHeight\n        );\n    } finally {\n        canvas.remove();\n    }\n}\n\nexport function imageDataToCanvas(imageData: ImageData): HTMLCanvasElement {\n    const canvas = document.createElement(\"canvas\");\n    canvas.width = imageData.width;\n    canvas.height = imageData.height;\n    const ctx = canvas.getContext(\"2d\");\n    if (!ctx) {\n        throw new Error(\"Could not get canvas context\");\n    }\n    ctx.putImageData(imageData, 0, 0);\n    return canvas;\n}\n\n// extract resizing logic from above function into a reusable resizeImage function\nexport function resizeImage(\n    image: HTMLCanvasElement,\n    width: number,\n    height: number\n): HTMLCanvasElement {\n    const canvas = document.createElement(\"canvas\");\n    try {\n        canvas.width = width;\n        canvas.height = height;\n        const ctx = canvas.getContext(\"2d\");\n        if (!ctx) {\n            throw new Error(\"Could not get canvas context\");\n        }\n        ctx.drawImage(image, 0, 0, width, height);\n        return canvas;\n    } finally {\n        image.remove();\n    }\n}\n\n// re-implement fixImageSize using resizeImage\nexport function fixImageSize(image: HTMLCanvasElement): HTMLCanvasElement {\n    // if the width and the height are divisible by 64, return the image data\n    // otherwise, resize up to the next multiple of 64\n    const width = Math.ceil(image.width / 64) * 64;\n    const height = Math.ceil(image.height / 64) * 64;\n    if (width == image.width && height == image.height) {\n        return image;\n    }\n    return resizeImage(image, width, height);\n}\n\nexport function featherEdges(\n    selectionOverlay: Rect,\n    imageWidth: number,\n    imageHeight: number,\n    imageData: ImageData,\n    featherWidth?: number\n) {\n    const featherLeftEdge = selectionOverlay.x != 0;\n    const featherRightEdge =\n        selectionOverlay.x + selectionOverlay.width != imageWidth;\n    const featherTopEdge = selectionOverlay.y != 0;\n    const featherBottomEdge =\n        selectionOverlay.y + selectionOverlay.height != imageHeight;\n\n    const baseWidth = Math.min(selectionOverlay.width, selectionOverlay.height);\n    if (!featherWidth) {\n        featherWidth = Math.floor(baseWidth / 8);\n    }\n\n    if (featherTopEdge) {\n        for (let y = 0; y < featherWidth; y++) {\n            for (let x = 0; x < selectionOverlay.width; x++) {\n                const pixelIndex = (y * selectionOverlay.width + x) * 4;\n                const alpha = (y / featherWidth) * 255;\n                const existingAlpha = imageData.data[pixelIndex + 3];\n                imageData.data[pixelIndex + 3] = Math.min(alpha, existingAlpha);\n            }\n        }\n    }\n    if (featherBottomEdge) {\n        for (\n            let y = selectionOverlay.height - featherWidth;\n            y < selectionOverlay.height;\n            y++\n        ) {\n            for (let x = 0; x < selectionOverlay.width; x++) {\n                const pixelIndex = (y * selectionOverlay.width + x) * 4;\n                const alpha =\n                    ((selectionOverlay.height - y) / featherWidth) * 255;\n                const existingAlpha = imageData.data[pixelIndex + 3];\n                imageData.data[pixelIndex + 3] = Math.min(alpha, existingAlpha);\n            }\n        }\n    }\n    if (featherLeftEdge) {\n        for (let x = 0; x < featherWidth; x++) {\n            for (let y = 0; y < selectionOverlay.height; y++) {\n                const pixelIndex = (y * selectionOverlay.width + x) * 4;\n                const alpha = (x / featherWidth) * 255;\n                const existingAlpha = imageData.data[pixelIndex + 3];\n                imageData.data[pixelIndex + 3] = Math.min(alpha, existingAlpha);\n            }\n        }\n    }\n    if (featherRightEdge) {\n        for (\n            let x = selectionOverlay.width - featherWidth;\n            x < selectionOverlay.width;\n            x++\n        ) {\n            for (let y = 0; y < selectionOverlay.height; y++) {\n                const pixelIndex = (y * selectionOverlay.width + x) * 4;\n                const alpha =\n                    ((selectionOverlay.width - x) / featherWidth) * 255;\n                const existingAlpha = imageData.data[pixelIndex + 3];\n                imageData.data[pixelIndex + 3] = Math.min(alpha, existingAlpha);\n            }\n        }\n    }\n}\n\nexport function applyAlphaMask(imageData: ImageData, alphaMask: ImageData) {\n    if (\n        imageData.width != alphaMask.width ||\n        imageData.height != alphaMask.height\n    ) {\n        throw new Error(\"imageData and alphaMask are not the same size\");\n    }\n    const spread = 10;\n    for (let x = 0; x < imageData.width; x++) {\n        for (let y = 0; y < imageData.height; y++) {\n            // r, g, b, a\n            // if transparency within 10 pixels, set alpha to 1, otherwise to zero.\n            // binary alpha inversion with spread\n            let alpha = false;\n            for (\n                let x2 = Math.max(0, x - spread);\n                x2 < Math.min(imageData.width, x + spread);\n                x2++\n            ) {\n                for (\n                    let y2 = Math.max(0, y - spread);\n                    y2 < Math.min(imageData.height, y + spread);\n                    y2++\n                ) {\n                    const alphaValue =\n                        alphaMask.data[y2 * alphaMask.width * 4 + x2 * 4 + 3];\n                    if (alphaValue < 255) {\n                        alpha = true;\n                    }\n                }\n            }\n            const alphaIndex = y * imageData.width * 4 + x * 4 + 3;\n            if (alpha) {\n                imageData.data[alphaIndex] = 255;\n            } else {\n                imageData.data[alphaIndex] = 0;\n            }\n        }\n    }\n}\n\nexport function createBlankImage(\n    color: string,\n    width: number,\n    height: number\n): string {\n    const canvas = document.createElement(\"canvas\");\n    try {\n        canvas.width = width;\n        canvas.height = height;\n        const context = canvas.getContext(\"2d\")!;\n        context.fillStyle = color;\n        context.fillRect(0, 0, width, height);\n        return canvas.toDataURL().split(\",\")[1];\n    } finally {\n        canvas.remove();\n    }\n}\n\nexport interface ImageWorkerRequest {\n    id: string;\n    feather: boolean;\n    upscale?: boolean;\n    alphaMode: \"none\" | \"mask\" | \"alpha\";\n    pixels: Uint8ClampedArray;\n    alphaPixels?: Uint8ClampedArray;\n    width: number;\n    height: number;\n    featherWidth?: number;\n    selectionOverlay: Rect;\n}\n\nexport interface ImageWorkerResponse {\n    id: string;\n    pixels: Uint8ClampedArray;\n}\n\nexport class ImageUtilWorker {\n    private workers: Array<Worker> = [];\n    private callbacks: { [key: string]: (event: MessageEvent) => void } = {};\n    private cursor = 0;\n\n    constructor(numWorkers = 3) {\n        for (let i = 0; i < numWorkers; i++) {\n            this.workers[i] = new Worker(\n                `${process.env.PUBLIC_URL}/workers/imageutil.js`\n            );\n            this.workers[i].addEventListener(\n                \"message\",\n                this.onMessage.bind(this)\n            );\n        }\n    }\n\n    onMessage(event: MessageEvent) {\n        const resp = event.data as ImageWorkerResponse;\n        this.callbacks[resp.id](event);\n        delete this.callbacks[resp.id];\n    }\n\n    async processRequest(\n        request: ImageWorkerRequest\n    ): Promise<ImageWorkerResponse> {\n        return new Promise((resolve, reject) => {\n            this.callbacks[request.id] = (event) => {\n                resolve(event.data);\n            };\n            this.workers[this.cursor].postMessage({\n                ...request,\n            });\n            this.cursor = (this.cursor + 1) % this.workers.length;\n        });\n    }\n\n    destroy() {\n        for (let key in this.workers) {\n            this.workers[key].terminate();\n        }\n    }\n}\n\nexport function createEncodedThumbnail(encodedImage: string): Promise<string> {\n    return new Promise((resolve, reject) => {\n        // use html5 canvas\n        // crop to square aspect ratio on 128x128 canvas\n        const canvas = document.createElement(\"canvas\");\n        const thumbSize = 128;\n        canvas.width = thumbSize;\n        canvas.height = thumbSize;\n\n        const image = new Image();\n        image.src = `data:image/png;base64,${encodedImage}`;\n        image.onload = () => {\n            const context = canvas.getContext(\"2d\");\n            if (!context) {\n                reject(new Error(\"Could not create canvas context\"));\n                return;\n            }\n\n            let cropX, cropY, cropDimension;\n            if (image.width > image.height) {\n                cropDimension = image.height;\n                cropX = (image.width - image.height) / 2;\n                cropY = 0;\n            } else {\n                cropDimension = image.width;\n                cropX = 0;\n                cropY = (image.height - image.width) / 2;\n            }\n\n            // Draw the image onto the canvas\n            context.drawImage(\n                image,           // Source image\n                cropX,           // Source x\n                cropY,           // Source y\n                cropDimension,   // Source width\n                cropDimension,   // Source height\n                0,               // Destination x\n                0,               // Destination y\n                thumbSize,       // Destination width\n                thumbSize        // Destination height\n            );\n\n            // Save to png\n            const imageUrl = canvas.toDataURL(\"image/png\");\n            const base64 = imageUrl.split(\",\")[1];\n            resolve(base64);\n        };\n\n        image.onerror = (error) => {\n            reject(error);\n        };\n    });\n}\n\n\nexport function decodeImage(encodedImage: string): Promise<HTMLImageElement> {\n    return new Promise((resolve, reject) => {\n        const image = new Image();\n        image.src = `data:image/png;base64,${encodedImage}`;\n        image.onload = () => {\n            resolve(image);\n        };\n    });\n}\n\nexport function binaryImageToDataBase64(binaryImage: any): string {\n    const buf = Buffer.from(binaryImage, \"binary\");\n    return buf.toString(\"base64\");\n}\n\nexport function resizeEncodedImage(\n    encodedImage: string,\n    width: number,\n    height: number,\n    format: \"png\" | \"jpeg\"\n): Promise<string> {\n    return new Promise((resolve, reject) => {\n        // use html5 canvas\n        // crop to square aspect ratio on 128x128 canvas\n        const canvas = document.createElement(\"canvas\");\n        canvas.width = width;\n        canvas.height = height;\n\n        const image = new Image();\n        image.src = `data:image/${format};base64,${encodedImage}`;\n        image.onload = () => {\n            const context = canvas.getContext(\"2d\");\n            if (!context) {\n                throw new Error(\"Could not create canvas context\");\n            }\n            canvas.width = width;\n            canvas.height = height;\n\n            context.drawImage(\n                image,\n                0,\n                0,\n                image.width,\n                image.height,\n                0,\n                0,\n                width,\n                height\n            );\n\n            // save to png\n            const imageUrl = canvas.toDataURL(\"image/${format}\");\n            const base64 = imageUrl.split(\",\")[1];\n            resolve(base64);\n        };\n    });\n}\n\nexport function encodedImageToBlob(encodedImage: string): Blob {\n    const binaryString = atob(encodedImage);\n    const arr = [];\n    for (let i = 0; i < binaryString.length; i++) {\n        arr.push(binaryString.charCodeAt(i));\n    }\n    return new Blob([new Uint8Array(arr)], {\n        type: \"image/png\",\n    });\n}\n\n// This function is made to work with S3 presigned urls.\n// Solution found at https://stackoverflow.com/questions/22531114/how-to-upload-to-aws-s3-directly-from-browser-using-a-pre-signed-url-instead-of\nexport function uploadBlob(signedUrl: string, blob: Blob): Promise<void> {\n    return new Promise((resolve, reject) => {\n        var xhr = new XMLHttpRequest();\n        xhr.open(\"PUT\", signedUrl, true);\n        xhr.setRequestHeader(\"Content-Type\", \"image/png\");\n        xhr.onload = () => {\n            if (xhr.status < 400) {\n                // success!\n                resolve();\n            }\n        };\n        xhr.onerror = (err) => {\n            // error...\n            reject(err);\n        };\n        xhr.send(blob); // `file` is a File object here\n    });\n}\n","import React, { useState, useEffect, useRef } from \"react\";\nimport { useParams, useHistory } from \"react-router-dom\";\nimport axios, { AxiosInstance } from \"axios\";\nimport * as uuid from \"uuid\";\n\nimport { AIBrushApi } from \"../../client\";\nimport { getUpscaleLevel } from \"../../lib/upscale\";\nimport \"./ImageEditor.css\";\nimport { createRenderer, Renderer } from \"./renderer\";\nimport { Tool, BaseTool } from \"./tool\";\nimport { SelectionTool, Controls as SelectionControls } from \"./selection-tool\";\nimport { EnhanceTool, EnhanceControls } from \"./enhance-tool\";\nimport {\n    PencilTool,\n    Controls as PencilControls,\n    defaultColors,\n} from \"./pencil-tool\";\nimport { SmudgeTool, SmudgeControls } from \"./smudge-tool\";\nimport { ImportExportControls } from \"./import-export\";\nimport { InpaintControls, InpaintTool } from \"./inpaint-tool\";\nimport { AugmentControls } from \"./augment-tool\";\nimport { defaultArgs } from \"../../components/ImagePrompt\";\nimport { ApiSocket } from \"../../lib/apisocket\";\nimport {\n    createEncodedThumbnail,\n    encodedImageToBlob,\n    uploadBlob,\n} from \"../../lib/imageutil\";\nimport { BusyModal } from \"../../components/BusyModal\";\nimport { LocalImage, LocalImagesStore } from \"../../lib/localImagesStore\";\nimport { render } from \"@testing-library/react\";\n\ninterface CanPreventDefault {\n    preventDefault: () => void;\n}\n\ninterface Props {\n    api: AIBrushApi;\n    apisocket: ApiSocket;\n    assetsUrl: string;\n    localImages: LocalImagesStore;\n}\n\ninterface ToolConfig {\n    name: string;\n    iconClass: string;\n    constructor: (r: Renderer) => Tool;\n    renderControls: (t: Tool, renderer: Renderer) => JSX.Element;\n    defaultArgs: any;\n}\n\nexport const anonymousClient = axios.create();\ndelete anonymousClient.defaults.headers.common[\"Authorization\"];\n\nexport const ImageEditor: React.FC<Props> = ({\n    api,\n    apisocket,\n    localImages,\n}) => {\n    const [showSelectionControls, setShowSelectionControls] = useState(false);\n    const tools: Array<ToolConfig> = [\n        {\n            name: \"inpaint\",\n            iconClass: \"fas fa-paint-brush\",\n            constructor: (r: Renderer) => new InpaintTool(r),\n            defaultArgs: {},\n            renderControls: (t: Tool, renderer: Renderer) => {\n                t.onShowSelectionControls(setShowSelectionControls);\n                return (\n                    <InpaintControls\n                        tool={t as InpaintTool}\n                        renderer={renderer}\n                        api={api}\n                        apisocket={apisocket}\n                        image={image!}\n                    />\n                );\n            },\n        },\n        {\n            name: \"enhance\",\n            iconClass: \"fas fa-magic\",\n            constructor: (r: Renderer) => new EnhanceTool(r),\n            defaultArgs: {\n                variationStrength: 0.75,\n            },\n            renderControls: (t: Tool, renderer: Renderer) => {\n                t.onShowSelectionControls(setShowSelectionControls);\n                return (\n                    <EnhanceControls\n                        tool={t as EnhanceTool}\n                        renderer={renderer}\n                        api={api}\n                        apisocket={apisocket}\n                        image={image!}\n                    />\n                );\n            },\n        },\n        {\n            name: \"pencil\",\n            iconClass: \"fas fa-pencil-alt\",\n            constructor: (r: Renderer) => new PencilTool(r, \"base\"),\n            defaultArgs: {},\n            renderControls: (t: Tool, renderer: Renderer) => {\n                return (\n                    <PencilControls\n                        tool={t as PencilTool}\n                        renderer={renderer}\n                        colors={defaultColors}\n                    />\n                );\n            },\n        },\n        {\n            name: \"smudge\",\n            // finger icon\n            iconClass: \"fas fa-hand-pointer\",\n            constructor: (r: Renderer) => new SmudgeTool(r),\n            defaultArgs: {},\n            renderControls: (t: Tool, renderer: Renderer) => {\n                return (\n                    <SmudgeControls\n                        tool={t as SmudgeTool}\n                        renderer={renderer}\n                    />\n                );\n            },\n        },\n        {\n            name: \"import-export\",\n            iconClass: \"fas fa-file-import\",\n            constructor: (r: Renderer) => new BaseTool(r, \"import-export\"),\n            defaultArgs: {},\n            renderControls: (t: Tool, renderer: Renderer) => {\n                return (\n                    <ImportExportControls\n                        renderer={renderer}\n                        tool={t as BaseTool}\n                        api={api}\n                    />\n                );\n            },\n        },\n        {\n            name: \"augment\",\n            iconClass: \"fas fa-image\",\n            constructor: (r: Renderer) => new BaseTool(r, \"augment\"),\n            defaultArgs: {},\n            renderControls: (t: Tool, renderer: Renderer) => {\n                return (\n                    <AugmentControls\n                        renderer={renderer}\n                        tool={t as BaseTool}\n                        api={api}\n                        image={image!}\n                    />\n                );\n            },\n        },\n    ];\n\n    const [image, setImage] = useState<LocalImage | null>(null);\n    const [renderer, setRenderer] = useState<Renderer | null>(null);\n    const [tool, setTool] = useState<Tool | null>(null);\n    const [toolConfig, setToolConfig] = useState<ToolConfig | null>(null);\n    const [canUndo, setCanUndo] = useState(false);\n    const [canRedo, setCanRedo] = useState(false);\n    const [busyMessage, setBusyMessage] = useState<string | null>(null);\n\n    const { id } = useParams<{ id: string }>();\n    const history = useHistory();\n\n    const canvasRef = useRef<HTMLCanvasElement>(null);\n\n    const onSelectTool = (toolconfig: ToolConfig) => {\n        if (renderer) {\n            if (tool) {\n                if (!tool.destroy()) {\n                    return;\n                }\n            }\n            const newTool = toolconfig.constructor(renderer);\n            setTool(newTool);\n            setToolConfig(toolconfig);\n            newTool.onSaveImage((encodedImage, args = {}) => {\n                console.log(\"Saving image...\");\n                saveNewImage(encodedImage, args);\n            });\n        }\n    };\n\n    /**\n     * Saves a new image to the server\n     *\n     * @param encodedImage base64 encoded image\n     * @param newArgs may contain new phrases and negative phrases\n     */\n    const saveNewImage = async (encodedImage: string, newArgs: any) => {\n        if (!image || !encodedImage) {\n            throw new Error(\"Cannot save new image without existing image\");\n        }\n        if (!renderer) {\n            throw new Error(\"Cannot save new image without renderer\");\n        }\n        setBusyMessage(\"Saving image...\");\n        try {\n            const newImage: LocalImage = {\n                ...image,\n                params: {\n                    ...image.params,\n                    width: renderer!.getWidth() as any,\n                    height: renderer!.getHeight() as any,\n                },\n                id: uuid.v4(),\n                imageData: `data:image/png;base64,${encodedImage}`,\n            };\n            await localImages.saveImage(newImage);\n\n            // switch url and state to new image\n            setImage(newImage);\n            history.replace(`/image-editor/${newImage.id}`);\n        } finally {\n            setBusyMessage(null);\n        }\n    };\n\n    useEffect(() => {\n        if (image) {\n            return;\n        }\n\n        async function loadImage() {\n            const localImage = await localImages.getImage(id);\n            let imageSrc = \"\";\n            if (localImage) {\n                setImage(localImage);\n                imageSrc = localImage.imageData!;\n            } else {\n                const image = (await api.getImage(id)).data;\n                setImage(image);\n                const download_urls = await api.getImageDownloadUrls(id);\n                // Loading up data as binary, base64 encoding into image url\n                // bypasses browser security nonsense about cross-domain images\n                const resp = await anonymousClient.get(\n                    download_urls.data.image_url!,\n                    {\n                        responseType: \"arraybuffer\",\n                    }\n                );\n                const binaryImageData = Buffer.from(resp.data, \"binary\");\n                const base64ImageData = binaryImageData.toString(\"base64\");\n                imageSrc = `data:image/png;base64,${base64ImageData}`;\n            }\n\n            const imageElement = new Image();\n            imageElement.src = imageSrc;\n            imageElement.onload = () => {\n                if (!canvasRef.current) {\n                    console.error(\"Failed to get canvas\");\n                    return;\n                }\n                const renderer = createRenderer(canvasRef.current);\n                renderer.setBaseImage(imageElement);\n                setRenderer(renderer);\n            };\n        }\n        loadImage();\n    }, [image, id]);\n\n    // this covers the case that an image is upscaled to max, the upscale tool needs to\n    // be hidden and deselected.\n    useEffect(() => {\n        if (\n            image &&\n            tool &&\n            tool.name == \"upscale\" &&\n            image.params.width! * image.params.height! >= 2048 * 2048\n        ) {\n            onSelectTool(tools[0]);\n        }\n    }, [image, tool]);\n\n    useEffect(() => {\n        if (renderer) {\n            onSelectTool(tools[0]);\n            renderer.onSnapshot(() => {\n                setCanUndo(renderer.canUndo());\n                setCanRedo(renderer.canRedo());\n            });\n        }\n    }, [renderer]);\n\n    useEffect(() => {\n        if (canvasRef.current) {\n            const listener = (e: WheelEvent) => {\n                if (tool) {\n                    e.preventDefault();\n                    tool.onWheel(e);\n                }\n            };\n            canvasRef.current.addEventListener(\"wheel\", listener);\n            return () => {\n                canvasRef.current?.removeEventListener(\"wheel\", listener);\n            };\n        }\n    }, [tool, canvasRef.current]);\n\n    // implement a useEffect hook that resizes the canvas (renderer.updateCanvasSize(width, height)) when the window is resized, and also on initial load\n    // the canvas size should be set based on the current screen size\n    useEffect(() => {\n        if (renderer) {\n            const listener = () => {\n                let width = window.innerWidth * 0.85;\n                let height = window.innerHeight;\n                if (window.innerWidth <= 992) {\n                    width = window.innerWidth;\n                    height = window.innerHeight * 0.85;\n                }\n                renderer.updateCanvasSize(width, height);\n                // renderer.resetView();\n            };\n            window.addEventListener(\"resize\", listener);\n            listener();\n            renderer.resetView();\n            return () => {\n                window.removeEventListener(\"resize\", listener);\n            };\n            \n        }\n    }, [renderer]);\n\n    function renderTool(t: ToolConfig) {\n        if (!image) {\n            return null;\n        }\n        let buttonClass = `btn btn-secondary light-button image-editor-tool-button`;\n        const isSelected = tool && tool.name == t.name;\n        if (isSelected) {\n            buttonClass = `btn btn-primary image-editor-tool-button`;\n        }\n        return (\n            <>\n                <button\n                    style={{ margin: \"4px\" }}\n                    className={buttonClass}\n                    onClick={() => onSelectTool(t)}\n                >\n                    <i className={t.iconClass}></i>\n                </button>\n                {/* capitalize tool name */}\n                {/* <label>\n                    {t.name.charAt(0).toUpperCase() + t.name.slice(1)}\n                </label>\n                {isSelected && t.renderControls(tool!, renderer!)} */}\n            </>\n        );\n    }\n\n    function preventDefault(e: CanPreventDefault): boolean {\n        e.preventDefault();\n        return true;\n    }\n\n    return (\n        <>\n            <div className=\"row\">\n                <div className=\"col-12\">\n                    <h1 style={{ fontSize: \"40px\", textAlign: \"left\" }}>\n                        <i\n                            style={{ cursor: \"pointer\" }}\n                            onClick={() => history.push(`/images/${id}`)}\n                            className=\"fas fa-chevron-left\"\n                        ></i>\n                        &nbsp; AI Edit\n                    </h1>\n                </div>\n            </div>\n            <div\n                className=\"row\"\n                style={{ marginTop: \"32px\", paddingBottom: \"120px\" }}\n            >\n                <div\n                    className=\"col-lg-3\"\n                    style={{ textAlign: \"left\", marginBottom: \"8px\" }}\n                >\n                    {renderer && (\n                        <>\n                            <div style={{marginBottom: \"16px\"}}>{tools.map((t) => renderTool(t))}</div>\n                            {tool && toolConfig && (\n                                <>\n                                    {/* capitalize tool name */}\n                                    <h4 style={{marginLeft: \"16px\"}}>\n                                        {tool.name.charAt(0).toUpperCase() +\n                                            tool.name.slice(1)}\n                                    </h4>\n                                    {toolConfig.renderControls(\n                                        tool!,\n                                        renderer!\n                                    )}\n                                </>\n                            )}\n                            {(canRedo || canUndo) && (\n                                <div className=\"form-group\">\n                                    <div className=\"btn-group\">\n                                        <button\n                                            className=\"btn btn-primary image-popup-button\"\n                                            disabled={!renderer || !canUndo}\n                                            onClick={() =>\n                                                renderer && renderer.undo()\n                                            }\n                                        >\n                                            {/* undo */}\n                                            <i className=\"fas fa-undo\"></i>\n                                        </button>\n                                        <button\n                                            className=\"btn btn-primary image-popup-button\"\n                                            disabled={!renderer || !canRedo}\n                                            onClick={() =>\n                                                renderer && renderer.redo()\n                                            }\n                                        >\n                                            <i className=\"fas fa-redo\"></i>\n                                        </button>\n                                    </div>\n                                </div>\n                            )}\n                        </>\n                    )}\n                </div>\n                <div className=\"col-lg-9\">\n                    <div style={{ verticalAlign: \"middle\" }}>\n                        <div>\n                            <canvas\n                                style={{\n                                    cursor: \"none\",\n                                    touchAction: \"none\",\n                                    userSelect: \"none\",\n                                }}\n                                width={768}\n                                height={512}\n                                ref={canvasRef}\n                                className=\"image-editor-canvas\"\n                                onMouseDown={(e) =>\n                                    preventDefault(e) &&\n                                    tool &&\n                                    tool.onMouseDown(e)\n                                }\n                                onMouseMove={(e) =>\n                                    preventDefault(e) &&\n                                    tool &&\n                                    tool.onMouseMove(e)\n                                }\n                                onMouseUp={(e) =>\n                                    preventDefault(e) &&\n                                    tool &&\n                                    tool.onMouseUp(e)\n                                }\n                                onMouseLeave={(e) =>\n                                    preventDefault(e) &&\n                                    tool &&\n                                    tool.onMouseLeave(e)\n                                }\n                                onTouchStart={(e) =>\n                                    preventDefault(e) &&\n                                    tool &&\n                                    tool.onTouchStart(e)\n                                }\n                                onTouchMove={(e) =>\n                                    preventDefault(e) &&\n                                    tool &&\n                                    tool.onTouchMove(e)\n                                }\n                                onTouchEnd={(e) =>\n                                    preventDefault(e) &&\n                                    tool &&\n                                    tool.onTouchEnd(e)\n                                }\n                            ></canvas>\n                            {showSelectionControls && (\n                                <>\n                                    <button\n                                        className=\"btn btn-secondary canvas-select-left\"\n                                        onClick={() => tool!.select(\"left\")}\n                                    >\n                                        <i className=\"fas fa-chevron-left\"></i>\n                                    </button>\n                                    <button\n                                        className=\"btn btn-secondary canvas-select-right\"\n                                        onClick={() => tool!.select(\"right\")}\n                                    >\n                                        <i className=\"fas fa-chevron-right\"></i>\n                                    </button>\n                                </>\n                            )}\n                        </div>\n                    </div>\n                    <div className=\"row\">\n                        <button\n                            className=\"btn btn-primary\"\n                            // center horizontally\n                            style={{\n                                position: \"absolute\",\n                                left: \"50%\",\n                                transform: \"translate(-50%, 0)\",\n                            }}\n                            onClick={() => {\n                                if (renderer) {\n                                    renderer.resetView();\n                                }\n                            }}\n                        >\n                            {/* reset zoom */}\n                            <i className=\"fas fa-search-plus\"></i>&nbsp; Reset\n                            View\n                        </button>\n                        {/* redo */}\n                    </div>\n                    {/* vertically center button within the div */}\n                </div>\n            </div>\n            {busyMessage && (\n                <BusyModal show={true} title=\"Please Wait\">\n                    {busyMessage}\n                </BusyModal>\n            )}\n        </>\n    );\n};\n","import { Cursor, Rect } from \"./models\";\n\nconst maxSnapshots = 10;\n\nexport class Renderer {\n    private undoStack: ImageData[] = [];\n    private redoStack: ImageData[] = [];\n    private currentSnapshot: ImageData | undefined;\n\n    private backgroundLayer: HTMLCanvasElement;\n    private baseImageLayer: HTMLCanvasElement;\n    private editLayer: HTMLCanvasElement;\n    private maskLayer: HTMLCanvasElement | undefined;\n    // private overlayLayer: HTMLCanvasElement;\n\n    private selectionOverlay: Rect | undefined;\n    private selectionOverlayPreview: Rect | undefined;\n    private hasSelection: boolean = false;\n    private cursor: Cursor | undefined;\n\n    private zoom: number;\n    private offsetX: number;\n    private offsetY: number;\n    private width = 0;\n    private height = 0;\n\n    private snapshotListener: (() => void) | null = null;\n\n    constructor(private readonly canvas: HTMLCanvasElement) {\n        // invisible canvas elements\n        this.backgroundLayer = document.createElement(\"canvas\");\n        this.backgroundLayer.width = canvas.width;\n        this.backgroundLayer.height = canvas.height;\n        this.baseImageLayer = document.createElement(\"canvas\");\n        this.editLayer = document.createElement(\"canvas\");\n        // this.overlayLayer = document.createElement(\"canvas\");\n\n        this.zoom = 1;\n        this.offsetX = 0;\n        this.offsetY = 0;\n    }\n\n    updateCanvasSize(width: number, height: number) {\n        this.canvas.width = width;\n        this.canvas.height = height;\n        this.backgroundLayer.width = width;\n        this.backgroundLayer.height = height;\n        this.initializeBackgroundLayer();\n        this.render();\n    }\n\n    undo(allowRedo: boolean = true) {\n        if (this.undoStack.length > 0 && this.currentSnapshot) {\n            const imageData = this.undoStack.pop()!;\n            if (allowRedo) {\n                this.redoStack.push(this.currentSnapshot);\n            }\n            this.currentSnapshot = imageData;\n            // set as base image\n            const ctx = this.baseImageLayer.getContext(\"2d\");\n            if (ctx) {\n                ctx.clearRect(\n                    0,\n                    0,\n                    this.baseImageLayer.width,\n                    this.baseImageLayer.height\n                );\n                ctx.putImageData(imageData, 0, 0);\n                this.render();\n            }\n            this.notifySnapshotListener();\n        }\n    }\n\n    redo() {\n        if (this.redoStack.length > 0 && this.currentSnapshot) {\n            this.undoStack.push(this.currentSnapshot);\n            const imageData = this.redoStack.pop()!;\n            this.currentSnapshot = imageData;\n\n            // set as base image\n            const ctx = this.baseImageLayer.getContext(\"2d\");\n            if (ctx) {\n                ctx.putImageData(imageData, 0, 0);\n                this.render();\n            }\n            this.notifySnapshotListener();\n        }\n    }\n\n    clearRedoStack() {\n        this.redoStack = [];\n        this.notifySnapshotListener();\n    }\n\n    canUndo(): boolean {\n        return !this.hasSelection && this.undoStack.length > 0;\n    }\n\n    canRedo(): boolean {\n        return !this.hasSelection && this.redoStack.length > 0;\n    }\n\n    onSnapshot(listener: () => void) {\n        this.snapshotListener = listener;\n    }\n\n    snapshot() {\n        const ctx = this.baseImageLayer.getContext(\"2d\");\n        if (ctx) {\n            const snapshot = ctx.getImageData(\n                0,\n                0,\n                this.baseImageLayer.width,\n                this.baseImageLayer.height\n            );\n            if (this.currentSnapshot) {\n                this.undoStack.push(this.currentSnapshot);\n                this.currentSnapshot = snapshot;\n                if (this.redoStack.length > 0) {\n                    this.redoStack = [];\n                }\n                if (this.undoStack.length > maxSnapshots) {\n                    this.undoStack.shift();\n                }\n            } else {\n                this.currentSnapshot = snapshot;\n            }\n\n            this.notifySnapshotListener();\n        }\n    }\n\n    private notifySnapshotListener() {\n        if (this.snapshotListener) {\n            this.snapshotListener();\n        }\n    }\n\n    render() {\n        const context = this.canvas.getContext(\"2d\");\n        if (context) {\n            context.clearRect(0, 0, this.width, this.height);\n            context.drawImage(this.backgroundLayer, 0, 0);\n            // apply zoom and offset\n            context.setTransform(\n                this.zoom,\n                0,\n                0,\n                this.zoom,\n                this.offsetX * this.zoom,\n                this.offsetY * this.zoom\n            );\n            // context.drawImage(this.backgroundLayer, 0, 0);\n            context.drawImage(this.baseImageLayer, 0, 0);\n            context.drawImage(this.editLayer, 0, 0);\n            // draw this.maskLayer at 0.3 opacity\n            if (this.maskLayer) {\n                context.globalAlpha = 0.3;\n                context.drawImage(this.maskLayer, 0, 0);\n                context.globalAlpha = 1;\n            }\n\n            // context.drawImage(this.overlayLayer, 0, 0);\n            this.drawOverlay(context, this.width, this.height);\n            context.setTransform(1, 0, 0, 1, 0, 0);\n        }\n    }\n\n    createMask() {\n        this.maskLayer = document.createElement(\"canvas\");\n        this.maskLayer.width = this.width;\n        this.maskLayer.height = this.height;\n        this.resetMask();\n    }\n\n    resetMask() {\n        if (this.maskLayer) {\n            const ctx = this.maskLayer.getContext(\"2d\");\n            if (ctx) {\n                ctx.fillStyle = \"#000000\";\n                ctx.fillRect(0, 0, this.width, this.height);\n            }\n            this.render();\n        }\n    }\n\n    invertMask() {\n        if (this.maskLayer) {\n            const ctx = this.maskLayer.getContext(\"2d\");\n            if (ctx) {\n                // change black to white, white to black\n                const imageData = ctx.getImageData(\n                    0,\n                    0,\n                    this.width,\n                    this.height\n                );\n                for (let i = 0; i < imageData.data.length; i += 4) {\n                    imageData.data[i] = 255 - imageData.data[i];\n                    imageData.data[i + 1] = 255 - imageData.data[i + 1];\n                    imageData.data[i + 2] = 255 - imageData.data[i + 2];\n                }\n                ctx.putImageData(imageData, 0, 0);\n            }\n            this.render();\n        }\n    }\n\n    deleteMask() {\n        this.maskLayer = undefined;\n        this.render();\n    }\n\n    isMasked() {\n        return this.maskLayer !== undefined;\n    }\n\n    getCanvas(): HTMLCanvasElement {\n        return this.canvas;\n    }\n\n    private initializeBackgroundLayer() {\n        // checkered background\n        // #DEDEDE\n        // #FFFFFF\n        // 10x10 pixel squares\n        const ctx = this.backgroundLayer.getContext(\"2d\");\n        if (ctx) {\n            const pattern = ctx.createPattern(\n                this.createCheckeredPattern(20, 20, \"#808080\", \"#AAAAAA\"),\n                \"repeat\"\n            );\n            if (pattern) {\n                ctx.fillStyle = pattern;\n                ctx.fillRect(\n                    0,\n                    0,\n                    this.backgroundLayer.width,\n                    this.backgroundLayer.height\n                );\n            }\n        }\n    }\n\n    private createCheckeredPattern(\n        width: number,\n        height: number,\n        color1: string,\n        color2: string\n    ): HTMLCanvasElement {\n        const canvas = document.createElement(\"canvas\");\n        canvas.width = width;\n        canvas.height = height;\n        const ctx = canvas.getContext(\"2d\");\n        if (ctx) {\n            ctx.fillStyle = color1;\n            ctx.fillRect(0, 0, width, height);\n            ctx.fillStyle = color2;\n            ctx.fillRect(0, 0, width / 2, height / 2);\n            ctx.fillRect(width / 2, height / 2, width / 2, height / 2);\n        }\n        return canvas;\n    }\n\n    setBaseImage(\n        image: HTMLImageElement | HTMLCanvasElement,\n        updateSelectionOverlay = true\n    ) {\n        const context = this.baseImageLayer.getContext(\"2d\");\n        if (context) {\n            // set size of all layers\n            // TODO: adapt for an always-square canvas\n            this.initializeBackgroundLayer();\n\n            this.baseImageLayer.width = image.width;\n            this.baseImageLayer.height = image.height;\n            this.editLayer.width = image.width;\n            this.editLayer.height = image.height;\n            this.maskLayer = undefined;\n            // set image size\n            this.width = image.width;\n            this.height = image.height;\n            // this.canvas.width = image.width;\n            // this.canvas.height = image.height;\n            context.drawImage(image, 0, 0);\n\n            if (updateSelectionOverlay) {\n                // set 512x512 selection overlay at the center of the image\n                this.setSelectionOverlay({\n                    x: (image.width - 512) / 2,\n                    y: (image.height - 512) / 2,\n                    width: 512,\n                    height: 512,\n                });\n            }\n            this.resetView();\n            // this.render(); // already called by updateZoomAndOffset\n            this.snapshot();\n        }\n    }\n\n    resetView() {\n        // Determine the aspect ratios of the image and canvas\n        const imageAspectRatio = this.width / this.height;\n        const canvasAspectRatio = this.canvas.width / this.canvas.height;\n    \n        let zoom, offsetX, offsetY;\n    \n        if (imageAspectRatio > canvasAspectRatio) {\n            // The image is wider than the canvas, so we should fit the image to the width of the canvas\n            zoom = this.canvas.width / this.width;\n            offsetX = 0;\n            // Calculate the amount of empty space in the height (in image coordinate space), and divide by 2 to center\n            offsetY = (this.height - (this.canvas.height / zoom)) / -2;\n        } else {\n            // The image is taller or equal aspect ratio to the canvas, so we should fit the image to the height of the canvas\n            zoom = this.canvas.height / this.height;\n            offsetY = 0;\n            // Calculate the amount of empty space in the width (in image coordinate space), and divide by 2 to center\n            offsetX = (this.width - (this.canvas.width / zoom)) / -2;\n        }\n    \n        this.updateZoomAndOffset(zoom, offsetX, offsetY);\n    }\n    \n    \n\n    setEditImage(imageData: ImageData | null) {\n        this.hasSelection = !!imageData;\n        const context = this.editLayer.getContext(\"2d\");\n        if (context && this.selectionOverlay) {\n            context.clearRect(\n                0,\n                0,\n                this.editLayer.width,\n                this.editLayer.height\n            );\n            if (imageData) {\n                context.putImageData(\n                    imageData,\n                    this.selectionOverlay.x,\n                    this.selectionOverlay.y\n                );\n            }\n            // edit image makes the selection rect and preview disappear\n            // so redraw the overlay\n            this.hasSelection = !!imageData;\n            this.render();\n        }\n        this.notifySnapshotListener();\n    }\n\n    private drawOverlay(\n        context: CanvasRenderingContext2D,\n        width: number,\n        height: number\n    ) {\n        const lineWidth = Math.max(this.width / 512, this.height / 512);\n        if (context) {\n            context.strokeStyle = \"white\";\n            context.lineWidth = lineWidth;\n            context.strokeRect(0, 0, width, height);\n\n            if (!this.hasSelection && this.selectionOverlay) {\n                context.strokeStyle = \"white\";\n                context.lineWidth = lineWidth;\n                context.strokeRect(\n                    this.selectionOverlay.x,\n                    this.selectionOverlay.y,\n                    this.selectionOverlay.width,\n                    this.selectionOverlay.height\n                );\n            }\n            if (!this.hasSelection && this.selectionOverlayPreview) {\n                context.strokeStyle = \"cyan\";\n                context.lineWidth = lineWidth;\n                context.strokeRect(\n                    this.selectionOverlayPreview.x,\n                    this.selectionOverlayPreview.y,\n                    this.selectionOverlayPreview.width,\n                    this.selectionOverlayPreview.height\n                );\n            }\n            if (this.cursor) {\n                if (this.cursor.type === \"circle\") {\n                    context.lineWidth = lineWidth;\n                    context.strokeStyle = this.cursor.color;\n                    // context.globalAlpha = 0.5;\n                    context.beginPath();\n                    context.arc(\n                        this.cursor.x,\n                        this.cursor.y,\n                        this.cursor.radius,\n                        0,\n                        2 * Math.PI\n                    );\n                    context.stroke();\n                } else if (this.cursor.type === \"circle-fill\") {\n                    context.fillStyle = this.cursor.color;\n                    context.strokeStyle = this.cursor.color;\n                    // context.lineWidth = lineWidth;\n                    // context.globalAlpha = 0.5;\n                    context.beginPath();\n                    context.arc(\n                        this.cursor.x,\n                        this.cursor.y,\n                        this.cursor.radius,\n                        0,\n                        2 * Math.PI\n                    );\n                    context.stroke();\n                    // set alpha to 0.5 and fill\n                    context.globalAlpha = 0.5;\n                    context.beginPath();\n                    context.arc(\n                        this.cursor.x,\n                        this.cursor.y,\n                        this.cursor.radius,\n                        0,\n                        2 * Math.PI\n                    );\n                    context.fill();\n                    context.globalAlpha = 1;\n                } else if (this.cursor.type == \"crosshairs\") {\n                    // draw crosshairs based on cursor radius\n                    context.strokeStyle = this.cursor.color;\n                    context.lineWidth = lineWidth;\n                    context.beginPath();\n                    context.moveTo(\n                        this.cursor.x - this.cursor.radius,\n                        this.cursor.y\n                    );\n                    context.lineTo(\n                        this.cursor.x + this.cursor.radius,\n                        this.cursor.y\n                    );\n                    context.moveTo(\n                        this.cursor.x,\n                        this.cursor.y - this.cursor.radius\n                    );\n                    context.lineTo(\n                        this.cursor.x,\n                        this.cursor.y + this.cursor.radius\n                    );\n                    context.stroke();\n                } else if (this.cursor.type === \"colorpicker\") {\n                    // TODO: add croshairs\n                    context.lineWidth = this.cursor.radius * 0.75;\n                    context.strokeStyle = this.cursor.color;\n                    // context.globalAlpha = 0.5;\n                    context.beginPath();\n                    context.arc(\n                        this.cursor.x,\n                        this.cursor.y,\n                        this.cursor.radius,\n                        0,\n                        2 * Math.PI\n                    );\n                    context.stroke();\n\n                    // draw crosshairs (black)\n                    context.lineWidth = lineWidth;\n                    context.strokeStyle = \"black\";\n                    context.beginPath();\n                    context.moveTo(\n                        this.cursor.x - this.cursor.radius,\n                        this.cursor.y\n                    );\n                    context.lineTo(\n                        this.cursor.x + this.cursor.radius,\n                        this.cursor.y\n                    );\n                    context.moveTo(\n                        this.cursor.x,\n                        this.cursor.y - this.cursor.radius\n                    );\n                    context.lineTo(\n                        this.cursor.x,\n                        this.cursor.y + this.cursor.radius\n                    );\n                    context.stroke();\n                }\n            }\n        }\n    }\n\n    setSelectionOverlay(selectionOverlay: Rect | undefined) {\n        this.selectionOverlay = selectionOverlay;\n        this.render();\n    }\n\n    setSelectionOverlayPreview(selectionOverlayPreview: Rect | undefined) {\n        this.selectionOverlayPreview = selectionOverlayPreview;\n        this.render();\n    }\n\n    setCursor(cursor: Cursor | undefined) {\n        this.cursor = cursor;\n        this.render();\n    }\n\n    getSelectionOverlay(): Rect | undefined {\n        return this.selectionOverlay;\n    }\n\n    getZoom(): number {\n        return this.zoom;\n    }\n\n    getOffsetX(): number {\n        return this.offsetX;\n    }\n\n    getOffsetY(): number {\n        return this.offsetY;\n    }\n\n    updateZoomAndOffset(zoom: number, offsetX: number, offsetY: number) {\n        // console.log(`zoom: ${zoom}, offset: ${offsetX}, ${offsetY}`)\n        this.zoom = zoom;\n        this.offsetX = offsetX;\n        this.offsetY = offsetY;\n        this.render();\n    }\n\n    getWidth(): number {\n        return this.width;\n    }\n\n    getHeight(): number {\n        return this.height;\n    }\n\n    private imageDataToEncodedImage(imageData: ImageData): string | undefined {\n        // create a canvas and draw the image data on it\n        const canvas = document.createElement(\"canvas\");\n        canvas.width = imageData.width;\n        canvas.height = imageData.height;\n        const context = canvas.getContext(\"2d\");\n        if (context) {\n            context.putImageData(imageData, 0, 0);\n            // return the data url of the canvas\n            const result = canvas.toDataURL(\"image/png\");\n            // cleanup the canvas\n            canvas.remove();\n            // extract base64 data from data url\n            return result.split(\",\")[1];\n        }\n    }\n\n    getEncodedImage(selection: Rect | null): string | undefined {\n        const imageData = this.getImageData(selection);\n        if (imageData) {\n            return this.imageDataToEncodedImage(imageData);\n        }\n    }\n\n    private convertErasureToMask(erasure: ImageData): ImageData {\n        // for each pixel, if alpha < 255, set to white, otherwise set to black\n        const mask = erasure;\n        for (let i = 0; i < erasure.data.length; i += 4) {\n            let white = erasure.data[i + 3] < 255;\n            if (white) {\n                mask.data[i] = 255;\n                mask.data[i + 1] = 255;\n                mask.data[i + 2] = 255;\n                mask.data[i + 3] = 255;\n            } else {\n                mask.data[i] = 0;\n                mask.data[i + 1] = 0;\n                mask.data[i + 2] = 0;\n                mask.data[i + 3] = 255;\n            }\n        }\n        return mask;\n    }\n\n    getEncodedMask(\n        selection: Rect | null,\n        layer: \"base\" | \"mask\" = \"base\"\n    ): string | undefined {\n        const imageData = this.getImageData(selection, layer)!;\n        if (!imageData) {\n            return;\n        }\n        if (layer === \"base\") {\n            const mask = this.convertErasureToMask(imageData);\n            return this.imageDataToEncodedImage(mask);\n        } else {\n            return this.imageDataToEncodedImage(imageData);\n        }\n    }\n\n    getImageData(\n        selection: Rect | null,\n        layer: \"base\" | \"mask\" = \"base\"\n    ): ImageData | undefined {\n        if (!selection) {\n            selection = {\n                x: 0,\n                y: 0,\n                width: this.width,\n                height: this.height,\n            };\n        }\n        // get image data of the selection\n        const imageLayer =\n            layer === \"base\" ? this.baseImageLayer : this.maskLayer;\n        if (!imageLayer) {\n            return;\n        }\n        let context = imageLayer.getContext(\"2d\");\n        if (context) {\n            const imageData = context.getImageData(\n                selection.x,\n                selection.y,\n                selection.width,\n                selection.height\n            );\n            return imageData;\n        }\n    }\n\n    commitSelection() {\n        // draw the selection overlay on the base image layer\n        const context = this.baseImageLayer.getContext(\"2d\");\n        if (context) {\n            context.drawImage(this.editLayer, 0, 0);\n            this.setEditImage(null);\n            this.snapshot();\n        }\n    }\n\n    drawPoint(\n        x: number,\n        y: number,\n        brushSize: number,\n        color: string,\n        layer: \"base\" | \"mask\" = \"base\"\n    ): void {\n        // draw on selection layer\n        const imageLayer = layer === \"base\" ? this.editLayer : this.maskLayer;\n        if (!imageLayer) {\n            return;\n        }\n        const context = imageLayer.getContext(\"2d\");\n        if (context) {\n            context.fillStyle = color;\n            context.beginPath();\n            context.arc(x, y, brushSize / 2, 0, 2 * Math.PI);\n            context.fill();\n        }\n        this.render();\n    }\n\n    erasePoint(brushx: number, brushy: number, brushSize: number): void {\n        if (!this.selectionOverlay) {\n            throw new Error(\"No selection overlay\");\n        }\n        // get image data centered on x, y with brushSize width and height\n        const context = this.baseImageLayer.getContext(\"2d\");\n        if (context) {\n            const imageData = context.getImageData(\n                brushx - brushSize / 2,\n                brushy - brushSize / 2,\n                brushSize,\n                brushSize\n            );\n            // set alpha to 0 in a circle centered on x, y with radius brushSize / 2\n            for (let i = 0; i < imageData.data.length; i += 4) {\n                const x = (i / 4) % brushSize;\n                const y = Math.floor(i / 4 / brushSize);\n\n                const absx = x - brushSize / 2 + brushx;\n                // three pixel barrier on each edge UNLESS the selection overlay borders that edge\n                let leftEdge = this.selectionOverlay.x;\n                if (leftEdge > 0) {\n                    leftEdge += 10;\n                }\n                let rightEdge =\n                    this.selectionOverlay.x + this.selectionOverlay.width;\n                if (rightEdge < this.width) {\n                    rightEdge -= 10;\n                }\n                let topEdge = this.selectionOverlay.y;\n                if (topEdge > 0) {\n                    topEdge += 10;\n                }\n                let bottomEdge =\n                    this.selectionOverlay.y + this.selectionOverlay.height;\n                if (bottomEdge < this.canvas.height) {\n                    bottomEdge -= 10;\n                }\n\n                const containsx = absx > leftEdge && absx < rightEdge;\n                const absy = y - brushSize / 2 + brushy;\n                const containsy = absy > topEdge && absy < bottomEdge;\n                const contains = containsx && containsy;\n\n                // check if x, y is within the selection overlay\n                if (this.selectionOverlay && !contains) {\n                    continue;\n                }\n\n                const distance = Math.sqrt(\n                    Math.pow(x - brushSize / 2, 2) +\n                        Math.pow(y - brushSize / 2, 2)\n                );\n                if (distance < brushSize / 2) {\n                    imageData.data[i + 3] = 0;\n                }\n            }\n            // draw the image data on the selection layer\n            context.putImageData(\n                imageData,\n                brushx - brushSize / 2,\n                brushy - brushSize / 2\n            );\n        }\n    }\n\n    drawLine(\n        x1: number,\n        y1: number,\n        x2: number,\n        y2: number,\n        brushSize: number,\n        color: string,\n        layer: \"base\" | \"mask\" = \"base\"\n    ): void {\n        const imageLayer = layer === \"base\" ? this.editLayer : this.maskLayer;\n        if (!imageLayer) {\n            return;\n        }\n        // draw on selection layer\n        const context = imageLayer.getContext(\"2d\");\n        if (context) {\n            context.strokeStyle = color;\n            context.lineWidth = brushSize;\n            context.lineCap = \"round\";\n            context.beginPath();\n            context.moveTo(x1, y1);\n            context.lineTo(x2, y2);\n            context.stroke();\n        }\n        this.render();\n    }\n\n    smudgeLine(\n        x1: number,\n        y1: number,\n        x2: number,\n        y2: number,\n        brushSize: number,\n        brushOpacity: number\n    ): void {\n        const unitVector = {\n            x: x2 - x1,\n            y: y2 - y1,\n        };\n        const length = Math.sqrt(\n            unitVector.x * unitVector.x + unitVector.y * unitVector.y\n        );\n        unitVector.x /= length;\n        unitVector.y /= length;\n\n        // for each point on the line, get image data (brushSize x brushSize) from edit layer\n        // average pixel values that are within the brush circle.\n        // update the image data with the averaged pixel values in the\n        // brush circle, then put the image data back on the edit layer\n        // at the point on the line\n\n        const context = this.editLayer.getContext(\"2d\");\n        if (context) {\n            for (let i = 0; i < length; i++) {\n                const x = x1 + i * unitVector.x;\n                const y = y1 + i * unitVector.y;\n\n                const imageData = context.getImageData(\n                    x - brushSize / 2,\n                    y - brushSize / 2,\n                    brushSize,\n                    brushSize\n                );\n\n                let totalRed = 0;\n                let totalGreen = 0;\n                let totalBlue = 0;\n                let count = 0.0;\n\n                // average pixel values\n                for (let y = 0; y < imageData.height; y++) {\n                    for (let x = 0; x < imageData.width; x++) {\n                        const index = (y * imageData.width + x) * 4;\n                        const distance = Math.sqrt(\n                            (x - brushSize / 2) * (x - brushSize / 2) +\n                                (y - brushSize / 2) * (y - brushSize / 2)\n                        );\n                        if (distance <= brushSize / 2) {\n                            // get the pixel value from the image data\n                            const r = imageData.data[index];\n                            const g = imageData.data[index + 1];\n                            const b = imageData.data[index + 2];\n\n                            totalRed += r;\n                            totalGreen += g;\n                            totalBlue += b;\n                            count++;\n                        }\n                    }\n                }\n\n                // update the image data with the averaged pixel values\n                // these need to be weighted by the brush opacity\n                const averageRed = totalRed / count;\n                const averageGreen = totalGreen / count;\n                const averageBlue = totalBlue / count;\n                for (let y = 0; y < imageData.height; y++) {\n                    for (let x = 0; x < imageData.width; x++) {\n                        const index = (y * imageData.width + x) * 4;\n                        const distance = Math.sqrt(\n                            (x - brushSize / 2) * (x - brushSize / 2) +\n                                (y - brushSize / 2) * (y - brushSize / 2)\n                        );\n                        if (distance <= brushSize / 2) {\n                            imageData.data[index] =\n                                averageRed * brushOpacity +\n                                imageData.data[index] * (1 - brushOpacity);\n                            imageData.data[index + 1] =\n                                averageGreen * brushOpacity +\n                                imageData.data[index + 1] * (1 - brushOpacity);\n                            imageData.data[index + 2] =\n                                averageBlue * brushOpacity +\n                                imageData.data[index + 2] * (1 - brushOpacity);\n                        }\n                    }\n                }\n\n                // put the image data back on the edit layer\n                context.putImageData(\n                    imageData,\n                    x - brushSize / 2,\n                    y - brushSize / 2\n                );\n            }\n        }\n        this.render();\n    }\n\n    getPixel(x: number, y: number): string {\n        const context = this.baseImageLayer.getContext(\"2d\");\n        // get pixel as hex string\n        if (context) {\n            const pixel = context.getImageData(x, y, 1, 1).data;\n            return (\n                \"#\" +\n                (\"000000\" + rgbToHex(pixel[0], pixel[1], pixel[2])).slice(-6)\n            );\n        }\n        return \"#000000\";\n    }\n\n    copyEditImageFromBaseImage(): void {\n        // copy the base image to the edit layer\n        const context = this.editLayer.getContext(\"2d\");\n        if (context) {\n            context.drawImage(this.baseImageLayer, 0, 0);\n        }\n        this.render();\n        this.hasSelection = true;\n        this.notifySnapshotListener();\n    }\n\n    expandToOverlay() {\n        if (!this.selectionOverlay) {\n            throw new Error(\"No selection overlay\");\n        }\n        const minX = Math.min(0, this.selectionOverlay.x);\n        const minY = Math.min(0, this.selectionOverlay.y);\n        const maxX = Math.max(\n            this.selectionOverlay.x + this.selectionOverlay.width,\n            this.baseImageLayer.width\n        );\n        const maxY = Math.max(\n            this.selectionOverlay.y + this.selectionOverlay.height,\n            this.baseImageLayer.height\n        );\n        const width = maxX - minX;\n        const height = maxY - minY;\n\n        // create a new canvas with the expanded size\n        const newCanvas = document.createElement(\"canvas\");\n        newCanvas.width = width;\n        newCanvas.height = height;\n        // draw the base image on the new canvas.\n        // if overlay.x is negative, image.x is overlay.x * -1\n        // if overlay.x is 0 or positive, image.x is 0\n        // if overlay.y is negative, image.y is overlay.y * -1\n        // if overlay.y is 0 or positive, image.y is 0\n        const context = newCanvas.getContext(\"2d\");\n        if (context) {\n            context.drawImage(\n                this.baseImageLayer,\n                Math.max(0, this.selectionOverlay.x * -1),\n                Math.max(0, this.selectionOverlay.y * -1)\n            );\n        }\n        if (this.selectionOverlay.x < 0) {\n            this.selectionOverlay.x = 0;\n        }\n        if (this.selectionOverlay.y < 0) {\n            this.selectionOverlay.y = 0;\n        }\n        console.log(`new Canvas size: ${width} x ${height}`);\n        this.setBaseImage(newCanvas, false);\n    }\n}\n\nfunction rgbToHex(r: number, g: number, b: number) {\n    if (r > 255 || g > 255 || b > 255) throw \"Invalid color component\";\n    return ((r << 16) | (g << 8) | b).toString(16);\n}\n\nexport function createRenderer(canvas: HTMLCanvasElement): Renderer {\n    return new Renderer(canvas);\n}\n","// export interface AspectRatio {\n//     displayName: string;\n//     width: number;\n//     height: number;\n//     id: number;\n\n//     scale: (size: number) => AspectRatio;\n// }\n\nexport class AspectRatio implements AspectRatio {\n    readonly displayName: string;\n    readonly width: number;\n    readonly height: number;\n    readonly id: number;\n\n    constructor(cfg: any) {\n        this.displayName = cfg.displayName;\n        this.width = cfg.width;\n        this.height = cfg.height;\n        this.id = cfg.id;\n    }\n\n    scale(size: number): AspectRatio {\n        const newWidth = this.width * size;\n        const newHeight = this.height * size;\n\n        return new AspectRatio({\n            id: this.id,\n            displayName: this.displayName,\n            // round width and height up to the nearest multiple of 64\n            width: Math.ceil(newWidth / 64) * 64,\n            height: Math.ceil(newHeight / 64) * 64,\n        });\n    }\n}\n\nexport const DEFAULT_ASPECT_RATIO = 5;\n\nexport const aspectRatios: AspectRatio[] = [\n    {\n        displayName: \"4:1\",\n        width: 1024,\n        height: 256,\n        id: 0,\n    },\n    {\n        displayName: \"3:1\",\n        width: 768,\n        height: 256,\n        id: 1,\n    },\n    {\n        displayName: \"2:1\",\n        width: 640,\n        height: 320,\n        id: 2,\n    },\n    {\n        displayName: \"3:2\",\n        width: 576,\n        height: 384,\n        id: 3,\n    },\n    {\n        displayName: \"5:4\",\n        width: 640,\n        height: 512,\n        id: 4,\n    },\n    {\n        displayName: \"1:1\",\n        width: 512,\n        height: 512,\n        id: 5,\n    },\n    {\n        displayName: \"4:5\",\n        width: 512,\n        height: 640,\n        id: 6,\n    },\n    {\n        displayName: \"2:3\",\n        width: 384,\n        height: 576,\n        id: 7,\n    },\n    {\n        displayName: \"1:2\",\n        width: 320,\n        height: 640,\n        id: 8,\n    },\n    {\n        displayName: \"1:3\",\n        width: 256,\n        height: 768,\n        id: 9,\n    },\n    {\n        displayName: \"1:4\",\n        width: 256,\n        height: 1024,\n        id: 10,\n    }\n].map((cfg) => new AspectRatio(cfg));\n\nexport function getClosestAspectRatio(width: number, height: number): AspectRatio {\n    const aspectRatio = width / height;\n\n    const tests = [...aspectRatios];\n    tests.sort((a, b) => {\n        const aRatio = a.width / a.height;\n        const bRatio = b.width / b.height;\n        return (\n            Math.abs(aRatio - aspectRatio) -\n            Math.abs(bRatio - aspectRatio)\n        );\n    });\n    const bestMatch = tests[0];\n    return bestMatch;\n}\n\n\n","import { FC, useEffect, useState } from \"react\";\nimport { PaletteButton } from \"./PaletteButton\";\nimport { PencilTool } from \"./pencil-tool\";\nimport { Renderer } from \"./renderer\";\n\ninterface MaskEditorProps {\n    // renderer: Renderer;\n    tool: PencilTool;\n    onConfirm: () => void;\n    onRevert: () => void;\n}\n\nconst colors = [\"#FFFFFF\", \"#000000\"];\n\nexport const MaskEditor: FC<MaskEditorProps> = ({\n    // renderer,\n    tool,\n    onConfirm,\n    onRevert,\n}) => {\n    const [brushSize, setBrushSize] = useState(10);\n    const [brushColor, setBrushColor] = useState(colors[0]);\n\n    useEffect(() => {\n        tool.updateArgs({\n            brushSize,\n            brushColor,\n        });\n    }, [brushSize, brushColor]);\n\n    return (\n        <div style={{ marginTop: \"16px\" }}>\n            <div className=\"form-group\">\n                <label style={{ width: \"100%\" }}>\n                    Brush size\n                    <small\n                        className=\"form-text text-muted\"\n                        style={{ float: \"right\" }}\n                    >\n                        {brushSize}px\n                    </small>\n                </label>\n                <input\n                    type=\"range\"\n                    className=\"form-control-range\"\n                    min=\"1\"\n                    max=\"100\"\n                    value={brushSize}\n                    onChange={(e) => setBrushSize(parseInt(e.target.value))}\n                />\n            </div>\n            <div\n                style={{\n                    display: \"flex\",\n                    flexDirection: \"row\",\n                    flexWrap: \"wrap\",\n                }}\n            >\n                {colors.map((color, i) => (\n                    <PaletteButton\n                        key={i}\n                        selectedColor={brushColor}\n                        color={color}\n                        onClick={(color) => setBrushColor(color)}\n                    />\n                ))}\n            </div>\n            <div className=\"form-group\" style={{ marginTop: \"16px\" }}>\n                <i className=\"fa fa-info-circle\"></i>&nbsp;Masking: areas that\n                are painted white will be changed, areas that are painted black\n                will be left unchanged.\n            </div>\n            <div className=\"form-group\" style={{ marginTop: \"16px\" }}>\n                <button\n                    className=\"btn btn-secondary\"\n                    onClick={() => tool.renderer.invertMask()}\n                >\n                    Invert\n                </button>\n                <button\n                    className=\"btn btn-secondary\"\n                    onClick={onRevert}\n                    style={{ marginLeft: \"8px\" }}\n                >\n                    Cancel\n                </button>\n                <button\n                    className=\"btn btn-primary\"\n                    onClick={onConfirm}\n                    style={{ marginLeft: \"8px\" }}\n                >\n                    Save\n                </button>\n            </div>\n        </div>\n    );\n};\n","import React, { FC, useState, useEffect } from \"react\";\nimport loadImage from \"blueimp-load-image\";\nimport saveAs from \"file-saver\";\n\nimport { AIBrushApi } from \"../../client\";\nimport { Renderer } from \"./renderer\";\nimport { BaseTool, Tool } from \"./tool\";\n\ninterface Props {\n    renderer: Renderer;\n    tool: BaseTool;\n    api: AIBrushApi;\n}\n\nexport const ImportExportControls: FC<Props> = ({ renderer, tool }) => {\n\n    const [backupImage, setBackupImage] = useState<string | undefined>();\n\n    const onImageSelected = (event: React.ChangeEvent<HTMLInputElement>) => {\n        const files = event.target.files;\n        if (files && files.length > 0) {\n            loadImage(\n                files[0],\n                (img) => {\n                    const backupImage = renderer.getEncodedImage(null);\n                    setBackupImage(backupImage);\n                    renderer.setBaseImage(img as HTMLImageElement);\n                },\n                { canvas: false }\n            );\n        }\n    };\n\n    const onExport = () => {\n        const encodedImage = renderer.getEncodedImage(null);\n        if (encodedImage) {\n            // base64 decode\n            const byteString = atob(encodedImage);\n            // save as file\n            const buffer = new ArrayBuffer(byteString.length);\n            const intArray = new Uint8Array(buffer);\n            for (let i = 0; i < byteString.length; i++) {\n                intArray[i] = byteString.charCodeAt(i);\n            }\n            const blob = new Blob([intArray], { type: \"image/png\" });\n            saveAs(blob, \"image.png\");\n        }\n    };\n\n    if (backupImage) {\n        return (\n            <div className=\"form-group\" style={{marginTop: \"16px\"}}>\n                <button\n                    className=\"btn btn-primary\"\n                    onClick={() => {\n                        setBackupImage(undefined);\n                        const img = new Image();\n                        // set src as data uri\n                        const src = \"data:image/png;base64,\" + backupImage;\n                        img.src = src;\n                        img.onload = () => {\n                            renderer.setBaseImage(img);\n                        };\n                    }}\n                >\n                    {/* cancel icon */}\n                    <i className=\"fas fa-times\"></i>&nbsp;\n                    Revert\n                </button>\n                <button\n                    className=\"btn btn-primary\"\n                    onClick={() => {\n                        setBackupImage(undefined);\n                        if (tool.saveListener) {\n                            const encodedImage = renderer.getEncodedImage(null);\n                            if (encodedImage) {\n                                tool.saveListener(encodedImage);\n                            }\n                        }\n                    }}\n                    style={{marginLeft: \"8px\"}}\n                >\n                    {/* save icon */}\n                    <i className=\"fas fa-save\"></i>&nbsp;\n                    Save\n                </button>\n            </div>\n        );\n    }\n\n    // Show buttons for import and export and \"save a copy\"\n    return (\n        <>\n            <div className=\"form-group\" style={{marginTop: \"16px\"}}>\n                <label\n                    id=\"loadimage-wrapper\"\n                    className={`btn btn-primary `}\n                    style={{ display: \"inline\" }}\n                >\n                    {/* upload image */}\n                    <i className=\"fas fa-upload\"></i>&nbsp; Import Image\n                    <input\n                        id=\"loadimage\"\n                        type=\"file\"\n                        style={{ display: \"none\" }}\n                        onChange={onImageSelected}\n                    />\n                </label>\n            </div>\n            <div className=\"form-group\">\n                <button\n                    className=\"btn btn-primary\"\n                    onClick={() => {\n                        onExport();\n                    }}\n                    style={{ marginLeft: \"8px\"}}\n                >\n                    <i className=\"fas fa-download\"></i>&nbsp; Export Image\n                </button>\n            </div>\n        </>\n    );\n};\n","import React, { FC, useState, useEffect } from \"react\";\nimport loadImage from \"blueimp-load-image\";\nimport saveAs from \"file-saver\";\nimport axios from \"axios\";\nimport * as uuid from \"uuid\";\n\nimport { sleep } from \"../../lib/sleep\";\n\nimport {\n    AIBrushApi,\n    CreateImageInput,\n    ImageParamsAugmentationEnum,\n    Image as APIImage,\n    StatusEnum,\n} from \"../../client\";\nimport { Renderer } from \"./renderer\";\nimport { BaseTool, Tool } from \"./tool\";\nimport {\n    splitImage,\n    mergeTiles,\n    ImageUtilWorker,\n    imageDataToCanvas,\n    fixImageSize,\n    decodeImage,\n    binaryImageToDataBase64,\n    SplitResult,\n} from \"../../lib/imageutil\";\nimport { defaultArgs } from \"../../components/ImagePrompt\";\nimport { ErrorNotification } from \"../../components/Alerts\";\nimport moment from \"moment\";\nimport { calculateImagesCost } from \"../../lib/credits\";\nimport { CostIndicator } from \"../../components/CostIndicator\";\n\nexport const anonymousClient = axios.create();\n\ninterface Props {\n    renderer: Renderer;\n    tool: BaseTool;\n    api: AIBrushApi;\n    image: APIImage;\n}\n\nexport const AugmentControls: FC<Props> = ({ renderer, tool, api, image }) => {\n    const [backupImage, setBackupImage] = useState<string | undefined>();\n    const [activeAugmentation, setActiveAugmentation] = useState<\n        \"upscale\" | \"face_restore\" | null\n    >(null);\n    const [imageWorker, setImageWorker] = useState<\n        ImageUtilWorker | undefined\n    >();\n    const [error, setError] = useState<string | null>(null);\n    const [lastError, setLastError] = useState<number>(0);\n\n    useEffect(() => {\n        const imageWorker = new ImageUtilWorker();\n        setImageWorker(imageWorker);\n        return () => {\n            imageWorker.destroy();\n        };\n    }, []);\n\n    const augmentImageData = async (\n        imageData: ImageData,\n        augmentation: \"upscale\" | \"face_restore\"\n    ): Promise<ImageData> => {\n        if (!imageWorker) {\n            throw new Error(\"Image worker not initialized\");\n        }\n        let c = imageDataToCanvas(imageData);\n        let encodedImage = c.toDataURL(\"image/png\").split(\",\")[1];\n        c.remove();\n        const input: CreateImageInput = defaultArgs();\n        input.label = \"\";\n        // input.encoded_image = encodedImage;\n\n        const tmpInitImage = await api.createTemporaryImage(\"png\");\n        const binaryImageData = Buffer.from(encodedImage, \"base64\");\n        await anonymousClient.put(\n            tmpInitImage.data.upload_url!,\n            binaryImageData,\n            {\n                headers: {\n                    \"Content-Type\": \"image/png\",\n                },\n            }\n        );\n\n        input.tmp_image_id = tmpInitImage.data.id;\n        input.params.prompt = image.params.prompt;\n        input.params.negative_prompt = image.params.negative_prompt;\n        input.params.denoising_strength = 0.05;\n        input.count = 1;\n        input.model = \"stable_diffusion\";\n        input.nsfw = true;\n        input.temporary = true;\n        input.params.width = imageData.width;\n        input.params.height = imageData.height;\n        input.params.augmentation =\n            augmentation === \"upscale\"\n                ? ImageParamsAugmentationEnum.Upscale\n                : ImageParamsAugmentationEnum.FaceRestore;\n\n        const createResp = await api.createImage(input);\n        let processingImage = createResp.data.images![0];\n        while (processingImage.status !== StatusEnum.Completed) {\n            await sleep(2000);\n            const checkResp = await api.getImage(processingImage.id);\n            processingImage = checkResp.data;\n            if (processingImage.status === StatusEnum.Error) {\n                throw new Error(\"Augmentation failed\");\n            }\n        }\n        const downloadUrls = await api.getImageDownloadUrls(processingImage.id);\n\n        // download image data, convert to canvas and resize to 2x original,\n        // convert back to image data and return.\n        const imageDataResp = await anonymousClient.get(\n            downloadUrls.data.image_url!,\n            {\n                responseType: \"arraybuffer\",\n            }\n        );\n        encodedImage = binaryImageToDataBase64(imageDataResp.data);\n        const img = await decodeImage(encodedImage);\n        c = document.createElement(\"canvas\");\n        const upscaleFactor = augmentation === \"upscale\" ? 2 : 1;\n        c.width = imageData.width * upscaleFactor;\n        c.height = imageData.height * upscaleFactor;\n        const ctx = c.getContext(\"2d\")!;\n        ctx.drawImage(img, 0, 0, c.width, c.height);\n        const newImageData = ctx.getImageData(0, 0, c.width, c.height);\n        c.remove();\n        return newImageData;\n    };\n\n    const onAugment = async (augmentation: \"upscale\" | \"face_restore\") => {\n        setActiveAugmentation(augmentation);\n        setError(null);\n        try {\n            const backupImage = renderer.getEncodedImage(null);\n            setBackupImage(backupImage);\n            let imageData = renderer.getImageData(null);\n            if (!imageData) {\n                return;\n            }\n            // ensure width and height are multiples of 64\n            if ((imageData.width % 64) + (imageData.height % 64) !== 0) {\n                const c = fixImageSize(imageDataToCanvas(imageData));\n                imageData = c\n                    .getContext(\"2d\")!\n                    .getImageData(0, 0, c.width, c.height);\n            }\n\n            const newImageData = await augmentImageData(\n                imageData,\n                augmentation\n            );\n            const newCanvas = imageDataToCanvas(newImageData);\n            renderer.setBaseImage(newCanvas);\n            newCanvas.remove();\n        } catch (err: any) {\n            setError(err.message || \"Augmentation failed\");\n            setLastError(moment().valueOf());\n        } finally {\n            setActiveAugmentation(null);\n        }\n    };\n\n    if (activeAugmentation) {\n        return (\n            <div className=\"form-group\" style={{ marginTop: \"16px\" }}>\n                <i className=\"fas fa-spinner fa-spin\"></i>&nbsp;{\" \"}\n                {activeAugmentation === \"upscale\"\n                    ? \"Upscaling...\"\n                    : \"Restoring faces...\"}\n            </div>\n        );\n    }\n\n    if (backupImage) {\n        return (\n            <div className=\"form-group\" style={{ marginTop: \"16px\" }}>\n                <ErrorNotification message={error} timestamp={lastError} />\n                <button\n                    className=\"btn btn-primary\"\n                    onClick={() => {\n                        setBackupImage(undefined);\n                        const img = new Image();\n                        // set src as data uri\n                        const src = \"data:image/png;base64,\" + backupImage;\n                        img.src = src;\n                        img.onload = () => {\n                            renderer.setBaseImage(img);\n                        };\n                    }}\n                >\n                    {/* cancel icon */}\n                    <i className=\"fas fa-times\"></i>&nbsp; Revert\n                </button>\n                <button\n                    className=\"btn btn-primary\"\n                    onClick={() => {\n                        setBackupImage(undefined);\n                        if (tool.saveListener) {\n                            const encodedImage = renderer.getEncodedImage(null);\n                            if (encodedImage) {\n                                tool.saveListener(encodedImage);\n                            }\n                        }\n                    }}\n                    style={{ marginLeft: \"8px\" }}\n                >\n                    {/* save icon */}\n                    <i className=\"fas fa-save\"></i>&nbsp; Save\n                </button>\n            </div>\n        );\n    }\n\n    const maxSize = 2048 * 2048;\n    if (renderer.getWidth() * renderer.getHeight() > maxSize) {\n        return (\n            <div style={{ marginTop: \"16px\" }}>\n                This image is too large to augment.\n            </div>\n        );\n    }\n\n    const cost = calculateImagesCost(1, image.params.width!, image.params.height!);\n\n    // Show buttons for import and export and \"save a copy\"\n    return (\n        <>\n            <ErrorNotification message={error} timestamp={lastError} />\n            <div className=\"form-group\" style={{ marginTop: \"16px\" }}>\n                <button\n                    className=\"btn btn-primary\"\n                    onClick={() => {\n                        onAugment(\"upscale\");\n                    }}\n                    style={{ marginLeft: \"8px\" }}\n                >\n                    {/* upscale icon */}\n                    <i className=\"fas fa-arrows-alt\"></i>&nbsp; Upscale Image 2x\n                </button>\n            </div>\n            <div className=\"form-group\" style={{ marginTop: \"16px\" }}>\n                <button\n                    className=\"btn btn-primary\"\n                    onClick={() => {\n                        onAugment(\"face_restore\");\n                    }}\n                    style={{ marginLeft: \"8px\" }}\n                >\n                    {/* face restore icon */}\n                    <i className=\"fas fa-smile\"></i>&nbsp; Restore Faces\n                </button>\n            </div>\n            <div className=\"form-group\" style={{ marginTop: \"16px\" }}>\n                <CostIndicator imagesCost={cost} />\n            </div>\n        </>\n    );\n};\n","import React from \"react\";\nimport { Modal, Button } from \"react-bootstrap\";\nimport { Link, useHistory } from \"react-router-dom\";\n\ninterface OutOfCreditsModalProps {\n    show: boolean;\n    onHide: () => void;\n}\n\nconst OutOfCreditsModal: React.FC<OutOfCreditsModalProps> = ({\n    show,\n    onHide,\n}) => {\n    const history = useHistory();\n\n    const redirectToPricing = () => {\n        onHide();\n        history.push(\"/pricing\");\n    };\n\n    return (\n        <Modal show={show} onHide={onHide} centered>\n            <Modal.Header closeButton>\n                <Modal.Title>Out of Credits</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                Oops! It looks like you've run out of credits for today. But\n                don't worry, you'll receive 100 free credits tomorrow to\n                continue creating amazing images. Can't wait? Check out our\n                affordable <Link to=\"/pricing\">pricing options</Link> to get instant access to more credits\n                and unleash your creativity without limits!\n            </Modal.Body>\n            <Modal.Footer>\n                <Button variant=\"secondary\" onClick={onHide}>\n                    Close\n                </Button>\n                <Button variant=\"primary\" onClick={redirectToPricing}>\n                    Visit Pricing Page\n                </Button>\n            </Modal.Footer>\n        </Modal>\n    );\n};\n\nexport default OutOfCreditsModal;\n","import React, { useEffect, useState } from \"react\";\nimport { Modal, Button } from \"react-bootstrap\";\nimport { useHistory } from \"react-router-dom\";\n\ninterface PaymentStatusModalProps {\n    paymentStatus?: \"success\" | \"canceled\";\n}\n\nconst PaymentStatusModal: React.FC<PaymentStatusModalProps> = ({\n    paymentStatus,\n}) => {\n    const [show, setShow] = useState(false);\n    const history = useHistory();\n\n    useEffect(() => {\n        if (paymentStatus) {\n            setShow(true);\n        }\n    }, [paymentStatus]);\n\n    const handleClose = () => {\n        setShow(false);\n        history.push(\"/\");\n    };\n\n    return (\n        <Modal show={show} onHide={handleClose}>\n            <Modal.Header closeButton>\n                <Modal.Title>Payment Status</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                {paymentStatus === \"success\"\n                    ? \"Payment succeeded!\"\n                    : \"Payment canceled.\"}\n            </Modal.Body>\n            <Modal.Footer>\n                <Button variant=\"secondary\" onClick={handleClose}>\n                    Close\n                </Button>\n            </Modal.Footer>\n        </Modal>\n    );\n};\n\nexport default PaymentStatusModal;\n","export class RecentList {\n\n    private key: string;\n    private listSize: number;\n\n    constructor(key: string, listSize: number) {\n        this.key = key;\n        this.listSize = listSize;\n    }\n\n    private getRecentItems(): string[] {\n        const modelsJson = localStorage.getItem(this.key);\n        return modelsJson ? JSON.parse(modelsJson) : [];\n    }\n\n    private saveRecentItems(models: string[]): void {\n        localStorage.setItem(this.key, JSON.stringify(models));\n    }\n\n    addItem(model: string): (string | undefined) {\n        const recentModels = this.getRecentItems();\n        const modelIndex = recentModels.indexOf(model);\n\n        if (modelIndex !== -1) {\n            recentModels.splice(modelIndex, 1);\n        }\n\n        recentModels.unshift(model);\n\n        let removed: string | undefined;\n        if (recentModels.length > this.listSize) {\n            removed = recentModels.pop();\n        }\n\n        this.saveRecentItems(recentModels);\n        return removed;\n    }\n\n    getItems(): string[] {\n        return this.getRecentItems();\n    }\n\n    clear() {\n        this.saveRecentItems([]);\n    }\n}\n\nexport const recentModels = new RecentList(\"recent-models\", 20);\nexport const recentNegativePrompts = new RecentList(\"recent-negative-prompts\", 20);\nexport const recentPrompts = new RecentList(\"recent-positive-prompts\", 20);\nexport const recentLoras = new RecentList(\"recent-loras\", 200);","import React, { FC, useEffect, useRef, useState } from \"react\";\nimport { Modal } from \"react-bootstrap\";\nimport { propTypes } from \"react-bootstrap/esm/Image\";\n\ninterface Props {\n    show: boolean;\n    title?: string;\n}\n\n// Show modal with child contents\nexport const BusyModal: FC<Props> = ({ show, title, children }) => {\n    return (\n        <Modal show={show} backdrop=\"static\" keyboard={false}>\n            <Modal.Header closeButton>\n                <Modal.Title>{title || \"Processing\"}</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                {children || (\n                    <div className=\"d-flex justify-content-center\">\n                        <div className=\"spinner-border\" role=\"status\">\n                            <span className=\"sr-only\">Please Wait...</span>\n                        </div>\n                    </div>\n                )}\n            </Modal.Body>\n        </Modal>\n    );\n};\n","import moment from \"moment\";\n\nimport { Image } from \"../client\";\n\nexport interface LocalImage extends Image {\n    imageData?: string;\n}\n\n/**\n * This class uses indexedDB to store images locally.\n */\nexport class LocalImagesStore {\n    private db: IDBDatabase | null = null;\n\n    init(): Promise<void> {\n        return new Promise((resolve, reject) => {\n            const request = indexedDB.open(\"aibrush\", 4);\n            request.onupgradeneeded = (evt) => {\n                const db = request.result;\n                // create object store if it doesn't exist\n                // const imagesStore = db.createObjectStore(\"images\", { keyPath: \"id\" });\n                let imagesStore: IDBObjectStore;\n                if (!db.objectStoreNames.contains(\"images\")) {\n                    imagesStore = db.createObjectStore(\"images\", {\n                        keyPath: \"id\",\n                    });\n                } else {\n                    imagesStore = request.transaction?.objectStore(\n                        \"images\"\n                    ) as IDBObjectStore;\n                }\n                imagesStore.createIndex(\"updated_at\", \"updated_at\", {\n                    unique: false,\n                });\n                imagesStore.createIndex(\"deleted_at\", \"deleted_at\", {\n                    unique: false,\n                });\n                console.log(\"Local images store updated\");\n            };\n            request.onsuccess = (_) => {\n                this.db = request.result;\n                console.log(\"Local images store initialized\");\n                resolve();\n            };\n            request.onerror = (evt) => {\n                console.error(\"error opening indexeddb\", evt);\n                reject(evt);\n            };\n        });\n    }\n\n    // migrate old images to new format\n    private hydrateImage(image: LocalImage): LocalImage {\n        if (!image) {\n            return image;\n        }\n        if (!image.params) {\n            const legacyImage = image as any;\n            image.params = {\n                prompt: legacyImage.phrases.join(\", \"),\n                negative_prompt: legacyImage.negative_phrases.join(\", \"),\n                width: legacyImage.width,\n                height: legacyImage.height,\n                denoising_strength: legacyImage.stable_diffusion_strength,\n                steps: legacyImage.iterations,\n            }\n        }\n        return image;\n    }\n\n    async getImage(id: string): Promise<LocalImage | null> {\n        if (!this.db) {\n            throw new Error(\"not initialized\");\n        }\n        const transaction = this.db.transaction([\"images\"]);\n        const store = transaction.objectStore(\"images\");\n        const request = store.get(id);\n        return new Promise((resolve, reject) => {\n            request.onsuccess = (evt) => {\n                resolve(this.hydrateImage(request.result));\n            };\n            request.onerror = (evt) => {\n                console.error(\"error getting image\", evt);\n                reject(evt);\n            };\n        });\n    }\n\n    async saveImage(image: LocalImage): Promise<void> {\n        if (!this.db) {\n            throw new Error(\"not initialized\");\n        }\n        await this.cleanupDeletedImages();\n        const transaction = this.db.transaction([\"images\"], \"readwrite\");\n        const store = transaction.objectStore(\"images\");\n        const request = store.put({\n            ...image,\n            updated_at: moment().valueOf(),\n        });\n        return new Promise((resolve, reject) => {\n            request.onsuccess = (evt) => {\n                resolve();\n            };\n            request.onerror = (evt) => {\n                console.error(\"error saving image\", evt);\n                reject(evt);\n            };\n        });\n    }\n\n    async hardDeleteImage(id: string): Promise<void> {\n        if (!this.db) {\n            throw new Error(\"not initialized\");\n        }\n        const transaction = this.db.transaction([\"images\"], \"readwrite\");\n        const store = transaction.objectStore(\"images\");\n        const request = store.delete(id);\n        return new Promise((resolve, reject) => {\n            request.onsuccess = (evt) => {\n                console.log(`image ${id} permanently deleted`);\n                resolve();\n            };\n            request.onerror = (evt) => {\n                console.error(\"error deleting image\", evt);\n                reject(evt);\n            };\n        });\n    }\n\n    async deleteImage(id: string): Promise<void> {\n        if (!this.db) {\n            throw new Error(\"not initialized\");\n        }\n        // fetch the image first. If it has a deletedAt timestamp already, or if it's not\n        // in \"completed\" state, hard delete it. Otherwise, set the deletedAt timestamp.\n        const image = await this.getImage(id);\n        if (!image) {\n            console.error(\"image not found\", id);\n            return;\n        }\n        if (image.deleted_at || image.status !== \"completed\") {\n            return this.hardDeleteImage(id);\n        }\n        const transaction = this.db.transaction([\"images\"], \"readwrite\");\n        const store = transaction.objectStore(\"images\");\n        const request = store.put({\n            ...image,\n            deleted_at: moment().valueOf(),\n        });\n        return new Promise((resolve, reject) => {\n            request.onsuccess = (evt) => {\n                resolve();\n            };\n            request.onerror = (evt) => {\n                console.error(\"error deleting image\", evt);\n                reject(evt);\n            };\n        });\n    }\n\n    async listImages(\n        updated_at: number,\n        direction: IDBCursorDirection,\n        count: number,\n        search: string\n    ): Promise<LocalImage[]> {\n        // use updated_at index\n        if (!this.db) {\n            throw new Error(\"not initialized\");\n        }\n        const transaction = this.db.transaction([\"images\"]);\n        const store = transaction.objectStore(\"images\");\n        const index = store.index(\"updated_at\");\n        const range =\n            direction == \"next\"\n                ? IDBKeyRange.lowerBound(updated_at)\n                : IDBKeyRange.upperBound(updated_at);\n        const request = index.openCursor(range, direction);\n        return new Promise((resolve, reject) => {\n            const images: LocalImage[] = [];\n            request.onsuccess = (evt) => {\n                const cursor = request.result;\n                if (cursor) {\n                    const image: LocalImage = this.hydrateImage(cursor.value);\n                    const prompt = (image.params.prompt || \"\").toLowerCase();\n                    if (\n                        !image.deleted_at &&\n                        (!search || prompt.includes(search.toLowerCase()))\n                    ) {\n                        images.push(image);\n                    }\n                    if (images.length < count) {\n                        cursor.continue();\n                    } else {\n                        resolve(images);\n                    }\n                } else {\n                    resolve(images);\n                }\n            };\n            request.onerror = (evt) => {\n                console.error(\"error listing images\", evt);\n                reject(evt);\n            };\n        });\n    }\n\n    async clearImages(): Promise<void> {\n        // clear from both indexes\n        if (!this.db) {\n            throw new Error(\"not initialized\");\n        }\n        const transaction = this.db.transaction([\"images\"], \"readwrite\");\n        const imagesStore = transaction.objectStore(\"images\");\n        const imagesRequest = imagesStore.clear();\n        return new Promise((resolve, reject) => {\n            imagesRequest.onsuccess = (evt) => {\n                resolve();\n            };\n            imagesRequest.onerror = (evt) => {\n                console.error(\"error clearing images\", evt);\n                reject(evt);\n            };\n        });\n    }\n\n    async getDeletedImages(olderThan?: number): Promise<LocalImage[]> {\n        if (!this.db) {\n            throw new Error(\"not initialized\");\n        }\n        // refactor to use deleted_at index\n        const transaction = this.db.transaction([\"images\"]);\n        const store = transaction.objectStore(\"images\");\n        const index = store.index(\"deleted_at\");\n        // const request = index.openCursor();\n        // get cursor for all deleted_at values\n        const request = index.openCursor(\n            olderThan\n                ? IDBKeyRange.upperBound(olderThan)\n                : IDBKeyRange.lowerBound(1),\n            olderThan ? \"prev\" : \"next\"\n        );\n        return new Promise((resolve, reject) => {\n            const images: LocalImage[] = [];\n            request.onsuccess = (evt) => {\n                const cursor = request.result;\n                if (cursor) {\n                    const image: LocalImage = cursor.value;\n                    if (images.length < 50 && image.deleted_at) {\n                        images.push(cursor.value);\n                    }\n                    cursor.continue();\n                } else {\n                    resolve(images);\n                }\n            };\n            request.onerror = (evt) => {\n                console.error(\"error listing images\", evt);\n                reject(evt);\n            };\n        });\n    }\n\n    async clearDeletedImages(): Promise<void> {\n        if (!this.db) {\n            throw new Error(\"not initialized\");\n        }\n        let deletedImages = await this.getDeletedImages();\n        while (deletedImages.length > 0) {\n            // hard delete all deleted images\n            const promises = deletedImages.map((image) => {\n                return this.hardDeleteImage(image.id);\n            });\n            await Promise.all(promises);\n            deletedImages = await this.getDeletedImages();\n        }\n    }\n\n    async cleanupDeletedImages(): Promise<void> {\n        // delete images that are more than 1 day old\n        let deletedImages = await this.getDeletedImages(\n            moment().subtract(1, \"hours\").valueOf()\n        );\n        while (deletedImages.length > 0) {\n            // hard delete all deleted images\n            const promises = deletedImages.map((image) => {\n                return this.hardDeleteImage(image.id);\n            });\n            await Promise.all(promises);\n            deletedImages = await this.getDeletedImages(\n                moment().subtract(1, \"hours\").valueOf()\n            );\n        }\n    }\n}\n","// Login react component with hooks\nimport React, { useState, FC } from \"react\";\nimport * as axios from \"axios\";\nimport qs from \"qs\";\nimport { AIBrushApi, LoginResult } from \"../client/api\";\n\nconsole.log(process.env)\nconst DISCORD_CLIENT_ID = \"1043951225944678490\";\n\ninterface LoginProps {\n    client: AIBrushApi;\n    onLogin: (loginResult: LoginResult) => void;\n}\n\nexport const Login: FC<LoginProps> = (props) => {\n    // login form accepts email only\n    const [email, setEmail] = useState(\"\");\n    const [emailSubmitted, setEmailSubmitted] = useState(false);\n    const [code, setCode] = useState(\"\");\n    const [err, setErr] = useState(\"\");\n\n    // check query string for invite_code\n    const query = window.location.search;\n    const queryParams = qs.parse(query.substring(1));\n    const inviteCode = queryParams[\"invite_code\"];\n\n    const onLogin = async () => {\n        // clear error\n        setErr(\"\");\n        // validate valid email\n        if (!email.match(/^[^@]+@[^@]+\\.[^@]+$/)) {\n            setErr(\"Invalid email address\");\n            return;\n        }\n\n        try {\n            await props.client.login({\n                email: email,\n                invite_code: inviteCode as string,\n            });\n            setEmailSubmitted(true);\n        } catch (err) {\n            console.error(err);\n            setErr(\"Could not login\");\n        }\n    };\n\n    const discordLink = () => {\n        // localhost url:\n        // https://discord.com/api/oauth2/authorize?client_id=1043951225944678490&redirect_uri=http%3A%2F%2Flocalhost%3A3001%2Fdiscord-login&response_type=code&scope=identify%20email\n        // prod url:\n        // https://discord.com/api/oauth2/authorize?client_id=1043951225944678490&redirect_uri=https%3A%2F%2Fwww.aibrush.art%2Fdiscord-login&response_type=code&scope=identify%20email\n        const host = window.location.host;\n        const protocol = window.location.protocol;\n        const redirectUri = `${protocol}//${host}/discord-login`;\n        const url = `https://discord.com/api/oauth2/authorize?client_id=${DISCORD_CLIENT_ID}&redirect_uri=${redirectUri}&response_type=code&scope=identify%20email`;\n        return url;\n    };\n\n    const onVerify = async () => {\n        // clear error\n        setErr(\"\");\n        // attempt to verify code\n        try {\n            const result = await props.client.verify({\n                email,\n                code,\n            });\n            props.onLogin(result.data);\n        } catch (err) {\n            console.error(err);\n            setErr(\"Failed to verify code\");\n        }\n    };\n\n    // bootstrap login form\n    return (\n        <>\n            <div\n                className=\"row\"\n                style={{\n                    height: \"100vh\",\n                    marginLeft: \"0px\",\n                    marginRight: \"0px\",\n                }}\n            >\n                <div className=\"col-md-6 login-splash\">\n                    {/* <div className=\"center-cropped\" style={{backgroundImage: \"url(/images/scifi-dreamland.png)\"}}></div> */}\n                    <img\n                        className=\"center-cropped\"\n                        src=\"/images/scifi-dreamland.png\"\n                    />\n                </div>\n                <div className=\"col-md-6\">\n                    <div\n                        style={{\n                            fontWeight: 500,\n                            fontSize: \"48px\",\n                            marginTop: \"200px\",\n                        }}\n                    >\n                        AiBrush\n                    </div>\n\n                    <div\n                        style={{\n                            marginLeft: \"10%\",\n                            marginRight: \"10%\",\n                            marginTop: \"88px\",\n                            marginBottom: \"24px\",\n                        }}\n                    >\n                        Login With Email\n                    </div>\n                    {/* Display error if one is set */}\n                    {/* Use <p class=\"text-danger\" */}\n                    {err && <p className=\"text-danger\">{err}</p>}\n                    {err && (\n                        <p className=\"text-info\">\n                            If you don't have an account yet, request one by\n                            sending an email to{\" \"}\n                            <a href=\"mailto:admin@aibrush.art\">\n                                admin@aibrush.art\n                            </a>\n                        </p>\n                    )}\n                    <div\n                        style={{\n                            marginLeft: \"10%\",\n                            marginRight: \"10%\",\n                            marginTop: \"24px\",\n                            textAlign: \"left\",\n                        }}\n                    >\n                        {/* If email submitted, show verify code form*/}\n                        {emailSubmitted && (\n                            <>\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"verifyCode\">\n                                        Verify Code\n                                    </label>\n                                    <input\n                                        type=\"text\"\n                                        className=\"form-control\"\n                                        id=\"verifyCode\"\n                                        placeholder=\"Verification Code\"\n                                        value={code}\n                                        onChange={(e) =>\n                                            setCode(e.target.value)\n                                        }\n                                    />\n                                </div>\n                                {/* Cancel verification and go back to email */}\n                                <button\n                                    className=\"btn btn-secondary\"\n                                    onClick={() => setEmailSubmitted(false)}\n                                >\n                                    Cancel\n                                </button>\n                                &nbsp;\n                                {/* Verify code */}\n                                <button\n                                    type=\"button\"\n                                    className=\"btn btn-primary\"\n                                    onClick={(e) => {\n                                        e.preventDefault();\n                                        onVerify();\n                                    }}\n                                >\n                                    Verify\n                                </button>\n                            </>\n                        )}\n                        {/* Else, show login form */}\n                        {!emailSubmitted && (\n                            <>\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"email\">Email address</label>\n                                    <input\n                                        type=\"email\"\n                                        className=\"form-control\"\n                                        id=\"email\"\n                                        aria-describedby=\"emailHelp\"\n                                        placeholder=\"Enter email\"\n                                        value={email}\n                                        onChange={(e) =>\n                                            setEmail(e.target.value.trim())\n                                        }\n                                    />\n                                </div>\n                                <button\n                                    type=\"button\"\n                                    className=\"btn btn-primary\"\n                                    style={{ float: \"right\" }}\n                                    onClick={(e) => {\n                                        e.preventDefault();\n                                        onLogin();\n                                    }}\n                                >\n                                    Login\n                                </button>\n                            </>\n                        )}\n                    </div>\n                    <div\n                        style={{\n                            marginLeft: \"10%\",\n                            marginRight: \"10%\",\n                            marginTop: \"88px\",\n                            marginBottom: \"24px\",\n                        }}\n                    >\n                        <hr/>\n                        OR\n                    </div>\n                    <div\n                        style={{\n                            marginLeft: \"10%\",\n                            marginRight: \"10%\",\n                            marginTop: \"24px\",\n                        }}\n                    >\n                        <a href={discordLink()} className=\"btn btn-primary\">\n                            <i className=\"fab fa-discord\"></i> Login With Discord\n                        </a>\n                    </div>\n                </div>\n            </div>\n        </>\n    );\n};\n","// Given a set of credentials, this component will refresh them\n// every 5 minutes and invoke the onCredentialsRefreshed callback\n\nimport React, { useEffect, FC } from \"react\"\nimport { LoginResult, AIBrushApi } from \"../client/api\";\n\ninterface TokenRefresherProps {\n    onCredentialsRefreshed: (loginResult: LoginResult) => void;\n    onCredentialsExpired: () => void;\n    api: AIBrushApi;\n    credentials: LoginResult;\n}\n\nexport const TokenRefresher : FC<TokenRefresherProps> = ({ onCredentialsRefreshed, onCredentialsExpired, api, credentials }) => {\n    useEffect(() => {\n        const interval = setInterval(() => {\n            if (credentials && credentials.refreshToken) {\n                api.refresh({refreshToken: credentials.refreshToken}).then(loginResult => {\n                    onCredentialsRefreshed(loginResult.data);\n                }).catch(() => {\n                    onCredentialsExpired();\n                });\n            }\n\n        }, 5 * 60 * 1000);\n        return () => {\n            clearInterval(interval);\n        };\n    }, [credentials, api, onCredentialsRefreshed]);\n    return <div></div>;\n}","import React, { FC, useEffect, useState } from 'react';\nimport { AIBrushApi } from \"../client/api\";\n\ninterface HealthcheckerProps {\n    api: AIBrushApi;\n}\n\nexport const Healthchecker: FC<HealthcheckerProps> = ({ api }) => {\n    // automatically check health every 5 seconds\n    const [healthCheck, setHealthCheck] = useState(true);\n    \n    useEffect(() => {\n        const interval = setInterval(() => {\n            api.healthcheck().then(() => setHealthCheck(true)).catch(() => setHealthCheck(false));\n        }, 5000);\n\n        return () => clearInterval(interval);\n    }, [api]);\n\n    // only display bootstrap danger alert if healthcheck failed\n    // \"service is unavailable\"\n    return (\n        <div className=\"alert alert-danger\" role=\"alert\" style={{ display: healthCheck ? 'none' : 'block' }}>\n            <strong>Looks like we're having some trouble reaching the server.</strong>\n        </div>\n    );\n}\n\n","import React, { useState } from \"react\";\nimport { Button, Form, InputGroup, Alert } from \"react-bootstrap\";\nimport { AIBrushApi, CreateDepositCodeInput } from \"../../client/api\";\nimport CopyToClipboard from \"react-copy-to-clipboard\";\n\ninterface Props {\n    api: AIBrushApi;\n}\n\nconst GenerateCode: React.FC<Props> = ({ api }) => {\n    const [amount, setAmount] = useState<number>(100);\n    const [generatedCode, setGeneratedCode] = useState<string | null>(null);\n    const [copied, setCopied] = useState<boolean>(false);\n\n    const handleSubmit = async (event: React.FormEvent) => {\n        event.preventDefault();\n\n        const input: CreateDepositCodeInput = { amount };\n        const result = await api.createDepositCode(input);\n        setGeneratedCode(result.data.code);\n    };\n\n    const handleCopy = () => {\n        setCopied(true);\n        setTimeout(() => setCopied(false), 3000);\n    };\n\n    return (\n        <div>\n            <h4>Generate deposit code</h4>\n            <Form onSubmit={handleSubmit} style={{marginTop: \"16px\"}}>\n                <InputGroup className=\"mb-3\">\n                    {/* amount label */}\n                    <label style={{fontSize: \"24px\", marginRight: \"8px\"}}>Amount:</label>\n                    <Form.Control\n                        type=\"number\"\n                        placeholder=\"Amount\"\n                        value={amount}\n                        onChange={(e) => setAmount(parseInt(e.target.value))}\n                    />\n                    <InputGroup.Append>\n                        <Button\n                            variant=\"primary\"\n                            type=\"submit\"\n                            style={{ marginLeft: \"16px\" }}\n                        >\n                            Generate Code\n                        </Button>\n                    </InputGroup.Append>\n                </InputGroup>\n            </Form>\n\n            {generatedCode && (\n                <div className=\"mb-3\">\n                    <strong>Generated Code: </strong> {generatedCode}\n                    <CopyToClipboard text={generatedCode} onCopy={handleCopy}>\n                        <Button variant=\"secondary\" className=\"ml-2\">\n                            Copy to clipboard\n                        </Button>\n                    </CopyToClipboard>\n                </div>\n            )}\n\n            {copied && (\n                <Alert variant=\"success\">Code copied to clipboard!</Alert>\n            )}\n        </div>\n    );\n};\n\nexport default GenerateCode;\n","import { FC, useEffect, useState } from \"react\";\nimport { AIBrushApi } from \"../../client/api\";\nimport { WorkerSettings, WorkerSettingsJson } from \"../../lib/globalSettings\";\n\ninterface Props {\n    api: AIBrushApi;\n}\n\n// global settings all have a \"settings_key\" and \"settings_json\" field. settings_json is any.\n\n// default \"workers\" setting:\n// {\n//     \"minimum_worker_allocations\": {\n//         \"stable_diffusion\": 0,\n//         \"stable_diffusion_inpainting\": 0,\n//         \"swinir\": 0,\n//     }\n// }\n\nexport const GlobalSettings: FC<Props> = ({ api }) => {\n    const [workerSettings, setWorkerSettings] = useState<WorkerSettingsJson>({\n        minimum_worker_allocations: {\n            stable_diffusion: 0,\n            stable_diffusion_inpainting: 0,\n            swinir: 0,\n        },\n    });\n    const [saving, setSaving] = useState<boolean>(false);\n\n    const loadWorkerSettings = async () => {\n        const settings = await api.getGlobalSettings(\"workers\");\n        setWorkerSettings(settings.data.settings_json as any);\n    };\n\n    const saveWorkerSettings = async () => {\n        setSaving(true);\n        try {\n            await api.updateGlobalSettings(\"workers\", {\n                settings_json: workerSettings,\n            });\n        } finally {\n            setSaving(false);\n        }\n    };\n\n    useEffect(() => {\n        loadWorkerSettings();\n    }, []);\n\n    return (\n        <div style={{paddingBottom: \"48px\"}}>\n            {/* Header: Create new image */}\n            <div className=\"row\">\n                <div className=\"col-12\">\n                    <h1>Global Settings</h1>\n                </div>\n            </div>\n            {/* 50px vertical spacer */}\n            <div className=\"row\">\n                <div className=\"col-12\">\n                    <div className=\"spacer\" />\n                </div>\n            </div>\n            {/* slider from 0 to 10 for each model */}\n            <div className=\"row\">\n                <div className=\"col-12\">\n                    <label htmlFor=\"stable_diffusion\">\n                        stable_diffusion: {workerSettings.minimum_worker_allocations.stable_diffusion}\n                    </label>\n                    <input\n                        style={{marginLeft: \"16px\"}}\n                        type=\"range\"\n                        min={0}\n                        max={10}\n                        value={workerSettings.minimum_worker_allocations.stable_diffusion}\n                        className=\"form-range\"\n                        id=\"stable_diffusion\"\n                        onChange={(e) => {\n                            setWorkerSettings({\n                                ...workerSettings,\n                                minimum_worker_allocations: {\n                                    ...workerSettings.minimum_worker_allocations,\n                                    stable_diffusion: parseInt(e.target.value),\n                                },\n                            });\n                        }}\n                    />\n                </div>\n            </div>\n            <div className=\"row\">\n                <div className=\"col-12\">\n                    <label htmlFor=\"stable_diffusion_inpainting\">\n                        stable_diffusion_inpainting: {workerSettings.minimum_worker_allocations.stable_diffusion_inpainting}\n                    </label>\n                    <input\n                        style={{marginLeft: \"16px\"}}\n                        type=\"range\"\n                        min={0}\n                        max={10}\n                        value={workerSettings.minimum_worker_allocations.stable_diffusion_inpainting}\n                        className=\"form-range\"\n                        id=\"stable_diffusion_inpainting\"\n                        onChange={(e) => {\n                            setWorkerSettings({\n                                ...workerSettings,\n                                minimum_worker_allocations: {\n                                    ...workerSettings.minimum_worker_allocations,\n                                    stable_diffusion_inpainting: parseInt(e.target.value),\n                                },\n                            });\n                        }}\n                    />\n                </div>\n            </div>\n            <div className=\"row\">\n                <div className=\"col-12\">\n                    <label htmlFor=\"swinir\">\n                        swinir: {workerSettings.minimum_worker_allocations.swinir}\n                    </label>\n                    <input\n                        style={{marginLeft: \"16px\"}}\n                        type=\"range\"\n                        min={0}\n                        max={10}\n                        value={workerSettings.minimum_worker_allocations.swinir}\n                        className=\"form-range\"\n                        id=\"swinir\"\n                        onChange={(e) => {\n                            setWorkerSettings({\n                                ...workerSettings,\n                                minimum_worker_allocations: {\n                                    ...workerSettings.minimum_worker_allocations,\n                                    swinir: parseInt(e.target.value),\n                                },\n                            });\n                        }}\n                    />\n                </div>\n            </div>\n            \n            \n            {/* bottom row: save button */}\n            <div className=\"row\">\n                <div className=\"col-12\">\n                    <button className=\"btn btn-primary\" onClick={saveWorkerSettings} disabled={saving}>\n                        {saving ? <>\n                            <i className=\"fas fa-spinner fa-spin\" />\n                            &nbsp; Saving...\n                        </> : \"Save\"}\n                    </button>\n                </div>\n            </div>\n        </div>\n    );\n};","import React, { FC, useState, useEffect, useRef } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { AIBrushApi } from \"../../client/api\";\nimport GenerateCode from \"./GenerateCode\";\nimport { GlobalSettings } from \"./GlobalSettings\";\n\ninterface Props {\n    api: AIBrushApi;\n}\n\nexport const Admin: FC<Props> = ({ api }) => {\n    const [links, setLinks] = useState<string[]>([]);\n\n    const onGenerateLink = async () => {\n        const inviteCode = await api.createInviteCode();\n        setLinks([...links, `/?invite_code=${inviteCode.data.id}`]);\n    };\n\n    return (\n        <div style={{ paddingBottom: \"48px\" }}>\n            {/* Header: Create new image */}\n            <div className=\"row\">\n                <div className=\"col-12\">\n                    <h1>Admin features</h1>\n                </div>\n            </div>\n            {/* 50px vertical spacer */}\n            <div className=\"row\">\n                <div className=\"col-12\">\n                    <div className=\"spacer\" />\n                </div>\n            </div>\n            <div className=\"row\">\n                <div className=\"col-12\">\n                    <div\n                        className=\"d-flex justify-content-center align-items-center\"\n                        style={{ height: \"100%\" }}\n                    >\n                        <GenerateCode api={api} />\n                    </div>\n                </div>\n            </div>\n            <hr />\n            <GlobalSettings api={api} />\n        </div>\n    );\n};\n","import React, { FC, useEffect, useState } from \"react\";\nimport { AIBrushApi, Image } from \"../client\";\nimport moment from \"moment\";\nimport { ImageThumbnail } from \"../components/ImageThumbnail\";\nimport { useHistory } from \"react-router-dom\";\nimport { BusyModal } from \"../components/BusyModal\";\n\ninterface Props {\n    api: AIBrushApi;\n    assetsUrl: string;\n}\n\nexport const DeletedImages: FC<Props> = ({ api, assetsUrl }) => {\n    const [images, setImages] = useState<Image[]>([]);\n    const [deleting, setDeleting] = useState(false);\n\n    const history = useHistory();\n\n    const loadImages = async () => {\n        const cursor = moment().add(-24, \"hours\").valueOf();\n        // TODO: special api call for deleted images?\n        const resp = await api.listImages(cursor, \"\", 100, \"asc\");\n        setImages(\n            (\n                resp.data.images?.filter((image) => !!image.deleted_at) || []\n            ).sort((a, b) => {\n                if (a.deleted_at && b.deleted_at) {\n                    return b.deleted_at - a.deleted_at;\n                }\n                return 0;\n            })\n        );\n    };\n\n    const onDeleteImage = async (image: Image) => {\n        setImages(images.filter((i) => i.id !== image.id));\n        await api.deleteImage(image.id);\n    };\n\n    const onDeleteAllImages = async () => {\n        setDeleting(true);\n        try {\n            await Promise.all(images.map((image) => api.deleteImage(image.id)));\n            setImages([]);\n        } finally {\n            setDeleting(false);\n        }\n    };\n\n    const onRestoreImage = async (image: Image) => {\n        setImages(images.filter((i) => i.id !== image.id));\n        await api.updateImage(image.id, { deleted_at: null });\n    };\n\n    useEffect(() => {\n        loadImages();\n    }, [api]);\n\n    return (\n        <div>\n            <div>\n                <div className=\"row\">\n                    <div className=\"col-12\">\n                        <h1 style={{ fontSize: \"40px\", textAlign: \"left\" }}>\n                            <i\n                                style={{ cursor: \"pointer\" }}\n                                onClick={() => history.goBack()}\n                                className=\"fas fa-chevron-left\"\n                            ></i>\n                            &nbsp; Deleted Images\n                        </h1>\n                        {/* float right \"delete all\" button */}\n                        <button\n                            className=\"btn btn-danger btn-sm image-popup-delete-button\"\n                            onClick={onDeleteAllImages}\n                            style={{\n                                float: \"right\",\n                                marginRight: \"8px\",\n                            }}\n                        >\n                            <i className=\"fa fa-trash\"></i>&nbsp;Delete All\n                        </button>\n                    </div>\n                </div>\n                <div className=\"row\" style={{ marginTop: \"32px\" }}>\n                    <div className=\"col-sm-2 offset-sm-2\">Image</div>\n                    <div className=\"col-sm-8\">Action</div>\n                </div>\n                {images.map((image) => (\n                    <div\n                        className=\"row\"\n                        style={{\n                            marginTop: \"16px\",\n                            borderBottom: \"1px solid #303030\",\n                        }}\n                        key={image.id}\n                    >\n                        <div className=\"col-sm-2 offset-sm-2\">\n                            <ImageThumbnail\n                                assetsUrl={assetsUrl}\n                                image={image}\n                                censorNSFW={true}\n                            />\n                        </div>\n                        <div\n                            className=\"col-sm-8\"\n                            style={{\n                                paddingTop: \"64px\",\n                                paddingBottom: \"64px\",\n                            }}\n                        >\n                            <button\n                                className=\"btn btn-danger btn-sm image-popup-delete-button\"\n                                onClick={() => onDeleteImage(image)}\n                                style={{\n                                    marginRight: \"8px\",\n                                }}\n                            >\n                                <i className=\"fa fa-trash\"></i>&nbsp;Delete\n                            </button>\n                            <button\n                                className=\"btn btn-primary btn-sm image-popup-restore-button\"\n                                onClick={() => onRestoreImage(image)}\n                            >\n                                <i className=\"fa fa-undo\"></i>&nbsp;Restore\n                            </button>\n                        </div>\n                    </div>\n                ))}\n            </div>\n            <BusyModal show={deleting} title=\"Deleting Images\">\n                Please wait while we delete all images...\n            </BusyModal>\n        </div>\n    );\n};\n","import React, { useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { AIBrushApi, LoginResult } from \"../client\";\n\ninterface LoginProps {\n    client: AIBrushApi;\n    onLogin: (loginResult: LoginResult) => void;\n}\n\nexport const DiscordLogin: React.FC<LoginProps> = ({client, onLogin}) => {\n    const history = useHistory();\n    const code = new URLSearchParams(window.location.search).get(\"code\");\n    \n    useEffect(() => {\n        if (code) {\n            console.log(\"logging in with code\", code);\n            client.discordLogin({code}).then((result) => {\n                console.log(\"login result\", result);\n                if (result.data.accessToken) {\n                    onLogin(result.data);\n                }\n                \n                history.push(\"/\");\n            });\n        } else {\n            history.push(\"/\");\n        }\n    }, [])\n\n    return null;\n}","import React, { FC, useEffect, useState } from \"react\";\nimport { AIBrushApi, Image } from \"../client\";\nimport moment from \"moment\";\nimport { ImageThumbnail } from \"../components/ImageThumbnail\";\nimport { useHistory } from \"react-router-dom\";\nimport { LocalImagesStore } from \"../lib/localImagesStore\";\nimport { BusyModal } from \"../components/BusyModal\";\n\ninterface Props {\n    localImages: LocalImagesStore;\n}\n\nexport const LocalDeletedImages: FC<Props> = ({ localImages }) => {\n    const [images, setImages] = useState<Image[]>([]);\n    const [deleting, setDeleting] = useState(false);\n\n    const history = useHistory();\n\n    const loadImages = async () => {\n        const deletedImages = await localImages.getDeletedImages();\n        setImages(deletedImages);\n    };\n\n    const onDeleteImage = async (image: Image) => {\n        setImages(images.filter((i) => i.id !== image.id));\n        await localImages.deleteImage(image.id);\n        if (images.length <= 5) {\n            loadImages();\n        }\n    };\n\n    const onDeleteAllImages = async () => {\n        setDeleting(true);\n        try {\n            await localImages.clearDeletedImages();\n            setImages([]);\n        } finally {\n            setDeleting(false);\n        }\n    };\n\n    const onRestoreImage = async (image: Image) => {\n        setImages(images.filter((i) => i.id !== image.id));\n        await localImages.saveImage({\n            ...image,\n            deleted_at: undefined,\n        });\n    };\n\n    useEffect(() => {\n        loadImages();\n    }, [localImages]);\n\n    return (\n        <div>\n            <div>\n                <div className=\"row\">\n                    <div className=\"col-12\">\n                        <h1 style={{ fontSize: \"40px\", textAlign: \"left\" }}>\n                            <i\n                                style={{ cursor: \"pointer\" }}\n                                onClick={() => history.goBack()}\n                                className=\"fas fa-chevron-left\"\n                            ></i>\n                            &nbsp; Deleted Images\n                        </h1>\n                        <button\n                            className=\"btn btn-danger btn-sm image-popup-delete-button\"\n                            onClick={onDeleteAllImages}\n                            style={{\n                                float: \"right\",\n                                marginRight: \"8px\",\n                            }}\n                        >\n                            <i className=\"fa fa-trash\"></i>&nbsp;Delete All\n                        </button>\n                    </div>\n                </div>\n                <div className=\"row\" style={{ marginTop: \"32px\" }}>\n                    <div className=\"col-sm-2 offset-sm-2\">Image</div>\n                    <div className=\"col-sm-8\">Action</div>\n                </div>\n                {images.map((image) => (\n                    <div\n                        className=\"row\"\n                        style={{\n                            marginTop: \"16px\",\n                            borderBottom: \"1px solid #303030\",\n                        }}\n                        key={image.id}\n                    >\n                        <div className=\"col-sm-2 offset-sm-2\">\n                            <ImageThumbnail\n                                assetsUrl={\"\"}\n                                image={image}\n                                censorNSFW={true}\n                            />\n                        </div>\n                        <div\n                            className=\"col-sm-8\"\n                            style={{\n                                paddingTop: \"64px\",\n                                paddingBottom: \"64px\",\n                            }}\n                        >\n                            <button\n                                className=\"btn btn-danger btn-sm image-popup-delete-button\"\n                                onClick={() => onDeleteImage(image)}\n                                style={{\n                                    marginRight: \"8px\",\n                                }}\n                            >\n                                <i className=\"fa fa-trash\"></i>&nbsp;Delete\n                            </button>\n                            <button\n                                className=\"btn btn-primary btn-sm image-popup-restore-button\"\n                                onClick={() => onRestoreImage(image)}\n                            >\n                                <i className=\"fa fa-undo\"></i>&nbsp;Restore\n                            </button>\n                        </div>\n                    </div>\n                ))}\n            </div>\n            <BusyModal show={deleting} title=\"Deleting Images\">\n                Please wait while we delete all images...\n            </BusyModal>\n        </div>\n    );\n};\n","// V2 page\nimport React, { FC, useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport Dropdown from \"react-bootstrap/Dropdown\";\nimport { useParams, useHistory, Link } from \"react-router-dom\";\nimport moment from \"moment\";\nimport ScrollToTop from \"react-scroll-to-top\";\nimport { AIBrushApi } from \"../client\";\nimport { CreateImageInput, Image, StatusEnum } from \"../client/api\";\nimport { ImageThumbnail } from \"../components/ImageThumbnail\";\nimport { ImagePrompt, defaultArgs } from \"../components/ImagePrompt\";\nimport {\n    createEncodedThumbnail,\n    encodedImageToBlob,\n    uploadBlob,\n} from \"../lib/imageutil\";\n\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport { ImagePopup } from \"../components/ImagePopup\";\nimport { BusyModal } from \"../components/BusyModal\";\nimport { PendingImagesThumbnail } from \"../components/PendingImagesThumbnail\";\nimport { PendingImages } from \"../components/PendingImages\";\nimport {\n    ApiSocket,\n    NOTIFICATION_IMAGE_DELETED,\n    NOTIFICATION_IMAGE_UPDATED,\n} from \"../lib/apisocket\";\nimport { ImagesCache } from \"../lib/imagesCache\";\n\ninterface Props {\n    api: AIBrushApi;\n    apiSocket: ApiSocket;\n    assetsUrl: string;\n}\n\nconst savedImagesCache = new ImagesCache();\n\nexport const SavedImagesPage: FC<Props> = ({ api, apiSocket, assetsUrl }) => {\n    const [creating, setCreating] = useState(false);\n    const [selectedImage, setSelectedImage] = useState<Image | null>(null);\n    const [parentImage, setParentImage] = useState<Image | null>(null);\n\n    const [showPendingImages, setShowPendingImages] = useState(false);\n\n    const [images, setImages] = useState<Array<Image>>([]);\n    const [err, setErr] = useState<string | null>(null);\n    const [hasMore, setHasMore] = useState<boolean>(true);\n    const [search, setSearch] = useState<string>(\"\");\n    const [searchDebounce, setSearchDebounce] = useState<string>(\"\");\n\n    const [bulkDeleteSelecting, setBulkDeleteSelecting] = useState(false);\n    const [bulkDeleting, setBulkDeleting] = useState(false);\n    const [bulkDeleteIds, setBulkDeleteIds] = useState<{\n        [key: string]: boolean;\n    }>({});\n\n    const [censorNSFW, setCensorNSFW] = useState(true);\n\n    const { id } = useParams<{ id?: string }>();\n    const history = useHistory();\n\n    useEffect(() => {\n        let handle = setTimeout(() => {\n            setSearch(searchDebounce);\n        }, 500);\n        return () => {\n            clearTimeout(handle);\n        };\n    }, [searchDebounce]);\n\n    useEffect(() => {\n        if (id) {\n            // check if the image is already loaded\n            const image = images.find((image) => image.id === id);\n            if (image) {\n                setSelectedImage(image);\n            }\n            // refresh\n            api.getImage(id).then((image) => {\n                setSelectedImage(image.data);\n            });\n        } else {\n            setSelectedImage(null);\n        }\n    }, [id]);\n\n    const onSubmit = async (input: CreateImageInput) => {\n        setCreating(true);\n        setParentImage(null);\n        setErr(null);\n        window.scrollTo(0, 0);\n        try {\n            await api.createImage(input);\n        } catch (e: any) {\n            console.error(e);\n            setErr(\"Error creating image\");\n        } finally {\n            setCreating(false);\n        }\n    };\n\n    const onEditNewImage = async (input: CreateImageInput) => {\n        setCreating(true);\n        setParentImage(null);\n        setErr(null);\n        window.scrollTo(0, 0);\n        try {\n            const encodedImage = input.encoded_image!;\n            const encodedThumbnail = await createEncodedThumbnail(encodedImage);\n            const newImages = await api.createImage({\n                ...input,\n                encoded_image: undefined,\n            });\n            if (newImages.data.images) {\n                const image = newImages.data.images![0];\n                const uploadUrls = await api.getImageUploadUrls(image.id);\n                // convert base64 encoded image to binary to upload as image/png with axios\n                const blob = encodedImageToBlob(encodedImage);\n                const thumbnailBlob = encodedImageToBlob(encodedThumbnail);\n                const imagePromise = uploadBlob(\n                    uploadUrls.data.image_url!,\n                    blob\n                );\n                const thumbnailPromise = uploadBlob(\n                    uploadUrls.data.thumbnail_url!,\n                    thumbnailBlob\n                );\n                await Promise.all([imagePromise, thumbnailPromise]);\n\n                history.push(`/image-editor/${image.id}`);\n            }\n        } catch (e: any) {\n            console.error(e);\n            setErr(\"Error creating image\");\n        } finally {\n            setCreating(false);\n        }\n    };\n\n    const onNSFW = (image: Image, nsfw: boolean) => {\n        api.updateImage(image.id, { nsfw }).then((res) => {\n            setImages((images) => {\n                return images.map((i) => {\n                    if (i.id === image.id) {\n                        return res.data;\n                    }\n                    return i;\n                });\n            });\n            setSelectedImage(res.data);\n        });\n    };\n\n    useEffect(() => {\n        if (!api) {\n            return;\n        }\n        const loadImages = async () => {\n            console.log(\"Initial load images\");\n            // clear error\n            setErr(null);\n            setHasMore(true);\n            try {\n                const cursor = moment().add(1, \"minutes\").valueOf();\n                // const resp = await api.listImages(cursor, search, 100, \"desc\");\n                const imagesResult = await savedImagesCache.listImages(\n                    api,\n                    cursor,\n                    search,\n                    100,\n                    \"desc\"\n                );\n                if (imagesResult) {\n                    console.log(\"Initial load images\", imagesResult.length);\n                    setImages(imagesResult.sort(sortImages));\n                }\n                return 0;\n            } catch (err) {\n                setErr(\"Could not load images\");\n                console.error(err);\n            }\n        };\n        loadImages();\n    }, [api, search]);\n\n    useEffect(() => {\n        if (!api) {\n            return;\n        }\n\n        const pollImages = async (images: Array<Image>) => {\n            // clear error\n            setErr(null);\n            // set cursor to max updated_at from images\n            const cursor = images.reduce((max, image) => {\n                return Math.max(max, image.updated_at);\n            }, 0);\n\n            try {\n                const imagesResult = await savedImagesCache.listImages(\n                    api,\n                    cursor + 1,\n                    search,\n                    100,\n                    \"asc\"\n                );\n                if (imagesResult) {\n                    let latestCursor = cursor;\n                    for (let image of imagesResult) {\n                        if (image.updated_at > latestCursor) {\n                            latestCursor = image.updated_at;\n                        }\n                    }\n\n                    // split resp.data.images into \"new\" and \"updated\" lists\n                    // image is \"new\" if it's not in images\n                    const newImages = imagesResult.filter((image) => {\n                        return images.findIndex((i) => i.id === image.id) < 0;\n                    });\n                    const updatedImages = imagesResult.filter((image) => {\n                        return images.findIndex((i) => i.id === image.id) >= 0;\n                    });\n                    setImages((images) => {\n                        const deletedIds: { [key: string]: boolean } = {};\n                        for (let image of newImages) {\n                            if (image.deleted_at) {\n                                deletedIds[image.id] = true;\n                                console.log(\n                                    `Deleting image ${image.id} from list`\n                                );\n                            }\n                        }\n                        for (let image of updatedImages) {\n                            if (image.deleted_at) {\n                                deletedIds[image.id] = true;\n                                console.log(\n                                    `Deleting image ${image.id} from list`\n                                );\n                            }\n                        }\n                        images = images.filter(\n                            (image) => !deletedIds[image.id]\n                        );\n                        return [\n                            ...images.map((image) => {\n                                const updatedImage = updatedImages.find(\n                                    (i) => i.id === image.id\n                                );\n                                if (updatedImage) {\n                                    return updatedImage;\n                                }\n                                return image;\n                            }),\n                            ...newImages.filter((image) => !image.deleted_at),\n                        ].sort(sortImages);\n                    });\n                }\n                return images;\n            } catch (err) {\n                setErr(\"Could not load images\");\n                console.error(err);\n            }\n        };\n\n        // polling is now a fallback for when the websocket connection fails\n        const timerHandle = setInterval(() => {\n            pollImages(images);\n        }, 60 * 1000);\n        return () => {\n            clearInterval(timerHandle);\n        };\n    }, [api, images, search]);\n\n    useEffect(() => {\n        // de-duplicate images by id\n        // first check if there are any duplicates\n        // I know, I should figure out where the duplicates are coming from,\n        // but I'm lazy.\n        const ids = images.map((image) => image.id);\n        const uniqueIds = new Set(ids);\n        if (ids.length !== uniqueIds.size) {\n            setImages((images) => {\n                // there are duplicates\n                const uniqueImages = images.filter((image, index) => {\n                    return ids.indexOf(image.id) === index;\n                });\n                return uniqueImages.sort(sortImages);\n            });\n        }\n    }, [images]);\n\n    useEffect(() => {\n        const onMessage = async (message: string) => {\n            const payload = JSON.parse(message);\n            if (\n                payload.type === NOTIFICATION_IMAGE_UPDATED ||\n                payload.type === NOTIFICATION_IMAGE_DELETED\n            ) {\n                const updatedImage = await api.getImage(payload.id);\n                if (updatedImage.data.temporary) {\n                    return;\n                }\n                setImages((images) => {\n                    const index = images.findIndex(\n                        (image) => image.id === updatedImage.data.id\n                    );\n                    let updatedImages = images;\n                    if (index >= 0) {\n                        updatedImages = images.map((image) => {\n                            if (image.id === updatedImage.data.id) {\n                                return updatedImage.data;\n                            }\n                            return image;\n                        });\n                    } else {\n                        updatedImages = [...images, updatedImage.data];\n                    }\n                    return updatedImages.sort(sortImages);\n                });\n            }\n        };\n        apiSocket.addMessageListener(onMessage);\n        return () => {\n            apiSocket.removeMessageListener(onMessage);\n        };\n    }, [apiSocket]);\n\n    const isPendingOrProcessing = (image: Image) => {\n        return (\n            image.status === StatusEnum.Pending ||\n            image.status === StatusEnum.Processing\n        );\n    };\n\n    const sortImages = (a: Image, b: Image) => {\n        // pending and processing images always come first\n        if (isPendingOrProcessing(a) && !isPendingOrProcessing(b)) {\n            return -1;\n        } else if (!isPendingOrProcessing(a) && isPendingOrProcessing(b)) {\n            return 1;\n        }\n        // if the parent is the same, sort by score descending\n        // otherwise, sort by updated_at\n        if (\n            a.parent === b.parent &&\n            a.params.prompt == b.params.prompt &&\n            a.status !== StatusEnum.Pending &&\n            b.status !== StatusEnum.Pending\n        ) {\n            // if the score is the same, sort by updated_at\n            let aScore = a.score;\n            let bScore = b.score;\n            // working around a bug where negative score was assigned\n            // for an empty negative prompt.\n            if (a.params.prompt!.trim() !== \"\") {\n                aScore = aScore - a.negative_score;\n            }\n            if (b.params.prompt!.trim() !== \"\") {\n                bScore = bScore - b.negative_score;\n            }\n            if (aScore == bScore) {\n                return b.updated_at - a.updated_at;\n            }\n            return bScore - aScore;\n        }\n\n        return b.updated_at - a.updated_at;\n    };\n\n    const onLoadMore = async () => {\n        // get the minimum updated_at from images\n        let minUpdatedAt = moment().valueOf();\n        images.forEach((image) => {\n            minUpdatedAt = Math.min(minUpdatedAt, image.updated_at);\n        });\n        // load images in descending order from updated_at\n        let imagesResult = await savedImagesCache.listImages(\n            api,\n            minUpdatedAt - 1,\n            search,\n            100,\n            \"desc\"\n        );\n        if (imagesResult && imagesResult.length > 0) {\n            // combine images with new images and sort by updated_at descending\n            setImages((images) => {\n                const imagesById = images.reduce((acc, image) => {\n                    acc[image.id] = image;\n                    return acc;\n                }, {} as { [key: string]: Image });\n                imagesResult = (imagesResult || []).filter(\n                    (image) => !imagesById[image.id]\n                );\n                return [...images, ...(imagesResult || [])].sort(sortImages);\n            });\n        } else {\n            setHasMore(false);\n        }\n    };\n\n    const onDelete = async (image: Image) => {\n        try {\n            await api.deleteImage(image.id);\n        } catch (e) {\n            console.error(e);\n            setErr(\"Error deleting image\");\n        }\n    };\n\n    const onFork = async (image: Image) => {\n        history.push({\n            pathname: \"/\",\n            search: `?parent=${image.id}`,\n        });\n    };\n\n    const onEdit = async (image: Image) => {\n        history.push(`/image-editor/${image.id}`);\n    };\n\n    const onThumbnailClicked = (image: Image) => {\n        // setSelectedImage(image);\n        if (bulkDeleteSelecting) {\n            setBulkDeleteIds({\n                ...bulkDeleteIds,\n                [image.id]: !bulkDeleteIds[image.id],\n            });\n        } else {\n            history.push(`/saved/${image.id}`);\n        }\n    };\n\n    const handleCancelFork = () => {\n        setParentImage(null);\n        window.scrollTo(0, 0);\n    };\n\n    const onConfirmBulkDelete = async () => {\n        try {\n            setBulkDeleting(true);\n            // await api.deleteImages(Object.keys(bulkDeleteIds));\n            const promises = Object.keys(bulkDeleteIds).map((id) => {\n                return api.deleteImage(id);\n            });\n            await Promise.all(promises);\n            setImages((images) => {\n                return images.filter((image) => !bulkDeleteIds[image.id]);\n            });\n            setBulkDeleteIds({});\n            setBulkDeleteSelecting(false);\n        } catch (e) {\n            console.error(e);\n            setErr(\"Error deleting images\");\n        } finally {\n            setBulkDeleting(false);\n        }\n    };\n\n    const completedOrSavedImages = images.filter((image) => {\n        return (\n            !image.deleted_at &&\n            (image.status === StatusEnum.Completed ||\n                image.status === StatusEnum.Saved)\n        );\n    });\n\n    const pendingOrProcessingImages = images.filter(\n        (image) =>\n            !image.deleted_at &&\n            (image.status === StatusEnum.Pending ||\n                image.status === StatusEnum.Processing)\n    );\n\n    const pendingImages = pendingOrProcessingImages.filter(\n        (image) => image.status === StatusEnum.Pending\n    );\n\n    const processingImages = pendingOrProcessingImages.filter(\n        (image) => image.status === StatusEnum.Processing\n    );\n\n    const onSwipe = (image: Image, direction: number) => {\n        // select the previous or next image from the currently selected one\n        const index = images.findIndex((i) => i.id === image.id);\n        if (index === -1) {\n            return;\n        }\n        const newIndex = index + direction;\n        if (newIndex < 0 || newIndex >= images.length) {\n            return;\n        }\n        const newImage = images[newIndex];\n        onThumbnailClicked(newImage);\n    }\n\n    return (\n        <>\n            <h1 style={{ fontSize: \"40px\", textAlign: \"left\" }}>\n                Welcome to AiBrush - Saved\n            </h1>\n\n            <div\n                className=\"saved-images\"\n                style={{ marginTop: \"48px\", paddingBottom: \"48px\" }}\n            >\n                <div style={{ textAlign: \"left\" }}>\n                    <div\n                        className=\"input-group\"\n                        style={{ marginBottom: \"16px\" }}\n                    >\n                        <input\n                            style={{}}\n                            value={searchDebounce}\n                            type=\"search\"\n                            className=\"form-control image-search\"\n                            placeholder=\"Search...\"\n                            onChange={(e) => setSearchDebounce(e.target.value)}\n                        />\n\n                        <div\n                            style={{\n                                float: \"right\",\n                            }}\n                        >\n                            {!bulkDeleteSelecting && (\n                                <>\n                                    <button\n                                        style={{ display: \"inline\" }}\n                                        className=\"btn btn-primary image-popup-button\"\n                                        onClick={() =>\n                                            setCensorNSFW(!censorNSFW)\n                                        }\n                                    >\n                                        {!censorNSFW && (\n                                            <i className=\"fas fa-eye\"></i>\n                                        )}\n                                        {censorNSFW && (\n                                            <i className=\"fas fa-eye-slash\"></i>\n                                        )}\n                                    </button>\n                                    <Dropdown\n                                        style={{\n                                            display: \"inline\",\n                                            marginLeft: \"8px\",\n                                        }}\n                                    >\n                                        <Dropdown.Toggle variant=\"danger\">\n                                            <i className=\"fas fa-trash\"></i>\n                                        </Dropdown.Toggle>\n\n                                        <Dropdown.Menu>\n                                            <Dropdown.Item\n                                                onClick={() =>\n                                                    setBulkDeleteSelecting(true)\n                                                }\n                                            >\n                                                Bulk Delete\n                                            </Dropdown.Item>\n                                            <Dropdown.Item\n                                                onClick={() =>\n                                                    history.push(\n                                                        \"/deleted-images\"\n                                                    )\n                                                }\n                                            >\n                                                View Deleted Images\n                                            </Dropdown.Item>\n                                        </Dropdown.Menu>\n                                    </Dropdown>\n                                </>\n                            )}\n                            {bulkDeleteSelecting && (\n                                <>\n                                    <button\n                                        className=\"btn btn-primary image-popup-button\"\n                                        onClick={() => {\n                                            setBulkDeleteSelecting(false);\n                                            setBulkDeleteIds({});\n                                        }}\n                                    >\n                                        Cancel\n                                    </button>\n                                    <button\n                                        style={{ marginLeft: \"8px\" }}\n                                        className=\"btn image-popup-delete-button\"\n                                        onClick={() => {\n                                            onConfirmBulkDelete();\n                                        }}\n                                    >\n                                        Delete\n                                    </button>\n                                </>\n                            )}\n                        </div>\n                    </div>\n                </div>\n                <InfiniteScroll\n                    dataLength={images.length}\n                    next={onLoadMore}\n                    hasMore={hasMore}\n                    loader={\n                        <>\n                            <hr />\n                            <h4>Loading...</h4>\n                        </>\n                    }\n                >\n                    {pendingOrProcessingImages.length > 0 && (\n                        <PendingImagesThumbnail\n                            pendingCount={pendingImages.length}\n                            processingCount={processingImages.length}\n                            onClick={() => {\n                                setShowPendingImages(true);\n                            }}\n                        />\n                    )}\n                    {completedOrSavedImages.map((image) => (\n                        <ImageThumbnail\n                            key={image.id}\n                            image={image}\n                            assetsUrl={assetsUrl}\n                            onClick={onThumbnailClicked}\n                            bulkDelete={\n                                bulkDeleteSelecting && bulkDeleteIds[image.id]\n                            }\n                            censorNSFW={censorNSFW}\n                        />\n                    ))}\n                </InfiniteScroll>\n            </div>\n\n            {selectedImage && (\n                <ImagePopup\n                    assetsUrl={assetsUrl}\n                    image={selectedImage}\n                    onClose={() => history.push(\"/saved\")}\n                    onDelete={(image) => {\n                        onDelete(image);\n                        setImages(images.filter((i) => i.id !== image.id));\n                        history.push(\"/saved\");\n                    }}\n                    onFork={(image) => {\n                        onFork(image);\n                    }}\n                    onEdit={(image) => {\n                        onEdit(image);\n                    }}\n                    onNSFW={onNSFW}\n                    censorNSFW={censorNSFW}\n                    onSwipe={onSwipe}\n                />\n            )}\n            <ScrollToTop />\n            <BusyModal show={creating} title=\"Creating images\">\n                <p>Please wait while we create your image.</p>\n            </BusyModal>\n            <BusyModal show={bulkDeleting} title=\"Deleting images\">\n                <p>Please wait while we delete your images.</p>\n            </BusyModal>\n            <PendingImages\n                images={pendingOrProcessingImages}\n                onCancel={() => setShowPendingImages(false)}\n                show={showPendingImages}\n                onDeleteImage={(image) => {\n                    onDelete(image);\n                    setImages(images.filter((i) => i.id !== image.id));\n                }}\n            />\n        </>\n    );\n};\n","\n\n// const imagesCache = new KVStore({\n//     dbName: \"saved-images\",\n//     storeName: \"images\",\n// })\n\nimport { AIBrushApi, Image } from \"../client\";\nimport { KVStore } from \"./kvstore\";\n\nexport class ImagesCache {\n\n    private kvstore: KVStore<Image>;\n\n    constructor() {\n        this.kvstore = new KVStore<Image>({\n            dbName: \"saved-images\",\n            storeName: \"images\",\n        });\n    }\n\n    async listImages(api: AIBrushApi, cursor: number, search: string, limit: number, order: \"asc\" | \"desc\"): Promise<Image[] | undefined> {\n        const resp = await api.listImages(cursor, search, limit, order, \"id,updated_at,deleted_at\");\n        if (!resp.data.images) {\n            return undefined;\n        }\n\n        const result: Image[] = [];\n        const batchGetIds: string[] = [];\n        for (const image of resp.data.images) {\n            if (image.deleted_at) {\n                await this.kvstore.deleteItem(image.id);\n            } else {\n                const savedImage = await this.kvstore.getItem(image.id);\n                if (savedImage && savedImage.updated_at === image.updated_at) {\n                    result.push(savedImage);\n                } else {\n                    batchGetIds.push(image.id);\n                }\n            }\n        }\n        if (batchGetIds.length > 0) {\n            const batchResult = await api.batchGetImages(undefined, {\n                ids: batchGetIds,\n            });\n            if (batchResult.data.images) {\n                for (const image of batchResult.data.images) {\n                    await this.kvstore.setItem(image.id, image);\n                    result.push(image);\n                }\n            }\n        }\n        return result;\n    }\n}","import { useEffect, useState, FC } from \"react\";\nimport loadImage from \"blueimp-load-image\";\nimport {\n    splitImage,\n    mergeTiles,\n    SplitResult,\n    ImageUtilWorker,\n} from \"../lib/imageutil\";\nimport * as uuid from \"uuid\";\n\nexport const TestPage: FC = () => {\n    const [originalImage, setOriginalImage] = useState<string | undefined>();\n    const [upscaledImage, setUpscaledImage] = useState<string | undefined>();\n    const [imageWorker, setImageWorker] = useState<\n        ImageUtilWorker | undefined\n    >();\n\n    useEffect(() => {\n        const imageWorker = new ImageUtilWorker();\n        setImageWorker(imageWorker);\n        return () => {\n            imageWorker.destroy();\n        };\n    }, []);\n\n    const imageDataToCanvas = (imageData: ImageData): HTMLCanvasElement => {\n        const canvas = document.createElement(\"canvas\");\n        canvas.width = imageData.width;\n        canvas.height = imageData.height;\n        const ctx = canvas.getContext(\"2d\");\n        if (!ctx) {\n            throw new Error(\"Could not get canvas context\");\n        }\n        ctx.putImageData(imageData, 0, 0);\n        return canvas;\n    };\n\n    const upscaleImageData = (imageData: ImageData): HTMLCanvasElement => {\n        console.log(\"upscaling image data\", imageData.width, imageData.height);\n        const canvas = document.createElement(\"canvas\");\n        canvas.width = imageData.width * 2;\n        canvas.height = imageData.height * 2;\n        const ctx = canvas.getContext(\"2d\");\n        if (!ctx) {\n            throw new Error(\"Could not get canvas context\");\n        }\n        const image = imageDataToCanvas(imageData);\n        ctx.drawImage(image, 0, 0, canvas.width, canvas.height);\n        return canvas;\n    };\n\n    const onImageSelected = async (\n        event: React.ChangeEvent<HTMLInputElement>\n    ) => {\n        if (!imageWorker) {\n            throw new Error(\"Image worker not initialized\");\n        }\n        const files = event.target.files;\n        if (files && files.length > 0) {\n            loadImage(\n                files[0],\n                async (img) => {\n                    const c = img as HTMLCanvasElement;\n                    const originalImage = c.toDataURL(\"image/png\");\n                    setOriginalImage(originalImage);\n\n                    const ctx = c.getContext(\"2d\");\n                    if (ctx) {\n                        const originalImageData = ctx.getImageData(\n                            0,\n                            0,\n                            c.width,\n                            c.height\n                        );\n                        const splitResult = splitImage(originalImageData);\n                        if (!splitResult) {\n                            setUpscaledImage(originalImage);\n                            return;\n                        }\n                        console.log(\"splitResult\", {\n                            numTilesX: splitResult.numTilesX,\n                            numTilesY: splitResult.numTilesY,\n                            tileSize: splitResult.tileSize,\n                        });\n                        splitResult.tileSize *= 2;\n                        splitResult.imageWidth *= 2;\n                        splitResult.imageHeight *= 2;\n                        for (let x = 0; x < splitResult.numTilesX; x++) {\n                            for (let y = 0; y < splitResult.numTilesY; y++) {\n                                const tile = splitResult.tiles[x][y];\n                                const upscaledTile = upscaleImageData(tile);\n                                const upscaledImageData = upscaledTile\n                                .getContext(\"2d\")!\n                                .getImageData(\n                                    0,\n                                    0,\n                                    upscaledTile.width,\n                                    upscaledTile.height\n                                );\n                                const id = uuid.v4();\n                                const feathered =\n                                    await imageWorker.processRequest({\n                                        id,\n                                        alphaMode: \"none\",\n                                        feather: true,\n                                        width: splitResult.imageWidth,\n                                        height: splitResult.imageHeight,\n                                        pixels: upscaledImageData.data,\n                                        selectionOverlay: {\n                                            x:\n                                                x *\n                                                (splitResult.tileSize - 64),\n                                            y:\n                                                y *\n                                                (splitResult.tileSize - 64),\n                                            width: upscaledTile.width,\n                                            height: upscaledTile.height,\n                                        },\n                                        upscale: true,\n                                        featherWidth: 64,\n                                    });\n\n                                splitResult.tiles[x][y] = new ImageData(feathered.pixels, upscaledTile.width, upscaledTile.height)\n                            }\n                        }\n                        const upscaledImageData = mergeTiles(splitResult);\n                        console.log(\n                            \"upscaled image data size\",\n                            upscaledImageData.width,\n                            upscaledImageData.height\n                        );\n                        const upscaledCanvas =\n                            imageDataToCanvas(upscaledImageData);\n                        const upscaledImage =\n                            upscaledCanvas.toDataURL(\"image/png\");\n                        setUpscaledImage(upscaledImage);\n                    }\n                },\n                { canvas: true }\n            );\n        }\n    };\n\n    return (\n        <div>\n            <input type=\"file\" onChange={onImageSelected} />\n            {originalImage && upscaledImage && (\n                <div>\n                    Original:\n                    <br />\n                    <img src={originalImage} />\n                    <br />\n                    Upscaled:\n                    <br />\n                    <img src={upscaledImage} />\n                </div>\n            )}\n        </div>\n    );\n};\n","import {FC, useEffect, useState} from \"react\";\nimport { AIBrushApi } from \"../client\";\nimport { ApiSocket, NOTIFICATION_CREDITS_UPDATED } from \"../lib/apisocket\";\n\ninterface Props {\n    api: AIBrushApi;\n    apisocket: ApiSocket;\n}\n\n// TODO: restore when refactoring to kudos\n// this component should fetch the credits balance {free_credits, paid_credits} from the server on mount.\n// it should also subscribe to the apisocket to receive updates to the credits balance (NOTIFICATION_CREDITS_UPDATED).\n// display paid credits above, free credits below.\n\nexport const CreditsBalance: FC<Props> = ({api, apisocket}) => {\n    // const [credits, setCredits] = useState({free_credits: 0, paid_credits: 0});\n\n    // useEffect(() => {\n    //     const fetchCredits = async () => {\n    //         const credits = await api.getCredits();\n    //         setCredits(credits.data);\n    //     };\n    //     fetchCredits();\n    //     const pollHandle = setInterval(fetchCredits, 60000);\n\n    //     const onMessage = (message: string) => {\n    //         const data = JSON.parse(message);\n    //         if (data.type === NOTIFICATION_CREDITS_UPDATED) {\n    //             fetchCredits();\n    //         }\n    //     }\n    //     apisocket.addMessageListener(onMessage);\n\n    //     return () => {\n    //         clearInterval(pollHandle);\n    //         apisocket.removeMessageListener(onMessage);\n    //     }\n    // }, [api, apisocket]);\n\n    // return (\n    //     <div>\n    //         <div style={{color: \"#00f0f0\"}}>\n    //             <span>Paid credits: </span>\n    //             <span>{credits.paid_credits}</span>\n    //         </div>\n    //         <div>\n    //             <span>Free credits: </span>\n    //             <span>{credits.free_credits}</span>\n    //         </div>\n    //     </div>\n    // );\n    return <></>;\n};","import React, { useState, useEffect } from \"react\";\nimport * as axios from \"axios\";\nimport { BrowserRouter, Switch, Route, Link } from \"react-router-dom\";\nimport \"./App.css\";\nimport \"./bootstrap.min.css\";\nimport { AIBrushApi, LoginResult, FeatureList } from \"./client/api\";\nimport { LocalImagesStore } from \"./lib/localImagesStore\";\nimport { getConfig } from \"./config\";\nimport { Login } from \"./pages/Login\";\nimport { TokenRefresher } from \"./components/TokenRefresher\";\nimport { Healthchecker } from \"./components/Healthchecker\";\nimport { Admin } from \"./pages/admin/Admin\";\nimport { ImageEditor } from \"./pages/image-editor/ImageEditor\";\nimport { DeletedImages } from \"./pages/DeletedImages\";\n\n// V2 UI\nimport { Homepage } from \"./pages/Homepage\";\nimport { ApiSocket } from \"./lib/apisocket\";\nimport { DiscordLogin } from \"./pages/DiscordLogin\";\nimport { LocalDeletedImages } from \"./pages/LocalDeletedImages\";\nimport { SavedImagesPage } from \"./pages/SavedImagesPage\";\nimport { TestPage } from \"./pages/TestPage\";\nimport { CreditsBalance } from \"./components/CreditsBalance\";\n\nconst config = getConfig();\nconst httpClient = axios.default.create();\nconst client = new AIBrushApi(\n    undefined,\n    localStorage.getItem(\"apiUrl\") || config.apiUrl,\n    httpClient\n);\nconst apiSocket: ApiSocket = new ApiSocket();\nconst localImages = new LocalImagesStore();\n\nfunction updateHttpClient(loginResult: LoginResult) {\n    if (loginResult.accessToken) {\n        httpClient.defaults.headers.common[\n            \"Authorization\"\n        ] = `Bearer ${loginResult.accessToken}`;\n    }\n}\n\nfunction App() {\n    const [credentials, setCredentials] = useState<LoginResult | null>(null);\n    const [assetsUrl, setAssetsUrl] = useState<string>(\"/api/images\");\n    const [isAdmin, setIsAdmin] = useState<boolean>(false);\n    const [features, setFeatures] = useState<FeatureList | null>(null);\n\n    const onLogout = () => {\n        setCredentials(null);\n        localStorage.removeItem(\"credentials\");\n        httpClient.defaults.headers.common[\"Authorization\"] = undefined;\n    };\n\n    const init = async () => {\n        console.log(\"App.init\");\n        await localImages.init();\n        client\n            .getAssetsUrl()\n            .then((result) => setAssetsUrl(result.data.assets_url));\n        client.getFeatures().then((result) => setFeatures(result.data));\n        const storedCredentials = localStorage.getItem(\"credentials\");\n        if (storedCredentials) {\n            // attempt to refresh token\n            try {\n                const credentials = JSON.parse(\n                    storedCredentials\n                ) as LoginResult;\n                updateHttpClient(credentials);\n                const result = await client.refresh({\n                    refreshToken: credentials.refreshToken,\n                });\n                setCredentials(result.data);\n\n                // save to storage\n                localStorage.setItem(\n                    \"credentials\",\n                    JSON.stringify(result.data)\n                );\n                updateHttpClient(result.data);\n                const isAdmin = await client.isAdmin();\n                setIsAdmin(!!isAdmin.data.is_admin);\n                apiSocket.updateToken(result.data.accessToken!);\n                apiSocket.connect();\n            } catch (e: any) {\n                console.log(e);\n                // if this is a 401, then the refresh token is expired\n                if (e.response && e.response.status === 401) {\n                    localStorage.removeItem(\"credentials\");\n                }\n            }\n        }\n    };\n\n    const onLogin = async (credentials: LoginResult) => {\n        localStorage.setItem(\"credentials\", JSON.stringify(credentials));\n        setCredentials(credentials);\n        updateHttpClient(credentials);\n        apiSocket.updateToken(credentials.accessToken!);\n        apiSocket.connect();\n    };\n\n    const onCredentialsExpired = () => {\n        onLogout();\n    };\n\n    useEffect(() => {\n        init();\n    }, []);\n\n    return (\n        <div className=\"App\">\n            <TokenRefresher\n                api={client}\n                credentials={credentials as LoginResult}\n                onCredentialsRefreshed={onLogin}\n                onCredentialsExpired={onCredentialsExpired}\n            />\n            <Healthchecker api={client} />\n\n            <BrowserRouter>\n                {/* if credentials are not set, show Login component */}\n                {!credentials && (\n                    <Switch>\n                        <Route path=\"/\" exact={true}>\n                            <Login client={client} onLogin={onLogin} />\n                        </Route>\n                        <Route path=\"/discord-login\">\n                            <DiscordLogin client={client} onLogin={onLogin} />\n                        </Route>\n                        {/* fallback route is login page */}\n                        <Route path=\"*\">\n                            <Login client={client} onLogin={onLogin} />\n                        </Route>\n                    </Switch>\n                )}\n                {credentials && (\n                    <div className=\"container\">\n                        <div className=\"row\">\n                            <div className=\"col-lg-12\">\n                                {/* if credentials are set, show a bootstrap logout button a the far top right corner div */}\n                                {credentials && (\n                                    <>\n                                        <button\n                                            className=\"btn btn-primary top-button\"\n                                            onClick={() => onLogout()}\n                                        >\n                                            {/* font awesome logout icon */}\n                                            <i className=\"fas fa-sign-out-alt\"></i>\n                                        </button>\n                                        {/* saved images */}\n                                        <Link\n                                            className=\"btn btn-primary top-button\"\n                                            to=\"/saved\"\n                                        >\n                                            {/* font awesome save icon */}\n                                            <i className=\"fas fa-save\"></i>\n                                        </Link>\n                                        {/* home button */}\n                                        <Link\n                                            className=\"btn btn-primary top-button\"\n                                            to=\"/\"\n                                        >\n                                            {/* font awesome home icon */}\n                                            <i className=\"fas fa-home\"></i>\n                                        </Link>\n                                        {/* Link to discord */}\n                                        <a\n                                            className=\"btn btn-primary top-button\"\n                                            href=\"https://discord.gg/HYcFpDeqKJ\"\n                                            target=\"_blank\"\n                                        >\n                                            {/* font awesome discord icon */}\n                                            <i className=\"fab fa-discord\"></i>\n                                        </a>\n                                        {/* link to github */}\n                                        <a\n                                            className=\"btn btn-primary top-button\"\n                                            href=\"https://github.com/wolfgangmeyers/aibrush-2\"\n                                            target=\"_blank\"\n                                        >\n                                            {/* font awesome github icon */}\n                                            <i className=\"fab fa-github\"></i>\n                                        </a>\n                                    </>\n                                )}\n                            </div>\n                            <div\n                                className=\"col-lg-12\"\n                                style={{ textAlign: \"right\" }}\n                            >\n                                <CreditsBalance\n                                    api={client}\n                                    apisocket={apiSocket}\n                                />\n                            </div>\n                        </div>\n\n                        {/* if credentials are set, show the rest of the app */}\n\n                        <Switch>\n                            <Route path=\"/\" exact={true}>\n                                {/* <MainMenu isAdmin={isAdmin} /> */}\n                                <Homepage\n                                    api={client}\n                                    apiSocket={apiSocket}\n                                    assetsUrl={assetsUrl}\n                                    localImages={localImages}\n                                />\n                            </Route>\n                            <Route path=\"/stripe-success\">\n                                <Homepage\n                                    api={client}\n                                    apiSocket={apiSocket}\n                                    assetsUrl={assetsUrl}\n                                    localImages={localImages}\n                                    paymentStatus=\"success\"\n                                />\n                            </Route>\n                            <Route path=\"/stripe-cancel\">\n                                <Homepage\n                                    api={client}\n                                    apiSocket={apiSocket}\n                                    assetsUrl={assetsUrl}\n                                    localImages={localImages}\n                                    paymentStatus=\"canceled\"\n                                />\n                            </Route>\n                            <Route path=\"/images/:id\">\n                                <Homepage\n                                    api={client}\n                                    apiSocket={apiSocket}\n                                    assetsUrl={assetsUrl}\n                                    localImages={localImages}\n                                />\n                            </Route>\n                            <Route path=\"/saved\" exact={true}>\n                                {/* <MainMenu isAdmin={isAdmin} /> */}\n                                <SavedImagesPage\n                                    api={client}\n                                    apiSocket={apiSocket}\n                                    assetsUrl={assetsUrl}\n                                />\n                            </Route>\n                            <Route path=\"/saved/:id\" exact={true}>\n                                {/* <MainMenu isAdmin={isAdmin} /> */}\n                                <SavedImagesPage\n                                    api={client}\n                                    apiSocket={apiSocket}\n                                    assetsUrl={assetsUrl}\n                                />\n                            </Route>\n                            <Route path=\"/image-editor/:id\">\n                                <ImageEditor\n                                    api={client}\n                                    apisocket={apiSocket}\n                                    assetsUrl={assetsUrl}\n                                    localImages={localImages}\n                                />\n                            </Route>\n                            <Route path=\"/deleted-images\">\n                                <DeletedImages\n                                    api={client}\n                                    assetsUrl={assetsUrl}\n                                />\n                            </Route>\n                            <Route path=\"/local-deleted-images\">\n                                <LocalDeletedImages localImages={localImages} />\n                            </Route>\n                            <Route path=\"/testpage\">\n                                <TestPage />\n                            </Route>\n                            {isAdmin && (\n                                <>\n                                    <Route path=\"/admin\">\n                                        <Admin api={client} />\n                                    </Route>\n                                </>\n                            )}\n                        </Switch>\n                        <div\n                            // style={{ marginTop: \"100px\", padding: \"50px\" }}\n\n                            // use position:fixed to make the footer stick to the bottom of the page\n                            style={{\n                                position: \"fixed\",\n                                bottom: \"0\",\n                                left: \"0\",\n                                width: \"100%\",\n                                height: \"50px\",\n                                paddingTop: \"16px\",\n                                backgroundColor: \"#000000\",\n                            }}\n                        >\n                            {/* show external popout pages to terms and privacy policy, if they are present in the features */}\n                            {features && features.privacy_uri && (\n                                <a href={features.privacy_uri} target=\"_blank\">\n                                    Privacy Policy\n                                </a>\n                            )}\n                            {features && features.terms_uri && (\n                                <a\n                                    href={features.terms_uri}\n                                    target=\"_blank\"\n                                    style={{ marginLeft: \"20px\" }}\n                                >\n                                    Terms of Service\n                                </a>\n                            )}\n                            {/* link to mail to admin@aibrush.art */}\n                            <a\n                                href=\"mailto:admin@aibrush.art\"\n                                style={{ marginLeft: \"20px\" }}\n                            >\n                                Contact\n                            </a>\n                            <span\n                                style={{ float: \"right\", marginRight: \"50px\" }}\n                            >\n                                Powered by the{\" \"}\n                                <a\n                                    href=\"https://stablehorde.net/\"\n                                    target=\"_blank\"\n                                >\n                                    Stable Horde\n                                </a>\n                            </span>\n                        </div>\n                    </div>\n                )}\n            </BrowserRouter>\n        </div>\n    );\n}\n\nexport default App;\n","export interface Config {\n    apiUrl: string;\n}\n\nexport function getConfig(): Config {\n    // if (process.env.REACT_APP_ENV === \"prod\") {\n    //     return {\n    //         apiUrl: \"https://aibrush.ngrok.io\"\n    //     };\n    // } else if (process.env.REACT_APP_ENV === \"alt\") {\n    //     return {\n    //         apiUrl: \"\"\n    //     };\n    // } else {\n    //     return {\n    //         apiUrl: \"http://localhost:3000\"\n    //     };\n    // }\n    return {\n        apiUrl: \"\"\n    };\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import { Renderer } from \"./renderer\";\n\nexport class ZoomHelper {\n\n    private startTouches: React.TouchList | null;\n    private startZoom = 1;\n    private startOffsetX = 0;\n    private startOffsetY = 0;\n\n    constructor(private renderer: Renderer) {\n        this.startTouches = null;\n    }\n\n    onWheel(event: WheelEvent) {\n        const originalZoom = this.renderer.getZoom();\n        let zoom = this.renderer.getZoom();\n        let offsetX = this.renderer.getOffsetX();\n        let offsetY = this.renderer.getOffsetY();\n\n        let canvasPoint = this.translateMouseToCanvasCoordinates(\n            event.offsetX,\n            event.offsetY\n        );\n        // console.log(\"x: \" + x + \", y: \" + y);\n        \n        if (event.deltaY < 0) {\n            zoom += 0.1 * zoom;\n        } else {\n            zoom -= 0.1 * zoom;\n        }\n        zoom = Math.max(0.1, Math.min(zoom, 8.0));\n\n        let xDiff = canvasPoint.x - -offsetX;\n        let yDiff = canvasPoint.y - -offsetY;\n\n        // offsetX = canvasPoint.x - xDiff * (zoom / originalZoom);\n        // offsetY = canvasPoint.y - yDiff * (zoom / originalZoom);\n        offsetX -= xDiff * (zoom / originalZoom) - xDiff;\n        offsetY -= yDiff * (zoom / originalZoom) - yDiff;\n\n        this.renderer.updateZoomAndOffset(zoom, offsetX, offsetY);\n    }\n\n    onPan(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        let movementX = event.movementX;\n        let movementY = event.movementY;\n        // translate offset to canvas coordinates\n        let rect = (\n            event.target as HTMLCanvasElement\n        ).getBoundingClientRect();\n        movementX = (movementX / rect.width) * this.renderer.getCanvas().width;\n        movementY = (movementY / rect.height) * this.renderer.getCanvas().height;\n\n        let zoom = this.renderer.getZoom();\n        let offsetX = this.renderer.getOffsetX();\n        let offsetY = this.renderer.getOffsetY();\n\n        offsetX += movementX / zoom;\n        offsetY += movementY / zoom;\n\n        this.renderer.updateZoomAndOffset(zoom, offsetX, offsetY);\n    }\n\n    onTouchStart(event: React.TouchEvent<HTMLCanvasElement>) {\n        if (event.touches.length === 2) {\n            this.startTouches = event.touches;\n            this.startZoom = this.renderer.getZoom();\n            this.startOffsetX = this.renderer.getOffsetX();\n            this.startOffsetY = this.renderer.getOffsetY();\n        }\n    }\n\n    onTouchMove(event: React.TouchEvent<HTMLCanvasElement>) {\n        if (this.startTouches) {\n            const canvasRect = this.renderer.getCanvas().getBoundingClientRect();\n            const startTouch1 = this.startTouches[0];\n            const startTouch2 = this.startTouches[1];\n            const touch1 = event.touches[0];\n            const touch2 = event.touches[1];\n\n            const startDistance = Math.sqrt(\n                Math.pow(startTouch1.clientX - startTouch2.clientX, 2) +\n                Math.pow(startTouch1.clientY - startTouch2.clientY, 2)\n            );\n            const distance = Math.sqrt(\n                Math.pow(touch1.clientX - touch2.clientX, 2) +\n                Math.pow(touch1.clientY - touch2.clientY, 2)\n            );\n            const zoom = this.startZoom * (distance / startDistance);\n\n            const startCenterX = (startTouch1.clientX + startTouch2.clientX) / 2;\n            const startCenterY = (startTouch1.clientY + startTouch2.clientY) / 2;\n            const centerX = (touch1.clientX + touch2.clientX) / 2;\n            const centerY = (touch1.clientY + touch2.clientY) / 2;\n\n            const startCanvasPoint = this.translateMouseToCanvasCoordinates(\n                startCenterX - canvasRect.left,\n                startCenterY - canvasRect.top\n            );\n            const canvasPoint = this.translateMouseToCanvasCoordinates(\n                centerX - canvasRect.left,\n                centerY - canvasRect.top\n            );\n\n            let offsetX = this.startOffsetX;\n            let offsetY = this.startOffsetY;\n\n            let xDiff = canvasPoint.x - startCanvasPoint.x;\n            let yDiff = canvasPoint.y - startCanvasPoint.y;\n\n            let xDiff2 = canvasPoint.x - -this.renderer.getOffsetX();\n            let yDiff2 = canvasPoint.y - -this.renderer.getOffsetY();\n\n            offsetX -= xDiff2 * (zoom / this.startZoom) - xDiff2 - (xDiff * (distance / startDistance));\n            offsetY -= yDiff2 * (zoom / this.startZoom) - yDiff2 - (yDiff * (distance / startDistance));\n\n            this.renderer.updateZoomAndOffset(zoom, offsetX, offsetY);\n        }\n    }\n\n    onTouchEnd(event: React.TouchEvent<HTMLCanvasElement>) {\n        this.startTouches = null;\n    }\n\n\n    translateMouseToCanvasCoordinates(mouseX: number, mouseY: number, zoom?: number, offsetX?: number, offsetY?: number) {\n        let x = mouseX;\n        let y = mouseY;\n        // adjust for zoom\n        zoom = zoom || this.renderer.getZoom();\n        offsetX = offsetX || this.renderer.getOffsetX();\n        offsetY = offsetY || this.renderer.getOffsetY();\n        x = x / zoom;\n        y = y / zoom;\n\n        // translate offset to canvas coordinates\n        let rect = this.renderer.getCanvas().getBoundingClientRect();\n\n        // x = (x / rect.width) * this.renderer.getWidth();\n        // y = (y / rect.height) * this.renderer.getHeight();\n\n        x = (x / rect.width) * this.renderer.getCanvas().width;\n        y = (y / rect.height) * this.renderer.getCanvas().height;\n\n        x = Math.round(x - offsetX);\n        y = Math.round(y - offsetY);\n\n        return { x: x, y: y };\n    }\n\n    translateCanvasToMouseCoordinates(x: number, y: number, zoom?: number, offsetX?: number, offsetY?: number) {\n        zoom = zoom || this.renderer.getZoom();\n        offsetX = offsetX || this.renderer.getOffsetX();\n        offsetY = offsetY || this.renderer.getOffsetY();\n        x = x + offsetX;\n        y = y + offsetY;\n        x = x * zoom;\n        y = y * zoom;\n\n        // translate offset to canvas coordinates\n        let rect = this.renderer.getCanvas().getBoundingClientRect();\n        x = Math.round((x / this.renderer.getWidth()) * rect.width);\n        y = Math.round((y / this.renderer.getHeight()) * rect.height);\n\n        return { x: x, y: y };\n    }\n}","import React from \"react\";\nimport { Renderer } from \"./renderer\";\nimport { ZoomHelper } from \"./zoomHelper\";\n\nexport interface Tool {\n    name: string;\n    getArgs(): any;\n    updateArgs(args: any): void;\n    onMouseDown(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>): void;\n    onMouseMove(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>): void;\n    onMouseUp(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>): void;\n    onMouseLeave(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>): void;\n\n    onTouchStart(event: React.TouchEvent<HTMLCanvasElement>): void;\n    onTouchMove(event: React.TouchEvent<HTMLCanvasElement>): void;\n    onTouchEnd(event: React.TouchEvent<HTMLCanvasElement>): void;\n\n    onKeyDown(event: KeyboardEvent): void;\n    onKeyUp(event: KeyboardEvent): void;\n    onWheel(event: WheelEvent): void;\n    destroy(): boolean;\n    onShowSelectionControls(listener: (show: boolean) => void): void;\n    select(direction: \"left\" | \"right\"): void;\n    onSaveImage(listener: (encodedImage: string) => void): void;\n}\n\nexport class BaseTool implements Tool {\n    saveListener?: (encodedImage: string, args?: any) => void = () => {};\n\n    private touchHandle: number | undefined;\n\n    readonly zoomHelper: ZoomHelper;\n\n    private _pinchZooming = false;\n    private _panning = false;\n\n    constructor(readonly renderer: Renderer, readonly name: string) {\n        this.zoomHelper = new ZoomHelper(renderer);\n    }\n\n    getArgs(): any {\n        return JSON.parse(\n            localStorage.getItem(`tool_args_${this.name}`) || \"{}\"\n        );\n    }\n    updateArgs(args: any) {\n        localStorage.setItem(`tool_args_${this.name}`, JSON.stringify(args));\n    }\n    onMouseDown(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        if (event.button === 1) {\n            this._panning = true;\n        }\n    }\n    onMouseMove(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        if (this._panning) {\n            this.zoomHelper.onPan(event);\n        }\n        let { x, y } = this.zoomHelper.translateMouseToCanvasCoordinates(\n            event.nativeEvent.offsetX,\n            event.nativeEvent.offsetY\n        );\n        this._updateCursor(x, y);\n    }\n\n    private _updateCursor(x: number, y: number) {\n        this.renderer.setCursor({\n            color: \"white\",\n            radius: 10,\n            type: \"crosshairs\",\n            x,\n            y,\n        });\n    }\n\n    onMouseUp(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        if (this._panning) {\n            this._panning = false;\n        }\n    }\n    onMouseLeave(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {}\n\n    onTouchStart(event: React.TouchEvent<HTMLCanvasElement>) {\n        if (this.touchHandle) {\n            window.clearTimeout(this.touchHandle);\n        }\n        const touches: React.Touch[] = [];\n        // make a deep copy so that the values live past the delay\n        for (let i = 0; i < event.touches.length; i++) {\n            const touch = event.touches[i];\n            touches.push({\n                identifier: touch.identifier,\n                clientX: touch.clientX,\n                clientY: touch.clientY,\n                pageX: touch.pageX,\n                pageY: touch.pageY,\n                screenX: touch.screenX,\n                screenY: touch.screenY,\n                target: null,\n            } as any);\n        }\n        event = {\n            touches,\n        } as any;\n        this.touchHandle = window.setTimeout(() => {\n            this.touchHandle = undefined;\n            if (event.touches.length === 2) {\n                this._pinchZooming = true;\n                this.zoomHelper.onTouchStart(event);\n            } else {\n                const rect = this.renderer.getCanvas().getBoundingClientRect();\n                const touch = event.touches[0];\n                if (touch) {\n                    this.onMouseDown({\n                        type: \"touch\",\n                        button: 0,\n                        nativeEvent: {\n                            offsetX: touch.clientX - rect.left,\n                            offsetY: touch.clientY - rect.top,\n                        },\n                    } as any);\n                }\n            }\n        }, 200);\n    }\n    onTouchMove(event: React.TouchEvent<HTMLCanvasElement>) {\n        if (event.touches.length === 2) {\n            this.zoomHelper.onTouchMove(event);\n        } else {\n            const rect = this.renderer.getCanvas().getBoundingClientRect();\n            const touch = event.touches[0];\n            if (touch) {\n                this.onMouseMove({\n                    type: \"touch\",\n                    button: 0,\n                    nativeEvent: {\n                        offsetX: touch.clientX - rect.left,\n                        offsetY: touch.clientY - rect.top,\n                    },\n                } as any);\n            }\n        }\n    }\n    onTouchEnd(event: React.TouchEvent<HTMLCanvasElement>) {\n        if (this._pinchZooming) {\n            this._pinchZooming = false;\n            this.zoomHelper.onTouchEnd(event);\n        } else {\n            this.onMouseUp({\n                button: 0,\n                type: \"touch\",\n            } as any);\n        }\n    }\n\n    onKeyDown(event: KeyboardEvent) {}\n    onKeyUp(event: KeyboardEvent) {}\n    onWheel(event: WheelEvent) {\n        this.zoomHelper.onWheel(event);\n    }\n    destroy(): boolean {\n        return true;\n    }\n    onShowSelectionControls(listener: (show: boolean) => void) {}\n    select(direction: \"left\" | \"right\") {}\n    onSaveImage(listener: (encodedImage: string) => void) {\n        this.saveListener = listener;\n    }\n}\n","\nexport const NOTIFICATION_IMAGE_UPDATED = \"image_updated\";\nexport const NOTIFICATION_IMAGE_DELETED = \"image_deleted\";\nexport const NOTIFICATION_PENDING_IMAGE = \"pending_image\";\nexport const NOTIFICATION_CREDITS_UPDATED = \"credits_updated\";\n\ntype MessageListener = (message: string) => void;\n\nexport class ApiSocket {\n    private client?: WebSocket;\n    private accessToken?: string\n    // private messageListener?: (message: string) => void;\n    private messageListeners: MessageListener[] = [];\n\n    updateToken(accessToken: string) {\n        this.accessToken = accessToken;\n    }\n\n    // onMessage(listener?: (message: string) => void) {\n    //     this.messageListener = listener;\n    // }\n\n    addMessageListener(listener: MessageListener) {\n        this.messageListeners.push(listener);\n    }\n\n    removeMessageListener(listener: MessageListener) {\n        this.messageListeners = this.messageListeners.filter(l => l !== listener);\n    }\n\n    connect() {\n        if (!this.accessToken) {\n            throw new Error(\"unauthenticated\");\n        }\n        if (this.client) {\n            // will reconnect in one second automatically\n            // this is called every time the auth refreshes\n            this.client.close();\n            return;\n        }\n        // let host = window.location.host;\n        let host = \"www.aibrush.art\";\n        let protocol = \"wss\";\n        // if (host.includes(\"localhost\")) {\n        //   host = \"localhost:3000\";\n        //   protocol = \"ws\";\n        // }\n        this.client = new WebSocket(`${protocol}://${host}`);\n        this.client.onerror = err => console.error(err);\n        this.client.onopen = () => {\n            console.log(\"websocket connected\");\n            this.client!.send(this.accessToken!);\n        }\n        this.client.onmessage = evt => {\n            console.log(\"server push\", evt.data);\n            for (const listener of this.messageListeners) {\n                listener(evt.data as string);\n            }\n        }\n        this.client.onclose = () => {\n          console.log(\"websocket closed\");\n          this.client = undefined;\n          setTimeout(() => this.connect(), 500);\n        }\n    }\n}\n","import { Item } from \"./civit_loras\";\nimport { KVStore } from \"./kvstore\";\nimport { recentLoras as recentList } from \"./recentList\";\n\nexport class RecentLoras {\n    private kvstore: KVStore<Item>;\n\n    constructor() {\n        this.kvstore = new KVStore<Item>({\n            dbName: \"saved-loras\",\n            storeName: \"loras\",\n        });\n        this.migrateToIDs();\n    }\n\n    async migrateToIDs(): Promise<void> {\n        console.log(\"migrateToIDs\");\n        const recentLoras = recentList.getItems();\n        let migrateRequired = false;\n        for (let id of recentLoras) {\n            console.log(\"id\", id);\n            // is id formatted as an integer?\n            if (!id.match(/^\\d+$/)) {\n                migrateRequired = true;\n                break;\n            }\n        }\n        if (migrateRequired) {\n            console.log(\"one-time migration of recent loras to int keys\");\n            recentList.clear();\n            recentLoras.reverse();\n            for (const name of recentLoras) {\n                const lora = await this.kvstore.getItem(name);\n                if (lora) {\n                    recentList.addItem(lora.id.toString());\n                    await this.kvstore.deleteItem(name);\n                    await this.kvstore.setItem(lora.id.toString(), lora);\n                }\n            }\n        }\n    }\n\n    async listRecentLoras(): Promise<Item[]> {\n        const recentLoraIDs = recentList.getItems();\n        const result: Item[] = [];\n        for (const loraID of recentLoraIDs) {\n            const savedLora = await this.kvstore.getItem(loraID);\n            if (savedLora) {\n                result.push(savedLora);\n            }\n        }\n        return result;\n    }\n\n    async getLora(loraID: string): Promise<Item | null> {\n        console.log(\"getLora\", loraID);\n        return await this.kvstore.getItem(loraID);\n    }\n\n    async addLora(lora: Item): Promise<void> {\n        const loraId = lora.id.toString();\n        await this.kvstore.setItem(loraId, lora);\n        const removed = recentList.addItem(loraId);\n        if (removed) {\n            await this.kvstore.deleteItem(removed);\n        }\n    }\n}\n\nexport const recentLoras = new RecentLoras();","import React, { FC, useEffect, useState, useCallback } from \"react\";\nimport axios from \"axios\";\nimport Modal from \"react-bootstrap/Modal\";\nimport Button from \"react-bootstrap/Button\";\nimport Form from \"react-bootstrap/Form\";\nimport Alert from \"react-bootstrap/Alert\";\nimport DOMPurify from \"dompurify\";\nimport ReactInfiniteScroll from \"react-infinite-scroll-component\";\n\nimport { Item } from \"../lib/civit_loras\";\nimport { Col, ListGroup, Row } from \"react-bootstrap\";\nimport { LoraConfig } from \"../client\";\nimport { recentLoras } from \"../lib/recentLoras\";\n\n// https://chat.openai.com/share/34a593c7-a8e5-4490-9cc7-8a1d019b8b82\n\nexport interface SelectedLora {\n    config: LoraConfig;\n    lora: Item;\n}\n\ninterface LoraModalProps {\n    onConfirm: (lora: SelectedLora) => void;\n    onCancel: () => void;\n}\n\nexport async function selectedLorasFromConfigs(configs: LoraConfig[]): Promise<SelectedLora[]> {\n    const loras = await Promise.all(configs.map(config => recentLoras.getLora(config.name)));\n    const selectedLoras: SelectedLora[] = [];\n    for (let i = 0; i < loras.length; i++) {\n        if (loras[i]) {\n            const config = configs[i];\n            selectedLoras.push({\n                config,\n                lora: loras[i]!\n            });\n        }\n    }\n    return selectedLoras;\n}\n\nexport const LoraModal: FC<LoraModalProps> = ({ onConfirm, onCancel }) => {\n    const [inputValue, setInputValue] = useState(\"\");\n    const [strength, setStrength] = useState(1);\n    const [item, setItem] = useState<Item | null>(null);\n    const [recentItems, setRecentItems] = useState<Item[]>([]);\n    const [error, setError] = useState<string | null>(null);\n    const [busy, setBusy] = useState(false);\n\n    const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setInputValue(event.target.value);\n    };\n\n    const handleSearch = useCallback(async () => {\n        const modelId = inputValue.match(/(\\d+)/)?.[0] || inputValue;\n\n        if (!modelId) {\n            setError(\"Invalid input\");\n            return;\n        }\n\n        setBusy(true);\n        try {\n            const response = await axios.get(\n                `https://civitai.com/api/v1/models/${modelId}`\n            );\n            setItem(response.data);\n            setError(null);\n        } catch (error) {\n            setError(\"Failed to fetch data\");\n        } finally {\n            setBusy(false);\n        }\n    }, [inputValue]);\n\n    const handleConfirm = () => {\n        recentLoras.addLora(item!);\n        onConfirm({\n            config: {\n                name: `${item!.id}`,\n                strength,\n            },\n            lora: item!,\n        })\n    }\n\n    useEffect(() => {\n        // Fetch recent Loras when component mounts\n        const fetchRecentLoras = async () => {\n            const items = await recentLoras.listRecentLoras();\n            setRecentItems(items);\n        };\n        fetchRecentLoras();\n    }, []);\n\n    const renderContent = () => {\n        if (error) {\n            return <Alert variant=\"danger\">{error}</Alert>;\n        }\n\n        if (item) {\n            return (\n                <div>\n                    <h5>{item.name}</h5>\n                    <div\n                        dangerouslySetInnerHTML={{\n                            __html: DOMPurify.sanitize(item.description),\n                        }}\n                    />\n\n                    <p>Allow Commercial Use: {item.allowCommercialUse}</p>\n                    <p>Creator: {item.creator.username}</p>\n\n                    <h6>Tags:</h6>\n                    <div style={{ marginBottom: \"16px\" }}>\n                        {item.tags.map((tag, index) => (\n                            // <li key={index}>{tag}</li>\n                            // comma separated instead\n                            <span key={index}>\n                                {tag}\n                                {index < item.tags.length - 1 && \", \"}\n                            </span>\n                        ))}\n                    </div>\n\n                    <h6>Model Versions:</h6>\n                    {/* TODO: support multiple model versions in the horde */}\n                    {item.modelVersions.slice(0, 1).map((version, index) => (\n                        <div key={index}>\n                            <strong>{version.name}</strong>\n                            <p>Base Model: {version.baseModel}</p>\n\n                            <strong>Trained Words:</strong>\n                            <ul>\n                                {version.trainedWords.map((word, idx) => (\n                                    <li key={idx}>{word}</li>\n                                ))}\n                            </ul>\n\n                            <strong>Images:</strong>\n                            <div className=\"row\">\n                                {version.images.map((image, idx) => (\n                                    <div\n                                        key={idx}\n                                        className=\"col-sm-4 col-md-3\"\n                                    >\n                                        <div className=\"thumbnail\">\n                                            <img\n                                                src={image.url}\n                                                alt=\"\"\n                                                style={{\n                                                    maxWidth: \"100%\",\n                                                    height: \"auto\",\n                                                    marginBottom: \"16px\",\n                                                }}\n                                            />\n                                        </div>\n                                    </div>\n                                ))}\n                            </div>\n                        </div>\n                    ))}\n                </div>\n            );\n        }\n\n        return null;\n    };\n\n    const filteredItems = recentItems.filter((recentItem) =>\n        recentItem.name.toLowerCase().includes(inputValue.toLowerCase()) || recentItem.id.toString() === inputValue\n    );\n\n    return (\n        <Modal show onHide={onCancel} size=\"xl\">\n            <Modal.Header closeButton>\n                <Modal.Title>Enter LORA URL or Model Number</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                {!item && (\n                    <>\n                        <Form\n                            onSubmit={(e) => {\n                                e.preventDefault();\n                                handleSearch();\n                            }}\n                        >\n                            <Form.Group as={Row}>\n                                <Col sm={10}>\n                                    <Form.Control\n                                        type=\"text\"\n                                        placeholder=\"Enter LORA URL or Model Number\"\n                                        value={inputValue}\n                                        onChange={handleInputChange}\n                                    />\n                                </Col>\n                                <Col sm={2}>\n                                    <Button\n                                        variant=\"primary\"\n                                        onClick={handleSearch}\n                                        disabled={busy || !inputValue}\n                                    >\n                                        {busy ? \"Loading...\" : \"Search\"}\n                                    </Button>\n                                </Col>\n                            </Form.Group>\n                        </Form>\n                        <h5 className=\"mt-3\">Recently Used Loras:</h5>\n                        <ListGroup style={{maxHeight: \"500px\", overflowY: \"auto\"}}>\n                            {filteredItems.map((recentItem, index) => (\n                                <ListGroup.Item key={index} action onClick={() => setItem(recentItem)}>\n                                    {recentItem.name}\n                                </ListGroup.Item>\n                            ))}\n                        </ListGroup>\n                    </>\n                )}\n                {/* show a strength slider only if an item has been loaded */}\n                {item && (\n                    <Form.Group as={Row}>\n                        <Form.Label column sm={2}>\n                            Strength: {strength}\n                        </Form.Label>\n                        <Col sm={10}>\n                            <Form.Control\n                                type=\"range\"\n                                min={0}\n                                max={5}\n                                step={0.1}\n                                value={strength}\n                                onChange={(e) =>\n                                    setStrength(parseFloat(e.target.value))\n                                }\n                            />\n                        </Col>\n                    </Form.Group>\n                )}\n                {renderContent()}\n            </Modal.Body>\n            <Modal.Footer>\n                <Button variant=\"secondary\" onClick={onCancel}>\n                    Cancel\n                </Button>\n                <Button\n                    variant=\"primary\"\n                    disabled={!item}\n                    onClick={() => handleConfirm()}\n                >\n                    OK\n                </Button>\n            </Modal.Footer>\n        </Modal>\n    );\n};\n","import { FC } from \"react\";\n\ninterface Props {\n    imagesCost: number;\n}\n\n//TODO: restore when doing kudos cost calculation\nexport const CostIndicator: FC<Props> = ({ imagesCost }) => {\n    return (\n        // <div style={{ textAlign: \"left\" }}>\n        //     <span className=\"helptext\" style={{ color: \"#00f0f0\" }}>\n        //         Cost: {imagesCost} credit{imagesCost > 1 ? \"s\" : \"\"}&nbsp;\n        //         <i\n        //             className=\"fas fa-info-circle\"\n        //             style={{ cursor: \"pointer\" }}\n        //             onClick={() =>\n        //                 alert(\n        //                     \"The cost is based on the image count and the size of each image. A single 512x512 image costs 1 credit.\"\n        //                 )\n        //             }\n        //         ></i>\n        //     </span>\n        // </div>\n        <></>\n    );\n};\n","import React, { FC, useEffect, useState } from \"react\";\nimport moment from \"moment\";\nimport { Image, StatusEnum } from \"../client/api\";\nimport { LocalImage } from \"../lib/localImagesStore\";\n\ninterface Props {\n    assetsUrl: string;\n    image: LocalImage;\n    censorNSFW: boolean;\n    bulkDelete?: boolean;\n    onClick?: (image: Image) => void;\n}\n\nexport const ImageThumbnail: FC<Props> = ({ assetsUrl, image, censorNSFW, bulkDelete, onClick }) => {\n    const src = `${assetsUrl}/${image.id}.thumbnail.png?updated_at=${image.updated_at}`;\n    const [retry, setRetry] = useState(\"\");\n\n    useEffect(() => {\n        // This is to help deal with eventual consistency from S3.\n        // if image.updated_at (unix timestamp in milliseconds) is less than a minute ago, try to reload the image\n        if (moment().diff(moment(image.updated_at), \"minutes\") < 1) {\n            setRetry(\"\");\n            const t = setTimeout(() => {\n                setRetry(\"&retry\")\n            }, 3000);\n            return () => clearTimeout(t);\n        }\n    }, [image.id, image.updated_at])\n\n    let label = image.label;\n    if (image.label === \"\") {\n        label = image.params.prompt || \"\";\n    }\n    if (label.indexOf(\",\") !== -1) {\n        label = label.substring(0, label.indexOf(\",\"));\n    }\n    \n    let className = \"image-thumbnail\";\n    if (bulkDelete) {\n        className += \" bulk-delete\";\n    }\n\n    let backgroundImage = `url(${src}${retry}), url(/images/default.png)`;\n    if (image.imageData) {\n        backgroundImage = `url(${image.imageData}), url(/images/default.png)`;\n    }\n\n    return (\n        <div\n            className={className}\n            style={{\n                backgroundImage,\n                backgroundRepeat: \"no-repeat\",\n                backgroundPosition: \"center\",\n                filter: (image.nsfw && censorNSFW) ? \"blur(8px)\" : undefined,\n            }}\n            onClick={() => onClick && onClick(image)}\n        >\n            {!bulkDelete && <div className=\"image-thumbnail-label\">\n                {label}\n            </div>}\n\n            {bulkDelete && <div className=\"image-thumbnail-label\">\n                <input type=\"checkbox\" style={{\n                    width: \"20px\",\n                    height: \"20px\",\n                    marginLeft: \"16px\",\n                    marginTop: \"16px\",\n                }} checked readOnly />\n            </div>}\n\n            {image.status === StatusEnum.Pending && <div className=\"image-thumbnail-pending\">\n                <i style={{marginTop: \"20px\"}} className=\"fa fa-hourglass-half\"></i>\n            </div>}\n            {\n                image.status === StatusEnum.Processing && <div className=\"image-thumbnail-pending\">\n                    <i style={{marginTop: \"20px\"}} className=\"fa fa-cog fa-spin\"></i>\n                </div>\n            }\n        </div>\n    );\n};\n","\n// canny, hed, depth, normal, openpose, seg, scribble, fakescribbles, hough\nexport const controlnetTypes = [\n    \"canny\",\n    \"hed\",\n    \"depth\",\n    \"normal\",\n    \"openpose\",\n    \"seg\",\n    \"scribble\",\n    \"fakescribbles\",\n    \"hough\",\n]","import { FC, useState, FormEvent } from \"react\";\nimport { Form, FormGroup, FormControl, FormText, FormCheck } from \"react-bootstrap\";\n\ninterface Props {\n    seed: string;\n    setSeed: (seed: string) => void;\n}\n\nexport const SeedInput: FC<Props> = ({seed, setSeed}) => {\n    const [useCustomSeed, setUseCustomSeed] = useState(false);\n\n    const onChangeCustomSeed = () => {\n        setUseCustomSeed(!useCustomSeed);\n        if (useCustomSeed) {\n            setSeed(\"\");\n        } else {\n            // set seed to a random number\n            setSeed(Math.floor(Math.random() * 1000000000).toString());\n        }\n    };\n\n    return (\n        <Form>\n            <FormGroup>\n                <FormCheck \n                    type=\"checkbox\"\n                    label=\"Use Custom Seed\"\n                    checked={useCustomSeed}\n                    onChange={(e) => onChangeCustomSeed()}\n                />\n            </FormGroup>\n\n            {useCustomSeed && (\n                <FormGroup>\n                    <FormControl\n                        type=\"text\"\n                        // value={seed}\n                        // onChange={(e) => setSeed(e.target.value)}\n                        placeholder=\"Enter seed\"\n                        value={seed}\n                        onChange={(e: any) => setSeed(e.target.value)}\n                    />\n                </FormGroup> \n            )}\n        </Form>\n    );\n};\n","import React, { useState } from \"react\";\nimport { InputGroup, FormControl, Dropdown } from \"react-bootstrap\";\n\ninterface TextInputWithHistoryProps {\n    value: string;\n    onChange: (newValue: string) => void;\n    history: string[];\n}\n\nconst TextInputWithHistory: React.FC<TextInputWithHistoryProps> = ({\n    value,\n    onChange,\n    history,\n}) => {\n    const [show, setShow] = useState(false);\n\n    const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        onChange(event.target.value);\n    };\n\n    const handleDropdownSelect = (eventKey: string | null) => {\n        if (eventKey) {\n            onChange(eventKey);\n        }\n        setShow(false);\n    };\n\n    const handleInputClick = () => {\n        setShow(!show);\n    };\n\n    return (\n        <div>\n            <FormControl\n                value={value}\n                onChange={handleInputChange}\n                onClick={handleInputClick}\n                onBlur={() => {\n                    setTimeout(() => setShow(false), 200);\n                }}\n            />\n            <Dropdown show={show} onSelect={handleDropdownSelect}>\n                <Dropdown.Toggle\n                    variant=\"success\"\n                    id=\"dropdown-basic\"\n                    style={{ height: \"0px\", padding: \"0px\", visibility: \"hidden\", position: \"absolute\" }}\n                />\n                <Dropdown.Menu style={{width: \"100%\", overflow: \"hidden\"}}>\n                    {history.map((item, index) => (\n                        <Dropdown.Item eventKey={item} key={index}>\n                            {item}\n                        </Dropdown.Item>\n                    ))}\n                </Dropdown.Menu>\n            </Dropdown>\n        </div>\n    );\n};\n\nexport default TextInputWithHistory;\n","import React, { FC, useEffect, useState } from \"react\";\nimport { CreateImageInput, StatusEnum, Image, AIBrushApi, LoraConfig } from \"../client\";\nimport {\n    aspectRatios,\n    DEFAULT_ASPECT_RATIO,\n    getClosestAspectRatio,\n    AspectRatio,\n} from \"../lib/aspecRatios\";\nimport loadImage from \"blueimp-load-image\";\nimport { AspectRatioSelector } from \"./AspectRatioSelector\";\nimport { getUpscaleLevel } from \"../lib/upscale\";\nimport { resizeEncodedImage } from \"../lib/imageutil\";\nimport { LocalImage } from \"../lib/localImagesStore\";\nimport { controlnetTypes } from \"../lib/supportedModels\";\nimport { SeedInput } from \"./SeedInput\";\nimport ModelSelector from \"./ModelSelector\";\nimport { calculateImagesCost } from \"../lib/credits\";\nimport { CostIndicator } from \"./CostIndicator\";\nimport { recentPrompts, recentNegativePrompts } from \"../lib/recentList\";\nimport TextInputWithHistory from \"./TextInputWithHistory\";\nimport { LoraModal, SelectedLora, selectedLorasFromConfigs } from \"./LoraSelector\";\nimport { SelectedLoraTag } from \"./SelectedLora\";\nimport { LoraTriggers } from \"./LoraTriggers\";\nimport { recentLoras } from \"../lib/recentLoras\";\nimport { Item } from \"../lib/civit_loras\";\n\ninterface Props {\n    api: AIBrushApi;\n    parent: LocalImage | null;\n    creating: boolean;\n    assetsUrl: string;\n    onSubmit: (input: CreateImageInput) => void;\n    // go straight to editor without variations\n    onEdit: (input: CreateImageInput) => void;\n    onCancel: () => void;\n}\n\nexport function defaultArgs(): CreateImageInput {\n    return {\n        params: {\n            prompt: \"\",\n            negative_prompt: defaultNegativePrompt(),\n            width: 512,\n            height: 512,\n            steps: 20,\n            denoising_strength: 0.75,\n        },\n        label: \"\",\n        encoded_image: \"\",\n        encoded_mask: \"\",\n        model: \"Epic Diffusion\",\n        count: 4,\n    };\n}\n\nfunction defaultNegativePrompt(): string {\n    return (\n        recentNegativePrompts.getItems()[0] ||\n        \"low quality, distorted, deformed, dull, boring, plain, ugly, noise\"\n    );\n}\n\nexport const ImagePrompt: FC<Props> = ({\n    api,\n    parent,\n    creating,\n    assetsUrl,\n    onSubmit,\n    onCancel,\n    onEdit,\n}) => {\n    const [prompt, setPrompt] = useState<string>(\"\");\n    const [negativePrompt, setNegativePrompt] = useState<string>(\n        defaultNegativePrompt()\n    );\n    const [count, setCount] = useState<number>(4);\n    const [variationStrength, setVariationStrength] = useState<number>(0.75);\n    const [aspectRatio, setAspectRatio] =\n        useState<number>(DEFAULT_ASPECT_RATIO);\n    const [parentId, setParentId] = useState<string | null>(null);\n    const [advancedView, setAdvancedView] = useState<boolean>(false);\n    const [encodedImage, setEncodedImage] = useState<string>(\"\");\n    const [model, setModel] = useState<string>(\"Epic Diffusion\");\n\n    const [selectingModel, setSelectingModel] = useState<boolean>(false);\n\n    const [controlnetType, setControlnetType] = useState<string | undefined>();\n    const [cfgScale, setCfgScale] = useState<number>(7.5);\n    const [seed, setSeed] = useState<string>(\"\");\n    const [size, setSize] = useState<number>(1);\n\n    const [selectingLora, setSelectingLora] = useState<boolean>(false);\n    const [selectedLoras, setSelectedLoras] = useState<SelectedLora[]>([]);\n\n    const defaultAspectRatio = aspectRatios[DEFAULT_ASPECT_RATIO];\n\n    const [aspectRatioDetails, setAspectRatioDetails] = useState<AspectRatio>(\n        aspectRatios[DEFAULT_ASPECT_RATIO]\n    );\n    let [originalWidth, setOriginalWidth] = useState<number>(\n        defaultAspectRatio.width\n    );\n    let [originalHeight, setOriginalHeight] = useState<number>(\n        defaultAspectRatio.height\n    );\n\n    // const aspectRatioDetails = aspectRatios[aspectRatio];\n\n    const resetState = () => {\n        setPrompt(\"\");\n        setNegativePrompt(\n            recentNegativePrompts.getItems()[0] || defaultNegativePrompt\n        );\n        // setCount(4);\n        setAdvancedView(false);\n        setParentId(null);\n        // setVariationStrength(0.75);\n        setAspectRatio(DEFAULT_ASPECT_RATIO);\n        setAspectRatioDetails(aspectRatios[DEFAULT_ASPECT_RATIO]);\n        setEncodedImage(\"\");\n        // setCfgScale(7.5);\n        setSeed(\"\");\n    };\n\n    const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\n        if (negativePrompt) {\n            recentNegativePrompts.addItem(negativePrompt);\n        }\n        e.preventDefault();\n        const args = defaultArgs();\n        args.params.prompt = prompt || \"\";\n        args.params.negative_prompt = negativePrompt || \"\";\n        args.count = seed ? 1 : count;\n        args.parent = parentId || undefined;\n        args.params.denoising_strength = variationStrength;\n        args.nsfw = true;\n        args.model = model;\n        args.temporary = true;\n        args.params.controlnet_type = controlnetType as any;\n        args.params.cfg_scale = cfgScale;\n        args.params.seed = seed || undefined;\n        args.params.loras = selectedLoras.map(l => l.config);\n        if (parent) {\n            const bestMatch = getClosestAspectRatio(\n                parent.params.width!,\n                parent.params.height!\n            ).scale(size);\n            args.params.width = bestMatch.width;\n            args.params.height = bestMatch.height;\n        } else {\n            const bestMatch = getClosestAspectRatio(\n                aspectRatioDetails.width,\n                aspectRatioDetails.height\n            ).scale(size);\n            args.params.width = bestMatch.width;\n            args.params.height = bestMatch.height;\n        }\n        if (encodedImage) {\n            args.encoded_image = await resizeEncodedImage(\n                encodedImage,\n                args.params.width,\n                args.params.height,\n                \"png\"\n            );\n        }\n\n        resetState();\n        onSubmit(args);\n    };\n\n    const handleEdit = () => {\n        if (negativePrompt) {\n            recentNegativePrompts.addItem(negativePrompt);\n        }\n        const args = defaultArgs();\n        args.params.prompt = prompt || \"\";\n        args.params.negative_prompt = negativePrompt || \"\";\n        args.count = 1;\n        args.parent = parentId || undefined;\n        // args.stable_diffusion_strength = variationStrength;\n        args.params.denoising_strength = variationStrength;\n        args.status = StatusEnum.Completed;\n        args.params.width = originalWidth;\n        args.params.height = originalHeight;\n        args.params.cfg_scale = cfgScale;\n        args.nsfw = false;\n        args.model = model;\n        if (encodedImage) {\n            args.encoded_image = encodedImage;\n        }\n\n        resetState();\n        onEdit(args);\n    };\n\n    const handleCancel = () => {\n        resetState();\n        onCancel();\n    };\n\n    const onSelectModel = (model: string) => {\n        setModel(model);\n        setSelectingModel(false);\n    };\n\n    const onImageSelected = async (e: React.ChangeEvent<HTMLInputElement>) => {\n        const file = e.target.files && e.target.files[0];\n        if (!file) {\n            return;\n        }\n        loadImage(\n            file,\n            (img: Event | HTMLImageElement | HTMLCanvasElement) => {\n                if (!(img instanceof HTMLCanvasElement)) {\n                    return;\n                }\n                // try to match width and height to a supported aspect ratio\n                const width = img.width;\n                const height = img.height;\n                let bestMatch = getClosestAspectRatio(width, height);\n\n                const canvas = document.createElement(\"canvas\");\n                // canvas.width = bestMatch.width;\n                // canvas.height = bestMatch.height;\n                canvas.width = width;\n                canvas.height = height;\n                const ctx = canvas.getContext(\"2d\");\n                if (!ctx) {\n                    return;\n                }\n                ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n\n                // convert image to base64\n                // const canvas = img as HTMLCanvasElement\n                const dataUrl = canvas.toDataURL(\"image/png\");\n                const base64 = dataUrl.split(\",\")[1];\n                setEncodedImage(base64);\n                // get the index of the best match\n                setAspectRatio(\n                    aspectRatios.findIndex((a) => a.id === bestMatch.id)\n                );\n                setAspectRatioDetails(bestMatch);\n                setOriginalWidth(width);\n                setOriginalHeight(height);\n                // remove canvas\n                canvas.remove();\n            },\n            {\n                maxWidth: 4096,\n                maxHeight: 4096,\n                canvas: true,\n            }\n        );\n    };\n\n    useEffect(() => {\n        if (parent) {\n            const imageData = parent.imageData;\n            if (imageData) {\n                setEncodedImage(imageData.split(\",\")[1]);\n            }\n            setPrompt(parent.params.prompt || \"\");\n            setNegativePrompt(\n                parent.params.negative_prompt || defaultNegativePrompt()\n            );\n            setCount(4);\n            setParentId(parent.id);\n            setAdvancedView(true);\n            setVariationStrength(parent.params.denoising_strength || 0.75);\n            setModel(\n                parent.model\n            );\n            setCfgScale(parent.params.cfg_scale || 7.5);\n            if (parent.params.loras && parent.params.loras.length > 0) {\n                selectedLorasFromConfigs(parent.params.loras).then(loras => {\n                    setSelectedLoras(loras);\n                });\n            } else if (selectedLoras.length > 0) {\n                setSelectedLoras([]);\n            }\n        } else {\n            resetState();\n        }\n    }, [parent]);\n\n    // unset controlnet when encodedImage is null\n    useEffect(() => {\n        if (!encodedImage) {\n            setControlnetType(undefined);\n        }\n    }, [encodedImage]);\n\n    const scaledAspectRatio = aspectRatioDetails.scale(size);\n    const imagesCost = calculateImagesCost(\n        count,\n        scaledAspectRatio.width,\n        scaledAspectRatio.height\n    );\n\n    const onAddLora = (lora: SelectedLora) => {\n        setSelectedLoras([...selectedLoras, lora]);\n        setSelectingLora(false);\n    };\n\n    const onRemoveLora = (lora: SelectedLora) => {\n        setSelectedLoras(\n            selectedLoras.filter((selectedLora) => selectedLora.config.name !== lora.config.name)\n        );\n    };\n\n    const onAddTrigger = (trigger: string) => {\n        const parts = [prompt];\n        if (prompt.length > 0 && !prompt.endsWith(\",\")) {\n            parts.push(\", \");\n        }\n        parts.push(trigger);\n        setPrompt(parts.join(\"\"));\n    }\n\n    return (\n        <>\n            <form onSubmit={handleSubmit}>\n                <div className=\"homepage-prompt\">\n                    <div className=\"input-group\">\n                        <input\n                            className=\"form-control prompt\"\n                            placeholder=\"What would you like to create?\"\n                            value={prompt}\n                            onChange={(e) => setPrompt(e.target.value)}\n                        />\n\n                        <div className=\"input-group-append\">\n                            <select\n                                className=\"form-control prompt-count\"\n                                style={{ borderTopLeftRadius: \"0px\" }}\n                                value={seed ? 1 : count}\n                                onChange={(e) =>\n                                    setCount(parseInt(e.target.value))\n                                }\n                                disabled={!!seed}\n                            >\n                                <option value={1}>1</option>\n                                <option>2</option>\n                                <option>3</option>\n                                <option>4</option>\n                                <option>5</option>\n                                <option>6</option>\n                                <option>7</option>\n                                <option>8</option>\n                                <option>9</option>\n                                <option>10</option>\n                            </select>\n                            <button\n                                type=\"submit\"\n                                className=\"btn btn-secondary light-button\"\n                                style={{ marginLeft: \"8px\" }}\n                                disabled={!prompt || creating}\n                            >\n                                {/* paintbrush button */}\n                                {!creating && (\n                                    <i className=\"fas fa-paint-brush\"></i>\n                                )}\n                                {/* spinner button */}\n                                {creating && (\n                                    <i className=\"fas fa-spinner fa-spin\"></i>\n                                )}\n                            </button>\n                        </div>\n                    </div>\n                    {selectedLoras.length > 0 && (\n                        <LoraTriggers prompt={prompt} selectedLoras={selectedLoras} onAddTrigger={onAddTrigger} />\n                    )}\n                    <CostIndicator imagesCost={imagesCost} />\n                    <div\n                        style={{\n                            marginTop: \"24px\",\n                        }}\n                    >\n                        <a\n                            href=\"javascript:void(0)\"\n                            onClick={() => setAdvancedView(!advancedView)}\n                            style={{\n                                color: \"white\",\n                                textDecoration: \"underline\",\n                            }}\n                        >\n                            Advanced\n                        </a>\n                        &nbsp;\n                        {advancedView ? (\n                            <i className=\"fas fa-chevron-up\"></i>\n                        ) : (\n                            <i className=\"fas fa-chevron-down\"></i>\n                        )}\n                    </div>\n                    {advancedView && (\n                        <div className=\"homepage-prompt-advanced\">\n                            {encodedImage && (\n                                <div className=\"form-group\">\n                                    <label>Init Image</label>\n                                    <img\n                                        style={{\n                                            display: \"block\",\n                                            marginLeft: \"auto\",\n                                            marginRight: \"auto\",\n                                            maxWidth: \"100%\",\n                                        }}\n                                        src={`data:image/png;base64,${encodedImage}`}\n                                    />\n                                </div>\n                            )}\n                            {!parent && !encodedImage && (\n                                <AspectRatioSelector\n                                    aspectRatio={aspectRatio}\n                                    onChange={(aspectRatioId) => {\n                                        setAspectRatio(aspectRatioId);\n                                        setAspectRatioDetails(\n                                            aspectRatios[aspectRatioId]\n                                        );\n                                    }}\n                                />\n                            )}\n                            <div className=\"form-group\">\n                                <div\n                                    style={{\n                                        display: \"block\",\n                                        maxWidth: encodedImage\n                                            ? \"350px\"\n                                            : \"180px\",\n                                        marginTop: \"40px\",\n                                        marginRight: \"auto\",\n                                        marginLeft: \"auto\",\n                                    }}\n                                >\n                                    <label\n                                        id=\"loadimage-wrapper\"\n                                        className={`btn btn-primary `}\n                                        style={{ display: \"inline\" }}\n                                    >\n                                        {/* upload image */}\n                                        <i className=\"fas fa-upload\"></i>&nbsp;\n                                        {encodedImage || parent\n                                            ? \"Replace\"\n                                            : \"Upload\"}\n                                        <input\n                                            id=\"loadimage\"\n                                            type=\"file\"\n                                            style={{ display: \"none\" }}\n                                            onChange={onImageSelected}\n                                        />\n                                    </label>\n                                    {encodedImage && (\n                                        <label\n                                            className=\"btn btn-secondary\"\n                                            onClick={() => setEncodedImage(\"\")}\n                                            style={{ display: \"inline\" }}\n                                        >\n                                            {/* remove image */}\n                                            <i className=\"fas fa-trash\"></i>\n                                            &nbsp; Remove\n                                        </label>\n                                    )}\n                                </div>\n                            </div>\n                            <div className=\"form-group\">\n                                <label htmlFor=\"model\">Model</label>\n                                <div>\n                                    <button\n                                        type=\"button\"\n                                        className=\"btn btn-secondary light-button\"\n                                        onClick={() => setSelectingModel(true)}\n                                    >\n                                        {model}&nbsp;\n                                        <i className=\"fas fa-caret-down\"></i>\n                                    </button>\n                                </div>\n                            </div>\n                            <div className=\"form-group\">\n                                {/* loras */}\n                                <label htmlFor=\"loras\">Loras</label>\n                                <div>\n                                    {selectedLoras.map(lora => <SelectedLoraTag key={lora.lora.name} lora={lora} onRemove={lora => onRemoveLora(lora)} />)}\n                                    {/* add lora button */}\n                                    {selectedLoras.length < 5 && <button\n                                        type=\"button\"\n                                        className=\"btn btn-secondary light-button\"\n                                        style={{ marginLeft: \"8px\" }}\n                                        onClick={() => setSelectingLora(true)}\n                                    >\n                                        <i className=\"fas fa-plus\"></i>&nbsp;Add Lora\n                                    </button>}\n                                </div>\n                            </div>\n                            <div className=\"form-group\">\n                                {/* negative prompt */}\n                                <label htmlFor=\"negativePrompt\">\n                                    Negative Prompt\n                                </label>\n                                {/* <input\n                                type=\"text\"\n                                className=\"form-control\"\n                                id=\"negativePrompt\"\n                                placeholder=\"What would you like to avoid?\"\n                                value={negativePrompt}\n                                onChange={(e) =>\n                                    setNegativePrompt(e.target.value)\n                                }\n                            /> */}\n                                <TextInputWithHistory\n                                    history={recentNegativePrompts.getItems()}\n                                    value={negativePrompt}\n                                    onChange={setNegativePrompt}\n                                />\n                                <span className=\"helptext\">\n                                    Try descriptive words like \"blurry\" or\n                                    \"distorted\"\n                                </span>\n                            </div>\n                            {!seed && (\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"count\">\n                                        Count: {count}\n                                    </label>\n                                    {/* range slider from 1 to 20 */}\n                                    <input\n                                        type=\"range\"\n                                        className=\"form-control-range\"\n                                        id=\"count\"\n                                        min=\"1\"\n                                        max=\"10\"\n                                        value={count}\n                                        onChange={(e) =>\n                                            setCount(parseInt(e.target.value))\n                                        }\n                                    />\n                                    <span className=\"helptext\">\n                                        This is how many images you want to\n                                        generate\n                                    </span>\n                                </div>\n                            )}\n                            {/* size slider */}\n                            <div className=\"form-group\">\n                                <label htmlFor=\"size\">\n                                    Size: {scaledAspectRatio.width} x{\" \"}\n                                    {scaledAspectRatio.height}\n                                </label>\n                                {/* range slider from 1 to 2 in increments of 0.1 */}\n                                <input\n                                    type=\"range\"\n                                    className=\"form-control-range\"\n                                    id=\"size\"\n                                    min=\"1\"\n                                    max=\"2\"\n                                    step=\"0.1\"\n                                    value={size}\n                                    onChange={(e) =>\n                                        setSize(parseFloat(e.target.value))\n                                    }\n                                />\n                                <span className=\"helptext\">\n                                    This allows you to adjust the size of your\n                                    images. Larger images cost more credits.\n                                </span>\n                            </div>\n\n                            {(parentId || encodedImage) && (\n                                <div className=\"form-group\">\n                                    {/* variation strength */}\n                                    <label htmlFor=\"variationStrength\">\n                                        Variation Strength:&nbsp;\n                                        {(variationStrength * 100).toFixed(0)}%\n                                    </label>\n                                    <input\n                                        type=\"range\"\n                                        className=\"form-control-range\"\n                                        id=\"variationStrength\"\n                                        min=\"0.05\"\n                                        max=\"0.95\"\n                                        step=\"0.05\"\n                                        value={variationStrength}\n                                        onChange={(e) =>\n                                            setVariationStrength(\n                                                parseFloat(e.target.value)\n                                            )\n                                        }\n                                    />\n                                    <span className=\"helptext\">\n                                        This is how much variation you want to\n                                        see from the parent image\n                                    </span>\n                                </div>\n                            )}\n                            {encodedImage && (\n                                // controlnet type - canny, hed, depth, normal, openpose, seg, scribble, fakescribbles, hough\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"controlNetType\">\n                                        Control Net Type\n                                    </label>\n                                    <select\n                                        className=\"form-control\"\n                                        id=\"controlNetType\"\n                                        value={controlnetType}\n                                        onChange={(e) =>\n                                            setControlnetType(e.target.value)\n                                        }\n                                    >\n                                        <option value=\"\">None</option>\n                                        {controlnetTypes.map((type) => (\n                                            <option\n                                                value={type}\n                                                key={`type-${type}`}\n                                            >\n                                                {type}\n                                            </option>\n                                        ))}\n                                    </select>\n                                    <span className=\"helptext\">\n                                        Controlnet is an advanced way of\n                                        controlling the output of image\n                                        generation. You can read more about it{\" \"}\n                                        <a\n                                            target=\"_blank\"\n                                            href=\"https://bootcamp.uxdesign.cc/controlnet-and-stable-diffusion-a-game-changer-for-ai-image-generation-83555cb942fc\"\n                                        >\n                                            here.\n                                        </a>\n                                    </span>\n                                </div>\n                            )}\n                            {/* cfg scale. Slider from 1 to 20 in increments of 0.1 */}\n                            <div className=\"form-group\">\n                                <label>CFG Scale: {cfgScale.toFixed(1)}</label>\n                                <input\n                                    type=\"range\"\n                                    className=\"form-control-range\"\n                                    min=\"1\"\n                                    max=\"20\"\n                                    step=\"0.5\"\n                                    value={cfgScale}\n                                    onChange={(e) =>\n                                        setCfgScale(parseFloat(e.target.value))\n                                    }\n                                />\n                                <span className=\"helptext\">\n                                    Adjust the CFG scale to control how much the\n                                    image looks like the prompt.\n                                </span>\n                            </div>\n                            <SeedInput seed={seed} setSeed={setSeed} />\n\n                            <div\n                                className=\"form-group\"\n                                style={{ minHeight: \"20px\" }}\n                            >\n                                <div className=\"float-right\">\n                                    {parent && (\n                                        <button\n                                            type=\"button\"\n                                            className=\"btn btn-secondary light-button\"\n                                            onClick={handleCancel}\n                                        >\n                                            <i className=\"fas fa-times\"></i>\n                                            &nbsp;CANCEL\n                                        </button>\n                                    )}\n                                    <button\n                                        type=\"submit\"\n                                        className=\"btn btn-primary\"\n                                        style={{ marginLeft: \"8px\" }}\n                                        disabled={!prompt || creating}\n                                    >\n                                        {/* paintbrush button */}\n                                        {!creating && (\n                                            <i className=\"fas fa-paint-brush\"></i>\n                                        )}\n                                        {/* spinner button */}\n                                        {creating && (\n                                            <i className=\"fas fa-spinner fa-spin\"></i>\n                                        )}\n                                        &nbsp;PAINT\n                                    </button>\n\n                                    <button\n                                        type=\"button\"\n                                        className=\"btn btn-secondary light-button\"\n                                        onClick={handleEdit}\n                                        style={{ marginLeft: \"8px\" }}\n                                        disabled={!prompt || creating}\n                                    >\n                                        <i className=\"fas fa-edit\"></i>\n                                        &nbsp;EDIT\n                                    </button>\n                                </div>\n                            </div>\n                        </div>\n                    )}\n                </div>\n            </form>\n            {selectingModel && (\n                <ModelSelector\n                    api={api}\n                    onCancel={() => setSelectingModel(false)}\n                    onSelectModel={onSelectModel}\n                    initialSelectedModel={model}\n                    inpainting={false}\n                />\n            )}\n            {selectingLora && (\n                <LoraModal\n                    onCancel={() => setSelectingLora(false)}\n                    onConfirm={lora => onAddLora(lora)}\n                />\n            )}\n        </>\n    );\n};\n","import { FC } from \"react\";\n\ninterface Props {\n    progress: number;\n}\n\nexport const ProgressBar: FC<Props> = ({ progress }) => {\n    return (\n        <div className=\"progress\" style={{ height: \"20px\", marginTop: \"16px\" }}>\n            <div\n                className=\"progress-bar\"\n                role=\"progressbar\"\n                style={{ width: `${progress * 100}%` }}\n                aria-valuenow={progress * 100}\n                aria-valuemin={0}\n                aria-valuemax={100}\n            >\n                {Math.round(progress * 100)}%\n            </div>\n        </div>\n    );\n};\n","export function sleep(ms: number): Promise<void> {\n    return new Promise(resolve => window.setTimeout(resolve, ms));\n}\n","const BASE_IMAGE_SIZE = 512 * 512;\n\nexport function calculateImagesCost(count: number, width: number, height: number): number {\n    // 512x512 = 1 credit\n    // floor(count * width * height / 512 / 512)\n    return Math.max(count * Math.floor(width * height / BASE_IMAGE_SIZE), 1);\n}","import { FC } from \"react\";\nimport { LoraConfig } from \"../client\";\nimport { SelectedLora } from \"./LoraSelector\";\n\ninterface Props {\n    onRemove: (lora: SelectedLora) => void;\n    lora: SelectedLora;\n}\n\n// style the button like this:\n// <button\n//     type=\"button\"\n//     className=\"btn btn-secondary light-button\"\n//     style={{ marginLeft: \"8px\" }}\n//     onClick={() => setSelectingLora(true)}\n// >\n//     <i className=\"fas fa-plus\"></i>&nbsp;Add Lora\n// </button>\n\n// the button should have an \"X\" icon, and when you click the icon the onRemove function should be called\n// show the name of the lora and the strength\nexport const SelectedLoraTag: FC<Props> = ({ onRemove, lora }) => {\n    return <button\n        type=\"button\"\n        className=\"btn btn-secondary light-button\"\n        style={{ marginLeft: \"8px\", cursor: \"default\" }}\n    >\n        {lora.lora.name}\n        &nbsp;\n        <i className=\"fas fa-times\" style={{cursor: \"pointer\"}} onClick={() => onRemove(lora)}></i>\n    </button>;\n};","import { FC } from \"react\";\nimport { OverlayTrigger, Tooltip } from \"react-bootstrap\";\nimport { SelectedLora } from \"./LoraSelector\";\n\ninterface Props {\n    prompt: string;\n    selectedLoras: SelectedLora[];\n    onAddTrigger: (trigger: string) => void;\n}\n\nexport const LoraTriggers: FC<Props> = ({\n    prompt,\n    selectedLoras,\n    onAddTrigger,\n}) => {\n    const allTriggers = [];\n    for (const lora of selectedLoras) {\n        for (let trigger of lora.lora.modelVersions[0].trainedWords) {\n            if (\n                prompt.toLowerCase().indexOf(trigger.toLowerCase()) === -1 &&\n                allTriggers.indexOf(trigger) === -1\n            ) {\n                allTriggers.push(trigger);\n            }\n        }\n    }\n\n    const renderTooltip = (trigger: string) => (\n        <Tooltip id=\"button-tooltip\">{trigger}</Tooltip>\n    );\n\n    return (\n        <div style={{textAlign: \"left\", padding: \"8px\"}}>\n            <h5>Available Triggers</h5>\n            {allTriggers.map((trigger, index) => (\n                <OverlayTrigger\n                    key={index}\n                    placement=\"top\"\n                    overlay={renderTooltip(trigger)}\n                >\n                    <span\n                        className=\"badge bg-secondary me-2\"\n                        style={{ cursor: \"pointer\", marginRight: \"8px\" }}\n                        onClick={() => onAddTrigger(trigger)}\n                    >\n                        <i className=\"fas fa-plus ms-2\"></i>&nbsp;\n                        {trigger.length > 20 ? trigger.slice(0, 20) + \"...\" : trigger}\n                    </span>\n                </OverlayTrigger>\n            ))}\n        </div>\n    );\n};\n","import { FC, useEffect, useState } from \"react\";\nimport { ListGroup } from \"react-bootstrap\";\nimport { StableDiffusionModel } from \"../client\";\n\ninterface Props {\n    models: StableDiffusionModel[];\n    onSelectModel: (model: StableDiffusionModel) => void;\n    selectedModel: string;\n}\n\nconst MOBILE_HEIGHT_PERCENT = 0.3;\n\nexport const ModelList: FC<Props> = ({ models, onSelectModel, selectedModel }) => {\n    const [maxHeight, setMaxHeight] = useState(window.innerWidth < 576 ? window.innerHeight * MOBILE_HEIGHT_PERCENT : window.innerHeight * 0.7); // Set maxHeight to 80% of the viewport height\n\n    useEffect(() => {\n        const handleResize = () => {\n            let maxHeight = window.innerHeight * 0.7;\n            if (window.innerWidth < 576) {\n                maxHeight = window.innerHeight * MOBILE_HEIGHT_PERCENT;\n            }\n            setMaxHeight(maxHeight); // Update maxHeight based on the current viewport height\n        };\n\n        window.addEventListener(\"resize\", handleResize);\n        return () => {\n            window.removeEventListener(\"resize\", handleResize);\n        };\n    }, []);\n\n    return (\n        <ListGroup\n            style={{\n                maxHeight: `${maxHeight}px`,\n                overflowY: \"auto\",\n                border: \"1px solid #808080\",\n                marginBottom: \"8px\",\n            }}\n        >\n            {models.map((model) => (\n                <ListGroup.Item\n                    key={model.name}\n                    active={selectedModel === model.name}\n                    onClick={() => onSelectModel(model)}\n                    style={{\n                        cursor: \"pointer\",\n                    }}\n                >\n                    {model.name}\n                </ListGroup.Item>\n            ))}\n        </ListGroup>\n    );\n};\n","import { useState, useEffect } from \"react\";\n\nexport class SimpleCache {\n    private storage: Storage;\n\n    constructor() {\n        this.storage = window.localStorage;\n    }\n\n    setItem(key: string, value: any, ttl = 60 * 60) {\n        const item: {\n            value: any;\n            expiry: number;\n        } = {\n            value,\n            expiry: Date.now() + ttl * 1000,\n        };\n        this.storage.setItem(key, JSON.stringify(item));\n    }\n\n    getItem(key: string): any {\n        try {\n            const itemStr = this.storage.getItem(key);\n            if (!itemStr) {\n                return null;\n            }\n    \n            const item: {\n                value: any;\n                expiry: number;\n            } = JSON.parse(itemStr);\n            if (Date.now() > item.expiry) {\n                this.storage.removeItem(key);\n                return null;\n            }\n            return item.value;\n        } catch (error) {\n            console.error(error);\n            return null;\n        }\n    }\n\n    removeItem(key: string) {\n        this.storage.removeItem(key);\n    }\n\n    clear() {\n        this.storage.clear();\n    }\n}\n\nconst cache = new SimpleCache();\n\nexport function useCache<T>(key: string, initialValue: T): [T, React.Dispatch<React.SetStateAction<T>>] {\n  const [value, setValue] = useState<T>(() => {\n    const cachedValue = cache.getItem(key);\n    return cachedValue !== null ? cachedValue : initialValue;\n  });\n\n  useEffect(() => {\n    cache.setItem(key, value);\n  }, [key, value]);\n\n  return [value, setValue];\n}\n","import React, { useEffect, useState } from \"react\";\nimport { Button, Modal, Form, ListGroup, Row, Col } from \"react-bootstrap\";\nimport axios from \"axios\";\nimport { AIBrushApi, StableDiffusionModel } from \"../client\";\nimport { ModelList } from \"./ModelList\";\nimport { useCache } from \"../lib/localcache\";\nimport { recentModels } from \"../lib/recentList\";\n\nconst httpclient = axios.create();\n\ninterface ModelSelectorProps {\n    api: AIBrushApi;\n    initialSelectedModel: string;\n    onSelectModel: (model: string) => void;\n    onCancel: () => void;\n    inpainting: boolean;\n}\n\n\n\nconst ModelSelector: React.FC<ModelSelectorProps> = ({\n    api,\n    initialSelectedModel,\n    onSelectModel,\n    onCancel,\n    inpainting,\n}) => {\n    const [models, setModels] = useCache<StableDiffusionModel[]>(\"models\", []);\n    const [selectedModel, setSelectedModel] =\n        useState<StableDiffusionModel | null>(null);\n    const [searchTerm, setSearchTerm] = useState(\"\");\n\n    const filteredModels = models.filter((model) =>\n        model.inpainting === inpainting && model.name.toLowerCase().includes(searchTerm.toLowerCase())\n    );\n\n    const handleSelect = () => {\n        console.log(\"Selected model:\", selectedModel);\n        if (selectedModel) {\n            onSelectModel(selectedModel.name);\n        }\n    };\n\n    const handleSearch = (e: React.ChangeEvent<HTMLInputElement>) => {\n        setSearchTerm(e.target.value);\n    };\n\n    const handleModelClick = (model: StableDiffusionModel) => {\n        setSelectedModel(model);\n    };\n\n    useEffect(() => {\n        const setSortedModels = (\n            selectedModel: StableDiffusionModel,\n            models: StableDiffusionModel[]\n        ) => {\n            recentModels.addItem(selectedModel.name);\n\n            const recentModelNames = recentModels.getItems();\n            // map from model name to index\n            const recentModelIndices: { [key: string]: number } = {};\n            recentModelNames.forEach((name, index) => {\n                recentModelIndices[name] = index;\n            });\n            // sort models by recentness\n            const sortedModels = models.sort((a, b) => {\n                const aIndex = recentModelIndices[a.name];\n                const bIndex = recentModelIndices[b.name];\n                if (aIndex === undefined && bIndex === undefined) {\n                    return 0;\n                } else if (aIndex === undefined) {\n                    return 1;\n                } else if (bIndex === undefined) {\n                    return -1;\n                } else {\n                    return aIndex - bIndex;\n                }\n            });\n\n            setModels(sortedModels);\n        };\n\n        if (!models || models.length === 0) {\n            api.getModels().then((res) => {\n                console.log(res);\n                const selectedModel =\n                    res.data[initialSelectedModel] ||\n                    Object.values(res.data)[0];\n                console.log(\"Selected model:\", selectedModel);\n                setSelectedModel(selectedModel);\n                setSortedModels(selectedModel, Object.values(res.data));\n            });\n        } else {\n            const selectedModel =\n                models.find((model) => model.name === initialSelectedModel) ||\n                models[0];\n            setSelectedModel(selectedModel);\n            setSortedModels(selectedModel, models);\n        }\n    }, [api, models]);\n\n    useEffect(() => {\n        if (initialSelectedModel) {\n            recentModels.addItem(initialSelectedModel);\n        }\n    }, [initialSelectedModel]);\n\n    return (\n        <>\n            <Modal show={true} onHide={onCancel} size=\"xl\">\n                <Modal.Header closeButton>\n                    <Modal.Title>Select Model</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <Form.Control\n                        type=\"text\"\n                        placeholder=\"Search\"\n                        value={searchTerm}\n                        onChange={handleSearch}\n                    />\n                    <Row className=\"mt-3\">\n                        <Col sm={4}>\n                            <ModelList\n                                models={filteredModels}\n                                onSelectModel={handleModelClick}\n                                selectedModel={selectedModel?.name || \"\"}\n                            />\n                        </Col>\n                        <Col sm={8}>\n                            {selectedModel && (\n                                <>\n                                    <h5>{selectedModel.name}</h5>\n                                    <p>{selectedModel.description}</p>\n                                    {selectedModel.showcases &&\n                                        selectedModel.showcases.length > 0 && (\n                                            <img\n                                                src={selectedModel.showcases[0]}\n                                                alt=\"Showcase\"\n                                                style={{\n                                                    width: \"70%\",\n                                                }}\n                                            />\n                                        )}\n                                </>\n                            )}\n                        </Col>\n                    </Row>\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button variant=\"secondary\" onClick={onCancel}>\n                        Cancel\n                    </Button>\n                    <Button\n                        variant=\"primary\"\n                        onClick={handleSelect}\n                        disabled={!selectedModel}\n                    >\n                        Select\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n        </>\n    );\n};\n\nexport default ModelSelector;\n","import { OverlayTrigger, Tooltip } from \"react-bootstrap\";\n\ninterface Props {\n    onClick: () => void;\n}\n\nexport const ResetToDefaultIcon = ({ onClick }: Props) => {\n    return (\n        <OverlayTrigger\n            placement=\"top\"\n            overlay={<Tooltip id=\"reset-tooltip\">Reset to Default</Tooltip>}\n        >\n            <i className=\"fa fa-sync\" style={{\n                cursor: \"pointer\",\n            }} onClick={onClick}></i>\n        </OverlayTrigger>\n    );\n};\n","import React, { FC, useEffect, useState } from 'react';\nimport moment from \"moment\";\n\n// implement an error notification component\n// error message and timestamp are passed in as props\n// but close button can make the error message disappear\n\n// show error when the timestamp or message changes with useEffect hook\n// hide error when the close button is clicked\n\ninterface Props {\n    message: string | null;\n    timestamp: number;\n}\n\ninterface AlertProps {\n    message: string;\n    timestamp: number;\n    alertType: 'success' | 'info' | 'warning' | 'danger';\n}\n\nconst Alert: FC<AlertProps> = ({ message, timestamp, alertType }) => {\n    const [show, setShow] = useState(!!message);\n\n    useEffect(() => {\n        setShow(!!message);\n        // set a timeout of 10 seconds to hide the message if it is currently showing\n        if (message) {\n            const timeout = setTimeout(() => {\n                setShow(false);\n            }, 10000);\n            return () => {\n                clearTimeout(timeout);\n            };\n        }\n    }, [message, timestamp]);\n\n    if (!show) {\n        return null;\n    }\n\n    return (\n        <div className={`alert alert-${alertType} ${show ? 'show' : 'hide'}`}>\n            <button\n                type=\"button\"\n                className=\"close\"\n                onClick={() => setShow(false)}\n            >\n                &times;\n            </button>\n            {message}\n        </div>\n    );\n};\n\nexport const ErrorNotification: FC<Props> = ({ message, timestamp }) => {\n    return (\n        <Alert message={message || ''} timestamp={timestamp} alertType=\"danger\" />\n    );\n};\n\nexport const SuccessNotification: FC<Props> = ({ message, timestamp }) => {\n    return (\n        <Alert message={message || ''} timestamp={timestamp} alertType=\"success\" />\n    );\n};\n","import React, { FC, useState, useEffect } from \"react\";\nimport { ChromePicker } from \"react-color\";\n\nimport \"./ColorPicker.css\"\n\ninterface Props {\n    color: string;\n    onColorSelected: (color: string) => void;\n}\n\nexport const ColorPicker: FC<Props> = ({ color, onColorSelected }) => {\n    const [displayColorPicker, setDisplayColorPicker] = useState(false);\n    const [tmpColor, setTmpColor] = useState(color);\n\n    const handleClick = () => {\n        setDisplayColorPicker(!displayColorPicker);\n        if (displayColorPicker) {\n            onColorSelected(tmpColor);\n        }\n    };\n\n    const handleClose = () => {\n        setDisplayColorPicker(false);\n        if (displayColorPicker) {\n            onColorSelected(tmpColor);\n        }\n    };\n\n    const popover: React.CSSProperties = {\n        position: \"absolute\",\n        zIndex: 2,\n    };\n    const cover: React.CSSProperties = {\n        position: \"fixed\",\n        top: \"0px\",\n        right: \"0px\",\n        bottom: \"0px\",\n        left: \"0px\",\n    };\n\n    return (\n        <>\n            <button className=\"color-picker\" onClick={handleClick}>\n                <i className=\"fas fa-plus\" />\n            </button>\n            {displayColorPicker ? (\n                <div style={popover}>\n                    <div style={cover} onClick={handleClose} />\n                    <ChromePicker\n                        color={tmpColor}\n                        onChange={(color) => setTmpColor(color.hex)}\n                        onChangeComplete={(color) => setTmpColor(color.hex)}\n                    />\n                </div>\n            ) : null}\n        </>\n    );\n};\n","import React, { FC, useEffect, useState } from \"react\";\nimport { ChromePicker } from \"react-color\";\n\nimport { Renderer } from \"./renderer\";\nimport { BaseTool, Tool } from \"./tool\";\nimport { ZoomHelper } from \"./zoomHelper\";\nimport { PaletteButton } from \"./PaletteButton\";\nimport { ColorPicker } from \"./ColorPicker\";\n\nexport const defaultColors = [\n    \"#FFFFFF\",\n    \"#5A2C02\",\n    \"#386EB6\",\n    \"#6B31A1\",\n    \"#CB2C26\",\n    \"#000000\",\n    \"#888888\",\n    \"#50B050\",\n    \"#FBDB37\",\n    \"#E88D2D\",\n];\n\nexport class PencilTool extends BaseTool implements Tool {\n    private brushSize = 10;\n\n    private panning = false;\n    private isDrawing = false;\n    private lastX = 0;\n    private lastY = 0;\n    private colorPicking = false;\n    private lastPickedColor = \"#000000\";\n    private _dirty = false;\n\n    set dirty(dirty: boolean) {\n        this._dirty = dirty;\n        if (this.dirtyListener) {\n            this.dirtyListener(dirty);\n        }\n    }\n\n    get dirty() {\n        return this._dirty;\n    }\n\n    private dirtyListener?: (dirty: boolean) => void;\n    private colorPickedListener?: (color: string) => void;\n\n    constructor(\n        renderer: Renderer,\n        private layer: \"base\" | \"mask\",\n        private brushColor = defaultColors[0],\n        name = \"pencil\"\n    ) {\n        super(renderer, name);\n    }\n\n    private sync() {\n        if (this.colorPicking) {\n            this.renderer.setCursor({\n                x: this.lastX,\n                y: this.lastY,\n                radius: this.renderer.getWidth() / 20,\n                color: this.lastPickedColor,\n                type: \"colorpicker\",\n            });\n        } else {\n            this.renderer.setCursor({\n                x: this.lastX,\n                y: this.lastY,\n                radius: this.brushSize / 2,\n                color: this.brushColor,\n                type: \"circle-fill\",\n            });\n        }\n    }\n\n    updateArgs(args: any) {\n        super.updateArgs(args);\n        this.brushSize = args.brushSize || 10;\n        this.brushColor = args.brushColor || defaultColors[0];\n        this.sync();\n    }\n\n    onMouseDown(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        if (this.colorPicking) {\n            return;\n        }\n        if (event.button === 0) {\n            let { x, y } = this.zoomHelper.translateMouseToCanvasCoordinates(\n                event.nativeEvent.offsetX,\n                event.nativeEvent.offsetY\n            );\n            this.renderer.drawPoint(\n                x,\n                y,\n                this.brushSize,\n                this.brushColor,\n                this.layer\n            );\n            this.isDrawing = true;\n            this.lastX = x;\n            this.lastY = y;\n            this.dirty = true;\n        } else if (event.button === 1) {\n            this.panning = true;\n        }\n        this.sync();\n    }\n\n    onMouseMove(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>): void {\n        let { x, y } = this.zoomHelper.translateMouseToCanvasCoordinates(\n            event.nativeEvent.offsetX,\n            event.nativeEvent.offsetY\n        );\n        if (this.colorPicking) {\n            this.lastPickedColor = this.renderer.getPixel(x, y);\n        } else if (this.panning) {\n            this.zoomHelper.onPan(event);\n        } else {\n            if (this.isDrawing) {\n                this.renderer.drawLine(\n                    this.lastX,\n                    this.lastY,\n                    x,\n                    y,\n                    this.brushSize,\n                    this.brushColor,\n                    this.layer\n                );\n                this.dirty = true;\n            }\n        }\n        this.lastX = x;\n        this.lastY = y;\n        this.sync();\n    }\n\n    onMouseUp(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>): void {\n        if (event.button === 0) {\n            this.isDrawing = false;\n            if (this.colorPicking) {\n                this.colorPicking = false;\n                this.brushColor = this.lastPickedColor;\n                if (this.colorPickedListener) {\n                    this.colorPickedListener(this.lastPickedColor);\n                }\n            }\n        } else if (event.button === 1) {\n            this.panning = false;\n        }\n        this.sync();\n    }\n\n    onWheel(event: WheelEvent) {\n        this.zoomHelper.onWheel(event);\n        this.sync();\n    }\n\n    cancel() {\n        // kind of a hack, clears the selection layer\n        this.renderer.setEditImage(null);\n        this.dirty = false;\n    }\n\n    confirm() {\n        this.renderer.commitSelection();\n        const encodedImage = this.renderer.getEncodedImage(null);\n        if (encodedImage && this.saveListener) {\n            this.saveListener(encodedImage);\n        }\n        this.dirty = false;\n    }\n\n    onSaveImage(listener: (encodedImage: string) => void): void {\n        this.saveListener = listener;\n    }\n\n    onDirty(listener: (dirty: boolean) => void): void {\n        this.dirtyListener = listener;\n    }\n\n    destroy(): boolean {\n        if (this.dirty) {\n            this.renderer.commitSelection();\n        }\n        return true;\n    }\n\n    beginColorpicker(): void {\n        this.colorPicking = true;\n        this.sync();\n    }\n\n    onColorPicked(listener: (color: string) => void): void {\n        this.colorPickedListener = listener;\n    }\n}\n\ninterface ControlsProps {\n    renderer: Renderer;\n    tool: PencilTool;\n    colors: string[];\n}\n\nconst MAX_PALETTE_SIZE = 30;\n\nfunction addToPalette(palette: string[], color: string): string[] {\n    if (palette.indexOf(color) === -1) {\n        // insert at the beginning\n        palette = [color, ...palette];\n    }\n    if (palette.length > MAX_PALETTE_SIZE) {\n        palette = palette.slice(0, MAX_PALETTE_SIZE);\n    }\n    return palette;\n}\n\nexport const Controls: FC<ControlsProps> = ({ renderer, tool, colors }) => {\n    const [brushSize, setBrushSize] = useState(10);\n    const [brushColor, setBrushColor] = useState(colors[0]);\n    const [palette, setPalette] = useState(colors);\n    const [dirty, setDirty] = useState(false);\n\n    tool.onDirty(setDirty);\n\n    useEffect(() => {\n        tool.updateArgs({\n            brushSize,\n            brushColor,\n            palette,\n        });\n    }, [brushSize, brushColor, palette]);\n\n    const onColorSelected = (color: string) => {\n        setBrushColor(color);\n        setPalette(addToPalette(palette, color));\n    };\n\n    tool.onColorPicked(onColorSelected);\n\n    return (\n        <div style={{ marginTop: \"16px\" }}>\n            <div className=\"form-group\">\n                <label style={{ width: \"100%\" }}>\n                    Brush size\n                    <small\n                        className=\"form-text text-muted\"\n                        style={{ float: \"right\" }}\n                    >\n                        {brushSize}px\n                    </small>\n                </label>\n                <input\n                    type=\"range\"\n                    className=\"form-control-range\"\n                    min=\"1\"\n                    max=\"100\"\n                    value={brushSize}\n                    onChange={(e) => setBrushSize(parseInt(e.target.value))}\n                />\n            </div>\n            <div\n                style={{\n                    display: \"flex\",\n                    flexDirection: \"row\",\n                    flexWrap: \"wrap\",\n                }}\n            >\n                {palette.map((color, i) => (\n                    <PaletteButton\n                        key={i}\n                        selectedColor={brushColor}\n                        color={color}\n                        onClick={(color) => setBrushColor(color)}\n                        onColorSelected={(color) => onColorSelected(color)}\n                    />\n                ))}\n                {/* <div\n                    className=\"color-picker\"\n                    style={{ textAlign: \"center\", backgroundColor: \"#ccc\" }}\n                >\n                    <i className=\"fas fa-eye-dropper\" />\n                </div> */}\n                <button\n                    className=\"color-picker\"\n                    onClick={() => tool.beginColorpicker()}\n                >\n                    <i className=\"fas fa-eye-dropper\" />\n                </button>\n                <ColorPicker\n                    color={brushColor}\n                    onColorSelected={(color) => onColorSelected(color)}\n                />\n            </div>\n            <div\n                className=\"form-group\"\n                style={{\n                    marginTop: \"16px\",\n                    visibility: dirty ? \"visible\" : \"hidden\",\n                }}\n            >\n                <button\n                    className=\"btn btn-secondary\"\n                    onClick={() => tool.cancel()}\n                >\n                    Revert\n                </button>\n                <button\n                    className=\"btn btn-primary\"\n                    onClick={() => tool.confirm()}\n                    style={{ marginLeft: \"8px\" }}\n                >\n                    Save\n                </button>\n            </div>\n        </div>\n    );\n};\n"],"sourceRoot":""}