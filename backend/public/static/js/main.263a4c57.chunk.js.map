{"version":3,"sources":["lib/upscale.ts","pages/Homepage.tsx","components/AspectRatioSelector.tsx","lib/kvstore.ts","components/SelectedLora.tsx","components/LoraTriggers.tsx","pages/image-editor/PaletteButton.tsx","components/PendingImagesThumbnail.tsx","components/PendingImages.tsx","components/CopyToClipboardIcon.tsx","components/Swipe.tsx","components/ImagePopup.tsx","lib/recentLoras.ts","components/LoraSelector.tsx","pages/image-editor/enhance-tool.tsx","pages/image-editor/smudge-tool.tsx","pages/image-editor/inpaint-tool.tsx","client/api.ts","client/base.ts","client/common.ts","lib/imageutil.ts","pages/image-editor/ImageEditor.tsx","pages/image-editor/renderer.ts","lib/aspecRatios.ts","pages/image-editor/mask-editor-controls.tsx","pages/image-editor/import-export.tsx","pages/image-editor/augment-tool.tsx","components/OutOfCreditsModal.tsx","components/PaymentStatusModal.tsx","components/BusyModal.tsx","pages/image-editor/zoomHelper.tsx","pages/image-editor/tool.ts","lib/localImagesStore.ts","pages/Login.tsx","components/TokenRefresher.tsx","components/Healthchecker.tsx","pages/admin/GenerateCode.tsx","pages/admin/GlobalSettings.tsx","pages/admin/Admin.tsx","pages/DeletedImages.tsx","pages/DiscordLogin.tsx","pages/LocalDeletedImages.tsx","pages/SavedImagesPage.tsx","lib/imagesCache.ts","pages/TestPage.tsx","components/CreditsBalance.tsx","App.tsx","config.ts","reportWebVitals.ts","index.tsx","lib/recentList.ts","lib/apisocket.ts","components/CostIndicator.tsx","components/ImageThumbnail.tsx","lib/supportedModels.ts","components/SeedInput.tsx","components/TextInputWithHistory.tsx","components/ImagePrompt.tsx","components/ProgressBar.tsx","lib/sleep.ts","lib/credits.ts","components/ModelList.tsx","lib/localcache.ts","components/ModelSelector.tsx","components/ResetToDefaultIcon.tsx","components/Alerts.tsx","pages/image-editor/ColorPicker.tsx","pages/image-editor/pencil-tool.tsx","pages/image-editor/selection-tool.tsx"],"names":["getUpscaleLevel","width","height","i","aspectRatios","length","aspectRatio","anonymousClient","axios","create","defaults","headers","common","Homepage","api","assetsUrl","apiSocket","localImages","paymentStatus","useState","creating","setCreating","selectedImage","setSelectedImage","parentImage","setParentImage","loadingParent","setLoadingParent","savingImage","setSavingImage","uploadProgress","setUploadingProgress","showPendingImages","setShowPendingImages","images","setImages","err","setErr","errTime","setErrTime","success","setSuccess","successTime","setSuccessTime","hasMore","setHasMore","search","setSearch","searchDebounce","setSearchDebounce","bulkDeleteSelecting","setBulkDeleteSelecting","bulkDeleting","setBulkDeleting","bulkDeleteIds","setBulkDeleteIds","censorNSFW","setCensorNSFW","outOfCredits","setOutOfCredits","id","useParams","history","useHistory","location","useLocation","onError","moment","valueOf","useEffect","handle","setTimeout","clearTimeout","image","find","getImage","then","replace","onSubmit","input","a","window","scrollTo","encoded_image","convertPNGToJPG","encodedJpg","createTemporaryImage","tmpInitImage","binaryImageData","Buffer","from","put","data","upload_url","onUploadProgress","progressEvent","percentCompleted","loaded","total","undefined","tmp_jpg_id","createImage","newImages","saveImage","sort","sortImages","console","error","response","message","includes","onEditNewImage","encodedImage","createBlankImage","params","newImage","created_at","updated_at","created_by","steps","prompt","negative_prompt","denoising_strength","label","uuid","model","negative_score","nsfw","parent","score","status","StatusEnum","Completed","temporary","imageData","push","onNSFW","updatedImage","map","loadImages","log","cursor","add","listImages","resp","lock","pollImages","pendingOrProcessingImages","filter","pendingById","reduce","acc","batchGetImages","ids","updatedImages","statusChange","img","Error","deleteImage","getImageDownloadUrls","downloadUrls","get","image_url","responseType","base64ImageData","toString","src","timerHandle","setInterval","clearInterval","qs","parse","ignoreQueryPrefix","loadParent","isPendingOrProcessing","Pending","Processing","b","aScore","bScore","trim","onLoadMore","minUpdatedAt","forEach","Math","min","imagesById","deleted_at","onDelete","nextImage","index","findIndex","onFork","onSave","createInput","count","Saved","split","createEncodedThumbnail","encodedThumbnail","binaryThumbnailData","createResp","imageId","getImageUploadUrls","uploadUrls","thumbnail_url","hardDeleteImage","onEdit","onThumbnailClicked","onConfirmBulkDelete","promises","Object","keys","Promise","all","completedOrSavedImages","pendingImages","processingImages","style","fontSize","textAlign","timestamp","onCancel","className","marginTop","paddingBottom","marginBottom","value","type","placeholder","onChange","e","target","float","display","onClick","marginLeft","Toggle","variant","Menu","Item","dataLength","next","loader","pendingCount","processingCount","bulkDelete","onClose","onSwipe","direction","newIndex","show","title","progress","onDeleteImage","onHide","AspectRatioSelector","disabled","aspectRatioDetails","minHeight","alignItems","border","margin","displayName","max","parseInt","KVStore","dbConfig","db","this","resolve","reject","request","indexedDB","open","dbName","onupgradeneeded","result","createObjectStore","storeName","onsuccess","onerror","createDB","key","getDB","transaction","objectStore","delete","SelectedLoraTag","onRemove","lora","name","LoraTriggers","selectedLoras","onAddTrigger","allTriggers","modelVersions","trainedWords","trigger","toLowerCase","indexOf","padding","marginRight","PaletteButton","selectedColor","color","onColorSelected","displayColorPicker","setDisplayColorPicker","tmpColor","setTmpColor","backgroundColor","onDoubleClick","position","zIndex","hex","onChangeComplete","PendingImagesThumbnail","hover","setHover","icon","onMouseEnter","onMouseLeave","backgroundImage","backgroundSize","background","lineHeight","PendingImages","imageIcon","pendingDiv","phrases","substring","Header","closeButton","Title","Body","Footer","CopyToClipboardIcon","text","copied","setCopied","onCopy","Swipe","children","touchStart","setTouchStart","touchEnd","setTouchEnd","onTouchStart","targetTouches","clientX","onTouchMove","onTouchEnd","distance","isLeftSwipe","ImagePopup","useRef","showNSFW","setShowNSFW","current","swipeArrowMargin","innerWidth","maxImageHeight","innerHeight","Modal","size","left","top","transform","ref","maxWidth","maxHeight","alt","right","displayStatus","charAt","toUpperCase","slice","statusBadge","href","seed","recentLoras","kvstore","recentLoraIDs","recentList","getItems","loraID","getItem","savedLora","loraId","setItem","removed","addItem","deleteItem","LoraModal","onConfirm","inputValue","setInputValue","strength","setStrength","item","recentItems","setRecentItems","setError","busy","setBusy","handleSearch","useCallback","modelId","match","listRecentLoras","items","fetchRecentLoras","Form","preventDefault","Group","as","Row","Col","sm","Control","event","Button","ListGroup","recentItem","action","Label","column","step","parseFloat","Alert","dangerouslySetInnerHTML","__html","DOMPurify","sanitize","description","allowCommercialUse","creator","username","tags","tag","version","baseModel","word","idx","url","addLora","config","eraserWidthModifier","EnhanceTool","renderer","selectionTool","pencilTool","negativePrompt","variationStrength","loras","_dirty","worker","idCounter","_state","stateHandler","selectionControlsListener","maskHandler","selectedImageDataIndex","selectedImageData","panning","erasing","progressListener","errorListener","dirtyListener","SelectionTool","PencilTool","selectSupported","state","selectionArgs","getArgs","selectionOverlay","x","y","getWidth","getHeight","updateArgs","brushColor","setCursor","ImageUtilWorker","dirty","listener","handler","destroy","outpaint","zoomHelper","translateMouseToCanvasCoordinates","nativeEvent","offsetX","offsetY","button","ImageData","erasePoint","onMouseDown","getSelectionOverlay","baseWidth","eraserRadius","floor","relX","relY","startX","startY","endX","endY","j","sqrt","pow","alphaPct","alpha","setEditImage","featherWidth","radius","onPan","updateCursor","onMouseMove","onMouseUp","onWheel","args","maskData","loadImageDataElement","imageElement","canvas","document","createElement","ctx","getContext","drawImage","getImageData","newId","req","alphaMode","feather","pixels","alphaPixels","processRequest","updatedImageData","remove","isMasked","deleteMask","createMask","apisocket","notifyError","getEncodedImage","encodedMask","getEncodedMask","defaultArgs","updateProgress","tmpMaskImage","binaryMaskData","tmp_mask_id","ceil","completed","lastUpdate","onMessage","msg","JSON","NOTIFICATION_IMAGE_UPDATED","loadImageData","addMessageListener","startTime","lastCheck","completeCount","sleep","diff","pendingIds","updatedImagesResult","byId","updated","isAfter","removeMessageListener","saveListener","commitSelection","negative_phrases","BaseTool","EnhanceControls","tool","setCount","setDirty","setVariationStrength","setPrompt","setNegativePrompt","setModel","selectingModel","setSelectingModel","setState","setIsMasked","setProgress","selectingLora","setSelectingLora","setSelectedLoras","onChangeState","onChangeMask","onProgress","onDirty","cost","calculateImagesCost","role","data-dismiss","aria-label","aria-hidden","lockAspectRatio","htmlFor","parts","endsWith","join","round","selectedLora","onRemoveLora","imagesCost","onRevert","cancel","confirm","erase","submit","mask","when","onSelectModel","initialSelectedModel","inpainting","onAddLora","SmudgeTool","brushSize","brushOpacity","lastX","lastY","smudging","sync","smudgeLine","copyEditImageFromBaseImage","SmudgeControls","setBrushSize","setBrushOpacity","visibility","InpaintTool","imageWidth","imageHeight","selectionWidth","render","alphaMask","snapshot","undo","clearRedoStack","expandToOverlay","tmpImagePromises","tmpImages","binaryImages","uploadPromises","tmpImage","binaryImage","tmp_image_id","closestAspectRatio","getClosestAspectRatio","selection_overlay","InpaintControls","setoutpaint","checked","AddMetricItemTypeEnum","HealthcheckStatusEnum","ImageParamsControlnetTypeEnum","ImageParamsAugmentationEnum","UpsertWorkerInputStatusEnum","WorkerStatusEnum","BASE_PATH","BaseAPI","configuration","basePath","globalAxios","RequiredError","field","DUMMY_BASE_URL","assertParamExists","functionName","paramName","paramValue","setSearchParams","searchParams","URLSearchParams","objects","object","Array","isArray","append","set","serializeDataIfNeeded","requestOptions","nonString","isJsonMime","stringify","toPathString","pathname","hash","createRequestFunction","axiosArgs","axiosRequestArgs","options","AIBrushApiFp","localVarAxiosParamCreator","addMetrics","addMetricsInput","localVarUrlObj","URL","baseOptions","localVarRequestOptions","method","localVarQueryParameter","localVarHeaderParameter","query","headersFromBaseOptions","fields","batchGetImagesInput","createDepositCode","createDepositCodeInput","createImageInput","createInviteCode","createStripeSession","createStripeSessionInput","format","localVarPath","encodeURIComponent","String","discordLogin","getAssetsUrl","getCredits","getFeatures","getGlobalSettings","getMaskData","getModels","getThumbnailData","healthcheck","isAdmin","limit","login","loginInput","redeemDepositCode","code","refresh","refreshLoginInput","updateGlobalSettings","updateGlobalSettingsRequest","updateImage","updateImageInput","uploadImageData","body","uploadThumbnailData","verify","verifyLoginInput","AIBrushApiAxiosParamCreator","localVarAxiosArgs","AIBrushApi","Image","onload","dataUrl","toDataURL","urls","catch","splitImage","initImage","putImageData","tile_size","num_tiles_x","num_tiles_y","tiles","x0","y0","x1","y1","tile","numTilesX","numTilesY","tileSize","mergeTiles","splitResult","tileCanvas","imageDataToCanvas","fixImageSize","resizeImage","context","fillStyle","fillRect","numWorkers","workers","callbacks","Worker","process","addEventListener","bind","postMessage","terminate","thumbSize","cropX","cropY","cropDimension","base64","decodeImage","binaryImageToDataBase64","resizeEncodedImage","encodedImageToBlob","binaryString","atob","arr","charCodeAt","Blob","Uint8Array","uploadBlob","signedUrl","blob","xhr","XMLHttpRequest","setRequestHeader","send","ImageEditor","showSelectionControls","setShowSelectionControls","tools","iconClass","constructor","r","renderControls","t","onShowSelectionControls","colors","defaultColors","setImage","setRenderer","setTool","toolConfig","setToolConfig","canUndo","setCanUndo","canRedo","setCanRedo","busyMessage","setBusyMessage","canvasRef","onSelectTool","toolconfig","newTool","onSaveImage","saveNewImage","newArgs","localImage","imageSrc","download_urls","createRenderer","setBaseImage","loadImage","onSnapshot","removeEventListener","updateCanvasSize","resetView","buttonClass","renderTool","redo","verticalAlign","touchAction","userSelect","select","Renderer","undoStack","redoStack","currentSnapshot","backgroundLayer","baseImageLayer","editLayer","maskLayer","selectionOverlayPreview","hasSelection","zoom","snapshotListener","initializeBackgroundLayer","allowRedo","pop","clearRect","notifySnapshotListener","shift","setTransform","globalAlpha","drawOverlay","resetMask","pattern","createPattern","createCheckeredPattern","color1","color2","updateSelectionOverlay","setSelectionOverlay","updateZoomAndOffset","lineWidth","strokeStyle","strokeRect","beginPath","arc","PI","stroke","fill","moveTo","lineTo","selection","imageDataToEncodedImage","erasure","layer","convertErasureToMask","imageLayer","brushx","brushy","absx","leftEdge","rightEdge","topEdge","bottomEdge","absy","contains","x2","y2","lineCap","unitVector","totalRed","totalGreen","totalBlue","averageRed","averageGreen","averageBlue","pixel","g","rgbToHex","minX","minY","newCanvas","AspectRatio","cfg","newWidth","newHeight","DEFAULT_ASPECT_RATIO","tests","aRatio","bRatio","abs","MaskEditor","setBrushColor","flexDirection","flexWrap","invertMask","ImportExportControls","backupImage","setBackupImage","files","byteString","buffer","ArrayBuffer","intArray","saveAs","onExport","AugmentControls","activeAugmentation","setActiveAugmentation","imageWorker","setImageWorker","lastError","setLastError","augmentImageData","augmentation","c","Upscale","FaceRestore","processingImage","checkResp","imageDataResp","upscaleFactor","newImageData","onAugment","OutOfCreditsModal","centered","to","PaymentStatusModal","setShow","handleClose","BusyModal","backdrop","keyboard","ZoomHelper","startTouches","startZoom","startOffsetX","startOffsetY","originalZoom","getZoom","getOffsetX","getOffsetY","canvasPoint","deltaY","xDiff","yDiff","movementX","movementY","rect","getBoundingClientRect","getCanvas","touches","canvasRect","startTouch1","startTouch2","touch1","touch2","startDistance","clientY","startCenterX","startCenterY","centerX","centerY","startCanvasPoint","xDiff2","yDiff2","mouseX","mouseY","touchHandle","_pinchZooming","_panning","localStorage","_updateCursor","touch","identifier","pageX","pageY","screenX","screenY","LocalImagesStore","evt","imagesStore","objectStoreNames","keyPath","createIndex","unique","_","legacyImage","stable_diffusion_strength","iterations","store","hydrateImage","cleanupDeletedImages","range","IDBKeyRange","lowerBound","upperBound","openCursor","continue","imagesRequest","clear","olderThan","getDeletedImages","deletedImages","subtract","Login","props","email","setEmail","emailSubmitted","setEmailSubmitted","setCode","inviteCode","onLogin","client","invite_code","onVerify","fontWeight","aria-describedby","host","protocol","redirectUri","discordLink","TokenRefresher","onCredentialsRefreshed","onCredentialsExpired","credentials","interval","refreshToken","loginResult","Healthchecker","healthCheck","setHealthCheck","GenerateCode","amount","setAmount","generatedCode","setGeneratedCode","handleSubmit","InputGroup","Append","GlobalSettings","minimum_worker_allocations","stable_diffusion","stable_diffusion_inpainting","swinir","workerSettings","setWorkerSettings","saving","setSaving","loadWorkerSettings","settings","settings_json","saveWorkerSettings","Admin","DeletedImages","deleting","setDeleting","onDeleteAllImages","onRestoreImage","goBack","borderBottom","ImageThumbnail","paddingTop","DiscordLogin","accessToken","LocalDeletedImages","clearDeletedImages","savedImagesCache","order","batchGetIds","savedImage","batchResult","SavedImagesPage","imagesResult","latestCursor","deletedIds","uniqueIds","Set","payload","NOTIFICATION_IMAGE_DELETED","Dropdown","res","TestPage","originalImage","setOriginalImage","upscaledImage","setUpscaledImage","upscaleImageData","onImageSelected","originalImageData","upscaledTile","upscaledImageData","upscale","feathered","upscaledCanvas","CreditsBalance","apiUrl","httpClient","ApiSocket","updateHttpClient","App","setCredentials","setAssetsUrl","setIsAdmin","features","setFeatures","onLogout","removeItem","init","assets_url","storedCredentials","is_admin","updateToken","connect","path","exact","bottom","privacy_uri","terms_uri","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","getElementById","RecentList","listSize","modelsJson","models","recentModels","getRecentItems","modelIndex","splice","unshift","saveRecentItems","recentNegativePrompts","messageListeners","l","close","WebSocket","onopen","onmessage","onclose","CostIndicator","retry","setRetry","backgroundRepeat","backgroundPosition","readOnly","controlnetTypes","SeedInput","setSeed","useCustomSeed","setUseCustomSeed","FormGroup","FormCheck","random","FormControl","TextInputWithHistory","onBlur","onSelect","eventKey","overflow","defaultNegativePrompt","encoded_mask","ImagePrompt","setAspectRatio","parentId","setParentId","advancedView","setAdvancedView","setEncodedImage","controlnetType","setControlnetType","cfgScale","setCfgScale","setSize","defaultAspectRatio","setAspectRatioDetails","originalWidth","setOriginalWidth","originalHeight","setOriginalHeight","resetState","controlnet_type","cfg_scale","bestMatch","scale","file","HTMLCanvasElement","scaledAspectRatio","borderTopLeftRadius","textDecoration","aspectRatioId","SelectedLora","toFixed","ModelSelector","ProgressBar","aria-valuenow","aria-valuemin","aria-valuemax","ms","ModelList","selectedModel","setMaxHeight","handleResize","overflowY","active","cache","storage","ttl","expiry","Date","now","itemStr","initialValue","cachedValue","setValue","useCache","setModels","setSelectedModel","searchTerm","setSearchTerm","filteredModels","setSortedModels","recentModelNames","recentModelIndices","sortedModels","aIndex","bIndex","values","showcases","ResetToDefaultIcon","placement","overlay","alertType","timeout","ErrorNotification","SuccessNotification","ColorPicker","isDrawing","colorPicking","lastPickedColor","colorPickedListener","drawPoint","getPixel","drawLine","Controls","palette","setPalette","addToPalette","onColorPicked","beginColorpicker","clamp","setSelectionOverlayPreview","upscaleLevel"],"mappings":"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","file":"static/js/main.263a4c57.chunk.js","sourcesContent":["import { aspectRatios } from \"./aspecRatios\";\n\nexport function getUpscaleLevel(width: number, height: number): number {\n    for (let i = 0; i < aspectRatios.length; i++) {\n        const aspectRatio = aspectRatios[i];\n        if (width * height <= aspectRatio.width * aspectRatio.height) {\n            return 0;\n        }\n        // if (width === aspectRatio.width && height === aspectRatio.height) {\n        //     return upscaleLevel;\n        // }\n    }\n    width /= 2;\n    height /= 2;\n    for (let i = 0; i < aspectRatios.length; i++) {\n        const aspectRatio = aspectRatios[i];\n        if (width * height <= aspectRatio.width * aspectRatio.height) {\n            return 1;\n        }\n        // if (width === aspectRatio.width && height === aspectRatio.height) {\n        //     return upscaleLevel;\n        // }\n    }\n    return 2;\n}\n","// V2 page\nimport { FC, useState, useEffect } from \"react\";\nimport * as uuid from \"uuid\";\nimport axios from \"axios\";\nimport qs from \"qs\";\nimport Dropdown from \"react-bootstrap/Dropdown\";\nimport { useParams, useHistory, Link, useLocation } from \"react-router-dom\";\nimport moment from \"moment\";\nimport ScrollToTop from \"react-scroll-to-top\";\nimport { AIBrushApi } from \"../client\";\nimport { CreateImageInput, StatusEnum, TemporaryImage } from \"../client/api\";\nimport { ImageThumbnail } from \"../components/ImageThumbnail\";\nimport { ImagePrompt, defaultArgs } from \"../components/ImagePrompt\";\nimport {\n    convertPNGToJPG,\n    createBlankImage,\n    createEncodedThumbnail,\n    encodedImageToBlob,\n    uploadBlob,\n} from \"../lib/imageutil\";\n\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport { ImagePopup } from \"../components/ImagePopup\";\nimport { BusyModal } from \"../components/BusyModal\";\nimport { PendingImagesThumbnail } from \"../components/PendingImagesThumbnail\";\nimport { PendingImages } from \"../components/PendingImages\";\nimport { ApiSocket } from \"../lib/apisocket\";\nimport { LocalImagesStore, LocalImage } from \"../lib/localImagesStore\";\nimport { ErrorNotification, SuccessNotification } from \"../components/Alerts\";\nimport { sleep } from \"../lib/sleep\";\nimport { ProgressBar } from \"../components/ProgressBar\";\nimport OutOfCreditsModal from \"../components/OutOfCreditsModal\";\nimport PaymentStatusModal from \"../components/PaymentStatusModal\";\n\nexport const anonymousClient = axios.create();\ndelete anonymousClient.defaults.headers.common[\"Authorization\"];\n\ninterface Props {\n    api: AIBrushApi;\n    apiSocket: ApiSocket;\n    assetsUrl: string;\n    localImages: LocalImagesStore;\n    paymentStatus?: \"success\" | \"canceled\";\n}\n\nexport const Homepage: FC<Props> = ({\n    api,\n    apiSocket,\n    assetsUrl,\n    localImages,\n    paymentStatus,\n}) => {\n    const [creating, setCreating] = useState(false);\n    const [selectedImage, setSelectedImage] = useState<LocalImage | null>(null);\n    const [parentImage, setParentImage] = useState<LocalImage | null>(null);\n    const [loadingParent, setLoadingParent] = useState(false);\n    const [savingImage, setSavingImage] = useState(false);\n    const [uploadProgress, setUploadingProgress] = useState(0);\n\n    const [showPendingImages, setShowPendingImages] = useState(false);\n\n    const [images, setImages] = useState<Array<LocalImage>>([]);\n    const [err, setErr] = useState<string | null>(null);\n    const [errTime, setErrTime] = useState<number>(0);\n    const [success, setSuccess] = useState<string | null>(null);\n    const [successTime, setSuccessTime] = useState<number>(0);\n\n    const [hasMore, setHasMore] = useState<boolean>(true);\n    const [search, setSearch] = useState<string>(\"\");\n    const [searchDebounce, setSearchDebounce] = useState<string>(\"\");\n\n    const [bulkDeleteSelecting, setBulkDeleteSelecting] = useState(false);\n    const [bulkDeleting, setBulkDeleting] = useState(false);\n    const [bulkDeleteIds, setBulkDeleteIds] = useState<{\n        [key: string]: boolean;\n    }>({});\n\n    const [censorNSFW, setCensorNSFW] = useState(true);\n    const [outOfCredits, setOutOfCredits] = useState(false);\n\n    const { id } = useParams<{ id?: string }>();\n    const history = useHistory();\n    const location = useLocation();\n\n    const onError = (err: string) => {\n        setErr(err);\n        setErrTime(moment().valueOf());\n    };\n\n    useEffect(() => {\n        let handle = setTimeout(() => {\n            setSearch(searchDebounce);\n        }, 500);\n        return () => {\n            clearTimeout(handle);\n        };\n    }, [searchDebounce]);\n\n    useEffect(() => {\n        if (id) {\n            // check if the image is already loaded\n            const image = images.find((image) => image.id === id);\n            if (image) {\n                setSelectedImage(image);\n            }\n            // refresh\n            localImages.getImage(id).then((image) => {\n                setSelectedImage(image);\n                if (!image) {\n                    history.replace(\"/\");\n                }\n            });\n        } else {\n            setSelectedImage(null);\n        }\n    }, [id]);\n\n    const onSubmit = async (input: CreateImageInput) => {\n        setCreating(true);\n        setParentImage(null);\n        setErr(null);\n        window.scrollTo(0, 0);\n        setUploadingProgress(0);\n        try {\n            if (input.encoded_image) {\n                const encodedJpg = await convertPNGToJPG(input.encoded_image);\n                const tmpInitImage = await api.createTemporaryImage(\"jpg\");\n                // convert base64 to binary\n                const binaryImageData = Buffer.from(\n                    encodedJpg,\n                    \"base64\"\n                );\n                await anonymousClient.put(\n                    tmpInitImage.data.upload_url,\n                    binaryImageData,\n                    {\n                        headers: {\n                            \"Content-Type\": \"image/jpeg\",\n                        },\n                        onUploadProgress: (progressEvent: any) => {\n                            const percentCompleted =\n                                progressEvent.loaded / progressEvent.total;\n                            setUploadingProgress(percentCompleted);\n                        },\n                    }\n                );\n                input.encoded_image = undefined;\n                input.tmp_jpg_id = tmpInitImage.data.id;\n            }\n\n            const newImages = await api.createImage(input);\n            if (newImages.data.images) {\n                for (let image of newImages.data.images || []) {\n                    localImages.saveImage(image);\n                }\n                setImages((images) => {\n                    return [...newImages.data.images!, ...images].sort(\n                        sortImages\n                    );\n                });\n            } else {\n                onError(\"Could not create images\");\n            }\n        } catch (e: any) {\n            console.error(e);\n            if (e.response?.data?.message?.includes(\"credits\")) {\n                setOutOfCredits(true);\n                return;\n            }\n            onError(\"Error creating images\");\n        } finally {\n            setCreating(false);\n        }\n    };\n\n    const onEditNewImage = async (input: CreateImageInput) => {\n        setCreating(true);\n        setParentImage(null);\n        setErr(null);\n        window.scrollTo(0, 0);\n        try {\n            let encodedImage = input.encoded_image;\n            if (!encodedImage) {\n                encodedImage = createBlankImage(\n                    \"#ffffff\",\n                    input.params.width!,\n                    input.params.height!,\n                )\n            }\n            const newImage: LocalImage = {\n                created_at: moment().valueOf(),\n                updated_at: moment().valueOf(),\n                created_by: \"\",\n                params: {\n                    steps: 20,\n                    width: input.params.width,\n                    height: input.params.height,\n                    prompt: input.params.prompt,\n                    negative_prompt: input.params.negative_prompt,\n                    denoising_strength: input.params.denoising_strength,\n                },\n                label: \"\",\n                id: uuid.v4(),\n                model: input.model!,\n                negative_score: 0,\n                nsfw: !!input.nsfw,\n                parent: input.parent!,\n                score: 0,\n                status: StatusEnum.Completed,\n                temporary: false,\n                imageData: `data:image/png;base64,${encodedImage}`,\n            };\n            await localImages.saveImage(newImage);\n\n            history.push(`/image-editor/${newImage.id}`);\n        } catch (e: any) {\n            console.error(e);\n            onError(\"Error creating image\");\n        } finally {\n            setCreating(false);\n        }\n    };\n\n    const onNSFW = async (updatedImage: LocalImage, nsfw: boolean) => {\n        updatedImage = {\n            ...updatedImage,\n            nsfw,\n        };\n        await localImages.saveImage(updatedImage);\n        setImages((images) => {\n            return images.map((image) => {\n                if (updatedImage.id === image.id) {\n                    return {\n                        ...image,\n                        nsfw,\n                    };\n                }\n                return image;\n            });\n        });\n        setSelectedImage(updatedImage);\n    };\n\n    const loadImages = async (search: string) => {\n        console.log(\"Initial load images\");\n        // clear error\n        setErr(null);\n        setHasMore(true);\n        try {\n            const cursor = moment().add(1, \"minutes\").valueOf();\n            const resp = await localImages.listImages(\n                cursor,\n                \"prev\",\n                100,\n                search\n            );\n            setImages(resp.sort(sortImages));\n            return;\n        } catch (err) {\n            onError(\"Could not load images\");\n            console.error(err);\n        }\n    };\n\n    useEffect(() => {\n        loadImages(search);\n    }, [search]);\n\n    useEffect(() => {\n        if (!api) {\n            return;\n        }\n        let lock = false;\n\n        const pollImages = async (images: Array<LocalImage>) => {\n            if (lock) {\n                return;\n            }\n            lock = true;\n\n            const pendingOrProcessingImages = images.filter((image) => {\n                return (\n                    image.status === \"pending\" || image.status === \"processing\"\n                );\n            });\n            if (pendingOrProcessingImages.length === 0) {\n                return;\n            }\n\n            const pendingById = pendingOrProcessingImages.reduce(\n                (acc, image) => {\n                    acc[image.id] = image;\n                    return acc;\n                },\n                {} as Record<string, LocalImage>\n            );\n\n            try {\n                const resp = await api.batchGetImages(\"id,status,nsfw,error\", {\n                    ids: pendingOrProcessingImages.map((image) => image.id),\n                });\n\n                if (resp.data.images) {\n                    const updatedImages: Array<LocalImage> =\n                        resp.data.images || [];\n                    let statusChange = false;\n                    for (let i = 0; i < updatedImages.length; i++) {\n                        let img = updatedImages[i];\n                        if (pendingById[img.id].status !== img.status) {\n                            statusChange = true;\n                        }\n                        img = {\n                            ...pendingById[img.id],\n                            ...img,\n                        };\n                        updatedImages[i] = img;\n\n                        if (img.status == StatusEnum.Error) {\n                            onError(\n                                img.error ||\n                                    \"Some images failed to generate, please make sure your prompt doesn't violate our terms of service\"\n                            );\n                            await api.deleteImage(img.id);\n                            await localImages.deleteImage(img.id);\n                            continue;\n                        }\n\n                        if (img.status === StatusEnum.Completed) {\n                            const downloadUrls = await api.getImageDownloadUrls(\n                                img.id\n                            );\n                            const resp = await anonymousClient.get(\n                                downloadUrls.data.image_url!,\n                                {\n                                    responseType: \"arraybuffer\",\n                                }\n                            );\n                            const binaryImageData = Buffer.from(\n                                resp.data,\n                                \"binary\"\n                            );\n                            const base64ImageData =\n                                binaryImageData.toString(\"base64\");\n                            const src = `data:image/png;base64,${base64ImageData}`;\n                            img.imageData = src;\n                        }\n                        await localImages.saveImage(img);\n                    }\n                    if (statusChange) {\n                        setImages((images) => {\n                            return [\n                                ...images.map((image) => {\n                                    const updatedImage = updatedImages.find(\n                                        (i) => i.id === image.id\n                                    );\n                                    if (updatedImage) {\n                                        return updatedImage;\n                                    }\n                                    return image;\n                                }),\n                            ].sort(sortImages);\n                        });\n                    }\n                }\n            } catch (err) {\n                onError(\"Could not load images\");\n                console.error(err);\n            } finally {\n                lock = false;\n            }\n        };\n\n        const timerHandle = setInterval(() => {\n            pollImages(images);\n        }, 2 * 1000);\n        return () => {\n            clearInterval(timerHandle);\n        };\n    }, [api, images, search]);\n\n    // load parent image from saved images if an id is on the query string\n    useEffect(() => {\n        const loadParent = async () => {\n            const search = qs.parse(location.search, {\n                ignoreQueryPrefix: true,\n            });\n            if (search.parent) {\n                setLoadingParent(true);\n                try {\n                    const parentImage = await api.getImage(\n                        search.parent as string\n                    );\n                    if (parentImage.data) {\n                        const downloadUrls = await api.getImageDownloadUrls(\n                            parentImage.data.id\n                        );\n                        const resp = await anonymousClient.get(\n                            downloadUrls.data.image_url!,\n                            {\n                                responseType: \"arraybuffer\",\n                            }\n                        );\n                        const binaryImageData = Buffer.from(\n                            resp.data,\n                            \"binary\"\n                        );\n                        const base64ImageData =\n                            binaryImageData.toString(\"base64\");\n                        const src = `data:image/png;base64,${base64ImageData}`;\n                        setParentImage({\n                            ...parentImage.data,\n                            imageData: src,\n                        });\n                        history.push(\"/\");\n                    }\n                } finally {\n                    setLoadingParent(false);\n                }\n            }\n        };\n        loadParent();\n    }, [location.search]);\n\n    const isPendingOrProcessing = (image: LocalImage) => {\n        return (\n            image.status === StatusEnum.Pending ||\n            image.status === StatusEnum.Processing\n        );\n    };\n\n    const sortImages = (a: LocalImage, b: LocalImage) => {\n        // pending and processing images always come first\n        if (isPendingOrProcessing(a) && !isPendingOrProcessing(b)) {\n            return -1;\n        } else if (!isPendingOrProcessing(a) && isPendingOrProcessing(b)) {\n            return 1;\n        }\n        // if the parent is the same, sort by score descending\n        // otherwise, sort by updated_at\n        if (\n            a.parent === b.parent &&\n            a.params.prompt == b.params.prompt &&\n            a.status !== StatusEnum.Pending &&\n            b.status !== StatusEnum.Pending\n        ) {\n            // if the score is the same, sort by updated_at\n            let aScore = a.score;\n            let bScore = b.score;\n            // working around a bug where negative score was assigned\n            // for an empty negative prompt.\n            if (a.params.prompt!.trim() !== \"\") {\n                aScore = aScore - a.negative_score;\n            }\n            if (b.params.prompt!.trim() !== \"\") {\n                bScore = bScore - b.negative_score;\n            }\n            if (aScore == bScore) {\n                return b.updated_at - a.updated_at;\n            }\n            return bScore - aScore;\n        }\n\n        return b.updated_at - a.updated_at;\n    };\n\n    const onLoadMore = async () => {\n        // get the minimum updated_at from images\n        let minUpdatedAt = moment().valueOf();\n        images.forEach((image) => {\n            minUpdatedAt = Math.min(minUpdatedAt, image.updated_at);\n        });\n        // load images in descending order from updated_at\n        let resp = await localImages.listImages(\n            minUpdatedAt - 1,\n            \"prev\",\n            100,\n            search\n        );\n        if (resp.length > 0) {\n            // combine images with new images and sort by updated_at descending\n            setImages((images) => {\n                // filtering is required due to a race condition\n                const imagesById = images.reduce((acc, image) => {\n                    acc[image.id] = image;\n                    return acc;\n                }, {} as { [key: string]: LocalImage });\n                resp = resp.filter((image) => !imagesById[image.id]);\n                return [...images, ...resp]\n                    .filter((image) => !image.deleted_at)\n                    .sort(sortImages);\n            });\n        } else {\n            setHasMore(false);\n        }\n    };\n\n    const onDelete = async (image: LocalImage) => {\n        try {\n            // await api.deleteImage(image.id);\n            let nextImage = null;\n            if (selectedImage) {\n                const index = images.findIndex(\n                    (i) => i.id === selectedImage.id\n                );\n                if (index > 0) {\n                    nextImage = images[index - 1];\n                } else if (index === 0 && images.length > 1) {\n                    nextImage = images[1];\n                }\n\n            }\n            await localImages.deleteImage(image.id);\n            setImages((images) => {\n                return images.filter((i) => i.id !== image.id);\n            });\n            if (nextImage) {\n                history.push(`/images/${nextImage.id}`);\n            } else {\n                history.push(\"/\");\n            }\n        } catch (e) {\n            console.error(e);\n            onError(\"Error deleting image\");\n        }\n    };\n\n    const onFork = async (image: LocalImage) => {\n        setParentImage(image);\n        // setSelectedImage(null);\n        history.push(\"/\");\n        window.scrollTo(0, 0);\n    };\n\n    const onSave = async (image: LocalImage) => {\n        setSavingImage(true);\n        try {\n            history.push(\"/\");\n            const createInput: CreateImageInput = {\n                count: 1,\n                params: image.params,\n                status: StatusEnum.Saved,\n                temporary: false,\n                label: \"\",\n                model: image.model,\n                nsfw: image.nsfw,\n            };\n\n            const encodedImage = image.imageData!.split(\",\")[1];\n\n            // convert base64 to binary\n            const binaryImageData = Buffer.from(encodedImage, \"base64\");\n            const encodedThumbnail = await createEncodedThumbnail(encodedImage);\n            const binaryThumbnailData = Buffer.from(encodedThumbnail, \"base64\");\n\n            const createResp = await api.createImage(createInput);\n            const imageId = createResp.data.images![0].id;\n            const uploadUrls = await api.getImageUploadUrls(imageId);\n            await anonymousClient.put(\n                uploadUrls.data.thumbnail_url!,\n                binaryThumbnailData,\n                {\n                    headers: {\n                        \"Content-Type\": \"image/png\",\n                    },\n                    onUploadProgress: (progressEvent: any) => {\n                        const percentCompleted =\n                            progressEvent.loaded / progressEvent.total;\n                        setUploadingProgress(percentCompleted / 2);\n                    },\n                }\n            );\n            await anonymousClient.put(\n                uploadUrls.data.image_url!,\n                binaryImageData,\n                {\n                    headers: {\n                        \"Content-Type\": \"image/png\",\n                    },\n                    onUploadProgress: (progressEvent: any) => {\n                        const percentCompleted =\n                            progressEvent.loaded / progressEvent.total;\n                        setUploadingProgress(percentCompleted / 2 + 0.5);\n                    },\n                }\n            );\n\n            await localImages.hardDeleteImage(image.id);\n            setImages((images) => {\n                return images.filter((i) => i.id !== image.id);\n            });\n            setSuccess(\"Image saved\");\n            setSuccessTime(moment().valueOf());\n        } catch (e) {\n            console.error(e);\n            onError(\"Error saving image\");\n        } finally {\n            setSavingImage(false);\n        }\n    };\n\n    const onEdit = async (image: LocalImage) => {\n        history.push(`/image-editor/${image.id}`);\n    };\n\n    const onThumbnailClicked = (image: LocalImage) => {\n        // setSelectedImage(image);\n        if (bulkDeleteSelecting) {\n            setBulkDeleteIds({\n                ...bulkDeleteIds,\n                [image.id]: !bulkDeleteIds[image.id],\n            });\n        } else {\n            history.push(`/images/${image.id}`);\n        }\n    };\n\n    const handleCancelFork = () => {\n        setParentImage(null);\n        window.scrollTo(0, 0);\n    };\n\n    const onConfirmBulkDelete = async () => {\n        try {\n            setBulkDeleting(true);\n            const promises = Object.keys(bulkDeleteIds).map((id) => {\n                return localImages.deleteImage(id);\n            });\n            await Promise.all(promises);\n            setImages((images) => {\n                return images.filter((image) => !bulkDeleteIds[image.id]);\n            });\n            setBulkDeleteIds({});\n            setBulkDeleteSelecting(false);\n        } catch (e) {\n            console.error(e);\n            onError(\"Error deleting images\");\n        } finally {\n            setBulkDeleting(false);\n        }\n    };\n\n    const completedOrSavedImages = images.filter((image) => {\n        return (\n            !image.deleted_at &&\n            (image.status === StatusEnum.Completed ||\n                image.status === StatusEnum.Saved)\n        );\n    });\n\n    const pendingOrProcessingImages = images.filter(\n        (image) =>\n            !image.deleted_at &&\n            (image.status === StatusEnum.Pending ||\n                image.status === StatusEnum.Processing)\n    );\n\n    const pendingImages = pendingOrProcessingImages.filter(\n        (image) => image.status === StatusEnum.Pending\n    );\n\n    const processingImages = pendingOrProcessingImages.filter(\n        (image) => image.status === StatusEnum.Processing\n    );\n\n    const onSwipe = (image: LocalImage, direction: number) => {\n        // select the previous or next image from the currently selected one\n        const index = images.findIndex((i) => i.id === image.id);\n        if (index === -1) {\n            return;\n        }\n        const newIndex = index + direction;\n        if (newIndex < 0 || newIndex >= images.length) {\n            return;\n        }\n        const newImage = images[newIndex];\n        onThumbnailClicked(newImage);\n    }\n\n    return (\n        <>\n            <h1 style={{ fontSize: \"40px\", textAlign: \"left\" }}>\n                Welcome to AiBrush - Home\n            </h1>\n\n            <ErrorNotification message={err} timestamp={errTime} />\n            <SuccessNotification message={success} timestamp={successTime} />\n\n            <ImagePrompt\n                api={api}\n                assetsUrl={assetsUrl}\n                creating={creating}\n                onSubmit={onSubmit}\n                onEdit={onEditNewImage}\n                parent={parentImage}\n                onCancel={() => handleCancelFork()}\n            />\n            <hr />\n\n            <div\n                className=\"homepage-images\"\n                style={{ marginTop: \"48px\", paddingBottom: \"48px\" }}\n            >\n                <div style={{ textAlign: \"left\" }}>\n                    <div\n                        className=\"input-group\"\n                        style={{ marginBottom: \"16px\" }}\n                    >\n                        <input\n                            style={{}}\n                            value={searchDebounce}\n                            type=\"search\"\n                            className=\"form-control image-search\"\n                            placeholder=\"Search...\"\n                            onChange={(e) => setSearchDebounce(e.target.value)}\n                        />\n\n                        <div\n                            style={{\n                                float: \"right\",\n                            }}\n                        >\n                            {!bulkDeleteSelecting && (\n                                <>\n                                    <button\n                                        style={{ display: \"inline\" }}\n                                        className=\"btn btn-primary image-popup-button\"\n                                        onClick={() =>\n                                            setCensorNSFW(!censorNSFW)\n                                        }\n                                    >\n                                        {!censorNSFW && (\n                                            <i className=\"fas fa-eye\"></i>\n                                        )}\n                                        {censorNSFW && (\n                                            <i className=\"fas fa-eye-slash\"></i>\n                                        )}\n                                    </button>\n                                    <Dropdown\n                                        style={{\n                                            display: \"inline\",\n                                            marginLeft: \"8px\",\n                                        }}\n                                    >\n                                        <Dropdown.Toggle variant=\"danger\">\n                                            <i className=\"fas fa-trash\"></i>\n                                        </Dropdown.Toggle>\n\n                                        <Dropdown.Menu>\n                                            <Dropdown.Item\n                                                onClick={() =>\n                                                    setBulkDeleteSelecting(true)\n                                                }\n                                            >\n                                                Bulk Delete\n                                            </Dropdown.Item>\n                                            <Dropdown.Item\n                                                onClick={() =>\n                                                    history.push(\n                                                        \"/local-deleted-images\"\n                                                    )\n                                                }\n                                            >\n                                                View Deleted Images\n                                            </Dropdown.Item>\n                                        </Dropdown.Menu>\n                                    </Dropdown>\n                                </>\n                            )}\n                            {bulkDeleteSelecting && (\n                                <>\n                                    <button\n                                        className=\"btn btn-primary image-popup-button\"\n                                        onClick={() => {\n                                            setBulkDeleteSelecting(false);\n                                            setBulkDeleteIds({});\n                                        }}\n                                    >\n                                        Cancel\n                                    </button>\n                                    <button\n                                        style={{ marginLeft: \"8px\" }}\n                                        className=\"btn image-popup-delete-button\"\n                                        onClick={() => {\n                                            onConfirmBulkDelete();\n                                        }}\n                                    >\n                                        Delete\n                                    </button>\n                                </>\n                            )}\n                        </div>\n                    </div>\n                </div>\n                <InfiniteScroll\n                    dataLength={images.length}\n                    next={onLoadMore}\n                    hasMore={hasMore}\n                    loader={\n                        <>\n                            <hr />\n                            <h4>Loading...</h4>\n                        </>\n                    }\n                >\n                    {pendingOrProcessingImages.length > 0 && (\n                        <PendingImagesThumbnail\n                            pendingCount={pendingImages.length}\n                            processingCount={processingImages.length}\n                            onClick={() => {\n                                setShowPendingImages(true);\n                            }}\n                        />\n                    )}\n                    {completedOrSavedImages.map((image) => (\n                        <ImageThumbnail\n                            key={image.id}\n                            image={image}\n                            assetsUrl={assetsUrl}\n                            onClick={onThumbnailClicked}\n                            bulkDelete={\n                                bulkDeleteSelecting && bulkDeleteIds[image.id]\n                            }\n                            censorNSFW={censorNSFW}\n                        />\n                    ))}\n                </InfiniteScroll>\n            </div>\n\n            {selectedImage && (\n                <ImagePopup\n                    assetsUrl={assetsUrl}\n                    image={selectedImage}\n                    onClose={() => history.push(\"/\")}\n                    onDelete={(image) => {\n                        onDelete(image);\n                        setImages(images.filter((i) => i.id !== image.id));\n                        history.push(\"/\");\n                    }}\n                    onFork={(image) => {\n                        onFork(image);\n                        history.push(\"/\");\n                    }}\n                    onEdit={(image) => {\n                        onEdit(image);\n                    }}\n                    onSave={(image) => {\n                        onSave(image);\n                    }}\n                    onNSFW={onNSFW}\n                    censorNSFW={censorNSFW}\n                    onSwipe={onSwipe}\n                />\n            )}\n            <ScrollToTop />\n            <BusyModal show={creating} title=\"Creating images\">\n                <p>Please wait while we create your image.</p>\n                <ProgressBar progress={uploadProgress} />\n            </BusyModal>\n            <BusyModal show={bulkDeleting} title=\"Deleting images\">\n                <p>Please wait while we delete your images.</p>\n            </BusyModal>\n            <BusyModal show={loadingParent} title=\"Loading parent image\">\n                <p>Please wait while we load the parent image.</p>\n            </BusyModal>\n            <BusyModal show={savingImage} title=\"Saving image\">\n                {/* bootstrap progress bar for uploadProgress (0-1 value) */}\n                <ProgressBar progress={uploadProgress} />\n            </BusyModal>\n            <PendingImages\n                images={pendingOrProcessingImages}\n                onCancel={() => setShowPendingImages(false)}\n                show={showPendingImages}\n                onDeleteImage={(image) => {\n                    onDelete(image);\n                    setImages(images.filter((i) => i.id !== image.id));\n                }}\n            />\n            <OutOfCreditsModal\n                show={outOfCredits}\n                onHide={() => setOutOfCredits(false)}\n            />\n            <PaymentStatusModal paymentStatus={paymentStatus} />\n        </>\n    );\n};\n","import React, { FC, useEffect, useRef, useState } from \"react\";\n\nimport { aspectRatios, DEFAULT_ASPECT_RATIO, getClosestAspectRatio } from \"../lib/aspecRatios\";\n\ninterface Props {\n    aspectRatio: number;\n    onChange: (aspectRatio: number) => void;\n    disabled?: boolean;\n}\n\nexport const AspectRatioSelector: FC<Props> = ({ aspectRatio, onChange, disabled }) => {\n    const aspectRatioDetails = aspectRatios[aspectRatio];\n    return (\n        <div className=\"form-group\">\n            <div\n                style={{\n                    minHeight: \"140px\",\n                    display: \"flex\",\n                    alignItems: \"center\",\n                }}\n            >\n                {/* aspect ratio slider, goes from 0 -> aspectRatios.length - 1 */}\n                <div\n                    style={{\n                        width: aspectRatioDetails.width / 8,\n                        height: aspectRatioDetails.height / 8,\n                        // dotted line options: dotted, dashed, solid, double, groove, ridge, inset, outset, none, hidden\n                        border: \"1px dashed white\",\n                        margin: \"auto\",\n                    }}\n                ></div>\n            </div>\n            <label style={{width: \"100%\"}}>\n                Aspect Ratio\n                <small className=\"form-text text-muted\" style={{float: \"right\"}}>\n                    {aspectRatioDetails.displayName}\n                </small>\n            </label>\n            <input\n                type=\"range\"\n                disabled={disabled}\n                className=\"form-control-range\"\n                min={0}\n                max={aspectRatios.length - 1}\n                value={aspectRatio}\n                onChange={(e) => {\n                    onChange(parseInt(e.target.value));\n                }}\n            />\n        </div>\n    );\n};\n","export interface DBConfig {\n    dbName: string;\n    storeName: string;\n};\n\nexport class KVStore<T> {\n    private dbConfig: DBConfig;\n    private db: IDBDatabase | null = null;\n\n    constructor(dbConfig: DBConfig) {\n        this.dbConfig = dbConfig;\n    }\n\n    private async createDB(): Promise<IDBDatabase> {\n        return new Promise((resolve, reject) => {\n            const request = indexedDB.open(this.dbConfig.dbName);\n\n            request.onupgradeneeded = () => {\n                const db = request.result;\n                db.createObjectStore(this.dbConfig.storeName);\n            };\n\n            request.onsuccess = () => {\n                resolve(request.result);\n            };\n\n            request.onerror = () => {\n                reject(request.error);\n            };\n        });\n    }\n\n    private async getDB(): Promise<IDBDatabase> {\n        if (!this.db) {\n            this.db = await this.createDB();\n        }\n        return this.db;\n    }\n\n\n    async getItem(key: string): Promise<T | null> {\n        const db = await this.getDB();\n\n        return new Promise((resolve, reject) => {\n            const transaction = db.transaction(this.dbConfig.storeName);\n            const store = transaction.objectStore(this.dbConfig.storeName);\n            const request = store.get(key);\n\n            request.onsuccess = () => {\n                resolve(request.result);\n            };\n\n            request.onerror = () => {\n                resolve(null);\n            };\n        });\n    }\n\n    async setItem(key: string, value: T): Promise<void> {\n        const db = await this.getDB();\n\n        return new Promise((resolve, reject) => {\n            const transaction = db.transaction(\n                this.dbConfig.storeName,\n                \"readwrite\"\n            );\n            const store = transaction.objectStore(this.dbConfig.storeName);\n            const request = store.put(value, key);\n\n            request.onsuccess = () => {\n                resolve();\n            };\n\n            request.onerror = () => {\n                resolve();\n            };\n        });\n    }\n\n    async deleteItem(key: string): Promise<void> {\n        const db = await this.getDB();\n\n        return new Promise((resolve, reject) => {\n            const transaction = db.transaction(\n                this.dbConfig.storeName,\n                \"readwrite\"\n            );\n            const store = transaction.objectStore(this.dbConfig.storeName);\n            const request = store.delete(key);\n\n            request.onsuccess = () => {\n                resolve();\n            };\n\n            request.onerror = () => {\n                resolve();\n            };\n        });\n    }\n}\n","import { FC } from \"react\";\nimport { LoraConfig } from \"../client\";\nimport { SelectedLora } from \"./LoraSelector\";\n\ninterface Props {\n    onRemove: (lora: SelectedLora) => void;\n    lora: SelectedLora;\n}\n\n// style the button like this:\n// <button\n//     type=\"button\"\n//     className=\"btn btn-secondary light-button\"\n//     style={{ marginLeft: \"8px\" }}\n//     onClick={() => setSelectingLora(true)}\n// >\n//     <i className=\"fas fa-plus\"></i>&nbsp;Add Lora\n// </button>\n\n// the button should have an \"X\" icon, and when you click the icon the onRemove function should be called\n// show the name of the lora and the strength\nexport const SelectedLoraTag: FC<Props> = ({ onRemove, lora }) => {\n    return <button\n        type=\"button\"\n        className=\"btn btn-secondary light-button\"\n        style={{ marginLeft: \"8px\", cursor: \"default\" }}\n    >\n        {lora.lora.name}\n        &nbsp;\n        <i className=\"fas fa-times\" style={{cursor: \"pointer\"}} onClick={() => onRemove(lora)}></i>\n    </button>;\n};","import { FC } from \"react\";\nimport { SelectedLora } from \"./LoraSelector\";\n\ninterface Props {\n    prompt: string;\n    selectedLoras: SelectedLora[];\n    onAddTrigger: (trigger: string) => void;\n}\n\nexport const LoraTriggers: FC<Props> = ({\n    prompt,\n    selectedLoras,\n    onAddTrigger,\n}) => {\n    const allTriggers = [];\n    for (const lora of selectedLoras) {\n        for (let trigger of lora.lora.modelVersions[0].trainedWords) {\n            if (\n                prompt.toLowerCase().indexOf(trigger.toLowerCase()) === -1 &&\n                allTriggers.indexOf(trigger) === -1\n            ) {\n                allTriggers.push(trigger);\n            }\n        }\n    }\n\n    return (\n        <div style={{textAlign: \"left\", padding: \"8px\"}}>\n            <h5>Available Triggers</h5>\n            {allTriggers.map((trigger, index) => (\n                <span\n                    key={index}\n                    className=\"badge bg-secondary me-2\"\n                    style={{ cursor: \"pointer\", marginRight: \"8px\" }}\n                    onClick={() => onAddTrigger(trigger)}\n                >\n                    <i className=\"fas fa-plus ms-2\"></i>&nbsp;\n                    {trigger}\n                </span>\n            ))}\n        </div>\n    );\n};\n","import React, { FC, useState, useEffect } from \"react\";\nimport { ChromePicker } from \"react-color\";\n\ninterface Props {\n    selectedColor: string;\n    color: string;\n    onClick: (color: string) => void;\n    onColorSelected?: (color: string) => void;\n}\n\nexport const PaletteButton: FC<Props> = ({\n    selectedColor,\n    color,\n    onClick,\n    onColorSelected,\n}) => {\n    const [displayColorPicker, setDisplayColorPicker] = useState(false);\n    const [tmpColor, setTmpColor] = useState(color);\n\n    useEffect(() => {\n        setTmpColor(color);\n    }, [color]);\n\n    const popover: React.CSSProperties = {\n        position: \"absolute\",\n        zIndex: 2,\n    };\n\n    let className = \"palette-button\";\n    if (selectedColor === color) {\n        className += \" selected\";\n    } else if (color == \"#000000\") {\n        className += \" black\";\n    }\n    return (\n        <>\n            <div\n                className={className}\n                style={{ backgroundColor: color }}\n                onClick={() => onClick(color)}\n                onDoubleClick={() => setDisplayColorPicker(!displayColorPicker)}\n            ></div>\n            {onColorSelected && displayColorPicker ? (\n                <div style={popover}>\n                    {/* <div style={cover} onClick={handleClose} /> */}\n                    <ChromePicker\n                        color={tmpColor}\n                        onChange={(color) => setTmpColor(color.hex)}\n                        onChangeComplete={(color) => setTmpColor(color.hex)}\n                    />\n                    <button\n                        className=\"btn btn-primary\"\n                        style={{ marginRight: \"8px\", marginLeft: \"16px\" }}\n                        onClick={() => {\n                            onColorSelected(tmpColor);\n                            setDisplayColorPicker(false);\n                        }}\n                    >\n                        <i className=\"fas fa-check\" />\n                    </button>\n                    <button\n                        className=\"btn btn-primary\"\n                        onClick={() => setDisplayColorPicker(false)}\n                    >\n                        <i className=\"fas fa-times\" />\n                    </button>\n                </div>\n            ) : null}\n        </>\n    );\n};\n","import React, { FC, useEffect, useState } from \"react\";\n\ninterface Props {\n    pendingCount: number;\n    processingCount: number;\n    onClick?: () => void;\n}\n\nexport const PendingImagesThumbnail: FC<Props> = ({\n    pendingCount,\n    processingCount,\n    onClick,\n}) => {\n    const [hover, setHover] = useState(false);\n\n    // on mouse in/out, set hover state\n    const onMouseEnter = () => setHover(true);\n    const onMouseLeave = () => setHover(false);\n    let icon = (\n        <i style={{ marginTop: \"20px\" }} className=\"fa fa-hourglass-half\"></i>\n    );\n\n    if (processingCount > 0) {\n        icon = (\n            <i style={{ marginTop: \"20px\" }} className=\"fa fa-cog fa-spin\"></i>\n        );\n    }\n\n    return (\n        <div\n            onMouseEnter={onMouseEnter}\n            onMouseLeave={onMouseLeave}\n            style={{\n                backgroundImage: `url(/images/default.png)`,\n                backgroundSize: \"contain\",\n                width: \"128px\",\n                height: \"128px\",\n                margin: \"8px\",\n                float: \"left\",\n                cursor: \"pointer\",\n            }}\n            onClick={onClick}\n        >\n            {hover && (\n                <div\n                    style={{\n                        background: \"rgba(255, 255, 255, 0.5)\",\n                        color: \"black\",\n                        width: \"100%\",\n                        height: \"100%\",\n                        lineHeight: \"1\",\n                        fontSize: \"20px\",\n                    }}\n                >\n                    <br/>\n                    {pendingCount > 0 && (\n                        <div style={{ marginBottom: \"24px\" }}>\n                            {pendingCount} pending\n                        </div>\n                    )}\n                    {processingCount > 0 && (\n                        <div>{processingCount} processing</div>\n                    )}\n                </div>\n            )}\n            {!hover && (\n                <div\n                    style={{\n                        background: \"rgba(255, 255, 255, 0.3)\",\n                        color: \"#555\",\n                        width: \"100%\",\n                        height: \"100%\",\n                        fontSize: \"80px\",\n                    }}\n                >\n                    {icon}\n                </div>\n            )}\n        </div>\n    );\n};\n","import React, {FC, useEffect, useState} from \"react\";\nimport { Modal } from \"react-bootstrap\";\nimport { Image } from \"../client/api\";\n\ninterface Props {\n    images: Image[];\n    onDeleteImage: (image: Image) => void;\n    onCancel: () => void;\n    show: boolean;\n}\n\nexport const PendingImages: FC<Props> = ({\n    images,\n    onDeleteImage,\n    onCancel,\n    show,\n}) => {\n\n    function imageIcon(image: Image) {\n        if (image.status === \"pending\") {\n            return <i className=\"fa fa-hourglass-half\"></i>;\n        } else if (image.status === \"processing\") {\n            return <i className=\"fa fa-cog fa-spin\"></i>;\n        }\n    }\n\n    const truncate = (phrases: string) => {\n        if (phrases.length > 35) {\n            return phrases.substring(0, 35) + \"...\";\n        }\n        return phrases;\n    }\n\n    // refactor from table to div layout\n    const pendingDiv = (\n        <div>\n            <div style={{marginBottom: \"8px\"}}>\n                <div style={{display: \"inline-block\", width: \"100px\"}}>\n                    Status\n                </div>\n                <div style={{display: \"inline-block\", width: \"250px\"}}>\n                    Phrases\n                </div>\n                <div style={{display: \"inline-block\", width: \"100px\"}}>\n                    Action\n                </div>\n            </div>\n            {images.map((image) => (\n                <div key={image.id} style={{marginBottom: \"8px\"}}>\n                    <div style={{display: \"inline-block\", width: \"100px\"}}>\n                        {imageIcon(image)}&nbsp;{image.status}\n                    </div>\n                    <div style={{display: \"inline-block\", width: \"250px\"}}>\n                        {/* if more than 30 chars, truncate with ellipsis*/}\n                        {truncate(image.params.prompt || \"\")}\n                    </div>\n                    <div style={{display: \"inline-block\", width: \"100px\"}}>\n                        <button\n                            className=\"btn btn-danger btn-sm image-popup-delete-button\"\n                            onClick={() => onDeleteImage(image)}\n                        >\n                            <i className=\"fa fa-trash\"></i>&nbsp;Delete\n                        </button>\n                    </div>\n                </div>\n            ))}\n        </div>\n    );\n\n    return (\n        <Modal show={show} onHide={onCancel}>\n            <Modal.Header closeButton>\n                <Modal.Title>Pending Images</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                {pendingDiv}\n            </Modal.Body>\n            <Modal.Footer>\n                <button className=\"btn btn-secondary\" onClick={onCancel}>\n                    Close\n                </button>\n            </Modal.Footer>\n        </Modal>\n    );\n};","import React, { useState } from 'react';\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\n\ninterface CopyToClipboardIconProps {\n  text: string;\n}\n\nconst CopyToClipboardIcon: React.FC<CopyToClipboardIconProps> = ({ text }) => {\n  const [copied, setCopied] = useState(false);\n\n  const handleCopy = () => {\n    setCopied(true);\n    setTimeout(() => setCopied(false), 5000); // Reset icon after 5 seconds\n  };\n\n  return (\n    <CopyToClipboard text={text} onCopy={handleCopy}>\n      <span style={{cursor: \"pointer\", marginLeft: \"8px\"}}>\n        {/* <FontAwesomeIcon icon={copied ? faCheck : faCopy} style={{ color: copied ? 'green' : undefined }} /> */}\n        <i className={`fas fa-${copied ? 'check' : 'copy'}`} style={{ color: copied ? 'green' : undefined }} />\n      </span>\n    </CopyToClipboard>\n  );\n};\n\nexport default CopyToClipboardIcon;\n","import { useState, FC, TouchEvent } from \"react\";\n\ninterface Props {\n    onSwipe: (direction: number) => void;\n}\n\nexport const Swipe: FC<Props> = ({ onSwipe, children }) => {\n    const [touchStart, setTouchStart] = useState<number | null>(null)\n    const [touchEnd, setTouchEnd] = useState<number | null>(null);\n\n    // the required distance between touchStart and touchEnd to be detected as a swipe\n    const minSwipeDistance = 50;\n\n    const onTouchStart = (e: TouchEvent<HTMLDivElement>) => {\n        setTouchEnd(null); // otherwise the swipe is fired even with usual touch events\n        setTouchStart(e.targetTouches[0].clientX);\n    };\n\n    const onTouchMove = (e: TouchEvent<HTMLDivElement>) => setTouchEnd(e.targetTouches[0].clientX);\n\n    const onTouchEnd = () => {\n        if (!touchStart || !touchEnd) return;\n        const distance = touchStart - touchEnd;\n        const isLeftSwipe = distance > minSwipeDistance;\n        const isRightSwipe = distance < -minSwipeDistance;\n        if (isLeftSwipe || isRightSwipe) {\n            onSwipe(isLeftSwipe ? 1 : -1);\n        }\n    };\n\n    return (\n        <div\n            onTouchStart={onTouchStart}\n            onTouchMove={onTouchMove}\n            onTouchEnd={onTouchEnd}\n        >\n            {children}\n        </div>\n    );\n};\n","import React, { FC, useEffect, useRef, useState } from \"react\";\nimport { Modal } from \"react-bootstrap\";\nimport { CreateImageInput, Image, StatusEnum } from \"../client/api\";\nimport { LocalImage } from \"../lib/localImagesStore\";\nimport CopyToClipboard from \"react-copy-to-clipboard\";\nimport CopyToClipboardIcon from \"./CopyToClipboardIcon\";\nimport { Swipe } from \"./Swipe\";\n\ninterface ImagePopupProps {\n    assetsUrl: string;\n    image: LocalImage;\n    censorNSFW: boolean;\n    onClose: () => void;\n    onDelete?: (image: LocalImage) => void;\n    onFork?: (image: LocalImage) => void;\n    onEdit?: (image: LocalImage) => void;\n    onNSFW?: (image: LocalImage, nsfw: boolean) => void;\n    onSave?: (image: LocalImage) => void;\n    onSwipe?: (image: LocalImage, direction: number) => void;\n}\n\nexport const ImagePopup: FC<ImagePopupProps> = ({\n    assetsUrl,\n    image,\n    censorNSFW,\n    onClose,\n    onDelete,\n    onFork,\n    onEdit,\n    onNSFW,\n    onSave,\n    onSwipe,\n}) => {\n    const img = useRef<HTMLImageElement>(null);\n    let src = `${assetsUrl}/${image.id}.image.png?updated_at=${image.updated_at}`;\n    if (image.imageData) {\n        src = image.imageData;\n    }\n    let score = image.score;\n    if (image.params.negative_prompt && image.negative_score != 0) {\n        score -= image.negative_score;\n    }\n    const [showNSFW, setShowNSFW] = useState(false);\n\n    const statusBadge = (status: string) => {\n        const displayStatus = status.charAt(0).toUpperCase() + status.slice(1);\n        let icon = \"fa fa-question-circle\";\n        switch (status) {\n            case StatusEnum.Pending:\n                icon = \"fas fa-hourglass-half\";\n                break;\n            case StatusEnum.Processing:\n                icon = \"fas fa-cog fa-spin\";\n                break;\n            case StatusEnum.Completed:\n                icon = \"fas fa-check\";\n                break;\n            case StatusEnum.Saved:\n                icon = \"fas fa-save\";\n                break;\n            case StatusEnum.Error:\n                icon = \"fas fa-exclamation-circle\";\n                break;\n        }\n        return (\n            <>\n                <span style={{ fontSize: \"24px\" }}>\n                    <i\n                        className={`${icon} status-badge status-badge-${status}`}\n                        style={{\n                            fontSize: \"10px\",\n                            position: \"relative\",\n                            top: \"-1px\",\n                        }}\n                    ></i>\n                    &nbsp;{displayStatus}\n                </span>\n            </>\n        );\n    };\n\n    useEffect(() => {\n        if (!img.current) {\n            return;\n        }\n        img.current.onerror = () => {\n            if (!img.current) {\n                return;\n            }\n            img.current.src = \"/images/default.png\";\n        };\n    }, [img]);\n\n    let title = image.label;\n    if (!title) {\n        title = image.params.prompt!;\n    }\n    if (title.indexOf(\",\") > 0) {\n        title = title.substring(0, title.indexOf(\",\"));\n    }\n\n    let swipeArrowMargin = \"10px\";\n    if (window.innerWidth < 992) {\n        swipeArrowMargin = \"-30px\";\n    }\n    const maxImageHeight = window.innerHeight * 0.6 + \"px\";\n\n    // if open, show modal with image\n    return (\n        <Modal show={true} onHide={onClose} size=\"xl\">\n            <Modal.Header closeButton>\n                <Modal.Title>{title}</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <div style={{ position: \"relative\" }}>\n                    {/* Left button */}\n                    {onSwipe && (\n                        <button\n                            className=\"btn btn-secondary btn-sm image-popup-left-button\"\n                            style={{\n                                position: \"absolute\",\n                                left: swipeArrowMargin,\n                                top: \"50%\",\n                                transform: \"translateY(-50%)\",\n                                zIndex: 1,\n                                padding: \"5px 10px\",\n                            }}\n                            onClick={() => onSwipe(image, -1)}\n                        >\n                            <i className=\"fas fa-chevron-left\"></i>\n                        </button>\n                    )}\n                    <Swipe\n                        onSwipe={(direction) =>\n                            onSwipe && onSwipe(image, direction)\n                        }\n                    >\n                        <img\n                            ref={img}\n                            style={{\n                                maxWidth: \"100%\",\n                                maxHeight: maxImageHeight,\n                                display: \"block\",\n                                marginLeft: \"auto\",\n                                marginRight: \"auto\",\n                                filter:\n                                    image.nsfw && censorNSFW && !showNSFW\n                                        ? \"blur(30px)\"\n                                        : \"\",\n                            }}\n                            id={`image-popup-${image.id}`}\n                            src={src}\n                            alt={image.label}\n                        />\n                    </Swipe>\n                    {/* Right button */}\n                    <button\n                        className=\"btn btn-secondary btn-sm .image-popup-right-button\"\n                        style={{\n                            position: \"absolute\",\n                            right: swipeArrowMargin,\n                            top: \"50%\",\n                            transform: \"translateY(-50%)\",\n                            zIndex: 1,\n                            padding: \"5px 10px\",\n                        }}\n                        onClick={() => onSwipe && onSwipe(image, 1)}\n                    >\n                        <i className=\"fas fa-chevron-right\"></i>\n                    </button>\n                </div>\n                {/* List these fields: status, iterations, phrases */}\n                <div className=\"row\">\n                    <div className=\"col-lg-12\"></div>\n                </div>\n                {/* controls */}\n                <div className=\"row\">\n                    <div className=\"col-lg-12\">\n                        <div\n                            className=\"image-popup-controls\"\n                            style={{ marginTop: \"40px\" }}\n                        >\n                            {statusBadge(image.status)}\n                            <div style={{ float: \"right\" }}>\n                                {onFork &&\n                                    (image.status === StatusEnum.Saved ||\n                                        image.status ===\n                                            StatusEnum.Completed) && (\n                                        <button\n                                            className=\"btn btn-secondary btn-sm image-popup-button\"\n                                            onClick={() => onFork(image)}\n                                            style={{ marginRight: \"5px\" }}\n                                        >\n                                            <i className=\"fas fa-code-branch\"></i>\n                                            &nbsp;VARIATIONS\n                                        </button>\n                                    )}\n                                {onDelete && (\n                                    <button\n                                        className=\"btn btn-danger btn-sm image-popup-delete-button\"\n                                        onClick={() =>\n                                            onDelete && onDelete(image)\n                                        }\n                                        style={{ marginRight: \"5px\" }}\n                                    >\n                                        <i className=\"fas fa-trash-alt\"></i>\n                                        &nbsp;DELETE\n                                    </button>\n                                )}\n                                {onEdit && (\n                                    <button\n                                        className=\"btn btn-primary btn-sm image-popup-button edit-button\"\n                                        onClick={() => onEdit && onEdit(image)}\n                                        style={{ marginRight: \"5px\" }}\n                                    >\n                                        <i className=\"fas fa-edit\"></i>\n                                        &nbsp;EDIT\n                                    </button>\n                                )}\n                                {onSave && (\n                                    <button\n                                        className=\"btn btn-primary btn-sm image-popup-button\"\n                                        onClick={() => onSave && onSave(image)}\n                                        style={{ marginRight: \"5px\" }}\n                                    >\n                                        <i className=\"fas fa-save\"></i>\n                                        &nbsp;SAVE\n                                    </button>\n                                )}\n                                {image.nsfw && censorNSFW && (\n                                    <button\n                                        className=\"btn btn-primary btn-sm image-popup-button\"\n                                        onClick={() => setShowNSFW(!showNSFW)}\n                                        style={{ marginRight: \"5px\" }}\n                                    >\n                                        <i className=\"fas fa-eye\"></i>\n                                        &nbsp;{showNSFW ? \"HIDE\" : \"SHOW\"}\n                                    </button>\n                                )}\n                            </div>\n                        </div>\n                        <div\n                            className=\"image-popup-controls\"\n                            style={{ marginTop: \"28px\", marginBottom: \"85px\" }}\n                        >\n                            {/* Horde interface doesn't support score yet */}\n                            {/* <div>\n                                Similarity to prompt: {(score * 200).toFixed(2)}\n                                %\n                            </div> */}\n                            <div>\n                                Image dimensions: {image.params.width} x{\" \"}\n                                {image.params.height}\n                            </div>\n                            <div>Model: {image.model}</div>\n                            {image.nsfw && (\n                                <>\n                                    <div>\n                                        {/* alert warning icon */}\n                                        <i\n                                            className=\"fas fa-exclamation-triangle\"\n                                            style={{\n                                                color: \"orange\",\n                                                fontSize: \"18px\",\n                                                position: \"relative\",\n                                                top: \"2px\",\n                                            }}\n                                        ></i>\n                                        &nbsp;May contain NSFW content\n                                    </div>\n                                    {onNSFW && (\n                                        <a\n                                            href=\"javascript:void(0)\"\n                                            onClick={() => onNSFW(image, false)}\n                                        >\n                                            Mark as Safe for Work\n                                        </a>\n                                    )}\n                                </>\n                            )}\n                            {image.params.seed && (\n                                <div>Seed: {image.params.seed}</div>\n                            )}\n                            {!image.nsfw && (\n                                <>\n                                    <div>\n                                        {/* green check icon */}\n                                        <i\n                                            className=\"fas fa-check\"\n                                            style={{\n                                                color: \"green\",\n                                                fontSize: \"18px\",\n                                                position: \"relative\",\n                                                top: \"2px\",\n                                            }}\n                                        ></i>\n                                        &nbsp;Safe for Work\n                                    </div>\n                                    {onNSFW && (\n                                        <a\n                                            href=\"javascript:void(0)\"\n                                            onClick={() => onNSFW(image, true)}\n                                        >\n                                            Mark as Not Safe for Work\n                                        </a>\n                                    )}\n                                </>\n                            )}\n                            <div style={{ marginTop: \"8px\" }}>\n                                Prompt: {image.params.prompt}\n                                <CopyToClipboardIcon\n                                    text={image.params.prompt!}\n                                />\n                            </div>\n                            <div style={{ marginTop: \"8px\" }}>\n                                Negative Prompt: {image.params.negative_prompt}\n                                <CopyToClipboardIcon\n                                    text={image.params.negative_prompt!}\n                                />\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </Modal.Body>\n        </Modal>\n    );\n};\n","import { Item } from \"./civit_loras\";\nimport { KVStore } from \"./kvstore\";\nimport { recentLoras as recentList } from \"./recentList\";\n\nexport class RecentLoras {\n    private kvstore: KVStore<Item>;\n\n    constructor() {\n        this.kvstore = new KVStore<Item>({\n            dbName: \"saved-loras\",\n            storeName: \"loras\",\n        });\n    }\n\n    async listRecentLoras(): Promise<Item[]> {\n        const recentLoraIDs = recentList.getItems();\n        const result: Item[] = [];\n        for (const loraID of recentLoraIDs) {\n            const savedLora = await this.kvstore.getItem(loraID);\n            if (savedLora) {\n                result.push(savedLora);\n            }\n        }\n        return result;\n    }\n\n    async getLora(loraID: string): Promise<Item | null> {\n        return await this.kvstore.getItem(loraID);\n    }\n\n    async addLora(lora: Item): Promise<void> {\n        const loraId = lora.name;\n        await this.kvstore.setItem(loraId, lora);\n        const removed = recentList.addItem(loraId);\n        if (removed) {\n            await this.kvstore.deleteItem(removed);\n        }\n    }\n}\n\nexport const recentLoras = new RecentLoras();","import React, { FC, useEffect, useState, useCallback } from \"react\";\nimport axios from \"axios\";\nimport Modal from \"react-bootstrap/Modal\";\nimport Button from \"react-bootstrap/Button\";\nimport Form from \"react-bootstrap/Form\";\nimport Alert from \"react-bootstrap/Alert\";\nimport DOMPurify from \"dompurify\";\n\nimport { Item } from \"../lib/civit_loras\";\nimport { Col, ListGroup, Row } from \"react-bootstrap\";\nimport { LoraConfig } from \"../client\";\nimport { recentLoras } from \"../lib/recentLoras\";\n\n// https://chat.openai.com/share/34a593c7-a8e5-4490-9cc7-8a1d019b8b82\n\nexport interface SelectedLora {\n    config: LoraConfig;\n    lora: Item;\n}\n\ninterface LoraModalProps {\n    onConfirm: (lora: SelectedLora) => void;\n    onCancel: () => void;\n}\n\nexport const LoraModal: FC<LoraModalProps> = ({ onConfirm, onCancel }) => {\n    const [inputValue, setInputValue] = useState(\"\");\n    const [strength, setStrength] = useState(1);\n    const [item, setItem] = useState<Item | null>(null);\n    const [recentItems, setRecentItems] = useState<Item[]>([]);\n    const [error, setError] = useState<string | null>(null);\n    const [busy, setBusy] = useState(false);\n\n    const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setInputValue(event.target.value);\n    };\n\n    const handleSearch = useCallback(async () => {\n        const modelId = inputValue.match(/(\\d+)/)?.[0] || inputValue;\n\n        if (!modelId) {\n            setError(\"Invalid input\");\n            return;\n        }\n\n        setBusy(true);\n        try {\n            const response = await axios.get(\n                `https://civitai.com/api/v1/models/${modelId}`\n            );\n            setItem(response.data);\n            setError(null);\n        } catch (error) {\n            setError(\"Failed to fetch data\");\n        } finally {\n            setBusy(false);\n        }\n    }, [inputValue]);\n\n    const handleConfirm = () => {\n        recentLoras.addLora(item!);\n        onConfirm({\n            config: {\n                name: `${item!.id}`,\n                strength,\n            },\n            lora: item!,\n        })\n    }\n\n    useEffect(() => {\n        // Fetch recent Loras when component mounts\n        const fetchRecentLoras = async () => {\n            const items = await recentLoras.listRecentLoras();\n            setRecentItems(items);\n        };\n        fetchRecentLoras();\n    }, []);\n\n    const renderContent = () => {\n        if (error) {\n            return <Alert variant=\"danger\">{error}</Alert>;\n        }\n\n        if (item) {\n            return (\n                <div>\n                    <h5>{item.name}</h5>\n                    <div\n                        dangerouslySetInnerHTML={{\n                            __html: DOMPurify.sanitize(item.description),\n                        }}\n                    />\n\n                    <p>Allow Commercial Use: {item.allowCommercialUse}</p>\n                    <p>Creator: {item.creator.username}</p>\n\n                    <h6>Tags:</h6>\n                    <div style={{ marginBottom: \"16px\" }}>\n                        {item.tags.map((tag, index) => (\n                            // <li key={index}>{tag}</li>\n                            // comma separated instead\n                            <span key={index}>\n                                {tag}\n                                {index < item.tags.length - 1 && \", \"}\n                            </span>\n                        ))}\n                    </div>\n\n                    <h6>Model Versions:</h6>\n                    {/* TODO: support multiple model versions in the horde */}\n                    {item.modelVersions.slice(0, 1).map((version, index) => (\n                        <div key={index}>\n                            <strong>{version.name}</strong>\n                            <p>Base Model: {version.baseModel}</p>\n\n                            <strong>Trained Words:</strong>\n                            <ul>\n                                {version.trainedWords.map((word, idx) => (\n                                    <li key={idx}>{word}</li>\n                                ))}\n                            </ul>\n\n                            <strong>Images:</strong>\n                            <div className=\"row\">\n                                {version.images.map((image, idx) => (\n                                    <div\n                                        key={idx}\n                                        className=\"col-sm-4 col-md-3\"\n                                    >\n                                        <div className=\"thumbnail\">\n                                            <img\n                                                src={image.url}\n                                                alt=\"\"\n                                                style={{\n                                                    maxWidth: \"100%\",\n                                                    height: \"auto\",\n                                                    marginBottom: \"16px\",\n                                                }}\n                                            />\n                                        </div>\n                                    </div>\n                                ))}\n                            </div>\n                        </div>\n                    ))}\n                </div>\n            );\n        }\n\n        return null;\n    };\n\n    return (\n        <Modal show onHide={onCancel} size=\"xl\">\n            <Modal.Header closeButton>\n                <Modal.Title>Enter LORA URL or Model Number</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                {!item && (\n                    <>\n                        <Form\n                            onSubmit={(e) => {\n                                e.preventDefault();\n                                handleSearch();\n                            }}\n                        >\n                            <Form.Group as={Row}>\n                                <Col sm={10}>\n                                    <Form.Control\n                                        type=\"text\"\n                                        placeholder=\"Enter LORA URL or Model Number\"\n                                        value={inputValue}\n                                        onChange={handleInputChange}\n                                    />\n                                </Col>\n                                <Col sm={2}>\n                                    <Button\n                                        variant=\"primary\"\n                                        onClick={handleSearch}\n                                        disabled={busy || !inputValue}\n                                    >\n                                        {busy ? \"Loading...\" : \"Search\"}\n                                    </Button>\n                                </Col>\n                            </Form.Group>\n                        </Form>\n                        <h5 className=\"mt-3\">Recently Used Loras:</h5>\n                        <ListGroup>\n                            {recentItems.map((recentItem, index) => (\n                                <ListGroup.Item key={index} action onClick={() => setItem(recentItem)}>\n                                    {recentItem.name}\n                                </ListGroup.Item>\n                            ))}\n                        </ListGroup>\n                    </>\n                )}\n                {/* show a strength slider only if an item has been loaded */}\n                {item && (\n                    <Form.Group as={Row}>\n                        <Form.Label column sm={2}>\n                            Strength: {strength}\n                        </Form.Label>\n                        <Col sm={10}>\n                            <Form.Control\n                                type=\"range\"\n                                min={0}\n                                max={5}\n                                step={0.1}\n                                value={strength}\n                                onChange={(e) =>\n                                    setStrength(parseFloat(e.target.value))\n                                }\n                            />\n                        </Col>\n                    </Form.Group>\n                )}\n                {renderContent()}\n            </Modal.Body>\n            <Modal.Footer>\n                <Button variant=\"secondary\" onClick={onCancel}>\n                    Cancel\n                </Button>\n                <Button\n                    variant=\"primary\"\n                    disabled={!item}\n                    onClick={() => handleConfirm()}\n                >\n                    OK\n                </Button>\n            </Modal.Footer>\n        </Modal>\n    );\n};\n","import React, { FC, useState, useEffect, useRef } from \"react\";\nimport axios from \"axios\";\nimport { Prompt } from \"react-router\";\nimport { loadImageAsync } from \"../../lib/loadImage\";\n\nimport { sleep } from \"../../lib/sleep\";\nimport { defaultArgs } from \"../../components/ImagePrompt\";\nimport { Tool, BaseTool } from \"./tool\";\nimport { Renderer } from \"./renderer\";\nimport { Cursor, Rect } from \"./models\";\nimport {\n    AIBrushApi,\n    CreateImageInput,\n    Image as APIImage,\n    ImageList,\n    LoraConfig,\n    StatusEnum,\n} from \"../../client\";\nimport { ZoomHelper } from \"./zoomHelper\";\nimport { getClosestAspectRatio } from \"../../lib/aspecRatios\";\nimport {\n    convertPNGToJPG,\n    ImageUtilWorker,\n    ImageWorkerRequest,\n    loadImageDataElement,\n} from \"../../lib/imageutil\";\nimport { SelectionTool, Controls as SelectionControls } from \"./selection-tool\";\nimport { getUpscaleLevel } from \"../../lib/upscale\";\nimport { ApiSocket, NOTIFICATION_IMAGE_UPDATED } from \"../../lib/apisocket\";\nimport moment from \"moment\";\nimport { ProgressBar } from \"../../components/ProgressBar\";\nimport { calculateImagesCost } from \"../../lib/credits\";\nimport { CostIndicator } from \"../../components/CostIndicator\";\nimport ModelSelector from \"../../components/ModelSelector\";\nimport { PencilTool } from \"./pencil-tool\";\nimport { MaskEditor } from \"./mask-editor-controls\";\nimport { ResetToDefaultIcon } from \"../../components/ResetToDefaultIcon\";\nimport { LoraModal, SelectedLora } from \"../../components/LoraSelector\";\nimport { LoraTriggers } from \"../../components/LoraTriggers\";\nimport { SelectedLoraTag } from \"../../components/SelectedLora\";\n\nconst anonymousClient = axios.create();\n\ntype EnhanceToolState =\n    | \"select\"\n    | \"default\"\n    | \"uploading\"\n    | \"processing\"\n    | \"confirm\"\n    | \"erase\"\n    | \"mask\";\n\n// eraser width modifier adds a solid core with a feather edge\n// equal to the what is used on enhanced selections\nconst eraserWidthModifier = 1.3;\n\ninterface ImageWithData extends APIImage {\n    data?: ImageData;\n}\n\nexport class EnhanceTool extends BaseTool implements Tool {\n    readonly selectionTool: SelectionTool;\n    readonly pencilTool: PencilTool;\n\n    private prompt: string = \"\";\n    private negativePrompt: string = \"\";\n    private model: string = \"Epic Diffusion\";\n    private count: number = 4;\n    private variationStrength: number = 0.35;\n    private loras: LoraConfig[] = [];\n    private _dirty = false;\n    private worker: ImageUtilWorker;\n    private idCounter = 0;\n\n    private _state: EnhanceToolState = \"default\";\n    private stateHandler: (state: EnhanceToolState) => void = () => {};\n    private selectionControlsListener: (show: boolean) => void = () => {};\n    private maskHandler: (isMasked: boolean) => void = () => {};\n\n    private imageData: Array<ImageData> = [];\n    private selectedImageDataIndex: number = -1;\n    private selectedImageData: ImageData | null = null;\n    private panning = false;\n    private erasing = false;\n    private progressListener?: (progress: number) => void;\n    private errorListener?: (error: string | null) => void;\n    private dirtyListener?: (dirty: boolean) => void;\n\n    set dirty(dirty: boolean) {\n        this._dirty = dirty;\n        if (this.dirtyListener) {\n            this.dirtyListener(dirty);\n        }\n    }\n\n    get dirty() {\n        return this._dirty;\n    }\n\n    onDirty(listener: (dirty: boolean) => void): void {\n        this.dirtyListener = listener;\n    }\n\n    onError(handler: (error: string | null) => void) {\n        this.errorListener = handler;\n    }\n\n    private notifyError(error: string | null) {\n        if (this.errorListener) {\n            this.errorListener(error);\n        }\n    }\n\n    get state(): EnhanceToolState {\n        return this._state;\n    }\n\n    set state(state: EnhanceToolState) {\n        if (state !== this._state) {\n            this.renderer.setCursor(undefined);\n            if (this._state == \"select\") {\n                this.selectionTool.destroy();\n            }\n            // if (this._state === \"mask\") {\n            //     this.renderer.setCursor(undefined);\n            // }\n            // if (this._state === \"erase\") {\n            //     this.renderer.setCursor(undefined);\n            // }\n            this._state = state;\n            this.stateHandler(state);\n            if (state == \"confirm\") {\n                this.selectionControlsListener(true);\n            } else {\n                this.selectionControlsListener(false);\n                if (state == \"select\") {\n                    this.selectionTool.updateArgs({\n                        ...this.selectionTool.getArgs(),\n                        outpaint: false,\n                    });\n                }\n            }\n        }\n    }\n\n    selectSupported(): boolean {\n        return !(\n            getUpscaleLevel(\n                this.renderer.getWidth(),\n                this.renderer.getHeight()\n            ) === 0 && this.renderer.getWidth()\n        );\n    }\n\n    constructor(renderer: Renderer) {\n        super(renderer, \"enhance\");\n        this.selectionTool = new SelectionTool(renderer);\n        this.pencilTool = new PencilTool(\n            renderer,\n            \"mask\",\n            \"#FFFFFF\",\n            \"mask-editor\"\n        );\n        if (this.selectSupported()) {\n            this.state = \"select\";\n        } else {\n            this.state = \"default\";\n        }\n        let selectionArgs = this.selectionTool.getArgs();\n        if (!this.selectSupported()) {\n            selectionArgs = {\n                ...selectionArgs,\n                selectionOverlay: {\n                    x: 0,\n                    y: 0,\n                    width: this.renderer.getWidth(),\n                    height: this.renderer.getHeight(),\n                },\n            };\n        }\n        this.selectionTool.updateArgs(selectionArgs);\n        this.pencilTool.updateArgs({\n            ...this.pencilTool.getArgs(),\n            brushColor: \"#FFFFFF\",\n        });\n        // unset the cursor from the pencil tool (hack)\n        this.renderer.setCursor(undefined);\n        this.worker = new ImageUtilWorker();\n    }\n\n    onMouseDown(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        if (this.state == \"select\") {\n            this.selectionTool.onMouseDown(event);\n            return;\n        }\n        if (this.state == \"mask\") {\n            this.pencilTool.onMouseDown(event);\n            return;\n        }\n        let { x, y } = this.zoomHelper.translateMouseToCanvasCoordinates(\n            event.nativeEvent.offsetX,\n            event.nativeEvent.offsetY\n        );\n        if (event.button === 1) {\n            this.panning = true;\n            return;\n        }\n        if (this.state == \"erase\" && this.selectedImageData) {\n            this.erasing = true;\n            // clone selected ImageData\n            this.selectedImageData = new ImageData(\n                this.selectedImageData.data.slice(),\n                this.selectedImageData.width,\n                this.selectedImageData.height\n            );\n\n            this.erasePoint(x, y);\n        }\n    }\n\n    // TODO: on erase cancel and on erase confirm\n    // either restore the image data from the array\n    // or overwrite the array with the new image data\n\n    private erasePoint(x: number, y: number) {\n        const selectionOverlay = this.renderer.getSelectionOverlay()!;\n        const baseWidth = Math.min(\n            selectionOverlay.width,\n            selectionOverlay.height\n        );\n        const eraserRadius = Math.floor((baseWidth / 8) * eraserWidthModifier);\n\n        const relX = x - selectionOverlay.x;\n        const relY = y - selectionOverlay.y;\n        const imageData = this.selectedImageData!;\n\n        const startX = Math.max(0, relX - eraserRadius);\n        const startY = Math.max(0, relY - eraserRadius);\n        const endX = Math.min(imageData.width, relX + eraserRadius);\n        const endY = Math.min(imageData.height, relY + eraserRadius);\n\n        // relX=64.28541697636388, relY=64.24464312259761, startX=0.28541697636387653, startY=0.24464312259760845, endX=128.28541697636388, endY=128.2446431225976\n\n        for (let i = startX; i < endX; i++) {\n            for (let j = startY; j < endY; j++) {\n                const index = (j * imageData.width + i) * 4;\n                const distance = Math.sqrt(\n                    Math.pow(i - relX, 2) + Math.pow(j - relY, 2)\n                );\n                if (distance < eraserRadius) {\n                    // set alpha to a linear gradient from the center,\n                    // 100% in the middle and 0% at the edge\n                    const alphaPct =\n                        (distance / eraserRadius) * eraserWidthModifier -\n                        (eraserWidthModifier - 1);\n\n                    const alpha = Math.min(\n                        Math.floor(alphaPct * 255),\n                        imageData.data[index + 3]\n                    );\n                    imageData.data[index + 3] = alpha;\n                }\n            }\n        }\n        this.renderer.setEditImage(imageData);\n    }\n\n    private updateCursor(x: number, y: number) {\n        if (this.state == \"erase\" && this.selectedImageData) {\n            const selectionOverlay = this.renderer.getSelectionOverlay()!;\n            const baseWidth = Math.min(\n                selectionOverlay.width,\n                selectionOverlay.height\n            );\n            const featherWidth = Math.floor(baseWidth / 8);\n            this.renderer.setCursor({\n                color: \"white\",\n                radius: featherWidth * eraserWidthModifier,\n                type: \"circle\",\n                x,\n                y,\n            });\n        } else {\n            this.renderer.setCursor({\n                color: \"white\",\n                radius: 10,\n                type: \"crosshairs\",\n                x,\n                y,\n            });\n        }\n    }\n\n    onMouseMove(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        if (this.state == \"select\") {\n            this.selectionTool.onMouseMove(event);\n            return;\n        }\n        if (this.state == \"mask\") {\n            this.pencilTool.onMouseMove(event);\n            return;\n        }\n        let { x, y } = this.zoomHelper.translateMouseToCanvasCoordinates(\n            event.nativeEvent.offsetX,\n            event.nativeEvent.offsetY\n        );\n        if (this.panning) {\n            this.zoomHelper.onPan(event);\n        }\n\n        this.updateCursor(x, y);\n        if (this.erasing) {\n            this.erasePoint(x, y);\n        }\n    }\n\n    onMouseUp(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        if (this.state == \"select\") {\n            this.selectionTool.onMouseUp(event);\n        }\n        if (this.state == \"mask\") {\n            this.pencilTool.onMouseUp(event);\n        }\n        this.panning = false;\n        this.erasing = false;\n    }\n\n    onMouseLeave(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>): void {\n        if (this.state == \"select\") {\n            this.selectionTool.onMouseLeave(event);\n        }\n        if (this.state == \"mask\") {\n            this.pencilTool.onMouseLeave(event);\n        }\n        this.panning = false;\n        this.erasing = false;\n    }\n\n    onWheel(event: WheelEvent) {\n        this.zoomHelper.onWheel(event);\n        let { x, y } = this.zoomHelper.translateMouseToCanvasCoordinates(\n            event.offsetX,\n            event.offsetY\n        );\n        this.updateCursor(x, y);\n    }\n\n    updateArgs(args: any) {\n        args = {\n            ...this.getArgs(),\n            ...args,\n        };\n        this.prompt = args.prompt || \"\";\n        this.negativePrompt = args.negativePrompt || \"\";\n        this.model = args.model || \"Epic Diffusion\";\n        this.count = args.count || 4;\n        this.variationStrength = args.variationStrength || 0.75;\n        this.loras = args.loras || [];\n        console.log(\"updateArgs\", args);\n    }\n\n    onChangeState(handler: (state: EnhanceToolState) => void) {\n        this.stateHandler = handler;\n    }\n\n    onChangeMask(handler: (isMasked: boolean) => void) {\n        this.maskHandler = handler;\n    }\n\n    onShowSelectionControls(listener: (show: boolean) => void): void {\n        this.selectionControlsListener = listener;\n    }\n\n    onProgress(listener: (progress: number) => void): void {\n        this.progressListener = listener;\n    }\n\n    private newId(): string {\n        return `${this.idCounter++}`;\n    }\n\n    private async loadImageData(\n        api: AIBrushApi,\n        imageId: string,\n        maskData: ImageData | undefined,\n        selectionOverlay: Rect\n    ): Promise<ImageData> {\n        const imageElement = await loadImageDataElement(api, imageId);\n        const canvas = document.createElement(\"canvas\");\n        canvas.width = selectionOverlay.width;\n        canvas.height = selectionOverlay.height;\n        const ctx = canvas.getContext(\"2d\");\n        if (!ctx) {\n            throw new Error(\"Failed to get canvas context\");\n        }\n        ctx.drawImage(\n            imageElement,\n            0,\n            0,\n            selectionOverlay.width,\n            selectionOverlay.height\n        );\n        const imageData = ctx.getImageData(\n            0,\n            0,\n            selectionOverlay.width,\n            selectionOverlay.height\n        );\n        const id = this.newId();\n        const req: ImageWorkerRequest = {\n            id,\n            alphaMode: \"none\",\n            feather: true,\n            height: this.renderer.getHeight(),\n            width: this.renderer.getWidth(),\n            pixels: imageData.data,\n            selectionOverlay,\n        };\n        if (maskData) {\n            req.alphaMode = \"mask\";\n            req.alphaPixels = maskData.data;\n        }\n        const resp = await this.worker.processRequest(req);\n        const updatedImageData = new ImageData(\n            resp.pixels,\n            imageData.width,\n            imageData.height\n        );\n        // remove canvas\n        canvas.remove();\n        return updatedImageData;\n    }\n\n    cancel() {\n        if (this.state == \"erase\") {\n            this.state = \"confirm\";\n            this.selectedImageData =\n                this.imageData[this.selectedImageDataIndex];\n            this.renderer.setEditImage(this.selectedImageData);\n        } else {\n            if (this.selectSupported()) {\n                this.state = \"select\";\n            } else {\n                this.state = \"default\";\n            }\n            this.imageData = [];\n            this.renderer.setEditImage(null);\n            this.dirty = false;\n        }\n    }\n\n    erase() {\n        this.state = \"erase\";\n    }\n\n    mask() {\n        if (this.renderer.isMasked()) {\n            this.renderer.deleteMask();\n        }\n        this.renderer.createMask();\n        this.state = \"mask\";\n        this.maskHandler(true);\n    }\n\n    deleteMask() {\n        this.renderer.deleteMask();\n        if (this.state == \"mask\") {\n            this.state = \"default\";\n        }\n        this.maskHandler(false);\n    }\n\n    private updateProgress(progress: number) {\n        if (this.progressListener) {\n            this.progressListener(progress);\n        }\n    }\n\n    async submit(api: AIBrushApi, apisocket: ApiSocket, image: APIImage) {\n        this.dirty = true;\n        this.notifyError(null);\n        const selectionOverlay = this.renderer.getSelectionOverlay();\n        let encodedImage = this.renderer.getEncodedImage(selectionOverlay!);\n        if (!encodedImage) {\n            console.error(\"No selection\");\n            return;\n        }\n        encodedImage = await convertPNGToJPG(encodedImage);\n        let encodedMask: string | undefined;\n        let maskData: ImageData | undefined;\n        if (this.renderer.isMasked()) {\n            encodedMask = this.renderer.getEncodedMask(\n                selectionOverlay!,\n                \"mask\"\n            );\n            maskData = this.renderer.getImageData(selectionOverlay!, \"mask\");\n        }\n\n        const input: CreateImageInput = defaultArgs();\n\n        const tmpInitImage = await api.createTemporaryImage(\"jpg\");\n        // convert base64 to binary\n        const binaryImageData = Buffer.from(encodedImage, \"base64\");\n        this.state = \"uploading\";\n        this.updateProgress(0);\n        await anonymousClient.put(\n            tmpInitImage.data.upload_url,\n            binaryImageData,\n            {\n                headers: {\n                    \"Content-Type\": \"image/jpeg\",\n                },\n                onUploadProgress: (progressEvent: any) => {\n                    let percentCompleted =\n                        progressEvent.loaded / progressEvent.total;\n                    if (encodedMask) {\n                        percentCompleted /= 2;\n                    }\n                    this.updateProgress(percentCompleted);\n                },\n            }\n        );\n        input.tmp_jpg_id = tmpInitImage.data.id;\n\n        if (encodedMask) {\n            const tmpMaskImage = await api.createTemporaryImage(\"png\");\n            const binaryMaskData = Buffer.from(encodedMask, \"base64\");\n            await anonymousClient.put(\n                tmpMaskImage.data.upload_url,\n                binaryMaskData,\n                {\n                    headers: {\n                        \"Content-Type\": \"image/png\",\n                    },\n                    onUploadProgress: (progressEvent: any) => {\n                        let percentCompleted =\n                            0.5 +\n                            progressEvent.loaded / progressEvent.total / 2;\n                        this.updateProgress(percentCompleted);\n                    },\n                }\n            );\n            input.tmp_mask_id = tmpMaskImage.data.id;\n        }\n\n        input.label = \"\";\n        input.parent = image.id;\n        input.params.prompt = this.prompt || image.params.prompt;\n        input.params.negative_prompt =\n            this.negativePrompt || image.params.negative_prompt;\n        input.params.denoising_strength = this.variationStrength;\n        input.count = this.count;\n        input.model = this.model;\n        input.nsfw = image.nsfw;\n\n        input.params.width = selectionOverlay!.width;\n        input.params.height = selectionOverlay!.height;\n        // round width and height up to the nearest multiple of 64\n        input.params.width = Math.ceil(input.params.width / 64) * 64;\n        input.params.height = Math.ceil(input.params.height / 64) * 64;\n        input.params.loras = this.loras;\n        input.temporary = true;\n\n\n        let resp: ImageList | null = null;\n\n        try {\n            resp = (await api.createImage(input)).data;\n        } catch (err) {\n            console.error(\"Error creating images\", err);\n            this.notifyError(\"Failed to create image\");\n            this.state = \"default\";\n            return;\n        }\n        this.state = \"processing\";\n        let newImages: Array<ImageWithData> | undefined = resp.images;\n        if (!newImages || newImages.length === 0) {\n            this.state = \"default\";\n            throw new Error(\"No images returned\");\n        }\n        let completed = false;\n\n        let lastUpdate = moment();\n\n        const onMessage = async (msg: string) => {\n            const img = JSON.parse(msg) as any;\n            if (\n                img.type === NOTIFICATION_IMAGE_UPDATED &&\n                img.status === StatusEnum.Completed\n            ) {\n                lastUpdate = moment();\n                for (let i = 0; i < newImages!.length; i++) {\n                    if (newImages![i].id === img.id) {\n                        const imageData = await this.loadImageData(\n                            api,\n                            newImages![i].id,\n                            maskData,\n                            selectionOverlay!\n                        );\n                        newImages![i].data = imageData;\n                        newImages![i].status = StatusEnum.Completed;\n                    }\n                }\n            } else if (img.status == StatusEnum.Error) {\n                for (let i = 0; i < newImages!.length; i++) {\n                    if (newImages![i].id === img.id) {\n                        newImages![i].status = StatusEnum.Error;\n                    }\n                }\n            }\n        };\n        apisocket.addMessageListener(onMessage);\n        try {\n            let startTime = moment();\n            let lastCheck = moment();\n\n            while (!completed) {\n                let completeCount = 0;\n                await sleep(1000);\n                // poll for completion\n                for (let i = 0; i < newImages!.length; i++) {\n                    if (\n                        newImages![i].status === StatusEnum.Completed ||\n                        newImages![i].status === StatusEnum.Error\n                    ) {\n                        completeCount++;\n                        continue;\n                    }\n                }\n                this.updateProgress(completeCount / newImages!.length);\n                if (completeCount === newImages!.length) {\n                    completed = true;\n                }\n\n                // fallback if sockets don't catch one\n                if (moment().diff(lastCheck, \"seconds\") > 10) {\n                    // get list of ids that aren't completed and batch get them.\n                    const pendingIds = newImages\n                        .filter(\n                            (img) =>\n                                img.status === StatusEnum.Pending ||\n                                img.status === StatusEnum.Processing\n                        )\n                        .map((img) => img.id);\n                    console.log(\"Checking pending images\", pendingIds);\n                    const updatedImagesResult = await api.batchGetImages(\n                        undefined,\n                        {\n                            ids: pendingIds,\n                        }\n                    );\n                    const updatedImages = updatedImagesResult.data.images;\n                    const byId = updatedImages!.reduce((acc, img) => {\n                        acc[img.id] = img;\n                        return acc;\n                    }, {} as Record<string, APIImage>);\n                    for (let i = 0; i < newImages!.length; i++) {\n                        if (\n                            newImages![i].status === StatusEnum.Pending ||\n                            newImages![i].status === StatusEnum.Processing\n                        ) {\n                            const updated = byId[newImages![i].id];\n                            if (updated) {\n                                newImages![i].status = updated.status;\n                                if (updated.status === StatusEnum.Completed) {\n                                    lastUpdate = moment();\n                                    const imageData = await this.loadImageData(\n                                        api,\n                                        newImages![i].id,\n                                        maskData,\n                                        selectionOverlay!\n                                    );\n                                    newImages![i].data = imageData;\n                                }\n                            }\n                        }\n                    }\n                    lastCheck = moment();\n                }\n                // timeout of 2 minutes\n                if (\n                    (lastUpdate.isAfter(startTime) &&\n                        moment().diff(lastUpdate, \"seconds\") > 30) ||\n                    moment().diff(startTime, \"minutes\") > 2\n                ) {\n                    completed = true;\n                }\n            }\n        } finally {\n            apisocket.removeMessageListener(onMessage);\n        }\n\n        // sort images by score descending\n        newImages!.sort((a, b) => {\n            return b.score - a.score;\n        });\n        newImages = newImages!.filter((img) => {\n            return img.status === StatusEnum.Completed;\n        });\n\n        this.imageData = [];\n        for (let i = 0; i < newImages!.length; i++) {\n            if (newImages![i].data) {\n                this.imageData.push(newImages![i].data as ImageData);\n            }\n        }\n        if (this.imageData.length === 0) {\n            this.state = \"default\";\n            this.notifyError(\"No images returned\");\n            return;\n        }\n        this.renderer.setEditImage(this.imageData[0]);\n        this.selectedImageDataIndex = 0;\n        this.selectedImageData = this.imageData[0];\n        this.state = \"confirm\";\n        this.deleteMask();\n    }\n\n    select(direction: \"left\" | \"right\") {\n        if (direction == \"left\") {\n            this.selectedImageDataIndex--;\n            if (this.selectedImageDataIndex < -1) {\n                this.selectedImageDataIndex = this.imageData.length - 1;\n            }\n        }\n        if (direction == \"right\") {\n            this.selectedImageDataIndex++;\n            if (this.selectedImageDataIndex >= this.imageData.length) {\n                this.selectedImageDataIndex = -1;\n            }\n        }\n        if (this.selectedImageDataIndex === -1) {\n            this.selectedImageData = null;\n        } else {\n            this.selectedImageData =\n                this.imageData[this.selectedImageDataIndex];\n        }\n        this.renderer.setEditImage(this.selectedImageData);\n    }\n\n    onSaveImage(listener: (encodedImage: string, args?: any) => void): void {\n        this.saveListener = listener;\n    }\n\n    confirm() {\n        this.renderer.commitSelection();\n        if (this.selectSupported()) {\n            this.state = \"select\";\n        } else {\n            this.state = \"default\";\n        }\n        this.imageData = [];\n        const encodedImage = this.renderer.getEncodedImage(null);\n        if (encodedImage && this.saveListener) {\n            this.saveListener(encodedImage, {\n                phrases: [this.prompt],\n                negative_phrases: [this.negativePrompt],\n                model: this.model,\n            });\n        }\n        this.dirty = false;\n    }\n\n    destroy(): boolean {\n        if (this.renderer.isMasked()) {\n            this.renderer.deleteMask();\n        }\n        this.renderer.setCursor(undefined);\n        this.worker.destroy();\n        return true;\n    }\n}\n\ninterface ControlsProps {\n    api: AIBrushApi;\n    apisocket: ApiSocket;\n    image: APIImage;\n    renderer: Renderer;\n    tool: EnhanceTool;\n}\n\nexport const EnhanceControls: FC<ControlsProps> = ({\n    api,\n    apisocket,\n    image,\n    renderer,\n    tool,\n}) => {\n    const [count, setCount] = useState(4);\n    const [dirty, setDirty] = useState(false);\n    const [variationStrength, setVariationStrength] = useState(0.35);\n    const [prompt, setPrompt] = useState(image.params.prompt || \"\");\n    const [negativePrompt, setNegativePrompt] = useState(\n        image.params.negative_prompt || \"\"\n    );\n    const [model, setModel] = useState(\n        image.model == \"swinir\" || image.model == \"stable_diffusion\"\n            ? \"Epic Diffusion\"\n            : image.model\n    );\n    const [selectingModel, setSelectingModel] = useState<boolean>(false);\n    const [state, setState] = useState<EnhanceToolState>(tool.state);\n    const [isMasked, setIsMasked] = useState<boolean>(tool.renderer.isMasked());\n    const [progress, setProgress] = useState(0);\n    const [error, setError] = useState<string | null>(null);\n\n    const [selectingLora, setSelectingLora] = useState<boolean>(false);\n    const [selectedLoras, setSelectedLoras] = useState<SelectedLora[]>([]);\n\n    tool.onChangeState(setState);\n    tool.onChangeMask(setIsMasked);\n    tool.onProgress(setProgress);\n    tool.onError(setError);\n    tool.onDirty(setDirty);\n\n    const onAddLora = (lora: SelectedLora) => {\n        setSelectedLoras([...selectedLoras, lora]);\n        setSelectingLora(false);\n    };\n\n    const onRemoveLora = (lora: SelectedLora) => {\n        const updated = selectedLoras.filter(\n            (selectedLora) => selectedLora.config.name !== lora.config.name\n        )\n        setSelectedLoras(updated);\n    };\n\n    const onAddTrigger = (trigger: string) => {\n        const parts = [prompt];\n        if (prompt.length > 0 && !prompt.endsWith(\",\")) {\n            parts.push(\", \");\n        }\n        parts.push(trigger);\n        setPrompt(parts.join(\"\"));\n    };\n\n    const selectionOverlay: Rect =\n        tool.selectionTool.getArgs().selectionOverlay;\n    let cost = count;\n    if (selectionOverlay) {\n        cost = calculateImagesCost(\n            count,\n            selectionOverlay.width,\n            selectionOverlay.height\n        );\n    }\n\n    if (state == \"processing\" || state == \"uploading\") {\n        return (\n            <div style={{ marginTop: \"16px\" }}>\n                <i className=\"fa fa-spinner fa-spin\"></i>&nbsp;{\" \"}\n                {state === \"processing\" ? \"Enhancing...\" : \"Uploading...\"}\n                <br />\n                <ProgressBar progress={progress} />\n            </div>\n        );\n    }\n\n    return (\n        <div\n            style={{\n                marginTop: \"16px\",\n                marginBottom: \"8px\",\n                marginLeft: \"16px\",\n            }}\n        >\n            {error && (\n                <div className=\"alert alert-danger\" role=\"alert\">\n                    {/* dismiss button */}\n                    <button\n                        type=\"button\"\n                        className=\"close\"\n                        data-dismiss=\"alert\"\n                        aria-label=\"Close\"\n                        onClick={() => setError(null)}\n                    >\n                        <span aria-hidden=\"true\">&times;</span>\n                    </button>\n                    {error}\n                </div>\n            )}\n            {state === \"select\" && (\n                <>\n                    <p>\n                        {/* info icon */}\n                        <i className=\"fa fa-info-circle\"></i>&nbsp; Move the\n                        selection rectangle to the area that you want to enhance\n                    </p>\n                    <SelectionControls\n                        renderer={renderer}\n                        tool={tool.selectionTool}\n                        lockAspectRatio={true}\n                    />\n                </>\n            )}\n            {state === \"default\" && (\n                <>\n                    <p>\n                        {/* info icon */}\n                        <i className=\"fa fa-info-circle\"></i>&nbsp; Confirm the\n                        parameters below and continue\n                    </p>\n                    {/* prompt */}\n                    <div className=\"form-group\">\n                        <label htmlFor=\"prompt\">\n                            Prompt&nbsp;\n                            <ResetToDefaultIcon\n                                onClick={() =>\n                                    setPrompt(image.params.prompt || \"\")\n                                }\n                            />\n                        </label>\n                        {/* refresh icon */}\n\n                        <input\n                            type=\"text\"\n                            className=\"form-control\"\n                            id=\"prompt\"\n                            value={prompt}\n                            onChange={(e) => {\n                                setPrompt(e.target.value);\n                            }}\n                        />\n\n                        <small className=\"form-text text-muted\">\n                            Customize the text prompt here\n                        </small>\n                    </div>\n                    {selectedLoras.length > 0 && (\n                        <LoraTriggers\n                            prompt={prompt}\n                            selectedLoras={selectedLoras}\n                            onAddTrigger={onAddTrigger}\n                        />\n                    )}\n                    {/* negative prompt */}\n                    <div className=\"form-group\">\n                        <label htmlFor=\"negative-prompt\">\n                            Negative Prompt&nbsp;\n                            <ResetToDefaultIcon\n                                onClick={() =>\n                                    setNegativePrompt(\n                                        image.params.negative_prompt || \"\"\n                                    )\n                                }\n                            />\n                        </label>\n                        <input\n                            type=\"text\"\n                            className=\"form-control\"\n                            id=\"negative-prompt\"\n                            value={negativePrompt}\n                            onChange={(e) => {\n                                setNegativePrompt(e.target.value);\n                            }}\n                        />\n                        <small className=\"form-text text-muted\">\n                            Customize the negative text prompt here\n                        </small>\n                    </div>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"count\">Count: {count}</label>\n                        <input\n                            type=\"range\"\n                            className=\"form-control-range\"\n                            id=\"count\"\n                            min=\"1\"\n                            max=\"10\"\n                            step=\"1\"\n                            value={count}\n                            onChange={(e) => {\n                                setCount(parseInt(e.target.value));\n                            }}\n                        />\n                        <small className=\"form-text text-muted\">\n                            Number of enhancement options\n                        </small>\n                    </div>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"variation-strength\">\n                            Variation Strength:{\" \"}\n                            {Math.round(variationStrength * 100)}%\n                        </label>\n                        <input\n                            type=\"range\"\n                            className=\"form-control-range\"\n                            id=\"variation-strength\"\n                            min=\"0\"\n                            max=\"1\"\n                            step=\"0.05\"\n                            value={variationStrength}\n                            onChange={(e) => {\n                                setVariationStrength(\n                                    parseFloat(e.target.value)\n                                );\n                            }}\n                        />\n                        <small className=\"form-text text-muted\">\n                            How much variation to use\n                        </small>\n                    </div>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"model\">Model</label>\n                        <div>\n                            <button\n                                type=\"button\"\n                                className=\"btn btn-secondary light-button\"\n                                onClick={() => setSelectingModel(true)}\n                            >\n                                {model}&nbsp;\n                                <i className=\"fas fa-caret-down\"></i>\n                            </button>\n                        </div>\n                        <small className=\"form-text text-muted\">\n                            Select the model to use\n                        </small>\n                    </div>\n                    <div className=\"form-group\">\n                        {/* loras */}\n                        <label htmlFor=\"loras\">Loras</label>\n                        <div>\n                            {selectedLoras.map((lora) => (\n                                <SelectedLoraTag\n                                    key={lora.lora.name}\n                                    lora={lora}\n                                    onRemove={(lora) => onRemoveLora(lora)}\n                                />\n                            ))}\n                            {/* add lora button */}\n                            {selectedLoras.length < 5 && (\n                                <button\n                                    type=\"button\"\n                                    className=\"btn btn-secondary light-button\"\n                                    style={{ marginLeft: \"8px\" }}\n                                    onClick={() => setSelectingLora(true)}\n                                >\n                                    <i className=\"fas fa-plus\"></i>&nbsp;Add\n                                    Lora\n                                </button>\n                            )}\n                        </div>\n                    </div>\n                    <div className=\"form-group\">\n                        <CostIndicator imagesCost={cost} />\n                    </div>\n                </>\n            )}\n            {state === \"erase\" && (\n                <p>\n                    {/* info icon */}\n                    <i className=\"fa fa-info-circle\"></i>&nbsp; Erase any\n                    undesired sections before saving\n                </p>\n            )}\n            {state === \"mask\" && (\n                <MaskEditor\n                    onConfirm={() => (tool.state = \"default\")}\n                    onRevert={() => {\n                        tool.deleteMask();\n                    }}\n                    tool={tool.pencilTool}\n                />\n            )}\n\n            <div className=\"form-group\">\n                {state === \"select\" && (\n                    <button\n                        type=\"button\"\n                        className=\"btn btn-primary btn-sm\"\n                        onClick={() => {\n                            tool.state = \"default\";\n                        }}\n                        style={{ marginRight: \"8px\" }}\n                    >\n                        {/* magic icon */}\n                        <i className=\"fa fa-magic\"></i>&nbsp; Continue\n                    </button>\n                )}\n                {((state === \"default\" && tool.selectSupported()) ||\n                    state === \"confirm\" ||\n                    state === \"erase\") && (\n                    <button\n                        className=\"btn btn-primary btn-sm\"\n                        onClick={() => {\n                            tool.cancel();\n                        }}\n                        style={{ marginRight: \"8px\" }}\n                    >\n                        {/* cancel icon */}\n                        <i className=\"fa fa-times\"></i>&nbsp; Revert\n                    </button>\n                )}\n                {(state === \"confirm\" || state === \"erase\") && (\n                    <button\n                        className=\"btn btn-primary btn-sm\"\n                        onClick={() => tool.confirm()}\n                        style={{ marginRight: \"8px\" }}\n                    >\n                        <i className=\"fa fa-save\"></i>&nbsp; Save\n                    </button>\n                )}\n                {state === \"confirm\" && (\n                    <>\n                        <button\n                            className=\"btn btn-primary btn-sm\"\n                            onClick={() => tool.erase()}\n                            style={{ marginRight: \"8px\" }}\n                        >\n                            <i className=\"fa fa-eraser\"></i>&nbsp; Erase\n                        </button>\n                    </>\n                )}\n                {state === \"default\" && (\n                    <>\n                        <button\n                            className=\"btn btn-primary btn-sm\"\n                            onClick={() => {\n                                tool.updateArgs({\n                                    count,\n                                    variationStrength,\n                                    prompt,\n                                    negativePrompt,\n                                    model,\n                                    loras: selectedLoras.map(\n                                        (lora) => lora.config\n                                    ),\n                                });\n                                tool.submit(api, apisocket, image);\n                            }}\n                            style={{ marginRight: \"8px\" }}\n                        >\n                            <i className=\"fa fa-magic\"></i>&nbsp; Enhance\n                        </button>\n                        <button\n                            className=\"btn btn-primary btn-sm\"\n                            onClick={() => tool.mask()}\n                            style={{ marginRight: \"8px\" }}\n                        >\n                            <i className=\"fa fa-cut\"></i>&nbsp; Mask\n                        </button>\n                        {isMasked && (\n                            <button\n                                className=\"btn btn-danger btn-sm\"\n                                onClick={() => tool.deleteMask()}\n                                style={{ marginRight: \"8px\" }}\n                            >\n                                <i className=\"fa fa-cut\"></i>&nbsp; Unmask\n                            </button>\n                        )}\n                    </>\n                )}\n            </div>\n            <Prompt\n                when={dirty}\n                message=\"Are you sure you want to leave? Your changes will be lost.\"\n            />\n            {selectingModel && (\n                <ModelSelector\n                    api={api}\n                    onCancel={() => setSelectingModel(false)}\n                    onSelectModel={(model) => {\n                        setModel(model);\n                        setSelectingModel(false);\n                    }}\n                    initialSelectedModel={model}\n                    inpainting={false}\n                />\n            )}\n            {selectingLora && (\n                <LoraModal\n                    onCancel={() => setSelectingLora(false)}\n                    onConfirm={(lora) => onAddLora(lora)}\n                />\n            )}\n        </div>\n    );\n};\n","import React, { FC, useState, useEffect } from \"react\";\nimport { Renderer } from \"./renderer\";\nimport { BaseTool, Tool } from \"./tool\";\nimport { ZoomHelper } from \"./zoomHelper\";\n\nexport class SmudgeTool extends BaseTool implements Tool {\n    private brushSize = 10;\n    private brushOpacity = 0.2;\n\n    private lastX = 0;\n    private lastY = 0;\n    private panning = false;\n    private smudging = false;\n    private _dirty = false;\n\n    set dirty(dirty: boolean) {\n        this._dirty = dirty;\n        if (this.dirtyListener) {\n            this.dirtyListener(dirty);\n        }\n    }\n\n    get dirty() {\n        return this._dirty;\n    }\n\n    private dirtyListener?: (dirty: boolean) => void;\n\n    constructor(renderer: Renderer) {\n        super(renderer, \"smudge\");\n    }\n\n    private sync() {\n        this.renderer.setCursor({\n            type: \"circle\",\n            color: \"white\",\n            radius: this.brushSize / 2,\n            x: this.lastX,\n            y: this.lastY,\n        });\n    }\n\n    updateArgs(args: any) {\n        super.updateArgs(args);\n        this.brushSize = args.brushSize || 10;\n        this.brushOpacity = args.brushOpacity || 0.2;\n        this.sync();\n    }\n\n    onMouseMove(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>): void {\n        let { x, y } = this.zoomHelper.translateMouseToCanvasCoordinates(\n            event.nativeEvent.offsetX,\n            event.nativeEvent.offsetY\n        );\n\n        if (this.panning) {\n            this.zoomHelper.onPan(event);\n        } else if (this.smudging) {\n            this.renderer.smudgeLine(\n                this.lastX,\n                this.lastY,\n                x,\n                y,\n                this.brushSize,\n                this.brushOpacity\n            );\n            this.dirty = true;\n        }\n\n        this.lastX = x;\n        this.lastY = y;\n        this.sync();\n    }\n\n    onWheel(event: WheelEvent) {\n        this.zoomHelper.onWheel(event);\n        this.sync();\n    }\n\n    onMouseDown(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        if (event.button === 0) {\n            this.smudging = true;\n            if (!this.dirty) {\n                this.renderer.copyEditImageFromBaseImage();\n            }\n            this.dirty = true;\n            let { x, y } = this.zoomHelper.translateMouseToCanvasCoordinates(\n                event.nativeEvent.offsetX,\n                event.nativeEvent.offsetY\n            );\n            this.lastX = x;\n            this.lastY = y;\n            this.sync();\n        } else if (event.button === 1) {\n            this.panning = true;\n        }\n        this.sync();\n    }\n\n    onMouseUp(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        this.smudging = false;\n        this.panning = false;\n        this.sync();\n    }\n\n    onSaveImage(listener: (encodedImage: string) => void): void {\n        this.saveListener = listener;\n    }\n\n    onDirty(listener: (dirty: boolean) => void): void {\n        this.dirtyListener = listener;\n    }\n\n    cancel() {\n        // kind of a hack, clears the selection layer\n        this.renderer.setEditImage(null);\n        this.dirty = false;\n    }\n\n    confirm() {\n        this.renderer.commitSelection();\n        const encodedImage = this.renderer.getEncodedImage(null);\n        if (encodedImage && this.saveListener) {\n            this.saveListener(encodedImage);\n        }\n        this.dirty = false;\n    }\n\n    destroy(): boolean {\n        if (this.dirty) {\n            this.renderer.commitSelection();\n        }\n        return true;\n    }\n}\n\ninterface Props {\n    renderer: Renderer;\n    tool: SmudgeTool;\n}\n\nexport const SmudgeControls: FC<Props> = ({ renderer, tool }) => {\n    const [brushSize, setBrushSize] = useState(10);\n    const [brushOpacity, setBrushOpacity] = useState(0.2);\n    const [dirty, setDirty] = useState(false);\n\n    tool.onDirty(setDirty);\n\n    useEffect(() => {\n        tool.updateArgs({\n            brushSize,\n            brushOpacity,\n        });\n    }, [brushSize, brushOpacity]);\n\n    return (\n        <div style={{ marginTop: \"16px\" }}>\n            <div className=\"form-group\">\n                <label style={{ width: \"100%\" }}>\n                    Brush size\n                    <small\n                        className=\"form-text text-muted\"\n                        style={{ float: \"right\" }}\n                    >\n                        {brushSize}px\n                    </small>\n                </label>\n                <input\n                    type=\"range\"\n                    className=\"form-control-range\"\n                    min=\"1\"\n                    max=\"100\"\n                    value={brushSize}\n                    onChange={(e) => setBrushSize(parseInt(e.target.value))}\n                />\n            </div>\n            <div className=\"form-group\">\n                <label style={{ width: \"100%\" }}>\n                    Brush opacity\n                    <small\n                        className=\"form-text text-muted\"\n                        style={{ float: \"right\" }}\n                    >\n                        {Math.round(brushOpacity * 100)}%\n                    </small>\n                </label>\n                <input\n                    type=\"range\"\n                    className=\"form-control-range\"\n                    min=\"0\"\n                    max=\"1\"\n                    step=\"0.01\"\n                    value={brushOpacity}\n                    onChange={(e) =>\n                        setBrushOpacity(parseFloat(e.target.value))\n                    }\n                />\n            </div>\n            <div\n                className=\"form-group\"\n                style={{\n                    marginTop: \"16px\",\n                    visibility: dirty ? \"visible\" : \"hidden\",\n                }}\n            >\n                <button\n                    className=\"btn btn-secondary\"\n                    onClick={() => tool.cancel()}\n                >\n                    Revert\n                </button>\n                <button\n                    className=\"btn btn-primary\"\n                    onClick={() => tool.confirm()}\n                    style={{ marginLeft: \"8px\" }}\n                >\n                    Save\n                </button>\n            </div>\n        </div>\n    );\n};\n","import React, { FC, useState, useEffect, useRef } from \"react\";\nimport axios from \"axios\";\nimport { Prompt } from \"react-router\";\n\nimport { sleep } from \"../../lib/sleep\";\nimport { defaultArgs } from \"../../components/ImagePrompt\";\nimport { Tool, BaseTool } from \"./tool\";\nimport { Renderer } from \"./renderer\";\nimport { SelectionTool } from \"./selection-tool\";\nimport { Cursor, Rect } from \"./models\";\nimport {\n    AIBrushApi,\n    CreateImageInput,\n    Image as APIImage,\n    ImageList,\n    StatusEnum,\n} from \"../../client\";\nimport { ZoomHelper } from \"./zoomHelper\";\nimport { getClosestAspectRatio } from \"../../lib/aspecRatios\";\nimport { getUpscaleLevel } from \"../../lib/upscale\";\nimport {\n    applyAlphaMask,\n    featherEdges,\n    ImageUtilWorker,\n    loadImageDataElement,\n} from \"../../lib/imageutil\";\nimport { ApiSocket, NOTIFICATION_IMAGE_UPDATED } from \"../../lib/apisocket\";\nimport moment from \"moment\";\nimport { ProgressBar } from \"../../components/ProgressBar\";\nimport { calculateImagesCost } from \"../../lib/credits\";\nimport { CostIndicator } from \"../../components/CostIndicator\";\nimport ModelSelector from \"../../components/ModelSelector\";\nimport { ResetToDefaultIcon } from \"../../components/ResetToDefaultIcon\";\n\nconst anonymousClient = axios.create();\n\ntype InpaintToolState =\n    | \"select\"\n    | \"erase\"\n    | \"inpaint\"\n    | \"uploading\"\n    | \"processing\"\n    | \"confirm\"\n    | undefined;\n\ninterface ImageWithData extends APIImage {\n    data?: ImageData;\n}\n\nexport class InpaintTool extends BaseTool implements Tool {\n    private selectionTool: SelectionTool;\n    private prompt: string = \"\";\n    private negativePrompt: string = \"\";\n    private count: number = 4;\n    private brushSize: number = 10;\n    private _dirty = false;\n    private worker: ImageUtilWorker;\n    private idCounter = 0;\n\n    private _state: InpaintToolState;\n    private stateHandler: (state: InpaintToolState) => void = () => {};\n    private selectionControlsListener: (show: boolean) => void = () => {};\n\n    private imageData: Array<ImageData> = [];\n    private selectedImageDataIndex: number = -1;\n    private selectedImageData: ImageData | null = null;\n    private panning = false;\n    private erasing = false;\n    private progressListener?: (progress: number) => void;\n    private errorListener?: (error: string | null) => void;\n    private dirtyListener?: (dirty: boolean) => void;\n\n    set dirty(dirty: boolean) {\n        this._dirty = dirty;\n        if (this.dirtyListener) {\n            this.dirtyListener(dirty);\n        }\n    }\n\n    get dirty() {\n        return this._dirty;\n    }\n\n    private newId(): string {\n        return `${this.idCounter++}`;\n    }\n\n    onError(handler: (error: string | null) => void) {\n        this.errorListener = handler;\n    }\n\n    private notifyError(error: string | null) {\n        if (this.errorListener) {\n            this.errorListener(error);\n        }\n    }\n\n    get state(): InpaintToolState {\n        return this._state;\n    }\n\n    set state(state: InpaintToolState) {\n        if (state != this._state) {\n            if (this._state == \"select\") {\n                this.selectionTool.destroy();\n            }\n            if (this._state === \"erase\") {\n                this.renderer.setCursor(undefined);\n            }\n            this._state = state;\n            this.stateHandler(state);\n\n            if (state == \"confirm\") {\n                this.selectionControlsListener(true);\n            } else {\n                this.selectionControlsListener(false);\n                if (state == \"select\") {\n                    const imageWidth = this.renderer.getWidth();\n                    const imageHeight = this.renderer.getHeight();\n                    const selectionWidth = Math.min(\n                        imageWidth,\n                        imageHeight,\n                        512\n                    );\n                    this.selectionTool.updateArgs({\n                        selectionOverlay: {\n                            x: 0,\n                            y: 0,\n                            width: selectionWidth,\n                            height: selectionWidth,\n                        },\n                    });\n                }\n            }\n        }\n    }\n\n    selectSupported(): boolean {\n        // return !(\n        //     this.renderer.getWidth() == this.renderer.getHeight() &&\n        //     getUpscaleLevel(\n        //         this.renderer.getWidth(),\n        //         this.renderer.getHeight()\n        //     ) === 0\n        // );\n        return true;\n    }\n\n    constructor(renderer: Renderer) {\n        super(renderer, \"inpaint\");\n        this.selectionTool = new SelectionTool(renderer);\n        if (this.selectSupported()) {\n            this.state = \"select\";\n            this.selectionTool.updateArgs({\n                outpaint: this.getArgs().outpaint,\n            });\n        } else {\n            this.state = \"erase\";\n        }\n        this.worker = new ImageUtilWorker();\n    }\n\n    onMouseDown(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        if (this.state == \"select\") {\n            this.selectionTool.onMouseDown(event);\n            return;\n        }\n        let { x, y } = this.zoomHelper.translateMouseToCanvasCoordinates(\n            event.nativeEvent.offsetX,\n            event.nativeEvent.offsetY\n        );\n        if (event.button === 1) {\n            this.panning = true;\n            return;\n        }\n        if (this.state == \"erase\") {\n            this.erasing = true;\n            this.erasePoint(x, y);\n        }\n    }\n\n    private erasePoint(x: number, y: number) {\n        if (!this.dirty) {\n            this.dirty = true;\n        }\n        this.renderer.erasePoint(x, y, this.brushSize);\n        this.renderer.render();\n    }\n\n    private updateCursor(x: number, y: number) {\n        if (this.state == \"erase\") {\n            this.renderer.setCursor({\n                color: \"white\",\n                radius: this.brushSize / 2,\n                type: \"circle\",\n                x,\n                y,\n            });\n        } else {\n            this.renderer.setCursor({\n                color: \"white\",\n                radius: 10,\n                type: \"crosshairs\",\n                x,\n                y,\n            });\n        }\n    }\n\n    onMouseMove(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        let { x, y } = this.zoomHelper.translateMouseToCanvasCoordinates(\n            event.nativeEvent.offsetX,\n            event.nativeEvent.offsetY\n        );\n        this.updateCursor(x, y);\n        if (this.state == \"select\") {\n            this.selectionTool.onMouseMove(event);\n            return;\n        }\n\n        if (this.panning) {\n            this.zoomHelper.onPan(event);\n        }\n\n        if (this.erasing) {\n            this.erasePoint(x, y);\n        }\n    }\n\n    onMouseUp(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        if (this.state == \"select\") {\n            this.selectionTool.onMouseUp(event);\n        }\n        this.panning = false;\n        this.erasing = false;\n    }\n\n    onMouseLeave(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>): void {\n        if (this.state == \"select\") {\n            this.selectionTool.onMouseLeave(event);\n        }\n        this.panning = false;\n        this.erasing = false;\n    }\n\n    onWheel(event: WheelEvent) {\n        this.zoomHelper.onWheel(event);\n        let { x, y } = this.zoomHelper.translateMouseToCanvasCoordinates(\n            event.offsetX,\n            event.offsetY\n        );\n        this.updateCursor(x, y);\n    }\n\n    updateArgs(args: any) {\n        args = {\n            ...this.getArgs(),\n            ...args,\n        };\n        super.updateArgs(args);\n        this.prompt = args.prompt || \"\";\n        this.negativePrompt = args.negativePrompt || \"\";\n        this.count = args.count || 4;\n        this.brushSize = args.brushSize || 10;\n\n        this.updateCursor(\n            this.renderer.getWidth() / 2,\n            this.renderer.getHeight() / 2\n        );\n        this.selectionTool.updateArgs({\n            outpaint: args.outpaint,\n        });\n    }\n\n    onChangeState(handler: (state: InpaintToolState) => void) {\n        this.stateHandler = handler;\n    }\n\n    onShowSelectionControls(listener: (show: boolean) => void): void {\n        this.selectionControlsListener = listener;\n    }\n\n    onProgress(listener: (progress: number) => void): void {\n        this.progressListener = listener;\n    }\n\n    private async loadImageData(\n        api: AIBrushApi,\n        imageId: string,\n        alphaMask: ImageData,\n        selectionOverlay: Rect\n    ): Promise<ImageData> {\n        const imageElement = await loadImageDataElement(api, imageId);\n        const canvas = document.createElement(\"canvas\");\n        canvas.width = selectionOverlay.width;\n        canvas.height = selectionOverlay.height;\n        const ctx = canvas.getContext(\"2d\");\n        if (!ctx) {\n            throw new Error(\"Failed to get canvas context\");\n        }\n        ctx.drawImage(\n            imageElement,\n            0,\n            0,\n            selectionOverlay.width,\n            selectionOverlay.height\n        );\n        const imageData = ctx.getImageData(\n            0,\n            0,\n            selectionOverlay.width,\n            selectionOverlay.height\n        );\n\n        const id = this.newId();\n        const resp = await this.worker.processRequest({\n            id,\n            alphaMode: \"alpha\",\n            alphaPixels: alphaMask.data,\n            feather: true,\n            height: this.renderer.getHeight(),\n            width: this.renderer.getWidth(),\n            pixels: imageData.data,\n            selectionOverlay,\n            featherWidth: 10,\n        });\n        const updatedImageData = new ImageData(\n            resp.pixels,\n            imageData.width,\n            imageData.height\n        );\n        // remove canvas\n        canvas.remove();\n        return updatedImageData;\n    }\n\n    cancel() {\n        if (this.selectSupported()) {\n            this.state = \"select\";\n        } else {\n            this.state = \"erase\";\n        }\n        this.renderer.snapshot();\n        this.renderer.undo();\n        this.renderer.clearRedoStack();\n        this.imageData = [];\n        this.renderer.setEditImage(null);\n        this.dirty = false;\n    }\n\n    private updateProgress(progress: number) {\n        if (this.progressListener) {\n            this.progressListener(progress);\n        }\n    }\n\n    async submit(\n        api: AIBrushApi,\n        apisocket: ApiSocket,\n        image: APIImage,\n        model: string\n    ) {\n        this.notifyError(null);\n        let selectionOverlay = this.renderer.getSelectionOverlay();\n        if (!selectionOverlay) {\n            console.error(\"No selection\");\n            return;\n        }\n\n        if (this.getArgs().outpaint) {\n            // check if selection overlay is out of renderer bounds (width, height)\n            if (\n                selectionOverlay.x < 0 ||\n                selectionOverlay.y < 0 ||\n                selectionOverlay.x + selectionOverlay.width >\n                    this.renderer.getWidth() ||\n                selectionOverlay.y + selectionOverlay.height >\n                    this.renderer.getHeight()\n            ) {\n                this.renderer.expandToOverlay();\n                selectionOverlay = this.renderer.getSelectionOverlay()!;\n            }\n        }\n\n        this.state = \"uploading\";\n        this.updateProgress(0);\n\n        // get the erased area, then undo the erase to get the original image\n        const encodedMask = this.renderer.getEncodedMask(selectionOverlay);\n        const maskData = this.renderer.getImageData(selectionOverlay);\n        // hack to restore the image\n        this.renderer.snapshot();\n        this.renderer.undo();\n        this.renderer.clearRedoStack();\n\n        const encodedImage = this.renderer.getEncodedImage(selectionOverlay);\n\n        // upload temporary images in parallel\n        const tmpImagePromises = [\n            api.createTemporaryImage(\"png\"),\n            api.createTemporaryImage(\"png\"),\n        ];\n        const tmpImages = await Promise.all(tmpImagePromises);\n        const binaryImages = [\n            Buffer.from(encodedImage!, \"base64\"),\n            Buffer.from(encodedMask!, \"base64\"),\n        ];\n        const progress = [0, 0];\n        const uploadPromises: Array<Promise<any>> = [];\n        for (let i = 0; i < tmpImages.length; i++) {\n            const tmpImage = tmpImages[i].data;\n            const binaryImage = binaryImages[i];\n            uploadPromises.push(\n                anonymousClient.put(tmpImage.upload_url, binaryImage, {\n                    headers: {\n                        \"Content-Type\": \"image/png\",\n                    },\n                    onUploadProgress: (e) => {\n                        progress[i] = e.loaded / e.total;\n                        this.updateProgress((progress[0] + progress[1]) / 2);\n                    },\n                })\n            );\n        }\n        await Promise.all(uploadPromises);\n\n        const input: CreateImageInput = defaultArgs();\n        input.label = \"\";\n        // input.encoded_image = encodedImage;\n        // input.encoded_mask = encodedMask;\n        input.tmp_image_id = tmpImages[0].data.id;\n        input.tmp_mask_id = tmpImages[1].data.id;\n        input.parent = image.id;\n        input.params.prompt = this.prompt || image.params.prompt;\n        input.params.negative_prompt =\n            this.negativePrompt || image.params.negative_prompt;\n        input.params.denoising_strength = 1;\n        input.count = this.count;\n        input.model = model;\n\n        const closestAspectRatio = getClosestAspectRatio(\n            selectionOverlay!.width,\n            selectionOverlay!.height\n        );\n        input.params.width = closestAspectRatio.width;\n        input.params.height = closestAspectRatio.height;\n        input.temporary = true;\n\n        let resp: ImageList | null = null;\n\n        try {\n            resp = (await api.createImage(input)).data;\n        } catch (err) {\n            console.error(\"Error creating images\", err);\n            this.notifyError(\"Failed to create image\");\n            this.state = \"select\";\n            return;\n        }\n        this.state = \"processing\";\n        this.updateProgress(0);\n        let newImages: Array<ImageWithData> | undefined = resp.images;\n        if (!newImages || newImages.length === 0) {\n            this.state = \"select\";\n            throw new Error(\"No images returned\");\n        }\n        let completed = false;\n        let lastUpdate = moment();\n\n        const onMessage = async (msg: string) => {\n            console.log(\"inpaint onMessage\", msg);\n            const img = JSON.parse(msg) as any;\n            if (\n                img.type === NOTIFICATION_IMAGE_UPDATED &&\n                img.status === StatusEnum.Completed\n            ) {\n                lastUpdate = moment();\n                for (let i = 0; i < newImages!.length; i++) {\n                    if (newImages![i].id === img.id) {\n                        const imageData = await this.loadImageData(\n                            api,\n                            newImages![i].id,\n                            maskData!,\n                            selectionOverlay!\n                        );\n                        newImages![i].data = imageData;\n                        newImages![i].status = StatusEnum.Completed;\n                    }\n                }\n            } else if (img.status === StatusEnum.Error) {\n                for (let i = 0; i < newImages!.length; i++) {\n                    if (newImages![i].id === img.id) {\n                        newImages![i].status = StatusEnum.Error;\n                    }\n                }\n            }\n        };\n        apisocket.addMessageListener(onMessage);\n        try {\n            let startTime = moment();\n            let lastCheck = moment();\n            while (!completed) {\n                let completeCount = 0;\n                await sleep(100);\n                // poll for completion\n                for (let i = 0; i < newImages!.length; i++) {\n                    if (\n                        newImages![i].status === StatusEnum.Completed ||\n                        newImages![i].status === StatusEnum.Error\n                    ) {\n                        completeCount++;\n                        continue;\n                    }\n                }\n                this.updateProgress(completeCount / newImages!.length);\n                if (completeCount === newImages!.length) {\n                    completed = true;\n                    continue;\n                }\n\n                // fallback if sockets don't catch one\n                if (moment().diff(lastCheck, \"seconds\") > 10) {\n                    // get list of ids that aren't completed and batch get them.\n                    const pendingIds = newImages\n                        .filter(\n                            (img) =>\n                                img.status === StatusEnum.Pending ||\n                                img.status === StatusEnum.Processing\n                        )\n                        .map((img) => img.id);\n                    console.log(\"Checking pending images\", pendingIds);\n                    const updatedImagesResult = await api.batchGetImages(\n                        undefined,\n                        {\n                            ids: pendingIds,\n                        }\n                    );\n                    const updatedImages = updatedImagesResult.data.images;\n                    const byId = updatedImages!.reduce((acc, img) => {\n                        acc[img.id] = img;\n                        return acc;\n                    }, {} as Record<string, APIImage>);\n                    for (let i = 0; i < newImages!.length; i++) {\n                        if (\n                            newImages![i].status === StatusEnum.Pending ||\n                            newImages![i].status === StatusEnum.Processing\n                        ) {\n                            const updated = byId[newImages![i].id];\n                            if (updated) {\n                                newImages![i].status = updated.status;\n                                if (updated.status === StatusEnum.Completed) {\n                                    lastUpdate = moment();\n                                    const imageData = await this.loadImageData(\n                                        api,\n                                        newImages![i].id,\n                                        maskData!,\n                                        selectionOverlay!\n                                    );\n                                    newImages![i].data = imageData;\n                                }\n                            }\n                        }\n                    }\n                    lastCheck = moment();\n                }\n                // timeout of 2 minutes\n                if (\n                    (lastUpdate.isAfter(startTime) &&\n                        moment().diff(lastUpdate, \"seconds\") > 30) ||\n                    moment().diff(startTime, \"minutes\") > 2\n                ) {\n                    completed = true;\n                }\n            }\n        } finally {\n            apisocket.removeMessageListener(onMessage);\n        }\n\n        // sort images by score descending\n        newImages!.sort((a, b) => {\n            return b.score - a.score;\n        });\n        newImages = newImages!.filter((img) => {\n            return img.status === StatusEnum.Completed;\n        });\n\n        this.imageData = [];\n        for (let i = 0; i < newImages!.length; i++) {\n            if (newImages![i].data) {\n                this.imageData.push(newImages![i].data as ImageData);\n            }\n        }\n        if (this.imageData.length === 0) {\n            this.state = \"select\";\n            this.notifyError(\"No images returned\");\n            return;\n        }\n        this.renderer.setEditImage(this.imageData[0]);\n        this.selectedImageDataIndex = 0;\n        this.selectedImageData = this.imageData[0];\n        this.state = \"confirm\";\n    }\n\n    onDirty(listener: (dirty: boolean) => void): void {\n        this.dirtyListener = listener;\n    }\n\n    select(direction: \"left\" | \"right\") {\n        if (direction == \"left\") {\n            this.selectedImageDataIndex--;\n            if (this.selectedImageDataIndex < -1) {\n                this.selectedImageDataIndex = this.imageData.length - 1;\n            }\n        }\n        if (direction == \"right\") {\n            this.selectedImageDataIndex++;\n            if (this.selectedImageDataIndex >= this.imageData.length) {\n                this.selectedImageDataIndex = -1;\n            }\n        }\n        if (this.selectedImageDataIndex === -1) {\n            this.selectedImageData = null;\n        } else {\n            this.selectedImageData =\n                this.imageData[this.selectedImageDataIndex];\n        }\n        this.renderer.setEditImage(this.selectedImageData);\n    }\n\n    onSaveImage(listener: (encodedImage: string, args?: any) => void): void {\n        this.saveListener = listener;\n    }\n\n    confirm() {\n        this.renderer.commitSelection();\n\n        this.imageData = [];\n        const encodedImage = this.renderer.getEncodedImage(null);\n        if (encodedImage && this.saveListener) {\n            this.saveListener(encodedImage, {\n                phrases: [this.prompt],\n                negative_phrases: [this.negativePrompt],\n                selection_overlay: this.renderer.getSelectionOverlay(),\n            });\n        }\n        this.dirty = false;\n        if (this.selectSupported()) {\n            this.state = \"select\";\n        } else {\n            this.state = \"erase\";\n        }\n    }\n\n    destroy(): boolean {\n        if (this.dirty) {\n            if (!window.confirm(\"Discard changes?\")) {\n                return false;\n            }\n        }\n        this.renderer.setCursor(undefined);\n        this.renderer.setEditImage(null);\n        this.worker.destroy();\n        return true;\n    }\n}\n\ninterface ControlsProps {\n    api: AIBrushApi;\n    apisocket: ApiSocket;\n    image: APIImage;\n    renderer: Renderer;\n    tool: InpaintTool;\n}\n\nexport const InpaintControls: FC<ControlsProps> = ({\n    api,\n    apisocket,\n    image,\n    renderer,\n    tool,\n}) => {\n    const [count, setCount] = useState(4);\n    const [prompt, setPrompt] = useState(image.params.prompt || \"\");\n    const [negativePrompt, setNegativePrompt] = useState(\n        image.params.negative_prompt || \"\"\n    );\n    const [state, setState] = useState<InpaintToolState>(tool.state);\n    const [progress, setProgress] = useState(0);\n    const [error, setError] = useState<string | null>(null);\n    const [brushSize, setBrushSize] = useState(10);\n    const [dirty, setDirty] = useState(false);\n    const [outpaint, setoutpaint] = useState<boolean | undefined>(\n        tool.getArgs().outpaint\n    );\n    const [model, setModel] = useState(\"Deliberate Inpainting\");\n    const [selectingModel, setSelectingModel] = useState(false);\n\n    useEffect(() => {\n        tool.updateArgs({\n            brushSize,\n        });\n    }, [brushSize]);\n\n    tool.onChangeState(setState);\n    tool.onProgress(setProgress);\n    tool.onError(setError);\n    tool.onDirty(setDirty);\n\n    const onSelectModel = (model: string) => {\n        setModel(model);\n        setSelectingModel(false);\n    };\n\n    if (state === \"uploading\" || state === \"processing\") {\n        return (\n            <div style={{ marginTop: \"16px\" }}>\n                <i className=\"fa fa-spinner fa-spin\"></i>&nbsp;{\" \"}\n                {state === \"uploading\" ? \"Uploading...\" : \"Inpainting...\"}\n                <br />\n                <ProgressBar progress={progress} />\n            </div>\n        );\n    }\n    return (\n        <div\n            style={{\n                marginTop: \"16px\",\n                marginBottom: \"8px\",\n                marginLeft: \"16px\",\n            }}\n        >\n            {error && (\n                <div className=\"alert alert-danger\" role=\"alert\">\n                    {/* dismiss button */}\n                    <button\n                        type=\"button\"\n                        className=\"close\"\n                        data-dismiss=\"alert\"\n                        aria-label=\"Close\"\n                        onClick={() => setError(null)}\n                    >\n                        <span aria-hidden=\"true\">&times;</span>\n                    </button>\n                    {error}\n                </div>\n            )}\n            {state === \"select\" && (\n                <>\n                    <p>\n                        {/* info icon */}\n                        <i className=\"fa fa-info-circle\"></i>&nbsp; Move the\n                        selection rectangle to the area that you want to\n                        inpaint. For outpainting, try zooming out.\n                    </p>\n                    <div className=\"form-group\">\n                        {/* allow outpaint checkbox */}\n                        <div className=\"form-check\">\n                            <input\n                                className=\"form-check-input\"\n                                type=\"checkbox\"\n                                id=\"allowoutpaint\"\n                                checked={!!outpaint}\n                                onChange={(e) => {\n                                    setoutpaint(e.target.checked);\n                                    tool.updateArgs({\n                                        outpaint: e.target.checked,\n                                    });\n                                }}\n                            />\n                            <label\n                                className=\"form-check-label\"\n                                htmlFor=\"allowoutpaint\"\n                            >\n                                Allow outpainting\n                            </label>\n                        </div>\n                    </div>\n                </>\n            )}\n\n            {state === \"erase\" && (\n                <>\n                    <p>\n                        {/* info icon */}\n                        <i className=\"fa fa-info-circle\"></i>&nbsp; Erase the\n                        area that you want to inpaint.\n                    </p>\n                    <div className=\"form-group\">\n                        <label style={{ width: \"100%\" }}>\n                            Brush size\n                            <small\n                                className=\"form-text text-muted\"\n                                style={{ float: \"right\" }}\n                            >\n                                {brushSize}px\n                            </small>\n                        </label>\n                        <input\n                            type=\"range\"\n                            className=\"form-control-range\"\n                            min=\"1\"\n                            max=\"100\"\n                            value={brushSize}\n                            onChange={(e) =>\n                                setBrushSize(parseInt(e.target.value))\n                            }\n                        />\n                    </div>\n                </>\n            )}\n\n            {state === \"inpaint\" && (\n                <>\n                    <p>\n                        {/* info icon */}\n                        <i className=\"fa fa-info-circle\"></i>&nbsp; Confirm the\n                        parameters below and continue\n                    </p>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"prompt\">\n                            Prompt&nbsp;\n                            <ResetToDefaultIcon onClick={() => setPrompt(image.params.prompt || \"\")} />\n                        </label>\n                        <input\n                            type=\"text\"\n                            className=\"form-control\"\n                            id=\"prompt\"\n                            value={prompt}\n                            onChange={(e) => {\n                                setPrompt(e.target.value);\n                            }}\n                        />\n                        <small className=\"form-text text-muted\">\n                            Customize the text prompt here\n                        </small>\n                    </div>\n                    {/* negative prompt */}\n                    <div className=\"form-group\">\n                        <label htmlFor=\"negativeprompt\">\n                            Negative prompt&nbsp;\n                            <ResetToDefaultIcon onClick={() => setNegativePrompt(image.params.negative_prompt || \"\")} />\n                        </label>\n                        <input\n                            type=\"text\"\n                            className=\"form-control\"\n                            value={negativePrompt}\n                            onChange={(e) => {\n                                setNegativePrompt(e.target.value);\n                            }}\n                        />\n                        <small className=\"form-text text-muted\">\n                            Customize the negative text prompt here\n                        </small>\n                    </div>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"count\">Count: {count}</label>\n                        <input\n                            type=\"range\"\n                            className=\"form-control-range\"\n                            id=\"count\"\n                            min=\"1\"\n                            max=\"10\"\n                            step=\"1\"\n                            value={count}\n                            onChange={(e) => {\n                                setCount(parseInt(e.target.value));\n                            }}\n                        />\n                        <small className=\"form-text text-muted\">\n                            Number of inpaint options\n                        </small>\n                    </div>\n                    {/* select model dropdown */}\n                    {/* options: stable_diffusion_inpainting, \"Epic Diffusion\", \"Deliberate\" */}\n                    <div className=\"form-group\">\n                        <label htmlFor=\"model\">Model</label>\n                        <div>\n                            <button\n                                type=\"button\"\n                                className=\"btn btn-secondary light-button\"\n                                onClick={() => setSelectingModel(true)}\n                            >\n                                {model}&nbsp;\n                                <i className=\"fas fa-caret-down\"></i>\n                            </button>\n                        </div>\n                        <small className=\"form-text text-muted\">\n                            Select the inpaint model\n                        </small>\n                    </div>\n                    <div className=\"form-group\">\n                        <CostIndicator imagesCost={count} />\n                    </div>\n                </>\n            )}\n\n            {state === \"confirm\" && (\n                <>\n                    <p>\n                        Use the <i className=\"fa fa-arrow-left\"></i> and{\" \"}\n                        <i className=\"fa fa-arrow-right\"></i> buttons to\n                        navigate between the inpaint options\n                    </p>\n                </>\n            )}\n\n            <div className=\"form-group\">\n                {(dirty ||\n                    state === \"confirm\" ||\n                    (state == \"erase\" && tool.selectSupported()) ||\n                    state == \"inpaint\") && (\n                    <button\n                        style={{ marginRight: \"8px\" }}\n                        className=\"btn btn-primary btn-sm\"\n                        onClick={() => {\n                            tool.cancel();\n                        }}\n                    >\n                        {/* cancel icon */}\n                        <i className=\"fa fa-times\"></i>&nbsp; Revert\n                    </button>\n                )}\n\n                {state === \"confirm\" && (\n                    <>\n                        <button\n                            className=\"btn btn-primary btn-sm\"\n                            onClick={() => tool.confirm()}\n                            style={{ marginRight: \"8px\" }}\n                        >\n                            {/* save icon */}\n                            <i className=\"fa fa-save\"></i>&nbsp; Save\n                        </button>\n                    </>\n                )}\n                {state == \"select\" && (\n                    <button\n                        style={{ marginRight: \"8px\" }}\n                        type=\"button\"\n                        className=\"btn btn-primary btn-sm\"\n                        onClick={() => (tool.state = \"erase\")}\n                    >\n                        <i className=\"fa fa-eraser\"></i>&nbsp; Continue\n                    </button>\n                )}\n                {state == \"erase\" && (\n                    <button\n                        style={{ marginRight: \"8px\" }}\n                        type=\"button\"\n                        className=\"btn btn-primary btn-sm\"\n                        onClick={() => (tool.state = \"inpaint\")}\n                    >\n                        <i className=\"fa fa-paint-brush\"></i>&nbsp; Continue\n                    </button>\n                )}\n                {state === \"inpaint\" && (\n                    <button\n                        style={{ marginRight: \"8px\" }}\n                        className=\"btn btn-primary btn-sm\"\n                        onClick={() => {\n                            tool.updateArgs({\n                                count,\n                                prompt,\n                                negativePrompt,\n                            });\n                            tool.submit(api, apisocket, image, model);\n                        }}\n                    >\n                        {/* paint icon */}\n                        <i className=\"fa fa-paint-brush\"></i>&nbsp; Inpaint\n                    </button>\n                )}\n            </div>\n            <Prompt\n                when={dirty}\n                message=\"Are you sure you want to leave? Your changes will be lost.\"\n            />\n            {selectingModel && (\n                <ModelSelector\n                    api={api}\n                    onCancel={() => setSelectingModel(false)}\n                    onSelectModel={onSelectModel}\n                    initialSelectedModel={model}\n                    inpainting={true}\n                />\n            )}\n        </div>\n    );\n};\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * AIBrush API\n * Orchestration backend for AI Brush\n *\n * The version of the OpenAPI document: 1.0.0\n * Contact: admin@aibrush.art\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport { Configuration } from './configuration';\nimport globalAxios, { AxiosPromise, AxiosInstance } from 'axios';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';\n\n/**\n * \n * @export\n * @interface AddMetricItem\n */\nexport interface AddMetricItem {\n    /**\n     * \n     * @type {string}\n     * @memberof AddMetricItem\n     */\n    name: string;\n    /**\n     * \n     * @type {number}\n     * @memberof AddMetricItem\n     */\n    value: number;\n    /**\n     * \n     * @type {string}\n     * @memberof AddMetricItem\n     */\n    type: AddMetricItemTypeEnum;\n    /**\n     * \n     * @type {Array<MetricAttribute>}\n     * @memberof AddMetricItem\n     */\n    attributes: Array<MetricAttribute>;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum AddMetricItemTypeEnum {\n    Gauge = 'gauge',\n    Count = 'count'\n}\n\n/**\n * \n * @export\n * @interface AddMetricsInput\n */\nexport interface AddMetricsInput {\n    /**\n     * \n     * @type {Array<AddMetricItem>}\n     * @memberof AddMetricsInput\n     */\n    metrics: Array<AddMetricItem>;\n}\n/**\n * \n * @export\n * @interface AssetsUrl\n */\nexport interface AssetsUrl {\n    /**\n     * \n     * @type {string}\n     * @memberof AssetsUrl\n     */\n    assets_url: string;\n}\n/**\n * \n * @export\n * @interface BatchGetImagesInput\n */\nexport interface BatchGetImagesInput {\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof BatchGetImagesInput\n     */\n    ids: Array<string>;\n}\n/**\n * \n * @export\n * @interface CreateDepositCodeInput\n */\nexport interface CreateDepositCodeInput {\n    /**\n     * \n     * @type {number}\n     * @memberof CreateDepositCodeInput\n     */\n    amount: number;\n}\n/**\n * \n * @export\n * @interface CreateImageInput\n */\nexport interface CreateImageInput {\n    /**\n     * \n     * @type {StatusEnum}\n     * @memberof CreateImageInput\n     */\n    status?: StatusEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateImageInput\n     */\n    label?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateImageInput\n     */\n    parent?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateImageInput\n     */\n    encoded_image?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateImageInput\n     */\n    encoded_mask?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateImageInput\n     */\n    tmp_image_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateImageInput\n     */\n    tmp_jpg_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateImageInput\n     */\n    tmp_mask_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateImageInput\n     */\n    tmp_thumbnail_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateImageInput\n     */\n    model: string;\n    /**\n     * \n     * @type {ImageParams}\n     * @memberof CreateImageInput\n     */\n    params: ImageParams;\n    /**\n     * \n     * @type {number}\n     * @memberof CreateImageInput\n     */\n    count: number;\n    /**\n     * \n     * @type {boolean}\n     * @memberof CreateImageInput\n     */\n    nsfw?: boolean;\n    /**\n     * \n     * @type {boolean}\n     * @memberof CreateImageInput\n     */\n    temporary?: boolean;\n}\n/**\n * \n * @export\n * @interface CreateStripeSessionInput\n */\nexport interface CreateStripeSessionInput {\n    /**\n     * \n     * @type {string}\n     * @memberof CreateStripeSessionInput\n     */\n    product_id: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateStripeSessionInput\n     */\n    success_url: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateStripeSessionInput\n     */\n    cancel_url: string;\n}\n/**\n * \n * @export\n * @interface Credits\n */\nexport interface Credits {\n    /**\n     * \n     * @type {number}\n     * @memberof Credits\n     */\n    free_credits: number;\n    /**\n     * \n     * @type {number}\n     * @memberof Credits\n     */\n    paid_credits: number;\n}\n/**\n * \n * @export\n * @interface DepositCode\n */\nexport interface DepositCode {\n    /**\n     * \n     * @type {string}\n     * @memberof DepositCode\n     */\n    code: string;\n    /**\n     * \n     * @type {number}\n     * @memberof DepositCode\n     */\n    amount: number;\n}\n/**\n * \n * @export\n * @interface DepositRequest\n */\nexport interface DepositRequest {\n    /**\n     * Amount in credits\n     * @type {number}\n     * @memberof DepositRequest\n     */\n    amount: number;\n}\n/**\n * \n * @export\n * @interface DiscordLogin\n */\nexport interface DiscordLogin {\n    /**\n     * \n     * @type {string}\n     * @memberof DiscordLogin\n     */\n    code: string;\n}\n/**\n * \n * @export\n * @interface FeatureList\n */\nexport interface FeatureList {\n    /**\n     * \n     * @type {string}\n     * @memberof FeatureList\n     */\n    terms_uri?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof FeatureList\n     */\n    privacy_uri?: string;\n}\n/**\n * \n * @export\n * @interface GlobalSettings\n */\nexport interface GlobalSettings {\n    /**\n     * \n     * @type {string}\n     * @memberof GlobalSettings\n     */\n    settings_key: string;\n    /**\n     * \n     * @type {object}\n     * @memberof GlobalSettings\n     */\n    settings_json: object;\n}\n/**\n * \n * @export\n * @interface Healthcheck\n */\nexport interface Healthcheck {\n    /**\n     * \n     * @type {string}\n     * @memberof Healthcheck\n     */\n    status?: HealthcheckStatusEnum;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum HealthcheckStatusEnum {\n    Ok = 'ok'\n}\n\n/**\n * \n * @export\n * @interface Image\n */\nexport interface Image {\n    /**\n     * \n     * @type {string}\n     * @memberof Image\n     */\n    id: string;\n    /**\n     * \n     * @type {number}\n     * @memberof Image\n     */\n    created_at: number;\n    /**\n     * \n     * @type {string}\n     * @memberof Image\n     */\n    created_by: string;\n    /**\n     * \n     * @type {number}\n     * @memberof Image\n     */\n    updated_at: number;\n    /**\n     * \n     * @type {ImageParams}\n     * @memberof Image\n     */\n    params: ImageParams;\n    /**\n     * \n     * @type {string}\n     * @memberof Image\n     */\n    label: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Image\n     */\n    parent: string;\n    /**\n     * \n     * @type {number}\n     * @memberof Image\n     */\n    score: number;\n    /**\n     * \n     * @type {number}\n     * @memberof Image\n     */\n    negative_score: number;\n    /**\n     * \n     * @type {StatusEnum}\n     * @memberof Image\n     */\n    status: StatusEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof Image\n     */\n    model: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof Image\n     */\n    nsfw: boolean;\n    /**\n     * \n     * @type {boolean}\n     * @memberof Image\n     */\n    temporary: boolean;\n    /**\n     * \n     * @type {number}\n     * @memberof Image\n     */\n    deleted_at?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof Image\n     */\n    error?: string;\n}\n/**\n * \n * @export\n * @interface ImageList\n */\nexport interface ImageList {\n    /**\n     * \n     * @type {Array<Image>}\n     * @memberof ImageList\n     */\n    images?: Array<Image>;\n}\n/**\n * \n * @export\n * @interface ImageParams\n */\nexport interface ImageParams {\n    /**\n     * \n     * @type {string}\n     * @memberof ImageParams\n     */\n    prompt?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof ImageParams\n     */\n    steps?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof ImageParams\n     */\n    negative_prompt?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof ImageParams\n     */\n    width?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof ImageParams\n     */\n    height?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof ImageParams\n     */\n    denoising_strength?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof ImageParams\n     */\n    cfg_scale?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof ImageParams\n     */\n    seed?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ImageParams\n     */\n    controlnet_type?: ImageParamsControlnetTypeEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof ImageParams\n     */\n    augmentation?: ImageParamsAugmentationEnum;\n    /**\n     * \n     * @type {Array<LoraConfig>}\n     * @memberof ImageParams\n     */\n    loras?: Array<LoraConfig>;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum ImageParamsControlnetTypeEnum {\n    Canny = 'canny',\n    Hed = 'hed',\n    Depth = 'depth',\n    Normal = 'normal',\n    Openpose = 'openpose',\n    Seg = 'seg',\n    Scribble = 'scribble',\n    Fakescribbles = 'fakescribbles',\n    Hough = 'hough'\n}\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum ImageParamsAugmentationEnum {\n    FaceRestore = 'face_restore',\n    RemoveBackground = 'remove_background',\n    Upscale = 'upscale'\n}\n\n/**\n * \n * @export\n * @interface ImageUrls\n */\nexport interface ImageUrls {\n    /**\n     * \n     * @type {string}\n     * @memberof ImageUrls\n     */\n    init_image_url?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ImageUrls\n     */\n    image_url?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ImageUrls\n     */\n    mask_url?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ImageUrls\n     */\n    thumbnail_url?: string;\n}\n/**\n * \n * @export\n * @interface InviteCode\n */\nexport interface InviteCode {\n    /**\n     * \n     * @type {string}\n     * @memberof InviteCode\n     */\n    id?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof InviteCode\n     */\n    created_at?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof InviteCode\n     */\n    created_by?: string;\n}\n/**\n * \n * @export\n * @interface IsAdminResponse\n */\nexport interface IsAdminResponse {\n    /**\n     * \n     * @type {boolean}\n     * @memberof IsAdminResponse\n     */\n    is_admin?: boolean;\n}\n/**\n * \n * @export\n * @interface LoginInput\n */\nexport interface LoginInput {\n    /**\n     * \n     * @type {string}\n     * @memberof LoginInput\n     */\n    email?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof LoginInput\n     */\n    invite_code?: string;\n}\n/**\n * \n * @export\n * @interface LoginResult\n */\nexport interface LoginResult {\n    /**\n     * \n     * @type {string}\n     * @memberof LoginResult\n     */\n    accessToken?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof LoginResult\n     */\n    refreshToken?: string;\n}\n/**\n * \n * @export\n * @interface LoraConfig\n */\nexport interface LoraConfig {\n    /**\n     * \n     * @type {string}\n     * @memberof LoraConfig\n     */\n    name: string;\n    /**\n     * \n     * @type {number}\n     * @memberof LoraConfig\n     */\n    strength: number;\n}\n/**\n * \n * @export\n * @interface MetricAttribute\n */\nexport interface MetricAttribute {\n    /**\n     * \n     * @type {string}\n     * @memberof MetricAttribute\n     */\n    name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof MetricAttribute\n     */\n    value?: string;\n}\n/**\n * \n * @export\n * @interface Order\n */\nexport interface Order {\n    /**\n     * \n     * @type {string}\n     * @memberof Order\n     */\n    id: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Order\n     */\n    created_by: string;\n    /**\n     * \n     * @type {number}\n     * @memberof Order\n     */\n    created_at: number;\n    /**\n     * \n     * @type {number}\n     * @memberof Order\n     */\n    ends_at: number;\n    /**\n     * \n     * @type {boolean}\n     * @memberof Order\n     */\n    is_active: boolean;\n    /**\n     * \n     * @type {number}\n     * @memberof Order\n     */\n    gpu_count: number;\n    /**\n     * \n     * @type {number}\n     * @memberof Order\n     */\n    amount_paid_cents: number;\n}\n/**\n * \n * @export\n * @interface RefreshLoginInput\n */\nexport interface RefreshLoginInput {\n    /**\n     * \n     * @type {string}\n     * @memberof RefreshLoginInput\n     */\n    refreshToken?: string;\n}\n/**\n * \n * @export\n * @interface StableDiffusionModel\n */\nexport interface StableDiffusionModel {\n    /**\n     * The name of the model\n     * @type {string}\n     * @memberof StableDiffusionModel\n     */\n    name: string;\n    /**\n     * The baseline model used\n     * @type {string}\n     * @memberof StableDiffusionModel\n     */\n    baseline: string;\n    /**\n     * The type of the model (e.g., ckpt)\n     * @type {string}\n     * @memberof StableDiffusionModel\n     */\n    type: string;\n    /**\n     * A short description of the model\n     * @type {string}\n     * @memberof StableDiffusionModel\n     */\n    description: string;\n    /**\n     * Tags associated with the model\n     * @type {Array<string>}\n     * @memberof StableDiffusionModel\n     */\n    tags: Array<string>;\n    /**\n     * A list of URIs for showcase images\n     * @type {Array<string>}\n     * @memberof StableDiffusionModel\n     */\n    showcases: Array<string>;\n    /**\n     * The version of the model\n     * @type {string}\n     * @memberof StableDiffusionModel\n     */\n    version: string;\n    /**\n     * The style of the model (e.g., anime, furry)\n     * @type {string}\n     * @memberof StableDiffusionModel\n     */\n    style: string;\n    /**\n     * Whether the model is Not Safe For Work (NSFW)\n     * @type {boolean}\n     * @memberof StableDiffusionModel\n     */\n    nsfw: boolean;\n    /**\n     * Whether to download all model files\n     * @type {boolean}\n     * @memberof StableDiffusionModel\n     */\n    download_all: boolean;\n    /**\n     * Configuration information for the model\n     * @type {object}\n     * @memberof StableDiffusionModel\n     */\n    config: object;\n    /**\n     * Whether the model is available for use\n     * @type {boolean}\n     * @memberof StableDiffusionModel\n     */\n    available: boolean;\n    /**\n     * Whether the model is an inpainting model\n     * @type {boolean}\n     * @memberof StableDiffusionModel\n     */\n    inpainting: boolean;\n}\n/**\n * \n * @export\n * @enum {string}\n */\n\nexport enum StatusEnum {\n    Pending = 'pending',\n    Processing = 'processing',\n    Completed = 'completed',\n    Saved = 'saved',\n    Error = 'error',\n    Deleted = 'deleted'\n}\n\n/**\n * \n * @export\n * @interface StripeSession\n */\nexport interface StripeSession {\n    /**\n     * \n     * @type {string}\n     * @memberof StripeSession\n     */\n    session_id: string;\n}\n/**\n * \n * @export\n * @interface TemporaryImage\n */\nexport interface TemporaryImage {\n    /**\n     * \n     * @type {string}\n     * @memberof TemporaryImage\n     */\n    id: string;\n    /**\n     * \n     * @type {string}\n     * @memberof TemporaryImage\n     */\n    upload_url: string;\n}\n/**\n * \n * @export\n * @interface UpdateGlobalSettingsRequest\n */\nexport interface UpdateGlobalSettingsRequest {\n    /**\n     * \n     * @type {object}\n     * @memberof UpdateGlobalSettingsRequest\n     */\n    settings_json: object;\n}\n/**\n * \n * @export\n * @interface UpdateImageInput\n */\nexport interface UpdateImageInput {\n    /**\n     * \n     * @type {string}\n     * @memberof UpdateImageInput\n     */\n    label?: string;\n    /**\n     * \n     * @type {StatusEnum}\n     * @memberof UpdateImageInput\n     */\n    status?: StatusEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof UpdateImageInput\n     */\n    encoded_image?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof UpdateImageInput\n     */\n    encoded_npy?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof UpdateImageInput\n     */\n    score?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof UpdateImageInput\n     */\n    negative_score?: number;\n    /**\n     * \n     * @type {boolean}\n     * @memberof UpdateImageInput\n     */\n    nsfw?: boolean;\n    /**\n     * \n     * @type {number}\n     * @memberof UpdateImageInput\n     */\n    deleted_at?: number | null;\n    /**\n     * \n     * @type {string}\n     * @memberof UpdateImageInput\n     */\n    error?: string;\n}\n/**\n * \n * @export\n * @interface UpsertWorkerConfigInput\n */\nexport interface UpsertWorkerConfigInput {\n    /**\n     * \n     * @type {Array<WorkerGpuConfig>}\n     * @memberof UpsertWorkerConfigInput\n     */\n    gpu_configs?: Array<WorkerGpuConfig>;\n}\n/**\n * \n * @export\n * @interface UpsertWorkerInput\n */\nexport interface UpsertWorkerInput {\n    /**\n     * \n     * @type {string}\n     * @memberof UpsertWorkerInput\n     */\n    display_name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof UpsertWorkerInput\n     */\n    status?: UpsertWorkerInputStatusEnum;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum UpsertWorkerInputStatusEnum {\n    Idle = 'idle',\n    Active = 'active'\n}\n\n/**\n * \n * @export\n * @interface User\n */\nexport interface User {\n    /**\n     * \n     * @type {string}\n     * @memberof User\n     */\n    id?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof User\n     */\n    active?: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof User\n     */\n    customer_id?: string;\n}\n/**\n * \n * @export\n * @interface VerifyLoginInput\n */\nexport interface VerifyLoginInput {\n    /**\n     * \n     * @type {string}\n     * @memberof VerifyLoginInput\n     */\n    email?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof VerifyLoginInput\n     */\n    code?: string;\n}\n/**\n * \n * @export\n * @interface Worker\n */\nexport interface Worker {\n    /**\n     * \n     * @type {string}\n     * @memberof Worker\n     */\n    id: string;\n    /**\n     * \n     * @type {number}\n     * @memberof Worker\n     */\n    created_at: number;\n    /**\n     * \n     * @type {string}\n     * @memberof Worker\n     */\n    display_name: string;\n    /**\n     * \n     * @type {number}\n     * @memberof Worker\n     */\n    last_ping?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof Worker\n     */\n    status?: WorkerStatusEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof Worker\n     */\n    login_code?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Worker\n     */\n    engine?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof Worker\n     */\n    num_gpus?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof Worker\n     */\n    cloud_instance_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Worker\n     */\n    gpu_type?: string;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum WorkerStatusEnum {\n    Idle = 'idle',\n    Active = 'active'\n}\n\n/**\n * \n * @export\n * @interface WorkerConfig\n */\nexport interface WorkerConfig {\n    /**\n     * \n     * @type {string}\n     * @memberof WorkerConfig\n     */\n    worker_id: string;\n    /**\n     * \n     * @type {Array<WorkerGpuConfig>}\n     * @memberof WorkerConfig\n     */\n    gpu_configs?: Array<WorkerGpuConfig>;\n}\n/**\n * \n * @export\n * @interface WorkerGpuConfig\n */\nexport interface WorkerGpuConfig {\n    /**\n     * \n     * @type {number}\n     * @memberof WorkerGpuConfig\n     */\n    gpu_num: number;\n    /**\n     * \n     * @type {string}\n     * @memberof WorkerGpuConfig\n     */\n    model: string;\n}\n/**\n * \n * @export\n * @interface WorkerList\n */\nexport interface WorkerList {\n    /**\n     * \n     * @type {Array<Worker>}\n     * @memberof WorkerList\n     */\n    workers?: Array<Worker>;\n}\n/**\n * \n * @export\n * @interface WorkerLoginCode\n */\nexport interface WorkerLoginCode {\n    /**\n     * \n     * @type {string}\n     * @memberof WorkerLoginCode\n     */\n    login_code: string;\n}\n\n/**\n * AIBrushApi - axios parameter creator\n * @export\n */\nexport const AIBrushApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * Add Metrics\n         * @param {AddMetricsInput} [addMetricsInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        addMetrics: async (addMetricsInput?: AddMetricsInput, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/metrics`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(addMetricsInput, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get a list of saved images by id\n         * @param {string} [fields] Comma-separated list of fields to include in the response images. For example: \\&quot;id,params,created_at\\&quot; \n         * @param {BatchGetImagesInput} [batchGetImagesInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        batchGetImages: async (fields?: string, batchGetImagesInput?: BatchGetImagesInput, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/batch-get-images`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (fields !== undefined) {\n                localVarQueryParameter['fields'] = fields;\n            }\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(batchGetImagesInput, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Create a new deposit code\n         * @param {CreateDepositCodeInput} [createDepositCodeInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createDepositCode: async (createDepositCodeInput?: CreateDepositCodeInput, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/deposit-codes`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(createDepositCodeInput, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Create a new image\n         * @param {CreateImageInput} [createImageInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createImage: async (createImageInput?: CreateImageInput, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/images`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(createImageInput, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Create a new invite code\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createInviteCode: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/invite-codes`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Create a new Stripe session\n         * @param {CreateStripeSessionInput} [createStripeSessionInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createStripeSession: async (createStripeSessionInput?: CreateStripeSessionInput, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/stripe-sessions`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(createStripeSessionInput, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Create a new temporary image\n         * @param {string} format \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createTemporaryImage: async (format: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'format' is not null or undefined\n            assertParamExists('createTemporaryImage', 'format', format)\n            const localVarPath = `/api/temporary-images`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (format !== undefined) {\n                localVarQueryParameter['format'] = format;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Delete a saved image\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteImage: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('deleteImage', 'id', id)\n            const localVarPath = `/api/images/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Log in with Discord\n         * @param {DiscordLogin} [discordLogin] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        discordLogin: async (discordLogin?: DiscordLogin, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/discord-login`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(discordLogin, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get the assets url\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getAssetsUrl: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/assets-url`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get the user\\'s credit balance\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getCredits: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/credits`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get the features\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getFeatures: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/features`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get the global settings\n         * @param {string} key \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getGlobalSettings: async (key: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'key' is not null or undefined\n            assertParamExists('getGlobalSettings', 'key', key)\n            const localVarPath = `/api/global-settings/{key}`\n                .replace(`{${\"key\"}}`, encodeURIComponent(String(key)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get a saved image by id\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getImage: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('getImage', 'id', id)\n            const localVarPath = `/api/images/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get the binary image data\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getImageData: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('getImageData', 'id', id)\n            const localVarPath = `/api/images/{id}.image.png`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get download urls for image assets\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getImageDownloadUrls: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('getImageDownloadUrls', 'id', id)\n            const localVarPath = `/api/images/{id}/download-urls`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get upload urls for image assets\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getImageUploadUrls: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('getImageUploadUrls', 'id', id)\n            const localVarPath = `/api/images/{id}/upload-urls`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get the binary mask data\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getMaskData: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('getMaskData', 'id', id)\n            const localVarPath = `/api/images/{id}.mask.png`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Get available models\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getModels: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/stable-diffusion-models`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get the binary thumbnail data\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getThumbnailData: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('getThumbnailData', 'id', id)\n            const localVarPath = `/api/images/{id}.thumbnail.png`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Healthcheck\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        healthcheck: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/healthcheck`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Check if the user is admin\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        isAdmin: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/is-admin`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get a list of saved images\n         * @param {number} [cursor] \n         * @param {string} [filter] \n         * @param {number} [limit] \n         * @param {'asc' | 'desc'} [direction] \n         * @param {string} [fields] Comma-separated list of fields to include in the response images. For example: \\&quot;id,params,created_at\\&quot; \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listImages: async (cursor?: number, filter?: string, limit?: number, direction?: 'asc' | 'desc', fields?: string, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/images`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (cursor !== undefined) {\n                localVarQueryParameter['cursor'] = cursor;\n            }\n\n            if (filter !== undefined) {\n                localVarQueryParameter['filter'] = filter;\n            }\n\n            if (limit !== undefined) {\n                localVarQueryParameter['limit'] = limit;\n            }\n\n            if (direction !== undefined) {\n                localVarQueryParameter['direction'] = direction;\n            }\n\n            if (fields !== undefined) {\n                localVarQueryParameter['fields'] = fields;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Login by email\n         * @param {LoginInput} [loginInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        login: async (loginInput?: LoginInput, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/auth/login`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(loginInput, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Redeem a deposit code\n         * @param {string} code \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        redeemDepositCode: async (code: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'code' is not null or undefined\n            assertParamExists('redeemDepositCode', 'code', code)\n            const localVarPath = `/api/deposit-codes/{code}`\n                .replace(`{${\"code\"}}`, encodeURIComponent(String(code)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Refresh Login code\n         * @param {RefreshLoginInput} [refreshLoginInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        refresh: async (refreshLoginInput?: RefreshLoginInput, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/auth/refresh`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(refreshLoginInput, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Update the global settings\n         * @param {string} key \n         * @param {UpdateGlobalSettingsRequest} [updateGlobalSettingsRequest] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateGlobalSettings: async (key: string, updateGlobalSettingsRequest?: UpdateGlobalSettingsRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'key' is not null or undefined\n            assertParamExists('updateGlobalSettings', 'key', key)\n            const localVarPath = `/api/global-settings/{key}`\n                .replace(`{${\"key\"}}`, encodeURIComponent(String(key)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(updateGlobalSettingsRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Update a saved image\n         * @param {string} id \n         * @param {UpdateImageInput} [updateImageInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateImage: async (id: string, updateImageInput?: UpdateImageInput, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('updateImage', 'id', id)\n            const localVarPath = `/api/images/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(updateImageInput, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Upload the binary image data\n         * @param {string} id \n         * @param {any} [body] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        uploadImageData: async (id: string, body?: any, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('uploadImageData', 'id', id)\n            const localVarPath = `/api/images/{id}.image.png`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'image/png';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Upload the binary thumbnail data\n         * @param {string} id \n         * @param {any} [body] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        uploadThumbnailData: async (id: string, body?: any, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('uploadThumbnailData', 'id', id)\n            const localVarPath = `/api/images/{id}.thumbnail.png`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'image/png';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Verify Login code\n         * @param {VerifyLoginInput} [verifyLoginInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        verify: async (verifyLoginInput?: VerifyLoginInput, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/auth/verify`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(verifyLoginInput, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * AIBrushApi - functional programming interface\n * @export\n */\nexport const AIBrushApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = AIBrushApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * Add Metrics\n         * @param {AddMetricsInput} [addMetricsInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async addMetrics(addMetricsInput?: AddMetricsInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.addMetrics(addMetricsInput, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get a list of saved images by id\n         * @param {string} [fields] Comma-separated list of fields to include in the response images. For example: \\&quot;id,params,created_at\\&quot; \n         * @param {BatchGetImagesInput} [batchGetImagesInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async batchGetImages(fields?: string, batchGetImagesInput?: BatchGetImagesInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImageList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.batchGetImages(fields, batchGetImagesInput, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Create a new deposit code\n         * @param {CreateDepositCodeInput} [createDepositCodeInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createDepositCode(createDepositCodeInput?: CreateDepositCodeInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DepositCode>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.createDepositCode(createDepositCodeInput, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Create a new image\n         * @param {CreateImageInput} [createImageInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createImage(createImageInput?: CreateImageInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImageList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.createImage(createImageInput, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Create a new invite code\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createInviteCode(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InviteCode>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.createInviteCode(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Create a new Stripe session\n         * @param {CreateStripeSessionInput} [createStripeSessionInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createStripeSession(createStripeSessionInput?: CreateStripeSessionInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StripeSession>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.createStripeSession(createStripeSessionInput, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Create a new temporary image\n         * @param {string} format \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createTemporaryImage(format: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TemporaryImage>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.createTemporaryImage(format, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Delete a saved image\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async deleteImage(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteImage(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Log in with Discord\n         * @param {DiscordLogin} [discordLogin] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async discordLogin(discordLogin?: DiscordLogin, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginResult>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.discordLogin(discordLogin, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get the assets url\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getAssetsUrl(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssetsUrl>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getAssetsUrl(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get the user\\'s credit balance\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getCredits(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Credits>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getCredits(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get the features\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getFeatures(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeatureList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getFeatures(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get the global settings\n         * @param {string} key \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getGlobalSettings(key: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GlobalSettings>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getGlobalSettings(key, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get a saved image by id\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getImage(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Image>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getImage(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get the binary image data\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getImageData(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getImageData(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get download urls for image assets\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getImageDownloadUrls(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImageUrls>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getImageDownloadUrls(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get upload urls for image assets\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getImageUploadUrls(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImageUrls>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getImageUploadUrls(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get the binary mask data\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getMaskData(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getMaskData(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Get available models\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getModels(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: StableDiffusionModel; }>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getModels(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get the binary thumbnail data\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getThumbnailData(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getThumbnailData(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Healthcheck\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async healthcheck(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Healthcheck>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.healthcheck(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Check if the user is admin\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async isAdmin(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IsAdminResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.isAdmin(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get a list of saved images\n         * @param {number} [cursor] \n         * @param {string} [filter] \n         * @param {number} [limit] \n         * @param {'asc' | 'desc'} [direction] \n         * @param {string} [fields] Comma-separated list of fields to include in the response images. For example: \\&quot;id,params,created_at\\&quot; \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listImages(cursor?: number, filter?: string, limit?: number, direction?: 'asc' | 'desc', fields?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImageList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.listImages(cursor, filter, limit, direction, fields, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Login by email\n         * @param {LoginInput} [loginInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async login(loginInput?: LoginInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.login(loginInput, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Redeem a deposit code\n         * @param {string} code \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async redeemDepositCode(code: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.redeemDepositCode(code, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Refresh Login code\n         * @param {RefreshLoginInput} [refreshLoginInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async refresh(refreshLoginInput?: RefreshLoginInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginResult>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.refresh(refreshLoginInput, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Update the global settings\n         * @param {string} key \n         * @param {UpdateGlobalSettingsRequest} [updateGlobalSettingsRequest] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async updateGlobalSettings(key: string, updateGlobalSettingsRequest?: UpdateGlobalSettingsRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GlobalSettings>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.updateGlobalSettings(key, updateGlobalSettingsRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Update a saved image\n         * @param {string} id \n         * @param {UpdateImageInput} [updateImageInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async updateImage(id: string, updateImageInput?: UpdateImageInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Image>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.updateImage(id, updateImageInput, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Upload the binary image data\n         * @param {string} id \n         * @param {any} [body] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async uploadImageData(id: string, body?: any, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadImageData(id, body, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Upload the binary thumbnail data\n         * @param {string} id \n         * @param {any} [body] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async uploadThumbnailData(id: string, body?: any, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadThumbnailData(id, body, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Verify Login code\n         * @param {VerifyLoginInput} [verifyLoginInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async verify(verifyLoginInput?: VerifyLoginInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginResult>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.verify(verifyLoginInput, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n    }\n};\n\n/**\n * AIBrushApi - factory interface\n * @export\n */\nexport const AIBrushApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = AIBrushApiFp(configuration)\n    return {\n        /**\n         * Add Metrics\n         * @param {AddMetricsInput} [addMetricsInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        addMetrics(addMetricsInput?: AddMetricsInput, options?: any): AxiosPromise<void> {\n            return localVarFp.addMetrics(addMetricsInput, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get a list of saved images by id\n         * @param {string} [fields] Comma-separated list of fields to include in the response images. For example: \\&quot;id,params,created_at\\&quot; \n         * @param {BatchGetImagesInput} [batchGetImagesInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        batchGetImages(fields?: string, batchGetImagesInput?: BatchGetImagesInput, options?: any): AxiosPromise<ImageList> {\n            return localVarFp.batchGetImages(fields, batchGetImagesInput, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Create a new deposit code\n         * @param {CreateDepositCodeInput} [createDepositCodeInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createDepositCode(createDepositCodeInput?: CreateDepositCodeInput, options?: any): AxiosPromise<DepositCode> {\n            return localVarFp.createDepositCode(createDepositCodeInput, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Create a new image\n         * @param {CreateImageInput} [createImageInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createImage(createImageInput?: CreateImageInput, options?: any): AxiosPromise<ImageList> {\n            return localVarFp.createImage(createImageInput, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Create a new invite code\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createInviteCode(options?: any): AxiosPromise<InviteCode> {\n            return localVarFp.createInviteCode(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Create a new Stripe session\n         * @param {CreateStripeSessionInput} [createStripeSessionInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createStripeSession(createStripeSessionInput?: CreateStripeSessionInput, options?: any): AxiosPromise<StripeSession> {\n            return localVarFp.createStripeSession(createStripeSessionInput, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Create a new temporary image\n         * @param {string} format \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createTemporaryImage(format: string, options?: any): AxiosPromise<TemporaryImage> {\n            return localVarFp.createTemporaryImage(format, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Delete a saved image\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteImage(id: string, options?: any): AxiosPromise<void> {\n            return localVarFp.deleteImage(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Log in with Discord\n         * @param {DiscordLogin} [discordLogin] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        discordLogin(discordLogin?: DiscordLogin, options?: any): AxiosPromise<LoginResult> {\n            return localVarFp.discordLogin(discordLogin, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get the assets url\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getAssetsUrl(options?: any): AxiosPromise<AssetsUrl> {\n            return localVarFp.getAssetsUrl(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get the user\\'s credit balance\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getCredits(options?: any): AxiosPromise<Credits> {\n            return localVarFp.getCredits(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get the features\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getFeatures(options?: any): AxiosPromise<FeatureList> {\n            return localVarFp.getFeatures(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get the global settings\n         * @param {string} key \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getGlobalSettings(key: string, options?: any): AxiosPromise<GlobalSettings> {\n            return localVarFp.getGlobalSettings(key, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get a saved image by id\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getImage(id: string, options?: any): AxiosPromise<Image> {\n            return localVarFp.getImage(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get the binary image data\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getImageData(id: string, options?: any): AxiosPromise<any> {\n            return localVarFp.getImageData(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get download urls for image assets\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getImageDownloadUrls(id: string, options?: any): AxiosPromise<ImageUrls> {\n            return localVarFp.getImageDownloadUrls(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get upload urls for image assets\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getImageUploadUrls(id: string, options?: any): AxiosPromise<ImageUrls> {\n            return localVarFp.getImageUploadUrls(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get the binary mask data\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getMaskData(id: string, options?: any): AxiosPromise<any> {\n            return localVarFp.getMaskData(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Get available models\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getModels(options?: any): AxiosPromise<{ [key: string]: StableDiffusionModel; }> {\n            return localVarFp.getModels(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get the binary thumbnail data\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getThumbnailData(id: string, options?: any): AxiosPromise<any> {\n            return localVarFp.getThumbnailData(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Healthcheck\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        healthcheck(options?: any): AxiosPromise<Healthcheck> {\n            return localVarFp.healthcheck(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Check if the user is admin\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        isAdmin(options?: any): AxiosPromise<IsAdminResponse> {\n            return localVarFp.isAdmin(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get a list of saved images\n         * @param {number} [cursor] \n         * @param {string} [filter] \n         * @param {number} [limit] \n         * @param {'asc' | 'desc'} [direction] \n         * @param {string} [fields] Comma-separated list of fields to include in the response images. For example: \\&quot;id,params,created_at\\&quot; \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listImages(cursor?: number, filter?: string, limit?: number, direction?: 'asc' | 'desc', fields?: string, options?: any): AxiosPromise<ImageList> {\n            return localVarFp.listImages(cursor, filter, limit, direction, fields, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Login by email\n         * @param {LoginInput} [loginInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        login(loginInput?: LoginInput, options?: any): AxiosPromise<void> {\n            return localVarFp.login(loginInput, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Redeem a deposit code\n         * @param {string} code \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        redeemDepositCode(code: string, options?: any): AxiosPromise<void> {\n            return localVarFp.redeemDepositCode(code, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Refresh Login code\n         * @param {RefreshLoginInput} [refreshLoginInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        refresh(refreshLoginInput?: RefreshLoginInput, options?: any): AxiosPromise<LoginResult> {\n            return localVarFp.refresh(refreshLoginInput, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Update the global settings\n         * @param {string} key \n         * @param {UpdateGlobalSettingsRequest} [updateGlobalSettingsRequest] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateGlobalSettings(key: string, updateGlobalSettingsRequest?: UpdateGlobalSettingsRequest, options?: any): AxiosPromise<GlobalSettings> {\n            return localVarFp.updateGlobalSettings(key, updateGlobalSettingsRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Update a saved image\n         * @param {string} id \n         * @param {UpdateImageInput} [updateImageInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateImage(id: string, updateImageInput?: UpdateImageInput, options?: any): AxiosPromise<Image> {\n            return localVarFp.updateImage(id, updateImageInput, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Upload the binary image data\n         * @param {string} id \n         * @param {any} [body] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        uploadImageData(id: string, body?: any, options?: any): AxiosPromise<void> {\n            return localVarFp.uploadImageData(id, body, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Upload the binary thumbnail data\n         * @param {string} id \n         * @param {any} [body] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        uploadThumbnailData(id: string, body?: any, options?: any): AxiosPromise<void> {\n            return localVarFp.uploadThumbnailData(id, body, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Verify Login code\n         * @param {VerifyLoginInput} [verifyLoginInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        verify(verifyLoginInput?: VerifyLoginInput, options?: any): AxiosPromise<LoginResult> {\n            return localVarFp.verify(verifyLoginInput, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * AIBrushApi - object-oriented interface\n * @export\n * @class AIBrushApi\n * @extends {BaseAPI}\n */\nexport class AIBrushApi extends BaseAPI {\n    /**\n     * Add Metrics\n     * @param {AddMetricsInput} [addMetricsInput] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public addMetrics(addMetricsInput?: AddMetricsInput, options?: any) {\n        return AIBrushApiFp(this.configuration).addMetrics(addMetricsInput, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get a list of saved images by id\n     * @param {string} [fields] Comma-separated list of fields to include in the response images. For example: \\&quot;id,params,created_at\\&quot; \n     * @param {BatchGetImagesInput} [batchGetImagesInput] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public batchGetImages(fields?: string, batchGetImagesInput?: BatchGetImagesInput, options?: any) {\n        return AIBrushApiFp(this.configuration).batchGetImages(fields, batchGetImagesInput, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Create a new deposit code\n     * @param {CreateDepositCodeInput} [createDepositCodeInput] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public createDepositCode(createDepositCodeInput?: CreateDepositCodeInput, options?: any) {\n        return AIBrushApiFp(this.configuration).createDepositCode(createDepositCodeInput, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Create a new image\n     * @param {CreateImageInput} [createImageInput] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public createImage(createImageInput?: CreateImageInput, options?: any) {\n        return AIBrushApiFp(this.configuration).createImage(createImageInput, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Create a new invite code\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public createInviteCode(options?: any) {\n        return AIBrushApiFp(this.configuration).createInviteCode(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Create a new Stripe session\n     * @param {CreateStripeSessionInput} [createStripeSessionInput] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public createStripeSession(createStripeSessionInput?: CreateStripeSessionInput, options?: any) {\n        return AIBrushApiFp(this.configuration).createStripeSession(createStripeSessionInput, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Create a new temporary image\n     * @param {string} format \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public createTemporaryImage(format: string, options?: any) {\n        return AIBrushApiFp(this.configuration).createTemporaryImage(format, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Delete a saved image\n     * @param {string} id \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public deleteImage(id: string, options?: any) {\n        return AIBrushApiFp(this.configuration).deleteImage(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Log in with Discord\n     * @param {DiscordLogin} [discordLogin] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public discordLogin(discordLogin?: DiscordLogin, options?: any) {\n        return AIBrushApiFp(this.configuration).discordLogin(discordLogin, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get the assets url\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public getAssetsUrl(options?: any) {\n        return AIBrushApiFp(this.configuration).getAssetsUrl(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get the user\\'s credit balance\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public getCredits(options?: any) {\n        return AIBrushApiFp(this.configuration).getCredits(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get the features\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public getFeatures(options?: any) {\n        return AIBrushApiFp(this.configuration).getFeatures(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get the global settings\n     * @param {string} key \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public getGlobalSettings(key: string, options?: any) {\n        return AIBrushApiFp(this.configuration).getGlobalSettings(key, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get a saved image by id\n     * @param {string} id \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public getImage(id: string, options?: any) {\n        return AIBrushApiFp(this.configuration).getImage(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get the binary image data\n     * @param {string} id \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public getImageData(id: string, options?: any) {\n        return AIBrushApiFp(this.configuration).getImageData(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get download urls for image assets\n     * @param {string} id \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public getImageDownloadUrls(id: string, options?: any) {\n        return AIBrushApiFp(this.configuration).getImageDownloadUrls(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get upload urls for image assets\n     * @param {string} id \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public getImageUploadUrls(id: string, options?: any) {\n        return AIBrushApiFp(this.configuration).getImageUploadUrls(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get the binary mask data\n     * @param {string} id \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public getMaskData(id: string, options?: any) {\n        return AIBrushApiFp(this.configuration).getMaskData(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Get available models\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public getModels(options?: any) {\n        return AIBrushApiFp(this.configuration).getModels(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get the binary thumbnail data\n     * @param {string} id \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public getThumbnailData(id: string, options?: any) {\n        return AIBrushApiFp(this.configuration).getThumbnailData(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Healthcheck\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public healthcheck(options?: any) {\n        return AIBrushApiFp(this.configuration).healthcheck(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Check if the user is admin\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public isAdmin(options?: any) {\n        return AIBrushApiFp(this.configuration).isAdmin(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get a list of saved images\n     * @param {number} [cursor] \n     * @param {string} [filter] \n     * @param {number} [limit] \n     * @param {'asc' | 'desc'} [direction] \n     * @param {string} [fields] Comma-separated list of fields to include in the response images. For example: \\&quot;id,params,created_at\\&quot; \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public listImages(cursor?: number, filter?: string, limit?: number, direction?: 'asc' | 'desc', fields?: string, options?: any) {\n        return AIBrushApiFp(this.configuration).listImages(cursor, filter, limit, direction, fields, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Login by email\n     * @param {LoginInput} [loginInput] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public login(loginInput?: LoginInput, options?: any) {\n        return AIBrushApiFp(this.configuration).login(loginInput, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Redeem a deposit code\n     * @param {string} code \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public redeemDepositCode(code: string, options?: any) {\n        return AIBrushApiFp(this.configuration).redeemDepositCode(code, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Refresh Login code\n     * @param {RefreshLoginInput} [refreshLoginInput] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public refresh(refreshLoginInput?: RefreshLoginInput, options?: any) {\n        return AIBrushApiFp(this.configuration).refresh(refreshLoginInput, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Update the global settings\n     * @param {string} key \n     * @param {UpdateGlobalSettingsRequest} [updateGlobalSettingsRequest] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public updateGlobalSettings(key: string, updateGlobalSettingsRequest?: UpdateGlobalSettingsRequest, options?: any) {\n        return AIBrushApiFp(this.configuration).updateGlobalSettings(key, updateGlobalSettingsRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Update a saved image\n     * @param {string} id \n     * @param {UpdateImageInput} [updateImageInput] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public updateImage(id: string, updateImageInput?: UpdateImageInput, options?: any) {\n        return AIBrushApiFp(this.configuration).updateImage(id, updateImageInput, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Upload the binary image data\n     * @param {string} id \n     * @param {any} [body] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public uploadImageData(id: string, body?: any, options?: any) {\n        return AIBrushApiFp(this.configuration).uploadImageData(id, body, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Upload the binary thumbnail data\n     * @param {string} id \n     * @param {any} [body] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public uploadThumbnailData(id: string, body?: any, options?: any) {\n        return AIBrushApiFp(this.configuration).uploadThumbnailData(id, body, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Verify Login code\n     * @param {VerifyLoginInput} [verifyLoginInput] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public verify(verifyLoginInput?: VerifyLoginInput, options?: any) {\n        return AIBrushApiFp(this.configuration).verify(verifyLoginInput, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n\n\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * AIBrush API\n * Orchestration backend for AI Brush\n *\n * The version of the OpenAPI document: 1.0.0\n * Contact: admin@aibrush.art\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport { Configuration } from \"./configuration\";\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport globalAxios, { AxiosPromise, AxiosInstance } from 'axios';\n\nexport const BASE_PATH = \"https://www.aibrush.art\".replace(/\\/+$/, \"\");\n\n/**\n *\n * @export\n */\nexport const COLLECTION_FORMATS = {\n    csv: \",\",\n    ssv: \" \",\n    tsv: \"\\t\",\n    pipes: \"|\",\n};\n\n/**\n *\n * @export\n * @interface RequestArgs\n */\nexport interface RequestArgs {\n    url: string;\n    options: any;\n}\n\n/**\n *\n * @export\n * @class BaseAPI\n */\nexport class BaseAPI {\n    protected configuration: Configuration | undefined;\n\n    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected axios: AxiosInstance = globalAxios) {\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = configuration.basePath || this.basePath;\n        }\n    }\n};\n\n/**\n *\n * @export\n * @class RequiredError\n * @extends {Error}\n */\nexport class RequiredError extends Error {\n    name: \"RequiredError\" = \"RequiredError\";\n    constructor(public field: string, msg?: string) {\n        super(msg);\n    }\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * AIBrush API\n * Orchestration backend for AI Brush\n *\n * The version of the OpenAPI document: 1.0.0\n * Contact: admin@aibrush.art\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport { Configuration } from \"./configuration\";\nimport { RequiredError,　RequestArgs } from \"./base\";\nimport { AxiosInstance } from 'axios';\n\n/**\n *\n * @export\n */\nexport const DUMMY_BASE_URL = 'https://example.com'\n\n/**\n *\n * @throws {RequiredError}\n * @export\n */\nexport const assertParamExists = function (functionName: string, paramName: string, paramValue: unknown) {\n    if (paramValue === null || paramValue === undefined) {\n        throw new RequiredError(paramName, `Required parameter ${paramName} was null or undefined when calling ${functionName}.`);\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setApiKeyToObject = async function (object: any, keyParamName: string, configuration?: Configuration) {\n    if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n            ? await configuration.apiKey(keyParamName)\n            : await configuration.apiKey;\n        object[keyParamName] = localVarApiKeyValue;\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setBasicAuthToObject = function (object: any, configuration?: Configuration) {\n    if (configuration && (configuration.username || configuration.password)) {\n        object[\"auth\"] = { username: configuration.username, password: configuration.password };\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setBearerAuthToObject = async function (object: any, configuration?: Configuration) {\n    if (configuration && configuration.accessToken) {\n        const accessToken = typeof configuration.accessToken === 'function'\n            ? await configuration.accessToken()\n            : await configuration.accessToken;\n        object[\"Authorization\"] = \"Bearer \" + accessToken;\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setOAuthToObject = async function (object: any, name: string, scopes: string[], configuration?: Configuration) {\n    if (configuration && configuration.accessToken) {\n        const localVarAccessTokenValue = typeof configuration.accessToken === 'function'\n            ? await configuration.accessToken(name, scopes)\n            : await configuration.accessToken;\n        object[\"Authorization\"] = \"Bearer \" + localVarAccessTokenValue;\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setSearchParams = function (url: URL, ...objects: any[]) {\n    const searchParams = new URLSearchParams(url.search);\n    for (const object of objects) {\n        for (const key in object) {\n            if (Array.isArray(object[key])) {\n                searchParams.delete(key);\n                for (const item of object[key]) {\n                    searchParams.append(key, item);\n                }\n            } else {\n                searchParams.set(key, object[key]);\n            }\n        }\n    }\n    url.search = searchParams.toString();\n}\n\n/**\n *\n * @export\n */\nexport const serializeDataIfNeeded = function (value: any, requestOptions: any, configuration?: Configuration) {\n    const nonString = typeof value !== 'string';\n    const needsSerialization = nonString && configuration && configuration.isJsonMime\n        ? configuration.isJsonMime(requestOptions.headers['Content-Type'])\n        : nonString;\n    return needsSerialization\n        ? JSON.stringify(value !== undefined ? value : {})\n        : (value || \"\");\n}\n\n/**\n *\n * @export\n */\nexport const toPathString = function (url: URL) {\n    return url.pathname + url.search + url.hash\n}\n\n/**\n *\n * @export\n */\nexport const createRequestFunction = function (axiosArgs: RequestArgs, globalAxios: AxiosInstance, BASE_PATH: string, configuration?: Configuration) {\n    return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n        const axiosRequestArgs = {...axiosArgs.options, url: (configuration?.basePath || basePath) + axiosArgs.url};\n        return axios.request(axiosRequestArgs);\n    };\n}\n","import axios from \"axios\";\nimport { AIBrushApi } from \"../client\";\nimport { Rect } from \"../pages/image-editor/models\";\n\nconst anonymousClient = axios.create();\n\nexport interface SplitResult {\n    numTilesX: number;\n    numTilesY: number;\n    tileSize: number;\n    imageWidth: number;\n    imageHeight: number;\n    tiles: ImageData[][]; // [x][y]\n}\n\nexport function convertPNGToJPG(encodedImage: string): Promise<string> {\n    return new Promise((resolve, reject) => {\n        const image = new Image();\n        image.onload = () => {\n            const canvas = document.createElement(\"canvas\");\n            try {\n                canvas.width = image.width;\n                canvas.height = image.height;\n                const ctx = canvas.getContext(\"2d\");\n                if (!ctx) {\n                    throw new Error(\"Could not get canvas context\");\n                }\n                ctx.drawImage(image, 0, 0);\n                const dataUrl = canvas.toDataURL(\"image/jpeg\");\n                resolve(dataUrl.split(\",\")[1]);\n            } finally {\n                canvas.remove();\n            }\n        };\n        image.src = `data:image/png;base64,${encodedImage}`;\n    });\n}\n\nexport function loadImageDataElement(\n    api: AIBrushApi,\n    imageId: string\n): Promise<HTMLImageElement> {\n    return new Promise((resolve, reject) => {\n        api.getImageDownloadUrls(imageId)\n            .then((urls) => {\n                anonymousClient\n                    .get(urls.data.image_url!, {\n                        responseType: \"arraybuffer\",\n                    })\n                    .then((resp) => {\n                        const binaryImageData = Buffer.from(\n                            resp.data,\n                            \"binary\"\n                        );\n                        const base64ImageData =\n                            binaryImageData.toString(\"base64\");\n                        const src = `data:image/png;base64,${base64ImageData}`;\n                        const imageElement = new Image();\n                        imageElement.src = src;\n                        imageElement.onload = () => {\n                            resolve(imageElement);\n                        };\n                    })\n                    .catch((err) => reject(err));\n            })\n            .catch((err) => reject(err));\n    });\n}\n\n// split image for individual upscales\nexport function splitImage(initImage: ImageData) {\n    // Check if the image area is larger than 512x512\n    if (initImage.width * initImage.height > 512 * 512) {\n        // use a temporary canvas to split the image\n        const canvas = document.createElement(\"canvas\");\n        try {\n            canvas.width = initImage.width;\n            canvas.height = initImage.height;\n            const ctx = canvas.getContext(\"2d\");\n            if (!ctx) {\n                throw new Error(\"Could not get canvas context\");\n            }\n            ctx.putImageData(initImage, 0, 0);\n            const tile_size = Math.min(initImage.width, initImage.height, 512);\n            // split the image into 512x512 tiles\n            // they need to overlap by at least 32 pixels\n            // so that the edges can be merged\n\n            // calculate the number of tiles in each dimension\n            const num_tiles_x = Math.ceil(initImage.width / (tile_size - 32));\n            const num_tiles_y = Math.ceil(initImage.height / (tile_size - 32));\n\n            const tiles: ImageData[][] = [];\n            for (let x = 0; x < num_tiles_x; x++) {\n                tiles.push([]);\n                for (let y = 0; y < num_tiles_y; y++) {\n                    // calculate the bounding box of the tile\n                    const x0 = x * (tile_size - 32);\n                    const y0 = y * (tile_size - 32);\n                    const x1 = Math.min(x0 + tile_size, initImage.width);\n                    const y1 = Math.min(y0 + tile_size, initImage.height);\n                    // crop the tile\n                    const tile = ctx.getImageData(x0, y0, x1 - x0, y1 - y0);\n                    tiles[x].push(tile);\n                }\n            }\n            return {\n                numTilesX: num_tiles_x,\n                numTilesY: num_tiles_y,\n                tileSize: tile_size,\n                imageWidth: initImage.width,\n                imageHeight: initImage.height,\n                tiles,\n            };\n        } finally {\n            canvas.remove();\n        }\n    } else {\n        return null;\n    }\n}\n\n// merge the tiles back into a single image\n// tiles should be 2x original size\nexport function mergeTiles(splitResult: SplitResult): ImageData {\n    // create a new image\n    const canvas = document.createElement(\"canvas\");\n    try {\n        canvas.width = splitResult.imageWidth;\n        canvas.height = splitResult.imageHeight;\n        const ctx = canvas.getContext(\"2d\");\n        if (!ctx) {\n            throw new Error(\"Could not get canvas context\");\n        }\n        for (let x = 0; x < splitResult.numTilesX; x++) {\n            for (let y = 0; y < splitResult.numTilesY; y++) {\n                // load the tile\n                const tile = splitResult.tiles[x][y];\n                const tileCanvas = imageDataToCanvas(tile);\n\n                // paste the tile into the new image\n                ctx.drawImage(\n                    tileCanvas,\n                    x * (splitResult.tileSize - 64),\n                    y * (splitResult.tileSize - 64)\n                );\n            }\n        }\n        return ctx.getImageData(\n            0,\n            0,\n            splitResult.imageWidth,\n            splitResult.imageHeight\n        );\n    } finally {\n        canvas.remove();\n    }\n}\n\nexport function imageDataToCanvas(imageData: ImageData): HTMLCanvasElement {\n    const canvas = document.createElement(\"canvas\");\n    canvas.width = imageData.width;\n    canvas.height = imageData.height;\n    const ctx = canvas.getContext(\"2d\");\n    if (!ctx) {\n        throw new Error(\"Could not get canvas context\");\n    }\n    ctx.putImageData(imageData, 0, 0);\n    return canvas;\n}\n\n// extract resizing logic from above function into a reusable resizeImage function\nexport function resizeImage(\n    image: HTMLCanvasElement,\n    width: number,\n    height: number\n): HTMLCanvasElement {\n    const canvas = document.createElement(\"canvas\");\n    try {\n        canvas.width = width;\n        canvas.height = height;\n        const ctx = canvas.getContext(\"2d\");\n        if (!ctx) {\n            throw new Error(\"Could not get canvas context\");\n        }\n        ctx.drawImage(image, 0, 0, width, height);\n        return canvas;\n    } finally {\n        image.remove();\n    }\n}\n\n// re-implement fixImageSize using resizeImage\nexport function fixImageSize(image: HTMLCanvasElement): HTMLCanvasElement {\n    // if the width and the height are divisible by 64, return the image data\n    // otherwise, resize up to the next multiple of 64\n    const width = Math.ceil(image.width / 64) * 64;\n    const height = Math.ceil(image.height / 64) * 64;\n    if (width == image.width && height == image.height) {\n        return image;\n    }\n    return resizeImage(image, width, height);\n}\n\nexport function featherEdges(\n    selectionOverlay: Rect,\n    imageWidth: number,\n    imageHeight: number,\n    imageData: ImageData,\n    featherWidth?: number\n) {\n    const featherLeftEdge = selectionOverlay.x != 0;\n    const featherRightEdge =\n        selectionOverlay.x + selectionOverlay.width != imageWidth;\n    const featherTopEdge = selectionOverlay.y != 0;\n    const featherBottomEdge =\n        selectionOverlay.y + selectionOverlay.height != imageHeight;\n\n    const baseWidth = Math.min(selectionOverlay.width, selectionOverlay.height);\n    if (!featherWidth) {\n        featherWidth = Math.floor(baseWidth / 8);\n    }\n\n    if (featherTopEdge) {\n        for (let y = 0; y < featherWidth; y++) {\n            for (let x = 0; x < selectionOverlay.width; x++) {\n                const pixelIndex = (y * selectionOverlay.width + x) * 4;\n                const alpha = (y / featherWidth) * 255;\n                const existingAlpha = imageData.data[pixelIndex + 3];\n                imageData.data[pixelIndex + 3] = Math.min(alpha, existingAlpha);\n            }\n        }\n    }\n    if (featherBottomEdge) {\n        for (\n            let y = selectionOverlay.height - featherWidth;\n            y < selectionOverlay.height;\n            y++\n        ) {\n            for (let x = 0; x < selectionOverlay.width; x++) {\n                const pixelIndex = (y * selectionOverlay.width + x) * 4;\n                const alpha =\n                    ((selectionOverlay.height - y) / featherWidth) * 255;\n                const existingAlpha = imageData.data[pixelIndex + 3];\n                imageData.data[pixelIndex + 3] = Math.min(alpha, existingAlpha);\n            }\n        }\n    }\n    if (featherLeftEdge) {\n        for (let x = 0; x < featherWidth; x++) {\n            for (let y = 0; y < selectionOverlay.height; y++) {\n                const pixelIndex = (y * selectionOverlay.width + x) * 4;\n                const alpha = (x / featherWidth) * 255;\n                const existingAlpha = imageData.data[pixelIndex + 3];\n                imageData.data[pixelIndex + 3] = Math.min(alpha, existingAlpha);\n            }\n        }\n    }\n    if (featherRightEdge) {\n        for (\n            let x = selectionOverlay.width - featherWidth;\n            x < selectionOverlay.width;\n            x++\n        ) {\n            for (let y = 0; y < selectionOverlay.height; y++) {\n                const pixelIndex = (y * selectionOverlay.width + x) * 4;\n                const alpha =\n                    ((selectionOverlay.width - x) / featherWidth) * 255;\n                const existingAlpha = imageData.data[pixelIndex + 3];\n                imageData.data[pixelIndex + 3] = Math.min(alpha, existingAlpha);\n            }\n        }\n    }\n}\n\nexport function applyAlphaMask(imageData: ImageData, alphaMask: ImageData) {\n    if (\n        imageData.width != alphaMask.width ||\n        imageData.height != alphaMask.height\n    ) {\n        throw new Error(\"imageData and alphaMask are not the same size\");\n    }\n    const spread = 10;\n    for (let x = 0; x < imageData.width; x++) {\n        for (let y = 0; y < imageData.height; y++) {\n            // r, g, b, a\n            // if transparency within 10 pixels, set alpha to 1, otherwise to zero.\n            // binary alpha inversion with spread\n            let alpha = false;\n            for (\n                let x2 = Math.max(0, x - spread);\n                x2 < Math.min(imageData.width, x + spread);\n                x2++\n            ) {\n                for (\n                    let y2 = Math.max(0, y - spread);\n                    y2 < Math.min(imageData.height, y + spread);\n                    y2++\n                ) {\n                    const alphaValue =\n                        alphaMask.data[y2 * alphaMask.width * 4 + x2 * 4 + 3];\n                    if (alphaValue < 255) {\n                        alpha = true;\n                    }\n                }\n            }\n            const alphaIndex = y * imageData.width * 4 + x * 4 + 3;\n            if (alpha) {\n                imageData.data[alphaIndex] = 255;\n            } else {\n                imageData.data[alphaIndex] = 0;\n            }\n        }\n    }\n}\n\nexport function createBlankImage(\n    color: string,\n    width: number,\n    height: number\n): string {\n    const canvas = document.createElement(\"canvas\");\n    try {\n        canvas.width = width;\n        canvas.height = height;\n        const context = canvas.getContext(\"2d\")!;\n        context.fillStyle = color;\n        context.fillRect(0, 0, width, height);\n        return canvas.toDataURL().split(\",\")[1];\n    } finally {\n        canvas.remove();\n    }\n}\n\nexport interface ImageWorkerRequest {\n    id: string;\n    feather: boolean;\n    upscale?: boolean;\n    alphaMode: \"none\" | \"mask\" | \"alpha\";\n    pixels: Uint8ClampedArray;\n    alphaPixels?: Uint8ClampedArray;\n    width: number;\n    height: number;\n    featherWidth?: number;\n    selectionOverlay: Rect;\n}\n\nexport interface ImageWorkerResponse {\n    id: string;\n    pixels: Uint8ClampedArray;\n}\n\nexport class ImageUtilWorker {\n    private workers: Array<Worker> = [];\n    private callbacks: { [key: string]: (event: MessageEvent) => void } = {};\n    private cursor = 0;\n\n    constructor(numWorkers = 3) {\n        for (let i = 0; i < numWorkers; i++) {\n            this.workers[i] = new Worker(\n                `${process.env.PUBLIC_URL}/workers/imageutil.js`\n            );\n            this.workers[i].addEventListener(\n                \"message\",\n                this.onMessage.bind(this)\n            );\n        }\n    }\n\n    onMessage(event: MessageEvent) {\n        const resp = event.data as ImageWorkerResponse;\n        this.callbacks[resp.id](event);\n        delete this.callbacks[resp.id];\n    }\n\n    async processRequest(\n        request: ImageWorkerRequest\n    ): Promise<ImageWorkerResponse> {\n        return new Promise((resolve, reject) => {\n            this.callbacks[request.id] = (event) => {\n                resolve(event.data);\n            };\n            this.workers[this.cursor].postMessage({\n                ...request,\n            });\n            this.cursor = (this.cursor + 1) % this.workers.length;\n        });\n    }\n\n    destroy() {\n        for (let key in this.workers) {\n            this.workers[key].terminate();\n        }\n    }\n}\n\nexport function createEncodedThumbnail(encodedImage: string): Promise<string> {\n    return new Promise((resolve, reject) => {\n        // use html5 canvas\n        // crop to square aspect ratio on 128x128 canvas\n        const canvas = document.createElement(\"canvas\");\n        const thumbSize = 128;\n        canvas.width = thumbSize;\n        canvas.height = thumbSize;\n\n        const image = new Image();\n        image.src = `data:image/png;base64,${encodedImage}`;\n        image.onload = () => {\n            const context = canvas.getContext(\"2d\");\n            if (!context) {\n                reject(new Error(\"Could not create canvas context\"));\n                return;\n            }\n\n            let cropX, cropY, cropDimension;\n            if (image.width > image.height) {\n                cropDimension = image.height;\n                cropX = (image.width - image.height) / 2;\n                cropY = 0;\n            } else {\n                cropDimension = image.width;\n                cropX = 0;\n                cropY = (image.height - image.width) / 2;\n            }\n\n            // Draw the image onto the canvas\n            context.drawImage(\n                image,           // Source image\n                cropX,           // Source x\n                cropY,           // Source y\n                cropDimension,   // Source width\n                cropDimension,   // Source height\n                0,               // Destination x\n                0,               // Destination y\n                thumbSize,       // Destination width\n                thumbSize        // Destination height\n            );\n\n            // Save to png\n            const imageUrl = canvas.toDataURL(\"image/png\");\n            const base64 = imageUrl.split(\",\")[1];\n            resolve(base64);\n        };\n\n        image.onerror = (error) => {\n            reject(error);\n        };\n    });\n}\n\n\nexport function decodeImage(encodedImage: string): Promise<HTMLImageElement> {\n    return new Promise((resolve, reject) => {\n        const image = new Image();\n        image.src = `data:image/png;base64,${encodedImage}`;\n        image.onload = () => {\n            resolve(image);\n        };\n    });\n}\n\nexport function binaryImageToDataBase64(binaryImage: any): string {\n    const buf = Buffer.from(binaryImage, \"binary\");\n    return buf.toString(\"base64\");\n}\n\nexport function resizeEncodedImage(\n    encodedImage: string,\n    width: number,\n    height: number,\n    format: \"png\" | \"jpeg\"\n): Promise<string> {\n    return new Promise((resolve, reject) => {\n        // use html5 canvas\n        // crop to square aspect ratio on 128x128 canvas\n        const canvas = document.createElement(\"canvas\");\n        canvas.width = width;\n        canvas.height = height;\n\n        const image = new Image();\n        image.src = `data:image/${format};base64,${encodedImage}`;\n        image.onload = () => {\n            const context = canvas.getContext(\"2d\");\n            if (!context) {\n                throw new Error(\"Could not create canvas context\");\n            }\n            canvas.width = width;\n            canvas.height = height;\n\n            context.drawImage(\n                image,\n                0,\n                0,\n                image.width,\n                image.height,\n                0,\n                0,\n                width,\n                height\n            );\n\n            // save to png\n            const imageUrl = canvas.toDataURL(\"image/${format}\");\n            const base64 = imageUrl.split(\",\")[1];\n            resolve(base64);\n        };\n    });\n}\n\nexport function encodedImageToBlob(encodedImage: string): Blob {\n    const binaryString = atob(encodedImage);\n    const arr = [];\n    for (let i = 0; i < binaryString.length; i++) {\n        arr.push(binaryString.charCodeAt(i));\n    }\n    return new Blob([new Uint8Array(arr)], {\n        type: \"image/png\",\n    });\n}\n\n// This function is made to work with S3 presigned urls.\n// Solution found at https://stackoverflow.com/questions/22531114/how-to-upload-to-aws-s3-directly-from-browser-using-a-pre-signed-url-instead-of\nexport function uploadBlob(signedUrl: string, blob: Blob): Promise<void> {\n    return new Promise((resolve, reject) => {\n        var xhr = new XMLHttpRequest();\n        xhr.open(\"PUT\", signedUrl, true);\n        xhr.setRequestHeader(\"Content-Type\", \"image/png\");\n        xhr.onload = () => {\n            if (xhr.status < 400) {\n                // success!\n                resolve();\n            }\n        };\n        xhr.onerror = (err) => {\n            // error...\n            reject(err);\n        };\n        xhr.send(blob); // `file` is a File object here\n    });\n}\n","import React, { useState, useEffect, useRef } from \"react\";\nimport { useParams, useHistory } from \"react-router-dom\";\nimport axios, { AxiosInstance } from \"axios\";\nimport * as uuid from \"uuid\";\n\nimport { AIBrushApi } from \"../../client\";\nimport { getUpscaleLevel } from \"../../lib/upscale\";\nimport \"./ImageEditor.css\";\nimport { createRenderer, Renderer } from \"./renderer\";\nimport { Tool, BaseTool } from \"./tool\";\nimport { SelectionTool, Controls as SelectionControls } from \"./selection-tool\";\nimport { EnhanceTool, EnhanceControls } from \"./enhance-tool\";\nimport {\n    PencilTool,\n    Controls as PencilControls,\n    defaultColors,\n} from \"./pencil-tool\";\nimport { SmudgeTool, SmudgeControls } from \"./smudge-tool\";\nimport { ImportExportControls } from \"./import-export\";\nimport { InpaintControls, InpaintTool } from \"./inpaint-tool\";\nimport { AugmentControls } from \"./augment-tool\";\nimport { defaultArgs } from \"../../components/ImagePrompt\";\nimport { ApiSocket } from \"../../lib/apisocket\";\nimport {\n    createEncodedThumbnail,\n    encodedImageToBlob,\n    uploadBlob,\n} from \"../../lib/imageutil\";\nimport { BusyModal } from \"../../components/BusyModal\";\nimport { LocalImage, LocalImagesStore } from \"../../lib/localImagesStore\";\nimport { render } from \"@testing-library/react\";\n\ninterface CanPreventDefault {\n    preventDefault: () => void;\n}\n\ninterface Props {\n    api: AIBrushApi;\n    apisocket: ApiSocket;\n    assetsUrl: string;\n    localImages: LocalImagesStore;\n}\n\ninterface ToolConfig {\n    name: string;\n    iconClass: string;\n    constructor: (r: Renderer) => Tool;\n    renderControls: (t: Tool, renderer: Renderer) => JSX.Element;\n    defaultArgs: any;\n}\n\nexport const anonymousClient = axios.create();\ndelete anonymousClient.defaults.headers.common[\"Authorization\"];\n\nexport const ImageEditor: React.FC<Props> = ({\n    api,\n    apisocket,\n    localImages,\n}) => {\n    const [showSelectionControls, setShowSelectionControls] = useState(false);\n    const tools: Array<ToolConfig> = [\n        {\n            name: \"inpaint\",\n            iconClass: \"fas fa-paint-brush\",\n            constructor: (r: Renderer) => new InpaintTool(r),\n            defaultArgs: {},\n            renderControls: (t: Tool, renderer: Renderer) => {\n                t.onShowSelectionControls(setShowSelectionControls);\n                return (\n                    <InpaintControls\n                        tool={t as InpaintTool}\n                        renderer={renderer}\n                        api={api}\n                        apisocket={apisocket}\n                        image={image!}\n                    />\n                );\n            },\n        },\n        {\n            name: \"enhance\",\n            iconClass: \"fas fa-magic\",\n            constructor: (r: Renderer) => new EnhanceTool(r),\n            defaultArgs: {\n                variationStrength: 0.75,\n            },\n            renderControls: (t: Tool, renderer: Renderer) => {\n                t.onShowSelectionControls(setShowSelectionControls);\n                return (\n                    <EnhanceControls\n                        tool={t as EnhanceTool}\n                        renderer={renderer}\n                        api={api}\n                        apisocket={apisocket}\n                        image={image!}\n                    />\n                );\n            },\n        },\n        {\n            name: \"pencil\",\n            iconClass: \"fas fa-pencil-alt\",\n            constructor: (r: Renderer) => new PencilTool(r, \"base\"),\n            defaultArgs: {},\n            renderControls: (t: Tool, renderer: Renderer) => {\n                return (\n                    <PencilControls\n                        tool={t as PencilTool}\n                        renderer={renderer}\n                        colors={defaultColors}\n                    />\n                );\n            },\n        },\n        {\n            name: \"smudge\",\n            // finger icon\n            iconClass: \"fas fa-hand-pointer\",\n            constructor: (r: Renderer) => new SmudgeTool(r),\n            defaultArgs: {},\n            renderControls: (t: Tool, renderer: Renderer) => {\n                return (\n                    <SmudgeControls\n                        tool={t as SmudgeTool}\n                        renderer={renderer}\n                    />\n                );\n            },\n        },\n        {\n            name: \"import-export\",\n            iconClass: \"fas fa-file-import\",\n            constructor: (r: Renderer) => new BaseTool(r, \"import-export\"),\n            defaultArgs: {},\n            renderControls: (t: Tool, renderer: Renderer) => {\n                return (\n                    <ImportExportControls\n                        renderer={renderer}\n                        tool={t as BaseTool}\n                        api={api}\n                    />\n                );\n            },\n        },\n        {\n            name: \"augment\",\n            iconClass: \"fas fa-image\",\n            constructor: (r: Renderer) => new BaseTool(r, \"augment\"),\n            defaultArgs: {},\n            renderControls: (t: Tool, renderer: Renderer) => {\n                return (\n                    <AugmentControls\n                        renderer={renderer}\n                        tool={t as BaseTool}\n                        api={api}\n                        image={image!}\n                    />\n                );\n            },\n        },\n    ];\n\n    const [image, setImage] = useState<LocalImage | null>(null);\n    const [renderer, setRenderer] = useState<Renderer | null>(null);\n    const [tool, setTool] = useState<Tool | null>(null);\n    const [toolConfig, setToolConfig] = useState<ToolConfig | null>(null);\n    const [canUndo, setCanUndo] = useState(false);\n    const [canRedo, setCanRedo] = useState(false);\n    const [busyMessage, setBusyMessage] = useState<string | null>(null);\n\n    const { id } = useParams<{ id: string }>();\n    const history = useHistory();\n\n    const canvasRef = useRef<HTMLCanvasElement>(null);\n\n    const onSelectTool = (toolconfig: ToolConfig) => {\n        if (renderer) {\n            if (tool) {\n                if (!tool.destroy()) {\n                    return;\n                }\n            }\n            const newTool = toolconfig.constructor(renderer);\n            setTool(newTool);\n            setToolConfig(toolconfig);\n            newTool.onSaveImage((encodedImage, args = {}) => {\n                console.log(\"Saving image...\");\n                saveNewImage(encodedImage, args);\n            });\n        }\n    };\n\n    /**\n     * Saves a new image to the server\n     *\n     * @param encodedImage base64 encoded image\n     * @param newArgs may contain new phrases and negative phrases\n     */\n    const saveNewImage = async (encodedImage: string, newArgs: any) => {\n        if (!image || !encodedImage) {\n            throw new Error(\"Cannot save new image without existing image\");\n        }\n        if (!renderer) {\n            throw new Error(\"Cannot save new image without renderer\");\n        }\n        setBusyMessage(\"Saving image...\");\n        try {\n            const newImage: LocalImage = {\n                ...image,\n                params: {\n                    ...image.params,\n                    width: renderer!.getWidth() as any,\n                    height: renderer!.getHeight() as any,\n                },\n                id: uuid.v4(),\n                imageData: `data:image/png;base64,${encodedImage}`,\n            };\n            await localImages.saveImage(newImage);\n\n            // switch url and state to new image\n            setImage(newImage);\n            history.replace(`/image-editor/${newImage.id}`);\n        } finally {\n            setBusyMessage(null);\n        }\n    };\n\n    useEffect(() => {\n        if (image) {\n            return;\n        }\n\n        async function loadImage() {\n            const localImage = await localImages.getImage(id);\n            let imageSrc = \"\";\n            if (localImage) {\n                setImage(localImage);\n                imageSrc = localImage.imageData!;\n            } else {\n                const image = (await api.getImage(id)).data;\n                setImage(image);\n                const download_urls = await api.getImageDownloadUrls(id);\n                // Loading up data as binary, base64 encoding into image url\n                // bypasses browser security nonsense about cross-domain images\n                const resp = await anonymousClient.get(\n                    download_urls.data.image_url!,\n                    {\n                        responseType: \"arraybuffer\",\n                    }\n                );\n                const binaryImageData = Buffer.from(resp.data, \"binary\");\n                const base64ImageData = binaryImageData.toString(\"base64\");\n                imageSrc = `data:image/png;base64,${base64ImageData}`;\n            }\n\n            const imageElement = new Image();\n            imageElement.src = imageSrc;\n            imageElement.onload = () => {\n                if (!canvasRef.current) {\n                    console.error(\"Failed to get canvas\");\n                    return;\n                }\n                const renderer = createRenderer(canvasRef.current);\n                renderer.setBaseImage(imageElement);\n                setRenderer(renderer);\n            };\n        }\n        loadImage();\n    }, [image, id]);\n\n    // this covers the case that an image is upscaled to max, the upscale tool needs to\n    // be hidden and deselected.\n    useEffect(() => {\n        if (\n            image &&\n            tool &&\n            tool.name == \"upscale\" &&\n            image.params.width! * image.params.height! >= 2048 * 2048\n        ) {\n            onSelectTool(tools[0]);\n        }\n    }, [image, tool]);\n\n    useEffect(() => {\n        if (renderer) {\n            onSelectTool(tools[0]);\n            renderer.onSnapshot(() => {\n                setCanUndo(renderer.canUndo());\n                setCanRedo(renderer.canRedo());\n            });\n        }\n    }, [renderer]);\n\n    useEffect(() => {\n        if (canvasRef.current) {\n            const listener = (e: WheelEvent) => {\n                if (tool) {\n                    e.preventDefault();\n                    tool.onWheel(e);\n                }\n            };\n            canvasRef.current.addEventListener(\"wheel\", listener);\n            return () => {\n                canvasRef.current?.removeEventListener(\"wheel\", listener);\n            };\n        }\n    }, [tool, canvasRef.current]);\n\n    // implement a useEffect hook that resizes the canvas (renderer.updateCanvasSize(width, height)) when the window is resized, and also on initial load\n    // the canvas size should be set based on the current screen size\n    useEffect(() => {\n        if (renderer) {\n            const listener = () => {\n                let width = window.innerWidth * 0.85;\n                let height = window.innerHeight;\n                if (window.innerWidth <= 992) {\n                    width = window.innerWidth;\n                    height = window.innerHeight * 0.85;\n                }\n                renderer.updateCanvasSize(width, height);\n                renderer.resetView();\n            };\n            window.addEventListener(\"resize\", listener);\n            listener();\n            return () => {\n                window.removeEventListener(\"resize\", listener);\n            };\n        }\n    }, [renderer]);\n\n    function renderTool(t: ToolConfig) {\n        if (!image) {\n            return null;\n        }\n        let buttonClass = `btn btn-secondary light-button image-editor-tool-button`;\n        const isSelected = tool && tool.name == t.name;\n        if (isSelected) {\n            buttonClass = `btn btn-primary image-editor-tool-button`;\n        }\n        return (\n            <>\n                <button\n                    style={{ margin: \"4px\" }}\n                    className={buttonClass}\n                    onClick={() => onSelectTool(t)}\n                >\n                    <i className={t.iconClass}></i>\n                </button>\n                {/* capitalize tool name */}\n                {/* <label>\n                    {t.name.charAt(0).toUpperCase() + t.name.slice(1)}\n                </label>\n                {isSelected && t.renderControls(tool!, renderer!)} */}\n            </>\n        );\n    }\n\n    function preventDefault(e: CanPreventDefault): boolean {\n        e.preventDefault();\n        return true;\n    }\n\n    return (\n        <>\n            <div className=\"row\">\n                <div className=\"col-12\">\n                    <h1 style={{ fontSize: \"40px\", textAlign: \"left\" }}>\n                        <i\n                            style={{ cursor: \"pointer\" }}\n                            onClick={() => history.push(`/images/${id}`)}\n                            className=\"fas fa-chevron-left\"\n                        ></i>\n                        &nbsp; AI Edit\n                    </h1>\n                </div>\n            </div>\n            <div\n                className=\"row\"\n                style={{ marginTop: \"32px\", paddingBottom: \"120px\" }}\n            >\n                <div\n                    className=\"col-lg-3\"\n                    style={{ textAlign: \"left\", marginBottom: \"8px\" }}\n                >\n                    {renderer && (\n                        <>\n                            <div style={{marginBottom: \"16px\"}}>{tools.map((t) => renderTool(t))}</div>\n                            {tool && toolConfig && (\n                                <>\n                                    {/* capitalize tool name */}\n                                    <h4 style={{marginLeft: \"16px\"}}>\n                                        {tool.name.charAt(0).toUpperCase() +\n                                            tool.name.slice(1)}\n                                    </h4>\n                                    {toolConfig.renderControls(\n                                        tool!,\n                                        renderer!\n                                    )}\n                                </>\n                            )}\n                            {(canRedo || canUndo) && (\n                                <div className=\"form-group\">\n                                    <div className=\"btn-group\">\n                                        <button\n                                            className=\"btn btn-primary image-popup-button\"\n                                            disabled={!renderer || !canUndo}\n                                            onClick={() =>\n                                                renderer && renderer.undo()\n                                            }\n                                        >\n                                            {/* undo */}\n                                            <i className=\"fas fa-undo\"></i>\n                                        </button>\n                                        <button\n                                            className=\"btn btn-primary image-popup-button\"\n                                            disabled={!renderer || !canRedo}\n                                            onClick={() =>\n                                                renderer && renderer.redo()\n                                            }\n                                        >\n                                            <i className=\"fas fa-redo\"></i>\n                                        </button>\n                                    </div>\n                                </div>\n                            )}\n                        </>\n                    )}\n                </div>\n                <div className=\"col-lg-9\">\n                    <div style={{ verticalAlign: \"middle\" }}>\n                        <div>\n                            <canvas\n                                style={{\n                                    cursor: \"none\",\n                                    touchAction: \"none\",\n                                    userSelect: \"none\",\n                                }}\n                                width={768}\n                                height={512}\n                                ref={canvasRef}\n                                className=\"image-editor-canvas\"\n                                onMouseDown={(e) =>\n                                    preventDefault(e) &&\n                                    tool &&\n                                    tool.onMouseDown(e)\n                                }\n                                onMouseMove={(e) =>\n                                    preventDefault(e) &&\n                                    tool &&\n                                    tool.onMouseMove(e)\n                                }\n                                onMouseUp={(e) =>\n                                    preventDefault(e) &&\n                                    tool &&\n                                    tool.onMouseUp(e)\n                                }\n                                onMouseLeave={(e) =>\n                                    preventDefault(e) &&\n                                    tool &&\n                                    tool.onMouseLeave(e)\n                                }\n                                onTouchStart={(e) =>\n                                    preventDefault(e) &&\n                                    tool &&\n                                    tool.onTouchStart(e)\n                                }\n                                onTouchMove={(e) =>\n                                    preventDefault(e) &&\n                                    tool &&\n                                    tool.onTouchMove(e)\n                                }\n                                onTouchEnd={(e) =>\n                                    preventDefault(e) &&\n                                    tool &&\n                                    tool.onTouchEnd(e)\n                                }\n                            ></canvas>\n                            {showSelectionControls && (\n                                <>\n                                    <button\n                                        className=\"btn btn-secondary canvas-select-left\"\n                                        onClick={() => tool!.select(\"left\")}\n                                    >\n                                        <i className=\"fas fa-chevron-left\"></i>\n                                    </button>\n                                    <button\n                                        className=\"btn btn-secondary canvas-select-right\"\n                                        onClick={() => tool!.select(\"right\")}\n                                    >\n                                        <i className=\"fas fa-chevron-right\"></i>\n                                    </button>\n                                </>\n                            )}\n                        </div>\n                    </div>\n                    <div className=\"row\">\n                        <button\n                            className=\"btn btn-primary\"\n                            // center horizontally\n                            style={{\n                                position: \"absolute\",\n                                left: \"50%\",\n                                transform: \"translate(-50%, 0)\",\n                            }}\n                            onClick={() => {\n                                if (renderer) {\n                                    renderer.resetView();\n                                }\n                            }}\n                        >\n                            {/* reset zoom */}\n                            <i className=\"fas fa-search-plus\"></i>&nbsp; Reset\n                            View\n                        </button>\n                        {/* redo */}\n                    </div>\n                    {/* vertically center button within the div */}\n                </div>\n            </div>\n            {busyMessage && (\n                <BusyModal show={true} title=\"Please Wait\">\n                    {busyMessage}\n                </BusyModal>\n            )}\n        </>\n    );\n};\n","import { Cursor, Rect } from \"./models\";\n\nconst maxSnapshots = 10;\n\nexport class Renderer {\n    private undoStack: ImageData[] = [];\n    private redoStack: ImageData[] = [];\n    private currentSnapshot: ImageData | undefined;\n\n    private backgroundLayer: HTMLCanvasElement;\n    private baseImageLayer: HTMLCanvasElement;\n    private editLayer: HTMLCanvasElement;\n    private maskLayer: HTMLCanvasElement | undefined;\n    // private overlayLayer: HTMLCanvasElement;\n\n    private selectionOverlay: Rect | undefined;\n    private selectionOverlayPreview: Rect | undefined;\n    private hasSelection: boolean = false;\n    private cursor: Cursor | undefined;\n\n    private zoom: number;\n    private offsetX: number;\n    private offsetY: number;\n    private width = 0;\n    private height = 0;\n\n    private snapshotListener: (() => void) | null = null;\n\n    constructor(private readonly canvas: HTMLCanvasElement) {\n        // invisible canvas elements\n        this.backgroundLayer = document.createElement(\"canvas\");\n        this.backgroundLayer.width = canvas.width;\n        this.backgroundLayer.height = canvas.height;\n        this.baseImageLayer = document.createElement(\"canvas\");\n        this.editLayer = document.createElement(\"canvas\");\n        // this.overlayLayer = document.createElement(\"canvas\");\n\n        this.zoom = 1;\n        this.offsetX = 0;\n        this.offsetY = 0;\n    }\n\n    updateCanvasSize(width: number, height: number) {\n        this.canvas.width = width;\n        this.canvas.height = height;\n        this.backgroundLayer.width = width;\n        this.backgroundLayer.height = height;\n        this.initializeBackgroundLayer();\n        this.render();\n    }\n\n    undo(allowRedo: boolean = true) {\n        if (this.undoStack.length > 0 && this.currentSnapshot) {\n            const imageData = this.undoStack.pop()!;\n            if (allowRedo) {\n                this.redoStack.push(this.currentSnapshot);\n            }\n            this.currentSnapshot = imageData;\n            // set as base image\n            const ctx = this.baseImageLayer.getContext(\"2d\");\n            if (ctx) {\n                ctx.clearRect(\n                    0,\n                    0,\n                    this.baseImageLayer.width,\n                    this.baseImageLayer.height\n                );\n                ctx.putImageData(imageData, 0, 0);\n                this.render();\n            }\n            this.notifySnapshotListener();\n        }\n    }\n\n    redo() {\n        if (this.redoStack.length > 0 && this.currentSnapshot) {\n            this.undoStack.push(this.currentSnapshot);\n            const imageData = this.redoStack.pop()!;\n            this.currentSnapshot = imageData;\n\n            // set as base image\n            const ctx = this.baseImageLayer.getContext(\"2d\");\n            if (ctx) {\n                ctx.putImageData(imageData, 0, 0);\n                this.render();\n            }\n            this.notifySnapshotListener();\n        }\n    }\n\n    clearRedoStack() {\n        this.redoStack = [];\n        this.notifySnapshotListener();\n    }\n\n    canUndo(): boolean {\n        return !this.hasSelection && this.undoStack.length > 0;\n    }\n\n    canRedo(): boolean {\n        return !this.hasSelection && this.redoStack.length > 0;\n    }\n\n    onSnapshot(listener: () => void) {\n        this.snapshotListener = listener;\n    }\n\n    snapshot() {\n        const ctx = this.baseImageLayer.getContext(\"2d\");\n        if (ctx) {\n            const snapshot = ctx.getImageData(\n                0,\n                0,\n                this.baseImageLayer.width,\n                this.baseImageLayer.height\n            );\n            if (this.currentSnapshot) {\n                this.undoStack.push(this.currentSnapshot);\n                this.currentSnapshot = snapshot;\n                if (this.redoStack.length > 0) {\n                    this.redoStack = [];\n                }\n                if (this.undoStack.length > maxSnapshots) {\n                    this.undoStack.shift();\n                }\n            } else {\n                this.currentSnapshot = snapshot;\n            }\n\n            this.notifySnapshotListener();\n        }\n    }\n\n    private notifySnapshotListener() {\n        if (this.snapshotListener) {\n            this.snapshotListener();\n        }\n    }\n\n    render() {\n        const context = this.canvas.getContext(\"2d\");\n        if (context) {\n            context.clearRect(0, 0, this.width, this.height);\n            context.drawImage(this.backgroundLayer, 0, 0);\n            // apply zoom and offset\n            context.setTransform(\n                this.zoom,\n                0,\n                0,\n                this.zoom,\n                this.offsetX * this.zoom,\n                this.offsetY * this.zoom\n            );\n            // context.drawImage(this.backgroundLayer, 0, 0);\n            context.drawImage(this.baseImageLayer, 0, 0);\n            context.drawImage(this.editLayer, 0, 0);\n            // draw this.maskLayer at 0.3 opacity\n            if (this.maskLayer) {\n                context.globalAlpha = 0.3;\n                context.drawImage(this.maskLayer, 0, 0);\n                context.globalAlpha = 1;\n            }\n\n            // context.drawImage(this.overlayLayer, 0, 0);\n            this.drawOverlay(context, this.width, this.height);\n            context.setTransform(1, 0, 0, 1, 0, 0);\n        }\n    }\n\n    createMask() {\n        this.maskLayer = document.createElement(\"canvas\");\n        this.maskLayer.width = this.width;\n        this.maskLayer.height = this.height;\n        this.resetMask();\n    }\n\n    resetMask() {\n        if (this.maskLayer) {\n            const ctx = this.maskLayer.getContext(\"2d\");\n            if (ctx) {\n                ctx.fillStyle = \"#000000\";\n                ctx.fillRect(0, 0, this.width, this.height);\n            }\n            this.render();\n        }\n    }\n\n    invertMask() {\n        if (this.maskLayer) {\n            const ctx = this.maskLayer.getContext(\"2d\");\n            if (ctx) {\n                // change black to white, white to black\n                const imageData = ctx.getImageData(\n                    0,\n                    0,\n                    this.width,\n                    this.height\n                );\n                for (let i = 0; i < imageData.data.length; i += 4) {\n                    imageData.data[i] = 255 - imageData.data[i];\n                    imageData.data[i + 1] = 255 - imageData.data[i + 1];\n                    imageData.data[i + 2] = 255 - imageData.data[i + 2];\n                }\n                ctx.putImageData(imageData, 0, 0);\n            }\n            this.render();\n        }\n    }\n\n    deleteMask() {\n        this.maskLayer = undefined;\n        this.render();\n    }\n\n    isMasked() {\n        return this.maskLayer !== undefined;\n    }\n\n    getCanvas(): HTMLCanvasElement {\n        return this.canvas;\n    }\n\n    private initializeBackgroundLayer() {\n        // checkered background\n        // #DEDEDE\n        // #FFFFFF\n        // 10x10 pixel squares\n        const ctx = this.backgroundLayer.getContext(\"2d\");\n        if (ctx) {\n            const pattern = ctx.createPattern(\n                this.createCheckeredPattern(20, 20, \"#808080\", \"#AAAAAA\"),\n                \"repeat\"\n            );\n            if (pattern) {\n                ctx.fillStyle = pattern;\n                ctx.fillRect(\n                    0,\n                    0,\n                    this.backgroundLayer.width,\n                    this.backgroundLayer.height\n                );\n            }\n        }\n    }\n\n    private createCheckeredPattern(\n        width: number,\n        height: number,\n        color1: string,\n        color2: string\n    ): HTMLCanvasElement {\n        const canvas = document.createElement(\"canvas\");\n        canvas.width = width;\n        canvas.height = height;\n        const ctx = canvas.getContext(\"2d\");\n        if (ctx) {\n            ctx.fillStyle = color1;\n            ctx.fillRect(0, 0, width, height);\n            ctx.fillStyle = color2;\n            ctx.fillRect(0, 0, width / 2, height / 2);\n            ctx.fillRect(width / 2, height / 2, width / 2, height / 2);\n        }\n        return canvas;\n    }\n\n    setBaseImage(\n        image: HTMLImageElement | HTMLCanvasElement,\n        updateSelectionOverlay = true\n    ) {\n        const context = this.baseImageLayer.getContext(\"2d\");\n        if (context) {\n            // set size of all layers\n            // TODO: adapt for an always-square canvas\n            this.initializeBackgroundLayer();\n\n            this.baseImageLayer.width = image.width;\n            this.baseImageLayer.height = image.height;\n            this.editLayer.width = image.width;\n            this.editLayer.height = image.height;\n            this.maskLayer = undefined;\n            // set image size\n            this.width = image.width;\n            this.height = image.height;\n            // this.canvas.width = image.width;\n            // this.canvas.height = image.height;\n            context.drawImage(image, 0, 0);\n\n            if (updateSelectionOverlay) {\n                // set 512x512 selection overlay at the center of the image\n                this.setSelectionOverlay({\n                    x: (image.width - 512) / 2,\n                    y: (image.height - 512) / 2,\n                    width: 512,\n                    height: 512,\n                });\n            }\n            this.resetView();\n            // this.render(); // already called by updateZoomAndOffset\n            this.snapshot();\n        }\n    }\n\n    resetView() {\n        // Determine the aspect ratios of the image and canvas\n        const imageAspectRatio = this.width / this.height;\n        const canvasAspectRatio = this.canvas.width / this.canvas.height;\n    \n        let zoom, offsetX, offsetY;\n    \n        if (imageAspectRatio > canvasAspectRatio) {\n            // The image is wider than the canvas, so we should fit the image to the width of the canvas\n            zoom = this.canvas.width / this.width;\n            offsetX = 0;\n            // Calculate the amount of empty space in the height (in image coordinate space), and divide by 2 to center\n            offsetY = (this.height - (this.canvas.height / zoom)) / -2;\n        } else {\n            // The image is taller or equal aspect ratio to the canvas, so we should fit the image to the height of the canvas\n            zoom = this.canvas.height / this.height;\n            offsetY = 0;\n            // Calculate the amount of empty space in the width (in image coordinate space), and divide by 2 to center\n            offsetX = (this.width - (this.canvas.width / zoom)) / -2;\n        }\n    \n        this.updateZoomAndOffset(zoom, offsetX, offsetY);\n    }\n    \n    \n\n    setEditImage(imageData: ImageData | null) {\n        this.hasSelection = !!imageData;\n        const context = this.editLayer.getContext(\"2d\");\n        if (context && this.selectionOverlay) {\n            context.clearRect(\n                0,\n                0,\n                this.editLayer.width,\n                this.editLayer.height\n            );\n            if (imageData) {\n                context.putImageData(\n                    imageData,\n                    this.selectionOverlay.x,\n                    this.selectionOverlay.y\n                );\n            }\n            // edit image makes the selection rect and preview disappear\n            // so redraw the overlay\n            this.hasSelection = !!imageData;\n            this.render();\n        }\n        this.notifySnapshotListener();\n    }\n\n    private drawOverlay(\n        context: CanvasRenderingContext2D,\n        width: number,\n        height: number\n    ) {\n        const lineWidth = Math.max(this.width / 512, this.height / 512);\n        if (context) {\n            context.strokeStyle = \"white\";\n            context.lineWidth = lineWidth;\n            context.strokeRect(0, 0, width, height);\n\n            if (!this.hasSelection && this.selectionOverlay) {\n                context.strokeStyle = \"white\";\n                context.lineWidth = lineWidth;\n                context.strokeRect(\n                    this.selectionOverlay.x,\n                    this.selectionOverlay.y,\n                    this.selectionOverlay.width,\n                    this.selectionOverlay.height\n                );\n            }\n            if (!this.hasSelection && this.selectionOverlayPreview) {\n                context.strokeStyle = \"cyan\";\n                context.lineWidth = lineWidth;\n                context.strokeRect(\n                    this.selectionOverlayPreview.x,\n                    this.selectionOverlayPreview.y,\n                    this.selectionOverlayPreview.width,\n                    this.selectionOverlayPreview.height\n                );\n            }\n            if (this.cursor) {\n                if (this.cursor.type === \"circle\") {\n                    context.lineWidth = lineWidth;\n                    context.strokeStyle = this.cursor.color;\n                    // context.globalAlpha = 0.5;\n                    context.beginPath();\n                    context.arc(\n                        this.cursor.x,\n                        this.cursor.y,\n                        this.cursor.radius,\n                        0,\n                        2 * Math.PI\n                    );\n                    context.stroke();\n                } else if (this.cursor.type === \"circle-fill\") {\n                    context.fillStyle = this.cursor.color;\n                    context.strokeStyle = this.cursor.color;\n                    // context.lineWidth = lineWidth;\n                    // context.globalAlpha = 0.5;\n                    context.beginPath();\n                    context.arc(\n                        this.cursor.x,\n                        this.cursor.y,\n                        this.cursor.radius,\n                        0,\n                        2 * Math.PI\n                    );\n                    context.stroke();\n                    // set alpha to 0.5 and fill\n                    context.globalAlpha = 0.5;\n                    context.beginPath();\n                    context.arc(\n                        this.cursor.x,\n                        this.cursor.y,\n                        this.cursor.radius,\n                        0,\n                        2 * Math.PI\n                    );\n                    context.fill();\n                    context.globalAlpha = 1;\n                } else if (this.cursor.type == \"crosshairs\") {\n                    // draw crosshairs based on cursor radius\n                    context.strokeStyle = this.cursor.color;\n                    context.lineWidth = lineWidth;\n                    context.beginPath();\n                    context.moveTo(\n                        this.cursor.x - this.cursor.radius,\n                        this.cursor.y\n                    );\n                    context.lineTo(\n                        this.cursor.x + this.cursor.radius,\n                        this.cursor.y\n                    );\n                    context.moveTo(\n                        this.cursor.x,\n                        this.cursor.y - this.cursor.radius\n                    );\n                    context.lineTo(\n                        this.cursor.x,\n                        this.cursor.y + this.cursor.radius\n                    );\n                    context.stroke();\n                } else if (this.cursor.type === \"colorpicker\") {\n                    // TODO: add croshairs\n                    context.lineWidth = this.cursor.radius * 0.75;\n                    context.strokeStyle = this.cursor.color;\n                    // context.globalAlpha = 0.5;\n                    context.beginPath();\n                    context.arc(\n                        this.cursor.x,\n                        this.cursor.y,\n                        this.cursor.radius,\n                        0,\n                        2 * Math.PI\n                    );\n                    context.stroke();\n\n                    // draw crosshairs (black)\n                    context.lineWidth = lineWidth;\n                    context.strokeStyle = \"black\";\n                    context.beginPath();\n                    context.moveTo(\n                        this.cursor.x - this.cursor.radius,\n                        this.cursor.y\n                    );\n                    context.lineTo(\n                        this.cursor.x + this.cursor.radius,\n                        this.cursor.y\n                    );\n                    context.moveTo(\n                        this.cursor.x,\n                        this.cursor.y - this.cursor.radius\n                    );\n                    context.lineTo(\n                        this.cursor.x,\n                        this.cursor.y + this.cursor.radius\n                    );\n                    context.stroke();\n                }\n            }\n        }\n    }\n\n    setSelectionOverlay(selectionOverlay: Rect | undefined) {\n        this.selectionOverlay = selectionOverlay;\n        this.render();\n    }\n\n    setSelectionOverlayPreview(selectionOverlayPreview: Rect | undefined) {\n        this.selectionOverlayPreview = selectionOverlayPreview;\n        this.render();\n    }\n\n    setCursor(cursor: Cursor | undefined) {\n        this.cursor = cursor;\n        this.render();\n    }\n\n    getSelectionOverlay(): Rect | undefined {\n        return this.selectionOverlay;\n    }\n\n    getZoom(): number {\n        return this.zoom;\n    }\n\n    getOffsetX(): number {\n        return this.offsetX;\n    }\n\n    getOffsetY(): number {\n        return this.offsetY;\n    }\n\n    updateZoomAndOffset(zoom: number, offsetX: number, offsetY: number) {\n        // console.log(`zoom: ${zoom}, offset: ${offsetX}, ${offsetY}`)\n        this.zoom = zoom;\n        this.offsetX = offsetX;\n        this.offsetY = offsetY;\n        this.render();\n    }\n\n    getWidth(): number {\n        return this.width;\n    }\n\n    getHeight(): number {\n        return this.height;\n    }\n\n    private imageDataToEncodedImage(imageData: ImageData): string | undefined {\n        // create a canvas and draw the image data on it\n        const canvas = document.createElement(\"canvas\");\n        canvas.width = imageData.width;\n        canvas.height = imageData.height;\n        const context = canvas.getContext(\"2d\");\n        if (context) {\n            context.putImageData(imageData, 0, 0);\n            // return the data url of the canvas\n            const result = canvas.toDataURL(\"image/png\");\n            // cleanup the canvas\n            canvas.remove();\n            // extract base64 data from data url\n            return result.split(\",\")[1];\n        }\n    }\n\n    getEncodedImage(selection: Rect | null): string | undefined {\n        const imageData = this.getImageData(selection);\n        if (imageData) {\n            return this.imageDataToEncodedImage(imageData);\n        }\n    }\n\n    private convertErasureToMask(erasure: ImageData): ImageData {\n        // for each pixel, if alpha < 255, set to white, otherwise set to black\n        const mask = erasure;\n        for (let i = 0; i < erasure.data.length; i += 4) {\n            let white = erasure.data[i + 3] < 255;\n            if (white) {\n                mask.data[i] = 255;\n                mask.data[i + 1] = 255;\n                mask.data[i + 2] = 255;\n                mask.data[i + 3] = 255;\n            } else {\n                mask.data[i] = 0;\n                mask.data[i + 1] = 0;\n                mask.data[i + 2] = 0;\n                mask.data[i + 3] = 255;\n            }\n        }\n        return mask;\n    }\n\n    getEncodedMask(\n        selection: Rect | null,\n        layer: \"base\" | \"mask\" = \"base\"\n    ): string | undefined {\n        const imageData = this.getImageData(selection, layer)!;\n        if (!imageData) {\n            return;\n        }\n        if (layer === \"base\") {\n            const mask = this.convertErasureToMask(imageData);\n            return this.imageDataToEncodedImage(mask);\n        } else {\n            return this.imageDataToEncodedImage(imageData);\n        }\n    }\n\n    getImageData(\n        selection: Rect | null,\n        layer: \"base\" | \"mask\" = \"base\"\n    ): ImageData | undefined {\n        if (!selection) {\n            selection = {\n                x: 0,\n                y: 0,\n                width: this.width,\n                height: this.height,\n            };\n        }\n        // get image data of the selection\n        const imageLayer =\n            layer === \"base\" ? this.baseImageLayer : this.maskLayer;\n        if (!imageLayer) {\n            return;\n        }\n        let context = imageLayer.getContext(\"2d\");\n        if (context) {\n            const imageData = context.getImageData(\n                selection.x,\n                selection.y,\n                selection.width,\n                selection.height\n            );\n            return imageData;\n        }\n    }\n\n    commitSelection() {\n        // draw the selection overlay on the base image layer\n        const context = this.baseImageLayer.getContext(\"2d\");\n        if (context) {\n            context.drawImage(this.editLayer, 0, 0);\n            this.setEditImage(null);\n            this.snapshot();\n        }\n    }\n\n    drawPoint(\n        x: number,\n        y: number,\n        brushSize: number,\n        color: string,\n        layer: \"base\" | \"mask\" = \"base\"\n    ): void {\n        // draw on selection layer\n        const imageLayer = layer === \"base\" ? this.editLayer : this.maskLayer;\n        if (!imageLayer) {\n            return;\n        }\n        const context = imageLayer.getContext(\"2d\");\n        if (context) {\n            context.fillStyle = color;\n            context.beginPath();\n            context.arc(x, y, brushSize / 2, 0, 2 * Math.PI);\n            context.fill();\n        }\n        this.render();\n    }\n\n    erasePoint(brushx: number, brushy: number, brushSize: number): void {\n        if (!this.selectionOverlay) {\n            throw new Error(\"No selection overlay\");\n        }\n        // get image data centered on x, y with brushSize width and height\n        const context = this.baseImageLayer.getContext(\"2d\");\n        if (context) {\n            const imageData = context.getImageData(\n                brushx - brushSize / 2,\n                brushy - brushSize / 2,\n                brushSize,\n                brushSize\n            );\n            // set alpha to 0 in a circle centered on x, y with radius brushSize / 2\n            for (let i = 0; i < imageData.data.length; i += 4) {\n                const x = (i / 4) % brushSize;\n                const y = Math.floor(i / 4 / brushSize);\n\n                const absx = x - brushSize / 2 + brushx;\n                // three pixel barrier on each edge UNLESS the selection overlay borders that edge\n                let leftEdge = this.selectionOverlay.x;\n                if (leftEdge > 0) {\n                    leftEdge += 10;\n                }\n                let rightEdge =\n                    this.selectionOverlay.x + this.selectionOverlay.width;\n                if (rightEdge < this.width) {\n                    rightEdge -= 10;\n                }\n                let topEdge = this.selectionOverlay.y;\n                if (topEdge > 0) {\n                    topEdge += 10;\n                }\n                let bottomEdge =\n                    this.selectionOverlay.y + this.selectionOverlay.height;\n                if (bottomEdge < this.canvas.height) {\n                    bottomEdge -= 10;\n                }\n\n                const containsx = absx > leftEdge && absx < rightEdge;\n                const absy = y - brushSize / 2 + brushy;\n                const containsy = absy > topEdge && absy < bottomEdge;\n                const contains = containsx && containsy;\n\n                // check if x, y is within the selection overlay\n                if (this.selectionOverlay && !contains) {\n                    continue;\n                }\n\n                const distance = Math.sqrt(\n                    Math.pow(x - brushSize / 2, 2) +\n                        Math.pow(y - brushSize / 2, 2)\n                );\n                if (distance < brushSize / 2) {\n                    imageData.data[i + 3] = 0;\n                }\n            }\n            // draw the image data on the selection layer\n            context.putImageData(\n                imageData,\n                brushx - brushSize / 2,\n                brushy - brushSize / 2\n            );\n        }\n    }\n\n    drawLine(\n        x1: number,\n        y1: number,\n        x2: number,\n        y2: number,\n        brushSize: number,\n        color: string,\n        layer: \"base\" | \"mask\" = \"base\"\n    ): void {\n        const imageLayer = layer === \"base\" ? this.editLayer : this.maskLayer;\n        if (!imageLayer) {\n            return;\n        }\n        // draw on selection layer\n        const context = imageLayer.getContext(\"2d\");\n        if (context) {\n            context.strokeStyle = color;\n            context.lineWidth = brushSize;\n            context.lineCap = \"round\";\n            context.beginPath();\n            context.moveTo(x1, y1);\n            context.lineTo(x2, y2);\n            context.stroke();\n        }\n        this.render();\n    }\n\n    smudgeLine(\n        x1: number,\n        y1: number,\n        x2: number,\n        y2: number,\n        brushSize: number,\n        brushOpacity: number\n    ): void {\n        const unitVector = {\n            x: x2 - x1,\n            y: y2 - y1,\n        };\n        const length = Math.sqrt(\n            unitVector.x * unitVector.x + unitVector.y * unitVector.y\n        );\n        unitVector.x /= length;\n        unitVector.y /= length;\n\n        // for each point on the line, get image data (brushSize x brushSize) from edit layer\n        // average pixel values that are within the brush circle.\n        // update the image data with the averaged pixel values in the\n        // brush circle, then put the image data back on the edit layer\n        // at the point on the line\n\n        const context = this.editLayer.getContext(\"2d\");\n        if (context) {\n            for (let i = 0; i < length; i++) {\n                const x = x1 + i * unitVector.x;\n                const y = y1 + i * unitVector.y;\n\n                const imageData = context.getImageData(\n                    x - brushSize / 2,\n                    y - brushSize / 2,\n                    brushSize,\n                    brushSize\n                );\n\n                let totalRed = 0;\n                let totalGreen = 0;\n                let totalBlue = 0;\n                let count = 0.0;\n\n                // average pixel values\n                for (let y = 0; y < imageData.height; y++) {\n                    for (let x = 0; x < imageData.width; x++) {\n                        const index = (y * imageData.width + x) * 4;\n                        const distance = Math.sqrt(\n                            (x - brushSize / 2) * (x - brushSize / 2) +\n                                (y - brushSize / 2) * (y - brushSize / 2)\n                        );\n                        if (distance <= brushSize / 2) {\n                            // get the pixel value from the image data\n                            const r = imageData.data[index];\n                            const g = imageData.data[index + 1];\n                            const b = imageData.data[index + 2];\n\n                            totalRed += r;\n                            totalGreen += g;\n                            totalBlue += b;\n                            count++;\n                        }\n                    }\n                }\n\n                // update the image data with the averaged pixel values\n                // these need to be weighted by the brush opacity\n                const averageRed = totalRed / count;\n                const averageGreen = totalGreen / count;\n                const averageBlue = totalBlue / count;\n                for (let y = 0; y < imageData.height; y++) {\n                    for (let x = 0; x < imageData.width; x++) {\n                        const index = (y * imageData.width + x) * 4;\n                        const distance = Math.sqrt(\n                            (x - brushSize / 2) * (x - brushSize / 2) +\n                                (y - brushSize / 2) * (y - brushSize / 2)\n                        );\n                        if (distance <= brushSize / 2) {\n                            imageData.data[index] =\n                                averageRed * brushOpacity +\n                                imageData.data[index] * (1 - brushOpacity);\n                            imageData.data[index + 1] =\n                                averageGreen * brushOpacity +\n                                imageData.data[index + 1] * (1 - brushOpacity);\n                            imageData.data[index + 2] =\n                                averageBlue * brushOpacity +\n                                imageData.data[index + 2] * (1 - brushOpacity);\n                        }\n                    }\n                }\n\n                // put the image data back on the edit layer\n                context.putImageData(\n                    imageData,\n                    x - brushSize / 2,\n                    y - brushSize / 2\n                );\n            }\n        }\n        this.render();\n    }\n\n    getPixel(x: number, y: number): string {\n        const context = this.baseImageLayer.getContext(\"2d\");\n        // get pixel as hex string\n        if (context) {\n            const pixel = context.getImageData(x, y, 1, 1).data;\n            return (\n                \"#\" +\n                (\"000000\" + rgbToHex(pixel[0], pixel[1], pixel[2])).slice(-6)\n            );\n        }\n        return \"#000000\";\n    }\n\n    copyEditImageFromBaseImage(): void {\n        // copy the base image to the edit layer\n        const context = this.editLayer.getContext(\"2d\");\n        if (context) {\n            context.drawImage(this.baseImageLayer, 0, 0);\n        }\n        this.render();\n        this.hasSelection = true;\n        this.notifySnapshotListener();\n    }\n\n    expandToOverlay() {\n        if (!this.selectionOverlay) {\n            throw new Error(\"No selection overlay\");\n        }\n        const minX = Math.min(0, this.selectionOverlay.x);\n        const minY = Math.min(0, this.selectionOverlay.y);\n        const maxX = Math.max(\n            this.selectionOverlay.x + this.selectionOverlay.width,\n            this.baseImageLayer.width\n        );\n        const maxY = Math.max(\n            this.selectionOverlay.y + this.selectionOverlay.height,\n            this.baseImageLayer.height\n        );\n        const width = maxX - minX;\n        const height = maxY - minY;\n\n        // create a new canvas with the expanded size\n        const newCanvas = document.createElement(\"canvas\");\n        newCanvas.width = width;\n        newCanvas.height = height;\n        // draw the base image on the new canvas.\n        // if overlay.x is negative, image.x is overlay.x * -1\n        // if overlay.x is 0 or positive, image.x is 0\n        // if overlay.y is negative, image.y is overlay.y * -1\n        // if overlay.y is 0 or positive, image.y is 0\n        const context = newCanvas.getContext(\"2d\");\n        if (context) {\n            context.drawImage(\n                this.baseImageLayer,\n                Math.max(0, this.selectionOverlay.x * -1),\n                Math.max(0, this.selectionOverlay.y * -1)\n            );\n        }\n        if (this.selectionOverlay.x < 0) {\n            this.selectionOverlay.x = 0;\n        }\n        if (this.selectionOverlay.y < 0) {\n            this.selectionOverlay.y = 0;\n        }\n        console.log(`new Canvas size: ${width} x ${height}`);\n        this.setBaseImage(newCanvas, false);\n    }\n}\n\nfunction rgbToHex(r: number, g: number, b: number) {\n    if (r > 255 || g > 255 || b > 255) throw \"Invalid color component\";\n    return ((r << 16) | (g << 8) | b).toString(16);\n}\n\nexport function createRenderer(canvas: HTMLCanvasElement): Renderer {\n    return new Renderer(canvas);\n}\n","// export interface AspectRatio {\n//     displayName: string;\n//     width: number;\n//     height: number;\n//     id: number;\n\n//     scale: (size: number) => AspectRatio;\n// }\n\nexport class AspectRatio implements AspectRatio {\n    readonly displayName: string;\n    readonly width: number;\n    readonly height: number;\n    readonly id: number;\n\n    constructor(cfg: any) {\n        this.displayName = cfg.displayName;\n        this.width = cfg.width;\n        this.height = cfg.height;\n        this.id = cfg.id;\n    }\n\n    scale(size: number): AspectRatio {\n        const newWidth = this.width * size;\n        const newHeight = this.height * size;\n\n        return new AspectRatio({\n            id: this.id,\n            displayName: this.displayName,\n            // round width and height up to the nearest multiple of 64\n            width: Math.ceil(newWidth / 64) * 64,\n            height: Math.ceil(newHeight / 64) * 64,\n        });\n    }\n}\n\nexport const DEFAULT_ASPECT_RATIO = 5;\n\nexport const aspectRatios: AspectRatio[] = [\n    {\n        displayName: \"4:1\",\n        width: 1024,\n        height: 256,\n        id: 0,\n    },\n    {\n        displayName: \"3:1\",\n        width: 768,\n        height: 256,\n        id: 1,\n    },\n    {\n        displayName: \"2:1\",\n        width: 640,\n        height: 320,\n        id: 2,\n    },\n    {\n        displayName: \"3:2\",\n        width: 576,\n        height: 384,\n        id: 3,\n    },\n    {\n        displayName: \"5:4\",\n        width: 640,\n        height: 512,\n        id: 4,\n    },\n    {\n        displayName: \"1:1\",\n        width: 512,\n        height: 512,\n        id: 5,\n    },\n    {\n        displayName: \"4:5\",\n        width: 512,\n        height: 640,\n        id: 6,\n    },\n    {\n        displayName: \"2:3\",\n        width: 384,\n        height: 576,\n        id: 7,\n    },\n    {\n        displayName: \"1:2\",\n        width: 320,\n        height: 640,\n        id: 8,\n    },\n    {\n        displayName: \"1:3\",\n        width: 256,\n        height: 768,\n        id: 9,\n    },\n    {\n        displayName: \"1:4\",\n        width: 256,\n        height: 1024,\n        id: 10,\n    }\n].map((cfg) => new AspectRatio(cfg));\n\nexport function getClosestAspectRatio(width: number, height: number): AspectRatio {\n    const aspectRatio = width / height;\n\n    const tests = [...aspectRatios];\n    tests.sort((a, b) => {\n        const aRatio = a.width / a.height;\n        const bRatio = b.width / b.height;\n        return (\n            Math.abs(aRatio - aspectRatio) -\n            Math.abs(bRatio - aspectRatio)\n        );\n    });\n    const bestMatch = tests[0];\n    return bestMatch;\n}\n\n\n","import { FC, useEffect, useState } from \"react\";\nimport { PaletteButton } from \"./PaletteButton\";\nimport { PencilTool } from \"./pencil-tool\";\nimport { Renderer } from \"./renderer\";\n\ninterface MaskEditorProps {\n    // renderer: Renderer;\n    tool: PencilTool;\n    onConfirm: () => void;\n    onRevert: () => void;\n}\n\nconst colors = [\"#FFFFFF\", \"#000000\"];\n\nexport const MaskEditor: FC<MaskEditorProps> = ({\n    // renderer,\n    tool,\n    onConfirm,\n    onRevert,\n}) => {\n    const [brushSize, setBrushSize] = useState(10);\n    const [brushColor, setBrushColor] = useState(colors[0]);\n\n    useEffect(() => {\n        tool.updateArgs({\n            brushSize,\n            brushColor,\n        });\n    }, [brushSize, brushColor]);\n\n    return (\n        <div style={{ marginTop: \"16px\" }}>\n            <div className=\"form-group\">\n                <label style={{ width: \"100%\" }}>\n                    Brush size\n                    <small\n                        className=\"form-text text-muted\"\n                        style={{ float: \"right\" }}\n                    >\n                        {brushSize}px\n                    </small>\n                </label>\n                <input\n                    type=\"range\"\n                    className=\"form-control-range\"\n                    min=\"1\"\n                    max=\"100\"\n                    value={brushSize}\n                    onChange={(e) => setBrushSize(parseInt(e.target.value))}\n                />\n            </div>\n            <div\n                style={{\n                    display: \"flex\",\n                    flexDirection: \"row\",\n                    flexWrap: \"wrap\",\n                }}\n            >\n                {colors.map((color, i) => (\n                    <PaletteButton\n                        key={i}\n                        selectedColor={brushColor}\n                        color={color}\n                        onClick={(color) => setBrushColor(color)}\n                    />\n                ))}\n            </div>\n            <div className=\"form-group\" style={{ marginTop: \"16px\" }}>\n                <i className=\"fa fa-info-circle\"></i>&nbsp;Masking: areas that\n                are painted white will be changed, areas that are painted black\n                will be left unchanged.\n            </div>\n            <div className=\"form-group\" style={{ marginTop: \"16px\" }}>\n                <button\n                    className=\"btn btn-secondary\"\n                    onClick={() => tool.renderer.invertMask()}\n                >\n                    Invert\n                </button>\n                <button\n                    className=\"btn btn-secondary\"\n                    onClick={onRevert}\n                    style={{ marginLeft: \"8px\" }}\n                >\n                    Cancel\n                </button>\n                <button\n                    className=\"btn btn-primary\"\n                    onClick={onConfirm}\n                    style={{ marginLeft: \"8px\" }}\n                >\n                    Save\n                </button>\n            </div>\n        </div>\n    );\n};\n","import React, { FC, useState, useEffect } from \"react\";\nimport loadImage from \"blueimp-load-image\";\nimport saveAs from \"file-saver\";\n\nimport { AIBrushApi } from \"../../client\";\nimport { Renderer } from \"./renderer\";\nimport { BaseTool, Tool } from \"./tool\";\n\ninterface Props {\n    renderer: Renderer;\n    tool: BaseTool;\n    api: AIBrushApi;\n}\n\nexport const ImportExportControls: FC<Props> = ({ renderer, tool }) => {\n\n    const [backupImage, setBackupImage] = useState<string | undefined>();\n\n    const onImageSelected = (event: React.ChangeEvent<HTMLInputElement>) => {\n        const files = event.target.files;\n        if (files && files.length > 0) {\n            loadImage(\n                files[0],\n                (img) => {\n                    const backupImage = renderer.getEncodedImage(null);\n                    setBackupImage(backupImage);\n                    renderer.setBaseImage(img as HTMLImageElement);\n                },\n                { canvas: false }\n            );\n        }\n    };\n\n    const onExport = () => {\n        const encodedImage = renderer.getEncodedImage(null);\n        if (encodedImage) {\n            // base64 decode\n            const byteString = atob(encodedImage);\n            // save as file\n            const buffer = new ArrayBuffer(byteString.length);\n            const intArray = new Uint8Array(buffer);\n            for (let i = 0; i < byteString.length; i++) {\n                intArray[i] = byteString.charCodeAt(i);\n            }\n            const blob = new Blob([intArray], { type: \"image/png\" });\n            saveAs(blob, \"image.png\");\n        }\n    };\n\n    if (backupImage) {\n        return (\n            <div className=\"form-group\" style={{marginTop: \"16px\"}}>\n                <button\n                    className=\"btn btn-primary\"\n                    onClick={() => {\n                        setBackupImage(undefined);\n                        const img = new Image();\n                        // set src as data uri\n                        const src = \"data:image/png;base64,\" + backupImage;\n                        img.src = src;\n                        img.onload = () => {\n                            renderer.setBaseImage(img);\n                        };\n                    }}\n                >\n                    {/* cancel icon */}\n                    <i className=\"fas fa-times\"></i>&nbsp;\n                    Revert\n                </button>\n                <button\n                    className=\"btn btn-primary\"\n                    onClick={() => {\n                        setBackupImage(undefined);\n                        if (tool.saveListener) {\n                            const encodedImage = renderer.getEncodedImage(null);\n                            if (encodedImage) {\n                                tool.saveListener(encodedImage);\n                            }\n                        }\n                    }}\n                    style={{marginLeft: \"8px\"}}\n                >\n                    {/* save icon */}\n                    <i className=\"fas fa-save\"></i>&nbsp;\n                    Save\n                </button>\n            </div>\n        );\n    }\n\n    // Show buttons for import and export and \"save a copy\"\n    return (\n        <>\n            <div className=\"form-group\" style={{marginTop: \"16px\"}}>\n                <label\n                    id=\"loadimage-wrapper\"\n                    className={`btn btn-primary `}\n                    style={{ display: \"inline\" }}\n                >\n                    {/* upload image */}\n                    <i className=\"fas fa-upload\"></i>&nbsp; Import Image\n                    <input\n                        id=\"loadimage\"\n                        type=\"file\"\n                        style={{ display: \"none\" }}\n                        onChange={onImageSelected}\n                    />\n                </label>\n            </div>\n            <div className=\"form-group\">\n                <button\n                    className=\"btn btn-primary\"\n                    onClick={() => {\n                        onExport();\n                    }}\n                    style={{ marginLeft: \"8px\"}}\n                >\n                    <i className=\"fas fa-download\"></i>&nbsp; Export Image\n                </button>\n            </div>\n        </>\n    );\n};\n","import React, { FC, useState, useEffect } from \"react\";\nimport loadImage from \"blueimp-load-image\";\nimport saveAs from \"file-saver\";\nimport axios from \"axios\";\nimport * as uuid from \"uuid\";\n\nimport { sleep } from \"../../lib/sleep\";\n\nimport {\n    AIBrushApi,\n    CreateImageInput,\n    ImageParamsAugmentationEnum,\n    Image as APIImage,\n    StatusEnum,\n} from \"../../client\";\nimport { Renderer } from \"./renderer\";\nimport { BaseTool, Tool } from \"./tool\";\nimport {\n    splitImage,\n    mergeTiles,\n    ImageUtilWorker,\n    imageDataToCanvas,\n    fixImageSize,\n    decodeImage,\n    binaryImageToDataBase64,\n    SplitResult,\n} from \"../../lib/imageutil\";\nimport { defaultArgs } from \"../../components/ImagePrompt\";\nimport { ErrorNotification } from \"../../components/Alerts\";\nimport moment from \"moment\";\nimport { calculateImagesCost } from \"../../lib/credits\";\nimport { CostIndicator } from \"../../components/CostIndicator\";\n\nexport const anonymousClient = axios.create();\n\ninterface Props {\n    renderer: Renderer;\n    tool: BaseTool;\n    api: AIBrushApi;\n    image: APIImage;\n}\n\nexport const AugmentControls: FC<Props> = ({ renderer, tool, api, image }) => {\n    const [backupImage, setBackupImage] = useState<string | undefined>();\n    const [activeAugmentation, setActiveAugmentation] = useState<\n        \"upscale\" | \"face_restore\" | null\n    >(null);\n    const [imageWorker, setImageWorker] = useState<\n        ImageUtilWorker | undefined\n    >();\n    const [error, setError] = useState<string | null>(null);\n    const [lastError, setLastError] = useState<number>(0);\n\n    useEffect(() => {\n        const imageWorker = new ImageUtilWorker();\n        setImageWorker(imageWorker);\n        return () => {\n            imageWorker.destroy();\n        };\n    }, []);\n\n    const augmentImageData = async (\n        imageData: ImageData,\n        augmentation: \"upscale\" | \"face_restore\"\n    ): Promise<ImageData> => {\n        if (!imageWorker) {\n            throw new Error(\"Image worker not initialized\");\n        }\n        let c = imageDataToCanvas(imageData);\n        let encodedImage = c.toDataURL(\"image/png\").split(\",\")[1];\n        c.remove();\n        const input: CreateImageInput = defaultArgs();\n        input.label = \"\";\n        // input.encoded_image = encodedImage;\n\n        const tmpInitImage = await api.createTemporaryImage(\"png\");\n        const binaryImageData = Buffer.from(encodedImage, \"base64\");\n        await anonymousClient.put(\n            tmpInitImage.data.upload_url!,\n            binaryImageData,\n            {\n                headers: {\n                    \"Content-Type\": \"image/png\",\n                },\n            }\n        );\n\n        input.tmp_image_id = tmpInitImage.data.id;\n        input.params.prompt = image.params.prompt;\n        input.params.negative_prompt = image.params.negative_prompt;\n        input.params.denoising_strength = 0.05;\n        input.count = 1;\n        input.model = \"stable_diffusion\";\n        input.nsfw = true;\n        input.temporary = true;\n        input.params.width = imageData.width;\n        input.params.height = imageData.height;\n        input.params.augmentation =\n            augmentation === \"upscale\"\n                ? ImageParamsAugmentationEnum.Upscale\n                : ImageParamsAugmentationEnum.FaceRestore;\n\n        const createResp = await api.createImage(input);\n        let processingImage = createResp.data.images![0];\n        while (processingImage.status !== StatusEnum.Completed) {\n            await sleep(2000);\n            const checkResp = await api.getImage(processingImage.id);\n            processingImage = checkResp.data;\n            if (processingImage.status === StatusEnum.Error) {\n                throw new Error(\"Augmentation failed\");\n            }\n        }\n        const downloadUrls = await api.getImageDownloadUrls(processingImage.id);\n\n        // download image data, convert to canvas and resize to 2x original,\n        // convert back to image data and return.\n        const imageDataResp = await anonymousClient.get(\n            downloadUrls.data.image_url!,\n            {\n                responseType: \"arraybuffer\",\n            }\n        );\n        encodedImage = binaryImageToDataBase64(imageDataResp.data);\n        const img = await decodeImage(encodedImage);\n        c = document.createElement(\"canvas\");\n        const upscaleFactor = augmentation === \"upscale\" ? 2 : 1;\n        c.width = imageData.width * upscaleFactor;\n        c.height = imageData.height * upscaleFactor;\n        const ctx = c.getContext(\"2d\")!;\n        ctx.drawImage(img, 0, 0, c.width, c.height);\n        const newImageData = ctx.getImageData(0, 0, c.width, c.height);\n        c.remove();\n        return newImageData;\n    };\n\n    const onAugment = async (augmentation: \"upscale\" | \"face_restore\") => {\n        setActiveAugmentation(augmentation);\n        setError(null);\n        try {\n            const backupImage = renderer.getEncodedImage(null);\n            setBackupImage(backupImage);\n            let imageData = renderer.getImageData(null);\n            if (!imageData) {\n                return;\n            }\n            // ensure width and height are multiples of 64\n            if ((imageData.width % 64) + (imageData.height % 64) !== 0) {\n                const c = fixImageSize(imageDataToCanvas(imageData));\n                imageData = c\n                    .getContext(\"2d\")!\n                    .getImageData(0, 0, c.width, c.height);\n            }\n\n            const newImageData = await augmentImageData(\n                imageData,\n                augmentation\n            );\n            const newCanvas = imageDataToCanvas(newImageData);\n            renderer.setBaseImage(newCanvas);\n            newCanvas.remove();\n        } catch (err: any) {\n            setError(err.message || \"Augmentation failed\");\n            setLastError(moment().valueOf());\n        } finally {\n            setActiveAugmentation(null);\n        }\n    };\n\n    if (activeAugmentation) {\n        return (\n            <div className=\"form-group\" style={{ marginTop: \"16px\" }}>\n                <i className=\"fas fa-spinner fa-spin\"></i>&nbsp;{\" \"}\n                {activeAugmentation === \"upscale\"\n                    ? \"Upscaling...\"\n                    : \"Restoring faces...\"}\n            </div>\n        );\n    }\n\n    if (backupImage) {\n        return (\n            <div className=\"form-group\" style={{ marginTop: \"16px\" }}>\n                <ErrorNotification message={error} timestamp={lastError} />\n                <button\n                    className=\"btn btn-primary\"\n                    onClick={() => {\n                        setBackupImage(undefined);\n                        const img = new Image();\n                        // set src as data uri\n                        const src = \"data:image/png;base64,\" + backupImage;\n                        img.src = src;\n                        img.onload = () => {\n                            renderer.setBaseImage(img);\n                        };\n                    }}\n                >\n                    {/* cancel icon */}\n                    <i className=\"fas fa-times\"></i>&nbsp; Revert\n                </button>\n                <button\n                    className=\"btn btn-primary\"\n                    onClick={() => {\n                        setBackupImage(undefined);\n                        if (tool.saveListener) {\n                            const encodedImage = renderer.getEncodedImage(null);\n                            if (encodedImage) {\n                                tool.saveListener(encodedImage);\n                            }\n                        }\n                    }}\n                    style={{ marginLeft: \"8px\" }}\n                >\n                    {/* save icon */}\n                    <i className=\"fas fa-save\"></i>&nbsp; Save\n                </button>\n            </div>\n        );\n    }\n\n    const maxSize = 2048 * 2048;\n    if (renderer.getWidth() * renderer.getHeight() > maxSize) {\n        return (\n            <div style={{ marginTop: \"16px\" }}>\n                This image is too large to augment.\n            </div>\n        );\n    }\n\n    const cost = calculateImagesCost(1, image.params.width!, image.params.height!);\n\n    // Show buttons for import and export and \"save a copy\"\n    return (\n        <>\n            <ErrorNotification message={error} timestamp={lastError} />\n            <div className=\"form-group\" style={{ marginTop: \"16px\" }}>\n                <button\n                    className=\"btn btn-primary\"\n                    onClick={() => {\n                        onAugment(\"upscale\");\n                    }}\n                    style={{ marginLeft: \"8px\" }}\n                >\n                    {/* upscale icon */}\n                    <i className=\"fas fa-arrows-alt\"></i>&nbsp; Upscale Image 2x\n                </button>\n            </div>\n            <div className=\"form-group\" style={{ marginTop: \"16px\" }}>\n                <button\n                    className=\"btn btn-primary\"\n                    onClick={() => {\n                        onAugment(\"face_restore\");\n                    }}\n                    style={{ marginLeft: \"8px\" }}\n                >\n                    {/* face restore icon */}\n                    <i className=\"fas fa-smile\"></i>&nbsp; Restore Faces\n                </button>\n            </div>\n            <div className=\"form-group\" style={{ marginTop: \"16px\" }}>\n                <CostIndicator imagesCost={cost} />\n            </div>\n        </>\n    );\n};\n","import React from \"react\";\nimport { Modal, Button } from \"react-bootstrap\";\nimport { Link, useHistory } from \"react-router-dom\";\n\ninterface OutOfCreditsModalProps {\n    show: boolean;\n    onHide: () => void;\n}\n\nconst OutOfCreditsModal: React.FC<OutOfCreditsModalProps> = ({\n    show,\n    onHide,\n}) => {\n    const history = useHistory();\n\n    const redirectToPricing = () => {\n        onHide();\n        history.push(\"/pricing\");\n    };\n\n    return (\n        <Modal show={show} onHide={onHide} centered>\n            <Modal.Header closeButton>\n                <Modal.Title>Out of Credits</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                Oops! It looks like you've run out of credits for today. But\n                don't worry, you'll receive 100 free credits tomorrow to\n                continue creating amazing images. Can't wait? Check out our\n                affordable <Link to=\"/pricing\">pricing options</Link> to get instant access to more credits\n                and unleash your creativity without limits!\n            </Modal.Body>\n            <Modal.Footer>\n                <Button variant=\"secondary\" onClick={onHide}>\n                    Close\n                </Button>\n                <Button variant=\"primary\" onClick={redirectToPricing}>\n                    Visit Pricing Page\n                </Button>\n            </Modal.Footer>\n        </Modal>\n    );\n};\n\nexport default OutOfCreditsModal;\n","import React, { useEffect, useState } from \"react\";\nimport { Modal, Button } from \"react-bootstrap\";\nimport { useHistory } from \"react-router-dom\";\n\ninterface PaymentStatusModalProps {\n    paymentStatus?: \"success\" | \"canceled\";\n}\n\nconst PaymentStatusModal: React.FC<PaymentStatusModalProps> = ({\n    paymentStatus,\n}) => {\n    const [show, setShow] = useState(false);\n    const history = useHistory();\n\n    useEffect(() => {\n        if (paymentStatus) {\n            setShow(true);\n        }\n    }, [paymentStatus]);\n\n    const handleClose = () => {\n        setShow(false);\n        history.push(\"/\");\n    };\n\n    return (\n        <Modal show={show} onHide={handleClose}>\n            <Modal.Header closeButton>\n                <Modal.Title>Payment Status</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                {paymentStatus === \"success\"\n                    ? \"Payment succeeded!\"\n                    : \"Payment canceled.\"}\n            </Modal.Body>\n            <Modal.Footer>\n                <Button variant=\"secondary\" onClick={handleClose}>\n                    Close\n                </Button>\n            </Modal.Footer>\n        </Modal>\n    );\n};\n\nexport default PaymentStatusModal;\n","import React, { FC, useEffect, useRef, useState } from \"react\";\nimport { Modal } from \"react-bootstrap\";\nimport { propTypes } from \"react-bootstrap/esm/Image\";\n\ninterface Props {\n    show: boolean;\n    title?: string;\n}\n\n// Show modal with child contents\nexport const BusyModal: FC<Props> = ({ show, title, children }) => {\n    return (\n        <Modal show={show} backdrop=\"static\" keyboard={false}>\n            <Modal.Header closeButton>\n                <Modal.Title>{title || \"Processing\"}</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                {children || (\n                    <div className=\"d-flex justify-content-center\">\n                        <div className=\"spinner-border\" role=\"status\">\n                            <span className=\"sr-only\">Please Wait...</span>\n                        </div>\n                    </div>\n                )}\n            </Modal.Body>\n        </Modal>\n    );\n};\n","import { Renderer } from \"./renderer\";\n\nexport class ZoomHelper {\n\n    private startTouches: React.TouchList | null;\n    private startZoom = 1;\n    private startOffsetX = 0;\n    private startOffsetY = 0;\n\n    constructor(private renderer: Renderer) {\n        this.startTouches = null;\n    }\n\n    onWheel(event: WheelEvent) {\n        const originalZoom = this.renderer.getZoom();\n        let zoom = this.renderer.getZoom();\n        let offsetX = this.renderer.getOffsetX();\n        let offsetY = this.renderer.getOffsetY();\n\n        let canvasPoint = this.translateMouseToCanvasCoordinates(\n            event.offsetX,\n            event.offsetY\n        );\n        // console.log(\"x: \" + x + \", y: \" + y);\n        \n        if (event.deltaY < 0) {\n            zoom += 0.1 * zoom;\n        } else {\n            zoom -= 0.1 * zoom;\n        }\n        zoom = Math.max(0.1, Math.min(zoom, 8.0));\n\n        let xDiff = canvasPoint.x - -offsetX;\n        let yDiff = canvasPoint.y - -offsetY;\n\n        // offsetX = canvasPoint.x - xDiff * (zoom / originalZoom);\n        // offsetY = canvasPoint.y - yDiff * (zoom / originalZoom);\n        offsetX -= xDiff * (zoom / originalZoom) - xDiff;\n        offsetY -= yDiff * (zoom / originalZoom) - yDiff;\n\n        this.renderer.updateZoomAndOffset(zoom, offsetX, offsetY);\n    }\n\n    onPan(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        let movementX = event.movementX;\n        let movementY = event.movementY;\n        // translate offset to canvas coordinates\n        let rect = (\n            event.target as HTMLCanvasElement\n        ).getBoundingClientRect();\n        movementX = (movementX / rect.width) * this.renderer.getCanvas().width;\n        movementY = (movementY / rect.height) * this.renderer.getCanvas().height;\n\n        let zoom = this.renderer.getZoom();\n        let offsetX = this.renderer.getOffsetX();\n        let offsetY = this.renderer.getOffsetY();\n\n        offsetX += movementX / zoom;\n        offsetY += movementY / zoom;\n\n        this.renderer.updateZoomAndOffset(zoom, offsetX, offsetY);\n    }\n\n    onTouchStart(event: React.TouchEvent<HTMLCanvasElement>) {\n        if (event.touches.length === 2) {\n            this.startTouches = event.touches;\n            this.startZoom = this.renderer.getZoom();\n            this.startOffsetX = this.renderer.getOffsetX();\n            this.startOffsetY = this.renderer.getOffsetY();\n        }\n    }\n\n    onTouchMove(event: React.TouchEvent<HTMLCanvasElement>) {\n        if (this.startTouches) {\n            const canvasRect = this.renderer.getCanvas().getBoundingClientRect();\n            const startTouch1 = this.startTouches[0];\n            const startTouch2 = this.startTouches[1];\n            const touch1 = event.touches[0];\n            const touch2 = event.touches[1];\n\n            const startDistance = Math.sqrt(\n                Math.pow(startTouch1.clientX - startTouch2.clientX, 2) +\n                Math.pow(startTouch1.clientY - startTouch2.clientY, 2)\n            );\n            const distance = Math.sqrt(\n                Math.pow(touch1.clientX - touch2.clientX, 2) +\n                Math.pow(touch1.clientY - touch2.clientY, 2)\n            );\n            const zoom = this.startZoom * (distance / startDistance);\n\n            const startCenterX = (startTouch1.clientX + startTouch2.clientX) / 2;\n            const startCenterY = (startTouch1.clientY + startTouch2.clientY) / 2;\n            const centerX = (touch1.clientX + touch2.clientX) / 2;\n            const centerY = (touch1.clientY + touch2.clientY) / 2;\n\n            const startCanvasPoint = this.translateMouseToCanvasCoordinates(\n                startCenterX - canvasRect.left,\n                startCenterY - canvasRect.top\n            );\n            const canvasPoint = this.translateMouseToCanvasCoordinates(\n                centerX - canvasRect.left,\n                centerY - canvasRect.top\n            );\n\n            let offsetX = this.startOffsetX;\n            let offsetY = this.startOffsetY;\n\n            let xDiff = canvasPoint.x - startCanvasPoint.x;\n            let yDiff = canvasPoint.y - startCanvasPoint.y;\n\n            let xDiff2 = canvasPoint.x - -this.renderer.getOffsetX();\n            let yDiff2 = canvasPoint.y - -this.renderer.getOffsetY();\n\n            offsetX -= xDiff2 * (zoom / this.startZoom) - xDiff2 - (xDiff * (distance / startDistance));\n            offsetY -= yDiff2 * (zoom / this.startZoom) - yDiff2 - (yDiff * (distance / startDistance));\n\n            this.renderer.updateZoomAndOffset(zoom, offsetX, offsetY);\n        }\n    }\n\n    onTouchEnd(event: React.TouchEvent<HTMLCanvasElement>) {\n        this.startTouches = null;\n    }\n\n\n    translateMouseToCanvasCoordinates(mouseX: number, mouseY: number, zoom?: number, offsetX?: number, offsetY?: number) {\n        let x = mouseX;\n        let y = mouseY;\n        // adjust for zoom\n        zoom = zoom || this.renderer.getZoom();\n        offsetX = offsetX || this.renderer.getOffsetX();\n        offsetY = offsetY || this.renderer.getOffsetY();\n        x = x / zoom;\n        y = y / zoom;\n\n        // translate offset to canvas coordinates\n        let rect = this.renderer.getCanvas().getBoundingClientRect();\n\n        // x = (x / rect.width) * this.renderer.getWidth();\n        // y = (y / rect.height) * this.renderer.getHeight();\n\n        x = (x / rect.width) * this.renderer.getCanvas().width;\n        y = (y / rect.height) * this.renderer.getCanvas().height;\n\n        x = Math.round(x - offsetX);\n        y = Math.round(y - offsetY);\n\n        return { x: x, y: y };\n    }\n\n    translateCanvasToMouseCoordinates(x: number, y: number, zoom?: number, offsetX?: number, offsetY?: number) {\n        zoom = zoom || this.renderer.getZoom();\n        offsetX = offsetX || this.renderer.getOffsetX();\n        offsetY = offsetY || this.renderer.getOffsetY();\n        x = x + offsetX;\n        y = y + offsetY;\n        x = x * zoom;\n        y = y * zoom;\n\n        // translate offset to canvas coordinates\n        let rect = this.renderer.getCanvas().getBoundingClientRect();\n        x = Math.round((x / this.renderer.getWidth()) * rect.width);\n        y = Math.round((y / this.renderer.getHeight()) * rect.height);\n\n        return { x: x, y: y };\n    }\n}","import React from \"react\";\nimport { Renderer } from \"./renderer\";\nimport { ZoomHelper } from \"./zoomHelper\";\n\nexport interface Tool {\n    name: string;\n    getArgs(): any;\n    updateArgs(args: any): void;\n    onMouseDown(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>): void;\n    onMouseMove(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>): void;\n    onMouseUp(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>): void;\n    onMouseLeave(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>): void;\n\n    onTouchStart(event: React.TouchEvent<HTMLCanvasElement>): void;\n    onTouchMove(event: React.TouchEvent<HTMLCanvasElement>): void;\n    onTouchEnd(event: React.TouchEvent<HTMLCanvasElement>): void;\n\n    onKeyDown(event: KeyboardEvent): void;\n    onKeyUp(event: KeyboardEvent): void;\n    onWheel(event: WheelEvent): void;\n    destroy(): boolean;\n    onShowSelectionControls(listener: (show: boolean) => void): void;\n    select(direction: \"left\" | \"right\"): void;\n    onSaveImage(listener: (encodedImage: string) => void): void;\n}\n\nexport class BaseTool implements Tool {\n    saveListener?: (encodedImage: string, args?: any) => void = () => {};\n\n    private touchHandle: number | undefined;\n\n    readonly zoomHelper: ZoomHelper;\n\n    private _pinchZooming = false;\n    private _panning = false;\n\n    constructor(readonly renderer: Renderer, readonly name: string) {\n        this.zoomHelper = new ZoomHelper(renderer);\n    }\n\n    getArgs(): any {\n        return JSON.parse(\n            localStorage.getItem(`tool_args_${this.name}`) || \"{}\"\n        );\n    }\n    updateArgs(args: any) {\n        localStorage.setItem(`tool_args_${this.name}`, JSON.stringify(args));\n    }\n    onMouseDown(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        if (event.button === 1) {\n            this._panning = true;\n        }\n    }\n    onMouseMove(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        if (this._panning) {\n            this.zoomHelper.onPan(event);\n        }\n        let { x, y } = this.zoomHelper.translateMouseToCanvasCoordinates(\n            event.nativeEvent.offsetX,\n            event.nativeEvent.offsetY\n        );\n        this._updateCursor(x, y);\n    }\n\n    private _updateCursor(x: number, y: number) {\n        this.renderer.setCursor({\n            color: \"white\",\n            radius: 10,\n            type: \"crosshairs\",\n            x,\n            y,\n        });\n    }\n\n    onMouseUp(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        if (this._panning) {\n            this._panning = false;\n        }\n    }\n    onMouseLeave(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {}\n\n    onTouchStart(event: React.TouchEvent<HTMLCanvasElement>) {\n        if (this.touchHandle) {\n            window.clearTimeout(this.touchHandle);\n        }\n        const touches: React.Touch[] = [];\n        // make a deep copy so that the values live past the delay\n        for (let i = 0; i < event.touches.length; i++) {\n            const touch = event.touches[i];\n            touches.push({\n                identifier: touch.identifier,\n                clientX: touch.clientX,\n                clientY: touch.clientY,\n                pageX: touch.pageX,\n                pageY: touch.pageY,\n                screenX: touch.screenX,\n                screenY: touch.screenY,\n                target: null,\n            } as any);\n        }\n        event = {\n            touches,\n        } as any;\n        this.touchHandle = window.setTimeout(() => {\n            this.touchHandle = undefined;\n            if (event.touches.length === 2) {\n                this._pinchZooming = true;\n                this.zoomHelper.onTouchStart(event);\n            } else {\n                const rect = this.renderer.getCanvas().getBoundingClientRect();\n                const touch = event.touches[0];\n                if (touch) {\n                    this.onMouseDown({\n                        type: \"touch\",\n                        button: 0,\n                        nativeEvent: {\n                            offsetX: touch.clientX - rect.left,\n                            offsetY: touch.clientY - rect.top,\n                        },\n                    } as any);\n                }\n            }\n        }, 200);\n    }\n    onTouchMove(event: React.TouchEvent<HTMLCanvasElement>) {\n        if (event.touches.length === 2) {\n            this.zoomHelper.onTouchMove(event);\n        } else {\n            const rect = this.renderer.getCanvas().getBoundingClientRect();\n            const touch = event.touches[0];\n            if (touch) {\n                this.onMouseMove({\n                    type: \"touch\",\n                    button: 0,\n                    nativeEvent: {\n                        offsetX: touch.clientX - rect.left,\n                        offsetY: touch.clientY - rect.top,\n                    },\n                } as any);\n            }\n        }\n    }\n    onTouchEnd(event: React.TouchEvent<HTMLCanvasElement>) {\n        if (this._pinchZooming) {\n            this._pinchZooming = false;\n            this.zoomHelper.onTouchEnd(event);\n        } else {\n            this.onMouseUp({\n                button: 0,\n                type: \"touch\",\n            } as any);\n        }\n    }\n\n    onKeyDown(event: KeyboardEvent) {}\n    onKeyUp(event: KeyboardEvent) {}\n    onWheel(event: WheelEvent) {\n        this.zoomHelper.onWheel(event);\n    }\n    destroy(): boolean {\n        return true;\n    }\n    onShowSelectionControls(listener: (show: boolean) => void) {}\n    select(direction: \"left\" | \"right\") {}\n    onSaveImage(listener: (encodedImage: string) => void) {\n        this.saveListener = listener;\n    }\n}\n","import moment from \"moment\";\n\nimport { Image } from \"../client\";\n\nexport interface LocalImage extends Image {\n    imageData?: string;\n}\n\n/**\n * This class uses indexedDB to store images locally.\n */\nexport class LocalImagesStore {\n    private db: IDBDatabase | null = null;\n\n    init(): Promise<void> {\n        return new Promise((resolve, reject) => {\n            const request = indexedDB.open(\"aibrush\", 4);\n            request.onupgradeneeded = (evt) => {\n                const db = request.result;\n                // create object store if it doesn't exist\n                // const imagesStore = db.createObjectStore(\"images\", { keyPath: \"id\" });\n                let imagesStore: IDBObjectStore;\n                if (!db.objectStoreNames.contains(\"images\")) {\n                    imagesStore = db.createObjectStore(\"images\", {\n                        keyPath: \"id\",\n                    });\n                } else {\n                    imagesStore = request.transaction?.objectStore(\n                        \"images\"\n                    ) as IDBObjectStore;\n                }\n                imagesStore.createIndex(\"updated_at\", \"updated_at\", {\n                    unique: false,\n                });\n                imagesStore.createIndex(\"deleted_at\", \"deleted_at\", {\n                    unique: false,\n                });\n                console.log(\"Local images store updated\");\n            };\n            request.onsuccess = (_) => {\n                this.db = request.result;\n                console.log(\"Local images store initialized\");\n                resolve();\n            };\n            request.onerror = (evt) => {\n                console.error(\"error opening indexeddb\", evt);\n                reject(evt);\n            };\n        });\n    }\n\n    // migrate old images to new format\n    private hydrateImage(image: LocalImage): LocalImage {\n        if (!image) {\n            return image;\n        }\n        if (!image.params) {\n            const legacyImage = image as any;\n            image.params = {\n                prompt: legacyImage.phrases.join(\", \"),\n                negative_prompt: legacyImage.negative_phrases.join(\", \"),\n                width: legacyImage.width,\n                height: legacyImage.height,\n                denoising_strength: legacyImage.stable_diffusion_strength,\n                steps: legacyImage.iterations,\n            }\n        }\n        return image;\n    }\n\n    async getImage(id: string): Promise<LocalImage | null> {\n        if (!this.db) {\n            throw new Error(\"not initialized\");\n        }\n        const transaction = this.db.transaction([\"images\"]);\n        const store = transaction.objectStore(\"images\");\n        const request = store.get(id);\n        return new Promise((resolve, reject) => {\n            request.onsuccess = (evt) => {\n                resolve(this.hydrateImage(request.result));\n            };\n            request.onerror = (evt) => {\n                console.error(\"error getting image\", evt);\n                reject(evt);\n            };\n        });\n    }\n\n    async saveImage(image: LocalImage): Promise<void> {\n        if (!this.db) {\n            throw new Error(\"not initialized\");\n        }\n        await this.cleanupDeletedImages();\n        const transaction = this.db.transaction([\"images\"], \"readwrite\");\n        const store = transaction.objectStore(\"images\");\n        const request = store.put({\n            ...image,\n            updated_at: moment().valueOf(),\n        });\n        return new Promise((resolve, reject) => {\n            request.onsuccess = (evt) => {\n                resolve();\n            };\n            request.onerror = (evt) => {\n                console.error(\"error saving image\", evt);\n                reject(evt);\n            };\n        });\n    }\n\n    async hardDeleteImage(id: string): Promise<void> {\n        if (!this.db) {\n            throw new Error(\"not initialized\");\n        }\n        const transaction = this.db.transaction([\"images\"], \"readwrite\");\n        const store = transaction.objectStore(\"images\");\n        const request = store.delete(id);\n        return new Promise((resolve, reject) => {\n            request.onsuccess = (evt) => {\n                console.log(`image ${id} permanently deleted`);\n                resolve();\n            };\n            request.onerror = (evt) => {\n                console.error(\"error deleting image\", evt);\n                reject(evt);\n            };\n        });\n    }\n\n    async deleteImage(id: string): Promise<void> {\n        if (!this.db) {\n            throw new Error(\"not initialized\");\n        }\n        // fetch the image first. If it has a deletedAt timestamp already, or if it's not\n        // in \"completed\" state, hard delete it. Otherwise, set the deletedAt timestamp.\n        const image = await this.getImage(id);\n        if (!image) {\n            console.error(\"image not found\", id);\n            return;\n        }\n        if (image.deleted_at || image.status !== \"completed\") {\n            return this.hardDeleteImage(id);\n        }\n        const transaction = this.db.transaction([\"images\"], \"readwrite\");\n        const store = transaction.objectStore(\"images\");\n        const request = store.put({\n            ...image,\n            deleted_at: moment().valueOf(),\n        });\n        return new Promise((resolve, reject) => {\n            request.onsuccess = (evt) => {\n                resolve();\n            };\n            request.onerror = (evt) => {\n                console.error(\"error deleting image\", evt);\n                reject(evt);\n            };\n        });\n    }\n\n    async listImages(\n        updated_at: number,\n        direction: IDBCursorDirection,\n        count: number,\n        search: string\n    ): Promise<LocalImage[]> {\n        // use updated_at index\n        if (!this.db) {\n            throw new Error(\"not initialized\");\n        }\n        const transaction = this.db.transaction([\"images\"]);\n        const store = transaction.objectStore(\"images\");\n        const index = store.index(\"updated_at\");\n        const range =\n            direction == \"next\"\n                ? IDBKeyRange.lowerBound(updated_at)\n                : IDBKeyRange.upperBound(updated_at);\n        const request = index.openCursor(range, direction);\n        return new Promise((resolve, reject) => {\n            const images: LocalImage[] = [];\n            request.onsuccess = (evt) => {\n                const cursor = request.result;\n                if (cursor) {\n                    const image: LocalImage = this.hydrateImage(cursor.value);\n                    const prompt = (image.params.prompt || \"\").toLowerCase();\n                    if (\n                        !image.deleted_at &&\n                        (!search || prompt.includes(search.toLowerCase()))\n                    ) {\n                        images.push(image);\n                    }\n                    if (images.length < count) {\n                        cursor.continue();\n                    } else {\n                        resolve(images);\n                    }\n                } else {\n                    resolve(images);\n                }\n            };\n            request.onerror = (evt) => {\n                console.error(\"error listing images\", evt);\n                reject(evt);\n            };\n        });\n    }\n\n    async clearImages(): Promise<void> {\n        // clear from both indexes\n        if (!this.db) {\n            throw new Error(\"not initialized\");\n        }\n        const transaction = this.db.transaction([\"images\"], \"readwrite\");\n        const imagesStore = transaction.objectStore(\"images\");\n        const imagesRequest = imagesStore.clear();\n        return new Promise((resolve, reject) => {\n            imagesRequest.onsuccess = (evt) => {\n                resolve();\n            };\n            imagesRequest.onerror = (evt) => {\n                console.error(\"error clearing images\", evt);\n                reject(evt);\n            };\n        });\n    }\n\n    async getDeletedImages(olderThan?: number): Promise<LocalImage[]> {\n        if (!this.db) {\n            throw new Error(\"not initialized\");\n        }\n        // refactor to use deleted_at index\n        const transaction = this.db.transaction([\"images\"]);\n        const store = transaction.objectStore(\"images\");\n        const index = store.index(\"deleted_at\");\n        // const request = index.openCursor();\n        // get cursor for all deleted_at values\n        const request = index.openCursor(\n            olderThan\n                ? IDBKeyRange.upperBound(olderThan)\n                : IDBKeyRange.lowerBound(1),\n            olderThan ? \"prev\" : \"next\"\n        );\n        return new Promise((resolve, reject) => {\n            const images: LocalImage[] = [];\n            request.onsuccess = (evt) => {\n                const cursor = request.result;\n                if (cursor) {\n                    const image: LocalImage = cursor.value;\n                    if (images.length < 50 && image.deleted_at) {\n                        images.push(cursor.value);\n                    }\n                    cursor.continue();\n                } else {\n                    resolve(images);\n                }\n            };\n            request.onerror = (evt) => {\n                console.error(\"error listing images\", evt);\n                reject(evt);\n            };\n        });\n    }\n\n    async clearDeletedImages(): Promise<void> {\n        if (!this.db) {\n            throw new Error(\"not initialized\");\n        }\n        let deletedImages = await this.getDeletedImages();\n        while (deletedImages.length > 0) {\n            // hard delete all deleted images\n            const promises = deletedImages.map((image) => {\n                return this.hardDeleteImage(image.id);\n            });\n            await Promise.all(promises);\n            deletedImages = await this.getDeletedImages();\n        }\n    }\n\n    async cleanupDeletedImages(): Promise<void> {\n        // delete images that are more than 1 day old\n        let deletedImages = await this.getDeletedImages(\n            moment().subtract(1, \"hours\").valueOf()\n        );\n        while (deletedImages.length > 0) {\n            // hard delete all deleted images\n            const promises = deletedImages.map((image) => {\n                return this.hardDeleteImage(image.id);\n            });\n            await Promise.all(promises);\n            deletedImages = await this.getDeletedImages(\n                moment().subtract(1, \"hours\").valueOf()\n            );\n        }\n    }\n}\n","// Login react component with hooks\nimport React, { useState, FC } from \"react\";\nimport * as axios from \"axios\";\nimport qs from \"qs\";\nimport { AIBrushApi, LoginResult } from \"../client/api\";\n\nconsole.log(process.env)\nconst DISCORD_CLIENT_ID = \"1043951225944678490\";\n\ninterface LoginProps {\n    client: AIBrushApi;\n    onLogin: (loginResult: LoginResult) => void;\n}\n\nexport const Login: FC<LoginProps> = (props) => {\n    // login form accepts email only\n    const [email, setEmail] = useState(\"\");\n    const [emailSubmitted, setEmailSubmitted] = useState(false);\n    const [code, setCode] = useState(\"\");\n    const [err, setErr] = useState(\"\");\n\n    // check query string for invite_code\n    const query = window.location.search;\n    const queryParams = qs.parse(query.substring(1));\n    const inviteCode = queryParams[\"invite_code\"];\n\n    const onLogin = async () => {\n        // clear error\n        setErr(\"\");\n        // validate valid email\n        if (!email.match(/^[^@]+@[^@]+\\.[^@]+$/)) {\n            setErr(\"Invalid email address\");\n            return;\n        }\n\n        try {\n            await props.client.login({\n                email: email,\n                invite_code: inviteCode as string,\n            });\n            setEmailSubmitted(true);\n        } catch (err) {\n            console.error(err);\n            setErr(\"Could not login\");\n        }\n    };\n\n    const discordLink = () => {\n        // localhost url:\n        // https://discord.com/api/oauth2/authorize?client_id=1043951225944678490&redirect_uri=http%3A%2F%2Flocalhost%3A3001%2Fdiscord-login&response_type=code&scope=identify%20email\n        // prod url:\n        // https://discord.com/api/oauth2/authorize?client_id=1043951225944678490&redirect_uri=https%3A%2F%2Fwww.aibrush.art%2Fdiscord-login&response_type=code&scope=identify%20email\n        const host = window.location.host;\n        const protocol = window.location.protocol;\n        const redirectUri = `${protocol}//${host}/discord-login`;\n        const url = `https://discord.com/api/oauth2/authorize?client_id=${DISCORD_CLIENT_ID}&redirect_uri=${redirectUri}&response_type=code&scope=identify%20email`;\n        return url;\n    };\n\n    const onVerify = async () => {\n        // clear error\n        setErr(\"\");\n        // attempt to verify code\n        try {\n            const result = await props.client.verify({\n                email,\n                code,\n            });\n            props.onLogin(result.data);\n        } catch (err) {\n            console.error(err);\n            setErr(\"Failed to verify code\");\n        }\n    };\n\n    // bootstrap login form\n    return (\n        <>\n            <div\n                className=\"row\"\n                style={{\n                    height: \"100vh\",\n                    marginLeft: \"0px\",\n                    marginRight: \"0px\",\n                }}\n            >\n                <div className=\"col-md-6 login-splash\">\n                    {/* <div className=\"center-cropped\" style={{backgroundImage: \"url(/images/scifi-dreamland.png)\"}}></div> */}\n                    <img\n                        className=\"center-cropped\"\n                        src=\"/images/scifi-dreamland.png\"\n                    />\n                </div>\n                <div className=\"col-md-6\">\n                    <div\n                        style={{\n                            fontWeight: 500,\n                            fontSize: \"48px\",\n                            marginTop: \"200px\",\n                        }}\n                    >\n                        AiBrush\n                    </div>\n\n                    <div\n                        style={{\n                            marginLeft: \"10%\",\n                            marginRight: \"10%\",\n                            marginTop: \"88px\",\n                            marginBottom: \"24px\",\n                        }}\n                    >\n                        Login With Email\n                    </div>\n                    {/* Display error if one is set */}\n                    {/* Use <p class=\"text-danger\" */}\n                    {err && <p className=\"text-danger\">{err}</p>}\n                    {err && (\n                        <p className=\"text-info\">\n                            If you don't have an account yet, request one by\n                            sending an email to{\" \"}\n                            <a href=\"mailto:admin@aibrush.art\">\n                                admin@aibrush.art\n                            </a>\n                        </p>\n                    )}\n                    <div\n                        style={{\n                            marginLeft: \"10%\",\n                            marginRight: \"10%\",\n                            marginTop: \"24px\",\n                            textAlign: \"left\",\n                        }}\n                    >\n                        {/* If email submitted, show verify code form*/}\n                        {emailSubmitted && (\n                            <>\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"verifyCode\">\n                                        Verify Code\n                                    </label>\n                                    <input\n                                        type=\"text\"\n                                        className=\"form-control\"\n                                        id=\"verifyCode\"\n                                        placeholder=\"Verification Code\"\n                                        value={code}\n                                        onChange={(e) =>\n                                            setCode(e.target.value)\n                                        }\n                                    />\n                                </div>\n                                {/* Cancel verification and go back to email */}\n                                <button\n                                    className=\"btn btn-secondary\"\n                                    onClick={() => setEmailSubmitted(false)}\n                                >\n                                    Cancel\n                                </button>\n                                &nbsp;\n                                {/* Verify code */}\n                                <button\n                                    type=\"button\"\n                                    className=\"btn btn-primary\"\n                                    onClick={(e) => {\n                                        e.preventDefault();\n                                        onVerify();\n                                    }}\n                                >\n                                    Verify\n                                </button>\n                            </>\n                        )}\n                        {/* Else, show login form */}\n                        {!emailSubmitted && (\n                            <>\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"email\">Email address</label>\n                                    <input\n                                        type=\"email\"\n                                        className=\"form-control\"\n                                        id=\"email\"\n                                        aria-describedby=\"emailHelp\"\n                                        placeholder=\"Enter email\"\n                                        value={email}\n                                        onChange={(e) =>\n                                            setEmail(e.target.value.trim())\n                                        }\n                                    />\n                                </div>\n                                <button\n                                    type=\"button\"\n                                    className=\"btn btn-primary\"\n                                    style={{ float: \"right\" }}\n                                    onClick={(e) => {\n                                        e.preventDefault();\n                                        onLogin();\n                                    }}\n                                >\n                                    Login\n                                </button>\n                            </>\n                        )}\n                    </div>\n                    <div\n                        style={{\n                            marginLeft: \"10%\",\n                            marginRight: \"10%\",\n                            marginTop: \"88px\",\n                            marginBottom: \"24px\",\n                        }}\n                    >\n                        <hr/>\n                        OR\n                    </div>\n                    <div\n                        style={{\n                            marginLeft: \"10%\",\n                            marginRight: \"10%\",\n                            marginTop: \"24px\",\n                        }}\n                    >\n                        <a href={discordLink()} className=\"btn btn-primary\">\n                            <i className=\"fab fa-discord\"></i> Login With Discord\n                        </a>\n                    </div>\n                </div>\n            </div>\n        </>\n    );\n};\n","// Given a set of credentials, this component will refresh them\n// every 5 minutes and invoke the onCredentialsRefreshed callback\n\nimport React, { useEffect, FC } from \"react\"\nimport { LoginResult, AIBrushApi } from \"../client/api\";\n\ninterface TokenRefresherProps {\n    onCredentialsRefreshed: (loginResult: LoginResult) => void;\n    onCredentialsExpired: () => void;\n    api: AIBrushApi;\n    credentials: LoginResult;\n}\n\nexport const TokenRefresher : FC<TokenRefresherProps> = ({ onCredentialsRefreshed, onCredentialsExpired, api, credentials }) => {\n    useEffect(() => {\n        const interval = setInterval(() => {\n            if (credentials && credentials.refreshToken) {\n                api.refresh({refreshToken: credentials.refreshToken}).then(loginResult => {\n                    onCredentialsRefreshed(loginResult.data);\n                }).catch(() => {\n                    onCredentialsExpired();\n                });\n            }\n\n        }, 5 * 60 * 1000);\n        return () => {\n            clearInterval(interval);\n        };\n    }, [credentials, api, onCredentialsRefreshed]);\n    return <div></div>;\n}","import React, { FC, useEffect, useState } from 'react';\nimport { AIBrushApi } from \"../client/api\";\n\ninterface HealthcheckerProps {\n    api: AIBrushApi;\n}\n\nexport const Healthchecker: FC<HealthcheckerProps> = ({ api }) => {\n    // automatically check health every 5 seconds\n    const [healthCheck, setHealthCheck] = useState(true);\n    \n    useEffect(() => {\n        const interval = setInterval(() => {\n            api.healthcheck().then(() => setHealthCheck(true)).catch(() => setHealthCheck(false));\n        }, 5000);\n\n        return () => clearInterval(interval);\n    }, [api]);\n\n    // only display bootstrap danger alert if healthcheck failed\n    // \"service is unavailable\"\n    return (\n        <div className=\"alert alert-danger\" role=\"alert\" style={{ display: healthCheck ? 'none' : 'block' }}>\n            <strong>Looks like we're having some trouble reaching the server.</strong>\n        </div>\n    );\n}\n\n","import React, { useState } from \"react\";\nimport { Button, Form, InputGroup, Alert } from \"react-bootstrap\";\nimport { AIBrushApi, CreateDepositCodeInput } from \"../../client/api\";\nimport CopyToClipboard from \"react-copy-to-clipboard\";\n\ninterface Props {\n    api: AIBrushApi;\n}\n\nconst GenerateCode: React.FC<Props> = ({ api }) => {\n    const [amount, setAmount] = useState<number>(100);\n    const [generatedCode, setGeneratedCode] = useState<string | null>(null);\n    const [copied, setCopied] = useState<boolean>(false);\n\n    const handleSubmit = async (event: React.FormEvent) => {\n        event.preventDefault();\n\n        const input: CreateDepositCodeInput = { amount };\n        const result = await api.createDepositCode(input);\n        setGeneratedCode(result.data.code);\n    };\n\n    const handleCopy = () => {\n        setCopied(true);\n        setTimeout(() => setCopied(false), 3000);\n    };\n\n    return (\n        <div>\n            <h4>Generate deposit code</h4>\n            <Form onSubmit={handleSubmit} style={{marginTop: \"16px\"}}>\n                <InputGroup className=\"mb-3\">\n                    {/* amount label */}\n                    <label style={{fontSize: \"24px\", marginRight: \"8px\"}}>Amount:</label>\n                    <Form.Control\n                        type=\"number\"\n                        placeholder=\"Amount\"\n                        value={amount}\n                        onChange={(e) => setAmount(parseInt(e.target.value))}\n                    />\n                    <InputGroup.Append>\n                        <Button\n                            variant=\"primary\"\n                            type=\"submit\"\n                            style={{ marginLeft: \"16px\" }}\n                        >\n                            Generate Code\n                        </Button>\n                    </InputGroup.Append>\n                </InputGroup>\n            </Form>\n\n            {generatedCode && (\n                <div className=\"mb-3\">\n                    <strong>Generated Code: </strong> {generatedCode}\n                    <CopyToClipboard text={generatedCode} onCopy={handleCopy}>\n                        <Button variant=\"secondary\" className=\"ml-2\">\n                            Copy to clipboard\n                        </Button>\n                    </CopyToClipboard>\n                </div>\n            )}\n\n            {copied && (\n                <Alert variant=\"success\">Code copied to clipboard!</Alert>\n            )}\n        </div>\n    );\n};\n\nexport default GenerateCode;\n","import { FC, useEffect, useState } from \"react\";\nimport { AIBrushApi } from \"../../client/api\";\nimport { WorkerSettings, WorkerSettingsJson } from \"../../lib/globalSettings\";\n\ninterface Props {\n    api: AIBrushApi;\n}\n\n// global settings all have a \"settings_key\" and \"settings_json\" field. settings_json is any.\n\n// default \"workers\" setting:\n// {\n//     \"minimum_worker_allocations\": {\n//         \"stable_diffusion\": 0,\n//         \"stable_diffusion_inpainting\": 0,\n//         \"swinir\": 0,\n//     }\n// }\n\nexport const GlobalSettings: FC<Props> = ({ api }) => {\n    const [workerSettings, setWorkerSettings] = useState<WorkerSettingsJson>({\n        minimum_worker_allocations: {\n            stable_diffusion: 0,\n            stable_diffusion_inpainting: 0,\n            swinir: 0,\n        },\n    });\n    const [saving, setSaving] = useState<boolean>(false);\n\n    const loadWorkerSettings = async () => {\n        const settings = await api.getGlobalSettings(\"workers\");\n        setWorkerSettings(settings.data.settings_json as any);\n    };\n\n    const saveWorkerSettings = async () => {\n        setSaving(true);\n        try {\n            await api.updateGlobalSettings(\"workers\", {\n                settings_json: workerSettings,\n            });\n        } finally {\n            setSaving(false);\n        }\n    };\n\n    useEffect(() => {\n        loadWorkerSettings();\n    }, []);\n\n    return (\n        <div style={{paddingBottom: \"48px\"}}>\n            {/* Header: Create new image */}\n            <div className=\"row\">\n                <div className=\"col-12\">\n                    <h1>Global Settings</h1>\n                </div>\n            </div>\n            {/* 50px vertical spacer */}\n            <div className=\"row\">\n                <div className=\"col-12\">\n                    <div className=\"spacer\" />\n                </div>\n            </div>\n            {/* slider from 0 to 10 for each model */}\n            <div className=\"row\">\n                <div className=\"col-12\">\n                    <label htmlFor=\"stable_diffusion\">\n                        stable_diffusion: {workerSettings.minimum_worker_allocations.stable_diffusion}\n                    </label>\n                    <input\n                        style={{marginLeft: \"16px\"}}\n                        type=\"range\"\n                        min={0}\n                        max={10}\n                        value={workerSettings.minimum_worker_allocations.stable_diffusion}\n                        className=\"form-range\"\n                        id=\"stable_diffusion\"\n                        onChange={(e) => {\n                            setWorkerSettings({\n                                ...workerSettings,\n                                minimum_worker_allocations: {\n                                    ...workerSettings.minimum_worker_allocations,\n                                    stable_diffusion: parseInt(e.target.value),\n                                },\n                            });\n                        }}\n                    />\n                </div>\n            </div>\n            <div className=\"row\">\n                <div className=\"col-12\">\n                    <label htmlFor=\"stable_diffusion_inpainting\">\n                        stable_diffusion_inpainting: {workerSettings.minimum_worker_allocations.stable_diffusion_inpainting}\n                    </label>\n                    <input\n                        style={{marginLeft: \"16px\"}}\n                        type=\"range\"\n                        min={0}\n                        max={10}\n                        value={workerSettings.minimum_worker_allocations.stable_diffusion_inpainting}\n                        className=\"form-range\"\n                        id=\"stable_diffusion_inpainting\"\n                        onChange={(e) => {\n                            setWorkerSettings({\n                                ...workerSettings,\n                                minimum_worker_allocations: {\n                                    ...workerSettings.minimum_worker_allocations,\n                                    stable_diffusion_inpainting: parseInt(e.target.value),\n                                },\n                            });\n                        }}\n                    />\n                </div>\n            </div>\n            <div className=\"row\">\n                <div className=\"col-12\">\n                    <label htmlFor=\"swinir\">\n                        swinir: {workerSettings.minimum_worker_allocations.swinir}\n                    </label>\n                    <input\n                        style={{marginLeft: \"16px\"}}\n                        type=\"range\"\n                        min={0}\n                        max={10}\n                        value={workerSettings.minimum_worker_allocations.swinir}\n                        className=\"form-range\"\n                        id=\"swinir\"\n                        onChange={(e) => {\n                            setWorkerSettings({\n                                ...workerSettings,\n                                minimum_worker_allocations: {\n                                    ...workerSettings.minimum_worker_allocations,\n                                    swinir: parseInt(e.target.value),\n                                },\n                            });\n                        }}\n                    />\n                </div>\n            </div>\n            \n            \n            {/* bottom row: save button */}\n            <div className=\"row\">\n                <div className=\"col-12\">\n                    <button className=\"btn btn-primary\" onClick={saveWorkerSettings} disabled={saving}>\n                        {saving ? <>\n                            <i className=\"fas fa-spinner fa-spin\" />\n                            &nbsp; Saving...\n                        </> : \"Save\"}\n                    </button>\n                </div>\n            </div>\n        </div>\n    );\n};","import React, { FC, useState, useEffect, useRef } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { AIBrushApi } from \"../../client/api\";\nimport GenerateCode from \"./GenerateCode\";\nimport { GlobalSettings } from \"./GlobalSettings\";\n\ninterface Props {\n    api: AIBrushApi;\n}\n\nexport const Admin: FC<Props> = ({ api }) => {\n    const [links, setLinks] = useState<string[]>([]);\n\n    const onGenerateLink = async () => {\n        const inviteCode = await api.createInviteCode();\n        setLinks([...links, `/?invite_code=${inviteCode.data.id}`]);\n    };\n\n    return (\n        <div style={{ paddingBottom: \"48px\" }}>\n            {/* Header: Create new image */}\n            <div className=\"row\">\n                <div className=\"col-12\">\n                    <h1>Admin features</h1>\n                </div>\n            </div>\n            {/* 50px vertical spacer */}\n            <div className=\"row\">\n                <div className=\"col-12\">\n                    <div className=\"spacer\" />\n                </div>\n            </div>\n            <div className=\"row\">\n                <div className=\"col-12\">\n                    <div\n                        className=\"d-flex justify-content-center align-items-center\"\n                        style={{ height: \"100%\" }}\n                    >\n                        <GenerateCode api={api} />\n                    </div>\n                </div>\n            </div>\n            <hr />\n            <GlobalSettings api={api} />\n        </div>\n    );\n};\n","import React, { FC, useEffect, useState } from \"react\";\nimport { AIBrushApi, Image } from \"../client\";\nimport moment from \"moment\";\nimport { ImageThumbnail } from \"../components/ImageThumbnail\";\nimport { useHistory } from \"react-router-dom\";\nimport { BusyModal } from \"../components/BusyModal\";\n\ninterface Props {\n    api: AIBrushApi;\n    assetsUrl: string;\n}\n\nexport const DeletedImages: FC<Props> = ({ api, assetsUrl }) => {\n    const [images, setImages] = useState<Image[]>([]);\n    const [deleting, setDeleting] = useState(false);\n\n    const history = useHistory();\n\n    const loadImages = async () => {\n        const cursor = moment().add(-24, \"hours\").valueOf();\n        // TODO: special api call for deleted images?\n        const resp = await api.listImages(cursor, \"\", 100, \"asc\");\n        setImages(\n            (\n                resp.data.images?.filter((image) => !!image.deleted_at) || []\n            ).sort((a, b) => {\n                if (a.deleted_at && b.deleted_at) {\n                    return b.deleted_at - a.deleted_at;\n                }\n                return 0;\n            })\n        );\n    };\n\n    const onDeleteImage = async (image: Image) => {\n        setImages(images.filter((i) => i.id !== image.id));\n        await api.deleteImage(image.id);\n    };\n\n    const onDeleteAllImages = async () => {\n        setDeleting(true);\n        try {\n            await Promise.all(images.map((image) => api.deleteImage(image.id)));\n            setImages([]);\n        } finally {\n            setDeleting(false);\n        }\n    };\n\n    const onRestoreImage = async (image: Image) => {\n        setImages(images.filter((i) => i.id !== image.id));\n        await api.updateImage(image.id, { deleted_at: null });\n    };\n\n    useEffect(() => {\n        loadImages();\n    }, [api]);\n\n    return (\n        <div>\n            <div>\n                <div className=\"row\">\n                    <div className=\"col-12\">\n                        <h1 style={{ fontSize: \"40px\", textAlign: \"left\" }}>\n                            <i\n                                style={{ cursor: \"pointer\" }}\n                                onClick={() => history.goBack()}\n                                className=\"fas fa-chevron-left\"\n                            ></i>\n                            &nbsp; Deleted Images\n                        </h1>\n                        {/* float right \"delete all\" button */}\n                        <button\n                            className=\"btn btn-danger btn-sm image-popup-delete-button\"\n                            onClick={onDeleteAllImages}\n                            style={{\n                                float: \"right\",\n                                marginRight: \"8px\",\n                            }}\n                        >\n                            <i className=\"fa fa-trash\"></i>&nbsp;Delete All\n                        </button>\n                    </div>\n                </div>\n                <div className=\"row\" style={{ marginTop: \"32px\" }}>\n                    <div className=\"col-sm-2 offset-sm-2\">Image</div>\n                    <div className=\"col-sm-8\">Action</div>\n                </div>\n                {images.map((image) => (\n                    <div\n                        className=\"row\"\n                        style={{\n                            marginTop: \"16px\",\n                            borderBottom: \"1px solid #303030\",\n                        }}\n                        key={image.id}\n                    >\n                        <div className=\"col-sm-2 offset-sm-2\">\n                            <ImageThumbnail\n                                assetsUrl={assetsUrl}\n                                image={image}\n                                censorNSFW={true}\n                            />\n                        </div>\n                        <div\n                            className=\"col-sm-8\"\n                            style={{\n                                paddingTop: \"64px\",\n                                paddingBottom: \"64px\",\n                            }}\n                        >\n                            <button\n                                className=\"btn btn-danger btn-sm image-popup-delete-button\"\n                                onClick={() => onDeleteImage(image)}\n                                style={{\n                                    marginRight: \"8px\",\n                                }}\n                            >\n                                <i className=\"fa fa-trash\"></i>&nbsp;Delete\n                            </button>\n                            <button\n                                className=\"btn btn-primary btn-sm image-popup-restore-button\"\n                                onClick={() => onRestoreImage(image)}\n                            >\n                                <i className=\"fa fa-undo\"></i>&nbsp;Restore\n                            </button>\n                        </div>\n                    </div>\n                ))}\n            </div>\n            <BusyModal show={deleting} title=\"Deleting Images\">\n                Please wait while we delete all images...\n            </BusyModal>\n        </div>\n    );\n};\n","import React, { useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { AIBrushApi, LoginResult } from \"../client\";\n\ninterface LoginProps {\n    client: AIBrushApi;\n    onLogin: (loginResult: LoginResult) => void;\n}\n\nexport const DiscordLogin: React.FC<LoginProps> = ({client, onLogin}) => {\n    const history = useHistory();\n    const code = new URLSearchParams(window.location.search).get(\"code\");\n    \n    useEffect(() => {\n        if (code) {\n            console.log(\"logging in with code\", code);\n            client.discordLogin({code}).then((result) => {\n                console.log(\"login result\", result);\n                if (result.data.accessToken) {\n                    onLogin(result.data);\n                }\n                \n                history.push(\"/\");\n            });\n        } else {\n            history.push(\"/\");\n        }\n    }, [])\n\n    return null;\n}","import React, { FC, useEffect, useState } from \"react\";\nimport { AIBrushApi, Image } from \"../client\";\nimport moment from \"moment\";\nimport { ImageThumbnail } from \"../components/ImageThumbnail\";\nimport { useHistory } from \"react-router-dom\";\nimport { LocalImagesStore } from \"../lib/localImagesStore\";\nimport { BusyModal } from \"../components/BusyModal\";\n\ninterface Props {\n    localImages: LocalImagesStore;\n}\n\nexport const LocalDeletedImages: FC<Props> = ({ localImages }) => {\n    const [images, setImages] = useState<Image[]>([]);\n    const [deleting, setDeleting] = useState(false);\n\n    const history = useHistory();\n\n    const loadImages = async () => {\n        const deletedImages = await localImages.getDeletedImages();\n        setImages(deletedImages);\n    };\n\n    const onDeleteImage = async (image: Image) => {\n        setImages(images.filter((i) => i.id !== image.id));\n        await localImages.deleteImage(image.id);\n        if (images.length <= 5) {\n            loadImages();\n        }\n    };\n\n    const onDeleteAllImages = async () => {\n        setDeleting(true);\n        try {\n            await localImages.clearDeletedImages();\n            setImages([]);\n        } finally {\n            setDeleting(false);\n        }\n    };\n\n    const onRestoreImage = async (image: Image) => {\n        setImages(images.filter((i) => i.id !== image.id));\n        await localImages.saveImage({\n            ...image,\n            deleted_at: undefined,\n        });\n    };\n\n    useEffect(() => {\n        loadImages();\n    }, [localImages]);\n\n    return (\n        <div>\n            <div>\n                <div className=\"row\">\n                    <div className=\"col-12\">\n                        <h1 style={{ fontSize: \"40px\", textAlign: \"left\" }}>\n                            <i\n                                style={{ cursor: \"pointer\" }}\n                                onClick={() => history.goBack()}\n                                className=\"fas fa-chevron-left\"\n                            ></i>\n                            &nbsp; Deleted Images\n                        </h1>\n                        <button\n                            className=\"btn btn-danger btn-sm image-popup-delete-button\"\n                            onClick={onDeleteAllImages}\n                            style={{\n                                float: \"right\",\n                                marginRight: \"8px\",\n                            }}\n                        >\n                            <i className=\"fa fa-trash\"></i>&nbsp;Delete All\n                        </button>\n                    </div>\n                </div>\n                <div className=\"row\" style={{ marginTop: \"32px\" }}>\n                    <div className=\"col-sm-2 offset-sm-2\">Image</div>\n                    <div className=\"col-sm-8\">Action</div>\n                </div>\n                {images.map((image) => (\n                    <div\n                        className=\"row\"\n                        style={{\n                            marginTop: \"16px\",\n                            borderBottom: \"1px solid #303030\",\n                        }}\n                        key={image.id}\n                    >\n                        <div className=\"col-sm-2 offset-sm-2\">\n                            <ImageThumbnail\n                                assetsUrl={\"\"}\n                                image={image}\n                                censorNSFW={true}\n                            />\n                        </div>\n                        <div\n                            className=\"col-sm-8\"\n                            style={{\n                                paddingTop: \"64px\",\n                                paddingBottom: \"64px\",\n                            }}\n                        >\n                            <button\n                                className=\"btn btn-danger btn-sm image-popup-delete-button\"\n                                onClick={() => onDeleteImage(image)}\n                                style={{\n                                    marginRight: \"8px\",\n                                }}\n                            >\n                                <i className=\"fa fa-trash\"></i>&nbsp;Delete\n                            </button>\n                            <button\n                                className=\"btn btn-primary btn-sm image-popup-restore-button\"\n                                onClick={() => onRestoreImage(image)}\n                            >\n                                <i className=\"fa fa-undo\"></i>&nbsp;Restore\n                            </button>\n                        </div>\n                    </div>\n                ))}\n            </div>\n            <BusyModal show={deleting} title=\"Deleting Images\">\n                Please wait while we delete all images...\n            </BusyModal>\n        </div>\n    );\n};\n","// V2 page\nimport React, { FC, useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport Dropdown from \"react-bootstrap/Dropdown\";\nimport { useParams, useHistory, Link } from \"react-router-dom\";\nimport moment from \"moment\";\nimport ScrollToTop from \"react-scroll-to-top\";\nimport { AIBrushApi } from \"../client\";\nimport { CreateImageInput, Image, StatusEnum } from \"../client/api\";\nimport { ImageThumbnail } from \"../components/ImageThumbnail\";\nimport { ImagePrompt, defaultArgs } from \"../components/ImagePrompt\";\nimport {\n    createEncodedThumbnail,\n    encodedImageToBlob,\n    uploadBlob,\n} from \"../lib/imageutil\";\n\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport { ImagePopup } from \"../components/ImagePopup\";\nimport { BusyModal } from \"../components/BusyModal\";\nimport { PendingImagesThumbnail } from \"../components/PendingImagesThumbnail\";\nimport { PendingImages } from \"../components/PendingImages\";\nimport {\n    ApiSocket,\n    NOTIFICATION_IMAGE_DELETED,\n    NOTIFICATION_IMAGE_UPDATED,\n} from \"../lib/apisocket\";\nimport { ImagesCache } from \"../lib/imagesCache\";\n\ninterface Props {\n    api: AIBrushApi;\n    apiSocket: ApiSocket;\n    assetsUrl: string;\n}\n\nconst savedImagesCache = new ImagesCache();\n\nexport const SavedImagesPage: FC<Props> = ({ api, apiSocket, assetsUrl }) => {\n    const [creating, setCreating] = useState(false);\n    const [selectedImage, setSelectedImage] = useState<Image | null>(null);\n    const [parentImage, setParentImage] = useState<Image | null>(null);\n\n    const [showPendingImages, setShowPendingImages] = useState(false);\n\n    const [images, setImages] = useState<Array<Image>>([]);\n    const [err, setErr] = useState<string | null>(null);\n    const [hasMore, setHasMore] = useState<boolean>(true);\n    const [search, setSearch] = useState<string>(\"\");\n    const [searchDebounce, setSearchDebounce] = useState<string>(\"\");\n\n    const [bulkDeleteSelecting, setBulkDeleteSelecting] = useState(false);\n    const [bulkDeleting, setBulkDeleting] = useState(false);\n    const [bulkDeleteIds, setBulkDeleteIds] = useState<{\n        [key: string]: boolean;\n    }>({});\n\n    const [censorNSFW, setCensorNSFW] = useState(true);\n\n    const { id } = useParams<{ id?: string }>();\n    const history = useHistory();\n\n    useEffect(() => {\n        let handle = setTimeout(() => {\n            setSearch(searchDebounce);\n        }, 500);\n        return () => {\n            clearTimeout(handle);\n        };\n    }, [searchDebounce]);\n\n    useEffect(() => {\n        if (id) {\n            // check if the image is already loaded\n            const image = images.find((image) => image.id === id);\n            if (image) {\n                setSelectedImage(image);\n            }\n            // refresh\n            api.getImage(id).then((image) => {\n                setSelectedImage(image.data);\n            });\n        } else {\n            setSelectedImage(null);\n        }\n    }, [id]);\n\n    const onSubmit = async (input: CreateImageInput) => {\n        setCreating(true);\n        setParentImage(null);\n        setErr(null);\n        window.scrollTo(0, 0);\n        try {\n            await api.createImage(input);\n        } catch (e: any) {\n            console.error(e);\n            setErr(\"Error creating image\");\n        } finally {\n            setCreating(false);\n        }\n    };\n\n    const onEditNewImage = async (input: CreateImageInput) => {\n        setCreating(true);\n        setParentImage(null);\n        setErr(null);\n        window.scrollTo(0, 0);\n        try {\n            const encodedImage = input.encoded_image!;\n            const encodedThumbnail = await createEncodedThumbnail(encodedImage);\n            const newImages = await api.createImage({\n                ...input,\n                encoded_image: undefined,\n            });\n            if (newImages.data.images) {\n                const image = newImages.data.images![0];\n                const uploadUrls = await api.getImageUploadUrls(image.id);\n                // convert base64 encoded image to binary to upload as image/png with axios\n                const blob = encodedImageToBlob(encodedImage);\n                const thumbnailBlob = encodedImageToBlob(encodedThumbnail);\n                const imagePromise = uploadBlob(\n                    uploadUrls.data.image_url!,\n                    blob\n                );\n                const thumbnailPromise = uploadBlob(\n                    uploadUrls.data.thumbnail_url!,\n                    thumbnailBlob\n                );\n                await Promise.all([imagePromise, thumbnailPromise]);\n\n                history.push(`/image-editor/${image.id}`);\n            }\n        } catch (e: any) {\n            console.error(e);\n            setErr(\"Error creating image\");\n        } finally {\n            setCreating(false);\n        }\n    };\n\n    const onNSFW = (image: Image, nsfw: boolean) => {\n        api.updateImage(image.id, { nsfw }).then((res) => {\n            setImages((images) => {\n                return images.map((i) => {\n                    if (i.id === image.id) {\n                        return res.data;\n                    }\n                    return i;\n                });\n            });\n            setSelectedImage(res.data);\n        });\n    };\n\n    useEffect(() => {\n        if (!api) {\n            return;\n        }\n        const loadImages = async () => {\n            console.log(\"Initial load images\");\n            // clear error\n            setErr(null);\n            setHasMore(true);\n            try {\n                const cursor = moment().add(1, \"minutes\").valueOf();\n                // const resp = await api.listImages(cursor, search, 100, \"desc\");\n                const imagesResult = await savedImagesCache.listImages(\n                    api,\n                    cursor,\n                    search,\n                    100,\n                    \"desc\"\n                );\n                if (imagesResult) {\n                    console.log(\"Initial load images\", imagesResult.length);\n                    setImages(imagesResult.sort(sortImages));\n                }\n                return 0;\n            } catch (err) {\n                setErr(\"Could not load images\");\n                console.error(err);\n            }\n        };\n        loadImages();\n    }, [api, search]);\n\n    useEffect(() => {\n        if (!api) {\n            return;\n        }\n\n        const pollImages = async (images: Array<Image>) => {\n            // clear error\n            setErr(null);\n            // set cursor to max updated_at from images\n            const cursor = images.reduce((max, image) => {\n                return Math.max(max, image.updated_at);\n            }, 0);\n\n            try {\n                const imagesResult = await savedImagesCache.listImages(\n                    api,\n                    cursor + 1,\n                    search,\n                    100,\n                    \"asc\"\n                );\n                if (imagesResult) {\n                    let latestCursor = cursor;\n                    for (let image of imagesResult) {\n                        if (image.updated_at > latestCursor) {\n                            latestCursor = image.updated_at;\n                        }\n                    }\n\n                    // split resp.data.images into \"new\" and \"updated\" lists\n                    // image is \"new\" if it's not in images\n                    const newImages = imagesResult.filter((image) => {\n                        return images.findIndex((i) => i.id === image.id) < 0;\n                    });\n                    const updatedImages = imagesResult.filter((image) => {\n                        return images.findIndex((i) => i.id === image.id) >= 0;\n                    });\n                    setImages((images) => {\n                        const deletedIds: { [key: string]: boolean } = {};\n                        for (let image of newImages) {\n                            if (image.deleted_at) {\n                                deletedIds[image.id] = true;\n                                console.log(\n                                    `Deleting image ${image.id} from list`\n                                );\n                            }\n                        }\n                        for (let image of updatedImages) {\n                            if (image.deleted_at) {\n                                deletedIds[image.id] = true;\n                                console.log(\n                                    `Deleting image ${image.id} from list`\n                                );\n                            }\n                        }\n                        images = images.filter(\n                            (image) => !deletedIds[image.id]\n                        );\n                        return [\n                            ...images.map((image) => {\n                                const updatedImage = updatedImages.find(\n                                    (i) => i.id === image.id\n                                );\n                                if (updatedImage) {\n                                    return updatedImage;\n                                }\n                                return image;\n                            }),\n                            ...newImages.filter((image) => !image.deleted_at),\n                        ].sort(sortImages);\n                    });\n                }\n                return images;\n            } catch (err) {\n                setErr(\"Could not load images\");\n                console.error(err);\n            }\n        };\n\n        // polling is now a fallback for when the websocket connection fails\n        const timerHandle = setInterval(() => {\n            pollImages(images);\n        }, 60 * 1000);\n        return () => {\n            clearInterval(timerHandle);\n        };\n    }, [api, images, search]);\n\n    useEffect(() => {\n        // de-duplicate images by id\n        // first check if there are any duplicates\n        // I know, I should figure out where the duplicates are coming from,\n        // but I'm lazy.\n        const ids = images.map((image) => image.id);\n        const uniqueIds = new Set(ids);\n        if (ids.length !== uniqueIds.size) {\n            setImages((images) => {\n                // there are duplicates\n                const uniqueImages = images.filter((image, index) => {\n                    return ids.indexOf(image.id) === index;\n                });\n                return uniqueImages.sort(sortImages);\n            });\n        }\n    }, [images]);\n\n    useEffect(() => {\n        const onMessage = async (message: string) => {\n            const payload = JSON.parse(message);\n            if (\n                payload.type === NOTIFICATION_IMAGE_UPDATED ||\n                payload.type === NOTIFICATION_IMAGE_DELETED\n            ) {\n                const updatedImage = await api.getImage(payload.id);\n                if (updatedImage.data.temporary) {\n                    return;\n                }\n                setImages((images) => {\n                    const index = images.findIndex(\n                        (image) => image.id === updatedImage.data.id\n                    );\n                    let updatedImages = images;\n                    if (index >= 0) {\n                        updatedImages = images.map((image) => {\n                            if (image.id === updatedImage.data.id) {\n                                return updatedImage.data;\n                            }\n                            return image;\n                        });\n                    } else {\n                        updatedImages = [...images, updatedImage.data];\n                    }\n                    return updatedImages.sort(sortImages);\n                });\n            }\n        };\n        apiSocket.addMessageListener(onMessage);\n        return () => {\n            apiSocket.removeMessageListener(onMessage);\n        };\n    }, [apiSocket]);\n\n    const isPendingOrProcessing = (image: Image) => {\n        return (\n            image.status === StatusEnum.Pending ||\n            image.status === StatusEnum.Processing\n        );\n    };\n\n    const sortImages = (a: Image, b: Image) => {\n        // pending and processing images always come first\n        if (isPendingOrProcessing(a) && !isPendingOrProcessing(b)) {\n            return -1;\n        } else if (!isPendingOrProcessing(a) && isPendingOrProcessing(b)) {\n            return 1;\n        }\n        // if the parent is the same, sort by score descending\n        // otherwise, sort by updated_at\n        if (\n            a.parent === b.parent &&\n            a.params.prompt == b.params.prompt &&\n            a.status !== StatusEnum.Pending &&\n            b.status !== StatusEnum.Pending\n        ) {\n            // if the score is the same, sort by updated_at\n            let aScore = a.score;\n            let bScore = b.score;\n            // working around a bug where negative score was assigned\n            // for an empty negative prompt.\n            if (a.params.prompt!.trim() !== \"\") {\n                aScore = aScore - a.negative_score;\n            }\n            if (b.params.prompt!.trim() !== \"\") {\n                bScore = bScore - b.negative_score;\n            }\n            if (aScore == bScore) {\n                return b.updated_at - a.updated_at;\n            }\n            return bScore - aScore;\n        }\n\n        return b.updated_at - a.updated_at;\n    };\n\n    const onLoadMore = async () => {\n        // get the minimum updated_at from images\n        let minUpdatedAt = moment().valueOf();\n        images.forEach((image) => {\n            minUpdatedAt = Math.min(minUpdatedAt, image.updated_at);\n        });\n        // load images in descending order from updated_at\n        let imagesResult = await savedImagesCache.listImages(\n            api,\n            minUpdatedAt - 1,\n            search,\n            100,\n            \"desc\"\n        );\n        if (imagesResult && imagesResult.length > 0) {\n            // combine images with new images and sort by updated_at descending\n            setImages((images) => {\n                const imagesById = images.reduce((acc, image) => {\n                    acc[image.id] = image;\n                    return acc;\n                }, {} as { [key: string]: Image });\n                imagesResult = (imagesResult || []).filter(\n                    (image) => !imagesById[image.id]\n                );\n                return [...images, ...(imagesResult || [])].sort(sortImages);\n            });\n        } else {\n            setHasMore(false);\n        }\n    };\n\n    const onDelete = async (image: Image) => {\n        try {\n            await api.deleteImage(image.id);\n        } catch (e) {\n            console.error(e);\n            setErr(\"Error deleting image\");\n        }\n    };\n\n    const onFork = async (image: Image) => {\n        history.push({\n            pathname: \"/\",\n            search: `?parent=${image.id}`,\n        });\n    };\n\n    const onEdit = async (image: Image) => {\n        history.push(`/image-editor/${image.id}`);\n    };\n\n    const onThumbnailClicked = (image: Image) => {\n        // setSelectedImage(image);\n        if (bulkDeleteSelecting) {\n            setBulkDeleteIds({\n                ...bulkDeleteIds,\n                [image.id]: !bulkDeleteIds[image.id],\n            });\n        } else {\n            history.push(`/saved/${image.id}`);\n        }\n    };\n\n    const handleCancelFork = () => {\n        setParentImage(null);\n        window.scrollTo(0, 0);\n    };\n\n    const onConfirmBulkDelete = async () => {\n        try {\n            setBulkDeleting(true);\n            // await api.deleteImages(Object.keys(bulkDeleteIds));\n            const promises = Object.keys(bulkDeleteIds).map((id) => {\n                return api.deleteImage(id);\n            });\n            await Promise.all(promises);\n            setImages((images) => {\n                return images.filter((image) => !bulkDeleteIds[image.id]);\n            });\n            setBulkDeleteIds({});\n            setBulkDeleteSelecting(false);\n        } catch (e) {\n            console.error(e);\n            setErr(\"Error deleting images\");\n        } finally {\n            setBulkDeleting(false);\n        }\n    };\n\n    const completedOrSavedImages = images.filter((image) => {\n        return (\n            !image.deleted_at &&\n            (image.status === StatusEnum.Completed ||\n                image.status === StatusEnum.Saved)\n        );\n    });\n\n    const pendingOrProcessingImages = images.filter(\n        (image) =>\n            !image.deleted_at &&\n            (image.status === StatusEnum.Pending ||\n                image.status === StatusEnum.Processing)\n    );\n\n    const pendingImages = pendingOrProcessingImages.filter(\n        (image) => image.status === StatusEnum.Pending\n    );\n\n    const processingImages = pendingOrProcessingImages.filter(\n        (image) => image.status === StatusEnum.Processing\n    );\n\n    const onSwipe = (image: Image, direction: number) => {\n        // select the previous or next image from the currently selected one\n        const index = images.findIndex((i) => i.id === image.id);\n        if (index === -1) {\n            return;\n        }\n        const newIndex = index + direction;\n        if (newIndex < 0 || newIndex >= images.length) {\n            return;\n        }\n        const newImage = images[newIndex];\n        onThumbnailClicked(newImage);\n    }\n\n    return (\n        <>\n            <h1 style={{ fontSize: \"40px\", textAlign: \"left\" }}>\n                Welcome to AiBrush - Saved\n            </h1>\n\n            <div\n                className=\"saved-images\"\n                style={{ marginTop: \"48px\", paddingBottom: \"48px\" }}\n            >\n                <div style={{ textAlign: \"left\" }}>\n                    <div\n                        className=\"input-group\"\n                        style={{ marginBottom: \"16px\" }}\n                    >\n                        <input\n                            style={{}}\n                            value={searchDebounce}\n                            type=\"search\"\n                            className=\"form-control image-search\"\n                            placeholder=\"Search...\"\n                            onChange={(e) => setSearchDebounce(e.target.value)}\n                        />\n\n                        <div\n                            style={{\n                                float: \"right\",\n                            }}\n                        >\n                            {!bulkDeleteSelecting && (\n                                <>\n                                    <button\n                                        style={{ display: \"inline\" }}\n                                        className=\"btn btn-primary image-popup-button\"\n                                        onClick={() =>\n                                            setCensorNSFW(!censorNSFW)\n                                        }\n                                    >\n                                        {!censorNSFW && (\n                                            <i className=\"fas fa-eye\"></i>\n                                        )}\n                                        {censorNSFW && (\n                                            <i className=\"fas fa-eye-slash\"></i>\n                                        )}\n                                    </button>\n                                    <Dropdown\n                                        style={{\n                                            display: \"inline\",\n                                            marginLeft: \"8px\",\n                                        }}\n                                    >\n                                        <Dropdown.Toggle variant=\"danger\">\n                                            <i className=\"fas fa-trash\"></i>\n                                        </Dropdown.Toggle>\n\n                                        <Dropdown.Menu>\n                                            <Dropdown.Item\n                                                onClick={() =>\n                                                    setBulkDeleteSelecting(true)\n                                                }\n                                            >\n                                                Bulk Delete\n                                            </Dropdown.Item>\n                                            <Dropdown.Item\n                                                onClick={() =>\n                                                    history.push(\n                                                        \"/deleted-images\"\n                                                    )\n                                                }\n                                            >\n                                                View Deleted Images\n                                            </Dropdown.Item>\n                                        </Dropdown.Menu>\n                                    </Dropdown>\n                                </>\n                            )}\n                            {bulkDeleteSelecting && (\n                                <>\n                                    <button\n                                        className=\"btn btn-primary image-popup-button\"\n                                        onClick={() => {\n                                            setBulkDeleteSelecting(false);\n                                            setBulkDeleteIds({});\n                                        }}\n                                    >\n                                        Cancel\n                                    </button>\n                                    <button\n                                        style={{ marginLeft: \"8px\" }}\n                                        className=\"btn image-popup-delete-button\"\n                                        onClick={() => {\n                                            onConfirmBulkDelete();\n                                        }}\n                                    >\n                                        Delete\n                                    </button>\n                                </>\n                            )}\n                        </div>\n                    </div>\n                </div>\n                <InfiniteScroll\n                    dataLength={images.length}\n                    next={onLoadMore}\n                    hasMore={hasMore}\n                    loader={\n                        <>\n                            <hr />\n                            <h4>Loading...</h4>\n                        </>\n                    }\n                >\n                    {pendingOrProcessingImages.length > 0 && (\n                        <PendingImagesThumbnail\n                            pendingCount={pendingImages.length}\n                            processingCount={processingImages.length}\n                            onClick={() => {\n                                setShowPendingImages(true);\n                            }}\n                        />\n                    )}\n                    {completedOrSavedImages.map((image) => (\n                        <ImageThumbnail\n                            key={image.id}\n                            image={image}\n                            assetsUrl={assetsUrl}\n                            onClick={onThumbnailClicked}\n                            bulkDelete={\n                                bulkDeleteSelecting && bulkDeleteIds[image.id]\n                            }\n                            censorNSFW={censorNSFW}\n                        />\n                    ))}\n                </InfiniteScroll>\n            </div>\n\n            {selectedImage && (\n                <ImagePopup\n                    assetsUrl={assetsUrl}\n                    image={selectedImage}\n                    onClose={() => history.push(\"/saved\")}\n                    onDelete={(image) => {\n                        onDelete(image);\n                        setImages(images.filter((i) => i.id !== image.id));\n                        history.push(\"/saved\");\n                    }}\n                    onFork={(image) => {\n                        onFork(image);\n                    }}\n                    onEdit={(image) => {\n                        onEdit(image);\n                    }}\n                    onNSFW={onNSFW}\n                    censorNSFW={censorNSFW}\n                    onSwipe={onSwipe}\n                />\n            )}\n            <ScrollToTop />\n            <BusyModal show={creating} title=\"Creating images\">\n                <p>Please wait while we create your image.</p>\n            </BusyModal>\n            <BusyModal show={bulkDeleting} title=\"Deleting images\">\n                <p>Please wait while we delete your images.</p>\n            </BusyModal>\n            <PendingImages\n                images={pendingOrProcessingImages}\n                onCancel={() => setShowPendingImages(false)}\n                show={showPendingImages}\n                onDeleteImage={(image) => {\n                    onDelete(image);\n                    setImages(images.filter((i) => i.id !== image.id));\n                }}\n            />\n        </>\n    );\n};\n","\n\n// const imagesCache = new KVStore({\n//     dbName: \"saved-images\",\n//     storeName: \"images\",\n// })\n\nimport { AIBrushApi, Image } from \"../client\";\nimport { KVStore } from \"./kvstore\";\n\nexport class ImagesCache {\n\n    private kvstore: KVStore<Image>;\n\n    constructor() {\n        this.kvstore = new KVStore<Image>({\n            dbName: \"saved-images\",\n            storeName: \"images\",\n        });\n    }\n\n    async listImages(api: AIBrushApi, cursor: number, search: string, limit: number, order: \"asc\" | \"desc\"): Promise<Image[] | undefined> {\n        const resp = await api.listImages(cursor, search, limit, order, \"id,updated_at,deleted_at\");\n        if (!resp.data.images) {\n            return undefined;\n        }\n\n        const result: Image[] = [];\n        const batchGetIds: string[] = [];\n        for (const image of resp.data.images) {\n            if (image.deleted_at) {\n                await this.kvstore.deleteItem(image.id);\n            } else {\n                const savedImage = await this.kvstore.getItem(image.id);\n                if (savedImage && savedImage.updated_at === image.updated_at) {\n                    result.push(savedImage);\n                } else {\n                    batchGetIds.push(image.id);\n                }\n            }\n        }\n        if (batchGetIds.length > 0) {\n            const batchResult = await api.batchGetImages(undefined, {\n                ids: batchGetIds,\n            });\n            if (batchResult.data.images) {\n                for (const image of batchResult.data.images) {\n                    await this.kvstore.setItem(image.id, image);\n                    result.push(image);\n                }\n            }\n        }\n        return result;\n    }\n}","import { useEffect, useState, FC } from \"react\";\nimport loadImage from \"blueimp-load-image\";\nimport {\n    splitImage,\n    mergeTiles,\n    SplitResult,\n    ImageUtilWorker,\n} from \"../lib/imageutil\";\nimport * as uuid from \"uuid\";\n\nexport const TestPage: FC = () => {\n    const [originalImage, setOriginalImage] = useState<string | undefined>();\n    const [upscaledImage, setUpscaledImage] = useState<string | undefined>();\n    const [imageWorker, setImageWorker] = useState<\n        ImageUtilWorker | undefined\n    >();\n\n    useEffect(() => {\n        const imageWorker = new ImageUtilWorker();\n        setImageWorker(imageWorker);\n        return () => {\n            imageWorker.destroy();\n        };\n    }, []);\n\n    const imageDataToCanvas = (imageData: ImageData): HTMLCanvasElement => {\n        const canvas = document.createElement(\"canvas\");\n        canvas.width = imageData.width;\n        canvas.height = imageData.height;\n        const ctx = canvas.getContext(\"2d\");\n        if (!ctx) {\n            throw new Error(\"Could not get canvas context\");\n        }\n        ctx.putImageData(imageData, 0, 0);\n        return canvas;\n    };\n\n    const upscaleImageData = (imageData: ImageData): HTMLCanvasElement => {\n        console.log(\"upscaling image data\", imageData.width, imageData.height);\n        const canvas = document.createElement(\"canvas\");\n        canvas.width = imageData.width * 2;\n        canvas.height = imageData.height * 2;\n        const ctx = canvas.getContext(\"2d\");\n        if (!ctx) {\n            throw new Error(\"Could not get canvas context\");\n        }\n        const image = imageDataToCanvas(imageData);\n        ctx.drawImage(image, 0, 0, canvas.width, canvas.height);\n        return canvas;\n    };\n\n    const onImageSelected = async (\n        event: React.ChangeEvent<HTMLInputElement>\n    ) => {\n        if (!imageWorker) {\n            throw new Error(\"Image worker not initialized\");\n        }\n        const files = event.target.files;\n        if (files && files.length > 0) {\n            loadImage(\n                files[0],\n                async (img) => {\n                    const c = img as HTMLCanvasElement;\n                    const originalImage = c.toDataURL(\"image/png\");\n                    setOriginalImage(originalImage);\n\n                    const ctx = c.getContext(\"2d\");\n                    if (ctx) {\n                        const originalImageData = ctx.getImageData(\n                            0,\n                            0,\n                            c.width,\n                            c.height\n                        );\n                        const splitResult = splitImage(originalImageData);\n                        if (!splitResult) {\n                            setUpscaledImage(originalImage);\n                            return;\n                        }\n                        console.log(\"splitResult\", {\n                            numTilesX: splitResult.numTilesX,\n                            numTilesY: splitResult.numTilesY,\n                            tileSize: splitResult.tileSize,\n                        });\n                        splitResult.tileSize *= 2;\n                        splitResult.imageWidth *= 2;\n                        splitResult.imageHeight *= 2;\n                        for (let x = 0; x < splitResult.numTilesX; x++) {\n                            for (let y = 0; y < splitResult.numTilesY; y++) {\n                                const tile = splitResult.tiles[x][y];\n                                const upscaledTile = upscaleImageData(tile);\n                                const upscaledImageData = upscaledTile\n                                .getContext(\"2d\")!\n                                .getImageData(\n                                    0,\n                                    0,\n                                    upscaledTile.width,\n                                    upscaledTile.height\n                                );\n                                const id = uuid.v4();\n                                const feathered =\n                                    await imageWorker.processRequest({\n                                        id,\n                                        alphaMode: \"none\",\n                                        feather: true,\n                                        width: splitResult.imageWidth,\n                                        height: splitResult.imageHeight,\n                                        pixels: upscaledImageData.data,\n                                        selectionOverlay: {\n                                            x:\n                                                x *\n                                                (splitResult.tileSize - 64),\n                                            y:\n                                                y *\n                                                (splitResult.tileSize - 64),\n                                            width: upscaledTile.width,\n                                            height: upscaledTile.height,\n                                        },\n                                        upscale: true,\n                                        featherWidth: 64,\n                                    });\n\n                                splitResult.tiles[x][y] = new ImageData(feathered.pixels, upscaledTile.width, upscaledTile.height)\n                            }\n                        }\n                        const upscaledImageData = mergeTiles(splitResult);\n                        console.log(\n                            \"upscaled image data size\",\n                            upscaledImageData.width,\n                            upscaledImageData.height\n                        );\n                        const upscaledCanvas =\n                            imageDataToCanvas(upscaledImageData);\n                        const upscaledImage =\n                            upscaledCanvas.toDataURL(\"image/png\");\n                        setUpscaledImage(upscaledImage);\n                    }\n                },\n                { canvas: true }\n            );\n        }\n    };\n\n    return (\n        <div>\n            <input type=\"file\" onChange={onImageSelected} />\n            {originalImage && upscaledImage && (\n                <div>\n                    Original:\n                    <br />\n                    <img src={originalImage} />\n                    <br />\n                    Upscaled:\n                    <br />\n                    <img src={upscaledImage} />\n                </div>\n            )}\n        </div>\n    );\n};\n","import {FC, useEffect, useState} from \"react\";\nimport { AIBrushApi } from \"../client\";\nimport { ApiSocket, NOTIFICATION_CREDITS_UPDATED } from \"../lib/apisocket\";\n\ninterface Props {\n    api: AIBrushApi;\n    apisocket: ApiSocket;\n}\n\n// TODO: restore when refactoring to kudos\n// this component should fetch the credits balance {free_credits, paid_credits} from the server on mount.\n// it should also subscribe to the apisocket to receive updates to the credits balance (NOTIFICATION_CREDITS_UPDATED).\n// display paid credits above, free credits below.\n\nexport const CreditsBalance: FC<Props> = ({api, apisocket}) => {\n    // const [credits, setCredits] = useState({free_credits: 0, paid_credits: 0});\n\n    // useEffect(() => {\n    //     const fetchCredits = async () => {\n    //         const credits = await api.getCredits();\n    //         setCredits(credits.data);\n    //     };\n    //     fetchCredits();\n    //     const pollHandle = setInterval(fetchCredits, 60000);\n\n    //     const onMessage = (message: string) => {\n    //         const data = JSON.parse(message);\n    //         if (data.type === NOTIFICATION_CREDITS_UPDATED) {\n    //             fetchCredits();\n    //         }\n    //     }\n    //     apisocket.addMessageListener(onMessage);\n\n    //     return () => {\n    //         clearInterval(pollHandle);\n    //         apisocket.removeMessageListener(onMessage);\n    //     }\n    // }, [api, apisocket]);\n\n    // return (\n    //     <div>\n    //         <div style={{color: \"#00f0f0\"}}>\n    //             <span>Paid credits: </span>\n    //             <span>{credits.paid_credits}</span>\n    //         </div>\n    //         <div>\n    //             <span>Free credits: </span>\n    //             <span>{credits.free_credits}</span>\n    //         </div>\n    //     </div>\n    // );\n    return <></>;\n};","import React, { useState, useEffect } from \"react\";\nimport * as axios from \"axios\";\nimport { BrowserRouter, Switch, Route, Link } from \"react-router-dom\";\nimport \"./App.css\";\nimport \"./bootstrap.min.css\";\nimport { AIBrushApi, LoginResult, FeatureList } from \"./client/api\";\nimport { LocalImagesStore } from \"./lib/localImagesStore\";\nimport { getConfig } from \"./config\";\nimport { Login } from \"./pages/Login\";\nimport { TokenRefresher } from \"./components/TokenRefresher\";\nimport { Healthchecker } from \"./components/Healthchecker\";\nimport { Admin } from \"./pages/admin/Admin\";\nimport { ImageEditor } from \"./pages/image-editor/ImageEditor\";\nimport { DeletedImages } from \"./pages/DeletedImages\";\n\n// V2 UI\nimport { Homepage } from \"./pages/Homepage\";\nimport { ApiSocket } from \"./lib/apisocket\";\nimport { DiscordLogin } from \"./pages/DiscordLogin\";\nimport { LocalDeletedImages } from \"./pages/LocalDeletedImages\";\nimport { SavedImagesPage } from \"./pages/SavedImagesPage\";\nimport { TestPage } from \"./pages/TestPage\";\nimport { CreditsBalance } from \"./components/CreditsBalance\";\n\nconst config = getConfig();\nconst httpClient = axios.default.create();\nconst client = new AIBrushApi(\n    undefined,\n    localStorage.getItem(\"apiUrl\") || config.apiUrl,\n    httpClient\n);\nconst apiSocket: ApiSocket = new ApiSocket();\nconst localImages = new LocalImagesStore();\n\nfunction updateHttpClient(loginResult: LoginResult) {\n    if (loginResult.accessToken) {\n        httpClient.defaults.headers.common[\n            \"Authorization\"\n        ] = `Bearer ${loginResult.accessToken}`;\n    }\n}\n\nfunction App() {\n    const [credentials, setCredentials] = useState<LoginResult | null>(null);\n    const [assetsUrl, setAssetsUrl] = useState<string>(\"/api/images\");\n    const [isAdmin, setIsAdmin] = useState<boolean>(false);\n    const [features, setFeatures] = useState<FeatureList | null>(null);\n\n    const onLogout = () => {\n        setCredentials(null);\n        localStorage.removeItem(\"credentials\");\n        httpClient.defaults.headers.common[\"Authorization\"] = undefined;\n    };\n\n    const init = async () => {\n        console.log(\"App.init\");\n        await localImages.init();\n        client\n            .getAssetsUrl()\n            .then((result) => setAssetsUrl(result.data.assets_url));\n        client.getFeatures().then((result) => setFeatures(result.data));\n        const storedCredentials = localStorage.getItem(\"credentials\");\n        if (storedCredentials) {\n            // attempt to refresh token\n            try {\n                const credentials = JSON.parse(\n                    storedCredentials\n                ) as LoginResult;\n                updateHttpClient(credentials);\n                const result = await client.refresh({\n                    refreshToken: credentials.refreshToken,\n                });\n                setCredentials(result.data);\n\n                // save to storage\n                localStorage.setItem(\n                    \"credentials\",\n                    JSON.stringify(result.data)\n                );\n                updateHttpClient(result.data);\n                const isAdmin = await client.isAdmin();\n                setIsAdmin(!!isAdmin.data.is_admin);\n                apiSocket.updateToken(result.data.accessToken!);\n                apiSocket.connect();\n            } catch (e) {\n                console.log(e);\n                localStorage.removeItem(\"credentials\");\n            }\n        }\n    };\n\n    const onLogin = async (credentials: LoginResult) => {\n        localStorage.setItem(\"credentials\", JSON.stringify(credentials));\n        setCredentials(credentials);\n        updateHttpClient(credentials);\n        apiSocket.updateToken(credentials.accessToken!);\n        apiSocket.connect();\n    };\n\n    const onCredentialsExpired = () => {\n        onLogout();\n    };\n\n    useEffect(() => {\n        init();\n    }, []);\n\n    return (\n        <div className=\"App\">\n            <TokenRefresher\n                api={client}\n                credentials={credentials as LoginResult}\n                onCredentialsRefreshed={onLogin}\n                onCredentialsExpired={onCredentialsExpired}\n            />\n            <Healthchecker api={client} />\n\n            <BrowserRouter>\n                {/* if credentials are not set, show Login component */}\n                {!credentials && (\n                    <Switch>\n                        <Route path=\"/\" exact={true}>\n                            <Login client={client} onLogin={onLogin} />\n                        </Route>\n                        <Route path=\"/discord-login\">\n                            <DiscordLogin client={client} onLogin={onLogin} />\n                        </Route>\n                        {/* fallback route is login page */}\n                        <Route path=\"*\">\n                            <Login client={client} onLogin={onLogin} />\n                        </Route>\n                    </Switch>\n                )}\n                {credentials && (\n                    <div className=\"container\">\n                        <div className=\"row\">\n                            <div className=\"col-lg-12\">\n                                {/* if credentials are set, show a bootstrap logout button a the far top right corner div */}\n                                {credentials && (\n                                    <>\n                                        <button\n                                            className=\"btn btn-primary top-button\"\n                                            onClick={() => onLogout()}\n                                        >\n                                            {/* font awesome logout icon */}\n                                            <i className=\"fas fa-sign-out-alt\"></i>\n                                        </button>\n                                        {/* saved images */}\n                                        <Link\n                                            className=\"btn btn-primary top-button\"\n                                            to=\"/saved\"\n                                        >\n                                            {/* font awesome save icon */}\n                                            <i className=\"fas fa-save\"></i>\n                                        </Link>\n                                        {/* home button */}\n                                        <Link\n                                            className=\"btn btn-primary top-button\"\n                                            to=\"/\"\n                                        >\n                                            {/* font awesome home icon */}\n                                            <i className=\"fas fa-home\"></i>\n                                        </Link>\n                                        {/* Link to discord */}\n                                        <a\n                                            className=\"btn btn-primary top-button\"\n                                            href=\"https://discord.gg/HYcFpDeqKJ\"\n                                            target=\"_blank\"\n                                        >\n                                            {/* font awesome discord icon */}\n                                            <i className=\"fab fa-discord\"></i>\n                                        </a>\n                                        {/* link to github */}\n                                        <a\n                                            className=\"btn btn-primary top-button\"\n                                            href=\"https://github.com/wolfgangmeyers/aibrush-2\"\n                                            target=\"_blank\"\n                                        >\n                                            {/* font awesome github icon */}\n                                            <i className=\"fab fa-github\"></i>\n                                        </a>\n                                    </>\n                                )}\n                            </div>\n                            <div\n                                className=\"col-lg-12\"\n                                style={{ textAlign: \"right\" }}\n                            >\n                                <CreditsBalance\n                                    api={client}\n                                    apisocket={apiSocket}\n                                />\n                            </div>\n                        </div>\n\n                        {/* if credentials are set, show the rest of the app */}\n\n                        <Switch>\n                            <Route path=\"/\" exact={true}>\n                                {/* <MainMenu isAdmin={isAdmin} /> */}\n                                <Homepage\n                                    api={client}\n                                    apiSocket={apiSocket}\n                                    assetsUrl={assetsUrl}\n                                    localImages={localImages}\n                                />\n                            </Route>\n                            <Route path=\"/stripe-success\">\n                                <Homepage\n                                    api={client}\n                                    apiSocket={apiSocket}\n                                    assetsUrl={assetsUrl}\n                                    localImages={localImages}\n                                    paymentStatus=\"success\"\n                                />\n                            </Route>\n                            <Route path=\"/stripe-cancel\">\n                                <Homepage\n                                    api={client}\n                                    apiSocket={apiSocket}\n                                    assetsUrl={assetsUrl}\n                                    localImages={localImages}\n                                    paymentStatus=\"canceled\"\n                                />\n                            </Route>\n                            <Route path=\"/images/:id\">\n                                <Homepage\n                                    api={client}\n                                    apiSocket={apiSocket}\n                                    assetsUrl={assetsUrl}\n                                    localImages={localImages}\n                                />\n                            </Route>\n                            <Route path=\"/saved\" exact={true}>\n                                {/* <MainMenu isAdmin={isAdmin} /> */}\n                                <SavedImagesPage\n                                    api={client}\n                                    apiSocket={apiSocket}\n                                    assetsUrl={assetsUrl}\n                                />\n                            </Route>\n                            <Route path=\"/saved/:id\" exact={true}>\n                                {/* <MainMenu isAdmin={isAdmin} /> */}\n                                <SavedImagesPage\n                                    api={client}\n                                    apiSocket={apiSocket}\n                                    assetsUrl={assetsUrl}\n                                />\n                            </Route>\n                            <Route path=\"/image-editor/:id\">\n                                <ImageEditor\n                                    api={client}\n                                    apisocket={apiSocket}\n                                    assetsUrl={assetsUrl}\n                                    localImages={localImages}\n                                />\n                            </Route>\n                            <Route path=\"/deleted-images\">\n                                <DeletedImages\n                                    api={client}\n                                    assetsUrl={assetsUrl}\n                                />\n                            </Route>\n                            <Route path=\"/local-deleted-images\">\n                                <LocalDeletedImages localImages={localImages} />\n                            </Route>\n                            <Route path=\"/testpage\">\n                                <TestPage />\n                            </Route>\n                            {isAdmin && (\n                                <>\n                                    <Route path=\"/admin\">\n                                        <Admin api={client} />\n                                    </Route>\n                                </>\n                            )}\n                        </Switch>\n                        <div\n                            // style={{ marginTop: \"100px\", padding: \"50px\" }}\n\n                            // use position:fixed to make the footer stick to the bottom of the page\n                            style={{\n                                position: \"fixed\",\n                                bottom: \"0\",\n                                left: \"0\",\n                                width: \"100%\",\n                                height: \"50px\",\n                                paddingTop: \"16px\",\n                                backgroundColor: \"#000000\",\n                            }}\n                        >\n                            {/* show external popout pages to terms and privacy policy, if they are present in the features */}\n                            {features && features.privacy_uri && (\n                                <a href={features.privacy_uri} target=\"_blank\">\n                                    Privacy Policy\n                                </a>\n                            )}\n                            {features && features.terms_uri && (\n                                <a\n                                    href={features.terms_uri}\n                                    target=\"_blank\"\n                                    style={{ marginLeft: \"20px\" }}\n                                >\n                                    Terms of Service\n                                </a>\n                            )}\n                            {/* link to mail to admin@aibrush.art */}\n                            <a\n                                href=\"mailto:admin@aibrush.art\"\n                                style={{ marginLeft: \"20px\" }}\n                            >\n                                Contact\n                            </a>\n                            <span\n                                style={{ float: \"right\", marginRight: \"50px\" }}\n                            >\n                                Powered by the{\" \"}\n                                <a\n                                    href=\"https://stablehorde.net/\"\n                                    target=\"_blank\"\n                                >\n                                    Stable Horde\n                                </a>\n                            </span>\n                        </div>\n                    </div>\n                )}\n            </BrowserRouter>\n        </div>\n    );\n}\n\nexport default App;\n","export interface Config {\n    apiUrl: string;\n}\n\nexport function getConfig(): Config {\n    // if (process.env.REACT_APP_ENV === \"prod\") {\n    //     return {\n    //         apiUrl: \"https://aibrush.ngrok.io\"\n    //     };\n    // } else if (process.env.REACT_APP_ENV === \"alt\") {\n    //     return {\n    //         apiUrl: \"\"\n    //     };\n    // } else {\n    //     return {\n    //         apiUrl: \"http://localhost:3000\"\n    //     };\n    // }\n    return {\n        apiUrl: \"\"\n    };\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","export class RecentList {\n    private key: string;\n    private listSize: number;\n\n    constructor(key: string, listSize: number) {\n        this.key = key;\n        this.listSize = listSize;\n    }\n\n    private getRecentItems(): string[] {\n        const modelsJson = localStorage.getItem(this.key);\n        return modelsJson ? JSON.parse(modelsJson) : [];\n    }\n\n    private saveRecentItems(models: string[]): void {\n        localStorage.setItem(this.key, JSON.stringify(models));\n    }\n\n    addItem(model: string): (string | undefined) {\n        const recentModels = this.getRecentItems();\n        const modelIndex = recentModels.indexOf(model);\n\n        if (modelIndex !== -1) {\n            recentModels.splice(modelIndex, 1);\n        }\n\n        recentModels.unshift(model);\n\n        let removed: string | undefined;\n        if (recentModels.length > this.listSize) {\n            removed = recentModels.pop();\n        }\n\n        this.saveRecentItems(recentModels);\n        return removed;\n    }\n\n    getItems(): string[] {\n        return this.getRecentItems();\n    }\n}\n\nexport const recentModels = new RecentList(\"recent-models\", 20);\nexport const recentNegativePrompts = new RecentList(\"recent-negative-prompts\", 20);\nexport const recentPrompts = new RecentList(\"recent-positive-prompts\", 20);\nexport const recentLoras = new RecentList(\"recent-loras\", 20);","\nexport const NOTIFICATION_IMAGE_UPDATED = \"image_updated\";\nexport const NOTIFICATION_IMAGE_DELETED = \"image_deleted\";\nexport const NOTIFICATION_PENDING_IMAGE = \"pending_image\";\nexport const NOTIFICATION_CREDITS_UPDATED = \"credits_updated\";\n\ntype MessageListener = (message: string) => void;\n\nexport class ApiSocket {\n    private client?: WebSocket;\n    private accessToken?: string\n    // private messageListener?: (message: string) => void;\n    private messageListeners: MessageListener[] = [];\n\n    updateToken(accessToken: string) {\n        this.accessToken = accessToken;\n    }\n\n    // onMessage(listener?: (message: string) => void) {\n    //     this.messageListener = listener;\n    // }\n\n    addMessageListener(listener: MessageListener) {\n        this.messageListeners.push(listener);\n    }\n\n    removeMessageListener(listener: MessageListener) {\n        this.messageListeners = this.messageListeners.filter(l => l !== listener);\n    }\n\n    connect() {\n        if (!this.accessToken) {\n            throw new Error(\"unauthenticated\");\n        }\n        if (this.client) {\n            // will reconnect in one second automatically\n            // this is called every time the auth refreshes\n            this.client.close();\n            return;\n        }\n        // let host = window.location.host;\n        let host = \"www.aibrush.art\";\n        let protocol = \"wss\";\n        // if (host.includes(\"localhost\")) {\n        //   host = \"localhost:3000\";\n        //   protocol = \"ws\";\n        // }\n        this.client = new WebSocket(`${protocol}://${host}`);\n        this.client.onerror = err => console.error(err);\n        this.client.onopen = () => {\n            console.log(\"websocket connected\");\n            this.client!.send(this.accessToken!);\n        }\n        this.client.onmessage = evt => {\n            console.log(\"server push\", evt.data);\n            for (const listener of this.messageListeners) {\n                listener(evt.data as string);\n            }\n        }\n        this.client.onclose = () => {\n          console.log(\"websocket closed\");\n          this.client = undefined;\n          setTimeout(() => this.connect(), 500);\n        }\n    }\n}\n","import { FC } from \"react\";\n\ninterface Props {\n    imagesCost: number;\n}\n\n//TODO: restore when doing kudos cost calculation\nexport const CostIndicator: FC<Props> = ({ imagesCost }) => {\n    return (\n        // <div style={{ textAlign: \"left\" }}>\n        //     <span className=\"helptext\" style={{ color: \"#00f0f0\" }}>\n        //         Cost: {imagesCost} credit{imagesCost > 1 ? \"s\" : \"\"}&nbsp;\n        //         <i\n        //             className=\"fas fa-info-circle\"\n        //             style={{ cursor: \"pointer\" }}\n        //             onClick={() =>\n        //                 alert(\n        //                     \"The cost is based on the image count and the size of each image. A single 512x512 image costs 1 credit.\"\n        //                 )\n        //             }\n        //         ></i>\n        //     </span>\n        // </div>\n        <></>\n    );\n};\n","import React, { FC, useEffect, useState } from \"react\";\nimport moment from \"moment\";\nimport { Image, StatusEnum } from \"../client/api\";\nimport { LocalImage } from \"../lib/localImagesStore\";\n\ninterface Props {\n    assetsUrl: string;\n    image: LocalImage;\n    censorNSFW: boolean;\n    bulkDelete?: boolean;\n    onClick?: (image: Image) => void;\n}\n\nexport const ImageThumbnail: FC<Props> = ({ assetsUrl, image, censorNSFW, bulkDelete, onClick }) => {\n    const src = `${assetsUrl}/${image.id}.thumbnail.png?updated_at=${image.updated_at}`;\n    const [retry, setRetry] = useState(\"\");\n\n    useEffect(() => {\n        // This is to help deal with eventual consistency from S3.\n        // if image.updated_at (unix timestamp in milliseconds) is less than a minute ago, try to reload the image\n        if (moment().diff(moment(image.updated_at), \"minutes\") < 1) {\n            setRetry(\"\");\n            const t = setTimeout(() => {\n                setRetry(\"&retry\")\n            }, 3000);\n            return () => clearTimeout(t);\n        }\n    }, [image.id, image.updated_at])\n\n    let label = image.label;\n    if (image.label === \"\") {\n        label = image.params.prompt || \"\";\n    }\n    if (label.indexOf(\",\") !== -1) {\n        label = label.substring(0, label.indexOf(\",\"));\n    }\n    \n    let className = \"image-thumbnail\";\n    if (bulkDelete) {\n        className += \" bulk-delete\";\n    }\n\n    let backgroundImage = `url(${src}${retry}), url(/images/default.png)`;\n    if (image.imageData) {\n        backgroundImage = `url(${image.imageData}), url(/images/default.png)`;\n    }\n\n    return (\n        <div\n            className={className}\n            style={{\n                backgroundImage,\n                backgroundRepeat: \"no-repeat\",\n                backgroundPosition: \"center\",\n                filter: (image.nsfw && censorNSFW) ? \"blur(8px)\" : undefined,\n            }}\n            onClick={() => onClick && onClick(image)}\n        >\n            {!bulkDelete && <div className=\"image-thumbnail-label\">\n                {label}\n            </div>}\n\n            {bulkDelete && <div className=\"image-thumbnail-label\">\n                <input type=\"checkbox\" style={{\n                    width: \"20px\",\n                    height: \"20px\",\n                    marginLeft: \"16px\",\n                    marginTop: \"16px\",\n                }} checked readOnly />\n            </div>}\n\n            {image.status === StatusEnum.Pending && <div className=\"image-thumbnail-pending\">\n                <i style={{marginTop: \"20px\"}} className=\"fa fa-hourglass-half\"></i>\n            </div>}\n            {\n                image.status === StatusEnum.Processing && <div className=\"image-thumbnail-pending\">\n                    <i style={{marginTop: \"20px\"}} className=\"fa fa-cog fa-spin\"></i>\n                </div>\n            }\n        </div>\n    );\n};\n","\n// canny, hed, depth, normal, openpose, seg, scribble, fakescribbles, hough\nexport const controlnetTypes = [\n    \"canny\",\n    \"hed\",\n    \"depth\",\n    \"normal\",\n    \"openpose\",\n    \"seg\",\n    \"scribble\",\n    \"fakescribbles\",\n    \"hough\",\n]","import { FC, useState, FormEvent } from \"react\";\nimport { Form, FormGroup, FormControl, FormText, FormCheck } from \"react-bootstrap\";\n\ninterface Props {\n    seed: string;\n    setSeed: (seed: string) => void;\n}\n\nexport const SeedInput: FC<Props> = ({seed, setSeed}) => {\n    const [useCustomSeed, setUseCustomSeed] = useState(false);\n\n    const onChangeCustomSeed = () => {\n        setUseCustomSeed(!useCustomSeed);\n        if (useCustomSeed) {\n            setSeed(\"\");\n        } else {\n            // set seed to a random number\n            setSeed(Math.floor(Math.random() * 1000000000).toString());\n        }\n    };\n\n    return (\n        <Form>\n            <FormGroup>\n                <FormCheck \n                    type=\"checkbox\"\n                    label=\"Use Custom Seed\"\n                    checked={useCustomSeed}\n                    onChange={(e) => onChangeCustomSeed()}\n                />\n            </FormGroup>\n\n            {useCustomSeed && (\n                <FormGroup>\n                    <FormControl\n                        type=\"text\"\n                        // value={seed}\n                        // onChange={(e) => setSeed(e.target.value)}\n                        placeholder=\"Enter seed\"\n                        value={seed}\n                        onChange={(e: any) => setSeed(e.target.value)}\n                    />\n                </FormGroup> \n            )}\n        </Form>\n    );\n};\n","import React, { useState } from \"react\";\nimport { InputGroup, FormControl, Dropdown } from \"react-bootstrap\";\n\ninterface TextInputWithHistoryProps {\n    value: string;\n    onChange: (newValue: string) => void;\n    history: string[];\n}\n\nconst TextInputWithHistory: React.FC<TextInputWithHistoryProps> = ({\n    value,\n    onChange,\n    history,\n}) => {\n    const [show, setShow] = useState(false);\n\n    const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        onChange(event.target.value);\n    };\n\n    const handleDropdownSelect = (eventKey: string | null) => {\n        if (eventKey) {\n            onChange(eventKey);\n        }\n        setShow(false);\n    };\n\n    const handleInputClick = () => {\n        setShow(!show);\n    };\n\n    return (\n        <div>\n            <FormControl\n                value={value}\n                onChange={handleInputChange}\n                onClick={handleInputClick}\n                onBlur={() => {\n                    setTimeout(() => setShow(false), 200);\n                }}\n            />\n            <Dropdown show={show} onSelect={handleDropdownSelect}>\n                <Dropdown.Toggle\n                    variant=\"success\"\n                    id=\"dropdown-basic\"\n                    style={{ height: \"0px\", padding: \"0px\", visibility: \"hidden\", position: \"absolute\" }}\n                />\n                <Dropdown.Menu style={{width: \"100%\", overflow: \"hidden\"}}>\n                    {history.map((item, index) => (\n                        <Dropdown.Item eventKey={item} key={index}>\n                            {item}\n                        </Dropdown.Item>\n                    ))}\n                </Dropdown.Menu>\n            </Dropdown>\n        </div>\n    );\n};\n\nexport default TextInputWithHistory;\n","import React, { FC, useEffect, useState } from \"react\";\nimport { CreateImageInput, StatusEnum, Image, AIBrushApi, LoraConfig } from \"../client\";\nimport {\n    aspectRatios,\n    DEFAULT_ASPECT_RATIO,\n    getClosestAspectRatio,\n    AspectRatio,\n} from \"../lib/aspecRatios\";\nimport loadImage from \"blueimp-load-image\";\nimport { AspectRatioSelector } from \"./AspectRatioSelector\";\nimport { getUpscaleLevel } from \"../lib/upscale\";\nimport { resizeEncodedImage } from \"../lib/imageutil\";\nimport { LocalImage } from \"../lib/localImagesStore\";\nimport { controlnetTypes } from \"../lib/supportedModels\";\nimport { SeedInput } from \"./SeedInput\";\nimport ModelSelector from \"./ModelSelector\";\nimport { calculateImagesCost } from \"../lib/credits\";\nimport { CostIndicator } from \"./CostIndicator\";\nimport { recentPrompts, recentNegativePrompts } from \"../lib/recentList\";\nimport TextInputWithHistory from \"./TextInputWithHistory\";\nimport { LoraModal, SelectedLora } from \"./LoraSelector\";\nimport { SelectedLoraTag } from \"./SelectedLora\";\nimport { LoraTriggers } from \"./LoraTriggers\";\n\ninterface Props {\n    api: AIBrushApi;\n    parent: LocalImage | null;\n    creating: boolean;\n    assetsUrl: string;\n    onSubmit: (input: CreateImageInput) => void;\n    // go straight to editor without variations\n    onEdit: (input: CreateImageInput) => void;\n    onCancel: () => void;\n}\n\nexport function defaultArgs(): CreateImageInput {\n    return {\n        params: {\n            prompt: \"\",\n            negative_prompt: defaultNegativePrompt(),\n            width: 512,\n            height: 512,\n            steps: 20,\n            denoising_strength: 0.75,\n        },\n        label: \"\",\n        encoded_image: \"\",\n        encoded_mask: \"\",\n        model: \"Epic Diffusion\",\n        count: 4,\n    };\n}\n\nfunction defaultNegativePrompt(): string {\n    return (\n        recentNegativePrompts.getItems()[0] ||\n        \"low quality, distorted, deformed, dull, boring, plain, ugly, noise\"\n    );\n}\n\nexport const ImagePrompt: FC<Props> = ({\n    api,\n    parent,\n    creating,\n    assetsUrl,\n    onSubmit,\n    onCancel,\n    onEdit,\n}) => {\n    const [prompt, setPrompt] = useState<string>(\"\");\n    const [negativePrompt, setNegativePrompt] = useState<string>(\n        defaultNegativePrompt()\n    );\n    const [count, setCount] = useState<number>(4);\n    const [variationStrength, setVariationStrength] = useState<number>(0.75);\n    const [aspectRatio, setAspectRatio] =\n        useState<number>(DEFAULT_ASPECT_RATIO);\n    const [parentId, setParentId] = useState<string | null>(null);\n    const [advancedView, setAdvancedView] = useState<boolean>(false);\n    const [encodedImage, setEncodedImage] = useState<string>(\"\");\n    const [model, setModel] = useState<string>(\"Epic Diffusion\");\n\n    const [selectingModel, setSelectingModel] = useState<boolean>(false);\n\n    const [controlnetType, setControlnetType] = useState<string | undefined>();\n    const [cfgScale, setCfgScale] = useState<number>(7.5);\n    const [seed, setSeed] = useState<string>(\"\");\n    const [size, setSize] = useState<number>(1);\n\n    const [selectingLora, setSelectingLora] = useState<boolean>(false);\n    const [selectedLoras, setSelectedLoras] = useState<SelectedLora[]>([]);\n\n    const defaultAspectRatio = aspectRatios[DEFAULT_ASPECT_RATIO];\n\n    const [aspectRatioDetails, setAspectRatioDetails] = useState<AspectRatio>(\n        aspectRatios[DEFAULT_ASPECT_RATIO]\n    );\n    let [originalWidth, setOriginalWidth] = useState<number>(\n        defaultAspectRatio.width\n    );\n    let [originalHeight, setOriginalHeight] = useState<number>(\n        defaultAspectRatio.height\n    );\n\n    // const aspectRatioDetails = aspectRatios[aspectRatio];\n\n    const resetState = () => {\n        setPrompt(\"\");\n        setNegativePrompt(\n            recentNegativePrompts.getItems()[0] || defaultNegativePrompt\n        );\n        // setCount(4);\n        setAdvancedView(false);\n        setParentId(null);\n        // setVariationStrength(0.75);\n        setAspectRatio(DEFAULT_ASPECT_RATIO);\n        setAspectRatioDetails(aspectRatios[DEFAULT_ASPECT_RATIO]);\n        setEncodedImage(\"\");\n        // setCfgScale(7.5);\n        setSeed(\"\");\n    };\n\n    const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\n        if (negativePrompt) {\n            recentNegativePrompts.addItem(negativePrompt);\n        }\n        e.preventDefault();\n        const args = defaultArgs();\n        args.params.prompt = prompt || \"\";\n        args.params.negative_prompt = negativePrompt || \"\";\n        args.count = seed ? 1 : count;\n        args.parent = parentId || undefined;\n        args.params.denoising_strength = variationStrength;\n        args.nsfw = true;\n        args.model = model;\n        args.temporary = true;\n        args.params.controlnet_type = controlnetType as any;\n        args.params.cfg_scale = cfgScale;\n        args.params.seed = seed || undefined;\n        args.params.loras = selectedLoras.map(l => l.config);\n        if (parent) {\n            const bestMatch = getClosestAspectRatio(\n                parent.params.width!,\n                parent.params.height!\n            ).scale(size);\n            args.params.width = bestMatch.width;\n            args.params.height = bestMatch.height;\n        } else {\n            const bestMatch = getClosestAspectRatio(\n                aspectRatioDetails.width,\n                aspectRatioDetails.height\n            ).scale(size);\n            args.params.width = bestMatch.width;\n            args.params.height = bestMatch.height;\n        }\n        if (encodedImage) {\n            args.encoded_image = await resizeEncodedImage(\n                encodedImage,\n                args.params.width,\n                args.params.height,\n                \"png\"\n            );\n        }\n\n        resetState();\n        onSubmit(args);\n    };\n\n    const handleEdit = () => {\n        if (negativePrompt) {\n            recentNegativePrompts.addItem(negativePrompt);\n        }\n        const args = defaultArgs();\n        args.params.prompt = prompt || \"\";\n        args.params.negative_prompt = negativePrompt || \"\";\n        args.count = 1;\n        args.parent = parentId || undefined;\n        // args.stable_diffusion_strength = variationStrength;\n        args.params.denoising_strength = variationStrength;\n        args.status = StatusEnum.Completed;\n        args.params.width = originalWidth;\n        args.params.height = originalHeight;\n        args.params.cfg_scale = cfgScale;\n        args.nsfw = false;\n        args.model = model;\n        if (encodedImage) {\n            args.encoded_image = encodedImage;\n        }\n\n        resetState();\n        onEdit(args);\n    };\n\n    const handleCancel = () => {\n        resetState();\n        onCancel();\n    };\n\n    const onSelectModel = (model: string) => {\n        setModel(model);\n        setSelectingModel(false);\n    };\n\n    const onImageSelected = async (e: React.ChangeEvent<HTMLInputElement>) => {\n        const file = e.target.files && e.target.files[0];\n        if (!file) {\n            return;\n        }\n        loadImage(\n            file,\n            (img: Event | HTMLImageElement | HTMLCanvasElement) => {\n                if (!(img instanceof HTMLCanvasElement)) {\n                    return;\n                }\n                // try to match width and height to a supported aspect ratio\n                const width = img.width;\n                const height = img.height;\n                let bestMatch = getClosestAspectRatio(width, height);\n\n                const canvas = document.createElement(\"canvas\");\n                // canvas.width = bestMatch.width;\n                // canvas.height = bestMatch.height;\n                canvas.width = width;\n                canvas.height = height;\n                const ctx = canvas.getContext(\"2d\");\n                if (!ctx) {\n                    return;\n                }\n                ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n\n                // convert image to base64\n                // const canvas = img as HTMLCanvasElement\n                const dataUrl = canvas.toDataURL(\"image/png\");\n                const base64 = dataUrl.split(\",\")[1];\n                setEncodedImage(base64);\n                // get the index of the best match\n                setAspectRatio(\n                    aspectRatios.findIndex((a) => a.id === bestMatch.id)\n                );\n                setAspectRatioDetails(bestMatch);\n                setOriginalWidth(width);\n                setOriginalHeight(height);\n                // remove canvas\n                canvas.remove();\n            },\n            {\n                maxWidth: 4096,\n                maxHeight: 4096,\n                canvas: true,\n            }\n        );\n    };\n\n    useEffect(() => {\n        if (parent) {\n            const imageData = parent.imageData;\n            if (imageData) {\n                setEncodedImage(imageData.split(\",\")[1]);\n            }\n            setPrompt(parent.params.prompt || \"\");\n            setNegativePrompt(\n                parent.params.negative_prompt || defaultNegativePrompt()\n            );\n            setCount(4);\n            setParentId(parent.id);\n            setAdvancedView(true);\n            setVariationStrength(parent.params.denoising_strength || 0.75);\n            setModel(\n                parent.model\n            );\n            setCfgScale(parent.params.cfg_scale || 7.5);\n        } else {\n            resetState();\n        }\n    }, [parent]);\n\n    // unset controlnet when encodedImage is null\n    useEffect(() => {\n        if (!encodedImage) {\n            setControlnetType(undefined);\n        }\n    }, [encodedImage]);\n\n    const scaledAspectRatio = aspectRatioDetails.scale(size);\n    const imagesCost = calculateImagesCost(\n        count,\n        scaledAspectRatio.width,\n        scaledAspectRatio.height\n    );\n\n    const onAddLora = (lora: SelectedLora) => {\n        setSelectedLoras([...selectedLoras, lora]);\n        setSelectingLora(false);\n    };\n\n    const onRemoveLora = (lora: SelectedLora) => {\n        setSelectedLoras(\n            selectedLoras.filter((selectedLora) => selectedLora.config.name !== lora.config.name)\n        );\n    };\n\n    const onAddTrigger = (trigger: string) => {\n        const parts = [prompt];\n        if (prompt.length > 0 && !prompt.endsWith(\",\")) {\n            parts.push(\", \");\n        }\n        parts.push(trigger);\n        setPrompt(parts.join(\"\"));\n    }\n\n    return (\n        <>\n            <form onSubmit={handleSubmit}>\n                <div className=\"homepage-prompt\">\n                    <div className=\"input-group\">\n                        <input\n                            className=\"form-control prompt\"\n                            placeholder=\"What would you like to create?\"\n                            value={prompt}\n                            onChange={(e) => setPrompt(e.target.value)}\n                        />\n\n                        <div className=\"input-group-append\">\n                            <select\n                                className=\"form-control prompt-count\"\n                                style={{ borderTopLeftRadius: \"0px\" }}\n                                value={seed ? 1 : count}\n                                onChange={(e) =>\n                                    setCount(parseInt(e.target.value))\n                                }\n                                disabled={!!seed}\n                            >\n                                <option value={1}>1</option>\n                                <option>2</option>\n                                <option>3</option>\n                                <option>4</option>\n                                <option>5</option>\n                                <option>6</option>\n                                <option>7</option>\n                                <option>8</option>\n                                <option>9</option>\n                                <option>10</option>\n                            </select>\n                            <button\n                                type=\"submit\"\n                                className=\"btn btn-secondary light-button\"\n                                style={{ marginLeft: \"8px\" }}\n                                disabled={!prompt || creating}\n                            >\n                                {/* paintbrush button */}\n                                {!creating && (\n                                    <i className=\"fas fa-paint-brush\"></i>\n                                )}\n                                {/* spinner button */}\n                                {creating && (\n                                    <i className=\"fas fa-spinner fa-spin\"></i>\n                                )}\n                            </button>\n                        </div>\n                    </div>\n                    {selectedLoras.length > 0 && (\n                        <LoraTriggers prompt={prompt} selectedLoras={selectedLoras} onAddTrigger={onAddTrigger} />\n                    )}\n                    <CostIndicator imagesCost={imagesCost} />\n                    <div\n                        style={{\n                            marginTop: \"24px\",\n                        }}\n                    >\n                        <a\n                            href=\"javascript:void(0)\"\n                            onClick={() => setAdvancedView(!advancedView)}\n                            style={{\n                                color: \"white\",\n                                textDecoration: \"underline\",\n                            }}\n                        >\n                            Advanced\n                        </a>\n                        &nbsp;\n                        {advancedView ? (\n                            <i className=\"fas fa-chevron-up\"></i>\n                        ) : (\n                            <i className=\"fas fa-chevron-down\"></i>\n                        )}\n                    </div>\n                    {advancedView && (\n                        <div className=\"homepage-prompt-advanced\">\n                            {encodedImage && (\n                                <div className=\"form-group\">\n                                    <label>Init Image</label>\n                                    <img\n                                        style={{\n                                            display: \"block\",\n                                            marginLeft: \"auto\",\n                                            marginRight: \"auto\",\n                                            maxWidth: \"100%\",\n                                        }}\n                                        src={`data:image/png;base64,${encodedImage}`}\n                                    />\n                                </div>\n                            )}\n                            {!parent && !encodedImage && (\n                                <AspectRatioSelector\n                                    aspectRatio={aspectRatio}\n                                    onChange={(aspectRatioId) => {\n                                        setAspectRatio(aspectRatioId);\n                                        setAspectRatioDetails(\n                                            aspectRatios[aspectRatioId]\n                                        );\n                                    }}\n                                />\n                            )}\n                            <div className=\"form-group\">\n                                <div\n                                    style={{\n                                        display: \"block\",\n                                        maxWidth: encodedImage\n                                            ? \"350px\"\n                                            : \"180px\",\n                                        marginTop: \"40px\",\n                                        marginRight: \"auto\",\n                                        marginLeft: \"auto\",\n                                    }}\n                                >\n                                    <label\n                                        id=\"loadimage-wrapper\"\n                                        className={`btn btn-primary `}\n                                        style={{ display: \"inline\" }}\n                                    >\n                                        {/* upload image */}\n                                        <i className=\"fas fa-upload\"></i>&nbsp;\n                                        {encodedImage || parent\n                                            ? \"Replace\"\n                                            : \"Upload\"}\n                                        <input\n                                            id=\"loadimage\"\n                                            type=\"file\"\n                                            style={{ display: \"none\" }}\n                                            onChange={onImageSelected}\n                                        />\n                                    </label>\n                                    {encodedImage && (\n                                        <label\n                                            className=\"btn btn-secondary\"\n                                            onClick={() => setEncodedImage(\"\")}\n                                            style={{ display: \"inline\" }}\n                                        >\n                                            {/* remove image */}\n                                            <i className=\"fas fa-trash\"></i>\n                                            &nbsp; Remove\n                                        </label>\n                                    )}\n                                </div>\n                            </div>\n                            <div className=\"form-group\">\n                                <label htmlFor=\"model\">Model</label>\n                                <div>\n                                    <button\n                                        type=\"button\"\n                                        className=\"btn btn-secondary light-button\"\n                                        onClick={() => setSelectingModel(true)}\n                                    >\n                                        {model}&nbsp;\n                                        <i className=\"fas fa-caret-down\"></i>\n                                    </button>\n                                </div>\n                            </div>\n                            <div className=\"form-group\">\n                                {/* loras */}\n                                <label htmlFor=\"loras\">Loras</label>\n                                <div>\n                                    {selectedLoras.map(lora => <SelectedLoraTag key={lora.lora.name} lora={lora} onRemove={lora => onRemoveLora(lora)} />)}\n                                    {/* add lora button */}\n                                    {selectedLoras.length < 5 && <button\n                                        type=\"button\"\n                                        className=\"btn btn-secondary light-button\"\n                                        style={{ marginLeft: \"8px\" }}\n                                        onClick={() => setSelectingLora(true)}\n                                    >\n                                        <i className=\"fas fa-plus\"></i>&nbsp;Add Lora\n                                    </button>}\n                                </div>\n                            </div>\n                            <div className=\"form-group\">\n                                {/* negative prompt */}\n                                <label htmlFor=\"negativePrompt\">\n                                    Negative Prompt\n                                </label>\n                                {/* <input\n                                type=\"text\"\n                                className=\"form-control\"\n                                id=\"negativePrompt\"\n                                placeholder=\"What would you like to avoid?\"\n                                value={negativePrompt}\n                                onChange={(e) =>\n                                    setNegativePrompt(e.target.value)\n                                }\n                            /> */}\n                                <TextInputWithHistory\n                                    history={recentNegativePrompts.getItems()}\n                                    value={negativePrompt}\n                                    onChange={setNegativePrompt}\n                                />\n                                <span className=\"helptext\">\n                                    Try descriptive words like \"blurry\" or\n                                    \"distorted\"\n                                </span>\n                            </div>\n                            {!seed && (\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"count\">\n                                        Count: {count}\n                                    </label>\n                                    {/* range slider from 1 to 20 */}\n                                    <input\n                                        type=\"range\"\n                                        className=\"form-control-range\"\n                                        id=\"count\"\n                                        min=\"1\"\n                                        max=\"10\"\n                                        value={count}\n                                        onChange={(e) =>\n                                            setCount(parseInt(e.target.value))\n                                        }\n                                    />\n                                    <span className=\"helptext\">\n                                        This is how many images you want to\n                                        generate\n                                    </span>\n                                </div>\n                            )}\n                            {/* size slider */}\n                            <div className=\"form-group\">\n                                <label htmlFor=\"size\">\n                                    Size: {scaledAspectRatio.width} x{\" \"}\n                                    {scaledAspectRatio.height}\n                                </label>\n                                {/* range slider from 1 to 2 in increments of 0.1 */}\n                                <input\n                                    type=\"range\"\n                                    className=\"form-control-range\"\n                                    id=\"size\"\n                                    min=\"1\"\n                                    max=\"2\"\n                                    step=\"0.1\"\n                                    value={size}\n                                    onChange={(e) =>\n                                        setSize(parseFloat(e.target.value))\n                                    }\n                                />\n                                <span className=\"helptext\">\n                                    This allows you to adjust the size of your\n                                    images. Larger images cost more credits.\n                                </span>\n                            </div>\n\n                            {(parentId || encodedImage) && (\n                                <div className=\"form-group\">\n                                    {/* variation strength */}\n                                    <label htmlFor=\"variationStrength\">\n                                        Variation Strength:&nbsp;\n                                        {(variationStrength * 100).toFixed(0)}%\n                                    </label>\n                                    <input\n                                        type=\"range\"\n                                        className=\"form-control-range\"\n                                        id=\"variationStrength\"\n                                        min=\"0.05\"\n                                        max=\"0.95\"\n                                        step=\"0.05\"\n                                        value={variationStrength}\n                                        onChange={(e) =>\n                                            setVariationStrength(\n                                                parseFloat(e.target.value)\n                                            )\n                                        }\n                                    />\n                                    <span className=\"helptext\">\n                                        This is how much variation you want to\n                                        see from the parent image\n                                    </span>\n                                </div>\n                            )}\n                            {encodedImage && (\n                                // controlnet type - canny, hed, depth, normal, openpose, seg, scribble, fakescribbles, hough\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"controlNetType\">\n                                        Control Net Type\n                                    </label>\n                                    <select\n                                        className=\"form-control\"\n                                        id=\"controlNetType\"\n                                        value={controlnetType}\n                                        onChange={(e) =>\n                                            setControlnetType(e.target.value)\n                                        }\n                                    >\n                                        <option value=\"\">None</option>\n                                        {controlnetTypes.map((type) => (\n                                            <option\n                                                value={type}\n                                                key={`type-${type}`}\n                                            >\n                                                {type}\n                                            </option>\n                                        ))}\n                                    </select>\n                                    <span className=\"helptext\">\n                                        Controlnet is an advanced way of\n                                        controlling the output of image\n                                        generation. You can read more about it{\" \"}\n                                        <a\n                                            target=\"_blank\"\n                                            href=\"https://bootcamp.uxdesign.cc/controlnet-and-stable-diffusion-a-game-changer-for-ai-image-generation-83555cb942fc\"\n                                        >\n                                            here.\n                                        </a>\n                                    </span>\n                                </div>\n                            )}\n                            {/* cfg scale. Slider from 1 to 20 in increments of 0.1 */}\n                            <div className=\"form-group\">\n                                <label>CFG Scale: {cfgScale.toFixed(1)}</label>\n                                <input\n                                    type=\"range\"\n                                    className=\"form-control-range\"\n                                    min=\"1\"\n                                    max=\"20\"\n                                    step=\"0.5\"\n                                    value={cfgScale}\n                                    onChange={(e) =>\n                                        setCfgScale(parseFloat(e.target.value))\n                                    }\n                                />\n                                <span className=\"helptext\">\n                                    Adjust the CFG scale to control how much the\n                                    image looks like the prompt.\n                                </span>\n                            </div>\n                            <SeedInput seed={seed} setSeed={setSeed} />\n\n                            <div\n                                className=\"form-group\"\n                                style={{ minHeight: \"20px\" }}\n                            >\n                                <div className=\"float-right\">\n                                    {parent && (\n                                        <button\n                                            type=\"button\"\n                                            className=\"btn btn-secondary light-button\"\n                                            onClick={handleCancel}\n                                        >\n                                            <i className=\"fas fa-times\"></i>\n                                            &nbsp;CANCEL\n                                        </button>\n                                    )}\n                                    <button\n                                        type=\"submit\"\n                                        className=\"btn btn-primary\"\n                                        style={{ marginLeft: \"8px\" }}\n                                        disabled={!prompt || creating}\n                                    >\n                                        {/* paintbrush button */}\n                                        {!creating && (\n                                            <i className=\"fas fa-paint-brush\"></i>\n                                        )}\n                                        {/* spinner button */}\n                                        {creating && (\n                                            <i className=\"fas fa-spinner fa-spin\"></i>\n                                        )}\n                                        &nbsp;PAINT\n                                    </button>\n\n                                    <button\n                                        type=\"button\"\n                                        className=\"btn btn-secondary light-button\"\n                                        onClick={handleEdit}\n                                        style={{ marginLeft: \"8px\" }}\n                                        disabled={!prompt || creating}\n                                    >\n                                        <i className=\"fas fa-edit\"></i>\n                                        &nbsp;EDIT\n                                    </button>\n                                </div>\n                            </div>\n                        </div>\n                    )}\n                </div>\n            </form>\n            {selectingModel && (\n                <ModelSelector\n                    api={api}\n                    onCancel={() => setSelectingModel(false)}\n                    onSelectModel={onSelectModel}\n                    initialSelectedModel={model}\n                    inpainting={false}\n                />\n            )}\n            {selectingLora && (\n                <LoraModal\n                    onCancel={() => setSelectingLora(false)}\n                    onConfirm={lora => onAddLora(lora)}\n                />\n            )}\n        </>\n    );\n};\n","import { FC } from \"react\";\n\ninterface Props {\n    progress: number;\n}\n\nexport const ProgressBar: FC<Props> = ({ progress }) => {\n    return (\n        <div className=\"progress\" style={{ height: \"20px\", marginTop: \"16px\" }}>\n            <div\n                className=\"progress-bar\"\n                role=\"progressbar\"\n                style={{ width: `${progress * 100}%` }}\n                aria-valuenow={progress * 100}\n                aria-valuemin={0}\n                aria-valuemax={100}\n            >\n                {Math.round(progress * 100)}%\n            </div>\n        </div>\n    );\n};\n","export function sleep(ms: number): Promise<void> {\n    return new Promise(resolve => window.setTimeout(resolve, ms));\n}\n","const BASE_IMAGE_SIZE = 512 * 512;\n\nexport function calculateImagesCost(count: number, width: number, height: number): number {\n    // 512x512 = 1 credit\n    // floor(count * width * height / 512 / 512)\n    return Math.max(count * Math.floor(width * height / BASE_IMAGE_SIZE), 1);\n}","import { FC, useEffect, useState } from \"react\";\nimport { ListGroup } from \"react-bootstrap\";\nimport { StableDiffusionModel } from \"../client\";\n\ninterface Props {\n    models: StableDiffusionModel[];\n    onSelectModel: (model: StableDiffusionModel) => void;\n    selectedModel: string;\n}\n\nconst MOBILE_HEIGHT_PERCENT = 0.3;\n\nexport const ModelList: FC<Props> = ({ models, onSelectModel, selectedModel }) => {\n    const [maxHeight, setMaxHeight] = useState(window.innerWidth < 576 ? window.innerHeight * MOBILE_HEIGHT_PERCENT : window.innerHeight * 0.7); // Set maxHeight to 80% of the viewport height\n\n    useEffect(() => {\n        const handleResize = () => {\n            let maxHeight = window.innerHeight * 0.7;\n            if (window.innerWidth < 576) {\n                maxHeight = window.innerHeight * MOBILE_HEIGHT_PERCENT;\n            }\n            setMaxHeight(maxHeight); // Update maxHeight based on the current viewport height\n        };\n\n        window.addEventListener(\"resize\", handleResize);\n        return () => {\n            window.removeEventListener(\"resize\", handleResize);\n        };\n    }, []);\n\n    return (\n        <ListGroup\n            style={{\n                maxHeight: `${maxHeight}px`,\n                overflowY: \"auto\",\n                border: \"1px solid #808080\",\n                marginBottom: \"8px\",\n            }}\n        >\n            {models.map((model) => (\n                <ListGroup.Item\n                    key={model.name}\n                    active={selectedModel === model.name}\n                    onClick={() => onSelectModel(model)}\n                    style={{\n                        cursor: \"pointer\",\n                    }}\n                >\n                    {model.name}\n                </ListGroup.Item>\n            ))}\n        </ListGroup>\n    );\n};\n","import { useState, useEffect } from \"react\";\n\nexport class SimpleCache {\n    private storage: Storage;\n\n    constructor() {\n        this.storage = window.localStorage;\n    }\n\n    setItem(key: string, value: any, ttl = 60 * 60) {\n        const item: {\n            value: any;\n            expiry: number;\n        } = {\n            value,\n            expiry: Date.now() + ttl * 1000,\n        };\n        this.storage.setItem(key, JSON.stringify(item));\n    }\n\n    getItem(key: string): any {\n        try {\n            const itemStr = this.storage.getItem(key);\n            if (!itemStr) {\n                return null;\n            }\n    \n            const item: {\n                value: any;\n                expiry: number;\n            } = JSON.parse(itemStr);\n            if (Date.now() > item.expiry) {\n                this.storage.removeItem(key);\n                return null;\n            }\n            return item.value;\n        } catch (error) {\n            console.error(error);\n            return null;\n        }\n    }\n\n    removeItem(key: string) {\n        this.storage.removeItem(key);\n    }\n\n    clear() {\n        this.storage.clear();\n    }\n}\n\nconst cache = new SimpleCache();\n\nexport function useCache<T>(key: string, initialValue: T): [T, React.Dispatch<React.SetStateAction<T>>] {\n  const [value, setValue] = useState<T>(() => {\n    const cachedValue = cache.getItem(key);\n    return cachedValue !== null ? cachedValue : initialValue;\n  });\n\n  useEffect(() => {\n    cache.setItem(key, value);\n  }, [key, value]);\n\n  return [value, setValue];\n}\n","import React, { useEffect, useState } from \"react\";\nimport { Button, Modal, Form, ListGroup, Row, Col } from \"react-bootstrap\";\nimport axios from \"axios\";\nimport { AIBrushApi, StableDiffusionModel } from \"../client\";\nimport { ModelList } from \"./ModelList\";\nimport { useCache } from \"../lib/localcache\";\nimport { recentModels } from \"../lib/recentList\";\n\nconst httpclient = axios.create();\n\ninterface ModelSelectorProps {\n    api: AIBrushApi;\n    initialSelectedModel: string;\n    onSelectModel: (model: string) => void;\n    onCancel: () => void;\n    inpainting: boolean;\n}\n\n\n\nconst ModelSelector: React.FC<ModelSelectorProps> = ({\n    api,\n    initialSelectedModel,\n    onSelectModel,\n    onCancel,\n    inpainting,\n}) => {\n    const [models, setModels] = useCache<StableDiffusionModel[]>(\"models\", []);\n    const [selectedModel, setSelectedModel] =\n        useState<StableDiffusionModel | null>(null);\n    const [searchTerm, setSearchTerm] = useState(\"\");\n\n    const filteredModels = models.filter((model) =>\n        model.inpainting === inpainting && model.name.toLowerCase().includes(searchTerm.toLowerCase())\n    );\n\n    const handleSelect = () => {\n        console.log(\"Selected model:\", selectedModel);\n        if (selectedModel) {\n            onSelectModel(selectedModel.name);\n        }\n    };\n\n    const handleSearch = (e: React.ChangeEvent<HTMLInputElement>) => {\n        setSearchTerm(e.target.value);\n    };\n\n    const handleModelClick = (model: StableDiffusionModel) => {\n        setSelectedModel(model);\n    };\n\n    useEffect(() => {\n        const setSortedModels = (\n            selectedModel: StableDiffusionModel,\n            models: StableDiffusionModel[]\n        ) => {\n            recentModels.addItem(selectedModel.name);\n\n            const recentModelNames = recentModels.getItems();\n            // map from model name to index\n            const recentModelIndices: { [key: string]: number } = {};\n            recentModelNames.forEach((name, index) => {\n                recentModelIndices[name] = index;\n            });\n            // sort models by recentness\n            const sortedModels = models.sort((a, b) => {\n                const aIndex = recentModelIndices[a.name];\n                const bIndex = recentModelIndices[b.name];\n                if (aIndex === undefined && bIndex === undefined) {\n                    return 0;\n                } else if (aIndex === undefined) {\n                    return 1;\n                } else if (bIndex === undefined) {\n                    return -1;\n                } else {\n                    return aIndex - bIndex;\n                }\n            });\n\n            setModels(sortedModels);\n        };\n\n        if (!models || models.length === 0) {\n            api.getModels().then((res) => {\n                console.log(res);\n                const selectedModel =\n                    res.data[initialSelectedModel] ||\n                    Object.values(res.data)[0];\n                console.log(\"Selected model:\", selectedModel);\n                setSelectedModel(selectedModel);\n                setSortedModels(selectedModel, Object.values(res.data));\n            });\n        } else {\n            const selectedModel =\n                models.find((model) => model.name === initialSelectedModel) ||\n                models[0];\n            setSelectedModel(selectedModel);\n            setSortedModels(selectedModel, models);\n        }\n    }, [api, models]);\n\n    useEffect(() => {\n        if (initialSelectedModel) {\n            recentModels.addItem(initialSelectedModel);\n        }\n    }, [initialSelectedModel]);\n\n    return (\n        <>\n            <Modal show={true} onHide={onCancel} size=\"xl\">\n                <Modal.Header closeButton>\n                    <Modal.Title>Select Model</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <Form.Control\n                        type=\"text\"\n                        placeholder=\"Search\"\n                        value={searchTerm}\n                        onChange={handleSearch}\n                    />\n                    <Row className=\"mt-3\">\n                        <Col sm={4}>\n                            <ModelList\n                                models={filteredModels}\n                                onSelectModel={handleModelClick}\n                                selectedModel={selectedModel?.name || \"\"}\n                            />\n                        </Col>\n                        <Col sm={8}>\n                            {selectedModel && (\n                                <>\n                                    <h5>{selectedModel.name}</h5>\n                                    <p>{selectedModel.description}</p>\n                                    {selectedModel.showcases &&\n                                        selectedModel.showcases.length > 0 && (\n                                            <img\n                                                src={selectedModel.showcases[0]}\n                                                alt=\"Showcase\"\n                                                style={{\n                                                    width: \"70%\",\n                                                }}\n                                            />\n                                        )}\n                                </>\n                            )}\n                        </Col>\n                    </Row>\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button variant=\"secondary\" onClick={onCancel}>\n                        Cancel\n                    </Button>\n                    <Button\n                        variant=\"primary\"\n                        onClick={handleSelect}\n                        disabled={!selectedModel}\n                    >\n                        Select\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n        </>\n    );\n};\n\nexport default ModelSelector;\n","import { OverlayTrigger, Tooltip } from \"react-bootstrap\";\n\ninterface Props {\n    onClick: () => void;\n}\n\nexport const ResetToDefaultIcon = ({ onClick }: Props) => {\n    return (\n        <OverlayTrigger\n            placement=\"top\"\n            overlay={<Tooltip id=\"reset-tooltip\">Reset to Default</Tooltip>}\n        >\n            <i className=\"fa fa-sync\" style={{\n                cursor: \"pointer\",\n            }} onClick={onClick}></i>\n        </OverlayTrigger>\n    );\n};\n","import React, { FC, useEffect, useState } from 'react';\nimport moment from \"moment\";\n\n// implement an error notification component\n// error message and timestamp are passed in as props\n// but close button can make the error message disappear\n\n// show error when the timestamp or message changes with useEffect hook\n// hide error when the close button is clicked\n\ninterface Props {\n    message: string | null;\n    timestamp: number;\n}\n\ninterface AlertProps {\n    message: string;\n    timestamp: number;\n    alertType: 'success' | 'info' | 'warning' | 'danger';\n}\n\nconst Alert: FC<AlertProps> = ({ message, timestamp, alertType }) => {\n    const [show, setShow] = useState(!!message);\n\n    useEffect(() => {\n        setShow(!!message);\n        // set a timeout of 10 seconds to hide the message if it is currently showing\n        if (message) {\n            const timeout = setTimeout(() => {\n                setShow(false);\n            }, 10000);\n            return () => {\n                clearTimeout(timeout);\n            };\n        }\n    }, [message, timestamp]);\n\n    if (!show) {\n        return null;\n    }\n\n    return (\n        <div className={`alert alert-${alertType} ${show ? 'show' : 'hide'}`}>\n            <button\n                type=\"button\"\n                className=\"close\"\n                onClick={() => setShow(false)}\n            >\n                &times;\n            </button>\n            {message}\n        </div>\n    );\n};\n\nexport const ErrorNotification: FC<Props> = ({ message, timestamp }) => {\n    return (\n        <Alert message={message || ''} timestamp={timestamp} alertType=\"danger\" />\n    );\n};\n\nexport const SuccessNotification: FC<Props> = ({ message, timestamp }) => {\n    return (\n        <Alert message={message || ''} timestamp={timestamp} alertType=\"success\" />\n    );\n};\n","import React, { FC, useState, useEffect } from \"react\";\nimport { ChromePicker } from \"react-color\";\n\nimport \"./ColorPicker.css\"\n\ninterface Props {\n    color: string;\n    onColorSelected: (color: string) => void;\n}\n\nexport const ColorPicker: FC<Props> = ({ color, onColorSelected }) => {\n    const [displayColorPicker, setDisplayColorPicker] = useState(false);\n    const [tmpColor, setTmpColor] = useState(color);\n\n    const handleClick = () => {\n        setDisplayColorPicker(!displayColorPicker);\n        if (displayColorPicker) {\n            onColorSelected(tmpColor);\n        }\n    };\n\n    const handleClose = () => {\n        setDisplayColorPicker(false);\n        if (displayColorPicker) {\n            onColorSelected(tmpColor);\n        }\n    };\n\n    const popover: React.CSSProperties = {\n        position: \"absolute\",\n        zIndex: 2,\n    };\n    const cover: React.CSSProperties = {\n        position: \"fixed\",\n        top: \"0px\",\n        right: \"0px\",\n        bottom: \"0px\",\n        left: \"0px\",\n    };\n\n    return (\n        <>\n            <button className=\"color-picker\" onClick={handleClick}>\n                <i className=\"fas fa-plus\" />\n            </button>\n            {displayColorPicker ? (\n                <div style={popover}>\n                    <div style={cover} onClick={handleClose} />\n                    <ChromePicker\n                        color={tmpColor}\n                        onChange={(color) => setTmpColor(color.hex)}\n                        onChangeComplete={(color) => setTmpColor(color.hex)}\n                    />\n                </div>\n            ) : null}\n        </>\n    );\n};\n","import React, { FC, useEffect, useState } from \"react\";\nimport { ChromePicker } from \"react-color\";\n\nimport { Renderer } from \"./renderer\";\nimport { BaseTool, Tool } from \"./tool\";\nimport { ZoomHelper } from \"./zoomHelper\";\nimport { PaletteButton } from \"./PaletteButton\";\nimport { ColorPicker } from \"./ColorPicker\";\n\nexport const defaultColors = [\n    \"#FFFFFF\",\n    \"#5A2C02\",\n    \"#386EB6\",\n    \"#6B31A1\",\n    \"#CB2C26\",\n    \"#000000\",\n    \"#888888\",\n    \"#50B050\",\n    \"#FBDB37\",\n    \"#E88D2D\",\n];\n\nexport class PencilTool extends BaseTool implements Tool {\n    private brushSize = 10;\n\n    private panning = false;\n    private isDrawing = false;\n    private lastX = 0;\n    private lastY = 0;\n    private colorPicking = false;\n    private lastPickedColor = \"#000000\";\n    private _dirty = false;\n\n    set dirty(dirty: boolean) {\n        this._dirty = dirty;\n        if (this.dirtyListener) {\n            this.dirtyListener(dirty);\n        }\n    }\n\n    get dirty() {\n        return this._dirty;\n    }\n\n    private dirtyListener?: (dirty: boolean) => void;\n    private colorPickedListener?: (color: string) => void;\n\n    constructor(\n        renderer: Renderer,\n        private layer: \"base\" | \"mask\",\n        private brushColor = defaultColors[0],\n        name = \"pencil\"\n    ) {\n        super(renderer, name);\n    }\n\n    private sync() {\n        if (this.colorPicking) {\n            this.renderer.setCursor({\n                x: this.lastX,\n                y: this.lastY,\n                radius: this.renderer.getWidth() / 20,\n                color: this.lastPickedColor,\n                type: \"colorpicker\",\n            });\n        } else {\n            this.renderer.setCursor({\n                x: this.lastX,\n                y: this.lastY,\n                radius: this.brushSize / 2,\n                color: this.brushColor,\n                type: \"circle-fill\",\n            });\n        }\n    }\n\n    updateArgs(args: any) {\n        super.updateArgs(args);\n        this.brushSize = args.brushSize || 10;\n        this.brushColor = args.brushColor || defaultColors[0];\n        this.sync();\n    }\n\n    onMouseDown(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        if (this.colorPicking) {\n            return;\n        }\n        if (event.button === 0) {\n            let { x, y } = this.zoomHelper.translateMouseToCanvasCoordinates(\n                event.nativeEvent.offsetX,\n                event.nativeEvent.offsetY\n            );\n            this.renderer.drawPoint(\n                x,\n                y,\n                this.brushSize,\n                this.brushColor,\n                this.layer\n            );\n            this.isDrawing = true;\n            this.lastX = x;\n            this.lastY = y;\n            this.dirty = true;\n        } else if (event.button === 1) {\n            this.panning = true;\n        }\n        this.sync();\n    }\n\n    onMouseMove(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>): void {\n        let { x, y } = this.zoomHelper.translateMouseToCanvasCoordinates(\n            event.nativeEvent.offsetX,\n            event.nativeEvent.offsetY\n        );\n        if (this.colorPicking) {\n            this.lastPickedColor = this.renderer.getPixel(x, y);\n        } else if (this.panning) {\n            this.zoomHelper.onPan(event);\n        } else {\n            if (this.isDrawing) {\n                this.renderer.drawLine(\n                    this.lastX,\n                    this.lastY,\n                    x,\n                    y,\n                    this.brushSize,\n                    this.brushColor,\n                    this.layer\n                );\n                this.dirty = true;\n            }\n        }\n        this.lastX = x;\n        this.lastY = y;\n        this.sync();\n    }\n\n    onMouseUp(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>): void {\n        if (event.button === 0) {\n            this.isDrawing = false;\n            if (this.colorPicking) {\n                this.colorPicking = false;\n                this.brushColor = this.lastPickedColor;\n                if (this.colorPickedListener) {\n                    this.colorPickedListener(this.lastPickedColor);\n                }\n            }\n        } else if (event.button === 1) {\n            this.panning = false;\n        }\n        this.sync();\n    }\n\n    onWheel(event: WheelEvent) {\n        this.zoomHelper.onWheel(event);\n        this.sync();\n    }\n\n    cancel() {\n        // kind of a hack, clears the selection layer\n        this.renderer.setEditImage(null);\n        this.dirty = false;\n    }\n\n    confirm() {\n        this.renderer.commitSelection();\n        const encodedImage = this.renderer.getEncodedImage(null);\n        if (encodedImage && this.saveListener) {\n            this.saveListener(encodedImage);\n        }\n        this.dirty = false;\n    }\n\n    onSaveImage(listener: (encodedImage: string) => void): void {\n        this.saveListener = listener;\n    }\n\n    onDirty(listener: (dirty: boolean) => void): void {\n        this.dirtyListener = listener;\n    }\n\n    destroy(): boolean {\n        if (this.dirty) {\n            this.renderer.commitSelection();\n        }\n        return true;\n    }\n\n    beginColorpicker(): void {\n        this.colorPicking = true;\n        this.sync();\n    }\n\n    onColorPicked(listener: (color: string) => void): void {\n        this.colorPickedListener = listener;\n    }\n}\n\ninterface ControlsProps {\n    renderer: Renderer;\n    tool: PencilTool;\n    colors: string[];\n}\n\nconst MAX_PALETTE_SIZE = 30;\n\nfunction addToPalette(palette: string[], color: string): string[] {\n    if (palette.indexOf(color) === -1) {\n        // insert at the beginning\n        palette = [color, ...palette];\n    }\n    if (palette.length > MAX_PALETTE_SIZE) {\n        palette = palette.slice(0, MAX_PALETTE_SIZE);\n    }\n    return palette;\n}\n\nexport const Controls: FC<ControlsProps> = ({ renderer, tool, colors }) => {\n    const [brushSize, setBrushSize] = useState(10);\n    const [brushColor, setBrushColor] = useState(colors[0]);\n    const [palette, setPalette] = useState(colors);\n    const [dirty, setDirty] = useState(false);\n\n    tool.onDirty(setDirty);\n\n    useEffect(() => {\n        tool.updateArgs({\n            brushSize,\n            brushColor,\n            palette,\n        });\n    }, [brushSize, brushColor, palette]);\n\n    const onColorSelected = (color: string) => {\n        setBrushColor(color);\n        setPalette(addToPalette(palette, color));\n    };\n\n    tool.onColorPicked(onColorSelected);\n\n    return (\n        <div style={{ marginTop: \"16px\" }}>\n            <div className=\"form-group\">\n                <label style={{ width: \"100%\" }}>\n                    Brush size\n                    <small\n                        className=\"form-text text-muted\"\n                        style={{ float: \"right\" }}\n                    >\n                        {brushSize}px\n                    </small>\n                </label>\n                <input\n                    type=\"range\"\n                    className=\"form-control-range\"\n                    min=\"1\"\n                    max=\"100\"\n                    value={brushSize}\n                    onChange={(e) => setBrushSize(parseInt(e.target.value))}\n                />\n            </div>\n            <div\n                style={{\n                    display: \"flex\",\n                    flexDirection: \"row\",\n                    flexWrap: \"wrap\",\n                }}\n            >\n                {palette.map((color, i) => (\n                    <PaletteButton\n                        key={i}\n                        selectedColor={brushColor}\n                        color={color}\n                        onClick={(color) => setBrushColor(color)}\n                        onColorSelected={(color) => onColorSelected(color)}\n                    />\n                ))}\n                {/* <div\n                    className=\"color-picker\"\n                    style={{ textAlign: \"center\", backgroundColor: \"#ccc\" }}\n                >\n                    <i className=\"fas fa-eye-dropper\" />\n                </div> */}\n                <button\n                    className=\"color-picker\"\n                    onClick={() => tool.beginColorpicker()}\n                >\n                    <i className=\"fas fa-eye-dropper\" />\n                </button>\n                <ColorPicker\n                    color={brushColor}\n                    onColorSelected={(color) => onColorSelected(color)}\n                />\n            </div>\n            <div\n                className=\"form-group\"\n                style={{\n                    marginTop: \"16px\",\n                    visibility: dirty ? \"visible\" : \"hidden\",\n                }}\n            >\n                <button\n                    className=\"btn btn-secondary\"\n                    onClick={() => tool.cancel()}\n                >\n                    Revert\n                </button>\n                <button\n                    className=\"btn btn-primary\"\n                    onClick={() => tool.confirm()}\n                    style={{ marginLeft: \"8px\" }}\n                >\n                    Save\n                </button>\n            </div>\n        </div>\n    );\n};\n","import React, { useState, useEffect } from \"react\";\nimport { Renderer } from \"./renderer\";\nimport { Cursor, Rect } from \"./models\";\nimport { Tool, BaseTool } from \"./tool\";\nimport { AspectRatioSelector } from \"../../components/AspectRatioSelector\";\nimport { getUpscaleLevel } from \"../../lib/upscale\";\nimport {\n    DEFAULT_ASPECT_RATIO,\n    aspectRatios,\n    getClosestAspectRatio,\n} from \"../../lib/aspecRatios\";\nimport { ZoomHelper } from \"./zoomHelper\";\nimport { runInThisContext } from \"vm\";\n\nexport class SelectionTool extends BaseTool implements Tool {\n    private selectionOverlay: Rect | undefined;\n    private selectionOverlayPreview: Rect | undefined;\n    private outpaint?: boolean;\n\n    // private selectionWidth: number = 512;\n    // private selectionHeight: number = 512;\n\n    private panning = false;\n\n    // TODO: size modifier to make the selection overlay smaller\n\n    constructor(renderer: Renderer) {\n        super(renderer, \"select\");\n    }\n\n    updateArgs(args: any) {\n        args = {\n            ...this.getArgs(),\n            ...args,\n        }\n        super.updateArgs(args);\n        this.selectionOverlay = args.selectionOverlay || {\n            x: 0,\n            y: 0,\n            width: 512,\n            height: 512,\n        };\n        this.outpaint = args.outpaint;\n        if (!this.outpaint) {\n            this.selectionOverlay = this.clamp(this.selectionOverlay!);\n        }\n        this.sync();\n    }\n\n    private clamp(rect: Rect): Rect {\n        const imageWidth = this.renderer.getWidth();\n        const imageHeight = this.renderer.getHeight();\n        let x = rect.x;\n        let y = rect.y;\n        let width = rect.width;\n        let height = rect.height;\n        // clamp to the canvas\n        x = Math.max(0, Math.min(x, imageWidth - this.selectionOverlay!.width));\n        y = Math.max(0, Math.min(y, imageHeight - rect.height));\n        x = Math.min(x, imageWidth - rect.width);\n        y = Math.min(y, imageHeight - rect.height);\n        width = Math.min(width, imageWidth);\n        height = Math.min(height, imageHeight);\n        return {\n            x: x,\n            y: y,\n            width: width,\n            height: height,\n        };\n    }\n\n    private sync(): void {\n        this.renderer.setSelectionOverlay(this.selectionOverlay);\n        this.renderer.setSelectionOverlayPreview(this.selectionOverlayPreview);\n    }\n\n    onMouseDown(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        if (event.type == \"touch\") {\n            this.onMouseMove(event);\n        } else if (event.button === 0) {\n            this.selectionOverlay = this.selectionOverlayPreview;\n            this.selectionOverlayPreview = undefined;\n            this.sync();\n            this.updateArgs({\n                selectionOverlay: this.selectionOverlay,\n            });\n        } else if (event.button === 1) {\n            this.panning = true;\n        }\n    }\n\n    onMouseMove(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        const imageWidth = this.renderer.getWidth();\n        const imageHeight = this.renderer.getHeight();\n        if (this.panning) {\n            this.zoomHelper.onPan(event);\n        } else {\n            let { x, y } = this.zoomHelper.translateMouseToCanvasCoordinates(\n                event.nativeEvent.offsetX,\n                event.nativeEvent.offsetY\n            );\n\n            // round to the nearest 16 pixels\n            x = Math.round(x / 16) * 16;\n            y = Math.round(y / 16) * 16;\n            // offset by -256 to center the rect\n            x -= 256;\n            y -= 256;\n\n            this.selectionOverlayPreview = {\n                x: x,\n                y: y,\n                width: this.selectionOverlay!.width,\n                height: this.selectionOverlay!.height,\n            };\n\n            if (!this.outpaint) {\n                this.selectionOverlayPreview = this.clamp(this.selectionOverlayPreview);\n            }\n\n            \n            this.sync();\n        }\n    }\n\n    onMouseUp(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        if (event.button === 0 && event.type == \"touch\") {\n            this.selectionOverlay = this.selectionOverlayPreview;\n            this.selectionOverlayPreview = undefined;\n            this.sync();\n            this.updateArgs({\n                selectionOverlay: this.selectionOverlay,\n            });\n        }\n        this.panning = false;\n    }\n\n    onMouseLeave(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        this.selectionOverlayPreview = undefined;\n        this.panning = false;\n        this.sync();\n    }\n\n    onWheel(event: WheelEvent) {\n        this.zoomHelper.onWheel(event);\n    }\n\n    destroy() {\n        // this.renderer.setSelectionOverlay(undefined);\n        this.renderer.setSelectionOverlayPreview(undefined);\n        return true;\n    }\n}\n\ninterface ControlsProps {\n    renderer: Renderer;\n    tool: Tool;\n    /** Lock aspect ratio for smaller images */\n    lockAspectRatio?: boolean;\n    outpaint?: boolean;\n}\n\nexport const Controls: React.FC<ControlsProps> = ({\n    renderer,\n    tool,\n    lockAspectRatio,\n    outpaint,\n}) => {\n    const upscaleLevel = getUpscaleLevel(\n        renderer.getWidth(),\n        renderer.getHeight()\n    );\n    const [aspectRatio, setAspectRatio] = useState(DEFAULT_ASPECT_RATIO);\n    const [size, setSize] = useState(1);\n\n    useEffect(() => {\n        const upscaleLevel = getUpscaleLevel(\n            renderer.getWidth(),\n            renderer.getHeight()\n        );\n        // lock aspect ratio to image\n        if (upscaleLevel === 0 && lockAspectRatio) {\n            const aspectRatio = getClosestAspectRatio(\n                renderer.getWidth(),\n                renderer.getHeight()\n            );\n            setAspectRatio(aspectRatio.id);\n            tool.updateArgs({\n                selectionOverlay: {\n                    x: 0,\n                    y: 0,\n                    width: aspectRatio.width,\n                    height: aspectRatio.height,\n                },\n                outpaint,\n            });\n        } else {\n            const args = tool.getArgs();\n            if (args.selectionOverlay) {\n                // restore args\n                const aspectRatio = getClosestAspectRatio(\n                    args.selectionOverlay.width,\n                    args.selectionOverlay.height\n                );\n                setAspectRatio(aspectRatio.id);\n                setSize(args.selectionOverlay.width / aspectRatio.width);\n                tool.updateArgs(args);\n            } else {\n                // set default args\n                args.selectionOverlay = {\n                    x: 0,\n                    y: 0,\n                    width: aspectRatios[aspectRatio].width,\n                    height: aspectRatios[aspectRatio].height,\n                };\n                args.outpaint = outpaint;\n                tool.updateArgs(args);\n            }\n        }\n    }, [tool]);\n\n    function onChange(aspectRatioId: number, size: number) {\n        const args = tool.getArgs();\n        const aspectRatio = aspectRatios[aspectRatioId];\n        if (args.selectionOverlay) {\n            const xDiff =\n                args.selectionOverlay.width - aspectRatio.width * size;\n            const yDiff =\n                args.selectionOverlay.height - aspectRatio.height * size;\n            args.selectionOverlay.width = Math.round(aspectRatio.width * size);\n            args.selectionOverlay.height = Math.round(\n                aspectRatio.height * size\n            );\n            args.selectionOverlay.x += xDiff / 2;\n            args.selectionOverlay.y += yDiff / 2;\n            if (!outpaint) {\n                // clamp to canvas\n                args.selectionOverlay.x = Math.round(\n                    Math.max(\n                        0,\n                        Math.min(\n                            args.selectionOverlay.x,\n                            renderer.getWidth() - args.selectionOverlay.width\n                        )\n                    )\n                );\n                args.selectionOverlay.y = Math.round(\n                    Math.max(\n                        0,\n                        Math.min(\n                            args.selectionOverlay.y,\n                            renderer.getHeight() - args.selectionOverlay.height\n                        )\n                    )\n                );\n            }\n        }\n        tool.updateArgs({\n            selectionOverlay: args.selectionOverlay,\n        });\n    }\n\n    return (\n        <>\n            {upscaleLevel > 0 && (\n                <AspectRatioSelector\n                    aspectRatio={aspectRatio}\n                    onChange={(aspectRatioId) => {\n                        onChange(aspectRatioId, size);\n                        setAspectRatio(aspectRatioId);\n                    }}\n                />\n            )}\n            <div className=\"form-group\">\n                <label htmlFor=\"size\" style={{ width: \"100%\" }}>\n                    Size\n                    <small\n                        className=\"form-text text-muted\"\n                        style={{ float: \"right\" }}\n                    >\n                        {Math.round(size * 100)}%\n                    </small>\n                </label>\n                {/* range from 0.1 to 1 */}\n                <input\n                    type=\"range\"\n                    className=\"form-control-range\"\n                    id=\"size\"\n                    min=\"1\"\n                    max=\"2\"\n                    step=\"0.1\"\n                    value={size}\n                    onChange={(event) => {\n                        onChange(aspectRatio, parseFloat(event.target.value));\n                        setSize(parseFloat(event.target.value));\n                    }}\n                />\n            </div>\n        </>\n    );\n};\n"],"sourceRoot":""}