{"version":3,"sources":["components/Alerts.tsx","components/AspectRatioSelector.tsx","lib/kvstore.ts","pages/image-editor/PaletteButton.tsx","components/CopyToClipboardIcon.tsx","components/Swipe.tsx","components/ImagePopup.tsx","pages/image-editor/smudge-tool.tsx","pages/image-editor/inpaint-tool.tsx","pages/Homepage.tsx","pages/image-editor/mask-editor-controls.tsx","pages/image-editor/enhance-tool.tsx","lib/aspecRatios.ts","pages/image-editor/ImageEditor.tsx","pages/image-editor/renderer.ts","pages/image-editor/import-export.tsx","lib/imageutil.ts","pages/image-editor/augment-tool.tsx","components/PendingJobsThumbnail.tsx","components/PendingJobs.tsx","components/OutOfCreditsModal.tsx","components/PaymentStatusModal.tsx","lib/hordeclient.ts","client/api.ts","client/base.ts","lib/recentList.ts","pages/image-editor/zoomHelper.tsx","pages/image-editor/tool.ts","lib/localImagesStore.ts","pages/LocalDeletedImages.tsx","pages/SavedImagesPage.tsx","lib/imagesCache.ts","pages/TestPage.tsx","lib/hordegenerator.ts","components/HordeUser.tsx","lib/savedimages.ts","App.tsx","reportWebVitals.ts","index.tsx","components/BusyModal.tsx","lib/recentLoras.ts","components/LoraSelector.tsx","components/CostIndicator.tsx","components/ProgressBar.tsx","lib/sleep.ts","lib/credits.ts","components/SelectedLora.tsx","components/LoraTriggers.tsx","components/ImageThumbnail.tsx","lib/supportedModels.ts","components/SeedInput.tsx","components/TextInputWithHistory.tsx","components/ImagePrompt.tsx","components/ModelList.tsx","lib/localcache.ts","components/ModelSelector.tsx","components/ResetToDefaultIcon.tsx","pages/image-editor/ColorPicker.tsx","pages/image-editor/pencil-tool.tsx","pages/image-editor/selection-tool.tsx","lib/upscale.ts"],"names":["Alert","message","timestamp","alertType","useState","show","setShow","useEffect","timeout","setTimeout","clearTimeout","className","type","onClick","ErrorNotification","AspectRatioSelector","aspectRatio","onChange","disabled","aspectRatioDetails","aspectRatios","style","minHeight","display","alignItems","width","height","border","margin","float","displayName","min","max","length","value","e","parseInt","target","KVStore","dbConfig","db","this","Promise","resolve","reject","request","indexedDB","open","dbName","onupgradeneeded","result","createObjectStore","storeName","onsuccess","onerror","error","createDB","key","a","getDB","transaction","objectStore","get","put","delete","getAll","PaletteButton","selectedColor","color","onColorSelected","displayColorPicker","setDisplayColorPicker","tmpColor","setTmpColor","backgroundColor","onDoubleClick","position","zIndex","hex","onChangeComplete","marginRight","marginLeft","CopyToClipboardIcon","text","copied","setCopied","onCopy","cursor","undefined","Swipe","onSwipe","children","touchStart","setTouchStart","touchEnd","setTouchEnd","onTouchStart","targetTouches","clientX","onTouchMove","onTouchEnd","distance","isLeftSwipe","ImagePopup","image","censorNSFW","onClose","onDelete","onFork","onEdit","onNSFW","onSave","img","useRef","src","id","updated_at","imageData","score","params","negative_prompt","negative_score","showNSFW","setShowNSFW","current","title","label","prompt","indexOf","substring","swipeArrowMargin","window","innerWidth","maxImageHeight","innerHeight","Modal","onHide","size","Header","closeButton","Title","Body","left","top","transform","padding","direction","ref","maxWidth","maxHeight","filter","nsfw","alt","right","marginTop","status","displayStatus","charAt","toUpperCase","slice","icon","StatusEnum","Pending","Processing","Completed","Saved","Error","fontSize","statusBadge","marginBottom","model","href","seed","SmudgeTool","renderer","brushSize","brushOpacity","lastX","lastY","panning","smudging","_dirty","dirtyListener","dirty","setCursor","radius","x","y","args","sync","event","zoomHelper","translateMouseToCanvasCoordinates","nativeEvent","offsetX","offsetY","onPan","smudgeLine","onWheel","button","copyEditImageFromBaseImage","listener","saveListener","setEditImage","commitSelection","encodedImage","getEncodedImage","BaseTool","SmudgeControls","tool","setBrushSize","setBrushOpacity","setDirty","onDirty","updateArgs","Math","round","step","parseFloat","visibility","cancel","confirm","InpaintTool","axios","create","selectionTool","negativePrompt","count","loras","worker","idCounter","_state","stateHandler","selectionControlsListener","selectedImageDataIndex","selectedImageData","erasing","progressListener","errorListener","SelectionTool","selectSupported","state","outpaint","getArgs","ImageUtilWorker","handler","destroy","imageWidth","getWidth","imageHeight","getHeight","selectionWidth","selectionOverlay","erasePoint","onMouseDown","render","updateCursor","onMouseMove","onMouseUp","onMouseLeave","alphaMask","loadImageDataElement","imageElement","canvas","document","createElement","ctx","getContext","drawImage","getImageData","newId","processRequest","alphaMode","alphaPixels","data","feather","pixels","featherWidth","resp","updatedImageData","ImageData","remove","snapshot","undo","clearRedoStack","progress","generator","notifyError","getSelectionOverlay","console","expandToOverlay","updateProgress","encodedMask","getEncodedMask","maskData","input","defaultArgs","encoded_image","encoded_mask","parent","denoising_strength","closestAspectRatio","getClosestAspectRatio","temporary","generateImages","loaded","total","job","newImages","completed","startTime","moment","sleep","checkGenerationJob","images","all","map","loadImageData","diff","client","deleteImageRequest","sort","b","created_at","i","push","phrases","negative_phrases","selection_overlay","InpaintControls","setCount","setPrompt","setNegativePrompt","setState","setProgress","setError","setoutpaint","setModel","selectingModel","setSelectingModel","selectingLora","setSelectingLora","selectedLoras","setSelectedLoras","selectedLorasFromConfigs","then","selected","onChangeState","onProgress","onError","role","data-dismiss","aria-label","aria-hidden","checked","htmlFor","onAddTrigger","trigger","parts","endsWith","join","lora","onRemove","updated","selectedLora","config","name","onRemoveLora","imagesCost","submit","when","onCancel","onSelectModel","initialSelectedModel","inpainting","onConfirm","onAddLora","anonymousClient","defaults","headers","common","Homepage","imageClient","localImages","paymentStatus","creating","setCreating","selectedImage","setSelectedImage","parentImage","setParentImage","loadingParent","setLoadingParent","savingImage","uploadProgress","setUploadingProgress","showPendingImages","setShowPendingImages","setImages","jobs","setJobs","err","setErr","errTime","setErrTime","hasMore","setHasMore","search","setSearch","searchDebounce","setSearchDebounce","bulkDeleteSelecting","setBulkDeleteSelecting","bulkDeleting","setBulkDeleting","bulkDeleteIds","setBulkDeleteIds","setCensorNSFW","outOfCredits","setOutOfCredits","useParams","history","useHistory","location","useLocation","valueOf","handle","find","getImage","replace","onSubmit","scrollTo","convertPNGToJPG","response","includes","onEditNewImage","createBlankImage","newImage","created_by","steps","uuid","saveImage","updatedImage","loadImages","log","add","listImages","sortImages","lock","pollImages","checkGenerationJobs","updatedJobs","pendingJobs","timerHandle","setInterval","clearInterval","qs","parse","ignoreQueryPrefix","loadImage","imageUrl","responseType","binaryImageData","Buffer","from","base64ImageData","toString","loadParent","isPendingOrProcessing","onLoadMore","minUpdatedAt","forEach","imagesById","reduce","acc","deleted_at","nextImage","index","findIndex","deleteImage","onDeleteJob","j","onThumbnailClicked","onConfirmBulkDelete","promises","Object","keys","completedOrSavedImages","processingJobs","textAlign","paddingBottom","placeholder","Toggle","variant","Menu","Item","dataLength","next","loader","pendingCount","processingCount","bulkDelete","newIndex","colors","MaskEditor","onRevert","brushColor","setBrushColor","flexDirection","flexWrap","invertMask","eraserWidthModifier","EnhanceTool","pencilTool","variationStrength","maskHandler","PencilTool","selectionArgs","getUpscaleLevel","baseWidth","eraserRadius","floor","relX","relY","startX","startY","endX","endY","sqrt","pow","alphaPct","alpha","req","isMasked","deleteMask","createMask","ceil","EnhanceControls","setVariationStrength","setIsMasked","onChangeMask","cost","calculateImagesCost","ProgressBar","lockAspectRatio","ResetToDefaultIcon","LoraTriggers","SelectedLora","CostIndicator","erase","mask","ModelSelector","AspectRatio","cfg","newWidth","newHeight","DEFAULT_ASPECT_RATIO","tests","aRatio","bRatio","abs","ImageEditor","showSelectionControls","setShowSelectionControls","tools","iconClass","constructor","r","renderControls","t","onShowSelectionControls","defaultColors","setImage","setRenderer","setTool","toolConfig","setToolConfig","canUndo","setCanUndo","canRedo","setCanRedo","busyMessage","setBusyMessage","canvasRef","onSelectTool","toolconfig","newTool","onSaveImage","saveNewImage","newArgs","preventDefault","localImage","imageSrc","Image","onload","createRenderer","setBaseImage","onSnapshot","addEventListener","removeEventListener","updateCanvasSize","resetView","buttonClass","renderTool","redo","verticalAlign","touchAction","userSelect","select","Renderer","undoStack","redoStack","currentSnapshot","backgroundLayer","baseImageLayer","editLayer","maskLayer","selectionOverlayPreview","hasSelection","zoom","snapshotListener","initializeBackgroundLayer","allowRedo","pop","clearRect","putImageData","notifySnapshotListener","shift","context","setTransform","globalAlpha","drawOverlay","resetMask","fillStyle","fillRect","pattern","createPattern","createCheckeredPattern","color1","color2","updateSelectionOverlay","setSelectionOverlay","updateZoomAndOffset","lineWidth","strokeStyle","strokeRect","beginPath","arc","PI","stroke","fill","moveTo","lineTo","toDataURL","split","selection","imageDataToEncodedImage","erasure","layer","convertErasureToMask","imageLayer","brushx","brushy","absx","leftEdge","rightEdge","topEdge","bottomEdge","absy","contains","x1","y1","x2","y2","lineCap","unitVector","totalRed","totalGreen","totalBlue","averageRed","averageGreen","averageBlue","pixel","g","rgbToHex","minX","minY","newCanvas","ImportExportControls","backupImage","setBackupImage","files","byteString","atob","buffer","ArrayBuffer","intArray","Uint8Array","charCodeAt","blob","Blob","saveAs","onExport","dataUrl","splitImage","initImage","tile_size","num_tiles_x","num_tiles_y","tiles","x0","y0","tile","numTilesX","numTilesY","tileSize","mergeTiles","splitResult","tileCanvas","imageDataToCanvas","fixImageSize","resizeImage","numWorkers","workers","callbacks","Worker","process","onMessage","bind","postMessage","terminate","decodeImage","startsWith","resizeEncodedImage","format","base64","AugmentControls","activeAugmentation","setActiveAugmentation","imageWorker","setImageWorker","lastError","setLastError","augmentImageData","augmentation","c","start","augmentImage","processingImage","checkAugmentation","deleteInterrogationRequest","upscaleFactor","newImageData","onAugment","PendingJobsThumbnail","hover","setHover","onMouseEnter","backgroundImage","backgroundSize","background","lineHeight","PendingJobs","imageIcon","pendingDiv","Footer","OutOfCreditsModal","centered","to","PaymentStatusModal","handleClose","baseUrl","HordeClient","apiKey","payload","onUploadProgress","api_key","post","submitReq","submitResults","reqId","chkReq","chkResults","JSON","stringify","waiting","processing","restarted","finished","done","retrieveReq","resultsJson","faulted","generations","censored","webpImageResponse","forms","form","AddMetricItemTypeEnum","HealthcheckStatusEnum","ImageParamsControlnetTypeEnum","ImageParamsAugmentationEnum","UpsertWorkerInputStatusEnum","WorkerStatusEnum","RecentList","listSize","modelsJson","localStorage","getItem","models","setItem","removed","recentModels","getRecentItems","modelIndex","splice","unshift","saveRecentItems","recentNegativePrompts","recentLoras","ZoomHelper","startTouches","startZoom","startOffsetX","startOffsetY","originalZoom","getZoom","getOffsetX","getOffsetY","canvasPoint","deltaY","xDiff","yDiff","movementX","movementY","rect","getBoundingClientRect","getCanvas","touches","canvasRect","startTouch1","startTouch2","touch1","touch2","startDistance","clientY","startCenterX","startCenterY","centerX","centerY","startCanvasPoint","xDiff2","yDiff2","mouseX","mouseY","touchHandle","_pinchZooming","_panning","_updateCursor","touch","identifier","pageX","pageY","screenX","screenY","LocalImagesStore","evt","imagesStore","objectStoreNames","keyPath","createIndex","unique","_","legacyImage","stable_diffusion_strength","iterations","store","hydrateImage","cleanupDeletedImages","hardDeleteImage","range","IDBKeyRange","lowerBound","upperBound","openCursor","toLowerCase","continue","imagesRequest","clear","olderThan","getDeletedImages","deletedImages","subtract","LocalDeletedImages","deleting","setDeleting","onDeleteImage","onDeleteAllImages","clearDeletedImages","onRestoreImage","goBack","borderBottom","ImageThumbnail","paddingTop","BusyModal","savedImagesCache","kvstore","limit","savedImage","SavedImagesPage","imagesResult","pathname","TestPage","originalImage","setOriginalImage","upscaledImage","setUpscaledImage","upscaleImageData","onImageSelected","originalImageData","upscaledTile","upscaledImageData","upscale","feathered","upscaledCanvas","fetchHordeData","hordeStateMap","_triggers","_lastUpdated","initTriggers","modelInfo","addTrigger","triggerList","toLocaleLowerCase","augmentationToForm","face_restore","remove_background","stripWeightsFromPrompt","combinePrompts","separator","maxPromptLength","promptLength","negativePromptLength","halfLength","HordeGenerator","trim","n","karras","sampler_name","cfg_scale","hires_fix","post_processing","control_type","controlnet_type","strength","clip","censor_nsfw","trusted_workers","slow_workers","r2","source_processing","source_image","source_mask","initiateImageGeneration","jobId","checkImageJob","checkResult","fetchImageResults","results","initiateAlchemistImageInterrogation","checkInterrogationStatus","fetchInterrogationResult","HordeUser","user","setUser","setApiKey","showModal","setShowModal","apiKeyInput","setApiKeyInput","storedUser","storedApiKey","updateApiKey","loadUserFromStorage","validateApiKey","accept","apikey","username","Form","Group","controlId","Label","Control","Button","ImageClient","manifestId","manifest","imageIds","reverse","query","loadManifest","startIndex","nextCursor","endIndex","selectedImageIds","fetchedImages","filteredImages","imageId","hordeClient","URLSearchParams","getManifestId","App","init","path","exact","bottom","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","getElementById","backdrop","keyboard","migrateToIDs","recentList","getItems","migrateRequired","match","addItem","deleteItem","recentLoraIDs","loraID","savedLora","loraId","configs","getLora","LoraModal","inputValue","setInputValue","setStrength","item","recentItems","setRecentItems","busy","setBusy","handleSearch","useCallback","modelId","listRecentLoras","items","fetchRecentLoras","filteredItems","recentItem","as","Row","Col","sm","ListGroup","overflowY","action","column","dangerouslySetInnerHTML","__html","DOMPurify","sanitize","description","allowCommercialUse","creator","tags","tag","modelVersions","version","baseModel","trainedWords","word","idx","url","addLora","aria-valuenow","aria-valuemin","aria-valuemax","ms","SelectedLoraTag","allTriggers","renderTooltip","placement","overlay","backgroundRepeat","backgroundPosition","readOnly","controlnetTypes","SeedInput","setSeed","useCustomSeed","setUseCustomSeed","FormGroup","FormCheck","random","FormControl","TextInputWithHistory","onBlur","Dropdown","onSelect","eventKey","overflow","defaultNegativePrompt","ImagePrompt","setAspectRatio","parentId","setParentId","advancedView","setAdvancedView","setEncodedImage","controlnetType","setControlnetType","cfgScale","setCfgScale","setSize","defaultAspectRatio","setAspectRatioDetails","originalWidth","setOriginalWidth","originalHeight","setOriginalHeight","resetState","handleSubmit","l","bestMatch","scale","file","HTMLCanvasElement","scaledAspectRatio","textDecoration","aspectRatioId","toFixed","ModelList","selectedModel","setMaxHeight","handleResize","active","cache","storage","ttl","expiry","Date","now","itemStr","removeItem","initialValue","cachedValue","setValue","useCache","setModels","setSelectedModel","searchTerm","setSearchTerm","filteredModels","setSortedModels","recentModelNames","recentModelIndices","sortedModels","aIndex","bIndex","res","values","showcases","ColorPicker","isDrawing","colorPicking","lastPickedColor","colorPickedListener","drawPoint","getPixel","drawLine","Controls","palette","setPalette","addToPalette","onColorPicked","beginColorpicker","clamp","setSelectionOverlayPreview","upscaleLevel"],"mappings":"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","file":"static/js/main.31794d34.chunk.js","sourcesContent":["import React, { FC, useEffect, useState } from 'react';\nimport moment from \"moment\";\n\n// implement an error notification component\n// error message and timestamp are passed in as props\n// but close button can make the error message disappear\n\n// show error when the timestamp or message changes with useEffect hook\n// hide error when the close button is clicked\n\ninterface Props {\n    message: string | null;\n    timestamp: number;\n}\n\ninterface AlertProps {\n    message: string;\n    timestamp: number;\n    alertType: 'success' | 'info' | 'warning' | 'danger';\n}\n\nconst Alert: FC<AlertProps> = ({ message, timestamp, alertType }) => {\n    const [show, setShow] = useState(!!message);\n\n    useEffect(() => {\n        setShow(!!message);\n        // set a timeout of 10 seconds to hide the message if it is currently showing\n        if (message) {\n            const timeout = setTimeout(() => {\n                setShow(false);\n            }, 10000);\n            return () => {\n                clearTimeout(timeout);\n            };\n        }\n    }, [message, timestamp]);\n\n    if (!show) {\n        return null;\n    }\n\n    return (\n        <div className={`alert alert-${alertType} ${show ? 'show' : 'hide'}`}>\n            <button\n                type=\"button\"\n                className=\"close\"\n                onClick={() => setShow(false)}\n            >\n                &times;\n            </button>\n            {message}\n        </div>\n    );\n};\n\nexport const ErrorNotification: FC<Props> = ({ message, timestamp }) => {\n    return (\n        <Alert message={message || ''} timestamp={timestamp} alertType=\"danger\" />\n    );\n};\n\nexport const SuccessNotification: FC<Props> = ({ message, timestamp }) => {\n    return (\n        <Alert message={message || ''} timestamp={timestamp} alertType=\"success\" />\n    );\n};\n","import React, { FC, useEffect, useRef, useState } from \"react\";\n\nimport { aspectRatios, DEFAULT_ASPECT_RATIO, getClosestAspectRatio } from \"../lib/aspecRatios\";\n\ninterface Props {\n    aspectRatio: number;\n    onChange: (aspectRatio: number) => void;\n    disabled?: boolean;\n}\n\nexport const AspectRatioSelector: FC<Props> = ({ aspectRatio, onChange, disabled }) => {\n    const aspectRatioDetails = aspectRatios[aspectRatio];\n    return (\n        <div className=\"form-group\">\n            <div\n                style={{\n                    minHeight: \"140px\",\n                    display: \"flex\",\n                    alignItems: \"center\",\n                }}\n            >\n                {/* aspect ratio slider, goes from 0 -> aspectRatios.length - 1 */}\n                <div\n                    style={{\n                        width: aspectRatioDetails.width / 8,\n                        height: aspectRatioDetails.height / 8,\n                        // dotted line options: dotted, dashed, solid, double, groove, ridge, inset, outset, none, hidden\n                        border: \"1px dashed white\",\n                        margin: \"auto\",\n                    }}\n                ></div>\n            </div>\n            <label style={{width: \"100%\"}}>\n                Aspect Ratio\n                <small className=\"form-text text-muted\" style={{float: \"right\"}}>\n                    {aspectRatioDetails.displayName}\n                </small>\n            </label>\n            <input\n                type=\"range\"\n                disabled={disabled}\n                className=\"form-control-range\"\n                min={0}\n                max={aspectRatios.length - 1}\n                value={aspectRatio}\n                onChange={(e) => {\n                    onChange(parseInt(e.target.value));\n                }}\n            />\n        </div>\n    );\n};\n","export interface DBConfig {\n    dbName: string;\n    storeName: string;\n};\n\nexport class KVStore<T> {\n    private dbConfig: DBConfig;\n    private db: IDBDatabase | null = null;\n\n    constructor(dbConfig: DBConfig) {\n        this.dbConfig = dbConfig;\n    }\n\n    private async createDB(): Promise<IDBDatabase> {\n        return new Promise((resolve, reject) => {\n            const request = indexedDB.open(this.dbConfig.dbName);\n\n            request.onupgradeneeded = () => {\n                const db = request.result;\n                db.createObjectStore(this.dbConfig.storeName);\n            };\n\n            request.onsuccess = () => {\n                resolve(request.result);\n            };\n\n            request.onerror = () => {\n                reject(request.error);\n            };\n        });\n    }\n\n    private async getDB(): Promise<IDBDatabase> {\n        if (!this.db) {\n            this.db = await this.createDB();\n        }\n        return this.db;\n    }\n\n\n    async getItem(key: string): Promise<T | null> {\n        const db = await this.getDB();\n\n        return new Promise((resolve, reject) => {\n            const transaction = db.transaction(this.dbConfig.storeName);\n            const store = transaction.objectStore(this.dbConfig.storeName);\n            const request = store.get(key);\n\n            request.onsuccess = () => {\n                resolve(request.result);\n            };\n\n            request.onerror = () => {\n                resolve(null);\n            };\n        });\n    }\n\n    async setItem(key: string, value: T): Promise<void> {\n        const db = await this.getDB();\n\n        return new Promise((resolve, reject) => {\n            const transaction = db.transaction(\n                this.dbConfig.storeName,\n                \"readwrite\"\n            );\n            const store = transaction.objectStore(this.dbConfig.storeName);\n            const request = store.put(value, key);\n\n            request.onsuccess = () => {\n                resolve();\n            };\n\n            request.onerror = () => {\n                resolve();\n            };\n        });\n    }\n\n    async deleteItem(key: string): Promise<void> {\n        const db = await this.getDB();\n\n        return new Promise((resolve, reject) => {\n            const transaction = db.transaction(\n                this.dbConfig.storeName,\n                \"readwrite\"\n            );\n            const store = transaction.objectStore(this.dbConfig.storeName);\n            const request = store.delete(key);\n\n            request.onsuccess = () => {\n                resolve();\n            };\n\n            request.onerror = () => {\n                resolve();\n            };\n        });\n    }\n\n    async getAllItems(): Promise<T[]> {\n        const db = await this.getDB();\n\n        return new Promise((resolve, reject) => {\n            const transaction = db.transaction(this.dbConfig.storeName);\n            const store = transaction.objectStore(this.dbConfig.storeName);\n            const request = store.getAll();\n\n            request.onsuccess = () => {\n                resolve(request.result);\n            };\n\n            request.onerror = () => {\n                resolve([]);\n            };\n        });\n    }\n}\n","import React, { FC, useState, useEffect } from \"react\";\nimport { ChromePicker } from \"react-color\";\n\ninterface Props {\n    selectedColor: string;\n    color: string;\n    onClick: (color: string) => void;\n    onColorSelected?: (color: string) => void;\n}\n\nexport const PaletteButton: FC<Props> = ({\n    selectedColor,\n    color,\n    onClick,\n    onColorSelected,\n}) => {\n    const [displayColorPicker, setDisplayColorPicker] = useState(false);\n    const [tmpColor, setTmpColor] = useState(color);\n\n    useEffect(() => {\n        setTmpColor(color);\n    }, [color]);\n\n    const popover: React.CSSProperties = {\n        position: \"absolute\",\n        zIndex: 2,\n    };\n\n    let className = \"palette-button\";\n    if (selectedColor === color) {\n        className += \" selected\";\n    } else if (color == \"#000000\") {\n        className += \" black\";\n    }\n    return (\n        <>\n            <div\n                className={className}\n                style={{ backgroundColor: color }}\n                onClick={() => onClick(color)}\n                onDoubleClick={() => setDisplayColorPicker(!displayColorPicker)}\n            ></div>\n            {onColorSelected && displayColorPicker ? (\n                <div style={popover}>\n                    {/* <div style={cover} onClick={handleClose} /> */}\n                    <ChromePicker\n                        color={tmpColor}\n                        onChange={(color) => setTmpColor(color.hex)}\n                        onChangeComplete={(color) => setTmpColor(color.hex)}\n                    />\n                    <button\n                        className=\"btn btn-primary\"\n                        style={{ marginRight: \"8px\", marginLeft: \"16px\" }}\n                        onClick={() => {\n                            onColorSelected(tmpColor);\n                            setDisplayColorPicker(false);\n                        }}\n                    >\n                        <i className=\"fas fa-check\" />\n                    </button>\n                    <button\n                        className=\"btn btn-primary\"\n                        onClick={() => setDisplayColorPicker(false)}\n                    >\n                        <i className=\"fas fa-times\" />\n                    </button>\n                </div>\n            ) : null}\n        </>\n    );\n};\n","import React, { useState } from 'react';\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\n\ninterface CopyToClipboardIconProps {\n  text: string;\n}\n\nconst CopyToClipboardIcon: React.FC<CopyToClipboardIconProps> = ({ text }) => {\n  const [copied, setCopied] = useState(false);\n\n  const handleCopy = () => {\n    setCopied(true);\n    setTimeout(() => setCopied(false), 5000); // Reset icon after 5 seconds\n  };\n\n  return (\n    <CopyToClipboard text={text} onCopy={handleCopy}>\n      <span style={{cursor: \"pointer\", marginLeft: \"8px\"}}>\n        {/* <FontAwesomeIcon icon={copied ? faCheck : faCopy} style={{ color: copied ? 'green' : undefined }} /> */}\n        <i className={`fas fa-${copied ? 'check' : 'copy'}`} style={{ color: copied ? 'green' : undefined }} />\n      </span>\n    </CopyToClipboard>\n  );\n};\n\nexport default CopyToClipboardIcon;\n","import { useState, FC, TouchEvent } from \"react\";\n\ninterface Props {\n    onSwipe: (direction: number) => void;\n}\n\nexport const Swipe: FC<Props> = ({ onSwipe, children }) => {\n    const [touchStart, setTouchStart] = useState<number | null>(null)\n    const [touchEnd, setTouchEnd] = useState<number | null>(null);\n\n    // the required distance between touchStart and touchEnd to be detected as a swipe\n    const minSwipeDistance = 50;\n\n    const onTouchStart = (e: TouchEvent<HTMLDivElement>) => {\n        setTouchEnd(null); // otherwise the swipe is fired even with usual touch events\n        setTouchStart(e.targetTouches[0].clientX);\n    };\n\n    const onTouchMove = (e: TouchEvent<HTMLDivElement>) => setTouchEnd(e.targetTouches[0].clientX);\n\n    const onTouchEnd = () => {\n        if (!touchStart || !touchEnd) return;\n        const distance = touchStart - touchEnd;\n        const isLeftSwipe = distance > minSwipeDistance;\n        const isRightSwipe = distance < -minSwipeDistance;\n        if (isLeftSwipe || isRightSwipe) {\n            onSwipe(isLeftSwipe ? 1 : -1);\n        }\n    };\n\n    return (\n        <div\n            onTouchStart={onTouchStart}\n            onTouchMove={onTouchMove}\n            onTouchEnd={onTouchEnd}\n        >\n            {children}\n        </div>\n    );\n};\n","import React, { FC, useEffect, useRef, useState } from \"react\";\nimport { Modal } from \"react-bootstrap\";\nimport { CreateImageInput, Image, StatusEnum } from \"../client/api\";\nimport { LocalImage } from \"../lib/models\";\nimport CopyToClipboard from \"react-copy-to-clipboard\";\nimport CopyToClipboardIcon from \"./CopyToClipboardIcon\";\nimport { Swipe } from \"./Swipe\";\n\ninterface ImagePopupProps {\n    image: LocalImage;\n    censorNSFW: boolean;\n    onClose: () => void;\n    onDelete?: (image: LocalImage) => void;\n    onFork?: (image: LocalImage) => void;\n    onEdit?: (image: LocalImage) => void;\n    onNSFW?: (image: LocalImage, nsfw: boolean) => void;\n    onSave?: (image: LocalImage) => void;\n    onSwipe?: (image: LocalImage, direction: number) => void;\n}\n\nexport const ImagePopup: FC<ImagePopupProps> = ({\n    image,\n    censorNSFW,\n    onClose,\n    onDelete,\n    onFork,\n    onEdit,\n    onNSFW,\n    onSave,\n    onSwipe,\n}) => {\n    const img = useRef<HTMLImageElement>(null);\n    let src = `https://aibrush2-filestore.s3.amazonaws.com/${image.id}.image.png?updated_at=${image.updated_at}`;\n    if (image.imageData) {\n        src = image.imageData;\n    }\n    let score = image.score || 0;\n    if (image.params.negative_prompt && image.negative_score != 0) {\n        score -= image.negative_score || 0;\n    }\n    const [showNSFW, setShowNSFW] = useState(false);\n\n    const statusBadge = (status: string) => {\n        const displayStatus = status.charAt(0).toUpperCase() + status.slice(1);\n        let icon = \"fa fa-question-circle\";\n        switch (status) {\n            case StatusEnum.Pending:\n                icon = \"fas fa-hourglass-half\";\n                break;\n            case StatusEnum.Processing:\n                icon = \"fas fa-cog fa-spin\";\n                break;\n            case StatusEnum.Completed:\n                icon = \"fas fa-check\";\n                break;\n            case StatusEnum.Saved:\n                icon = \"fas fa-save\";\n                break;\n            case StatusEnum.Error:\n                icon = \"fas fa-exclamation-circle\";\n                break;\n        }\n        return (\n            <>\n                <span style={{ fontSize: \"24px\" }}>\n                    <i\n                        className={`${icon} status-badge status-badge-${status}`}\n                        style={{\n                            fontSize: \"10px\",\n                            position: \"relative\",\n                            top: \"-1px\",\n                        }}\n                    ></i>\n                    &nbsp;{displayStatus}\n                </span>\n            </>\n        );\n    };\n\n    useEffect(() => {\n        if (!img.current) {\n            return;\n        }\n        img.current.onerror = () => {\n            if (!img.current) {\n                return;\n            }\n            img.current.src = \"/images/default.png\";\n        };\n    }, [img]);\n\n    let title = image.label;\n    if (!title) {\n        title = image.params.prompt!;\n    }\n    if (title.indexOf(\",\") > 0) {\n        title = title.substring(0, title.indexOf(\",\"));\n    }\n\n    let swipeArrowMargin = \"10px\";\n    if (window.innerWidth < 992) {\n        swipeArrowMargin = \"-30px\";\n    }\n    const maxImageHeight = window.innerHeight * 0.6 + \"px\";\n\n    // if open, show modal with image\n    return (\n        <Modal show={true} onHide={onClose} size=\"xl\">\n            <Modal.Header closeButton>\n                <Modal.Title>{title}</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <div style={{ position: \"relative\" }}>\n                    {/* Left button */}\n                    {onSwipe && (\n                        <button\n                            className=\"btn btn-secondary btn-sm image-popup-left-button\"\n                            style={{\n                                position: \"absolute\",\n                                left: swipeArrowMargin,\n                                top: \"50%\",\n                                transform: \"translateY(-50%)\",\n                                zIndex: 1,\n                                padding: \"5px 10px\",\n                            }}\n                            onClick={() => onSwipe(image, -1)}\n                        >\n                            <i className=\"fas fa-chevron-left\"></i>\n                        </button>\n                    )}\n                    <Swipe\n                        onSwipe={(direction) =>\n                            onSwipe && onSwipe(image, direction)\n                        }\n                    >\n                        <img\n                            ref={img}\n                            style={{\n                                maxWidth: \"100%\",\n                                maxHeight: maxImageHeight,\n                                display: \"block\",\n                                marginLeft: \"auto\",\n                                marginRight: \"auto\",\n                                filter:\n                                    image.nsfw && censorNSFW && !showNSFW\n                                        ? \"blur(30px)\"\n                                        : \"\",\n                            }}\n                            id={`image-popup-${image.id}`}\n                            src={src}\n                            alt={image.label}\n                        />\n                    </Swipe>\n                    {/* Right button */}\n                    <button\n                        className=\"btn btn-secondary btn-sm .image-popup-right-button\"\n                        style={{\n                            position: \"absolute\",\n                            right: swipeArrowMargin,\n                            top: \"50%\",\n                            transform: \"translateY(-50%)\",\n                            zIndex: 1,\n                            padding: \"5px 10px\",\n                        }}\n                        onClick={() => onSwipe && onSwipe(image, 1)}\n                    >\n                        <i className=\"fas fa-chevron-right\"></i>\n                    </button>\n                </div>\n                {/* List these fields: status, iterations, phrases */}\n                <div className=\"row\">\n                    <div className=\"col-lg-12\"></div>\n                </div>\n                {/* controls */}\n                <div className=\"row\">\n                    <div className=\"col-lg-12\">\n                        <div\n                            className=\"image-popup-controls\"\n                            style={{ marginTop: \"40px\" }}\n                        >\n                            {statusBadge(image.status)}\n                            <div style={{ float: \"right\" }}>\n                                {onFork &&\n                                    (image.status === StatusEnum.Saved ||\n                                        image.status ===\n                                            StatusEnum.Completed) && (\n                                        <button\n                                            className=\"btn btn-secondary btn-sm image-popup-button\"\n                                            onClick={() => onFork(image)}\n                                            style={{ marginRight: \"5px\" }}\n                                        >\n                                            <i className=\"fas fa-code-branch\"></i>\n                                            &nbsp;VARIATIONS\n                                        </button>\n                                    )}\n                                {onDelete && (\n                                    <button\n                                        className=\"btn btn-danger btn-sm image-popup-delete-button\"\n                                        onClick={() =>\n                                            onDelete && onDelete(image)\n                                        }\n                                        style={{ marginRight: \"5px\" }}\n                                    >\n                                        <i className=\"fas fa-trash-alt\"></i>\n                                        &nbsp;DELETE\n                                    </button>\n                                )}\n                                {onEdit && (\n                                    <button\n                                        className=\"btn btn-primary btn-sm image-popup-button edit-button\"\n                                        onClick={() => onEdit && onEdit(image)}\n                                        style={{ marginRight: \"5px\" }}\n                                    >\n                                        <i className=\"fas fa-edit\"></i>\n                                        &nbsp;EDIT\n                                    </button>\n                                )}\n                                {onSave && (\n                                    <button\n                                        className=\"btn btn-primary btn-sm image-popup-button\"\n                                        onClick={() => onSave && onSave(image)}\n                                        style={{ marginRight: \"5px\" }}\n                                    >\n                                        <i className=\"fas fa-save\"></i>\n                                        &nbsp;SAVE\n                                    </button>\n                                )}\n                                {image.nsfw && censorNSFW && (\n                                    <button\n                                        className=\"btn btn-primary btn-sm image-popup-button\"\n                                        onClick={() => setShowNSFW(!showNSFW)}\n                                        style={{ marginRight: \"5px\" }}\n                                    >\n                                        <i className=\"fas fa-eye\"></i>\n                                        &nbsp;{showNSFW ? \"HIDE\" : \"SHOW\"}\n                                    </button>\n                                )}\n                            </div>\n                        </div>\n                        <div\n                            className=\"image-popup-controls\"\n                            style={{ marginTop: \"28px\", marginBottom: \"85px\" }}\n                        >\n                            {/* Horde interface doesn't support score yet */}\n                            {/* <div>\n                                Similarity to prompt: {(score * 200).toFixed(2)}\n                                %\n                            </div> */}\n                            <div>\n                                Image dimensions: {image.params.width} x{\" \"}\n                                {image.params.height}\n                            </div>\n                            <div>Model: {image.model}</div>\n                            {image.nsfw && (\n                                <>\n                                    <div>\n                                        {/* alert warning icon */}\n                                        <i\n                                            className=\"fas fa-exclamation-triangle\"\n                                            style={{\n                                                color: \"orange\",\n                                                fontSize: \"18px\",\n                                                position: \"relative\",\n                                                top: \"2px\",\n                                            }}\n                                        ></i>\n                                        &nbsp;May contain NSFW content\n                                    </div>\n                                    {onNSFW && (\n                                        <a\n                                            href=\"javascript:void(0)\"\n                                            onClick={() => onNSFW(image, false)}\n                                        >\n                                            Mark as Safe for Work\n                                        </a>\n                                    )}\n                                </>\n                            )}\n                            {image.params.seed && (\n                                <div>Seed: {image.params.seed}</div>\n                            )}\n                            {!image.nsfw && (\n                                <>\n                                    <div>\n                                        {/* green check icon */}\n                                        <i\n                                            className=\"fas fa-check\"\n                                            style={{\n                                                color: \"green\",\n                                                fontSize: \"18px\",\n                                                position: \"relative\",\n                                                top: \"2px\",\n                                            }}\n                                        ></i>\n                                        &nbsp;Safe for Work\n                                    </div>\n                                    {onNSFW && (\n                                        <a\n                                            href=\"javascript:void(0)\"\n                                            onClick={() => onNSFW(image, true)}\n                                        >\n                                            Mark as Not Safe for Work\n                                        </a>\n                                    )}\n                                </>\n                            )}\n                            <div style={{ marginTop: \"8px\" }}>\n                                Prompt: {image.params.prompt}\n                                <CopyToClipboardIcon\n                                    text={image.params.prompt!}\n                                />\n                            </div>\n                            <div style={{ marginTop: \"8px\" }}>\n                                Negative Prompt: {image.params.negative_prompt}\n                                <CopyToClipboardIcon\n                                    text={image.params.negative_prompt!}\n                                />\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </Modal.Body>\n        </Modal>\n    );\n};\n","import React, { FC, useState, useEffect } from \"react\";\nimport { Renderer } from \"./renderer\";\nimport { BaseTool, Tool } from \"./tool\";\nimport { ZoomHelper } from \"./zoomHelper\";\n\nexport class SmudgeTool extends BaseTool implements Tool {\n    private brushSize = 10;\n    private brushOpacity = 0.2;\n\n    private lastX = 0;\n    private lastY = 0;\n    private panning = false;\n    private smudging = false;\n    private _dirty = false;\n\n    set dirty(dirty: boolean) {\n        this._dirty = dirty;\n        if (this.dirtyListener) {\n            this.dirtyListener(dirty);\n        }\n    }\n\n    get dirty() {\n        return this._dirty;\n    }\n\n    private dirtyListener?: (dirty: boolean) => void;\n\n    constructor(renderer: Renderer) {\n        super(renderer, \"smudge\");\n    }\n\n    private sync() {\n        this.renderer.setCursor({\n            type: \"circle\",\n            color: \"white\",\n            radius: this.brushSize / 2,\n            x: this.lastX,\n            y: this.lastY,\n        });\n    }\n\n    updateArgs(args: any) {\n        super.updateArgs(args);\n        this.brushSize = args.brushSize || 10;\n        this.brushOpacity = args.brushOpacity || 0.2;\n        this.sync();\n    }\n\n    onMouseMove(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>): void {\n        let { x, y } = this.zoomHelper.translateMouseToCanvasCoordinates(\n            event.nativeEvent.offsetX,\n            event.nativeEvent.offsetY\n        );\n\n        if (this.panning) {\n            this.zoomHelper.onPan(event);\n        } else if (this.smudging) {\n            this.renderer.smudgeLine(\n                this.lastX,\n                this.lastY,\n                x,\n                y,\n                this.brushSize,\n                this.brushOpacity\n            );\n            this.dirty = true;\n        }\n\n        this.lastX = x;\n        this.lastY = y;\n        this.sync();\n    }\n\n    onWheel(event: WheelEvent) {\n        this.zoomHelper.onWheel(event);\n        this.sync();\n    }\n\n    onMouseDown(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        if (event.button === 0) {\n            this.smudging = true;\n            if (!this.dirty) {\n                this.renderer.copyEditImageFromBaseImage();\n            }\n            this.dirty = true;\n            let { x, y } = this.zoomHelper.translateMouseToCanvasCoordinates(\n                event.nativeEvent.offsetX,\n                event.nativeEvent.offsetY\n            );\n            this.lastX = x;\n            this.lastY = y;\n            this.sync();\n        } else if (event.button === 1) {\n            this.panning = true;\n        }\n        this.sync();\n    }\n\n    onMouseUp(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        this.smudging = false;\n        this.panning = false;\n        this.sync();\n    }\n\n    onSaveImage(listener: (encodedImage: string) => void): void {\n        this.saveListener = listener;\n    }\n\n    onDirty(listener: (dirty: boolean) => void): void {\n        this.dirtyListener = listener;\n    }\n\n    cancel() {\n        // kind of a hack, clears the selection layer\n        this.renderer.setEditImage(null);\n        this.dirty = false;\n    }\n\n    confirm() {\n        this.renderer.commitSelection();\n        const encodedImage = this.renderer.getEncodedImage(null);\n        if (encodedImage && this.saveListener) {\n            this.saveListener(encodedImage);\n        }\n        this.dirty = false;\n    }\n\n    destroy(): boolean {\n        if (this.dirty) {\n            this.renderer.commitSelection();\n        }\n        return true;\n    }\n}\n\ninterface Props {\n    renderer: Renderer;\n    tool: SmudgeTool;\n}\n\nexport const SmudgeControls: FC<Props> = ({ renderer, tool }) => {\n    const [brushSize, setBrushSize] = useState(10);\n    const [brushOpacity, setBrushOpacity] = useState(0.2);\n    const [dirty, setDirty] = useState(false);\n\n    tool.onDirty(setDirty);\n\n    useEffect(() => {\n        tool.updateArgs({\n            brushSize,\n            brushOpacity,\n        });\n    }, [brushSize, brushOpacity]);\n\n    return (\n        <div style={{ marginTop: \"16px\" }}>\n            <div className=\"form-group\">\n                <label style={{ width: \"100%\" }}>\n                    Brush size\n                    <small\n                        className=\"form-text text-muted\"\n                        style={{ float: \"right\" }}\n                    >\n                        {brushSize}px\n                    </small>\n                </label>\n                <input\n                    type=\"range\"\n                    className=\"form-control-range\"\n                    min=\"1\"\n                    max=\"100\"\n                    value={brushSize}\n                    onChange={(e) => setBrushSize(parseInt(e.target.value))}\n                />\n            </div>\n            <div className=\"form-group\">\n                <label style={{ width: \"100%\" }}>\n                    Brush opacity\n                    <small\n                        className=\"form-text text-muted\"\n                        style={{ float: \"right\" }}\n                    >\n                        {Math.round(brushOpacity * 100)}%\n                    </small>\n                </label>\n                <input\n                    type=\"range\"\n                    className=\"form-control-range\"\n                    min=\"0\"\n                    max=\"1\"\n                    step=\"0.01\"\n                    value={brushOpacity}\n                    onChange={(e) =>\n                        setBrushOpacity(parseFloat(e.target.value))\n                    }\n                />\n            </div>\n            <div\n                className=\"form-group\"\n                style={{\n                    marginTop: \"16px\",\n                    visibility: dirty ? \"visible\" : \"hidden\",\n                }}\n            >\n                <button\n                    className=\"btn btn-secondary\"\n                    onClick={() => tool.cancel()}\n                >\n                    Revert\n                </button>\n                <button\n                    className=\"btn btn-primary\"\n                    onClick={() => tool.confirm()}\n                    style={{ marginLeft: \"8px\" }}\n                >\n                    Save\n                </button>\n            </div>\n        </div>\n    );\n};\n","import React, { FC, useState, useEffect, useRef } from \"react\";\nimport axios from \"axios\";\nimport { Prompt } from \"react-router\";\n\nimport { sleep } from \"../../lib/sleep\";\nimport { defaultArgs } from \"../../components/ImagePrompt\";\nimport { Tool, BaseTool } from \"./tool\";\nimport { Renderer } from \"./renderer\";\nimport { SelectionTool } from \"./selection-tool\";\nimport { Cursor, Rect } from \"./models\";\nimport {\n    AIBrushApi,\n    CreateImageInput,\n    Image as APIImage,\n    ImageList,\n    LoraConfig,\n    StatusEnum,\n} from \"../../client\";\nimport { ZoomHelper } from \"./zoomHelper\";\nimport { getClosestAspectRatio } from \"../../lib/aspecRatios\";\nimport { getUpscaleLevel } from \"../../lib/upscale\";\nimport {\n    applyAlphaMask,\n    featherEdges,\n    ImageUtilWorker,\n    loadImageDataElement,\n} from \"../../lib/imageutil\";\nimport { ApiSocket, NOTIFICATION_IMAGE_UPDATED } from \"../../lib/apisocket\";\nimport moment from \"moment\";\nimport { ProgressBar } from \"../../components/ProgressBar\";\nimport { calculateImagesCost } from \"../../lib/credits\";\nimport { CostIndicator } from \"../../components/CostIndicator\";\nimport ModelSelector from \"../../components/ModelSelector\";\nimport { ResetToDefaultIcon } from \"../../components/ResetToDefaultIcon\";\nimport {\n    LoraModal,\n    SelectedLora,\n    selectedLorasFromConfigs,\n} from \"../../components/LoraSelector\";\nimport { LoraTriggers } from \"../../components/LoraTriggers\";\nimport { SelectedLoraTag } from \"../../components/SelectedLora\";\nimport { GenerationJob, LocalImage } from \"../../lib/models\";\nimport { HordeGenerator } from \"../../lib/hordegenerator\";\n\nconst anonymousClient = axios.create();\n\ntype InpaintToolState =\n    | \"select\"\n    | \"erase\"\n    | \"inpaint\"\n    | \"uploading\"\n    | \"processing\"\n    | \"confirm\"\n    | undefined;\n\ninterface ImageWithData extends LocalImage {\n    data?: ImageData;\n}\n\nexport class InpaintTool extends BaseTool implements Tool {\n    private selectionTool: SelectionTool;\n    private prompt: string = \"\";\n    private negativePrompt: string = \"\";\n    private count: number = 4;\n    private brushSize: number = 10;\n    private loras: LoraConfig[] = [];\n    private _dirty = false;\n    private worker: ImageUtilWorker;\n    private idCounter = 0;\n\n    private _state: InpaintToolState;\n    private stateHandler: (state: InpaintToolState) => void = () => {};\n    private selectionControlsListener: (show: boolean) => void = () => {};\n\n    private imageData: Array<ImageData> = [];\n    private selectedImageDataIndex: number = -1;\n    private selectedImageData: ImageData | null = null;\n    private panning = false;\n    private erasing = false;\n    private progressListener?: (progress: number) => void;\n    private errorListener?: (error: string | null) => void;\n    private dirtyListener?: (dirty: boolean) => void;\n\n    set dirty(dirty: boolean) {\n        this._dirty = dirty;\n        if (this.dirtyListener) {\n            this.dirtyListener(dirty);\n        }\n    }\n\n    get dirty() {\n        return this._dirty;\n    }\n\n    private newId(): string {\n        return `${this.idCounter++}`;\n    }\n\n    onError(handler: (error: string | null) => void) {\n        this.errorListener = handler;\n    }\n\n    private notifyError(error: string | null) {\n        if (this.errorListener) {\n            this.errorListener(error);\n        }\n    }\n\n    get state(): InpaintToolState {\n        return this._state;\n    }\n\n    set state(state: InpaintToolState) {\n        if (state != this._state) {\n            if (this._state == \"select\") {\n                this.selectionTool.destroy();\n            }\n            if (this._state === \"erase\") {\n                this.renderer.setCursor(undefined);\n            }\n            this._state = state;\n            this.stateHandler(state);\n\n            if (state == \"confirm\") {\n                this.selectionControlsListener(true);\n            } else {\n                this.selectionControlsListener(false);\n                if (state == \"select\") {\n                    const imageWidth = this.renderer.getWidth();\n                    const imageHeight = this.renderer.getHeight();\n                    const selectionWidth = Math.min(\n                        imageWidth,\n                        imageHeight,\n                        512\n                    );\n                    this.selectionTool.updateArgs({\n                        selectionOverlay: {\n                            x: 0,\n                            y: 0,\n                            width: selectionWidth,\n                            height: selectionWidth,\n                        },\n                    });\n                }\n            }\n        }\n    }\n\n    selectSupported(): boolean {\n        // return !(\n        //     this.renderer.getWidth() == this.renderer.getHeight() &&\n        //     getUpscaleLevel(\n        //         this.renderer.getWidth(),\n        //         this.renderer.getHeight()\n        //     ) === 0\n        // );\n        return true;\n    }\n\n    constructor(renderer: Renderer) {\n        super(renderer, \"inpaint\");\n        this.selectionTool = new SelectionTool(renderer);\n        if (this.selectSupported()) {\n            this.state = \"select\";\n            this.selectionTool.updateArgs({\n                outpaint: this.getArgs().outpaint,\n            });\n        } else {\n            this.state = \"erase\";\n        }\n        this.worker = new ImageUtilWorker();\n    }\n\n    onMouseDown(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        if (this.state == \"select\") {\n            this.selectionTool.onMouseDown(event);\n            return;\n        }\n        let { x, y } = this.zoomHelper.translateMouseToCanvasCoordinates(\n            event.nativeEvent.offsetX,\n            event.nativeEvent.offsetY\n        );\n        if (event.button === 1) {\n            this.panning = true;\n            return;\n        }\n        if (this.state == \"erase\") {\n            this.erasing = true;\n            this.erasePoint(x, y);\n        }\n    }\n\n    private erasePoint(x: number, y: number) {\n        if (!this.dirty) {\n            this.dirty = true;\n        }\n        this.renderer.erasePoint(x, y, this.brushSize);\n        this.renderer.render();\n    }\n\n    private updateCursor(x: number, y: number) {\n        if (this.state == \"erase\") {\n            this.renderer.setCursor({\n                color: \"white\",\n                radius: this.brushSize / 2,\n                type: \"circle\",\n                x,\n                y,\n            });\n        } else {\n            this.renderer.setCursor({\n                color: \"white\",\n                radius: 10,\n                type: \"crosshairs\",\n                x,\n                y,\n            });\n        }\n    }\n\n    onMouseMove(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        let { x, y } = this.zoomHelper.translateMouseToCanvasCoordinates(\n            event.nativeEvent.offsetX,\n            event.nativeEvent.offsetY\n        );\n        this.updateCursor(x, y);\n        if (this.state == \"select\") {\n            this.selectionTool.onMouseMove(event);\n            return;\n        }\n\n        if (this.panning) {\n            this.zoomHelper.onPan(event);\n        }\n\n        if (this.erasing) {\n            this.erasePoint(x, y);\n        }\n    }\n\n    onMouseUp(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        if (this.state == \"select\") {\n            this.selectionTool.onMouseUp(event);\n        }\n        this.panning = false;\n        this.erasing = false;\n    }\n\n    onMouseLeave(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>): void {\n        if (this.state == \"select\") {\n            this.selectionTool.onMouseLeave(event);\n        }\n        this.panning = false;\n        this.erasing = false;\n    }\n\n    onWheel(event: WheelEvent) {\n        this.zoomHelper.onWheel(event);\n        let { x, y } = this.zoomHelper.translateMouseToCanvasCoordinates(\n            event.offsetX,\n            event.offsetY\n        );\n        this.updateCursor(x, y);\n    }\n\n    updateArgs(args: any) {\n        args = {\n            ...this.getArgs(),\n            ...args,\n        };\n        super.updateArgs(args);\n        this.prompt = args.prompt || \"\";\n        this.negativePrompt = args.negativePrompt || \"\";\n        this.count = args.count || 4;\n        this.brushSize = args.brushSize || 10;\n        this.loras = args.loras || [];\n\n        this.updateCursor(\n            this.renderer.getWidth() / 2,\n            this.renderer.getHeight() / 2\n        );\n        this.selectionTool.updateArgs({\n            outpaint: args.outpaint,\n        });\n    }\n\n    onChangeState(handler: (state: InpaintToolState) => void) {\n        this.stateHandler = handler;\n    }\n\n    onShowSelectionControls(listener: (show: boolean) => void): void {\n        this.selectionControlsListener = listener;\n    }\n\n    onProgress(listener: (progress: number) => void): void {\n        this.progressListener = listener;\n    }\n\n    private async loadImageData(\n        image: LocalImage,\n        alphaMask: ImageData,\n        selectionOverlay: Rect\n    ): Promise<ImageData> {\n        const imageElement = await loadImageDataElement(image);\n        const canvas = document.createElement(\"canvas\");\n        canvas.width = selectionOverlay.width;\n        canvas.height = selectionOverlay.height;\n        const ctx = canvas.getContext(\"2d\");\n        if (!ctx) {\n            throw new Error(\"Failed to get canvas context\");\n        }\n        ctx.drawImage(\n            imageElement,\n            0,\n            0,\n            selectionOverlay.width,\n            selectionOverlay.height\n        );\n        const imageData = ctx.getImageData(\n            0,\n            0,\n            selectionOverlay.width,\n            selectionOverlay.height\n        );\n\n        const id = this.newId();\n        const resp = await this.worker.processRequest({\n            id,\n            alphaMode: \"alpha\",\n            alphaPixels: alphaMask.data,\n            feather: true,\n            height: this.renderer.getHeight(),\n            width: this.renderer.getWidth(),\n            pixels: imageData.data,\n            selectionOverlay,\n            featherWidth: 10,\n        });\n        const updatedImageData = new ImageData(\n            resp.pixels,\n            imageData.width,\n            imageData.height\n        );\n        // remove canvas\n        canvas.remove();\n        return updatedImageData;\n    }\n\n    cancel() {\n        if (this.selectSupported()) {\n            this.state = \"select\";\n        } else {\n            this.state = \"erase\";\n        }\n        this.renderer.snapshot();\n        this.renderer.undo();\n        this.renderer.clearRedoStack();\n        this.imageData = [];\n        this.renderer.setEditImage(null);\n        this.dirty = false;\n    }\n\n    private updateProgress(progress: number) {\n        if (this.progressListener) {\n            this.progressListener(progress);\n        }\n    }\n\n    async submit(generator: HordeGenerator, image: LocalImage, model: string) {\n        this.notifyError(null);\n        let selectionOverlay = this.renderer.getSelectionOverlay();\n        if (!selectionOverlay) {\n            console.error(\"No selection\");\n            return;\n        }\n\n        if (this.getArgs().outpaint) {\n            // check if selection overlay is out of renderer bounds (width, height)\n            if (\n                selectionOverlay.x < 0 ||\n                selectionOverlay.y < 0 ||\n                selectionOverlay.x + selectionOverlay.width >\n                    this.renderer.getWidth() ||\n                selectionOverlay.y + selectionOverlay.height >\n                    this.renderer.getHeight()\n            ) {\n                this.renderer.expandToOverlay();\n                selectionOverlay = this.renderer.getSelectionOverlay()!;\n            }\n        }\n\n        this.state = \"uploading\";\n        this.updateProgress(0);\n\n        // get the erased area, then undo the erase to get the original image\n        const encodedMask = this.renderer.getEncodedMask(selectionOverlay);\n        const maskData = this.renderer.getImageData(selectionOverlay);\n        // hack to restore the image\n        this.renderer.snapshot();\n        this.renderer.undo();\n        this.renderer.clearRedoStack();\n\n        const encodedImage = this.renderer.getEncodedImage(selectionOverlay);\n\n        const input: CreateImageInput = defaultArgs();\n        input.label = \"\";\n        // input.encoded_image = encodedImage;\n        // input.encoded_mask = encodedMask;\n        input.encoded_image = encodedImage;\n        input.encoded_mask = encodedMask;\n        input.parent = image.id;\n        input.params.prompt = this.prompt || image.params.prompt;\n        input.params.negative_prompt =\n            this.negativePrompt || image.params.negative_prompt;\n        input.params.denoising_strength = 1;\n        input.count = this.count;\n        input.model = model;\n\n        const closestAspectRatio = getClosestAspectRatio(\n            selectionOverlay!.width,\n            selectionOverlay!.height\n        );\n        input.params.width = closestAspectRatio.width;\n        input.params.height = closestAspectRatio.height;\n        input.params.loras = this.loras;\n        input.temporary = true;\n\n        let job: GenerationJob | undefined;\n\n        try {\n            job = await generator.generateImages(input, (progress) => {\n                this.updateProgress(progress.loaded / progress.total);\n            });\n        } catch (err) {\n            console.error(\"Error creating images\", err);\n            this.notifyError(\"Failed to create image\");\n            this.state = \"select\";\n            return;\n        }\n        this.state = \"processing\";\n        this.updateProgress(0);\n        let newImages: Array<ImageWithData> = [];\n        \n        let completed = false;\n        let startTime = moment();\n        while (!completed) {\n            await sleep(2000);\n            // poll for completion\n            // poll for completion\n            job = await generator.checkGenerationJob(job);\n            this.updateProgress(job.progress);\n            if (job.status === \"completed\") {\n                completed = true;\n                newImages = job.images!.filter(\n                    (img) => img.status === \"completed\"\n                );\n                await Promise.all(\n                    newImages.map(async (img) => {\n                        const imageData = await this.loadImageData(\n                            img,\n                            maskData!,\n                            selectionOverlay!\n                        );\n                        img.data = imageData;\n                    })\n                );\n            }\n\n            if (moment().diff(startTime, \"minutes\") > 2) {\n                completed = true;\n                await generator.client.deleteImageRequest(job.id);\n            }\n        }\n\n        newImages!.sort((a, b) => {\n            return a.created_at - b.created_at;\n        });\n        newImages = newImages!.filter((img) => {\n            return img.status === StatusEnum.Completed;\n        });\n\n        this.imageData = [];\n        for (let i = 0; i < newImages!.length; i++) {\n            if (newImages![i].data) {\n                this.imageData.push(newImages![i].data as ImageData);\n            }\n        }\n        if (this.imageData.length === 0) {\n            this.state = \"select\";\n            this.notifyError(\"No images returned\");\n            return;\n        }\n        this.renderer.setEditImage(this.imageData[0]);\n        this.selectedImageDataIndex = 0;\n        this.selectedImageData = this.imageData[0];\n        this.state = \"confirm\";\n    }\n\n    onDirty(listener: (dirty: boolean) => void): void {\n        this.dirtyListener = listener;\n    }\n\n    select(direction: \"left\" | \"right\") {\n        if (direction == \"left\") {\n            this.selectedImageDataIndex--;\n            if (this.selectedImageDataIndex < -1) {\n                this.selectedImageDataIndex = this.imageData.length - 1;\n            }\n        }\n        if (direction == \"right\") {\n            this.selectedImageDataIndex++;\n            if (this.selectedImageDataIndex >= this.imageData.length) {\n                this.selectedImageDataIndex = -1;\n            }\n        }\n        if (this.selectedImageDataIndex === -1) {\n            this.selectedImageData = null;\n        } else {\n            this.selectedImageData =\n                this.imageData[this.selectedImageDataIndex];\n        }\n        this.renderer.setEditImage(this.selectedImageData);\n    }\n\n    onSaveImage(listener: (encodedImage: string, args?: any) => void): void {\n        this.saveListener = listener;\n    }\n\n    confirm() {\n        this.renderer.commitSelection();\n\n        this.imageData = [];\n        const encodedImage = this.renderer.getEncodedImage(null);\n        if (encodedImage && this.saveListener) {\n            this.saveListener(encodedImage, {\n                phrases: [this.prompt],\n                negative_phrases: [this.negativePrompt],\n                selection_overlay: this.renderer.getSelectionOverlay(),\n            });\n        }\n        this.dirty = false;\n        if (this.selectSupported()) {\n            this.state = \"select\";\n        } else {\n            this.state = \"erase\";\n        }\n    }\n\n    destroy(): boolean {\n        if (this.dirty) {\n            if (!window.confirm(\"Discard changes?\")) {\n                return false;\n            }\n        }\n        this.renderer.setCursor(undefined);\n        this.renderer.setEditImage(null);\n        this.worker.destroy();\n        return true;\n    }\n}\n\ninterface ControlsProps {\n    generator: HordeGenerator;\n    image: LocalImage;\n    renderer: Renderer;\n    tool: InpaintTool;\n}\n\nexport const InpaintControls: FC<ControlsProps> = ({\n    // TODO: alternative source of horde model reference\n    generator,\n    image,\n    renderer,\n    tool,\n}) => {\n    const [count, setCount] = useState(4);\n    const [prompt, setPrompt] = useState(image.params.prompt || \"\");\n    const [negativePrompt, setNegativePrompt] = useState(\n        image.params.negative_prompt || \"\"\n    );\n    const [state, setState] = useState<InpaintToolState>(tool.state);\n    const [progress, setProgress] = useState(0);\n    const [error, setError] = useState<string | null>(null);\n    const [brushSize, setBrushSize] = useState(10);\n    const [dirty, setDirty] = useState(false);\n    const [outpaint, setoutpaint] = useState<boolean | undefined>(\n        tool.getArgs().outpaint\n    );\n    const [model, setModel] = useState(\"Deliberate Inpainting\");\n    const [selectingModel, setSelectingModel] = useState(false);\n\n    const [selectingLora, setSelectingLora] = useState<boolean>(false);\n    const [selectedLoras, setSelectedLoras] = useState<SelectedLora[]>([]);\n\n    useEffect(() => {\n        tool.updateArgs({\n            brushSize,\n        });\n    }, [brushSize]);\n\n    useEffect(() => {\n        if (image.params.loras && image.params.loras.length > 0) {\n            selectedLorasFromConfigs(image.params.loras).then((selected) => {\n                setSelectedLoras(selected);\n            });\n        } else {\n            setSelectedLoras([]);\n        }\n    }, [image]);\n\n    tool.onChangeState(setState);\n    tool.onProgress(setProgress);\n    tool.onError(setError);\n    tool.onDirty(setDirty);\n\n    const onAddLora = (lora: SelectedLora) => {\n        setSelectedLoras([...selectedLoras, lora]);\n        setSelectingLora(false);\n    };\n\n    const onRemoveLora = (lora: SelectedLora) => {\n        const updated = selectedLoras.filter(\n            (selectedLora) => selectedLora.config.name !== lora.config.name\n        );\n        setSelectedLoras(updated);\n    };\n\n    const onAddTrigger = (trigger: string) => {\n        const parts = [prompt];\n        if (prompt.length > 0 && !prompt.endsWith(\",\")) {\n            parts.push(\", \");\n        }\n        parts.push(trigger);\n        setPrompt(parts.join(\"\"));\n    };\n\n    const onSelectModel = (model: string) => {\n        setModel(model);\n        setSelectingModel(false);\n    };\n\n    if (state === \"uploading\" || state === \"processing\") {\n        return (\n            <div style={{ marginTop: \"16px\" }}>\n                <i className=\"fa fa-spinner fa-spin\"></i>&nbsp;{\" \"}\n                {state === \"uploading\" ? \"Uploading...\" : \"Inpainting...\"}\n                <br />\n                <ProgressBar progress={progress} />\n            </div>\n        );\n    }\n    return (\n        <div\n            style={{\n                marginTop: \"16px\",\n                marginBottom: \"8px\",\n                marginLeft: \"16px\",\n            }}\n        >\n            {error && (\n                <div className=\"alert alert-danger\" role=\"alert\">\n                    {/* dismiss button */}\n                    <button\n                        type=\"button\"\n                        className=\"close\"\n                        data-dismiss=\"alert\"\n                        aria-label=\"Close\"\n                        onClick={() => setError(null)}\n                    >\n                        <span aria-hidden=\"true\">&times;</span>\n                    </button>\n                    {error}\n                </div>\n            )}\n            {state === \"select\" && (\n                <>\n                    <p>\n                        {/* info icon */}\n                        <i className=\"fa fa-info-circle\"></i>&nbsp; Move the\n                        selection rectangle to the area that you want to\n                        inpaint. For outpainting, try zooming out.\n                    </p>\n                    <div className=\"form-group\">\n                        {/* allow outpaint checkbox */}\n                        <div className=\"form-check\">\n                            <input\n                                className=\"form-check-input\"\n                                type=\"checkbox\"\n                                id=\"allowoutpaint\"\n                                checked={!!outpaint}\n                                onChange={(e) => {\n                                    setoutpaint(e.target.checked);\n                                    tool.updateArgs({\n                                        outpaint: e.target.checked,\n                                    });\n                                }}\n                            />\n                            <label\n                                className=\"form-check-label\"\n                                htmlFor=\"allowoutpaint\"\n                            >\n                                Allow outpainting\n                            </label>\n                        </div>\n                    </div>\n                </>\n            )}\n\n            {state === \"erase\" && (\n                <>\n                    <p>\n                        {/* info icon */}\n                        <i className=\"fa fa-info-circle\"></i>&nbsp; Erase the\n                        area that you want to inpaint.\n                    </p>\n                    <div className=\"form-group\">\n                        <label style={{ width: \"100%\" }}>\n                            Brush size\n                            <small\n                                className=\"form-text text-muted\"\n                                style={{ float: \"right\" }}\n                            >\n                                {brushSize}px\n                            </small>\n                        </label>\n                        <input\n                            type=\"range\"\n                            className=\"form-control-range\"\n                            min=\"1\"\n                            max=\"100\"\n                            value={brushSize}\n                            onChange={(e) =>\n                                setBrushSize(parseInt(e.target.value))\n                            }\n                        />\n                    </div>\n                </>\n            )}\n\n            {state === \"inpaint\" && (\n                <>\n                    <p>\n                        {/* info icon */}\n                        <i className=\"fa fa-info-circle\"></i>&nbsp; Confirm the\n                        parameters below and continue\n                    </p>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"prompt\">\n                            Prompt&nbsp;\n                            <ResetToDefaultIcon\n                                onClick={() =>\n                                    setPrompt(image.params.prompt || \"\")\n                                }\n                            />\n                        </label>\n                        <input\n                            type=\"text\"\n                            className=\"form-control\"\n                            id=\"prompt\"\n                            value={prompt}\n                            onChange={(e) => {\n                                setPrompt(e.target.value);\n                            }}\n                        />\n                        <small className=\"form-text text-muted\">\n                            Customize the text prompt here\n                        </small>\n                    </div>\n                    {selectedLoras.length > 0 && (\n                        <LoraTriggers\n                            prompt={prompt}\n                            selectedLoras={selectedLoras}\n                            onAddTrigger={onAddTrigger}\n                        />\n                    )}\n                    {/* negative prompt */}\n                    <div className=\"form-group\">\n                        <label htmlFor=\"negativeprompt\">\n                            Negative prompt&nbsp;\n                            <ResetToDefaultIcon\n                                onClick={() =>\n                                    setNegativePrompt(\n                                        image.params.negative_prompt || \"\"\n                                    )\n                                }\n                            />\n                        </label>\n                        <input\n                            type=\"text\"\n                            className=\"form-control\"\n                            value={negativePrompt}\n                            onChange={(e) => {\n                                setNegativePrompt(e.target.value);\n                            }}\n                        />\n                        <small className=\"form-text text-muted\">\n                            Customize the negative text prompt here\n                        </small>\n                    </div>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"count\">Count: {count}</label>\n                        <input\n                            type=\"range\"\n                            className=\"form-control-range\"\n                            id=\"count\"\n                            min=\"1\"\n                            max=\"10\"\n                            step=\"1\"\n                            value={count}\n                            onChange={(e) => {\n                                setCount(parseInt(e.target.value));\n                            }}\n                        />\n                        <small className=\"form-text text-muted\">\n                            Number of inpaint options\n                        </small>\n                    </div>\n                    {/* select model dropdown */}\n                    {/* options: stable_diffusion_inpainting, \"Epic Diffusion\", \"Deliberate\" */}\n                    <div className=\"form-group\">\n                        <label htmlFor=\"model\">Model</label>\n                        <div>\n                            <button\n                                type=\"button\"\n                                className=\"btn btn-secondary light-button\"\n                                onClick={() => setSelectingModel(true)}\n                            >\n                                {model}&nbsp;\n                                <i className=\"fas fa-caret-down\"></i>\n                            </button>\n                        </div>\n                        <small className=\"form-text text-muted\">\n                            Select the inpaint model\n                        </small>\n                    </div>\n                    <div className=\"form-group\">\n                        {/* loras */}\n                        <label htmlFor=\"loras\">Loras</label>\n                        <div>\n                            {selectedLoras.map((lora) => (\n                                <SelectedLoraTag\n                                    key={lora.lora.name}\n                                    lora={lora}\n                                    onRemove={(lora) => onRemoveLora(lora)}\n                                />\n                            ))}\n                            {/* add lora button */}\n                            {selectedLoras.length < 5 && (\n                                <button\n                                    type=\"button\"\n                                    className=\"btn btn-secondary light-button\"\n                                    style={{ marginLeft: \"8px\" }}\n                                    onClick={() => setSelectingLora(true)}\n                                >\n                                    <i className=\"fas fa-plus\"></i>&nbsp;Add\n                                    Lora\n                                </button>\n                            )}\n                        </div>\n                    </div>\n                    <div className=\"form-group\">\n                        <CostIndicator imagesCost={count} />\n                    </div>\n                </>\n            )}\n\n            {state === \"confirm\" && (\n                <>\n                    <p>\n                        Use the <i className=\"fa fa-arrow-left\"></i> and{\" \"}\n                        <i className=\"fa fa-arrow-right\"></i> buttons to\n                        navigate between the inpaint options\n                    </p>\n                </>\n            )}\n\n            <div className=\"form-group\">\n                {(dirty ||\n                    state === \"confirm\" ||\n                    (state == \"erase\" && tool.selectSupported()) ||\n                    state == \"inpaint\") && (\n                    <button\n                        style={{ marginRight: \"8px\" }}\n                        className=\"btn btn-primary btn-sm\"\n                        onClick={() => {\n                            tool.cancel();\n                        }}\n                    >\n                        {/* cancel icon */}\n                        <i className=\"fa fa-times\"></i>&nbsp; Revert\n                    </button>\n                )}\n\n                {state === \"confirm\" && (\n                    <>\n                        <button\n                            className=\"btn btn-primary btn-sm\"\n                            onClick={() => tool.confirm()}\n                            style={{ marginRight: \"8px\" }}\n                        >\n                            {/* save icon */}\n                            <i className=\"fa fa-save\"></i>&nbsp; Save\n                        </button>\n                    </>\n                )}\n                {state == \"select\" && (\n                    <button\n                        style={{ marginRight: \"8px\" }}\n                        type=\"button\"\n                        className=\"btn btn-primary btn-sm\"\n                        onClick={() => (tool.state = \"erase\")}\n                    >\n                        <i className=\"fa fa-eraser\"></i>&nbsp; Continue\n                    </button>\n                )}\n                {state == \"erase\" && (\n                    <button\n                        style={{ marginRight: \"8px\" }}\n                        type=\"button\"\n                        className=\"btn btn-primary btn-sm\"\n                        onClick={() => (tool.state = \"inpaint\")}\n                    >\n                        <i className=\"fa fa-paint-brush\"></i>&nbsp; Continue\n                    </button>\n                )}\n                {state === \"inpaint\" && (\n                    <button\n                        style={{ marginRight: \"8px\" }}\n                        className=\"btn btn-primary btn-sm\"\n                        onClick={() => {\n                            tool.updateArgs({\n                                count,\n                                prompt,\n                                negativePrompt,\n                            });\n                            tool.submit(generator, image, model);\n                        }}\n                    >\n                        {/* paint icon */}\n                        <i className=\"fa fa-paint-brush\"></i>&nbsp; Inpaint\n                    </button>\n                )}\n            </div>\n            <Prompt\n                when={dirty}\n                message=\"Are you sure you want to leave? Your changes will be lost.\"\n            />\n            {selectingModel && (\n                <ModelSelector\n                    onCancel={() => setSelectingModel(false)}\n                    onSelectModel={onSelectModel}\n                    initialSelectedModel={model}\n                    inpainting={true}\n                />\n            )}\n            {selectingLora && (\n                <LoraModal\n                    onCancel={() => setSelectingLora(false)}\n                    onConfirm={(lora) => onAddLora(lora)}\n                />\n            )}\n        </div>\n    );\n};\n","// V2 page\nimport { FC, useState, useEffect } from \"react\";\nimport * as uuid from \"uuid\";\nimport axios from \"axios\";\nimport qs from \"qs\";\nimport Dropdown from \"react-bootstrap/Dropdown\";\nimport { useParams, useHistory, Link, useLocation } from \"react-router-dom\";\nimport moment from \"moment\";\nimport ScrollToTop from \"react-scroll-to-top\";\nimport { AIBrushApi } from \"../client\";\nimport { CreateImageInput, StatusEnum, TemporaryImage } from \"../client/api\";\nimport { ImageThumbnail } from \"../components/ImageThumbnail\";\nimport { ImagePrompt, defaultArgs } from \"../components/ImagePrompt\";\nimport {\n    convertPNGToJPG,\n    createBlankImage,\n    createEncodedThumbnail,\n    encodedImageToBlob,\n    uploadBlob,\n} from \"../lib/imageutil\";\n\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport { ImagePopup } from \"../components/ImagePopup\";\nimport { BusyModal } from \"../components/BusyModal\";\nimport { PendingJobsThumbnail } from \"../components/PendingJobsThumbnail\";\nimport { PendingJobs } from \"../components/PendingJobs\";\nimport { ApiSocket } from \"../lib/apisocket\";\nimport { LocalImagesStore } from \"../lib/localImagesStore\";\nimport { GenerationJob, LocalImage } from \"../lib/models\";\nimport { ErrorNotification, SuccessNotification } from \"../components/Alerts\";\nimport { sleep } from \"../lib/sleep\";\nimport { ProgressBar } from \"../components/ProgressBar\";\nimport OutOfCreditsModal from \"../components/OutOfCreditsModal\";\nimport PaymentStatusModal from \"../components/PaymentStatusModal\";\nimport { HordeGenerator } from \"../lib/hordegenerator\";\nimport { ImageClient } from \"../lib/savedimages\";\n\nexport const anonymousClient = axios.create();\ndelete anonymousClient.defaults.headers.common[\"Authorization\"];\n\ninterface Props {\n    generator: HordeGenerator;\n    imageClient: ImageClient;\n    localImages: LocalImagesStore;\n    paymentStatus?: \"success\" | \"canceled\";\n}\n\nexport const Homepage: FC<Props> = ({\n    generator,\n    imageClient,\n    localImages,\n    paymentStatus,\n}) => {\n    const [creating, setCreating] = useState(false);\n    const [selectedImage, setSelectedImage] = useState<LocalImage | null>(null);\n    const [parentImage, setParentImage] = useState<LocalImage | null>(null);\n    const [loadingParent, setLoadingParent] = useState(false);\n    const [savingImage, setSavingImage] = useState(false);\n    const [uploadProgress, setUploadingProgress] = useState(0);\n\n    const [showPendingImages, setShowPendingImages] = useState(false);\n\n    const [images, setImages] = useState<Array<LocalImage>>([]);\n    const [jobs, setJobs] = useState<Array<GenerationJob>>([]);\n\n    const [err, setErr] = useState<string | null>(null);\n    const [errTime, setErrTime] = useState<number>(0);\n\n    const [hasMore, setHasMore] = useState<boolean>(true);\n    const [search, setSearch] = useState<string>(\"\");\n    const [searchDebounce, setSearchDebounce] = useState<string>(\"\");\n\n    const [bulkDeleteSelecting, setBulkDeleteSelecting] = useState(false);\n    const [bulkDeleting, setBulkDeleting] = useState(false);\n    const [bulkDeleteIds, setBulkDeleteIds] = useState<{\n        [key: string]: boolean;\n    }>({});\n\n    const [censorNSFW, setCensorNSFW] = useState(true);\n    const [outOfCredits, setOutOfCredits] = useState(false);\n\n    const { id } = useParams<{ id?: string }>();\n    const history = useHistory();\n    const location = useLocation();\n\n    const onError = (err: string) => {\n        setErr(err);\n        setErrTime(moment().valueOf());\n    };\n\n    useEffect(() => {\n        let handle = setTimeout(() => {\n            setSearch(searchDebounce);\n        }, 500);\n        return () => {\n            clearTimeout(handle);\n        };\n    }, [searchDebounce]);\n\n    useEffect(() => {\n        if (id) {\n            // check if the image is already loaded\n            const image = images.find((image) => image.id === id);\n            if (image) {\n                setSelectedImage(image);\n            }\n            // refresh\n            localImages.getImage(id).then((image) => {\n                setSelectedImage(image);\n                if (!image) {\n                    history.replace(\"/\");\n                }\n            });\n        } else {\n            setSelectedImage(null);\n        }\n    }, [id]);\n\n    const onSubmit = async (input: CreateImageInput) => {\n        setCreating(true);\n        setParentImage(null);\n        setErr(null);\n        window.scrollTo(0, 0);\n        setUploadingProgress(0);\n        try {\n            if (input.encoded_image) {\n                input.encoded_image = await convertPNGToJPG(\n                    input.encoded_image\n                );\n            }\n            const job = await generator.generateImages(input, (progress) => {\n                setUploadingProgress(progress.loaded / progress.total);\n            });\n            setJobs((jobs) => [...jobs, job]);\n        } catch (e: any) {\n            // TODO: deal with insufficient kudos\n            console.error(e);\n            if (e.response?.data?.message?.includes(\"credits\")) {\n                setOutOfCredits(true);\n                return;\n            }\n            onError(\"Error creating images\");\n        } finally {\n            setCreating(false);\n        }\n    };\n\n    const onEditNewImage = async (input: CreateImageInput) => {\n        setCreating(true);\n        setParentImage(null);\n        setErr(null);\n        window.scrollTo(0, 0);\n        try {\n            let encodedImage = input.encoded_image;\n            if (!encodedImage) {\n                encodedImage = createBlankImage(\n                    \"#ffffff\",\n                    input.params.width!,\n                    input.params.height!\n                );\n            }\n            const newImage: LocalImage = {\n                created_at: moment().valueOf(),\n                updated_at: moment().valueOf(),\n                created_by: \"\",\n                params: {\n                    steps: 20,\n                    width: input.params.width,\n                    height: input.params.height,\n                    prompt: input.params.prompt,\n                    negative_prompt: input.params.negative_prompt,\n                    denoising_strength: input.params.denoising_strength,\n                },\n                label: \"\",\n                id: uuid.v4(),\n                model: input.model!,\n                negative_score: 0,\n                nsfw: !!input.nsfw,\n                parent: input.parent!,\n                score: 0,\n                status: StatusEnum.Completed,\n                temporary: false,\n                imageData: `data:image/png;base64,${encodedImage}`,\n            };\n            await localImages.saveImage(newImage);\n\n            history.push(`/image-editor/${newImage.id}`);\n        } catch (e: any) {\n            console.error(e);\n            onError(\"Error creating image\");\n        } finally {\n            setCreating(false);\n        }\n    };\n\n    const onNSFW = async (updatedImage: LocalImage, nsfw: boolean) => {\n        updatedImage = {\n            ...updatedImage,\n            nsfw,\n        };\n        await localImages.saveImage(updatedImage);\n        setImages((images) => {\n            return images.map((image) => {\n                if (updatedImage.id === image.id) {\n                    return {\n                        ...image,\n                        nsfw,\n                    };\n                }\n                return image;\n            });\n        });\n        setSelectedImage(updatedImage);\n    };\n\n    const loadImages = async (search: string) => {\n        console.log(\"Initial load images\");\n        // clear error\n        setErr(null);\n        setHasMore(true);\n        try {\n            const cursor = moment().add(1, \"minutes\").valueOf();\n            const resp = await localImages.listImages(\n                cursor,\n                \"prev\",\n                100,\n                search\n            );\n            setImages(resp.sort(sortImages));\n            return;\n        } catch (err) {\n            onError(\"Could not load images\");\n            console.error(err);\n        }\n    };\n\n    useEffect(() => {\n        loadImages(search);\n    }, [search]);\n\n    useEffect(() => {\n        let lock = false;\n\n        const pollImages = async (images: Array<LocalImage>) => {\n            if (lock) {\n                return;\n            }\n            lock = true;\n\n            try {\n                const updatedJobs = await generator.checkGenerationJobs(jobs);\n                let pendingJobs: GenerationJob[] = [];\n                let newImages: LocalImage[] = [];\n                for (let job of updatedJobs) {\n                    if (job.status === \"pending\" || job.status == \"processing\") {\n                        pendingJobs.push(job);\n                    } else if (job.status === \"completed\" && job.images) {\n                        for (let img of job.images) {\n                            if (img.status == StatusEnum.Error) {\n                                onError(\n                                    img.error ||\n                                        \"Some images failed to generate, please make sure your prompt doesn't violate our terms of service\"\n                                );\n                                continue;\n                            }\n                            newImages.push(img);\n                            localImages.saveImage(img);\n                        }\n                    }\n                }\n                if (newImages.length > 0) {\n                    setImages((images) => [...newImages, ...images]);\n                }\n                setJobs(pendingJobs);\n            } catch (err) {\n                onError(\"Could not load images\");\n                console.error(err);\n            } finally {\n                lock = false;\n            }\n        };\n\n        const timerHandle = setInterval(() => {\n            pollImages(images);\n        }, 2 * 1000);\n        return () => {\n            clearInterval(timerHandle);\n        };\n    }, [generator, jobs, images, search]);\n\n    // load parent image from saved images if an id is on the query string\n    // TODO: restore this once google drive integration is in place\n    useEffect(() => {\n        const loadParent = async () => {\n            const search = qs.parse(location.search, {\n                ignoreQueryPrefix: true,\n            });\n            if (search.parent) {\n                setLoadingParent(true);\n                try {\n                    // const parentImage = await api.getImage(\n                    //     search.parent as string\n                    // );\n                    const parentImage = await imageClient.loadImage(search.parent as string);\n                    if (parentImage) {\n                        // const downloadUrls = await api.getImageDownloadUrls(\n                        //     parentImage.data.id\n                        // );\n                        const imageUrl = `https://aibrush2-filestore.s3.amazonaws.com/${parentImage.id}.image.png`\n                        const resp = await anonymousClient.get(\n                            imageUrl,\n                            {\n                                responseType: \"arraybuffer\",\n                            }\n                        );\n                        const binaryImageData = Buffer.from(\n                            resp.data,\n                            \"binary\"\n                        );\n                        const base64ImageData =\n                            binaryImageData.toString(\"base64\");\n                        const src = `data:image/png;base64,${base64ImageData}`;\n                        setParentImage({\n                            ...parentImage,\n                            imageData: src,\n                        });\n                        history.push(\"/\");\n                    }\n                } finally {\n                    setLoadingParent(false);\n                }\n            }\n        };\n        loadParent();\n    }, [location.search]);\n\n    const isPendingOrProcessing = (image: LocalImage) => {\n        return (\n            image.status === StatusEnum.Pending ||\n            image.status === StatusEnum.Processing\n        );\n    };\n\n    const sortImages = (a: LocalImage, b: LocalImage) => {\n        // pending and processing images always come first\n        if (isPendingOrProcessing(a) && !isPendingOrProcessing(b)) {\n            return -1;\n        } else if (!isPendingOrProcessing(a) && isPendingOrProcessing(b)) {\n            return 1;\n        }\n\n        return b.updated_at - a.updated_at;\n    };\n\n    const onLoadMore = async () => {\n        // get the minimum updated_at from images\n        let minUpdatedAt = moment().valueOf();\n        images.forEach((image) => {\n            minUpdatedAt = Math.min(minUpdatedAt, image.updated_at);\n        });\n        // load images in descending order from updated_at\n        let resp = await localImages.listImages(\n            minUpdatedAt - 1,\n            \"prev\",\n            100,\n            search\n        );\n        if (resp.length > 0) {\n            // combine images with new images and sort by updated_at descending\n            setImages((images) => {\n                // filtering is required due to a race condition\n                const imagesById = images.reduce((acc, image) => {\n                    acc[image.id] = image;\n                    return acc;\n                }, {} as { [key: string]: LocalImage });\n                resp = resp.filter((image) => !imagesById[image.id]);\n                return [...images, ...resp]\n                    .filter((image) => !image.deleted_at)\n                    .sort(sortImages);\n            });\n        } else {\n            setHasMore(false);\n        }\n    };\n\n    const onDelete = async (image: LocalImage) => {\n        try {\n            // await api.deleteImage(image.id);\n            let nextImage = null;\n            if (selectedImage) {\n                const index = images.findIndex(\n                    (i) => i.id === selectedImage.id\n                );\n                if (index > 0) {\n                    nextImage = images[index - 1];\n                } else if (index === 0 && images.length > 1) {\n                    nextImage = images[1];\n                }\n            }\n            await localImages.deleteImage(image.id);\n            setImages((images) => {\n                return images.filter((i) => i.id !== image.id);\n            });\n            if (nextImage) {\n                history.push(`/images/${nextImage.id}`);\n            } else {\n                history.push(\"/\");\n            }\n        } catch (e) {\n            console.error(e);\n            onError(\"Error deleting image\");\n        }\n    };\n\n    const onDeleteJob = async (job: GenerationJob) => {\n        await generator.client.deleteImageRequest(job.id);\n        setJobs((jobs) => jobs.filter((j) => j.id !== job.id));\n    }\n\n    const onFork = async (image: LocalImage) => {\n        setParentImage(image);\n        // setSelectedImage(null);\n        history.push(\"/\");\n        window.scrollTo(0, 0);\n    };\n\n    // TODO: refactor to use google drive\n    // const onSave = async (image: LocalImage) => {\n    //     setSavingImage(true);\n    //     try {\n    //         history.push(\"/\");\n    //         const createInput: CreateImageInput = {\n    //             count: 1,\n    //             params: image.params,\n    //             status: StatusEnum.Saved,\n    //             temporary: false,\n    //             label: \"\",\n    //             model: image.model,\n    //             nsfw: image.nsfw,\n    //         };\n\n    //         const encodedImage = image.imageData!.split(\",\")[1];\n\n    //         // convert base64 to binary\n    //         const binaryImageData = Buffer.from(encodedImage, \"base64\");\n    //         const encodedThumbnail = await createEncodedThumbnail(encodedImage);\n    //         const binaryThumbnailData = Buffer.from(encodedThumbnail, \"base64\");\n\n    //         const createResp = await api.createImage(createInput);\n    //         const imageId = createResp.data.images![0].id;\n    //         const uploadUrls = await api.getImageUploadUrls(imageId);\n    //         await anonymousClient.put(\n    //             uploadUrls.data.thumbnail_url!,\n    //             binaryThumbnailData,\n    //             {\n    //                 headers: {\n    //                     \"Content-Type\": \"image/png\",\n    //                 },\n    //                 onUploadProgress: (progressEvent: any) => {\n    //                     const percentCompleted =\n    //                         progressEvent.loaded / progressEvent.total;\n    //                     setUploadingProgress(percentCompleted / 2);\n    //                 },\n    //             }\n    //         );\n    //         await anonymousClient.put(\n    //             uploadUrls.data.image_url!,\n    //             binaryImageData,\n    //             {\n    //                 headers: {\n    //                     \"Content-Type\": \"image/png\",\n    //                 },\n    //                 onUploadProgress: (progressEvent: any) => {\n    //                     const percentCompleted =\n    //                         progressEvent.loaded / progressEvent.total;\n    //                     setUploadingProgress(percentCompleted / 2 + 0.5);\n    //                 },\n    //             }\n    //         );\n\n    //         await localImages.hardDeleteImage(image.id);\n    //         setImages((images) => {\n    //             return images.filter((i) => i.id !== image.id);\n    //         });\n    //         setSuccess(\"Image saved\");\n    //         setSuccessTime(moment().valueOf());\n    //     } catch (e) {\n    //         console.error(e);\n    //         onError(\"Error saving image\");\n    //     } finally {\n    //         setSavingImage(false);\n    //     }\n    // };\n\n    const onEdit = async (image: LocalImage) => {\n        history.push(`/image-editor/${image.id}`);\n    };\n\n    const onThumbnailClicked = (image: LocalImage) => {\n        // setSelectedImage(image);\n        if (bulkDeleteSelecting) {\n            setBulkDeleteIds({\n                ...bulkDeleteIds,\n                [image.id]: !bulkDeleteIds[image.id],\n            });\n        } else {\n            history.push(`/images/${image.id}`);\n        }\n    };\n\n    const handleCancelFork = () => {\n        setParentImage(null);\n        window.scrollTo(0, 0);\n    };\n\n    const onConfirmBulkDelete = async () => {\n        try {\n            setBulkDeleting(true);\n            const promises = Object.keys(bulkDeleteIds).map((id) => {\n                return localImages.deleteImage(id);\n            });\n            await Promise.all(promises);\n            setImages((images) => {\n                return images.filter((image) => !bulkDeleteIds[image.id]);\n            });\n            setBulkDeleteIds({});\n            setBulkDeleteSelecting(false);\n        } catch (e) {\n            console.error(e);\n            onError(\"Error deleting images\");\n        } finally {\n            setBulkDeleting(false);\n        }\n    };\n\n    const completedOrSavedImages = images.filter((image) => {\n        return (\n            !image.deleted_at &&\n            (image.status === StatusEnum.Completed ||\n                image.status === StatusEnum.Saved)\n        );\n    });\n\n    const onSwipe = (image: LocalImage, direction: number) => {\n        // select the previous or next image from the currently selected one\n        const index = images.findIndex((i) => i.id === image.id);\n        if (index === -1) {\n            return;\n        }\n        const newIndex = index + direction;\n        if (newIndex < 0 || newIndex >= images.length) {\n            return;\n        }\n        const newImage = images[newIndex];\n        onThumbnailClicked(newImage);\n    };\n\n    const pendingJobs = jobs.filter((job) => job.status === \"pending\");\n    const processingJobs = jobs.filter((job) => job.status === \"processing\");\n\n    return (\n        <>\n            <h1 style={{ fontSize: \"40px\", textAlign: \"left\" }}>\n                Welcome to AiBrush - Home\n            </h1>\n\n            <ErrorNotification message={err} timestamp={errTime} />\n\n            <ImagePrompt\n                creating={creating}\n                onSubmit={onSubmit}\n                onEdit={onEditNewImage}\n                parent={parentImage}\n                onCancel={() => handleCancelFork()}\n            />\n            <hr />\n\n            <div\n                className=\"homepage-images\"\n                style={{ marginTop: \"48px\", paddingBottom: \"48px\" }}\n            >\n                <div style={{ textAlign: \"left\" }}>\n                    <div\n                        className=\"input-group\"\n                        style={{ marginBottom: \"16px\" }}\n                    >\n                        <input\n                            style={{}}\n                            value={searchDebounce}\n                            type=\"search\"\n                            className=\"form-control image-search\"\n                            placeholder=\"Search...\"\n                            onChange={(e) => setSearchDebounce(e.target.value)}\n                        />\n\n                        <div\n                            style={{\n                                float: \"right\",\n                            }}\n                        >\n                            {!bulkDeleteSelecting && (\n                                <>\n                                    <button\n                                        style={{ display: \"inline\" }}\n                                        className=\"btn btn-primary image-popup-button\"\n                                        onClick={() =>\n                                            setCensorNSFW(!censorNSFW)\n                                        }\n                                    >\n                                        {!censorNSFW && (\n                                            <i className=\"fas fa-eye\"></i>\n                                        )}\n                                        {censorNSFW && (\n                                            <i className=\"fas fa-eye-slash\"></i>\n                                        )}\n                                    </button>\n                                    <Dropdown\n                                        style={{\n                                            display: \"inline\",\n                                            marginLeft: \"8px\",\n                                        }}\n                                    >\n                                        <Dropdown.Toggle variant=\"danger\">\n                                            <i className=\"fas fa-trash\"></i>\n                                        </Dropdown.Toggle>\n\n                                        <Dropdown.Menu>\n                                            <Dropdown.Item\n                                                onClick={() =>\n                                                    setBulkDeleteSelecting(true)\n                                                }\n                                            >\n                                                Bulk Delete\n                                            </Dropdown.Item>\n                                            <Dropdown.Item\n                                                onClick={() =>\n                                                    history.push(\n                                                        \"/local-deleted-images\"\n                                                    )\n                                                }\n                                            >\n                                                View Deleted Images\n                                            </Dropdown.Item>\n                                        </Dropdown.Menu>\n                                    </Dropdown>\n                                </>\n                            )}\n                            {bulkDeleteSelecting && (\n                                <>\n                                    <button\n                                        className=\"btn btn-primary image-popup-button\"\n                                        onClick={() => {\n                                            setBulkDeleteSelecting(false);\n                                            setBulkDeleteIds({});\n                                        }}\n                                    >\n                                        Cancel\n                                    </button>\n                                    <button\n                                        style={{ marginLeft: \"8px\" }}\n                                        className=\"btn image-popup-delete-button\"\n                                        onClick={() => {\n                                            onConfirmBulkDelete();\n                                        }}\n                                    >\n                                        Delete\n                                    </button>\n                                </>\n                            )}\n                        </div>\n                    </div>\n                </div>\n                <InfiniteScroll\n                    dataLength={images.length}\n                    next={onLoadMore}\n                    hasMore={hasMore}\n                    loader={\n                        <>\n                            <hr />\n                            <h4>Loading...</h4>\n                        </>\n                    }\n                >\n                    {jobs.length > 0 && (\n                        <PendingJobsThumbnail\n                            pendingCount={pendingJobs.length}\n                            processingCount={processingJobs.length}\n                            onClick={() => {\n                                setShowPendingImages(true);\n                            }}\n                        />\n                    )}\n                    {completedOrSavedImages.map((image) => (\n                        <ImageThumbnail\n                            key={image.id}\n                            image={image}\n                            onClick={onThumbnailClicked}\n                            bulkDelete={\n                                bulkDeleteSelecting && bulkDeleteIds[image.id]\n                            }\n                            censorNSFW={censorNSFW}\n                        />\n                    ))}\n                </InfiniteScroll>\n            </div>\n\n            {selectedImage && (\n                <ImagePopup\n                    image={selectedImage}\n                    onClose={() => history.push(\"/\")}\n                    onDelete={(image) => {\n                        onDelete(image);\n                        setImages(images.filter((i) => i.id !== image.id));\n                        history.push(\"/\");\n                    }}\n                    onFork={(image) => {\n                        onFork(image);\n                        history.push(\"/\");\n                    }}\n                    onEdit={(image) => {\n                        onEdit(image);\n                    }}\n                    // onSave={(image) => {\n                    //     onSave(image);\n                    // }}\n                    onNSFW={onNSFW}\n                    censorNSFW={censorNSFW}\n                    onSwipe={onSwipe}\n                />\n            )}\n            <ScrollToTop />\n            <BusyModal show={creating} title=\"Creating images\">\n                <p>Please wait while we create your image.</p>\n                <ProgressBar progress={uploadProgress} />\n            </BusyModal>\n            <BusyModal show={bulkDeleting} title=\"Deleting images\">\n                <p>Please wait while we delete your images.</p>\n            </BusyModal>\n            <BusyModal show={loadingParent} title=\"Loading parent image\">\n                <p>Please wait while we load the parent image.</p>\n            </BusyModal>\n            <BusyModal show={savingImage} title=\"Saving image\">\n                {/* bootstrap progress bar for uploadProgress (0-1 value) */}\n                <ProgressBar progress={uploadProgress} />\n            </BusyModal>\n            <PendingJobs\n                jobs={jobs}\n                onCancel={() => setShowPendingImages(false)}\n                show={showPendingImages}\n                onDeleteJob={(job) => {\n                    onDeleteJob(job);\n                }}\n            />\n            <OutOfCreditsModal\n                show={outOfCredits}\n                onHide={() => setOutOfCredits(false)}\n            />\n            <PaymentStatusModal paymentStatus={paymentStatus} />\n        </>\n    );\n};\n","import { FC, useEffect, useState } from \"react\";\nimport { PaletteButton } from \"./PaletteButton\";\nimport { PencilTool } from \"./pencil-tool\";\nimport { Renderer } from \"./renderer\";\n\ninterface MaskEditorProps {\n    // renderer: Renderer;\n    tool: PencilTool;\n    onConfirm: () => void;\n    onRevert: () => void;\n}\n\nconst colors = [\"#FFFFFF\", \"#000000\"];\n\nexport const MaskEditor: FC<MaskEditorProps> = ({\n    // renderer,\n    tool,\n    onConfirm,\n    onRevert,\n}) => {\n    const [brushSize, setBrushSize] = useState(10);\n    const [brushColor, setBrushColor] = useState(colors[0]);\n\n    useEffect(() => {\n        tool.updateArgs({\n            brushSize,\n            brushColor,\n        });\n    }, [brushSize, brushColor]);\n\n    return (\n        <div style={{ marginTop: \"16px\" }}>\n            <div className=\"form-group\">\n                <label style={{ width: \"100%\" }}>\n                    Brush size\n                    <small\n                        className=\"form-text text-muted\"\n                        style={{ float: \"right\" }}\n                    >\n                        {brushSize}px\n                    </small>\n                </label>\n                <input\n                    type=\"range\"\n                    className=\"form-control-range\"\n                    min=\"1\"\n                    max=\"100\"\n                    value={brushSize}\n                    onChange={(e) => setBrushSize(parseInt(e.target.value))}\n                />\n            </div>\n            <div\n                style={{\n                    display: \"flex\",\n                    flexDirection: \"row\",\n                    flexWrap: \"wrap\",\n                }}\n            >\n                {colors.map((color, i) => (\n                    <PaletteButton\n                        key={i}\n                        selectedColor={brushColor}\n                        color={color}\n                        onClick={(color) => setBrushColor(color)}\n                    />\n                ))}\n            </div>\n            <div className=\"form-group\" style={{ marginTop: \"16px\" }}>\n                <i className=\"fa fa-info-circle\"></i>&nbsp;Masking: areas that\n                are painted white will be changed, areas that are painted black\n                will be left unchanged.\n            </div>\n            <div className=\"form-group\" style={{ marginTop: \"16px\" }}>\n                <button\n                    className=\"btn btn-secondary\"\n                    onClick={() => tool.renderer.invertMask()}\n                >\n                    Invert\n                </button>\n                <button\n                    className=\"btn btn-secondary\"\n                    onClick={onRevert}\n                    style={{ marginLeft: \"8px\" }}\n                >\n                    Cancel\n                </button>\n                <button\n                    className=\"btn btn-primary\"\n                    onClick={onConfirm}\n                    style={{ marginLeft: \"8px\" }}\n                >\n                    Save\n                </button>\n            </div>\n        </div>\n    );\n};\n","import React, { FC, useState, useEffect, useRef } from \"react\";\nimport axios from \"axios\";\nimport { Prompt } from \"react-router\";\nimport { loadImageAsync } from \"../../lib/loadImage\";\n\nimport { sleep } from \"../../lib/sleep\";\nimport { defaultArgs } from \"../../components/ImagePrompt\";\nimport { Tool, BaseTool } from \"./tool\";\nimport { Renderer } from \"./renderer\";\nimport { Cursor, Rect } from \"./models\";\nimport {\n    AIBrushApi,\n    CreateImageInput,\n    Image as APIImage,\n    ImageList,\n    LoraConfig,\n    StatusEnum,\n} from \"../../client\";\nimport { ZoomHelper } from \"./zoomHelper\";\nimport { getClosestAspectRatio } from \"../../lib/aspecRatios\";\nimport {\n    convertPNGToJPG,\n    ImageUtilWorker,\n    ImageWorkerRequest,\n    loadImageDataElement,\n} from \"../../lib/imageutil\";\nimport { SelectionTool, Controls as SelectionControls } from \"./selection-tool\";\nimport { getUpscaleLevel } from \"../../lib/upscale\";\nimport { ApiSocket, NOTIFICATION_IMAGE_UPDATED } from \"../../lib/apisocket\";\nimport moment from \"moment\";\nimport { ProgressBar } from \"../../components/ProgressBar\";\nimport { calculateImagesCost } from \"../../lib/credits\";\nimport { CostIndicator } from \"../../components/CostIndicator\";\nimport ModelSelector from \"../../components/ModelSelector\";\nimport { PencilTool } from \"./pencil-tool\";\nimport { MaskEditor } from \"./mask-editor-controls\";\nimport { ResetToDefaultIcon } from \"../../components/ResetToDefaultIcon\";\nimport {\n    LoraModal,\n    SelectedLora,\n    selectedLorasFromConfigs,\n} from \"../../components/LoraSelector\";\nimport { LoraTriggers } from \"../../components/LoraTriggers\";\nimport { SelectedLoraTag } from \"../../components/SelectedLora\";\nimport { GenerationJob, LocalImage } from \"../../lib/models\";\nimport { HordeGenerator } from \"../../lib/hordegenerator\";\n\nconst anonymousClient = axios.create();\n\ntype EnhanceToolState =\n    | \"select\"\n    | \"default\"\n    | \"uploading\"\n    | \"processing\"\n    | \"confirm\"\n    | \"erase\"\n    | \"mask\";\n\n// eraser width modifier adds a solid core with a feather edge\n// equal to the what is used on enhanced selections\nconst eraserWidthModifier = 1.3;\n\ninterface ImageWithData extends LocalImage {\n    data?: ImageData;\n}\n\nexport class EnhanceTool extends BaseTool implements Tool {\n    readonly selectionTool: SelectionTool;\n    readonly pencilTool: PencilTool;\n\n    private prompt: string = \"\";\n    private negativePrompt: string = \"\";\n    private model: string = \"Epic Diffusion\";\n    private count: number = 4;\n    private variationStrength: number = 0.35;\n    private loras: LoraConfig[] = [];\n    private _dirty = false;\n    private worker: ImageUtilWorker;\n    private idCounter = 0;\n\n    private _state: EnhanceToolState = \"default\";\n    private stateHandler: (state: EnhanceToolState) => void = () => {};\n    private selectionControlsListener: (show: boolean) => void = () => {};\n    private maskHandler: (isMasked: boolean) => void = () => {};\n\n    private imageData: Array<ImageData> = [];\n    private selectedImageDataIndex: number = -1;\n    private selectedImageData: ImageData | null = null;\n    private panning = false;\n    private erasing = false;\n    private progressListener?: (progress: number) => void;\n    private errorListener?: (error: string | null) => void;\n    private dirtyListener?: (dirty: boolean) => void;\n\n    set dirty(dirty: boolean) {\n        this._dirty = dirty;\n        if (this.dirtyListener) {\n            this.dirtyListener(dirty);\n        }\n    }\n\n    get dirty() {\n        return this._dirty;\n    }\n\n    onDirty(listener: (dirty: boolean) => void): void {\n        this.dirtyListener = listener;\n    }\n\n    onError(handler: (error: string | null) => void) {\n        this.errorListener = handler;\n    }\n\n    private notifyError(error: string | null) {\n        if (this.errorListener) {\n            this.errorListener(error);\n        }\n    }\n\n    get state(): EnhanceToolState {\n        return this._state;\n    }\n\n    set state(state: EnhanceToolState) {\n        if (state !== this._state) {\n            this.renderer.setCursor(undefined);\n            if (this._state == \"select\") {\n                this.selectionTool.destroy();\n            }\n            // if (this._state === \"mask\") {\n            //     this.renderer.setCursor(undefined);\n            // }\n            // if (this._state === \"erase\") {\n            //     this.renderer.setCursor(undefined);\n            // }\n            this._state = state;\n            this.stateHandler(state);\n            if (state == \"confirm\") {\n                this.selectionControlsListener(true);\n            } else {\n                this.selectionControlsListener(false);\n                if (state == \"select\") {\n                    this.selectionTool.updateArgs({\n                        ...this.selectionTool.getArgs(),\n                        outpaint: false,\n                    });\n                }\n            }\n        }\n    }\n\n    selectSupported(): boolean {\n        return !(\n            getUpscaleLevel(\n                this.renderer.getWidth(),\n                this.renderer.getHeight()\n            ) === 0 && this.renderer.getWidth()\n        );\n    }\n\n    constructor(renderer: Renderer) {\n        super(renderer, \"enhance\");\n        this.selectionTool = new SelectionTool(renderer);\n        this.pencilTool = new PencilTool(\n            renderer,\n            \"mask\",\n            \"#FFFFFF\",\n            \"mask-editor\"\n        );\n        if (this.selectSupported()) {\n            this.state = \"select\";\n        } else {\n            this.state = \"default\";\n        }\n        let selectionArgs = this.selectionTool.getArgs();\n        if (!this.selectSupported()) {\n            selectionArgs = {\n                ...selectionArgs,\n                selectionOverlay: {\n                    x: 0,\n                    y: 0,\n                    width: this.renderer.getWidth(),\n                    height: this.renderer.getHeight(),\n                },\n            };\n        }\n        this.selectionTool.updateArgs(selectionArgs);\n        this.pencilTool.updateArgs({\n            ...this.pencilTool.getArgs(),\n            brushColor: \"#FFFFFF\",\n        });\n        // unset the cursor from the pencil tool (hack)\n        this.renderer.setCursor(undefined);\n        this.worker = new ImageUtilWorker();\n    }\n\n    onMouseDown(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        if (this.state == \"select\") {\n            this.selectionTool.onMouseDown(event);\n            return;\n        }\n        if (this.state == \"mask\") {\n            this.pencilTool.onMouseDown(event);\n            return;\n        }\n        let { x, y } = this.zoomHelper.translateMouseToCanvasCoordinates(\n            event.nativeEvent.offsetX,\n            event.nativeEvent.offsetY\n        );\n        if (event.button === 1) {\n            this.panning = true;\n            return;\n        }\n        if (this.state == \"erase\" && this.selectedImageData) {\n            this.erasing = true;\n            // clone selected ImageData\n            this.selectedImageData = new ImageData(\n                this.selectedImageData.data.slice(),\n                this.selectedImageData.width,\n                this.selectedImageData.height\n            );\n\n            this.erasePoint(x, y);\n        }\n    }\n\n    // TODO: on erase cancel and on erase confirm\n    // either restore the image data from the array\n    // or overwrite the array with the new image data\n\n    private erasePoint(x: number, y: number) {\n        const selectionOverlay = this.renderer.getSelectionOverlay()!;\n        const baseWidth = Math.min(\n            selectionOverlay.width,\n            selectionOverlay.height\n        );\n        const eraserRadius = Math.floor((baseWidth / 8) * eraserWidthModifier);\n\n        const relX = x - selectionOverlay.x;\n        const relY = y - selectionOverlay.y;\n        const imageData = this.selectedImageData!;\n\n        const startX = Math.max(0, relX - eraserRadius);\n        const startY = Math.max(0, relY - eraserRadius);\n        const endX = Math.min(imageData.width, relX + eraserRadius);\n        const endY = Math.min(imageData.height, relY + eraserRadius);\n\n        // relX=64.28541697636388, relY=64.24464312259761, startX=0.28541697636387653, startY=0.24464312259760845, endX=128.28541697636388, endY=128.2446431225976\n\n        for (let i = startX; i < endX; i++) {\n            for (let j = startY; j < endY; j++) {\n                const index = (j * imageData.width + i) * 4;\n                const distance = Math.sqrt(\n                    Math.pow(i - relX, 2) + Math.pow(j - relY, 2)\n                );\n                if (distance < eraserRadius) {\n                    // set alpha to a linear gradient from the center,\n                    // 100% in the middle and 0% at the edge\n                    const alphaPct =\n                        (distance / eraserRadius) * eraserWidthModifier -\n                        (eraserWidthModifier - 1);\n\n                    const alpha = Math.min(\n                        Math.floor(alphaPct * 255),\n                        imageData.data[index + 3]\n                    );\n                    imageData.data[index + 3] = alpha;\n                }\n            }\n        }\n        this.renderer.setEditImage(imageData);\n    }\n\n    private updateCursor(x: number, y: number) {\n        if (this.state == \"erase\" && this.selectedImageData) {\n            const selectionOverlay = this.renderer.getSelectionOverlay()!;\n            const baseWidth = Math.min(\n                selectionOverlay.width,\n                selectionOverlay.height\n            );\n            const featherWidth = Math.floor(baseWidth / 8);\n            this.renderer.setCursor({\n                color: \"white\",\n                radius: featherWidth * eraserWidthModifier,\n                type: \"circle\",\n                x,\n                y,\n            });\n        } else {\n            this.renderer.setCursor({\n                color: \"white\",\n                radius: 10,\n                type: \"crosshairs\",\n                x,\n                y,\n            });\n        }\n    }\n\n    onMouseMove(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        if (this.state == \"select\") {\n            this.selectionTool.onMouseMove(event);\n            return;\n        }\n        if (this.state == \"mask\") {\n            this.pencilTool.onMouseMove(event);\n            return;\n        }\n        let { x, y } = this.zoomHelper.translateMouseToCanvasCoordinates(\n            event.nativeEvent.offsetX,\n            event.nativeEvent.offsetY\n        );\n        if (this.panning) {\n            this.zoomHelper.onPan(event);\n        }\n\n        this.updateCursor(x, y);\n        if (this.erasing) {\n            this.erasePoint(x, y);\n        }\n    }\n\n    onMouseUp(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        if (this.state == \"select\") {\n            this.selectionTool.onMouseUp(event);\n        }\n        if (this.state == \"mask\") {\n            this.pencilTool.onMouseUp(event);\n        }\n        this.panning = false;\n        this.erasing = false;\n    }\n\n    onMouseLeave(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>): void {\n        if (this.state == \"select\") {\n            this.selectionTool.onMouseLeave(event);\n        }\n        if (this.state == \"mask\") {\n            this.pencilTool.onMouseLeave(event);\n        }\n        this.panning = false;\n        this.erasing = false;\n    }\n\n    onWheel(event: WheelEvent) {\n        this.zoomHelper.onWheel(event);\n        let { x, y } = this.zoomHelper.translateMouseToCanvasCoordinates(\n            event.offsetX,\n            event.offsetY\n        );\n        this.updateCursor(x, y);\n    }\n\n    updateArgs(args: any) {\n        args = {\n            ...this.getArgs(),\n            ...args,\n        };\n        this.prompt = args.prompt || \"\";\n        this.negativePrompt = args.negativePrompt || \"\";\n        this.model = args.model || \"Epic Diffusion\";\n        this.count = args.count || 4;\n        this.variationStrength = args.variationStrength || 0.75;\n        this.loras = args.loras || [];\n        console.log(\"updateArgs\", args);\n    }\n\n    onChangeState(handler: (state: EnhanceToolState) => void) {\n        this.stateHandler = handler;\n    }\n\n    onChangeMask(handler: (isMasked: boolean) => void) {\n        this.maskHandler = handler;\n    }\n\n    onShowSelectionControls(listener: (show: boolean) => void): void {\n        this.selectionControlsListener = listener;\n    }\n\n    onProgress(listener: (progress: number) => void): void {\n        this.progressListener = listener;\n    }\n\n    private newId(): string {\n        return `${this.idCounter++}`;\n    }\n\n    private async loadImageData(\n        image: LocalImage,\n        maskData: ImageData | undefined,\n        selectionOverlay: Rect\n    ): Promise<ImageData> {\n        const imageElement = await loadImageDataElement(image);\n        const canvas = document.createElement(\"canvas\");\n        canvas.width = selectionOverlay.width;\n        canvas.height = selectionOverlay.height;\n        const ctx = canvas.getContext(\"2d\");\n        if (!ctx) {\n            throw new Error(\"Failed to get canvas context\");\n        }\n        ctx.drawImage(\n            imageElement,\n            0,\n            0,\n            selectionOverlay.width,\n            selectionOverlay.height\n        );\n        const imageData = ctx.getImageData(\n            0,\n            0,\n            selectionOverlay.width,\n            selectionOverlay.height\n        );\n        const id = this.newId();\n        const req: ImageWorkerRequest = {\n            id,\n            alphaMode: \"none\",\n            feather: true,\n            height: this.renderer.getHeight(),\n            width: this.renderer.getWidth(),\n            pixels: imageData.data,\n            selectionOverlay,\n        };\n        if (maskData) {\n            req.alphaMode = \"mask\";\n            req.alphaPixels = maskData.data;\n        }\n        const resp = await this.worker.processRequest(req);\n        const updatedImageData = new ImageData(\n            resp.pixels,\n            imageData.width,\n            imageData.height\n        );\n        // remove canvas\n        canvas.remove();\n        return updatedImageData;\n    }\n\n    cancel() {\n        if (this.state == \"erase\") {\n            this.state = \"confirm\";\n            this.selectedImageData =\n                this.imageData[this.selectedImageDataIndex];\n            this.renderer.setEditImage(this.selectedImageData);\n        } else {\n            if (this.selectSupported()) {\n                this.state = \"select\";\n            } else {\n                this.state = \"default\";\n            }\n            this.imageData = [];\n            this.renderer.setEditImage(null);\n            this.dirty = false;\n        }\n    }\n\n    erase() {\n        this.state = \"erase\";\n    }\n\n    mask() {\n        if (this.renderer.isMasked()) {\n            this.renderer.deleteMask();\n        }\n        this.renderer.createMask();\n        this.state = \"mask\";\n        this.maskHandler(true);\n    }\n\n    deleteMask() {\n        this.renderer.deleteMask();\n        if (this.state == \"mask\") {\n            this.state = \"default\";\n        }\n        this.maskHandler(false);\n    }\n\n    private updateProgress(progress: number) {\n        if (this.progressListener) {\n            this.progressListener(progress);\n        }\n    }\n\n    async submit(generator: HordeGenerator, image: LocalImage) {\n        this.dirty = true;\n        this.notifyError(null);\n        const selectionOverlay = this.renderer.getSelectionOverlay();\n        let encodedImage = this.renderer.getEncodedImage(selectionOverlay!);\n        if (!encodedImage) {\n            console.error(\"No selection\");\n            return;\n        }\n        encodedImage = await convertPNGToJPG(encodedImage);\n        let encodedMask: string | undefined;\n        let maskData: ImageData | undefined;\n        if (this.renderer.isMasked()) {\n            encodedMask = this.renderer.getEncodedMask(\n                selectionOverlay!,\n                \"mask\"\n            );\n            maskData = this.renderer.getImageData(selectionOverlay!, \"mask\");\n        }\n\n        const input: CreateImageInput = defaultArgs();\n        input.encoded_image = encodedImage;\n\n        if (encodedMask) {\n            input.encoded_mask = encodedMask;\n        }\n\n        input.label = \"\";\n        input.parent = image.id;\n        input.params.prompt = this.prompt || image.params.prompt;\n        input.params.negative_prompt =\n            this.negativePrompt || image.params.negative_prompt;\n        input.params.denoising_strength = this.variationStrength;\n        input.count = this.count;\n        input.model = this.model;\n        input.nsfw = image.nsfw;\n\n        input.params.width = selectionOverlay!.width;\n        input.params.height = selectionOverlay!.height;\n        // round width and height up to the nearest multiple of 64\n        input.params.width = Math.ceil(input.params.width / 64) * 64;\n        input.params.height = Math.ceil(input.params.height / 64) * 64;\n        input.params.loras = this.loras;\n        input.temporary = true;\n\n        let job: GenerationJob | undefined;\n        this.state = \"uploading\";\n\n        try {\n            job = await generator.generateImages(input, (progress) => {\n                this.updateProgress(progress.loaded / progress.total);\n            });\n        } catch (err) {\n            console.error(\"Error creating images\", err);\n            this.notifyError(\"Failed to create image\");\n            this.state = \"default\";\n            return;\n        }\n        this.state = \"processing\";\n        this.updateProgress(0);\n        let completed = false;\n\n        let startTime = moment();\n        let newImages: Array<ImageWithData> = [];\n\n        while (!completed) {\n            await sleep(2000);\n            // poll for completion\n            job = await generator.checkGenerationJob(job);\n            this.updateProgress(job.progress);\n            if (job.status === \"completed\") {\n                completed = true;\n                newImages = job.images!.filter(\n                    (img) => img.status === \"completed\"\n                );\n                await Promise.all(\n                    newImages.map(async (img) => {\n                        const imageData = await this.loadImageData(\n                            img,\n                            maskData,\n                            selectionOverlay!\n                        );\n                        img.data = imageData;\n                    })\n                );\n            }\n            // timeout of 2 minutes\n            if (moment().diff(startTime, \"minutes\") > 2) {\n                completed = true;\n                await generator.client.deleteImageRequest(job.id);\n            }\n        }\n\n        newImages!.sort((a, b) => {\n            return a.created_at - b.created_at;\n        });\n        newImages = newImages!.filter((img) => {\n            return img.status === StatusEnum.Completed;\n        });\n\n        this.imageData = [];\n        for (let i = 0; i < newImages!.length; i++) {\n            if (newImages![i].data) {\n                this.imageData.push(newImages![i].data as ImageData);\n            }\n        }\n        if (this.imageData.length === 0) {\n            this.state = \"default\";\n            this.notifyError(\"No images returned\");\n            return;\n        }\n        this.renderer.setEditImage(this.imageData[0]);\n        this.selectedImageDataIndex = 0;\n        this.selectedImageData = this.imageData[0];\n        this.state = \"confirm\";\n        this.deleteMask();\n    }\n\n    select(direction: \"left\" | \"right\") {\n        if (direction == \"left\") {\n            this.selectedImageDataIndex--;\n            if (this.selectedImageDataIndex < -1) {\n                this.selectedImageDataIndex = this.imageData.length - 1;\n            }\n        }\n        if (direction == \"right\") {\n            this.selectedImageDataIndex++;\n            if (this.selectedImageDataIndex >= this.imageData.length) {\n                this.selectedImageDataIndex = -1;\n            }\n        }\n        if (this.selectedImageDataIndex === -1) {\n            this.selectedImageData = null;\n        } else {\n            this.selectedImageData =\n                this.imageData[this.selectedImageDataIndex];\n        }\n        this.renderer.setEditImage(this.selectedImageData);\n    }\n\n    onSaveImage(listener: (encodedImage: string, args?: any) => void): void {\n        this.saveListener = listener;\n    }\n\n    confirm() {\n        this.renderer.commitSelection();\n        if (this.selectSupported()) {\n            this.state = \"select\";\n        } else {\n            this.state = \"default\";\n        }\n        this.imageData = [];\n        const encodedImage = this.renderer.getEncodedImage(null);\n        if (encodedImage && this.saveListener) {\n            this.saveListener(encodedImage, {\n                phrases: [this.prompt],\n                negative_phrases: [this.negativePrompt],\n                model: this.model,\n            });\n        }\n        this.dirty = false;\n    }\n\n    destroy(): boolean {\n        if (this.renderer.isMasked()) {\n            this.renderer.deleteMask();\n        }\n        this.renderer.setCursor(undefined);\n        this.worker.destroy();\n        return true;\n    }\n}\n\ninterface ControlsProps {\n    generator: HordeGenerator;\n    image: LocalImage;\n    renderer: Renderer;\n    tool: EnhanceTool;\n}\n\nexport const EnhanceControls: FC<ControlsProps> = ({\n    generator,\n    image,\n    renderer,\n    tool,\n}) => {\n    const [count, setCount] = useState(4);\n    const [dirty, setDirty] = useState(false);\n    const [variationStrength, setVariationStrength] = useState(0.35);\n    const [prompt, setPrompt] = useState(image.params.prompt || \"\");\n    const [negativePrompt, setNegativePrompt] = useState(\n        image.params.negative_prompt || \"\"\n    );\n    const [model, setModel] = useState(\n        image.model == \"swinir\" || image.model == \"stable_diffusion\"\n            ? \"Epic Diffusion\"\n            : image.model\n    );\n    const [selectingModel, setSelectingModel] = useState<boolean>(false);\n    const [state, setState] = useState<EnhanceToolState>(tool.state);\n    const [isMasked, setIsMasked] = useState<boolean>(tool.renderer.isMasked());\n    const [progress, setProgress] = useState(0);\n    const [error, setError] = useState<string | null>(null);\n\n    const [selectingLora, setSelectingLora] = useState<boolean>(false);\n    const [selectedLoras, setSelectedLoras] = useState<SelectedLora[]>([]);\n\n    tool.onChangeState(setState);\n    tool.onChangeMask(setIsMasked);\n    tool.onProgress(setProgress);\n    tool.onError(setError);\n    tool.onDirty(setDirty);\n\n    useEffect(() => {\n        if (image.params.loras && image.params.loras.length > 0) {\n            selectedLorasFromConfigs(image.params.loras).then((selected) => {\n                setSelectedLoras(selected);\n            });\n        } else {\n            setSelectedLoras([]);\n        }\n    }, [image]);\n\n    const onAddLora = (lora: SelectedLora) => {\n        setSelectedLoras([...selectedLoras, lora]);\n        setSelectingLora(false);\n    };\n\n    const onRemoveLora = (lora: SelectedLora) => {\n        const updated = selectedLoras.filter(\n            (selectedLora) => selectedLora.config.name !== lora.config.name\n        );\n        setSelectedLoras(updated);\n    };\n\n    const onAddTrigger = (trigger: string) => {\n        const parts = [prompt];\n        if (prompt.length > 0 && !prompt.endsWith(\",\")) {\n            parts.push(\", \");\n        }\n        parts.push(trigger);\n        setPrompt(parts.join(\"\"));\n    };\n\n    const selectionOverlay: Rect =\n        tool.selectionTool.getArgs().selectionOverlay;\n    let cost = count;\n    if (selectionOverlay) {\n        cost = calculateImagesCost(\n            count,\n            selectionOverlay.width,\n            selectionOverlay.height\n        );\n    }\n\n    if (state == \"processing\" || state == \"uploading\") {\n        return (\n            <div style={{ marginTop: \"16px\" }}>\n                <i className=\"fa fa-spinner fa-spin\"></i>&nbsp;{\" \"}\n                {state === \"processing\" ? \"Enhancing...\" : \"Uploading...\"}\n                <br />\n                <ProgressBar progress={progress} />\n            </div>\n        );\n    }\n\n    return (\n        <div\n            style={{\n                marginTop: \"16px\",\n                marginBottom: \"8px\",\n                marginLeft: \"16px\",\n            }}\n        >\n            {error && (\n                <div className=\"alert alert-danger\" role=\"alert\">\n                    {/* dismiss button */}\n                    <button\n                        type=\"button\"\n                        className=\"close\"\n                        data-dismiss=\"alert\"\n                        aria-label=\"Close\"\n                        onClick={() => setError(null)}\n                    >\n                        <span aria-hidden=\"true\">&times;</span>\n                    </button>\n                    {error}\n                </div>\n            )}\n            {state === \"select\" && (\n                <>\n                    <p>\n                        {/* info icon */}\n                        <i className=\"fa fa-info-circle\"></i>&nbsp; Move the\n                        selection rectangle to the area that you want to enhance\n                    </p>\n                    <SelectionControls\n                        renderer={renderer}\n                        tool={tool.selectionTool}\n                        lockAspectRatio={true}\n                    />\n                </>\n            )}\n            {state === \"default\" && (\n                <>\n                    <p>\n                        {/* info icon */}\n                        <i className=\"fa fa-info-circle\"></i>&nbsp; Confirm the\n                        parameters below and continue\n                    </p>\n                    {/* prompt */}\n                    <div className=\"form-group\">\n                        <label htmlFor=\"prompt\">\n                            Prompt&nbsp;\n                            <ResetToDefaultIcon\n                                onClick={() =>\n                                    setPrompt(image.params.prompt || \"\")\n                                }\n                            />\n                        </label>\n                        {/* refresh icon */}\n\n                        <input\n                            type=\"text\"\n                            className=\"form-control\"\n                            id=\"prompt\"\n                            value={prompt}\n                            onChange={(e) => {\n                                setPrompt(e.target.value);\n                            }}\n                        />\n\n                        <small className=\"form-text text-muted\">\n                            Customize the text prompt here\n                        </small>\n                    </div>\n                    {selectedLoras.length > 0 && (\n                        <LoraTriggers\n                            prompt={prompt}\n                            selectedLoras={selectedLoras}\n                            onAddTrigger={onAddTrigger}\n                        />\n                    )}\n                    {/* negative prompt */}\n                    <div className=\"form-group\">\n                        <label htmlFor=\"negative-prompt\">\n                            Negative Prompt&nbsp;\n                            <ResetToDefaultIcon\n                                onClick={() =>\n                                    setNegativePrompt(\n                                        image.params.negative_prompt || \"\"\n                                    )\n                                }\n                            />\n                        </label>\n                        <input\n                            type=\"text\"\n                            className=\"form-control\"\n                            id=\"negative-prompt\"\n                            value={negativePrompt}\n                            onChange={(e) => {\n                                setNegativePrompt(e.target.value);\n                            }}\n                        />\n                        <small className=\"form-text text-muted\">\n                            Customize the negative text prompt here\n                        </small>\n                    </div>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"count\">Count: {count}</label>\n                        <input\n                            type=\"range\"\n                            className=\"form-control-range\"\n                            id=\"count\"\n                            min=\"1\"\n                            max=\"10\"\n                            step=\"1\"\n                            value={count}\n                            onChange={(e) => {\n                                setCount(parseInt(e.target.value));\n                            }}\n                        />\n                        <small className=\"form-text text-muted\">\n                            Number of enhancement options\n                        </small>\n                    </div>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"variation-strength\">\n                            Variation Strength:{\" \"}\n                            {Math.round(variationStrength * 100)}%\n                        </label>\n                        <input\n                            type=\"range\"\n                            className=\"form-control-range\"\n                            id=\"variation-strength\"\n                            min=\"0\"\n                            max=\"1\"\n                            step=\"0.05\"\n                            value={variationStrength}\n                            onChange={(e) => {\n                                setVariationStrength(\n                                    parseFloat(e.target.value)\n                                );\n                            }}\n                        />\n                        <small className=\"form-text text-muted\">\n                            How much variation to use\n                        </small>\n                    </div>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"model\">Model</label>\n                        <div>\n                            <button\n                                type=\"button\"\n                                className=\"btn btn-secondary light-button\"\n                                onClick={() => setSelectingModel(true)}\n                            >\n                                {model}&nbsp;\n                                <i className=\"fas fa-caret-down\"></i>\n                            </button>\n                        </div>\n                        <small className=\"form-text text-muted\">\n                            Select the model to use\n                        </small>\n                    </div>\n                    <div className=\"form-group\">\n                        {/* loras */}\n                        <label htmlFor=\"loras\">Loras</label>\n                        <div>\n                            {selectedLoras.map((lora) => (\n                                <SelectedLoraTag\n                                    key={lora.lora.name}\n                                    lora={lora}\n                                    onRemove={(lora) => onRemoveLora(lora)}\n                                />\n                            ))}\n                            {/* add lora button */}\n                            {selectedLoras.length < 5 && (\n                                <button\n                                    type=\"button\"\n                                    className=\"btn btn-secondary light-button\"\n                                    style={{ marginLeft: \"8px\" }}\n                                    onClick={() => setSelectingLora(true)}\n                                >\n                                    <i className=\"fas fa-plus\"></i>&nbsp;Add\n                                    Lora\n                                </button>\n                            )}\n                        </div>\n                    </div>\n                    <div className=\"form-group\">\n                        <CostIndicator imagesCost={cost} />\n                    </div>\n                </>\n            )}\n            {state === \"erase\" && (\n                <p>\n                    {/* info icon */}\n                    <i className=\"fa fa-info-circle\"></i>&nbsp; Erase any\n                    undesired sections before saving\n                </p>\n            )}\n            {state === \"mask\" && (\n                <MaskEditor\n                    onConfirm={() => (tool.state = \"default\")}\n                    onRevert={() => {\n                        tool.deleteMask();\n                    }}\n                    tool={tool.pencilTool}\n                />\n            )}\n\n            <div className=\"form-group\">\n                {state === \"select\" && (\n                    <button\n                        type=\"button\"\n                        className=\"btn btn-primary btn-sm\"\n                        onClick={() => {\n                            tool.state = \"default\";\n                        }}\n                        style={{ marginRight: \"8px\" }}\n                    >\n                        {/* magic icon */}\n                        <i className=\"fa fa-magic\"></i>&nbsp; Continue\n                    </button>\n                )}\n                {((state === \"default\" && tool.selectSupported()) ||\n                    state === \"confirm\" ||\n                    state === \"erase\") && (\n                    <button\n                        className=\"btn btn-primary btn-sm\"\n                        onClick={() => {\n                            tool.cancel();\n                        }}\n                        style={{ marginRight: \"8px\" }}\n                    >\n                        {/* cancel icon */}\n                        <i className=\"fa fa-times\"></i>&nbsp; Revert\n                    </button>\n                )}\n                {(state === \"confirm\" || state === \"erase\") && (\n                    <button\n                        className=\"btn btn-primary btn-sm\"\n                        onClick={() => tool.confirm()}\n                        style={{ marginRight: \"8px\" }}\n                    >\n                        <i className=\"fa fa-save\"></i>&nbsp; Save\n                    </button>\n                )}\n                {state === \"confirm\" && (\n                    <>\n                        <button\n                            className=\"btn btn-primary btn-sm\"\n                            onClick={() => tool.erase()}\n                            style={{ marginRight: \"8px\" }}\n                        >\n                            <i className=\"fa fa-eraser\"></i>&nbsp; Erase\n                        </button>\n                    </>\n                )}\n                {state === \"default\" && (\n                    <>\n                        <button\n                            className=\"btn btn-primary btn-sm\"\n                            onClick={() => {\n                                tool.updateArgs({\n                                    count,\n                                    variationStrength,\n                                    prompt,\n                                    negativePrompt,\n                                    model,\n                                    loras: selectedLoras.map(\n                                        (lora) => lora.config\n                                    ),\n                                });\n                                tool.submit(generator, image);\n                            }}\n                            style={{ marginRight: \"8px\" }}\n                        >\n                            <i className=\"fa fa-magic\"></i>&nbsp; Enhance\n                        </button>\n                        <button\n                            className=\"btn btn-primary btn-sm\"\n                            onClick={() => tool.mask()}\n                            style={{ marginRight: \"8px\" }}\n                        >\n                            <i className=\"fa fa-cut\"></i>&nbsp; Mask\n                        </button>\n                        {isMasked && (\n                            <button\n                                className=\"btn btn-danger btn-sm\"\n                                onClick={() => tool.deleteMask()}\n                                style={{ marginRight: \"8px\" }}\n                            >\n                                <i className=\"fa fa-cut\"></i>&nbsp; Unmask\n                            </button>\n                        )}\n                    </>\n                )}\n            </div>\n            <Prompt\n                when={dirty}\n                message=\"Are you sure you want to leave? Your changes will be lost.\"\n            />\n            {selectingModel && (\n                <ModelSelector\n                    onCancel={() => setSelectingModel(false)}\n                    onSelectModel={(model) => {\n                        setModel(model);\n                        setSelectingModel(false);\n                    }}\n                    initialSelectedModel={model}\n                    inpainting={false}\n                />\n            )}\n            {selectingLora && (\n                <LoraModal\n                    onCancel={() => setSelectingLora(false)}\n                    onConfirm={(lora) => onAddLora(lora)}\n                />\n            )}\n        </div>\n    );\n};\n","// export interface AspectRatio {\n//     displayName: string;\n//     width: number;\n//     height: number;\n//     id: number;\n\n//     scale: (size: number) => AspectRatio;\n// }\n\nexport class AspectRatio implements AspectRatio {\n    readonly displayName: string;\n    readonly width: number;\n    readonly height: number;\n    readonly id: number;\n\n    constructor(cfg: any) {\n        this.displayName = cfg.displayName;\n        this.width = cfg.width;\n        this.height = cfg.height;\n        this.id = cfg.id;\n    }\n\n    scale(size: number): AspectRatio {\n        const newWidth = this.width * size;\n        const newHeight = this.height * size;\n\n        return new AspectRatio({\n            id: this.id,\n            displayName: this.displayName,\n            // round width and height up to the nearest multiple of 64\n            width: Math.ceil(newWidth / 64) * 64,\n            height: Math.ceil(newHeight / 64) * 64,\n        });\n    }\n}\n\nexport const DEFAULT_ASPECT_RATIO = 5;\n\nexport const aspectRatios: AspectRatio[] = [\n    {\n        displayName: \"4:1\",\n        width: 1024,\n        height: 256,\n        id: 0,\n    },\n    {\n        displayName: \"3:1\",\n        width: 768,\n        height: 256,\n        id: 1,\n    },\n    {\n        displayName: \"2:1\",\n        width: 640,\n        height: 320,\n        id: 2,\n    },\n    {\n        displayName: \"3:2\",\n        width: 576,\n        height: 384,\n        id: 3,\n    },\n    {\n        displayName: \"5:4\",\n        width: 640,\n        height: 512,\n        id: 4,\n    },\n    {\n        displayName: \"1:1\",\n        width: 512,\n        height: 512,\n        id: 5,\n    },\n    {\n        displayName: \"4:5\",\n        width: 512,\n        height: 640,\n        id: 6,\n    },\n    {\n        displayName: \"2:3\",\n        width: 384,\n        height: 576,\n        id: 7,\n    },\n    {\n        displayName: \"1:2\",\n        width: 320,\n        height: 640,\n        id: 8,\n    },\n    {\n        displayName: \"1:3\",\n        width: 256,\n        height: 768,\n        id: 9,\n    },\n    {\n        displayName: \"1:4\",\n        width: 256,\n        height: 1024,\n        id: 10,\n    }\n].map((cfg) => new AspectRatio(cfg));\n\nexport function getClosestAspectRatio(width: number, height: number): AspectRatio {\n    const aspectRatio = width / height;\n\n    const tests = [...aspectRatios];\n    tests.sort((a, b) => {\n        const aRatio = a.width / a.height;\n        const bRatio = b.width / b.height;\n        return (\n            Math.abs(aRatio - aspectRatio) -\n            Math.abs(bRatio - aspectRatio)\n        );\n    });\n    const bestMatch = tests[0];\n    return bestMatch;\n}\n\n\n","import React, { useState, useEffect, useRef } from \"react\";\nimport { useParams, useHistory } from \"react-router-dom\";\nimport axios, { AxiosInstance } from \"axios\";\nimport * as uuid from \"uuid\";\n\nimport { AIBrushApi } from \"../../client\";\nimport { getUpscaleLevel } from \"../../lib/upscale\";\nimport \"./ImageEditor.css\";\nimport { createRenderer, Renderer } from \"./renderer\";\nimport { Tool, BaseTool } from \"./tool\";\nimport { SelectionTool, Controls as SelectionControls } from \"./selection-tool\";\nimport { EnhanceTool, EnhanceControls } from \"./enhance-tool\";\nimport {\n    PencilTool,\n    Controls as PencilControls,\n    defaultColors,\n} from \"./pencil-tool\";\nimport { SmudgeTool, SmudgeControls } from \"./smudge-tool\";\nimport { ImportExportControls } from \"./import-export\";\nimport { InpaintControls, InpaintTool } from \"./inpaint-tool\";\nimport { AugmentControls } from \"./augment-tool\";\nimport { defaultArgs } from \"../../components/ImagePrompt\";\nimport { ApiSocket } from \"../../lib/apisocket\";\nimport { BusyModal } from \"../../components/BusyModal\";\nimport { LocalImagesStore } from \"../../lib/localImagesStore\";\nimport { LocalImage } from \"../../lib/models\";\nimport { render } from \"@testing-library/react\";\nimport { HordeGenerator } from \"../../lib/hordegenerator\";\nimport { ImageClient } from \"../../lib/savedimages\";\n\ninterface CanPreventDefault {\n    preventDefault: () => void;\n}\n\ninterface Props {\n    generator: HordeGenerator;\n    localImages: LocalImagesStore;\n    imageClient: ImageClient;\n}\n\ninterface ToolConfig {\n    name: string;\n    iconClass: string;\n    constructor: (r: Renderer) => Tool;\n    renderControls: (t: Tool, renderer: Renderer) => JSX.Element;\n    defaultArgs: any;\n}\n\nexport const anonymousClient = axios.create();\ndelete anonymousClient.defaults.headers.common[\"Authorization\"];\n\nexport const ImageEditor: React.FC<Props> = ({\n    generator,\n    localImages,\n    imageClient\n}) => {\n    const [showSelectionControls, setShowSelectionControls] = useState(false);\n    const tools: Array<ToolConfig> = [\n        {\n            name: \"inpaint\",\n            iconClass: \"fas fa-paint-brush\",\n            constructor: (r: Renderer) => new InpaintTool(r),\n            defaultArgs: {},\n            renderControls: (t: Tool, renderer: Renderer) => {\n                t.onShowSelectionControls(setShowSelectionControls);\n                return (\n                    <InpaintControls\n                        tool={t as InpaintTool}\n                        renderer={renderer}\n                        generator={generator}\n                        image={image!}\n                    />\n                );\n            },\n        },\n        {\n            name: \"enhance\",\n            iconClass: \"fas fa-magic\",\n            constructor: (r: Renderer) => new EnhanceTool(r),\n            defaultArgs: {\n                variationStrength: 0.75,\n            },\n            renderControls: (t: Tool, renderer: Renderer) => {\n                t.onShowSelectionControls(setShowSelectionControls);\n                return (\n                    <EnhanceControls\n                        tool={t as EnhanceTool}\n                        renderer={renderer}\n                        image={image!}\n                        generator={generator}\n                    />\n                );\n            },\n        },\n        {\n            name: \"pencil\",\n            iconClass: \"fas fa-pencil-alt\",\n            constructor: (r: Renderer) => new PencilTool(r, \"base\"),\n            defaultArgs: {},\n            renderControls: (t: Tool, renderer: Renderer) => {\n                return (\n                    <PencilControls\n                        tool={t as PencilTool}\n                        renderer={renderer}\n                        colors={defaultColors}\n                    />\n                );\n            },\n        },\n        {\n            name: \"smudge\",\n            // finger icon\n            iconClass: \"fas fa-hand-pointer\",\n            constructor: (r: Renderer) => new SmudgeTool(r),\n            defaultArgs: {},\n            renderControls: (t: Tool, renderer: Renderer) => {\n                return (\n                    <SmudgeControls\n                        tool={t as SmudgeTool}\n                        renderer={renderer}\n                    />\n                );\n            },\n        },\n        {\n            name: \"import-export\",\n            iconClass: \"fas fa-file-import\",\n            constructor: (r: Renderer) => new BaseTool(r, \"import-export\"),\n            defaultArgs: {},\n            renderControls: (t: Tool, renderer: Renderer) => {\n                return (\n                    <ImportExportControls\n                        renderer={renderer}\n                        tool={t as BaseTool}\n                    />\n                );\n            },\n        },\n        {\n            name: \"augment\",\n            iconClass: \"fas fa-image\",\n            constructor: (r: Renderer) => new BaseTool(r, \"augment\"),\n            defaultArgs: {},\n            renderControls: (t: Tool, renderer: Renderer) => {\n                return (\n                    <AugmentControls\n                        renderer={renderer}\n                        tool={t as BaseTool}\n                        generator={generator}\n                        image={image!}\n                    />\n                );\n            },\n        },\n    ];\n\n    const [image, setImage] = useState<LocalImage | null>(null);\n    const [renderer, setRenderer] = useState<Renderer | null>(null);\n    const [tool, setTool] = useState<Tool | null>(null);\n    const [toolConfig, setToolConfig] = useState<ToolConfig | null>(null);\n    const [canUndo, setCanUndo] = useState(false);\n    const [canRedo, setCanRedo] = useState(false);\n    const [busyMessage, setBusyMessage] = useState<string | null>(null);\n\n    const { id } = useParams<{ id: string }>();\n    const history = useHistory();\n\n    const canvasRef = useRef<HTMLCanvasElement>(null);\n\n    const onSelectTool = (toolconfig: ToolConfig) => {\n        if (renderer) {\n            if (tool) {\n                if (!tool.destroy()) {\n                    return;\n                }\n            }\n            const newTool = toolconfig.constructor(renderer);\n            setTool(newTool);\n            setToolConfig(toolconfig);\n            newTool.onSaveImage((encodedImage, args = {}) => {\n                console.log(\"Saving image...\");\n                saveNewImage(encodedImage, args);\n            });\n        }\n    };\n\n    /**\n     * Saves a new image to the server\n     *\n     * @param encodedImage base64 encoded image\n     * @param newArgs may contain new phrases and negative phrases\n     */\n    const saveNewImage = async (encodedImage: string, newArgs: any) => {\n        if (!image || !encodedImage) {\n            throw new Error(\"Cannot save new image without existing image\");\n        }\n        if (!renderer) {\n            throw new Error(\"Cannot save new image without renderer\");\n        }\n        setBusyMessage(\"Saving image...\");\n        try {\n            const newImage: LocalImage = {\n                ...image,\n                params: {\n                    ...image.params,\n                    width: renderer!.getWidth() as any,\n                    height: renderer!.getHeight() as any,\n                },\n                id: uuid.v4(),\n                imageData: `data:image/png;base64,${encodedImage}`,\n            };\n            await localImages.saveImage(newImage);\n\n            // switch url and state to new image\n            setImage(newImage);\n            history.replace(`/image-editor/${newImage.id}`);\n        } finally {\n            setBusyMessage(null);\n        }\n    };\n\n    useEffect(() => {\n        if (image) {\n            return;\n        }\n\n        async function loadImage() {\n            // TODO: replace with google drive / legacy load\n            const localImage = await localImages.getImage(id);\n            let imageSrc = \"\";\n            if (localImage) {\n                setImage(localImage);\n                imageSrc = localImage.imageData!;\n            } else {\n                const image = await imageClient.loadImage(id)\n                setImage(image);\n                // https://aibrush2-filestore.s3.us-west-2.amazonaws.com/0e3a48ec-052e-4da9-b86a-d73f9b048256.image.png\n                const imageUrl = `https://aibrush2-filestore.s3.us-west-2.amazonaws.com/${id}.image.png`;\n                // Loading up data as binary, base64 encoding into image url\n                // bypasses browser security nonsense about cross-domain images\n                const resp = await anonymousClient.get(\n                    imageUrl,\n                    {\n                        responseType: \"arraybuffer\",\n                    }\n                );\n                const binaryImageData = Buffer.from(resp.data, \"binary\");\n                const base64ImageData = binaryImageData.toString(\"base64\");\n                imageSrc = `data:image/png;base64,${base64ImageData}`;\n            }\n\n            const imageElement = new Image();\n            imageElement.src = imageSrc;\n            imageElement.onload = () => {\n                if (!canvasRef.current) {\n                    console.error(\"Failed to get canvas\");\n                    return;\n                }\n                const renderer = createRenderer(canvasRef.current);\n                renderer.setBaseImage(imageElement);\n                setRenderer(renderer);\n            };\n        }\n        loadImage();\n    }, [image, id]);\n\n    // this covers the case that an image is upscaled to max, the upscale tool needs to\n    // be hidden and deselected.\n    useEffect(() => {\n        if (\n            image &&\n            tool &&\n            tool.name == \"upscale\" &&\n            image.params.width! * image.params.height! >= 2048 * 2048\n        ) {\n            onSelectTool(tools[0]);\n        }\n    }, [image, tool]);\n\n    useEffect(() => {\n        if (renderer) {\n            onSelectTool(tools[0]);\n            renderer.onSnapshot(() => {\n                setCanUndo(renderer.canUndo());\n                setCanRedo(renderer.canRedo());\n            });\n        }\n    }, [renderer]);\n\n    useEffect(() => {\n        if (canvasRef.current) {\n            const listener = (e: WheelEvent) => {\n                if (tool) {\n                    e.preventDefault();\n                    tool.onWheel(e);\n                }\n            };\n            canvasRef.current.addEventListener(\"wheel\", listener);\n            return () => {\n                canvasRef.current?.removeEventListener(\"wheel\", listener);\n            };\n        }\n    }, [tool, canvasRef.current]);\n\n    // implement a useEffect hook that resizes the canvas (renderer.updateCanvasSize(width, height)) when the window is resized, and also on initial load\n    // the canvas size should be set based on the current screen size\n    useEffect(() => {\n        if (renderer) {\n            const listener = () => {\n                let width = window.innerWidth * 0.85;\n                let height = window.innerHeight;\n                if (window.innerWidth <= 992) {\n                    width = window.innerWidth;\n                    height = window.innerHeight * 0.85;\n                }\n                renderer.updateCanvasSize(width, height);\n                // renderer.resetView();\n            };\n            window.addEventListener(\"resize\", listener);\n            listener();\n            renderer.resetView();\n            return () => {\n                window.removeEventListener(\"resize\", listener);\n            };\n            \n        }\n    }, [renderer]);\n\n    function renderTool(t: ToolConfig) {\n        if (!image) {\n            return null;\n        }\n        let buttonClass = `btn btn-secondary light-button image-editor-tool-button`;\n        const isSelected = tool && tool.name == t.name;\n        if (isSelected) {\n            buttonClass = `btn btn-primary image-editor-tool-button`;\n        }\n        return (\n            <>\n                <button\n                    style={{ margin: \"4px\" }}\n                    className={buttonClass}\n                    onClick={() => onSelectTool(t)}\n                >\n                    <i className={t.iconClass}></i>\n                </button>\n                {/* capitalize tool name */}\n                {/* <label>\n                    {t.name.charAt(0).toUpperCase() + t.name.slice(1)}\n                </label>\n                {isSelected && t.renderControls(tool!, renderer!)} */}\n            </>\n        );\n    }\n\n    function preventDefault(e: CanPreventDefault): boolean {\n        e.preventDefault();\n        return true;\n    }\n\n    return (\n        <>\n            <div className=\"row\">\n                <div className=\"col-12\">\n                    <h1 style={{ fontSize: \"40px\", textAlign: \"left\" }}>\n                        <i\n                            style={{ cursor: \"pointer\" }}\n                            onClick={() => history.push(`/images/${id}`)}\n                            className=\"fas fa-chevron-left\"\n                        ></i>\n                        &nbsp; AI Edit\n                    </h1>\n                </div>\n            </div>\n            <div\n                className=\"row\"\n                style={{ marginTop: \"32px\", paddingBottom: \"120px\" }}\n            >\n                <div\n                    className=\"col-lg-3\"\n                    style={{ textAlign: \"left\", marginBottom: \"8px\" }}\n                >\n                    {renderer && (\n                        <>\n                            <div style={{marginBottom: \"16px\"}}>{tools.map((t) => renderTool(t))}</div>\n                            {tool && toolConfig && (\n                                <>\n                                    {/* capitalize tool name */}\n                                    <h4 style={{marginLeft: \"16px\"}}>\n                                        {tool.name.charAt(0).toUpperCase() +\n                                            tool.name.slice(1)}\n                                    </h4>\n                                    {toolConfig.renderControls(\n                                        tool!,\n                                        renderer!\n                                    )}\n                                </>\n                            )}\n                            {(canRedo || canUndo) && (\n                                <div className=\"form-group\">\n                                    <div className=\"btn-group\">\n                                        <button\n                                            className=\"btn btn-primary image-popup-button\"\n                                            disabled={!renderer || !canUndo}\n                                            onClick={() =>\n                                                renderer && renderer.undo()\n                                            }\n                                        >\n                                            {/* undo */}\n                                            <i className=\"fas fa-undo\"></i>\n                                        </button>\n                                        <button\n                                            className=\"btn btn-primary image-popup-button\"\n                                            disabled={!renderer || !canRedo}\n                                            onClick={() =>\n                                                renderer && renderer.redo()\n                                            }\n                                        >\n                                            <i className=\"fas fa-redo\"></i>\n                                        </button>\n                                    </div>\n                                </div>\n                            )}\n                        </>\n                    )}\n                </div>\n                <div className=\"col-lg-9\">\n                    <div style={{ verticalAlign: \"middle\" }}>\n                        <div>\n                            <canvas\n                                style={{\n                                    cursor: \"none\",\n                                    touchAction: \"none\",\n                                    userSelect: \"none\",\n                                }}\n                                width={768}\n                                height={512}\n                                ref={canvasRef}\n                                className=\"image-editor-canvas\"\n                                onMouseDown={(e) =>\n                                    preventDefault(e) &&\n                                    tool &&\n                                    tool.onMouseDown(e)\n                                }\n                                onMouseMove={(e) =>\n                                    preventDefault(e) &&\n                                    tool &&\n                                    tool.onMouseMove(e)\n                                }\n                                onMouseUp={(e) =>\n                                    preventDefault(e) &&\n                                    tool &&\n                                    tool.onMouseUp(e)\n                                }\n                                onMouseLeave={(e) =>\n                                    preventDefault(e) &&\n                                    tool &&\n                                    tool.onMouseLeave(e)\n                                }\n                                onTouchStart={(e) =>\n                                    preventDefault(e) &&\n                                    tool &&\n                                    tool.onTouchStart(e)\n                                }\n                                onTouchMove={(e) =>\n                                    preventDefault(e) &&\n                                    tool &&\n                                    tool.onTouchMove(e)\n                                }\n                                onTouchEnd={(e) =>\n                                    preventDefault(e) &&\n                                    tool &&\n                                    tool.onTouchEnd(e)\n                                }\n                            ></canvas>\n                            {showSelectionControls && (\n                                <>\n                                    <button\n                                        className=\"btn btn-secondary canvas-select-left\"\n                                        onClick={() => tool!.select(\"left\")}\n                                    >\n                                        <i className=\"fas fa-chevron-left\"></i>\n                                    </button>\n                                    <button\n                                        className=\"btn btn-secondary canvas-select-right\"\n                                        onClick={() => tool!.select(\"right\")}\n                                    >\n                                        <i className=\"fas fa-chevron-right\"></i>\n                                    </button>\n                                </>\n                            )}\n                        </div>\n                    </div>\n                    <div className=\"row\">\n                        <button\n                            className=\"btn btn-primary\"\n                            // center horizontally\n                            style={{\n                                position: \"absolute\",\n                                left: \"50%\",\n                                transform: \"translate(-50%, 0)\",\n                            }}\n                            onClick={() => {\n                                if (renderer) {\n                                    renderer.resetView();\n                                }\n                            }}\n                        >\n                            {/* reset zoom */}\n                            <i className=\"fas fa-search-plus\"></i>&nbsp; Reset\n                            View\n                        </button>\n                        {/* redo */}\n                    </div>\n                    {/* vertically center button within the div */}\n                </div>\n            </div>\n            {busyMessage && (\n                <BusyModal show={true} title=\"Please Wait\">\n                    {busyMessage}\n                </BusyModal>\n            )}\n        </>\n    );\n};\n","import { Cursor, Rect } from \"./models\";\n\nconst maxSnapshots = 10;\n\nexport class Renderer {\n    private undoStack: ImageData[] = [];\n    private redoStack: ImageData[] = [];\n    private currentSnapshot: ImageData | undefined;\n\n    private backgroundLayer: HTMLCanvasElement;\n    private baseImageLayer: HTMLCanvasElement;\n    private editLayer: HTMLCanvasElement;\n    private maskLayer: HTMLCanvasElement | undefined;\n    // private overlayLayer: HTMLCanvasElement;\n\n    private selectionOverlay: Rect | undefined;\n    private selectionOverlayPreview: Rect | undefined;\n    private hasSelection: boolean = false;\n    private cursor: Cursor | undefined;\n\n    private zoom: number;\n    private offsetX: number;\n    private offsetY: number;\n    private width = 0;\n    private height = 0;\n\n    private snapshotListener: (() => void) | null = null;\n\n    constructor(private readonly canvas: HTMLCanvasElement) {\n        // invisible canvas elements\n        this.backgroundLayer = document.createElement(\"canvas\");\n        this.backgroundLayer.width = canvas.width;\n        this.backgroundLayer.height = canvas.height;\n        this.baseImageLayer = document.createElement(\"canvas\");\n        this.editLayer = document.createElement(\"canvas\");\n        // this.overlayLayer = document.createElement(\"canvas\");\n\n        this.zoom = 1;\n        this.offsetX = 0;\n        this.offsetY = 0;\n    }\n\n    updateCanvasSize(width: number, height: number) {\n        this.canvas.width = width;\n        this.canvas.height = height;\n        this.backgroundLayer.width = width;\n        this.backgroundLayer.height = height;\n        this.initializeBackgroundLayer();\n        this.render();\n    }\n\n    undo(allowRedo: boolean = true) {\n        if (this.undoStack.length > 0 && this.currentSnapshot) {\n            const imageData = this.undoStack.pop()!;\n            if (allowRedo) {\n                this.redoStack.push(this.currentSnapshot);\n            }\n            this.currentSnapshot = imageData;\n            // set as base image\n            const ctx = this.baseImageLayer.getContext(\"2d\");\n            if (ctx) {\n                ctx.clearRect(\n                    0,\n                    0,\n                    this.baseImageLayer.width,\n                    this.baseImageLayer.height\n                );\n                ctx.putImageData(imageData, 0, 0);\n                this.render();\n            }\n            this.notifySnapshotListener();\n        }\n    }\n\n    redo() {\n        if (this.redoStack.length > 0 && this.currentSnapshot) {\n            this.undoStack.push(this.currentSnapshot);\n            const imageData = this.redoStack.pop()!;\n            this.currentSnapshot = imageData;\n\n            // set as base image\n            const ctx = this.baseImageLayer.getContext(\"2d\");\n            if (ctx) {\n                ctx.putImageData(imageData, 0, 0);\n                this.render();\n            }\n            this.notifySnapshotListener();\n        }\n    }\n\n    clearRedoStack() {\n        this.redoStack = [];\n        this.notifySnapshotListener();\n    }\n\n    canUndo(): boolean {\n        return !this.hasSelection && this.undoStack.length > 0;\n    }\n\n    canRedo(): boolean {\n        return !this.hasSelection && this.redoStack.length > 0;\n    }\n\n    onSnapshot(listener: () => void) {\n        this.snapshotListener = listener;\n    }\n\n    snapshot() {\n        const ctx = this.baseImageLayer.getContext(\"2d\");\n        if (ctx) {\n            const snapshot = ctx.getImageData(\n                0,\n                0,\n                this.baseImageLayer.width,\n                this.baseImageLayer.height\n            );\n            if (this.currentSnapshot) {\n                this.undoStack.push(this.currentSnapshot);\n                this.currentSnapshot = snapshot;\n                if (this.redoStack.length > 0) {\n                    this.redoStack = [];\n                }\n                if (this.undoStack.length > maxSnapshots) {\n                    this.undoStack.shift();\n                }\n            } else {\n                this.currentSnapshot = snapshot;\n            }\n\n            this.notifySnapshotListener();\n        }\n    }\n\n    private notifySnapshotListener() {\n        if (this.snapshotListener) {\n            this.snapshotListener();\n        }\n    }\n\n    render() {\n        const context = this.canvas.getContext(\"2d\");\n        if (context) {\n            context.clearRect(0, 0, this.width, this.height);\n            context.drawImage(this.backgroundLayer, 0, 0);\n            // apply zoom and offset\n            context.setTransform(\n                this.zoom,\n                0,\n                0,\n                this.zoom,\n                this.offsetX * this.zoom,\n                this.offsetY * this.zoom\n            );\n            // context.drawImage(this.backgroundLayer, 0, 0);\n            context.drawImage(this.baseImageLayer, 0, 0);\n            context.drawImage(this.editLayer, 0, 0);\n            // draw this.maskLayer at 0.3 opacity\n            if (this.maskLayer) {\n                context.globalAlpha = 0.3;\n                context.drawImage(this.maskLayer, 0, 0);\n                context.globalAlpha = 1;\n            }\n\n            // context.drawImage(this.overlayLayer, 0, 0);\n            this.drawOverlay(context, this.width, this.height);\n            context.setTransform(1, 0, 0, 1, 0, 0);\n        }\n    }\n\n    createMask() {\n        this.maskLayer = document.createElement(\"canvas\");\n        this.maskLayer.width = this.width;\n        this.maskLayer.height = this.height;\n        this.resetMask();\n    }\n\n    resetMask() {\n        if (this.maskLayer) {\n            const ctx = this.maskLayer.getContext(\"2d\");\n            if (ctx) {\n                ctx.fillStyle = \"#000000\";\n                ctx.fillRect(0, 0, this.width, this.height);\n            }\n            this.render();\n        }\n    }\n\n    invertMask() {\n        if (this.maskLayer) {\n            const ctx = this.maskLayer.getContext(\"2d\");\n            if (ctx) {\n                // change black to white, white to black\n                const imageData = ctx.getImageData(\n                    0,\n                    0,\n                    this.width,\n                    this.height\n                );\n                for (let i = 0; i < imageData.data.length; i += 4) {\n                    imageData.data[i] = 255 - imageData.data[i];\n                    imageData.data[i + 1] = 255 - imageData.data[i + 1];\n                    imageData.data[i + 2] = 255 - imageData.data[i + 2];\n                }\n                ctx.putImageData(imageData, 0, 0);\n            }\n            this.render();\n        }\n    }\n\n    deleteMask() {\n        this.maskLayer = undefined;\n        this.render();\n    }\n\n    isMasked() {\n        return this.maskLayer !== undefined;\n    }\n\n    getCanvas(): HTMLCanvasElement {\n        return this.canvas;\n    }\n\n    private initializeBackgroundLayer() {\n        // checkered background\n        // #DEDEDE\n        // #FFFFFF\n        // 10x10 pixel squares\n        const ctx = this.backgroundLayer.getContext(\"2d\");\n        if (ctx) {\n            const pattern = ctx.createPattern(\n                this.createCheckeredPattern(20, 20, \"#808080\", \"#AAAAAA\"),\n                \"repeat\"\n            );\n            if (pattern) {\n                ctx.fillStyle = pattern;\n                ctx.fillRect(\n                    0,\n                    0,\n                    this.backgroundLayer.width,\n                    this.backgroundLayer.height\n                );\n            }\n        }\n    }\n\n    private createCheckeredPattern(\n        width: number,\n        height: number,\n        color1: string,\n        color2: string\n    ): HTMLCanvasElement {\n        const canvas = document.createElement(\"canvas\");\n        canvas.width = width;\n        canvas.height = height;\n        const ctx = canvas.getContext(\"2d\");\n        if (ctx) {\n            ctx.fillStyle = color1;\n            ctx.fillRect(0, 0, width, height);\n            ctx.fillStyle = color2;\n            ctx.fillRect(0, 0, width / 2, height / 2);\n            ctx.fillRect(width / 2, height / 2, width / 2, height / 2);\n        }\n        return canvas;\n    }\n\n    setBaseImage(\n        image: HTMLImageElement | HTMLCanvasElement,\n        updateSelectionOverlay = true\n    ) {\n        const context = this.baseImageLayer.getContext(\"2d\");\n        if (context) {\n            // set size of all layers\n            // TODO: adapt for an always-square canvas\n            this.initializeBackgroundLayer();\n\n            this.baseImageLayer.width = image.width;\n            this.baseImageLayer.height = image.height;\n            this.editLayer.width = image.width;\n            this.editLayer.height = image.height;\n            this.maskLayer = undefined;\n            // set image size\n            this.width = image.width;\n            this.height = image.height;\n            // this.canvas.width = image.width;\n            // this.canvas.height = image.height;\n            context.drawImage(image, 0, 0);\n\n            if (updateSelectionOverlay) {\n                // set 512x512 selection overlay at the center of the image\n                this.setSelectionOverlay({\n                    x: (image.width - 512) / 2,\n                    y: (image.height - 512) / 2,\n                    width: 512,\n                    height: 512,\n                });\n            }\n            this.resetView();\n            // this.render(); // already called by updateZoomAndOffset\n            this.snapshot();\n        }\n    }\n\n    resetView() {\n        // Determine the aspect ratios of the image and canvas\n        const imageAspectRatio = this.width / this.height;\n        const canvasAspectRatio = this.canvas.width / this.canvas.height;\n    \n        let zoom, offsetX, offsetY;\n    \n        if (imageAspectRatio > canvasAspectRatio) {\n            // The image is wider than the canvas, so we should fit the image to the width of the canvas\n            zoom = this.canvas.width / this.width;\n            offsetX = 0;\n            // Calculate the amount of empty space in the height (in image coordinate space), and divide by 2 to center\n            offsetY = (this.height - (this.canvas.height / zoom)) / -2;\n        } else {\n            // The image is taller or equal aspect ratio to the canvas, so we should fit the image to the height of the canvas\n            zoom = this.canvas.height / this.height;\n            offsetY = 0;\n            // Calculate the amount of empty space in the width (in image coordinate space), and divide by 2 to center\n            offsetX = (this.width - (this.canvas.width / zoom)) / -2;\n        }\n    \n        this.updateZoomAndOffset(zoom, offsetX, offsetY);\n    }\n    \n    \n\n    setEditImage(imageData: ImageData | null) {\n        this.hasSelection = !!imageData;\n        const context = this.editLayer.getContext(\"2d\");\n        if (context && this.selectionOverlay) {\n            context.clearRect(\n                0,\n                0,\n                this.editLayer.width,\n                this.editLayer.height\n            );\n            if (imageData) {\n                context.putImageData(\n                    imageData,\n                    this.selectionOverlay.x,\n                    this.selectionOverlay.y\n                );\n            }\n            // edit image makes the selection rect and preview disappear\n            // so redraw the overlay\n            this.hasSelection = !!imageData;\n            this.render();\n        }\n        this.notifySnapshotListener();\n    }\n\n    private drawOverlay(\n        context: CanvasRenderingContext2D,\n        width: number,\n        height: number\n    ) {\n        const lineWidth = Math.max(this.width / 512, this.height / 512);\n        if (context) {\n            context.strokeStyle = \"white\";\n            context.lineWidth = lineWidth;\n            context.strokeRect(0, 0, width, height);\n\n            if (!this.hasSelection && this.selectionOverlay) {\n                context.strokeStyle = \"white\";\n                context.lineWidth = lineWidth;\n                context.strokeRect(\n                    this.selectionOverlay.x,\n                    this.selectionOverlay.y,\n                    this.selectionOverlay.width,\n                    this.selectionOverlay.height\n                );\n            }\n            if (!this.hasSelection && this.selectionOverlayPreview) {\n                context.strokeStyle = \"cyan\";\n                context.lineWidth = lineWidth;\n                context.strokeRect(\n                    this.selectionOverlayPreview.x,\n                    this.selectionOverlayPreview.y,\n                    this.selectionOverlayPreview.width,\n                    this.selectionOverlayPreview.height\n                );\n            }\n            if (this.cursor) {\n                if (this.cursor.type === \"circle\") {\n                    context.lineWidth = lineWidth;\n                    context.strokeStyle = this.cursor.color;\n                    // context.globalAlpha = 0.5;\n                    context.beginPath();\n                    context.arc(\n                        this.cursor.x,\n                        this.cursor.y,\n                        this.cursor.radius,\n                        0,\n                        2 * Math.PI\n                    );\n                    context.stroke();\n                } else if (this.cursor.type === \"circle-fill\") {\n                    context.fillStyle = this.cursor.color;\n                    context.strokeStyle = this.cursor.color;\n                    // context.lineWidth = lineWidth;\n                    // context.globalAlpha = 0.5;\n                    context.beginPath();\n                    context.arc(\n                        this.cursor.x,\n                        this.cursor.y,\n                        this.cursor.radius,\n                        0,\n                        2 * Math.PI\n                    );\n                    context.stroke();\n                    // set alpha to 0.5 and fill\n                    context.globalAlpha = 0.5;\n                    context.beginPath();\n                    context.arc(\n                        this.cursor.x,\n                        this.cursor.y,\n                        this.cursor.radius,\n                        0,\n                        2 * Math.PI\n                    );\n                    context.fill();\n                    context.globalAlpha = 1;\n                } else if (this.cursor.type == \"crosshairs\") {\n                    // draw crosshairs based on cursor radius\n                    context.strokeStyle = this.cursor.color;\n                    context.lineWidth = lineWidth;\n                    context.beginPath();\n                    context.moveTo(\n                        this.cursor.x - this.cursor.radius,\n                        this.cursor.y\n                    );\n                    context.lineTo(\n                        this.cursor.x + this.cursor.radius,\n                        this.cursor.y\n                    );\n                    context.moveTo(\n                        this.cursor.x,\n                        this.cursor.y - this.cursor.radius\n                    );\n                    context.lineTo(\n                        this.cursor.x,\n                        this.cursor.y + this.cursor.radius\n                    );\n                    context.stroke();\n                } else if (this.cursor.type === \"colorpicker\") {\n                    // TODO: add croshairs\n                    context.lineWidth = this.cursor.radius * 0.75;\n                    context.strokeStyle = this.cursor.color;\n                    // context.globalAlpha = 0.5;\n                    context.beginPath();\n                    context.arc(\n                        this.cursor.x,\n                        this.cursor.y,\n                        this.cursor.radius,\n                        0,\n                        2 * Math.PI\n                    );\n                    context.stroke();\n\n                    // draw crosshairs (black)\n                    context.lineWidth = lineWidth;\n                    context.strokeStyle = \"black\";\n                    context.beginPath();\n                    context.moveTo(\n                        this.cursor.x - this.cursor.radius,\n                        this.cursor.y\n                    );\n                    context.lineTo(\n                        this.cursor.x + this.cursor.radius,\n                        this.cursor.y\n                    );\n                    context.moveTo(\n                        this.cursor.x,\n                        this.cursor.y - this.cursor.radius\n                    );\n                    context.lineTo(\n                        this.cursor.x,\n                        this.cursor.y + this.cursor.radius\n                    );\n                    context.stroke();\n                }\n            }\n        }\n    }\n\n    setSelectionOverlay(selectionOverlay: Rect | undefined) {\n        this.selectionOverlay = selectionOverlay;\n        this.render();\n    }\n\n    setSelectionOverlayPreview(selectionOverlayPreview: Rect | undefined) {\n        this.selectionOverlayPreview = selectionOverlayPreview;\n        this.render();\n    }\n\n    setCursor(cursor: Cursor | undefined) {\n        this.cursor = cursor;\n        this.render();\n    }\n\n    getSelectionOverlay(): Rect | undefined {\n        return this.selectionOverlay;\n    }\n\n    getZoom(): number {\n        return this.zoom;\n    }\n\n    getOffsetX(): number {\n        return this.offsetX;\n    }\n\n    getOffsetY(): number {\n        return this.offsetY;\n    }\n\n    updateZoomAndOffset(zoom: number, offsetX: number, offsetY: number) {\n        // console.log(`zoom: ${zoom}, offset: ${offsetX}, ${offsetY}`)\n        this.zoom = zoom;\n        this.offsetX = offsetX;\n        this.offsetY = offsetY;\n        this.render();\n    }\n\n    getWidth(): number {\n        return this.width;\n    }\n\n    getHeight(): number {\n        return this.height;\n    }\n\n    private imageDataToEncodedImage(imageData: ImageData): string | undefined {\n        // create a canvas and draw the image data on it\n        const canvas = document.createElement(\"canvas\");\n        canvas.width = imageData.width;\n        canvas.height = imageData.height;\n        const context = canvas.getContext(\"2d\");\n        if (context) {\n            context.putImageData(imageData, 0, 0);\n            // return the data url of the canvas\n            const result = canvas.toDataURL(\"image/png\");\n            // cleanup the canvas\n            canvas.remove();\n            // extract base64 data from data url\n            return result.split(\",\")[1];\n        }\n    }\n\n    getEncodedImage(selection: Rect | null): string | undefined {\n        const imageData = this.getImageData(selection);\n        if (imageData) {\n            return this.imageDataToEncodedImage(imageData);\n        }\n    }\n\n    private convertErasureToMask(erasure: ImageData): ImageData {\n        // for each pixel, if alpha < 255, set to white, otherwise set to black\n        const mask = erasure;\n        for (let i = 0; i < erasure.data.length; i += 4) {\n            let white = erasure.data[i + 3] < 255;\n            if (white) {\n                mask.data[i] = 255;\n                mask.data[i + 1] = 255;\n                mask.data[i + 2] = 255;\n                mask.data[i + 3] = 255;\n            } else {\n                mask.data[i] = 0;\n                mask.data[i + 1] = 0;\n                mask.data[i + 2] = 0;\n                mask.data[i + 3] = 255;\n            }\n        }\n        return mask;\n    }\n\n    getEncodedMask(\n        selection: Rect | null,\n        layer: \"base\" | \"mask\" = \"base\"\n    ): string | undefined {\n        const imageData = this.getImageData(selection, layer)!;\n        if (!imageData) {\n            return;\n        }\n        if (layer === \"base\") {\n            const mask = this.convertErasureToMask(imageData);\n            return this.imageDataToEncodedImage(mask);\n        } else {\n            return this.imageDataToEncodedImage(imageData);\n        }\n    }\n\n    getImageData(\n        selection: Rect | null,\n        layer: \"base\" | \"mask\" = \"base\"\n    ): ImageData | undefined {\n        if (!selection) {\n            selection = {\n                x: 0,\n                y: 0,\n                width: this.width,\n                height: this.height,\n            };\n        }\n        // get image data of the selection\n        const imageLayer =\n            layer === \"base\" ? this.baseImageLayer : this.maskLayer;\n        if (!imageLayer) {\n            return;\n        }\n        let context = imageLayer.getContext(\"2d\");\n        if (context) {\n            const imageData = context.getImageData(\n                selection.x,\n                selection.y,\n                selection.width,\n                selection.height\n            );\n            return imageData;\n        }\n    }\n\n    commitSelection() {\n        // draw the selection overlay on the base image layer\n        const context = this.baseImageLayer.getContext(\"2d\");\n        if (context) {\n            context.drawImage(this.editLayer, 0, 0);\n            this.setEditImage(null);\n            this.snapshot();\n        }\n    }\n\n    drawPoint(\n        x: number,\n        y: number,\n        brushSize: number,\n        color: string,\n        layer: \"base\" | \"mask\" = \"base\"\n    ): void {\n        // draw on selection layer\n        const imageLayer = layer === \"base\" ? this.editLayer : this.maskLayer;\n        if (!imageLayer) {\n            return;\n        }\n        const context = imageLayer.getContext(\"2d\");\n        if (context) {\n            context.fillStyle = color;\n            context.beginPath();\n            context.arc(x, y, brushSize / 2, 0, 2 * Math.PI);\n            context.fill();\n        }\n        this.render();\n    }\n\n    erasePoint(brushx: number, brushy: number, brushSize: number): void {\n        if (!this.selectionOverlay) {\n            throw new Error(\"No selection overlay\");\n        }\n        // get image data centered on x, y with brushSize width and height\n        const context = this.baseImageLayer.getContext(\"2d\");\n        if (context) {\n            const imageData = context.getImageData(\n                brushx - brushSize / 2,\n                brushy - brushSize / 2,\n                brushSize,\n                brushSize\n            );\n            // set alpha to 0 in a circle centered on x, y with radius brushSize / 2\n            for (let i = 0; i < imageData.data.length; i += 4) {\n                const x = (i / 4) % brushSize;\n                const y = Math.floor(i / 4 / brushSize);\n\n                const absx = x - brushSize / 2 + brushx;\n                // three pixel barrier on each edge UNLESS the selection overlay borders that edge\n                let leftEdge = this.selectionOverlay.x;\n                if (leftEdge > 0) {\n                    leftEdge += 10;\n                }\n                let rightEdge =\n                    this.selectionOverlay.x + this.selectionOverlay.width;\n                if (rightEdge < this.width) {\n                    rightEdge -= 10;\n                }\n                let topEdge = this.selectionOverlay.y;\n                if (topEdge > 0) {\n                    topEdge += 10;\n                }\n                let bottomEdge =\n                    this.selectionOverlay.y + this.selectionOverlay.height;\n                if (bottomEdge < this.canvas.height) {\n                    bottomEdge -= 10;\n                }\n\n                const containsx = absx > leftEdge && absx < rightEdge;\n                const absy = y - brushSize / 2 + brushy;\n                const containsy = absy > topEdge && absy < bottomEdge;\n                const contains = containsx && containsy;\n\n                // check if x, y is within the selection overlay\n                if (this.selectionOverlay && !contains) {\n                    continue;\n                }\n\n                const distance = Math.sqrt(\n                    Math.pow(x - brushSize / 2, 2) +\n                        Math.pow(y - brushSize / 2, 2)\n                );\n                if (distance < brushSize / 2) {\n                    imageData.data[i + 3] = 0;\n                }\n            }\n            // draw the image data on the selection layer\n            context.putImageData(\n                imageData,\n                brushx - brushSize / 2,\n                brushy - brushSize / 2\n            );\n        }\n    }\n\n    drawLine(\n        x1: number,\n        y1: number,\n        x2: number,\n        y2: number,\n        brushSize: number,\n        color: string,\n        layer: \"base\" | \"mask\" = \"base\"\n    ): void {\n        const imageLayer = layer === \"base\" ? this.editLayer : this.maskLayer;\n        if (!imageLayer) {\n            return;\n        }\n        // draw on selection layer\n        const context = imageLayer.getContext(\"2d\");\n        if (context) {\n            context.strokeStyle = color;\n            context.lineWidth = brushSize;\n            context.lineCap = \"round\";\n            context.beginPath();\n            context.moveTo(x1, y1);\n            context.lineTo(x2, y2);\n            context.stroke();\n        }\n        this.render();\n    }\n\n    smudgeLine(\n        x1: number,\n        y1: number,\n        x2: number,\n        y2: number,\n        brushSize: number,\n        brushOpacity: number\n    ): void {\n        const unitVector = {\n            x: x2 - x1,\n            y: y2 - y1,\n        };\n        const length = Math.sqrt(\n            unitVector.x * unitVector.x + unitVector.y * unitVector.y\n        );\n        unitVector.x /= length;\n        unitVector.y /= length;\n\n        // for each point on the line, get image data (brushSize x brushSize) from edit layer\n        // average pixel values that are within the brush circle.\n        // update the image data with the averaged pixel values in the\n        // brush circle, then put the image data back on the edit layer\n        // at the point on the line\n\n        const context = this.editLayer.getContext(\"2d\");\n        if (context) {\n            for (let i = 0; i < length; i++) {\n                const x = x1 + i * unitVector.x;\n                const y = y1 + i * unitVector.y;\n\n                const imageData = context.getImageData(\n                    x - brushSize / 2,\n                    y - brushSize / 2,\n                    brushSize,\n                    brushSize\n                );\n\n                let totalRed = 0;\n                let totalGreen = 0;\n                let totalBlue = 0;\n                let count = 0.0;\n\n                // average pixel values\n                for (let y = 0; y < imageData.height; y++) {\n                    for (let x = 0; x < imageData.width; x++) {\n                        const index = (y * imageData.width + x) * 4;\n                        const distance = Math.sqrt(\n                            (x - brushSize / 2) * (x - brushSize / 2) +\n                                (y - brushSize / 2) * (y - brushSize / 2)\n                        );\n                        if (distance <= brushSize / 2) {\n                            // get the pixel value from the image data\n                            const r = imageData.data[index];\n                            const g = imageData.data[index + 1];\n                            const b = imageData.data[index + 2];\n\n                            totalRed += r;\n                            totalGreen += g;\n                            totalBlue += b;\n                            count++;\n                        }\n                    }\n                }\n\n                // update the image data with the averaged pixel values\n                // these need to be weighted by the brush opacity\n                const averageRed = totalRed / count;\n                const averageGreen = totalGreen / count;\n                const averageBlue = totalBlue / count;\n                for (let y = 0; y < imageData.height; y++) {\n                    for (let x = 0; x < imageData.width; x++) {\n                        const index = (y * imageData.width + x) * 4;\n                        const distance = Math.sqrt(\n                            (x - brushSize / 2) * (x - brushSize / 2) +\n                                (y - brushSize / 2) * (y - brushSize / 2)\n                        );\n                        if (distance <= brushSize / 2) {\n                            imageData.data[index] =\n                                averageRed * brushOpacity +\n                                imageData.data[index] * (1 - brushOpacity);\n                            imageData.data[index + 1] =\n                                averageGreen * brushOpacity +\n                                imageData.data[index + 1] * (1 - brushOpacity);\n                            imageData.data[index + 2] =\n                                averageBlue * brushOpacity +\n                                imageData.data[index + 2] * (1 - brushOpacity);\n                        }\n                    }\n                }\n\n                // put the image data back on the edit layer\n                context.putImageData(\n                    imageData,\n                    x - brushSize / 2,\n                    y - brushSize / 2\n                );\n            }\n        }\n        this.render();\n    }\n\n    getPixel(x: number, y: number): string {\n        const context = this.baseImageLayer.getContext(\"2d\");\n        // get pixel as hex string\n        if (context) {\n            const pixel = context.getImageData(x, y, 1, 1).data;\n            return (\n                \"#\" +\n                (\"000000\" + rgbToHex(pixel[0], pixel[1], pixel[2])).slice(-6)\n            );\n        }\n        return \"#000000\";\n    }\n\n    copyEditImageFromBaseImage(): void {\n        // copy the base image to the edit layer\n        const context = this.editLayer.getContext(\"2d\");\n        if (context) {\n            context.drawImage(this.baseImageLayer, 0, 0);\n        }\n        this.render();\n        this.hasSelection = true;\n        this.notifySnapshotListener();\n    }\n\n    expandToOverlay() {\n        if (!this.selectionOverlay) {\n            throw new Error(\"No selection overlay\");\n        }\n        const minX = Math.min(0, this.selectionOverlay.x);\n        const minY = Math.min(0, this.selectionOverlay.y);\n        const maxX = Math.max(\n            this.selectionOverlay.x + this.selectionOverlay.width,\n            this.baseImageLayer.width\n        );\n        const maxY = Math.max(\n            this.selectionOverlay.y + this.selectionOverlay.height,\n            this.baseImageLayer.height\n        );\n        const width = maxX - minX;\n        const height = maxY - minY;\n\n        // create a new canvas with the expanded size\n        const newCanvas = document.createElement(\"canvas\");\n        newCanvas.width = width;\n        newCanvas.height = height;\n        // draw the base image on the new canvas.\n        // if overlay.x is negative, image.x is overlay.x * -1\n        // if overlay.x is 0 or positive, image.x is 0\n        // if overlay.y is negative, image.y is overlay.y * -1\n        // if overlay.y is 0 or positive, image.y is 0\n        const context = newCanvas.getContext(\"2d\");\n        if (context) {\n            context.drawImage(\n                this.baseImageLayer,\n                Math.max(0, this.selectionOverlay.x * -1),\n                Math.max(0, this.selectionOverlay.y * -1)\n            );\n        }\n        if (this.selectionOverlay.x < 0) {\n            this.selectionOverlay.x = 0;\n        }\n        if (this.selectionOverlay.y < 0) {\n            this.selectionOverlay.y = 0;\n        }\n        console.log(`new Canvas size: ${width} x ${height}`);\n        this.setBaseImage(newCanvas, false);\n    }\n}\n\nfunction rgbToHex(r: number, g: number, b: number) {\n    if (r > 255 || g > 255 || b > 255) throw \"Invalid color component\";\n    return ((r << 16) | (g << 8) | b).toString(16);\n}\n\nexport function createRenderer(canvas: HTMLCanvasElement): Renderer {\n    return new Renderer(canvas);\n}\n","import React, { FC, useState, useEffect } from \"react\";\nimport loadImage from \"blueimp-load-image\";\nimport saveAs from \"file-saver\";\n\nimport { AIBrushApi } from \"../../client\";\nimport { Renderer } from \"./renderer\";\nimport { BaseTool, Tool } from \"./tool\";\n\ninterface Props {\n    renderer: Renderer;\n    tool: BaseTool;\n}\n\nexport const ImportExportControls: FC<Props> = ({ renderer, tool }) => {\n\n    const [backupImage, setBackupImage] = useState<string | undefined>();\n\n    const onImageSelected = (event: React.ChangeEvent<HTMLInputElement>) => {\n        const files = event.target.files;\n        if (files && files.length > 0) {\n            loadImage(\n                files[0],\n                (img) => {\n                    const backupImage = renderer.getEncodedImage(null);\n                    setBackupImage(backupImage);\n                    renderer.setBaseImage(img as HTMLImageElement);\n                },\n                { canvas: false }\n            );\n        }\n    };\n\n    const onExport = () => {\n        const encodedImage = renderer.getEncodedImage(null);\n        if (encodedImage) {\n            // base64 decode\n            const byteString = atob(encodedImage);\n            // save as file\n            const buffer = new ArrayBuffer(byteString.length);\n            const intArray = new Uint8Array(buffer);\n            for (let i = 0; i < byteString.length; i++) {\n                intArray[i] = byteString.charCodeAt(i);\n            }\n            const blob = new Blob([intArray], { type: \"image/png\" });\n            saveAs(blob, \"image.png\");\n        }\n    };\n\n    if (backupImage) {\n        return (\n            <div className=\"form-group\" style={{marginTop: \"16px\"}}>\n                <button\n                    className=\"btn btn-primary\"\n                    onClick={() => {\n                        setBackupImage(undefined);\n                        const img = new Image();\n                        // set src as data uri\n                        const src = \"data:image/png;base64,\" + backupImage;\n                        img.src = src;\n                        img.onload = () => {\n                            renderer.setBaseImage(img);\n                        };\n                    }}\n                >\n                    {/* cancel icon */}\n                    <i className=\"fas fa-times\"></i>&nbsp;\n                    Revert\n                </button>\n                <button\n                    className=\"btn btn-primary\"\n                    onClick={() => {\n                        setBackupImage(undefined);\n                        if (tool.saveListener) {\n                            const encodedImage = renderer.getEncodedImage(null);\n                            if (encodedImage) {\n                                tool.saveListener(encodedImage);\n                            }\n                        }\n                    }}\n                    style={{marginLeft: \"8px\"}}\n                >\n                    {/* save icon */}\n                    <i className=\"fas fa-save\"></i>&nbsp;\n                    Save\n                </button>\n            </div>\n        );\n    }\n\n    // Show buttons for import and export and \"save a copy\"\n    return (\n        <>\n            <div className=\"form-group\" style={{marginTop: \"16px\"}}>\n                <label\n                    id=\"loadimage-wrapper\"\n                    className={`btn btn-primary `}\n                    style={{ display: \"inline\" }}\n                >\n                    {/* upload image */}\n                    <i className=\"fas fa-upload\"></i>&nbsp; Import Image\n                    <input\n                        id=\"loadimage\"\n                        type=\"file\"\n                        style={{ display: \"none\" }}\n                        onChange={onImageSelected}\n                    />\n                </label>\n            </div>\n            <div className=\"form-group\">\n                <button\n                    className=\"btn btn-primary\"\n                    onClick={() => {\n                        onExport();\n                    }}\n                    style={{ marginLeft: \"8px\"}}\n                >\n                    <i className=\"fas fa-download\"></i>&nbsp; Export Image\n                </button>\n            </div>\n        </>\n    );\n};\n","import axios from \"axios\";\nimport { AIBrushApi } from \"../client\";\nimport { Rect } from \"../pages/image-editor/models\";\nimport { LocalImage } from \"./models\";\n\nconst anonymousClient = axios.create();\n\nexport interface SplitResult {\n    numTilesX: number;\n    numTilesY: number;\n    tileSize: number;\n    imageWidth: number;\n    imageHeight: number;\n    tiles: ImageData[][]; // [x][y]\n}\n\nexport function convertPNGToJPG(encodedImage: string): Promise<string> {\n    return new Promise((resolve, reject) => {\n        const image = new Image();\n        image.onload = () => {\n            const canvas = document.createElement(\"canvas\");\n            try {\n                canvas.width = image.width;\n                canvas.height = image.height;\n                const ctx = canvas.getContext(\"2d\");\n                if (!ctx) {\n                    throw new Error(\"Could not get canvas context\");\n                }\n                ctx.drawImage(image, 0, 0);\n                const dataUrl = canvas.toDataURL(\"image/jpeg\");\n                resolve(dataUrl.split(\",\")[1]);\n            } finally {\n                canvas.remove();\n            }\n        };\n        image.src = `data:image/png;base64,${encodedImage}`;\n    });\n}\n\nexport function loadImageDataElement(\n    image: LocalImage,\n): Promise<HTMLImageElement> {\n    return new Promise((resolve, reject) => {\n        const src = image.imageData!;\n        const imageElement = new Image();\n        imageElement.src = src;\n        imageElement.onload = () => {\n            resolve(imageElement);\n        };\n                    \n    });\n}\n\n// split image for individual upscales\nexport function splitImage(initImage: ImageData) {\n    // Check if the image area is larger than 512x512\n    if (initImage.width * initImage.height > 512 * 512) {\n        // use a temporary canvas to split the image\n        const canvas = document.createElement(\"canvas\");\n        try {\n            canvas.width = initImage.width;\n            canvas.height = initImage.height;\n            const ctx = canvas.getContext(\"2d\");\n            if (!ctx) {\n                throw new Error(\"Could not get canvas context\");\n            }\n            ctx.putImageData(initImage, 0, 0);\n            const tile_size = Math.min(initImage.width, initImage.height, 512);\n            // split the image into 512x512 tiles\n            // they need to overlap by at least 32 pixels\n            // so that the edges can be merged\n\n            // calculate the number of tiles in each dimension\n            const num_tiles_x = Math.ceil(initImage.width / (tile_size - 32));\n            const num_tiles_y = Math.ceil(initImage.height / (tile_size - 32));\n\n            const tiles: ImageData[][] = [];\n            for (let x = 0; x < num_tiles_x; x++) {\n                tiles.push([]);\n                for (let y = 0; y < num_tiles_y; y++) {\n                    // calculate the bounding box of the tile\n                    const x0 = x * (tile_size - 32);\n                    const y0 = y * (tile_size - 32);\n                    const x1 = Math.min(x0 + tile_size, initImage.width);\n                    const y1 = Math.min(y0 + tile_size, initImage.height);\n                    // crop the tile\n                    const tile = ctx.getImageData(x0, y0, x1 - x0, y1 - y0);\n                    tiles[x].push(tile);\n                }\n            }\n            return {\n                numTilesX: num_tiles_x,\n                numTilesY: num_tiles_y,\n                tileSize: tile_size,\n                imageWidth: initImage.width,\n                imageHeight: initImage.height,\n                tiles,\n            };\n        } finally {\n            canvas.remove();\n        }\n    } else {\n        return null;\n    }\n}\n\n// merge the tiles back into a single image\n// tiles should be 2x original size\nexport function mergeTiles(splitResult: SplitResult): ImageData {\n    // create a new image\n    const canvas = document.createElement(\"canvas\");\n    try {\n        canvas.width = splitResult.imageWidth;\n        canvas.height = splitResult.imageHeight;\n        const ctx = canvas.getContext(\"2d\");\n        if (!ctx) {\n            throw new Error(\"Could not get canvas context\");\n        }\n        for (let x = 0; x < splitResult.numTilesX; x++) {\n            for (let y = 0; y < splitResult.numTilesY; y++) {\n                // load the tile\n                const tile = splitResult.tiles[x][y];\n                const tileCanvas = imageDataToCanvas(tile);\n\n                // paste the tile into the new image\n                ctx.drawImage(\n                    tileCanvas,\n                    x * (splitResult.tileSize - 64),\n                    y * (splitResult.tileSize - 64)\n                );\n            }\n        }\n        return ctx.getImageData(\n            0,\n            0,\n            splitResult.imageWidth,\n            splitResult.imageHeight\n        );\n    } finally {\n        canvas.remove();\n    }\n}\n\nexport function imageDataToCanvas(imageData: ImageData): HTMLCanvasElement {\n    const canvas = document.createElement(\"canvas\");\n    canvas.width = imageData.width;\n    canvas.height = imageData.height;\n    const ctx = canvas.getContext(\"2d\");\n    if (!ctx) {\n        throw new Error(\"Could not get canvas context\");\n    }\n    ctx.putImageData(imageData, 0, 0);\n    return canvas;\n}\n\n// extract resizing logic from above function into a reusable resizeImage function\nexport function resizeImage(\n    image: HTMLCanvasElement,\n    width: number,\n    height: number\n): HTMLCanvasElement {\n    const canvas = document.createElement(\"canvas\");\n    try {\n        canvas.width = width;\n        canvas.height = height;\n        const ctx = canvas.getContext(\"2d\");\n        if (!ctx) {\n            throw new Error(\"Could not get canvas context\");\n        }\n        ctx.drawImage(image, 0, 0, width, height);\n        return canvas;\n    } finally {\n        image.remove();\n    }\n}\n\n// re-implement fixImageSize using resizeImage\nexport function fixImageSize(image: HTMLCanvasElement): HTMLCanvasElement {\n    // if the width and the height are divisible by 64, return the image data\n    // otherwise, resize up to the next multiple of 64\n    const width = Math.ceil(image.width / 64) * 64;\n    const height = Math.ceil(image.height / 64) * 64;\n    if (width == image.width && height == image.height) {\n        return image;\n    }\n    return resizeImage(image, width, height);\n}\n\nexport function featherEdges(\n    selectionOverlay: Rect,\n    imageWidth: number,\n    imageHeight: number,\n    imageData: ImageData,\n    featherWidth?: number\n) {\n    const featherLeftEdge = selectionOverlay.x != 0;\n    const featherRightEdge =\n        selectionOverlay.x + selectionOverlay.width != imageWidth;\n    const featherTopEdge = selectionOverlay.y != 0;\n    const featherBottomEdge =\n        selectionOverlay.y + selectionOverlay.height != imageHeight;\n\n    const baseWidth = Math.min(selectionOverlay.width, selectionOverlay.height);\n    if (!featherWidth) {\n        featherWidth = Math.floor(baseWidth / 8);\n    }\n\n    if (featherTopEdge) {\n        for (let y = 0; y < featherWidth; y++) {\n            for (let x = 0; x < selectionOverlay.width; x++) {\n                const pixelIndex = (y * selectionOverlay.width + x) * 4;\n                const alpha = (y / featherWidth) * 255;\n                const existingAlpha = imageData.data[pixelIndex + 3];\n                imageData.data[pixelIndex + 3] = Math.min(alpha, existingAlpha);\n            }\n        }\n    }\n    if (featherBottomEdge) {\n        for (\n            let y = selectionOverlay.height - featherWidth;\n            y < selectionOverlay.height;\n            y++\n        ) {\n            for (let x = 0; x < selectionOverlay.width; x++) {\n                const pixelIndex = (y * selectionOverlay.width + x) * 4;\n                const alpha =\n                    ((selectionOverlay.height - y) / featherWidth) * 255;\n                const existingAlpha = imageData.data[pixelIndex + 3];\n                imageData.data[pixelIndex + 3] = Math.min(alpha, existingAlpha);\n            }\n        }\n    }\n    if (featherLeftEdge) {\n        for (let x = 0; x < featherWidth; x++) {\n            for (let y = 0; y < selectionOverlay.height; y++) {\n                const pixelIndex = (y * selectionOverlay.width + x) * 4;\n                const alpha = (x / featherWidth) * 255;\n                const existingAlpha = imageData.data[pixelIndex + 3];\n                imageData.data[pixelIndex + 3] = Math.min(alpha, existingAlpha);\n            }\n        }\n    }\n    if (featherRightEdge) {\n        for (\n            let x = selectionOverlay.width - featherWidth;\n            x < selectionOverlay.width;\n            x++\n        ) {\n            for (let y = 0; y < selectionOverlay.height; y++) {\n                const pixelIndex = (y * selectionOverlay.width + x) * 4;\n                const alpha =\n                    ((selectionOverlay.width - x) / featherWidth) * 255;\n                const existingAlpha = imageData.data[pixelIndex + 3];\n                imageData.data[pixelIndex + 3] = Math.min(alpha, existingAlpha);\n            }\n        }\n    }\n}\n\nexport function applyAlphaMask(imageData: ImageData, alphaMask: ImageData) {\n    if (\n        imageData.width != alphaMask.width ||\n        imageData.height != alphaMask.height\n    ) {\n        throw new Error(\"imageData and alphaMask are not the same size\");\n    }\n    const spread = 10;\n    for (let x = 0; x < imageData.width; x++) {\n        for (let y = 0; y < imageData.height; y++) {\n            // r, g, b, a\n            // if transparency within 10 pixels, set alpha to 1, otherwise to zero.\n            // binary alpha inversion with spread\n            let alpha = false;\n            for (\n                let x2 = Math.max(0, x - spread);\n                x2 < Math.min(imageData.width, x + spread);\n                x2++\n            ) {\n                for (\n                    let y2 = Math.max(0, y - spread);\n                    y2 < Math.min(imageData.height, y + spread);\n                    y2++\n                ) {\n                    const alphaValue =\n                        alphaMask.data[y2 * alphaMask.width * 4 + x2 * 4 + 3];\n                    if (alphaValue < 255) {\n                        alpha = true;\n                    }\n                }\n            }\n            const alphaIndex = y * imageData.width * 4 + x * 4 + 3;\n            if (alpha) {\n                imageData.data[alphaIndex] = 255;\n            } else {\n                imageData.data[alphaIndex] = 0;\n            }\n        }\n    }\n}\n\nexport function createBlankImage(\n    color: string,\n    width: number,\n    height: number\n): string {\n    const canvas = document.createElement(\"canvas\");\n    try {\n        canvas.width = width;\n        canvas.height = height;\n        const context = canvas.getContext(\"2d\")!;\n        context.fillStyle = color;\n        context.fillRect(0, 0, width, height);\n        return canvas.toDataURL().split(\",\")[1];\n    } finally {\n        canvas.remove();\n    }\n}\n\nexport interface ImageWorkerRequest {\n    id: string;\n    feather: boolean;\n    upscale?: boolean;\n    alphaMode: \"none\" | \"mask\" | \"alpha\";\n    pixels: Uint8ClampedArray;\n    alphaPixels?: Uint8ClampedArray;\n    width: number;\n    height: number;\n    featherWidth?: number;\n    selectionOverlay: Rect;\n}\n\nexport interface ImageWorkerResponse {\n    id: string;\n    pixels: Uint8ClampedArray;\n}\n\nexport class ImageUtilWorker {\n    private workers: Array<Worker> = [];\n    private callbacks: { [key: string]: (event: MessageEvent) => void } = {};\n    private cursor = 0;\n\n    constructor(numWorkers = 3) {\n        for (let i = 0; i < numWorkers; i++) {\n            this.workers[i] = new Worker(\n                `${process.env.PUBLIC_URL}/workers/imageutil.js`\n            );\n            this.workers[i].addEventListener(\n                \"message\",\n                this.onMessage.bind(this)\n            );\n        }\n    }\n\n    onMessage(event: MessageEvent) {\n        const resp = event.data as ImageWorkerResponse;\n        this.callbacks[resp.id](event);\n        delete this.callbacks[resp.id];\n    }\n\n    async processRequest(\n        request: ImageWorkerRequest\n    ): Promise<ImageWorkerResponse> {\n        return new Promise((resolve, reject) => {\n            this.callbacks[request.id] = (event) => {\n                resolve(event.data);\n            };\n            this.workers[this.cursor].postMessage({\n                ...request,\n            });\n            this.cursor = (this.cursor + 1) % this.workers.length;\n        });\n    }\n\n    destroy() {\n        for (let key in this.workers) {\n            this.workers[key].terminate();\n        }\n    }\n}\n\nexport function createEncodedThumbnail(encodedImage: string): Promise<string> {\n    return new Promise((resolve, reject) => {\n        // use html5 canvas\n        // crop to square aspect ratio on 128x128 canvas\n        const canvas = document.createElement(\"canvas\");\n        const thumbSize = 128;\n        canvas.width = thumbSize;\n        canvas.height = thumbSize;\n\n        const image = new Image();\n        image.src = `data:image/png;base64,${encodedImage}`;\n        image.onload = () => {\n            const context = canvas.getContext(\"2d\");\n            if (!context) {\n                reject(new Error(\"Could not create canvas context\"));\n                return;\n            }\n\n            let cropX, cropY, cropDimension;\n            if (image.width > image.height) {\n                cropDimension = image.height;\n                cropX = (image.width - image.height) / 2;\n                cropY = 0;\n            } else {\n                cropDimension = image.width;\n                cropX = 0;\n                cropY = (image.height - image.width) / 2;\n            }\n\n            // Draw the image onto the canvas\n            context.drawImage(\n                image,           // Source image\n                cropX,           // Source x\n                cropY,           // Source y\n                cropDimension,   // Source width\n                cropDimension,   // Source height\n                0,               // Destination x\n                0,               // Destination y\n                thumbSize,       // Destination width\n                thumbSize        // Destination height\n            );\n\n            // Save to png\n            const imageUrl = canvas.toDataURL(\"image/png\");\n            const base64 = imageUrl.split(\",\")[1];\n            resolve(base64);\n        };\n\n        image.onerror = (error) => {\n            reject(error);\n        };\n    });\n}\n\n\nexport function decodeImage(encodedImage: string): Promise<HTMLImageElement> {\n    return new Promise((resolve, reject) => {\n        const image = new Image();\n        if (!encodedImage.startsWith(\"data:image\")) {\n            encodedImage = `data:image/png;base64,${encodedImage}`;\n        }\n        image.src = encodedImage;\n        image.onload = () => {\n            resolve(image);\n        };\n    });\n}\n\nexport function binaryImageToDataBase64(binaryImage: any): string {\n    const buf = Buffer.from(binaryImage, \"binary\");\n    return buf.toString(\"base64\");\n}\n\nexport function resizeEncodedImage(\n    encodedImage: string,\n    width: number,\n    height: number,\n    format: \"png\" | \"jpeg\"\n): Promise<string> {\n    return new Promise((resolve, reject) => {\n        // use html5 canvas\n        // crop to square aspect ratio on 128x128 canvas\n        const canvas = document.createElement(\"canvas\");\n        canvas.width = width;\n        canvas.height = height;\n\n        const image = new Image();\n        image.src = `data:image/${format};base64,${encodedImage}`;\n        image.onload = () => {\n            const context = canvas.getContext(\"2d\");\n            if (!context) {\n                throw new Error(\"Could not create canvas context\");\n            }\n            canvas.width = width;\n            canvas.height = height;\n\n            context.drawImage(\n                image,\n                0,\n                0,\n                image.width,\n                image.height,\n                0,\n                0,\n                width,\n                height\n            );\n\n            // save to png\n            const imageUrl = canvas.toDataURL(\"image/${format}\");\n            const base64 = imageUrl.split(\",\")[1];\n            resolve(base64);\n        };\n    });\n}\n\nexport function encodedImageToBlob(encodedImage: string): Blob {\n    const binaryString = atob(encodedImage);\n    const arr = [];\n    for (let i = 0; i < binaryString.length; i++) {\n        arr.push(binaryString.charCodeAt(i));\n    }\n    return new Blob([new Uint8Array(arr)], {\n        type: \"image/png\",\n    });\n}\n\n// This function is made to work with S3 presigned urls.\n// Solution found at https://stackoverflow.com/questions/22531114/how-to-upload-to-aws-s3-directly-from-browser-using-a-pre-signed-url-instead-of\nexport function uploadBlob(signedUrl: string, blob: Blob): Promise<void> {\n    return new Promise((resolve, reject) => {\n        var xhr = new XMLHttpRequest();\n        xhr.open(\"PUT\", signedUrl, true);\n        xhr.setRequestHeader(\"Content-Type\", \"image/png\");\n        xhr.onload = () => {\n            if (xhr.status < 400) {\n                // success!\n                resolve();\n            }\n        };\n        xhr.onerror = (err) => {\n            // error...\n            reject(err);\n        };\n        xhr.send(blob); // `file` is a File object here\n    });\n}\n","import React, { FC, useState, useEffect } from \"react\";\nimport loadImage from \"blueimp-load-image\";\nimport saveAs from \"file-saver\";\nimport axios from \"axios\";\nimport * as uuid from \"uuid\";\n\nimport { sleep } from \"../../lib/sleep\";\n\nimport {\n    StatusEnum,\n} from \"../../client\";\nimport { Renderer } from \"./renderer\";\nimport { BaseTool, Tool } from \"./tool\";\nimport {\n    ImageUtilWorker,\n    imageDataToCanvas,\n    fixImageSize,\n    decodeImage,\n} from \"../../lib/imageutil\";\nimport { ErrorNotification } from \"../../components/Alerts\";\nimport moment from \"moment\";\nimport { calculateImagesCost } from \"../../lib/credits\";\nimport { CostIndicator } from \"../../components/CostIndicator\";\nimport { LocalImage } from \"../../lib/models\";\nimport { HordeGenerator } from \"../../lib/hordegenerator\";\n\nexport const anonymousClient = axios.create();\n\ninterface Props {\n    renderer: Renderer;\n    tool: BaseTool;\n    generator: HordeGenerator;\n    image: LocalImage;\n}\n\nexport const AugmentControls: FC<Props> = ({ renderer, tool, generator, image }) => {\n    const [backupImage, setBackupImage] = useState<string | undefined>();\n    const [activeAugmentation, setActiveAugmentation] = useState<\n        \"upscale\" | \"face_restore\" | null\n    >(null);\n    const [imageWorker, setImageWorker] = useState<\n        ImageUtilWorker | undefined\n    >();\n    const [error, setError] = useState<string | null>(null);\n    const [lastError, setLastError] = useState<number>(0);\n\n    useEffect(() => {\n        const imageWorker = new ImageUtilWorker();\n        setImageWorker(imageWorker);\n        return () => {\n            imageWorker.destroy();\n        };\n    }, []);\n\n    const augmentImageData = async (\n        imageData: ImageData,\n        augmentation: \"upscale\" | \"face_restore\"\n    ): Promise<ImageData> => {\n        if (!imageWorker) {\n            throw new Error(\"Image worker not initialized\");\n        }\n        let c = imageDataToCanvas(imageData);\n        let encodedImage = c.toDataURL(\"image/png\").split(\",\")[1];\n        c.remove();\n\n        // TODO: use progress indicator\n        const start = moment().valueOf();\n        let processingImage = await generator.augmentImage({\n            augmentation: augmentation,\n            image: {\n                imageData: encodedImage,\n            }\n        });\n        while (processingImage.status !== StatusEnum.Completed) {\n            await sleep(2000);\n            processingImage = await generator.checkAugmentation(processingImage);\n            if (processingImage.status === StatusEnum.Error) {\n                throw new Error(\"Augmentation failed\");\n            }\n            if (moment().valueOf() - start > 60000) {\n                await generator.client.deleteInterrogationRequest(processingImage.id);\n                throw new Error(\"Augmentation timed out\");\n            }\n        }\n        encodedImage = processingImage.imageData!;\n        const img = await decodeImage(encodedImage);\n        c = document.createElement(\"canvas\");\n        const upscaleFactor = augmentation === \"upscale\" ? 2 : 1;\n        c.width = imageData.width * upscaleFactor;\n        c.height = imageData.height * upscaleFactor;\n        const ctx = c.getContext(\"2d\")!;\n        ctx.drawImage(img, 0, 0, c.width, c.height);\n        const newImageData = ctx.getImageData(0, 0, c.width, c.height);\n        c.remove();\n        return newImageData;\n    };\n\n    const onAugment = async (augmentation: \"upscale\" | \"face_restore\") => {\n        setActiveAugmentation(augmentation);\n        setError(null);\n        try {\n            const backupImage = renderer.getEncodedImage(null);\n            setBackupImage(backupImage);\n            let imageData = renderer.getImageData(null);\n            if (!imageData) {\n                return;\n            }\n            // ensure width and height are multiples of 64\n            if ((imageData.width % 64) + (imageData.height % 64) !== 0) {\n                const c = fixImageSize(imageDataToCanvas(imageData));\n                imageData = c\n                    .getContext(\"2d\")!\n                    .getImageData(0, 0, c.width, c.height);\n            }\n\n            const newImageData = await augmentImageData(\n                imageData,\n                augmentation\n            );\n            const newCanvas = imageDataToCanvas(newImageData);\n            renderer.setBaseImage(newCanvas);\n            newCanvas.remove();\n        } catch (err: any) {\n            setError(err.message || \"Augmentation failed\");\n            setLastError(moment().valueOf());\n        } finally {\n            setActiveAugmentation(null);\n        }\n    };\n\n    if (activeAugmentation) {\n        return (\n            <div className=\"form-group\" style={{ marginTop: \"16px\" }}>\n                <i className=\"fas fa-spinner fa-spin\"></i>&nbsp;{\" \"}\n                {activeAugmentation === \"upscale\"\n                    ? \"Upscaling...\"\n                    : \"Restoring faces...\"}\n            </div>\n        );\n    }\n\n    if (backupImage) {\n        return (\n            <div className=\"form-group\" style={{ marginTop: \"16px\" }}>\n                <ErrorNotification message={error} timestamp={lastError} />\n                <button\n                    className=\"btn btn-primary\"\n                    onClick={() => {\n                        setBackupImage(undefined);\n                        const img = new Image();\n                        // set src as data uri\n                        const src = \"data:image/png;base64,\" + backupImage;\n                        img.src = src;\n                        img.onload = () => {\n                            renderer.setBaseImage(img);\n                        };\n                    }}\n                >\n                    {/* cancel icon */}\n                    <i className=\"fas fa-times\"></i>&nbsp; Revert\n                </button>\n                <button\n                    className=\"btn btn-primary\"\n                    onClick={() => {\n                        setBackupImage(undefined);\n                        if (tool.saveListener) {\n                            const encodedImage = renderer.getEncodedImage(null);\n                            if (encodedImage) {\n                                tool.saveListener(encodedImage);\n                            }\n                        }\n                    }}\n                    style={{ marginLeft: \"8px\" }}\n                >\n                    {/* save icon */}\n                    <i className=\"fas fa-save\"></i>&nbsp; Save\n                </button>\n            </div>\n        );\n    }\n\n    const maxSize = 2048 * 2048;\n    if (renderer.getWidth() * renderer.getHeight() > maxSize) {\n        return (\n            <div style={{ marginTop: \"16px\" }}>\n                This image is too large to augment.\n            </div>\n        );\n    }\n\n    const cost = calculateImagesCost(1, image.params.width!, image.params.height!);\n\n    // Show buttons for import and export and \"save a copy\"\n    return (\n        <>\n            <ErrorNotification message={error} timestamp={lastError} />\n            <div className=\"form-group\" style={{ marginTop: \"16px\" }}>\n                <button\n                    className=\"btn btn-primary\"\n                    onClick={() => {\n                        onAugment(\"upscale\");\n                    }}\n                    style={{ marginLeft: \"8px\" }}\n                >\n                    {/* upscale icon */}\n                    <i className=\"fas fa-arrows-alt\"></i>&nbsp; Upscale Image 2x\n                </button>\n            </div>\n            <div className=\"form-group\" style={{ marginTop: \"16px\" }}>\n                <button\n                    className=\"btn btn-primary\"\n                    onClick={() => {\n                        onAugment(\"face_restore\");\n                    }}\n                    style={{ marginLeft: \"8px\" }}\n                >\n                    {/* face restore icon */}\n                    <i className=\"fas fa-smile\"></i>&nbsp; Restore Faces\n                </button>\n            </div>\n            <div className=\"form-group\" style={{ marginTop: \"16px\" }}>\n                <CostIndicator imagesCost={cost} />\n            </div>\n        </>\n    );\n};\n","import React, { FC, useEffect, useState } from \"react\";\n\ninterface Props {\n    pendingCount: number;\n    processingCount: number;\n    onClick?: () => void;\n}\n\nexport const PendingJobsThumbnail: FC<Props> = ({\n    pendingCount,\n    processingCount,\n    onClick,\n}) => {\n    const [hover, setHover] = useState(false);\n\n    // on mouse in/out, set hover state\n    const onMouseEnter = () => setHover(true);\n    const onMouseLeave = () => setHover(false);\n    let icon = (\n        <i style={{ marginTop: \"20px\" }} className=\"fa fa-hourglass-half\"></i>\n    );\n\n    if (processingCount > 0) {\n        icon = (\n            <i style={{ marginTop: \"20px\" }} className=\"fa fa-cog fa-spin\"></i>\n        );\n    }\n\n    return (\n        <div\n            onMouseEnter={onMouseEnter}\n            onMouseLeave={onMouseLeave}\n            style={{\n                backgroundImage: `url(/images/default.png)`,\n                backgroundSize: \"contain\",\n                width: \"128px\",\n                height: \"128px\",\n                margin: \"8px\",\n                float: \"left\",\n                cursor: \"pointer\",\n            }}\n            onClick={onClick}\n        >\n            {hover && (\n                <div\n                    style={{\n                        background: \"rgba(255, 255, 255, 0.5)\",\n                        color: \"black\",\n                        width: \"100%\",\n                        height: \"100%\",\n                        lineHeight: \"1\",\n                        fontSize: \"20px\",\n                    }}\n                >\n                    <br/>\n                    {pendingCount > 0 && (\n                        <div style={{ marginBottom: \"24px\" }}>\n                            {pendingCount} pending\n                        </div>\n                    )}\n                    {processingCount > 0 && (\n                        <div>{processingCount} processing</div>\n                    )}\n                </div>\n            )}\n            {!hover && (\n                <div\n                    style={{\n                        background: \"rgba(255, 255, 255, 0.3)\",\n                        color: \"#555\",\n                        width: \"100%\",\n                        height: \"100%\",\n                        fontSize: \"80px\",\n                    }}\n                >\n                    {icon}\n                </div>\n            )}\n        </div>\n    );\n};\n","import React, {FC, useEffect, useState} from \"react\";\nimport { Modal } from \"react-bootstrap\";\nimport { GenerationJob } from \"../lib/models\";\n\n// TODO: refactor to generation job\ninterface Props {\n    jobs: GenerationJob[];\n    onDeleteJob: (job: GenerationJob) => void;\n    onCancel: () => void;\n    show: boolean;\n}\n\nexport const PendingJobs: FC<Props> = ({\n    jobs,\n    onDeleteJob,\n    onCancel,\n    show,\n}) => {\n\n    function imageIcon(job: GenerationJob) {\n        if (job.status === \"pending\") {\n            return <i className=\"fa fa-hourglass-half\"></i>;\n        } else if (job.status === \"processing\") {\n            return <i className=\"fa fa-cog fa-spin\"></i>;\n        }\n    }\n\n    const truncate = (phrases: string) => {\n        if (phrases.length > 35) {\n            return phrases.substring(0, 35) + \"...\";\n        }\n        return phrases;\n    }\n\n    // refactor from table to div layout\n    const pendingDiv = (\n        <div>\n            <div style={{marginBottom: \"8px\"}}>\n                <div style={{display: \"inline-block\", width: \"100px\"}}>\n                    Status\n                </div>\n                <div style={{display: \"inline-block\", width: \"200px\"}}>\n                    Prompt\n                </div>\n                <div style={{display: \"inline-block\", width: \"50px\"}}>\n                    Count\n                </div>\n                <div style={{display: \"inline-block\", width: \"100px\"}}>\n                    Action\n                </div>\n            </div>\n            {jobs.map((job) => (\n                <div key={job.id} style={{marginBottom: \"8px\"}}>\n                    <div style={{display: \"inline-block\", width: \"100px\"}}>\n                        {imageIcon(job)}&nbsp;{job.status}\n                    </div>\n                    <div style={{display: \"inline-block\", width: \"200px\"}}>\n                        {/* if more than 30 chars, truncate with ellipsis*/}\n                        {truncate(job.params.prompt || \"\")}\n                    </div>\n                    <div style={{display: \"inline-block\", width: \"50px\"}}>\n                        {job.count}\n                    </div>\n                    <div style={{display: \"inline-block\", width: \"100px\"}}>\n                        <button\n                            className=\"btn btn-danger btn-sm image-popup-delete-button\"\n                            onClick={() => onDeleteJob(job)}\n                        >\n                            <i className=\"fa fa-trash\"></i>&nbsp;Delete\n                        </button>\n                    </div>\n                </div>\n            ))}\n        </div>\n    );\n\n    return (\n        <Modal show={show} onHide={onCancel}>\n            <Modal.Header closeButton>\n                <Modal.Title>Pending Jobs</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                {pendingDiv}\n            </Modal.Body>\n            <Modal.Footer>\n                <button className=\"btn btn-secondary\" onClick={onCancel}>\n                    Close\n                </button>\n            </Modal.Footer>\n        </Modal>\n    );\n};","import React from \"react\";\nimport { Modal, Button } from \"react-bootstrap\";\nimport { Link, useHistory } from \"react-router-dom\";\n\ninterface OutOfCreditsModalProps {\n    show: boolean;\n    onHide: () => void;\n}\n\nconst OutOfCreditsModal: React.FC<OutOfCreditsModalProps> = ({\n    show,\n    onHide,\n}) => {\n    const history = useHistory();\n\n    const redirectToPricing = () => {\n        onHide();\n        history.push(\"/pricing\");\n    };\n\n    return (\n        <Modal show={show} onHide={onHide} centered>\n            <Modal.Header closeButton>\n                <Modal.Title>Out of Credits</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                Oops! It looks like you've run out of credits for today. But\n                don't worry, you'll receive 100 free credits tomorrow to\n                continue creating amazing images. Can't wait? Check out our\n                affordable <Link to=\"/pricing\">pricing options</Link> to get instant access to more credits\n                and unleash your creativity without limits!\n            </Modal.Body>\n            <Modal.Footer>\n                <Button variant=\"secondary\" onClick={onHide}>\n                    Close\n                </Button>\n                <Button variant=\"primary\" onClick={redirectToPricing}>\n                    Visit Pricing Page\n                </Button>\n            </Modal.Footer>\n        </Modal>\n    );\n};\n\nexport default OutOfCreditsModal;\n","import React, { useEffect, useState } from \"react\";\nimport { Modal, Button } from \"react-bootstrap\";\nimport { useHistory } from \"react-router-dom\";\n\ninterface PaymentStatusModalProps {\n    paymentStatus?: \"success\" | \"canceled\";\n}\n\nconst PaymentStatusModal: React.FC<PaymentStatusModalProps> = ({\n    paymentStatus,\n}) => {\n    const [show, setShow] = useState(false);\n    const history = useHistory();\n\n    useEffect(() => {\n        if (paymentStatus) {\n            setShow(true);\n        }\n    }, [paymentStatus]);\n\n    const handleClose = () => {\n        setShow(false);\n        history.push(\"/\");\n    };\n\n    return (\n        <Modal show={show} onHide={handleClose}>\n            <Modal.Header closeButton>\n                <Modal.Title>Payment Status</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                {paymentStatus === \"success\"\n                    ? \"Payment succeeded!\"\n                    : \"Payment canceled.\"}\n            </Modal.Body>\n            <Modal.Footer>\n                <Button variant=\"secondary\" onClick={handleClose}>\n                    Close\n                </Button>\n            </Modal.Footer>\n        </Modal>\n    );\n};\n\nexport default PaymentStatusModal;\n","import axios from \"axios\";\nimport moment from \"moment\";\nimport { CheckResult, GenerationResult, StatusEnum } from \"./models\";\n\nconst baseUrl = \"https://stablehorde.net/api\";\n\nexport interface RequestStatusCheck {\n    /** The amount of finished jobs in this request. */\n    finished: number;\n    processing: number;\n    waiting: number;\n    restarted: number;\n    done: boolean;\n    faulted: boolean;\n    wait_time: number;\n    queue_position: number;\n    kudos: number;\n    is_possible: boolean;\n}\n\nexport interface HordeRequestPayload {\n    params: {\n        n: number;\n        width: number;\n        height: number;\n        steps: number;\n        sampler_name: string;\n        cfg_scale: number;\n        denoising_strength: number;\n        karras: boolean;\n        hires_fix: boolean;\n        post_processing: string[];\n        control_type?: string;\n        seed?: string;\n        loras?: HordeLoraConfig[];\n    };\n    prompt: string;\n    api_key?: string;\n    nsfw: boolean;\n    censor_nsfw: boolean;\n    trusted_workers: boolean;\n    slow_workers: boolean;\n    r2: boolean;\n    models: string[];\n    source_processing: string;\n    source_image?: string;\n    source_mask?: string;\n    workers?: string[];\n}\n\nexport interface HordeLoraConfig {\n    name: string;\n    model: number;\n    clip: number;\n    inject_trigger?: string;\n}\n\nexport interface AlchemistForm {\n    name: string;\n}\n\nexport interface AlchemistPayload {\n    source_image: string;\n    forms: AlchemistForm[];\n    slow_workers: boolean;\n    trusted_workers: boolean;\n}\n\nexport class HordeClient {\n    constructor(private apiKey: string) {}\n\n    updateApiKey(apiKey: string) {\n        this.apiKey = apiKey;\n    }\n\n    // TODO: pass in onProgress callback\n    // onUploadProgress: (progressEvent: any) => {\n    //     const percentCompleted =\n    //         progressEvent.loaded / progressEvent.total;\n    //     setUploadingProgress(percentCompleted);\n    // },\n\n    async initiateImageGeneration(\n        payload: HordeRequestPayload,\n        onUploadProgress?: (progressEvent: any) => void,\n    ): Promise<string | null> {\n        payload.api_key = this.apiKey;\n        const submitReq = await axios.post(\n            `${baseUrl}/v2/generate/async`,\n            payload,\n            {\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                    apiKey: this.apiKey,\n                },\n                onUploadProgress,\n            }\n        );\n        const submitResults = submitReq.data;\n        const reqId = submitResults.id;\n\n        return reqId;\n    }\n\n    async checkImageJob(reqId: string): Promise<CheckResult> {\n        const chkReq = await axios.get(\n            `${baseUrl}/v2/generate/check/${reqId}`,\n            {\n                headers: {\n                    apiKey: this.apiKey,\n                },\n            }\n        );\n        const chkResults = (await chkReq.data) as RequestStatusCheck;\n        console.log(JSON.stringify(chkResults));\n        const total = chkResults.waiting + chkResults.processing + chkResults.restarted + chkResults.finished;\n        let status: string;\n        if (chkResults.processing > 0) {\n            status = \"processing\";\n        } else if (chkResults.done) {\n            status = \"completed\";\n        } else {\n            status = \"pending\";\n        }\n        \n        const progress = chkResults.finished / total;\n        return {\n            status: status as StatusEnum,\n            progress,\n        };\n    }\n\n    // TODO: optimization - optional NSFW check\n    async fetchImageResults(reqId: string): Promise<GenerationResult[]> {\n        const retrieveReq = await axios.get(\n            `${baseUrl}/v2/generate/status/${reqId}`,\n            {\n                headers: {\n                    apiKey: this.apiKey,\n                },\n            }\n        );\n        const resultsJson = await retrieveReq.data;\n        if (resultsJson.faulted) {\n            throw new Error(\"Something went wrong when generating the request\");\n        }\n        const promises: Promise<GenerationResult>[] =\n            resultsJson.generations.map(async (result: any) => {\n                if (result.censored) {\n                    return {\n                        censored: true,\n                    };\n                }\n                const webpImageResponse = await axios.get(result.img, {\n                    responseType: \"arraybuffer\",\n                });\n                return {\n                    imageData: Buffer.from(webpImageResponse.data),\n                    censored: false,\n                    seed: result.seed,\n                };\n            });\n        return Promise.all(promises);\n    }\n\n    async deleteImageRequest(reqId: string): Promise<void> {\n        await axios.delete(`${baseUrl}/v2/generate/status/${reqId}`, {\n            headers: {\n                apiKey: this.apiKey,\n            },\n        });\n        console.log(`Request with ID: ${reqId} has been deleted.`);\n    }\n\n    async initiateAlchemistImageInterrogation(\n        payload: AlchemistPayload\n    ): Promise<string> {\n        const submitReq = await axios.post(\n            `${baseUrl}/v2/interrogate/async`,\n            payload,\n            {\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                    apiKey: this.apiKey,\n                },\n            }\n        );\n        const submitResults = submitReq.data;\n        const reqId = submitResults.id;\n\n        return reqId;\n    }\n\n    async checkInterrogationStatus(reqId: string): Promise<string> {\n        const retrieveReq = await axios.get(\n            `${baseUrl}/v2/interrogate/status/${reqId}`,\n            {\n                headers: {\n                    apiKey: this.apiKey,\n                },\n            }\n        );\n        const resultsJson = await retrieveReq.data;\n        console.log(JSON.stringify(resultsJson));\n\n        return resultsJson.state;\n    }\n\n    async fetchInterrogationResult(reqId: string): Promise<any> {\n        const retrieveReq = await axios.get(\n            `${baseUrl}/v2/interrogate/status/${reqId}`,\n            {\n                headers: {\n                    apiKey: this.apiKey,\n                },\n            }\n        );\n        const resultsJson = await retrieveReq.data;\n        console.log(\"alchemy results: \" + JSON.stringify(resultsJson));\n        if (resultsJson.forms[0].result.nsfw !== undefined) {\n            return resultsJson.forms[0].result.nsfw;\n        }\n        const webpImageResponse = await axios.get(\n            resultsJson.forms[0].result[resultsJson.forms[0].form],\n            {\n                responseType: \"arraybuffer\",\n            }\n        );\n        return Buffer.from(webpImageResponse.data);\n    }\n\n    async deleteInterrogationRequest(reqId: string): Promise<void> {\n        await axios.delete(`${baseUrl}/v2/interrogate/status/${reqId}`, {\n            headers: {\n                apiKey: this.apiKey,\n            },\n        });\n        console.log(`Request with ID: ${reqId} has been deleted.`);\n    }\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * AIBrush API\n * Orchestration backend for AI Brush\n *\n * The version of the OpenAPI document: 1.0.0\n * Contact: admin@aibrush.art\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport { Configuration } from './configuration';\nimport globalAxios, { AxiosPromise, AxiosInstance } from 'axios';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';\n\n/**\n * \n * @export\n * @interface AddMetricItem\n */\nexport interface AddMetricItem {\n    /**\n     * \n     * @type {string}\n     * @memberof AddMetricItem\n     */\n    name: string;\n    /**\n     * \n     * @type {number}\n     * @memberof AddMetricItem\n     */\n    value: number;\n    /**\n     * \n     * @type {string}\n     * @memberof AddMetricItem\n     */\n    type: AddMetricItemTypeEnum;\n    /**\n     * \n     * @type {Array<MetricAttribute>}\n     * @memberof AddMetricItem\n     */\n    attributes: Array<MetricAttribute>;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum AddMetricItemTypeEnum {\n    Gauge = 'gauge',\n    Count = 'count'\n}\n\n/**\n * \n * @export\n * @interface AddMetricsInput\n */\nexport interface AddMetricsInput {\n    /**\n     * \n     * @type {Array<AddMetricItem>}\n     * @memberof AddMetricsInput\n     */\n    metrics: Array<AddMetricItem>;\n}\n/**\n * \n * @export\n * @interface AssetsUrl\n */\nexport interface AssetsUrl {\n    /**\n     * \n     * @type {string}\n     * @memberof AssetsUrl\n     */\n    assets_url: string;\n}\n/**\n * \n * @export\n * @interface BatchGetImagesInput\n */\nexport interface BatchGetImagesInput {\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof BatchGetImagesInput\n     */\n    ids: Array<string>;\n}\n/**\n * \n * @export\n * @interface CreateDepositCodeInput\n */\nexport interface CreateDepositCodeInput {\n    /**\n     * \n     * @type {number}\n     * @memberof CreateDepositCodeInput\n     */\n    amount: number;\n}\n/**\n * \n * @export\n * @interface CreateImageInput\n */\nexport interface CreateImageInput {\n    /**\n     * \n     * @type {StatusEnum}\n     * @memberof CreateImageInput\n     */\n    status?: StatusEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateImageInput\n     */\n    label?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateImageInput\n     */\n    parent?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateImageInput\n     */\n    encoded_image?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateImageInput\n     */\n    encoded_mask?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateImageInput\n     */\n    tmp_image_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateImageInput\n     */\n    tmp_jpg_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateImageInput\n     */\n    tmp_mask_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateImageInput\n     */\n    tmp_thumbnail_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateImageInput\n     */\n    model: string;\n    /**\n     * \n     * @type {ImageParams}\n     * @memberof CreateImageInput\n     */\n    params: ImageParams;\n    /**\n     * \n     * @type {number}\n     * @memberof CreateImageInput\n     */\n    count: number;\n    /**\n     * \n     * @type {boolean}\n     * @memberof CreateImageInput\n     */\n    nsfw?: boolean;\n    /**\n     * \n     * @type {boolean}\n     * @memberof CreateImageInput\n     */\n    temporary?: boolean;\n}\n/**\n * \n * @export\n * @interface CreateStripeSessionInput\n */\nexport interface CreateStripeSessionInput {\n    /**\n     * \n     * @type {string}\n     * @memberof CreateStripeSessionInput\n     */\n    product_id: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateStripeSessionInput\n     */\n    success_url: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateStripeSessionInput\n     */\n    cancel_url: string;\n}\n/**\n * \n * @export\n * @interface Credits\n */\nexport interface Credits {\n    /**\n     * \n     * @type {number}\n     * @memberof Credits\n     */\n    free_credits: number;\n    /**\n     * \n     * @type {number}\n     * @memberof Credits\n     */\n    paid_credits: number;\n}\n/**\n * \n * @export\n * @interface DepositCode\n */\nexport interface DepositCode {\n    /**\n     * \n     * @type {string}\n     * @memberof DepositCode\n     */\n    code: string;\n    /**\n     * \n     * @type {number}\n     * @memberof DepositCode\n     */\n    amount: number;\n}\n/**\n * \n * @export\n * @interface DepositRequest\n */\nexport interface DepositRequest {\n    /**\n     * Amount in credits\n     * @type {number}\n     * @memberof DepositRequest\n     */\n    amount: number;\n}\n/**\n * \n * @export\n * @interface DiscordLogin\n */\nexport interface DiscordLogin {\n    /**\n     * \n     * @type {string}\n     * @memberof DiscordLogin\n     */\n    code: string;\n}\n/**\n * \n * @export\n * @interface FeatureList\n */\nexport interface FeatureList {\n    /**\n     * \n     * @type {string}\n     * @memberof FeatureList\n     */\n    terms_uri?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof FeatureList\n     */\n    privacy_uri?: string;\n}\n/**\n * \n * @export\n * @interface GlobalSettings\n */\nexport interface GlobalSettings {\n    /**\n     * \n     * @type {string}\n     * @memberof GlobalSettings\n     */\n    settings_key: string;\n    /**\n     * \n     * @type {object}\n     * @memberof GlobalSettings\n     */\n    settings_json: object;\n}\n/**\n * \n * @export\n * @interface Healthcheck\n */\nexport interface Healthcheck {\n    /**\n     * \n     * @type {string}\n     * @memberof Healthcheck\n     */\n    status?: HealthcheckStatusEnum;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum HealthcheckStatusEnum {\n    Ok = 'ok'\n}\n\n/**\n * \n * @export\n * @interface Image\n */\nexport interface Image {\n    /**\n     * \n     * @type {string}\n     * @memberof Image\n     */\n    id: string;\n    /**\n     * \n     * @type {number}\n     * @memberof Image\n     */\n    created_at: number;\n    /**\n     * \n     * @type {string}\n     * @memberof Image\n     */\n    created_by: string;\n    /**\n     * \n     * @type {number}\n     * @memberof Image\n     */\n    updated_at: number;\n    /**\n     * \n     * @type {ImageParams}\n     * @memberof Image\n     */\n    params: ImageParams;\n    /**\n     * \n     * @type {string}\n     * @memberof Image\n     */\n    label: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Image\n     */\n    parent: string;\n    /**\n     * \n     * @type {number}\n     * @memberof Image\n     */\n    score: number;\n    /**\n     * \n     * @type {number}\n     * @memberof Image\n     */\n    negative_score: number;\n    /**\n     * \n     * @type {StatusEnum}\n     * @memberof Image\n     */\n    status: StatusEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof Image\n     */\n    model: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof Image\n     */\n    nsfw: boolean;\n    /**\n     * \n     * @type {boolean}\n     * @memberof Image\n     */\n    temporary: boolean;\n    /**\n     * \n     * @type {number}\n     * @memberof Image\n     */\n    deleted_at?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof Image\n     */\n    error?: string;\n}\n/**\n * \n * @export\n * @interface ImageList\n */\nexport interface ImageList {\n    /**\n     * \n     * @type {Array<Image>}\n     * @memberof ImageList\n     */\n    images?: Array<Image>;\n}\n/**\n * \n * @export\n * @interface ImageParams\n */\nexport interface ImageParams {\n    /**\n     * \n     * @type {string}\n     * @memberof ImageParams\n     */\n    prompt?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof ImageParams\n     */\n    steps?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof ImageParams\n     */\n    negative_prompt?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof ImageParams\n     */\n    width?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof ImageParams\n     */\n    height?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof ImageParams\n     */\n    denoising_strength?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof ImageParams\n     */\n    cfg_scale?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof ImageParams\n     */\n    seed?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ImageParams\n     */\n    controlnet_type?: ImageParamsControlnetTypeEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof ImageParams\n     */\n    augmentation?: ImageParamsAugmentationEnum;\n    /**\n     * \n     * @type {Array<LoraConfig>}\n     * @memberof ImageParams\n     */\n    loras?: Array<LoraConfig>;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum ImageParamsControlnetTypeEnum {\n    Canny = 'canny',\n    Hed = 'hed',\n    Depth = 'depth',\n    Normal = 'normal',\n    Openpose = 'openpose',\n    Seg = 'seg',\n    Scribble = 'scribble',\n    Fakescribbles = 'fakescribbles',\n    Hough = 'hough'\n}\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum ImageParamsAugmentationEnum {\n    FaceRestore = 'face_restore',\n    RemoveBackground = 'remove_background',\n    Upscale = 'upscale'\n}\n\n/**\n * \n * @export\n * @interface ImageUrls\n */\nexport interface ImageUrls {\n    /**\n     * \n     * @type {string}\n     * @memberof ImageUrls\n     */\n    init_image_url?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ImageUrls\n     */\n    image_url?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ImageUrls\n     */\n    mask_url?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ImageUrls\n     */\n    thumbnail_url?: string;\n}\n/**\n * \n * @export\n * @interface InviteCode\n */\nexport interface InviteCode {\n    /**\n     * \n     * @type {string}\n     * @memberof InviteCode\n     */\n    id?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof InviteCode\n     */\n    created_at?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof InviteCode\n     */\n    created_by?: string;\n}\n/**\n * \n * @export\n * @interface IsAdminResponse\n */\nexport interface IsAdminResponse {\n    /**\n     * \n     * @type {boolean}\n     * @memberof IsAdminResponse\n     */\n    is_admin?: boolean;\n}\n/**\n * \n * @export\n * @interface LoginInput\n */\nexport interface LoginInput {\n    /**\n     * \n     * @type {string}\n     * @memberof LoginInput\n     */\n    email?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof LoginInput\n     */\n    invite_code?: string;\n}\n/**\n * \n * @export\n * @interface LoginResult\n */\nexport interface LoginResult {\n    /**\n     * \n     * @type {string}\n     * @memberof LoginResult\n     */\n    accessToken?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof LoginResult\n     */\n    refreshToken?: string;\n}\n/**\n * \n * @export\n * @interface LoraConfig\n */\nexport interface LoraConfig {\n    /**\n     * \n     * @type {string}\n     * @memberof LoraConfig\n     */\n    name: string;\n    /**\n     * \n     * @type {number}\n     * @memberof LoraConfig\n     */\n    strength: number;\n}\n/**\n * \n * @export\n * @interface MetricAttribute\n */\nexport interface MetricAttribute {\n    /**\n     * \n     * @type {string}\n     * @memberof MetricAttribute\n     */\n    name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof MetricAttribute\n     */\n    value?: string;\n}\n/**\n * \n * @export\n * @interface Order\n */\nexport interface Order {\n    /**\n     * \n     * @type {string}\n     * @memberof Order\n     */\n    id: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Order\n     */\n    created_by: string;\n    /**\n     * \n     * @type {number}\n     * @memberof Order\n     */\n    created_at: number;\n    /**\n     * \n     * @type {number}\n     * @memberof Order\n     */\n    ends_at: number;\n    /**\n     * \n     * @type {boolean}\n     * @memberof Order\n     */\n    is_active: boolean;\n    /**\n     * \n     * @type {number}\n     * @memberof Order\n     */\n    gpu_count: number;\n    /**\n     * \n     * @type {number}\n     * @memberof Order\n     */\n    amount_paid_cents: number;\n}\n/**\n * \n * @export\n * @interface RefreshLoginInput\n */\nexport interface RefreshLoginInput {\n    /**\n     * \n     * @type {string}\n     * @memberof RefreshLoginInput\n     */\n    refreshToken?: string;\n}\n/**\n * \n * @export\n * @interface StableDiffusionModel\n */\nexport interface StableDiffusionModel {\n    /**\n     * The name of the model\n     * @type {string}\n     * @memberof StableDiffusionModel\n     */\n    name: string;\n    /**\n     * The baseline model used\n     * @type {string}\n     * @memberof StableDiffusionModel\n     */\n    baseline: string;\n    /**\n     * The type of the model (e.g., ckpt)\n     * @type {string}\n     * @memberof StableDiffusionModel\n     */\n    type: string;\n    /**\n     * A short description of the model\n     * @type {string}\n     * @memberof StableDiffusionModel\n     */\n    description: string;\n    /**\n     * Tags associated with the model\n     * @type {Array<string>}\n     * @memberof StableDiffusionModel\n     */\n    tags: Array<string>;\n    /**\n     * A list of URIs for showcase images\n     * @type {Array<string>}\n     * @memberof StableDiffusionModel\n     */\n    showcases: Array<string>;\n    /**\n     * The version of the model\n     * @type {string}\n     * @memberof StableDiffusionModel\n     */\n    version: string;\n    /**\n     * The style of the model (e.g., anime, furry)\n     * @type {string}\n     * @memberof StableDiffusionModel\n     */\n    style: string;\n    /**\n     * Whether the model is Not Safe For Work (NSFW)\n     * @type {boolean}\n     * @memberof StableDiffusionModel\n     */\n    nsfw: boolean;\n    /**\n     * Whether to download all model files\n     * @type {boolean}\n     * @memberof StableDiffusionModel\n     */\n    download_all: boolean;\n    /**\n     * Configuration information for the model\n     * @type {object}\n     * @memberof StableDiffusionModel\n     */\n    config: object;\n    /**\n     * Whether the model is available for use\n     * @type {boolean}\n     * @memberof StableDiffusionModel\n     */\n    available: boolean;\n    /**\n     * Whether the model is an inpainting model\n     * @type {boolean}\n     * @memberof StableDiffusionModel\n     */\n    inpainting: boolean;\n}\n/**\n * \n * @export\n * @enum {string}\n */\n\nexport enum StatusEnum {\n    Pending = 'pending',\n    Processing = 'processing',\n    Completed = 'completed',\n    Saved = 'saved',\n    Error = 'error',\n    Deleted = 'deleted'\n}\n\n/**\n * \n * @export\n * @interface StripeSession\n */\nexport interface StripeSession {\n    /**\n     * \n     * @type {string}\n     * @memberof StripeSession\n     */\n    session_id: string;\n}\n/**\n * \n * @export\n * @interface TemporaryImage\n */\nexport interface TemporaryImage {\n    /**\n     * \n     * @type {string}\n     * @memberof TemporaryImage\n     */\n    id: string;\n    /**\n     * \n     * @type {string}\n     * @memberof TemporaryImage\n     */\n    upload_url: string;\n}\n/**\n * \n * @export\n * @interface UpdateGlobalSettingsRequest\n */\nexport interface UpdateGlobalSettingsRequest {\n    /**\n     * \n     * @type {object}\n     * @memberof UpdateGlobalSettingsRequest\n     */\n    settings_json: object;\n}\n/**\n * \n * @export\n * @interface UpdateImageInput\n */\nexport interface UpdateImageInput {\n    /**\n     * \n     * @type {string}\n     * @memberof UpdateImageInput\n     */\n    label?: string;\n    /**\n     * \n     * @type {StatusEnum}\n     * @memberof UpdateImageInput\n     */\n    status?: StatusEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof UpdateImageInput\n     */\n    encoded_image?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof UpdateImageInput\n     */\n    encoded_npy?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof UpdateImageInput\n     */\n    score?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof UpdateImageInput\n     */\n    negative_score?: number;\n    /**\n     * \n     * @type {boolean}\n     * @memberof UpdateImageInput\n     */\n    nsfw?: boolean;\n    /**\n     * \n     * @type {number}\n     * @memberof UpdateImageInput\n     */\n    deleted_at?: number | null;\n    /**\n     * \n     * @type {string}\n     * @memberof UpdateImageInput\n     */\n    error?: string;\n}\n/**\n * \n * @export\n * @interface UpsertWorkerConfigInput\n */\nexport interface UpsertWorkerConfigInput {\n    /**\n     * \n     * @type {Array<WorkerGpuConfig>}\n     * @memberof UpsertWorkerConfigInput\n     */\n    gpu_configs?: Array<WorkerGpuConfig>;\n}\n/**\n * \n * @export\n * @interface UpsertWorkerInput\n */\nexport interface UpsertWorkerInput {\n    /**\n     * \n     * @type {string}\n     * @memberof UpsertWorkerInput\n     */\n    display_name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof UpsertWorkerInput\n     */\n    status?: UpsertWorkerInputStatusEnum;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum UpsertWorkerInputStatusEnum {\n    Idle = 'idle',\n    Active = 'active'\n}\n\n/**\n * \n * @export\n * @interface User\n */\nexport interface User {\n    /**\n     * \n     * @type {string}\n     * @memberof User\n     */\n    id?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof User\n     */\n    active?: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof User\n     */\n    customer_id?: string;\n}\n/**\n * \n * @export\n * @interface VerifyLoginInput\n */\nexport interface VerifyLoginInput {\n    /**\n     * \n     * @type {string}\n     * @memberof VerifyLoginInput\n     */\n    email?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof VerifyLoginInput\n     */\n    code?: string;\n}\n/**\n * \n * @export\n * @interface Worker\n */\nexport interface Worker {\n    /**\n     * \n     * @type {string}\n     * @memberof Worker\n     */\n    id: string;\n    /**\n     * \n     * @type {number}\n     * @memberof Worker\n     */\n    created_at: number;\n    /**\n     * \n     * @type {string}\n     * @memberof Worker\n     */\n    display_name: string;\n    /**\n     * \n     * @type {number}\n     * @memberof Worker\n     */\n    last_ping?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof Worker\n     */\n    status?: WorkerStatusEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof Worker\n     */\n    login_code?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Worker\n     */\n    engine?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof Worker\n     */\n    num_gpus?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof Worker\n     */\n    cloud_instance_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Worker\n     */\n    gpu_type?: string;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum WorkerStatusEnum {\n    Idle = 'idle',\n    Active = 'active'\n}\n\n/**\n * \n * @export\n * @interface WorkerConfig\n */\nexport interface WorkerConfig {\n    /**\n     * \n     * @type {string}\n     * @memberof WorkerConfig\n     */\n    worker_id: string;\n    /**\n     * \n     * @type {Array<WorkerGpuConfig>}\n     * @memberof WorkerConfig\n     */\n    gpu_configs?: Array<WorkerGpuConfig>;\n}\n/**\n * \n * @export\n * @interface WorkerGpuConfig\n */\nexport interface WorkerGpuConfig {\n    /**\n     * \n     * @type {number}\n     * @memberof WorkerGpuConfig\n     */\n    gpu_num: number;\n    /**\n     * \n     * @type {string}\n     * @memberof WorkerGpuConfig\n     */\n    model: string;\n}\n/**\n * \n * @export\n * @interface WorkerList\n */\nexport interface WorkerList {\n    /**\n     * \n     * @type {Array<Worker>}\n     * @memberof WorkerList\n     */\n    workers?: Array<Worker>;\n}\n/**\n * \n * @export\n * @interface WorkerLoginCode\n */\nexport interface WorkerLoginCode {\n    /**\n     * \n     * @type {string}\n     * @memberof WorkerLoginCode\n     */\n    login_code: string;\n}\n\n/**\n * AIBrushApi - axios parameter creator\n * @export\n */\nexport const AIBrushApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * Add Metrics\n         * @param {AddMetricsInput} [addMetricsInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        addMetrics: async (addMetricsInput?: AddMetricsInput, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/metrics`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(addMetricsInput, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get a list of saved images by id\n         * @param {string} [fields] Comma-separated list of fields to include in the response images. For example: \\&quot;id,params,created_at\\&quot; \n         * @param {BatchGetImagesInput} [batchGetImagesInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        batchGetImages: async (fields?: string, batchGetImagesInput?: BatchGetImagesInput, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/batch-get-images`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (fields !== undefined) {\n                localVarQueryParameter['fields'] = fields;\n            }\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(batchGetImagesInput, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Create a new deposit code\n         * @param {CreateDepositCodeInput} [createDepositCodeInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createDepositCode: async (createDepositCodeInput?: CreateDepositCodeInput, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/deposit-codes`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(createDepositCodeInput, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Create a new Stripe session\n         * @param {CreateStripeSessionInput} [createStripeSessionInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createStripeSession: async (createStripeSessionInput?: CreateStripeSessionInput, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/stripe-sessions`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(createStripeSessionInput, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Delete a saved image\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteImage: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('deleteImage', 'id', id)\n            const localVarPath = `/api/images/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Log in with Discord\n         * @param {DiscordLogin} [discordLogin] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        discordLogin: async (discordLogin?: DiscordLogin, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/discord-login`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(discordLogin, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get the assets url\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getAssetsUrl: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/assets-url`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get the user\\'s credit balance\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getCredits: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/credits`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get the features\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getFeatures: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/features`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get the global settings\n         * @param {string} key \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getGlobalSettings: async (key: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'key' is not null or undefined\n            assertParamExists('getGlobalSettings', 'key', key)\n            const localVarPath = `/api/global-settings/{key}`\n                .replace(`{${\"key\"}}`, encodeURIComponent(String(key)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get a saved image by id\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getImage: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('getImage', 'id', id)\n            const localVarPath = `/api/images/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get download urls for image assets\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getImageDownloadUrls: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('getImageDownloadUrls', 'id', id)\n            const localVarPath = `/api/images/{id}/download-urls`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get upload urls for image assets\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getImageUploadUrls: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('getImageUploadUrls', 'id', id)\n            const localVarPath = `/api/images/{id}/upload-urls`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Get available models\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getModels: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/stable-diffusion-models`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Healthcheck\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        healthcheck: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/healthcheck`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Check if the user is admin\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        isAdmin: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/is-admin`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get a list of saved images\n         * @param {number} [cursor] \n         * @param {string} [filter] \n         * @param {number} [limit] \n         * @param {'asc' | 'desc'} [direction] \n         * @param {string} [fields] Comma-separated list of fields to include in the response images. For example: \\&quot;id,params,created_at\\&quot; \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listImages: async (cursor?: number, filter?: string, limit?: number, direction?: 'asc' | 'desc', fields?: string, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/images`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (cursor !== undefined) {\n                localVarQueryParameter['cursor'] = cursor;\n            }\n\n            if (filter !== undefined) {\n                localVarQueryParameter['filter'] = filter;\n            }\n\n            if (limit !== undefined) {\n                localVarQueryParameter['limit'] = limit;\n            }\n\n            if (direction !== undefined) {\n                localVarQueryParameter['direction'] = direction;\n            }\n\n            if (fields !== undefined) {\n                localVarQueryParameter['fields'] = fields;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Login by email\n         * @param {LoginInput} [loginInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        login: async (loginInput?: LoginInput, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/auth/login`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(loginInput, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Redeem a deposit code\n         * @param {string} code \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        redeemDepositCode: async (code: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'code' is not null or undefined\n            assertParamExists('redeemDepositCode', 'code', code)\n            const localVarPath = `/api/deposit-codes/{code}`\n                .replace(`{${\"code\"}}`, encodeURIComponent(String(code)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Refresh Login code\n         * @param {RefreshLoginInput} [refreshLoginInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        refresh: async (refreshLoginInput?: RefreshLoginInput, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/auth/refresh`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(refreshLoginInput, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Update the global settings\n         * @param {string} key \n         * @param {UpdateGlobalSettingsRequest} [updateGlobalSettingsRequest] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateGlobalSettings: async (key: string, updateGlobalSettingsRequest?: UpdateGlobalSettingsRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'key' is not null or undefined\n            assertParamExists('updateGlobalSettings', 'key', key)\n            const localVarPath = `/api/global-settings/{key}`\n                .replace(`{${\"key\"}}`, encodeURIComponent(String(key)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(updateGlobalSettingsRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Verify Login code\n         * @param {VerifyLoginInput} [verifyLoginInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        verify: async (verifyLoginInput?: VerifyLoginInput, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/auth/verify`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(verifyLoginInput, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * AIBrushApi - functional programming interface\n * @export\n */\nexport const AIBrushApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = AIBrushApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * Add Metrics\n         * @param {AddMetricsInput} [addMetricsInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async addMetrics(addMetricsInput?: AddMetricsInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.addMetrics(addMetricsInput, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get a list of saved images by id\n         * @param {string} [fields] Comma-separated list of fields to include in the response images. For example: \\&quot;id,params,created_at\\&quot; \n         * @param {BatchGetImagesInput} [batchGetImagesInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async batchGetImages(fields?: string, batchGetImagesInput?: BatchGetImagesInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImageList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.batchGetImages(fields, batchGetImagesInput, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Create a new deposit code\n         * @param {CreateDepositCodeInput} [createDepositCodeInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createDepositCode(createDepositCodeInput?: CreateDepositCodeInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DepositCode>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.createDepositCode(createDepositCodeInput, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Create a new Stripe session\n         * @param {CreateStripeSessionInput} [createStripeSessionInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createStripeSession(createStripeSessionInput?: CreateStripeSessionInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StripeSession>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.createStripeSession(createStripeSessionInput, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Delete a saved image\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async deleteImage(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteImage(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Log in with Discord\n         * @param {DiscordLogin} [discordLogin] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async discordLogin(discordLogin?: DiscordLogin, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginResult>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.discordLogin(discordLogin, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get the assets url\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getAssetsUrl(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssetsUrl>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getAssetsUrl(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get the user\\'s credit balance\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getCredits(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Credits>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getCredits(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get the features\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getFeatures(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeatureList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getFeatures(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get the global settings\n         * @param {string} key \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getGlobalSettings(key: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GlobalSettings>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getGlobalSettings(key, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get a saved image by id\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getImage(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Image>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getImage(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get download urls for image assets\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getImageDownloadUrls(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImageUrls>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getImageDownloadUrls(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get upload urls for image assets\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getImageUploadUrls(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImageUrls>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getImageUploadUrls(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Get available models\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getModels(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: StableDiffusionModel; }>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getModels(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Healthcheck\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async healthcheck(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Healthcheck>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.healthcheck(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Check if the user is admin\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async isAdmin(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IsAdminResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.isAdmin(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get a list of saved images\n         * @param {number} [cursor] \n         * @param {string} [filter] \n         * @param {number} [limit] \n         * @param {'asc' | 'desc'} [direction] \n         * @param {string} [fields] Comma-separated list of fields to include in the response images. For example: \\&quot;id,params,created_at\\&quot; \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listImages(cursor?: number, filter?: string, limit?: number, direction?: 'asc' | 'desc', fields?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImageList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.listImages(cursor, filter, limit, direction, fields, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Login by email\n         * @param {LoginInput} [loginInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async login(loginInput?: LoginInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.login(loginInput, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Redeem a deposit code\n         * @param {string} code \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async redeemDepositCode(code: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.redeemDepositCode(code, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Refresh Login code\n         * @param {RefreshLoginInput} [refreshLoginInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async refresh(refreshLoginInput?: RefreshLoginInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginResult>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.refresh(refreshLoginInput, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Update the global settings\n         * @param {string} key \n         * @param {UpdateGlobalSettingsRequest} [updateGlobalSettingsRequest] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async updateGlobalSettings(key: string, updateGlobalSettingsRequest?: UpdateGlobalSettingsRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GlobalSettings>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.updateGlobalSettings(key, updateGlobalSettingsRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Verify Login code\n         * @param {VerifyLoginInput} [verifyLoginInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async verify(verifyLoginInput?: VerifyLoginInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginResult>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.verify(verifyLoginInput, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n    }\n};\n\n/**\n * AIBrushApi - factory interface\n * @export\n */\nexport const AIBrushApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = AIBrushApiFp(configuration)\n    return {\n        /**\n         * Add Metrics\n         * @param {AddMetricsInput} [addMetricsInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        addMetrics(addMetricsInput?: AddMetricsInput, options?: any): AxiosPromise<void> {\n            return localVarFp.addMetrics(addMetricsInput, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get a list of saved images by id\n         * @param {string} [fields] Comma-separated list of fields to include in the response images. For example: \\&quot;id,params,created_at\\&quot; \n         * @param {BatchGetImagesInput} [batchGetImagesInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        batchGetImages(fields?: string, batchGetImagesInput?: BatchGetImagesInput, options?: any): AxiosPromise<ImageList> {\n            return localVarFp.batchGetImages(fields, batchGetImagesInput, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Create a new deposit code\n         * @param {CreateDepositCodeInput} [createDepositCodeInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createDepositCode(createDepositCodeInput?: CreateDepositCodeInput, options?: any): AxiosPromise<DepositCode> {\n            return localVarFp.createDepositCode(createDepositCodeInput, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Create a new Stripe session\n         * @param {CreateStripeSessionInput} [createStripeSessionInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createStripeSession(createStripeSessionInput?: CreateStripeSessionInput, options?: any): AxiosPromise<StripeSession> {\n            return localVarFp.createStripeSession(createStripeSessionInput, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Delete a saved image\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteImage(id: string, options?: any): AxiosPromise<void> {\n            return localVarFp.deleteImage(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Log in with Discord\n         * @param {DiscordLogin} [discordLogin] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        discordLogin(discordLogin?: DiscordLogin, options?: any): AxiosPromise<LoginResult> {\n            return localVarFp.discordLogin(discordLogin, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get the assets url\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getAssetsUrl(options?: any): AxiosPromise<AssetsUrl> {\n            return localVarFp.getAssetsUrl(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get the user\\'s credit balance\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getCredits(options?: any): AxiosPromise<Credits> {\n            return localVarFp.getCredits(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get the features\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getFeatures(options?: any): AxiosPromise<FeatureList> {\n            return localVarFp.getFeatures(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get the global settings\n         * @param {string} key \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getGlobalSettings(key: string, options?: any): AxiosPromise<GlobalSettings> {\n            return localVarFp.getGlobalSettings(key, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get a saved image by id\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getImage(id: string, options?: any): AxiosPromise<Image> {\n            return localVarFp.getImage(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get download urls for image assets\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getImageDownloadUrls(id: string, options?: any): AxiosPromise<ImageUrls> {\n            return localVarFp.getImageDownloadUrls(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get upload urls for image assets\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getImageUploadUrls(id: string, options?: any): AxiosPromise<ImageUrls> {\n            return localVarFp.getImageUploadUrls(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Get available models\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getModels(options?: any): AxiosPromise<{ [key: string]: StableDiffusionModel; }> {\n            return localVarFp.getModels(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Healthcheck\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        healthcheck(options?: any): AxiosPromise<Healthcheck> {\n            return localVarFp.healthcheck(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Check if the user is admin\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        isAdmin(options?: any): AxiosPromise<IsAdminResponse> {\n            return localVarFp.isAdmin(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get a list of saved images\n         * @param {number} [cursor] \n         * @param {string} [filter] \n         * @param {number} [limit] \n         * @param {'asc' | 'desc'} [direction] \n         * @param {string} [fields] Comma-separated list of fields to include in the response images. For example: \\&quot;id,params,created_at\\&quot; \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listImages(cursor?: number, filter?: string, limit?: number, direction?: 'asc' | 'desc', fields?: string, options?: any): AxiosPromise<ImageList> {\n            return localVarFp.listImages(cursor, filter, limit, direction, fields, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Login by email\n         * @param {LoginInput} [loginInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        login(loginInput?: LoginInput, options?: any): AxiosPromise<void> {\n            return localVarFp.login(loginInput, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Redeem a deposit code\n         * @param {string} code \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        redeemDepositCode(code: string, options?: any): AxiosPromise<void> {\n            return localVarFp.redeemDepositCode(code, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Refresh Login code\n         * @param {RefreshLoginInput} [refreshLoginInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        refresh(refreshLoginInput?: RefreshLoginInput, options?: any): AxiosPromise<LoginResult> {\n            return localVarFp.refresh(refreshLoginInput, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Update the global settings\n         * @param {string} key \n         * @param {UpdateGlobalSettingsRequest} [updateGlobalSettingsRequest] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateGlobalSettings(key: string, updateGlobalSettingsRequest?: UpdateGlobalSettingsRequest, options?: any): AxiosPromise<GlobalSettings> {\n            return localVarFp.updateGlobalSettings(key, updateGlobalSettingsRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Verify Login code\n         * @param {VerifyLoginInput} [verifyLoginInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        verify(verifyLoginInput?: VerifyLoginInput, options?: any): AxiosPromise<LoginResult> {\n            return localVarFp.verify(verifyLoginInput, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * AIBrushApi - object-oriented interface\n * @export\n * @class AIBrushApi\n * @extends {BaseAPI}\n */\nexport class AIBrushApi extends BaseAPI {\n    /**\n     * Add Metrics\n     * @param {AddMetricsInput} [addMetricsInput] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public addMetrics(addMetricsInput?: AddMetricsInput, options?: any) {\n        return AIBrushApiFp(this.configuration).addMetrics(addMetricsInput, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get a list of saved images by id\n     * @param {string} [fields] Comma-separated list of fields to include in the response images. For example: \\&quot;id,params,created_at\\&quot; \n     * @param {BatchGetImagesInput} [batchGetImagesInput] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public batchGetImages(fields?: string, batchGetImagesInput?: BatchGetImagesInput, options?: any) {\n        return AIBrushApiFp(this.configuration).batchGetImages(fields, batchGetImagesInput, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Create a new deposit code\n     * @param {CreateDepositCodeInput} [createDepositCodeInput] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public createDepositCode(createDepositCodeInput?: CreateDepositCodeInput, options?: any) {\n        return AIBrushApiFp(this.configuration).createDepositCode(createDepositCodeInput, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Create a new Stripe session\n     * @param {CreateStripeSessionInput} [createStripeSessionInput] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public createStripeSession(createStripeSessionInput?: CreateStripeSessionInput, options?: any) {\n        return AIBrushApiFp(this.configuration).createStripeSession(createStripeSessionInput, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Delete a saved image\n     * @param {string} id \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public deleteImage(id: string, options?: any) {\n        return AIBrushApiFp(this.configuration).deleteImage(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Log in with Discord\n     * @param {DiscordLogin} [discordLogin] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public discordLogin(discordLogin?: DiscordLogin, options?: any) {\n        return AIBrushApiFp(this.configuration).discordLogin(discordLogin, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get the assets url\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public getAssetsUrl(options?: any) {\n        return AIBrushApiFp(this.configuration).getAssetsUrl(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get the user\\'s credit balance\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public getCredits(options?: any) {\n        return AIBrushApiFp(this.configuration).getCredits(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get the features\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public getFeatures(options?: any) {\n        return AIBrushApiFp(this.configuration).getFeatures(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get the global settings\n     * @param {string} key \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public getGlobalSettings(key: string, options?: any) {\n        return AIBrushApiFp(this.configuration).getGlobalSettings(key, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get a saved image by id\n     * @param {string} id \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public getImage(id: string, options?: any) {\n        return AIBrushApiFp(this.configuration).getImage(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get download urls for image assets\n     * @param {string} id \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public getImageDownloadUrls(id: string, options?: any) {\n        return AIBrushApiFp(this.configuration).getImageDownloadUrls(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get upload urls for image assets\n     * @param {string} id \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public getImageUploadUrls(id: string, options?: any) {\n        return AIBrushApiFp(this.configuration).getImageUploadUrls(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Get available models\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public getModels(options?: any) {\n        return AIBrushApiFp(this.configuration).getModels(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Healthcheck\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public healthcheck(options?: any) {\n        return AIBrushApiFp(this.configuration).healthcheck(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Check if the user is admin\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public isAdmin(options?: any) {\n        return AIBrushApiFp(this.configuration).isAdmin(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get a list of saved images\n     * @param {number} [cursor] \n     * @param {string} [filter] \n     * @param {number} [limit] \n     * @param {'asc' | 'desc'} [direction] \n     * @param {string} [fields] Comma-separated list of fields to include in the response images. For example: \\&quot;id,params,created_at\\&quot; \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public listImages(cursor?: number, filter?: string, limit?: number, direction?: 'asc' | 'desc', fields?: string, options?: any) {\n        return AIBrushApiFp(this.configuration).listImages(cursor, filter, limit, direction, fields, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Login by email\n     * @param {LoginInput} [loginInput] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public login(loginInput?: LoginInput, options?: any) {\n        return AIBrushApiFp(this.configuration).login(loginInput, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Redeem a deposit code\n     * @param {string} code \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public redeemDepositCode(code: string, options?: any) {\n        return AIBrushApiFp(this.configuration).redeemDepositCode(code, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Refresh Login code\n     * @param {RefreshLoginInput} [refreshLoginInput] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public refresh(refreshLoginInput?: RefreshLoginInput, options?: any) {\n        return AIBrushApiFp(this.configuration).refresh(refreshLoginInput, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Update the global settings\n     * @param {string} key \n     * @param {UpdateGlobalSettingsRequest} [updateGlobalSettingsRequest] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public updateGlobalSettings(key: string, updateGlobalSettingsRequest?: UpdateGlobalSettingsRequest, options?: any) {\n        return AIBrushApiFp(this.configuration).updateGlobalSettings(key, updateGlobalSettingsRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Verify Login code\n     * @param {VerifyLoginInput} [verifyLoginInput] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public verify(verifyLoginInput?: VerifyLoginInput, options?: any) {\n        return AIBrushApiFp(this.configuration).verify(verifyLoginInput, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n\n\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * AIBrush API\n * Orchestration backend for AI Brush\n *\n * The version of the OpenAPI document: 1.0.0\n * Contact: admin@aibrush.art\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport { Configuration } from \"./configuration\";\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport globalAxios, { AxiosPromise, AxiosInstance } from 'axios';\n\nexport const BASE_PATH = \"https://www.aibrush.art\".replace(/\\/+$/, \"\");\n\n/**\n *\n * @export\n */\nexport const COLLECTION_FORMATS = {\n    csv: \",\",\n    ssv: \" \",\n    tsv: \"\\t\",\n    pipes: \"|\",\n};\n\n/**\n *\n * @export\n * @interface RequestArgs\n */\nexport interface RequestArgs {\n    url: string;\n    options: any;\n}\n\n/**\n *\n * @export\n * @class BaseAPI\n */\nexport class BaseAPI {\n    protected configuration: Configuration | undefined;\n\n    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected axios: AxiosInstance = globalAxios) {\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = configuration.basePath || this.basePath;\n        }\n    }\n};\n\n/**\n *\n * @export\n * @class RequiredError\n * @extends {Error}\n */\nexport class RequiredError extends Error {\n    name: \"RequiredError\" = \"RequiredError\";\n    constructor(public field: string, msg?: string) {\n        super(msg);\n    }\n}\n","export class RecentList {\n\n    private key: string;\n    private listSize: number;\n\n    constructor(key: string, listSize: number) {\n        this.key = key;\n        this.listSize = listSize;\n    }\n\n    private getRecentItems(): string[] {\n        const modelsJson = localStorage.getItem(this.key);\n        return modelsJson ? JSON.parse(modelsJson) : [];\n    }\n\n    private saveRecentItems(models: string[]): void {\n        localStorage.setItem(this.key, JSON.stringify(models));\n    }\n\n    addItem(model: string): (string | undefined) {\n        const recentModels = this.getRecentItems();\n        const modelIndex = recentModels.indexOf(model);\n\n        if (modelIndex !== -1) {\n            recentModels.splice(modelIndex, 1);\n        }\n\n        recentModels.unshift(model);\n\n        let removed: string | undefined;\n        if (recentModels.length > this.listSize) {\n            removed = recentModels.pop();\n        }\n\n        this.saveRecentItems(recentModels);\n        return removed;\n    }\n\n    getItems(): string[] {\n        return this.getRecentItems();\n    }\n\n    clear() {\n        this.saveRecentItems([]);\n    }\n}\n\nexport const recentModels = new RecentList(\"recent-models\", 20);\nexport const recentNegativePrompts = new RecentList(\"recent-negative-prompts\", 20);\nexport const recentPrompts = new RecentList(\"recent-positive-prompts\", 20);\nexport const recentLoras = new RecentList(\"recent-loras\", 200);","import { Renderer } from \"./renderer\";\n\nexport class ZoomHelper {\n\n    private startTouches: React.TouchList | null;\n    private startZoom = 1;\n    private startOffsetX = 0;\n    private startOffsetY = 0;\n\n    constructor(private renderer: Renderer) {\n        this.startTouches = null;\n    }\n\n    onWheel(event: WheelEvent) {\n        const originalZoom = this.renderer.getZoom();\n        let zoom = this.renderer.getZoom();\n        let offsetX = this.renderer.getOffsetX();\n        let offsetY = this.renderer.getOffsetY();\n\n        let canvasPoint = this.translateMouseToCanvasCoordinates(\n            event.offsetX,\n            event.offsetY\n        );\n        // console.log(\"x: \" + x + \", y: \" + y);\n        \n        if (event.deltaY < 0) {\n            zoom += 0.1 * zoom;\n        } else {\n            zoom -= 0.1 * zoom;\n        }\n        zoom = Math.max(0.1, Math.min(zoom, 8.0));\n\n        let xDiff = canvasPoint.x - -offsetX;\n        let yDiff = canvasPoint.y - -offsetY;\n\n        // offsetX = canvasPoint.x - xDiff * (zoom / originalZoom);\n        // offsetY = canvasPoint.y - yDiff * (zoom / originalZoom);\n        offsetX -= xDiff * (zoom / originalZoom) - xDiff;\n        offsetY -= yDiff * (zoom / originalZoom) - yDiff;\n\n        this.renderer.updateZoomAndOffset(zoom, offsetX, offsetY);\n    }\n\n    onPan(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        let movementX = event.movementX;\n        let movementY = event.movementY;\n        // translate offset to canvas coordinates\n        let rect = (\n            event.target as HTMLCanvasElement\n        ).getBoundingClientRect();\n        movementX = (movementX / rect.width) * this.renderer.getCanvas().width;\n        movementY = (movementY / rect.height) * this.renderer.getCanvas().height;\n\n        let zoom = this.renderer.getZoom();\n        let offsetX = this.renderer.getOffsetX();\n        let offsetY = this.renderer.getOffsetY();\n\n        offsetX += movementX / zoom;\n        offsetY += movementY / zoom;\n\n        this.renderer.updateZoomAndOffset(zoom, offsetX, offsetY);\n    }\n\n    onTouchStart(event: React.TouchEvent<HTMLCanvasElement>) {\n        if (event.touches.length === 2) {\n            this.startTouches = event.touches;\n            this.startZoom = this.renderer.getZoom();\n            this.startOffsetX = this.renderer.getOffsetX();\n            this.startOffsetY = this.renderer.getOffsetY();\n        }\n    }\n\n    onTouchMove(event: React.TouchEvent<HTMLCanvasElement>) {\n        if (this.startTouches) {\n            const canvasRect = this.renderer.getCanvas().getBoundingClientRect();\n            const startTouch1 = this.startTouches[0];\n            const startTouch2 = this.startTouches[1];\n            const touch1 = event.touches[0];\n            const touch2 = event.touches[1];\n\n            const startDistance = Math.sqrt(\n                Math.pow(startTouch1.clientX - startTouch2.clientX, 2) +\n                Math.pow(startTouch1.clientY - startTouch2.clientY, 2)\n            );\n            const distance = Math.sqrt(\n                Math.pow(touch1.clientX - touch2.clientX, 2) +\n                Math.pow(touch1.clientY - touch2.clientY, 2)\n            );\n            const zoom = this.startZoom * (distance / startDistance);\n\n            const startCenterX = (startTouch1.clientX + startTouch2.clientX) / 2;\n            const startCenterY = (startTouch1.clientY + startTouch2.clientY) / 2;\n            const centerX = (touch1.clientX + touch2.clientX) / 2;\n            const centerY = (touch1.clientY + touch2.clientY) / 2;\n\n            const startCanvasPoint = this.translateMouseToCanvasCoordinates(\n                startCenterX - canvasRect.left,\n                startCenterY - canvasRect.top\n            );\n            const canvasPoint = this.translateMouseToCanvasCoordinates(\n                centerX - canvasRect.left,\n                centerY - canvasRect.top\n            );\n\n            let offsetX = this.startOffsetX;\n            let offsetY = this.startOffsetY;\n\n            let xDiff = canvasPoint.x - startCanvasPoint.x;\n            let yDiff = canvasPoint.y - startCanvasPoint.y;\n\n            let xDiff2 = canvasPoint.x - -this.renderer.getOffsetX();\n            let yDiff2 = canvasPoint.y - -this.renderer.getOffsetY();\n\n            offsetX -= xDiff2 * (zoom / this.startZoom) - xDiff2 - (xDiff * (distance / startDistance));\n            offsetY -= yDiff2 * (zoom / this.startZoom) - yDiff2 - (yDiff * (distance / startDistance));\n\n            this.renderer.updateZoomAndOffset(zoom, offsetX, offsetY);\n        }\n    }\n\n    onTouchEnd(event: React.TouchEvent<HTMLCanvasElement>) {\n        this.startTouches = null;\n    }\n\n\n    translateMouseToCanvasCoordinates(mouseX: number, mouseY: number, zoom?: number, offsetX?: number, offsetY?: number) {\n        let x = mouseX;\n        let y = mouseY;\n        // adjust for zoom\n        zoom = zoom || this.renderer.getZoom();\n        offsetX = offsetX || this.renderer.getOffsetX();\n        offsetY = offsetY || this.renderer.getOffsetY();\n        x = x / zoom;\n        y = y / zoom;\n\n        // translate offset to canvas coordinates\n        let rect = this.renderer.getCanvas().getBoundingClientRect();\n\n        // x = (x / rect.width) * this.renderer.getWidth();\n        // y = (y / rect.height) * this.renderer.getHeight();\n\n        x = (x / rect.width) * this.renderer.getCanvas().width;\n        y = (y / rect.height) * this.renderer.getCanvas().height;\n\n        x = Math.round(x - offsetX);\n        y = Math.round(y - offsetY);\n\n        return { x: x, y: y };\n    }\n\n    translateCanvasToMouseCoordinates(x: number, y: number, zoom?: number, offsetX?: number, offsetY?: number) {\n        zoom = zoom || this.renderer.getZoom();\n        offsetX = offsetX || this.renderer.getOffsetX();\n        offsetY = offsetY || this.renderer.getOffsetY();\n        x = x + offsetX;\n        y = y + offsetY;\n        x = x * zoom;\n        y = y * zoom;\n\n        // translate offset to canvas coordinates\n        let rect = this.renderer.getCanvas().getBoundingClientRect();\n        x = Math.round((x / this.renderer.getWidth()) * rect.width);\n        y = Math.round((y / this.renderer.getHeight()) * rect.height);\n\n        return { x: x, y: y };\n    }\n}","import React from \"react\";\nimport { Renderer } from \"./renderer\";\nimport { ZoomHelper } from \"./zoomHelper\";\n\nexport interface Tool {\n    name: string;\n    getArgs(): any;\n    updateArgs(args: any): void;\n    onMouseDown(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>): void;\n    onMouseMove(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>): void;\n    onMouseUp(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>): void;\n    onMouseLeave(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>): void;\n\n    onTouchStart(event: React.TouchEvent<HTMLCanvasElement>): void;\n    onTouchMove(event: React.TouchEvent<HTMLCanvasElement>): void;\n    onTouchEnd(event: React.TouchEvent<HTMLCanvasElement>): void;\n\n    onKeyDown(event: KeyboardEvent): void;\n    onKeyUp(event: KeyboardEvent): void;\n    onWheel(event: WheelEvent): void;\n    destroy(): boolean;\n    onShowSelectionControls(listener: (show: boolean) => void): void;\n    select(direction: \"left\" | \"right\"): void;\n    onSaveImage(listener: (encodedImage: string) => void): void;\n}\n\nexport class BaseTool implements Tool {\n    saveListener?: (encodedImage: string, args?: any) => void = () => {};\n\n    private touchHandle: number | undefined;\n\n    readonly zoomHelper: ZoomHelper;\n\n    private _pinchZooming = false;\n    private _panning = false;\n\n    constructor(readonly renderer: Renderer, readonly name: string) {\n        this.zoomHelper = new ZoomHelper(renderer);\n    }\n\n    getArgs(): any {\n        return JSON.parse(\n            localStorage.getItem(`tool_args_${this.name}`) || \"{}\"\n        );\n    }\n    updateArgs(args: any) {\n        localStorage.setItem(`tool_args_${this.name}`, JSON.stringify(args));\n    }\n    onMouseDown(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        if (event.button === 1) {\n            this._panning = true;\n        }\n    }\n    onMouseMove(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        if (this._panning) {\n            this.zoomHelper.onPan(event);\n        }\n        let { x, y } = this.zoomHelper.translateMouseToCanvasCoordinates(\n            event.nativeEvent.offsetX,\n            event.nativeEvent.offsetY\n        );\n        this._updateCursor(x, y);\n    }\n\n    private _updateCursor(x: number, y: number) {\n        this.renderer.setCursor({\n            color: \"white\",\n            radius: 10,\n            type: \"crosshairs\",\n            x,\n            y,\n        });\n    }\n\n    onMouseUp(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        if (this._panning) {\n            this._panning = false;\n        }\n    }\n    onMouseLeave(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {}\n\n    onTouchStart(event: React.TouchEvent<HTMLCanvasElement>) {\n        if (this.touchHandle) {\n            window.clearTimeout(this.touchHandle);\n        }\n        const touches: React.Touch[] = [];\n        // make a deep copy so that the values live past the delay\n        for (let i = 0; i < event.touches.length; i++) {\n            const touch = event.touches[i];\n            touches.push({\n                identifier: touch.identifier,\n                clientX: touch.clientX,\n                clientY: touch.clientY,\n                pageX: touch.pageX,\n                pageY: touch.pageY,\n                screenX: touch.screenX,\n                screenY: touch.screenY,\n                target: null,\n            } as any);\n        }\n        event = {\n            touches,\n        } as any;\n        this.touchHandle = window.setTimeout(() => {\n            this.touchHandle = undefined;\n            if (event.touches.length === 2) {\n                this._pinchZooming = true;\n                this.zoomHelper.onTouchStart(event);\n            } else {\n                const rect = this.renderer.getCanvas().getBoundingClientRect();\n                const touch = event.touches[0];\n                if (touch) {\n                    this.onMouseDown({\n                        type: \"touch\",\n                        button: 0,\n                        nativeEvent: {\n                            offsetX: touch.clientX - rect.left,\n                            offsetY: touch.clientY - rect.top,\n                        },\n                    } as any);\n                }\n            }\n        }, 200);\n    }\n    onTouchMove(event: React.TouchEvent<HTMLCanvasElement>) {\n        if (event.touches.length === 2) {\n            this.zoomHelper.onTouchMove(event);\n        } else {\n            const rect = this.renderer.getCanvas().getBoundingClientRect();\n            const touch = event.touches[0];\n            if (touch) {\n                this.onMouseMove({\n                    type: \"touch\",\n                    button: 0,\n                    nativeEvent: {\n                        offsetX: touch.clientX - rect.left,\n                        offsetY: touch.clientY - rect.top,\n                    },\n                } as any);\n            }\n        }\n    }\n    onTouchEnd(event: React.TouchEvent<HTMLCanvasElement>) {\n        if (this._pinchZooming) {\n            this._pinchZooming = false;\n            this.zoomHelper.onTouchEnd(event);\n        } else {\n            this.onMouseUp({\n                button: 0,\n                type: \"touch\",\n            } as any);\n        }\n    }\n\n    onKeyDown(event: KeyboardEvent) {}\n    onKeyUp(event: KeyboardEvent) {}\n    onWheel(event: WheelEvent) {\n        this.zoomHelper.onWheel(event);\n    }\n    destroy(): boolean {\n        return true;\n    }\n    onShowSelectionControls(listener: (show: boolean) => void) {}\n    select(direction: \"left\" | \"right\") {}\n    onSaveImage(listener: (encodedImage: string) => void) {\n        this.saveListener = listener;\n    }\n}\n","import moment from \"moment\";\n\nimport { LocalImage } from \"./models\";\n\n/**\n * This class uses indexedDB to store images locally.\n */\nexport class LocalImagesStore {\n    private db: IDBDatabase | null = null;\n\n    init(): Promise<void> {\n        return new Promise((resolve, reject) => {\n            const request = indexedDB.open(\"aibrush\", 4);\n            request.onupgradeneeded = (evt) => {\n                const db = request.result;\n                // create object store if it doesn't exist\n                // const imagesStore = db.createObjectStore(\"images\", { keyPath: \"id\" });\n                let imagesStore: IDBObjectStore;\n                if (!db.objectStoreNames.contains(\"images\")) {\n                    imagesStore = db.createObjectStore(\"images\", {\n                        keyPath: \"id\",\n                    });\n                } else {\n                    imagesStore = request.transaction?.objectStore(\n                        \"images\"\n                    ) as IDBObjectStore;\n                }\n                imagesStore.createIndex(\"updated_at\", \"updated_at\", {\n                    unique: false,\n                });\n                imagesStore.createIndex(\"deleted_at\", \"deleted_at\", {\n                    unique: false,\n                });\n                console.log(\"Local images store updated\");\n            };\n            request.onsuccess = (_) => {\n                this.db = request.result;\n                console.log(\"Local images store initialized\");\n                resolve();\n            };\n            request.onerror = (evt) => {\n                console.error(\"error opening indexeddb\", evt);\n                reject(evt);\n            };\n        });\n    }\n\n    // migrate old images to new format\n    private hydrateImage(image: LocalImage): LocalImage {\n        if (!image) {\n            return image;\n        }\n        if (!image.params) {\n            const legacyImage = image as any;\n            image.params = {\n                prompt: legacyImage.phrases.join(\", \"),\n                negative_prompt: legacyImage.negative_phrases.join(\", \"),\n                width: legacyImage.width,\n                height: legacyImage.height,\n                denoising_strength: legacyImage.stable_diffusion_strength,\n                steps: legacyImage.iterations,\n            }\n        }\n        return image;\n    }\n\n    async getImage(id: string): Promise<LocalImage | null> {\n        if (!this.db) {\n            throw new Error(\"not initialized\");\n        }\n        const transaction = this.db.transaction([\"images\"]);\n        const store = transaction.objectStore(\"images\");\n        const request = store.get(id);\n        return new Promise((resolve, reject) => {\n            request.onsuccess = (evt) => {\n                resolve(this.hydrateImage(request.result));\n            };\n            request.onerror = (evt) => {\n                console.error(\"error getting image\", evt);\n                reject(evt);\n            };\n        });\n    }\n\n    async saveImage(image: LocalImage): Promise<void> {\n        if (!this.db) {\n            throw new Error(\"not initialized\");\n        }\n        await this.cleanupDeletedImages();\n        const transaction = this.db.transaction([\"images\"], \"readwrite\");\n        const store = transaction.objectStore(\"images\");\n        const request = store.put({\n            ...image,\n            updated_at: moment().valueOf(),\n        });\n        return new Promise((resolve, reject) => {\n            request.onsuccess = (evt) => {\n                resolve();\n            };\n            request.onerror = (evt) => {\n                console.error(\"error saving image\", evt);\n                reject(evt);\n            };\n        });\n    }\n\n    async hardDeleteImage(id: string): Promise<void> {\n        if (!this.db) {\n            throw new Error(\"not initialized\");\n        }\n        const transaction = this.db.transaction([\"images\"], \"readwrite\");\n        const store = transaction.objectStore(\"images\");\n        const request = store.delete(id);\n        return new Promise((resolve, reject) => {\n            request.onsuccess = (evt) => {\n                console.log(`image ${id} permanently deleted`);\n                resolve();\n            };\n            request.onerror = (evt) => {\n                console.error(\"error deleting image\", evt);\n                reject(evt);\n            };\n        });\n    }\n\n    async deleteImage(id: string): Promise<void> {\n        if (!this.db) {\n            throw new Error(\"not initialized\");\n        }\n        // fetch the image first. If it has a deletedAt timestamp already, or if it's not\n        // in \"completed\" state, hard delete it. Otherwise, set the deletedAt timestamp.\n        const image = await this.getImage(id);\n        if (!image) {\n            console.error(\"image not found\", id);\n            return;\n        }\n        if (image.deleted_at || image.status !== \"completed\") {\n            return this.hardDeleteImage(id);\n        }\n        const transaction = this.db.transaction([\"images\"], \"readwrite\");\n        const store = transaction.objectStore(\"images\");\n        const request = store.put({\n            ...image,\n            deleted_at: moment().valueOf(),\n        });\n        return new Promise((resolve, reject) => {\n            request.onsuccess = (evt) => {\n                resolve();\n            };\n            request.onerror = (evt) => {\n                console.error(\"error deleting image\", evt);\n                reject(evt);\n            };\n        });\n    }\n\n    async listImages(\n        updated_at: number,\n        direction: IDBCursorDirection,\n        count: number,\n        search: string\n    ): Promise<LocalImage[]> {\n        // use updated_at index\n        if (!this.db) {\n            throw new Error(\"not initialized\");\n        }\n        const transaction = this.db.transaction([\"images\"]);\n        const store = transaction.objectStore(\"images\");\n        const index = store.index(\"updated_at\");\n        const range =\n            direction == \"next\"\n                ? IDBKeyRange.lowerBound(updated_at)\n                : IDBKeyRange.upperBound(updated_at);\n        const request = index.openCursor(range, direction);\n        return new Promise((resolve, reject) => {\n            const images: LocalImage[] = [];\n            request.onsuccess = (evt) => {\n                const cursor = request.result;\n                if (cursor) {\n                    const image: LocalImage = this.hydrateImage(cursor.value);\n                    const prompt = (image.params.prompt || \"\").toLowerCase();\n                    if (\n                        !image.deleted_at &&\n                        (!search || prompt.includes(search.toLowerCase()))\n                    ) {\n                        images.push(image);\n                    }\n                    if (images.length < count) {\n                        cursor.continue();\n                    } else {\n                        resolve(images);\n                    }\n                } else {\n                    resolve(images);\n                }\n            };\n            request.onerror = (evt) => {\n                console.error(\"error listing images\", evt);\n                reject(evt);\n            };\n        });\n    }\n\n    async clearImages(): Promise<void> {\n        // clear from both indexes\n        if (!this.db) {\n            throw new Error(\"not initialized\");\n        }\n        const transaction = this.db.transaction([\"images\"], \"readwrite\");\n        const imagesStore = transaction.objectStore(\"images\");\n        const imagesRequest = imagesStore.clear();\n        return new Promise((resolve, reject) => {\n            imagesRequest.onsuccess = (evt) => {\n                resolve();\n            };\n            imagesRequest.onerror = (evt) => {\n                console.error(\"error clearing images\", evt);\n                reject(evt);\n            };\n        });\n    }\n\n    async getDeletedImages(olderThan?: number): Promise<LocalImage[]> {\n        if (!this.db) {\n            throw new Error(\"not initialized\");\n        }\n        // refactor to use deleted_at index\n        const transaction = this.db.transaction([\"images\"]);\n        const store = transaction.objectStore(\"images\");\n        const index = store.index(\"deleted_at\");\n        // const request = index.openCursor();\n        // get cursor for all deleted_at values\n        const request = index.openCursor(\n            olderThan\n                ? IDBKeyRange.upperBound(olderThan)\n                : IDBKeyRange.lowerBound(1),\n            olderThan ? \"prev\" : \"next\"\n        );\n        return new Promise((resolve, reject) => {\n            const images: LocalImage[] = [];\n            request.onsuccess = (evt) => {\n                const cursor = request.result;\n                if (cursor) {\n                    const image: LocalImage = cursor.value;\n                    if (images.length < 50 && image.deleted_at) {\n                        images.push(cursor.value);\n                    }\n                    cursor.continue();\n                } else {\n                    resolve(images);\n                }\n            };\n            request.onerror = (evt) => {\n                console.error(\"error listing images\", evt);\n                reject(evt);\n            };\n        });\n    }\n\n    async clearDeletedImages(): Promise<void> {\n        if (!this.db) {\n            throw new Error(\"not initialized\");\n        }\n        let deletedImages = await this.getDeletedImages();\n        while (deletedImages.length > 0) {\n            // hard delete all deleted images\n            const promises = deletedImages.map((image) => {\n                return this.hardDeleteImage(image.id);\n            });\n            await Promise.all(promises);\n            deletedImages = await this.getDeletedImages();\n        }\n    }\n\n    async cleanupDeletedImages(): Promise<void> {\n        // delete images that are more than 1 day old\n        let deletedImages = await this.getDeletedImages(\n            moment().subtract(1, \"hours\").valueOf()\n        );\n        while (deletedImages.length > 0) {\n            // hard delete all deleted images\n            const promises = deletedImages.map((image) => {\n                return this.hardDeleteImage(image.id);\n            });\n            await Promise.all(promises);\n            deletedImages = await this.getDeletedImages(\n                moment().subtract(1, \"hours\").valueOf()\n            );\n        }\n    }\n}\n","import React, { FC, useEffect, useState } from \"react\";\nimport moment from \"moment\";\nimport { ImageThumbnail } from \"../components/ImageThumbnail\";\nimport { useHistory } from \"react-router-dom\";\nimport { LocalImagesStore } from \"../lib/localImagesStore\";\nimport { LocalImage } from \"../lib/models\";\nimport { BusyModal } from \"../components/BusyModal\";\n\ninterface Props {\n    localImages: LocalImagesStore;\n}\n\nexport const LocalDeletedImages: FC<Props> = ({ localImages }) => {\n    const [images, setImages] = useState<LocalImage[]>([]);\n    const [deleting, setDeleting] = useState(false);\n\n    const history = useHistory();\n\n    const loadImages = async () => {\n        const deletedImages = await localImages.getDeletedImages();\n        setImages(deletedImages);\n    };\n\n    const onDeleteImage = async (image: LocalImage) => {\n        setImages(images.filter((i) => i.id !== image.id));\n        await localImages.deleteImage(image.id);\n        if (images.length <= 5) {\n            loadImages();\n        }\n    };\n\n    const onDeleteAllImages = async () => {\n        setDeleting(true);\n        try {\n            await localImages.clearDeletedImages();\n            setImages([]);\n        } finally {\n            setDeleting(false);\n        }\n    };\n\n    const onRestoreImage = async (image: LocalImage) => {\n        setImages(images.filter((i) => i.id !== image.id));\n        await localImages.saveImage({\n            ...image,\n            deleted_at: undefined,\n        });\n    };\n\n    useEffect(() => {\n        loadImages();\n    }, [localImages]);\n\n    return (\n        <div>\n            <div>\n                <div className=\"row\">\n                    <div className=\"col-12\">\n                        <h1 style={{ fontSize: \"40px\", textAlign: \"left\" }}>\n                            <i\n                                style={{ cursor: \"pointer\" }}\n                                onClick={() => history.goBack()}\n                                className=\"fas fa-chevron-left\"\n                            ></i>\n                            &nbsp; Deleted Images\n                        </h1>\n                        <button\n                            className=\"btn btn-danger btn-sm image-popup-delete-button\"\n                            onClick={onDeleteAllImages}\n                            style={{\n                                float: \"right\",\n                                marginRight: \"8px\",\n                            }}\n                        >\n                            <i className=\"fa fa-trash\"></i>&nbsp;Delete All\n                        </button>\n                    </div>\n                </div>\n                <div className=\"row\" style={{ marginTop: \"32px\" }}>\n                    <div className=\"col-sm-2 offset-sm-2\">Image</div>\n                    <div className=\"col-sm-8\">Action</div>\n                </div>\n                {images.map((image) => (\n                    <div\n                        className=\"row\"\n                        style={{\n                            marginTop: \"16px\",\n                            borderBottom: \"1px solid #303030\",\n                        }}\n                        key={image.id}\n                    >\n                        <div className=\"col-sm-2 offset-sm-2\">\n                            <ImageThumbnail\n                                image={image}\n                                censorNSFW={true}\n                            />\n                        </div>\n                        <div\n                            className=\"col-sm-8\"\n                            style={{\n                                paddingTop: \"64px\",\n                                paddingBottom: \"64px\",\n                            }}\n                        >\n                            <button\n                                className=\"btn btn-danger btn-sm image-popup-delete-button\"\n                                onClick={() => onDeleteImage(image)}\n                                style={{\n                                    marginRight: \"8px\",\n                                }}\n                            >\n                                <i className=\"fa fa-trash\"></i>&nbsp;Delete\n                            </button>\n                            <button\n                                className=\"btn btn-primary btn-sm image-popup-restore-button\"\n                                onClick={() => onRestoreImage(image)}\n                            >\n                                <i className=\"fa fa-undo\"></i>&nbsp;Restore\n                            </button>\n                        </div>\n                    </div>\n                ))}\n            </div>\n            <BusyModal show={deleting} title=\"Deleting Images\">\n                Please wait while we delete all images...\n            </BusyModal>\n        </div>\n    );\n};\n","// V2 page\nimport React, { FC, useState, useEffect } from \"react\";\nimport Dropdown from \"react-bootstrap/Dropdown\";\nimport { useParams, useHistory, Link } from \"react-router-dom\";\nimport moment from \"moment\";\nimport ScrollToTop from \"react-scroll-to-top\";\nimport { ImageThumbnail } from \"../components/ImageThumbnail\";\n\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport { ImagePopup } from \"../components/ImagePopup\";\nimport { BusyModal } from \"../components/BusyModal\";\nimport { PendingJobsThumbnail } from \"../components/PendingJobsThumbnail\";\nimport {\n    NOTIFICATION_IMAGE_DELETED,\n    NOTIFICATION_IMAGE_UPDATED,\n} from \"../lib/apisocket\";\nimport { ImagesCache } from \"../lib/imagesCache\";\nimport { ImageClient } from \"../lib/savedimages\";\nimport { Image } from \"../lib/models\";\n\ninterface Props {\n    imageClient: ImageClient;\n}\n\nconst savedImagesCache = new ImagesCache();\n\nexport const SavedImagesPage: FC<Props> = ({ imageClient }) => {\n    const [selectedImage, setSelectedImage] = useState<Image | null>(null);\n\n    const [images, setImages] = useState<Array<Image>>([]);\n    const [err, setErr] = useState<string | null>(null);\n    const [hasMore, setHasMore] = useState<boolean>(true);\n    const [search, setSearch] = useState<string>(\"\");\n    const [searchDebounce, setSearchDebounce] = useState<string>(\"\");\n\n    const [censorNSFW, setCensorNSFW] = useState(true);\n\n    const { id } = useParams<{ id?: string }>();\n    const history = useHistory();\n\n    useEffect(() => {\n        let handle = setTimeout(() => {\n            setSearch(searchDebounce);\n        }, 500);\n        return () => {\n            clearTimeout(handle);\n        };\n    }, [searchDebounce]);\n\n    useEffect(() => {\n        if (id) {\n            // check if the image is already loaded\n            const image = images.find((image) => image.id === id);\n            if (image) {\n                setSelectedImage(image);\n            }\n            // refresh\n            imageClient.loadImage(id).then((image) => {\n                setSelectedImage(image);\n            });\n        } else {\n            setSelectedImage(null);\n        }\n    }, [id]);\n\n    useEffect(() => {\n        const loadImages = async () => {\n            console.log(\"Initial load images\");\n            // clear error\n            setErr(null);\n            setHasMore(true);\n            try {\n                // const resp = await api.listImages(cursor, search, 100, \"desc\");\n                const imagesResult = await savedImagesCache.listImages(\n                    imageClient,\n                    undefined,\n                    search,\n                    100\n                );\n                if (imagesResult) {\n                    console.log(\"Initial load images\", imagesResult.length);\n                    setImages(imagesResult.sort(sortImages));\n                }\n                return 0;\n            } catch (err) {\n                setErr(\"Could not load images\");\n                console.error(err);\n            }\n        };\n        loadImages();\n    }, [imageClient, search]);\n\n    const sortImages = (a: Image, b: Image) => {\n        return b.updated_at - a.updated_at;\n    };\n\n    const onLoadMore = async () => {\n        // get the minimum updated_at from images\n        let minUpdatedAt = moment().valueOf();\n        let cursor: string | undefined = undefined;\n        for (const image of images) {\n            if (image.updated_at < minUpdatedAt) {\n                minUpdatedAt = image.updated_at;\n                cursor = image.id;\n            }\n        }\n        // load images in descending order from updated_at\n        let imagesResult = await savedImagesCache.listImages(\n            imageClient,\n            cursor,\n            search,\n            100\n        );\n        if (imagesResult && imagesResult.length > 0) {\n            // combine images with new images and sort by updated_at descending\n            setImages((images) => {\n                const imagesById = images.reduce((acc, image) => {\n                    acc[image.id] = image;\n                    return acc;\n                }, {} as { [key: string]: Image });\n                imagesResult = (imagesResult || []).filter(\n                    (image) => !imagesById[image.id]\n                );\n                return [...images, ...(imagesResult || [])].sort(sortImages);\n            });\n        } else {\n            setHasMore(false);\n        }\n    };\n\n    const onFork = async (image: Image) => {\n        history.push({\n            pathname: \"/\",\n            search: `?parent=${image.id}`,\n        });\n    };\n\n    const onThumbnailClicked = (image: Image) => {\n        // setSelectedImage(image);\n        history.push(`/saved/${image.id}`);\n    };\n\n    const onSwipe = (image: Image, direction: number) => {\n        // select the previous or next image from the currently selected one\n        const index = images.findIndex((i) => i.id === image.id);\n        if (index === -1) {\n            return;\n        }\n        const newIndex = index + direction;\n        if (newIndex < 0 || newIndex >= images.length) {\n            return;\n        }\n        const newImage = images[newIndex];\n        onThumbnailClicked(newImage);\n    };\n\n    const onEdit = async (image: Image) => {\n        history.push(`/image-editor/${image.id}`);\n    };\n\n    return (\n        <>\n            <h1 style={{ fontSize: \"40px\", textAlign: \"left\" }}>\n                Welcome to AiBrush - Saved\n            </h1>\n\n            <div\n                className=\"saved-images\"\n                style={{ marginTop: \"48px\", paddingBottom: \"48px\" }}\n            >\n                <div style={{ textAlign: \"left\" }}>\n                    <div\n                        className=\"input-group\"\n                        style={{ marginBottom: \"16px\" }}\n                    >\n                        <input\n                            style={{}}\n                            value={searchDebounce}\n                            type=\"search\"\n                            className=\"form-control image-search\"\n                            placeholder=\"Search...\"\n                            onChange={(e) => setSearchDebounce(e.target.value)}\n                        />\n\n                        <div\n                            style={{\n                                float: \"right\",\n                            }}\n                        >\n                            <>\n                                <button\n                                    style={{ display: \"inline\" }}\n                                    className=\"btn btn-primary image-popup-button\"\n                                    onClick={() => setCensorNSFW(!censorNSFW)}\n                                >\n                                    {!censorNSFW && (\n                                        <i className=\"fas fa-eye\"></i>\n                                    )}\n                                    {censorNSFW && (\n                                        <i className=\"fas fa-eye-slash\"></i>\n                                    )}\n                                </button>\n                            </>\n                        </div>\n                    </div>\n                </div>\n                <InfiniteScroll\n                    dataLength={images.length}\n                    next={onLoadMore}\n                    hasMore={hasMore}\n                    loader={\n                        <>\n                            <hr />\n                            <h4>Loading...</h4>\n                        </>\n                    }\n                >\n                    {images.map((image) => (\n                        <ImageThumbnail\n                            key={image.id}\n                            image={image}\n                            onClick={(img) => onThumbnailClicked(img as Image)}\n                            censorNSFW={censorNSFW}\n                        />\n                    ))}\n                </InfiniteScroll>\n            </div>\n\n            {selectedImage && (\n                <ImagePopup\n                    image={selectedImage}\n                    onClose={() => history.push(\"/saved\")}\n                    onFork={(image) => {\n                        onFork(image as Image);\n                    }}\n                    censorNSFW={censorNSFW}\n                    onEdit={onEdit}\n                    onSwipe={onSwipe}\n                />\n            )}\n            <ScrollToTop />\n        </>\n    );\n};\n","\nimport { KVStore } from \"./kvstore\";\nimport { ImageClient } from \"./savedimages\";\nimport { Image } from \"./models\";\n\nexport class ImagesCache {\n\n    private kvstore: KVStore<Image>;\n\n    constructor() {\n        this.kvstore = new KVStore<Image>({\n            dbName: \"saved-images\",\n            storeName: \"images\",\n        });\n    }\n\n    async listImages(imageClient: ImageClient, cursor: string | undefined, search: string, limit: number): Promise<Image[] | undefined> {\n        const resp = await imageClient.listImages({\n            cursor,\n            limit,\n            filter: search,\n        });\n\n        const result: Image[] = [];\n        const batchGetIds: string[] = [];\n        for (const image of resp.images) {\n            const savedImage = await this.kvstore.getItem(image.id);\n            if (savedImage && savedImage.updated_at === image.updated_at) {\n                result.push(savedImage);\n            } else {\n                await this.kvstore.setItem(image.id, image);\n            }\n        }\n        return result;\n    }\n}","import { useEffect, useState, FC } from \"react\";\nimport loadImage from \"blueimp-load-image\";\nimport {\n    splitImage,\n    mergeTiles,\n    SplitResult,\n    ImageUtilWorker,\n} from \"../lib/imageutil\";\nimport * as uuid from \"uuid\";\n\nexport const TestPage: FC = () => {\n    const [originalImage, setOriginalImage] = useState<string | undefined>();\n    const [upscaledImage, setUpscaledImage] = useState<string | undefined>();\n    const [imageWorker, setImageWorker] = useState<\n        ImageUtilWorker | undefined\n    >();\n\n    useEffect(() => {\n        const imageWorker = new ImageUtilWorker();\n        setImageWorker(imageWorker);\n        return () => {\n            imageWorker.destroy();\n        };\n    }, []);\n\n    const imageDataToCanvas = (imageData: ImageData): HTMLCanvasElement => {\n        const canvas = document.createElement(\"canvas\");\n        canvas.width = imageData.width;\n        canvas.height = imageData.height;\n        const ctx = canvas.getContext(\"2d\");\n        if (!ctx) {\n            throw new Error(\"Could not get canvas context\");\n        }\n        ctx.putImageData(imageData, 0, 0);\n        return canvas;\n    };\n\n    const upscaleImageData = (imageData: ImageData): HTMLCanvasElement => {\n        console.log(\"upscaling image data\", imageData.width, imageData.height);\n        const canvas = document.createElement(\"canvas\");\n        canvas.width = imageData.width * 2;\n        canvas.height = imageData.height * 2;\n        const ctx = canvas.getContext(\"2d\");\n        if (!ctx) {\n            throw new Error(\"Could not get canvas context\");\n        }\n        const image = imageDataToCanvas(imageData);\n        ctx.drawImage(image, 0, 0, canvas.width, canvas.height);\n        return canvas;\n    };\n\n    const onImageSelected = async (\n        event: React.ChangeEvent<HTMLInputElement>\n    ) => {\n        if (!imageWorker) {\n            throw new Error(\"Image worker not initialized\");\n        }\n        const files = event.target.files;\n        if (files && files.length > 0) {\n            loadImage(\n                files[0],\n                async (img) => {\n                    const c = img as HTMLCanvasElement;\n                    const originalImage = c.toDataURL(\"image/png\");\n                    setOriginalImage(originalImage);\n\n                    const ctx = c.getContext(\"2d\");\n                    if (ctx) {\n                        const originalImageData = ctx.getImageData(\n                            0,\n                            0,\n                            c.width,\n                            c.height\n                        );\n                        const splitResult = splitImage(originalImageData);\n                        if (!splitResult) {\n                            setUpscaledImage(originalImage);\n                            return;\n                        }\n                        console.log(\"splitResult\", {\n                            numTilesX: splitResult.numTilesX,\n                            numTilesY: splitResult.numTilesY,\n                            tileSize: splitResult.tileSize,\n                        });\n                        splitResult.tileSize *= 2;\n                        splitResult.imageWidth *= 2;\n                        splitResult.imageHeight *= 2;\n                        for (let x = 0; x < splitResult.numTilesX; x++) {\n                            for (let y = 0; y < splitResult.numTilesY; y++) {\n                                const tile = splitResult.tiles[x][y];\n                                const upscaledTile = upscaleImageData(tile);\n                                const upscaledImageData = upscaledTile\n                                .getContext(\"2d\")!\n                                .getImageData(\n                                    0,\n                                    0,\n                                    upscaledTile.width,\n                                    upscaledTile.height\n                                );\n                                const id = uuid.v4();\n                                const feathered =\n                                    await imageWorker.processRequest({\n                                        id,\n                                        alphaMode: \"none\",\n                                        feather: true,\n                                        width: splitResult.imageWidth,\n                                        height: splitResult.imageHeight,\n                                        pixels: upscaledImageData.data,\n                                        selectionOverlay: {\n                                            x:\n                                                x *\n                                                (splitResult.tileSize - 64),\n                                            y:\n                                                y *\n                                                (splitResult.tileSize - 64),\n                                            width: upscaledTile.width,\n                                            height: upscaledTile.height,\n                                        },\n                                        upscale: true,\n                                        featherWidth: 64,\n                                    });\n\n                                splitResult.tiles[x][y] = new ImageData(feathered.pixels, upscaledTile.width, upscaledTile.height)\n                            }\n                        }\n                        const upscaledImageData = mergeTiles(splitResult);\n                        console.log(\n                            \"upscaled image data size\",\n                            upscaledImageData.width,\n                            upscaledImageData.height\n                        );\n                        const upscaledCanvas =\n                            imageDataToCanvas(upscaledImageData);\n                        const upscaledImage =\n                            upscaledCanvas.toDataURL(\"image/png\");\n                        setUpscaledImage(upscaledImage);\n                    }\n                },\n                { canvas: true }\n            );\n        }\n    };\n\n    return (\n        <div>\n            <input type=\"file\" onChange={onImageSelected} />\n            {originalImage && upscaledImage && (\n                <div>\n                    Original:\n                    <br />\n                    <img src={originalImage} />\n                    <br />\n                    Upscaled:\n                    <br />\n                    <img src={upscaledImage} />\n                </div>\n            )}\n        </div>\n    );\n};\n","import axios from \"axios\";\nimport moment from \"moment\";\nimport {\n    AlchemistPayload,\n    HordeClient,\n    HordeRequestPayload,\n} from \"./hordeclient\";\nimport { GenerationJob, LocalImage } from \"./models\";\nimport { AugmentImageInput, GenerateImageInput } from \"./models\";\nimport * as uuid from \"uuid\";\n\nconst fetchHordeData = async () => {\n    const { data } = await axios.get(\n        \"https://raw.githubusercontent.com/db0/AI-Horde-image-model-reference/main/stable_diffusion.json\"\n    );\n    return data;\n};\n\nconst hordeStateMap: { [key: string]: string } = {\n    waiting: \"pending\",\n    processing: \"processing\",\n    done: \"completed\",\n};\n\nlet _triggers: { [key: string]: string[] } | null = null;\nlet _lastUpdated: moment.Moment | null = null;\n\nasync function initTriggers() {\n    const data = await fetchHordeData();\n    _triggers = {};\n    Object.keys(data).forEach((key) => {\n        const modelInfo = data[key];\n        if (modelInfo.trigger) {\n            _triggers![key] = modelInfo.trigger;\n        }\n    });\n}\n\nexport async function addTrigger(\n    prompt: string,\n    model: string\n): Promise<string> {\n    // check last updated\n    if (_lastUpdated === null || moment().diff(_lastUpdated, \"minutes\") > 60) {\n        await initTriggers();\n        _lastUpdated = moment();\n    }\n    if (_triggers![model]) {\n        const triggerList = _triggers![model];\n        for (let trigger of triggerList) {\n            if (\n                prompt.toLocaleLowerCase().includes(trigger.toLocaleLowerCase())\n            ) {\n                return prompt;\n            }\n        }\n        return `${triggerList[0]}, ${prompt}`;\n    }\n    return prompt;\n}\n\nconst augmentationToForm: { [key: string]: string } = {\n    upscale: \"RealESRGAN_x4plus\",\n    face_restore: \"GFPGAN\",\n    remove_background: \"strip_background\",\n};\n\nfunction stripWeightsFromPrompt(prompt: string): string {\n    if (!prompt) {\n        return prompt;\n    }\n    // Use a regular expression to match and remove the weights and parentheses\n    const strippedPrompt = prompt.replace(/[:()\\d]+(\\.\\d+)?/g, \"\");\n    return strippedPrompt;\n}\n\nfunction combinePrompts(prompt: string, negativePrompt: string): string {\n    const separator = \"###\";\n    const maxChars = 1000;\n    const maxPromptLength = maxChars - separator.length;\n\n    // If there's no negative prompt, simply truncate the prompt and return it.\n    if (!negativePrompt) {\n        return prompt.substring(0, maxChars);\n    }\n\n    let promptLength = prompt.length;\n    let negativePromptLength = negativePrompt.length;\n\n    if (promptLength + negativePromptLength <= maxPromptLength) {\n        // If the combined length is less than maxPromptLength, no need to truncate\n        return `${prompt}${separator}${negativePrompt}`;\n    }\n\n    // Determine how many characters to take from each prompt\n    let halfLength = Math.floor(maxPromptLength / 2);\n    if (promptLength <= halfLength) {\n        // If the prompt is shorter than half length, take all of it and truncate the negative prompt\n        negativePromptLength = maxPromptLength - promptLength;\n    } else if (negativePromptLength <= halfLength) {\n        // If the negative prompt is shorter than half length, take all of it and truncate the prompt\n        promptLength = maxPromptLength - negativePromptLength;\n    } else {\n        // If both prompts are longer than half length, truncate both\n        promptLength = negativePromptLength = halfLength;\n    }\n\n    // Truncate prompts and combine\n    prompt = prompt.substring(0, promptLength);\n    negativePrompt = negativePrompt.substring(0, negativePromptLength);\n    return `${prompt}${separator}${negativePrompt}`;\n}\n\nexport class HordeGenerator {\n    constructor(readonly client: HordeClient) {}\n\n    // TODO: pass in onProgress callback\n    // onUploadProgress: (progressEvent: any) => {\n    //     const percentCompleted =\n    //         progressEvent.loaded / progressEvent.total;\n    //     setUploadingProgress(percentCompleted);\n    // },\n\n    // TODO: optimize with n > 1\n    async generateImages(\n        input: GenerateImageInput,\n        onUploadProgress?: (progressEvent: any) => void\n    ): Promise<GenerationJob> {\n        let prompt = await addTrigger(input.params.prompt || \"\", input.model);\n        prompt = prompt.trim();\n        let negativePrompt = stripWeightsFromPrompt(\n            input.params.negative_prompt || \"\"\n        );\n        negativePrompt = negativePrompt.trim();\n        prompt = combinePrompts(prompt, negativePrompt);\n        const promises: Promise<LocalImage | null>[] = [];\n        const payload: HordeRequestPayload = {\n            params: {\n                n: input.count,\n                width: input.params.width || 512,\n                height: input.params.height || 512,\n                steps: input.params.steps || 20,\n                karras: true,\n                sampler_name: \"k_euler\",\n                cfg_scale: input.params.cfg_scale || 7.5,\n                denoising_strength: input.params.denoising_strength || 0.75,\n                hires_fix: false,\n                post_processing: [],\n                control_type: input.params.controlnet_type || undefined,\n                seed:\n                    input.params.seed || undefined,\n                loras:\n                    input.params.loras &&\n                    input.params.loras.map((lora) => ({\n                        name: lora.name,\n                        model: lora.strength,\n                        clip: lora.strength,\n                    })),\n            },\n            prompt,\n            nsfw: true,\n            censor_nsfw: false,\n            trusted_workers: false,\n            slow_workers: false,\n            r2: true,\n            models: [input.model],\n            source_processing: \"img2img\",\n        };\n        if (input.encoded_image) {\n            payload.source_image = input.encoded_image;\n        }\n        if (input.encoded_mask) {\n            payload.source_mask = input.encoded_mask;\n            if (input.model.toLocaleLowerCase().indexOf(\"inpainting\") !== -1) {\n                payload.source_processing = \"inpainting\";\n                payload.params.karras = false;\n                payload.params.steps = 50;\n            }\n        }\n        const jobId = await this.client.initiateImageGeneration(payload, onUploadProgress);\n        if (!jobId) {\n            throw new Error(\"Failed to initiate image generation\");\n        }\n        return {\n            id: jobId,\n            model: input.model,\n            params: input.params,\n            status: \"pending\",\n            created_at: moment().valueOf(),\n            progress: 0,\n            count: input.count,\n        };\n    }\n\n    // TODO: optional efficient nsfw check\n    async checkGenerationJob(job: GenerationJob): Promise<GenerationJob> {\n        job = JSON.parse(JSON.stringify(job)) as GenerationJob;\n        const checkResult = await this.client.checkImageJob(job.id);\n        job.status = checkResult.status;\n        job.progress = checkResult.progress;\n        if (job.status === \"completed\") {\n            console.log(\"job is completed\")\n            job.images = [];\n            const results = await this.client.fetchImageResults(job.id);\n            console.log(\"fetch image results\", results.length);\n            for (const result of results) {\n                const image: LocalImage = {\n                    id: uuid.v4(),\n                    status: result.censored ? \"error\" : \"completed\",\n                    error: result.censored ? \"Image was censored\" : undefined,\n                    imageData: `data:image/webp;base64,${result.imageData.toString(\"base64\")}`,\n                    nsfw: false, // TODO: nsfw check\n                    model: job.model,\n                    params: {\n                        ...job.params,\n                        seed: result.seed,\n                    },\n                    created_at: moment().valueOf(),\n                    updated_at: moment().valueOf(),\n                };\n                job.images.push(image);\n            }\n        }\n        console.log(\"checkGenerationJob: job status\", job.status)\n        return job;\n    }\n\n    async checkGenerationJobs(jobs: GenerationJob[]): Promise<GenerationJob[]> {\n        jobs = JSON.parse(JSON.stringify(jobs)) as GenerationJob[];\n        const promises = jobs.map((job) => this.checkGenerationJob(job));\n        return Promise.all(promises);\n    }\n\n    // TODO: change to not need LocalImage\n    async augmentImage(input: AugmentImageInput): Promise<LocalImage> {\n        // copy over image and update id to augmentation request\n        const image = JSON.parse(JSON.stringify(input.image)) as LocalImage;\n        image.status = \"pending\";\n        const payload: AlchemistPayload = {\n            forms: [{ name: augmentationToForm[input.augmentation] }],\n            source_image: input.image.imageData!,\n            slow_workers: false,\n            trusted_workers: false,\n        };\n        console.log(\"alchemist payload\", payload);\n        try {\n            const id = await this.client.initiateAlchemistImageInterrogation(\n                payload\n            );\n            if (!id) {\n                console.error(\n                    \"Failed to initiate alchemist image interrogation\"\n                );\n                image.status = \"error\";\n                image.error =\n                    \"Failed to initiate alchemist image interrogation\";\n                return image;\n            }\n            image.id = id;\n        } catch (e: any) {\n            console.error(\"Failed to augment image\", e);\n            image.status = \"error\";\n            image.error = e.message;\n        }\n        return image;\n    }\n\n    async checkAugmentation(image: LocalImage): Promise<LocalImage> {\n        image = JSON.parse(JSON.stringify(image)) as LocalImage;\n        try {\n            const status = await this.client.checkInterrogationStatus(image.id);\n            image.status = (hordeStateMap[status] || status) as any;\n            if (image.status === \"completed\") {\n                const result = await this.client.fetchInterrogationResult(\n                    image.id\n                );\n                if (typeof result === \"boolean\") {\n                    image.nsfw = result;\n                } else if (typeof result === \"object\") {\n                    const imageData = result as Buffer;\n                    const base64ImageData = imageData.toString(\"base64\");\n                    const src = `data:image/webp;base64,${base64ImageData}`;\n                    image.imageData = src;\n                }\n            }\n        } catch (e: any) {\n            console.error(\"image failed\", e);\n            image.status = \"error\";\n            image.error = e.message;\n        }\n        return image;\n    }\n}\n","import React, { useEffect, useState } from \"react\";\nimport { Navbar, Modal, Form, Button } from \"react-bootstrap\";\nimport axios from \"axios\";\nimport { HordeClient } from \"../lib/hordeclient\";\n\ninterface Props {\n  client: HordeClient;\n}\n\ninterface User {\n    username: string;\n    id: number;\n}\n\nconst HordeUser = ({client}: Props) => {\n    const [user, setUser] = useState<User | null>(null);\n    const [_, setApiKey] = useState<string | null>(null);\n    const [showModal, setShowModal] = useState(false);\n    const [apiKeyInput, setApiKeyInput] = useState(\"\");\n    const [error, setError] = useState<string | null>(null);\n\n    const loadUserFromStorage = () => {\n        const storedUser = localStorage.getItem(\"user\");\n        const storedApiKey = localStorage.getItem(\"apiKey\");\n\n        if (storedUser && storedApiKey) {\n            setUser(JSON.parse(storedUser));\n            setApiKey(storedApiKey);\n            setApiKeyInput(storedApiKey);\n            client.updateApiKey(storedApiKey);\n        }\n    };\n\n    useEffect(() => {\n        loadUserFromStorage();\n    }, []);\n\n    const validateApiKey = async () => {\n        try {\n            const response = await axios.get(\n                \"https://stablehorde.net/api/v2/find_user\",\n                {\n                    headers: {\n                        accept: \"application/json\",\n                        \"Client-Agent\": \"unknown:0:unknown\",\n                        apikey: apiKeyInput,\n                    },\n                }\n            );\n\n            const user: User = response.data;\n            setUser(user);\n            setApiKey(apiKeyInput);\n            localStorage.setItem(\"user\", JSON.stringify(user));\n            localStorage.setItem(\"apiKey\", apiKeyInput);\n            client.updateApiKey(apiKeyInput);\n            setShowModal(false);\n            setError(null);\n        } catch (err) {\n            setError(\"Invalid API key\");\n        }\n    };\n\n    return (\n        <>\n            <span\n                style={{ cursor: \"pointer\", color: \"#00f0f0\" }}\n                className=\"top-button\"\n                onClick={() => setShowModal(true)}\n            >\n                <i className=\"fas fa-user\"></i>&nbsp;\n                {user ? `${user.username}` : \"Anonymous\"}\n            </span>\n\n            <Modal show={showModal} onHide={() => setShowModal(false)}>\n                <Modal.Header closeButton>\n                    <Modal.Title>Enter API Key</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    {/* info about how users can register for an api key at https://aihorde.net/register. Blue info icon */}\n                    <p>\n                        <i className=\"fas fa-info-circle\"></i>&nbsp; You can register to get\n                        an API key at&nbsp;<a target=\"_blank\" href=\"https://aihorde.net/register\">https://aihorde.net/register</a>\n                    </p>\n                    <Form>\n                        <Form.Group controlId=\"formApiKey\">\n                            <Form.Label>API Key</Form.Label>\n                            <Form.Control\n                                type=\"text\"\n                                placeholder=\"Enter API Key\"\n                                value={apiKeyInput}\n                                onChange={(e) => setApiKeyInput(e.target.value)}\n                            />\n                        </Form.Group>\n                        {error && <p style={{ color: \"red\" }}>{error}</p>}\n                    </Form>\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button\n                        variant=\"secondary\"\n                        onClick={() => setShowModal(false)}\n                    >\n                        Cancel\n                    </Button>\n                    <Button variant=\"primary\" onClick={validateApiKey}>\n                        Save\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n        </>\n    );\n};\n\nexport default HordeUser;\n","import axios from 'axios';\nimport { Image } from \"./models\";\n\nexport interface ImageList {\n    images: Image[];\n    nextCursor?: string;\n}\n\nexport class ImageClient {\n    baseUrl: string;\n    manifestId: string | undefined;\n    manifest: { imageIds: string[] } | null = null;\n\n    constructor(baseUrl: string, manifestId: string | undefined) {\n        this.baseUrl = baseUrl;\n        this.manifestId = manifestId;\n    }\n\n    async loadManifest(): Promise<void> {\n        if (!this.manifest && this.manifestId) {\n            const response = await axios.get(`${this.baseUrl}/${this.manifestId}.json`);\n            this.manifest = response.data as { imageIds: string[] };\n            // reverse imageIds in manifest\n            this.manifest.imageIds = this.manifest.imageIds.reverse();\n        }\n    }\n\n    async listImages(query: {\n        cursor?: string;\n        limit?: number;\n        filter?: string;\n    }): Promise<ImageList> {\n        await this.loadManifest();\n\n        if (!this.manifest) {\n            return {\n                images: [],\n            }\n        }\n\n        const { cursor = '', limit = 10, filter = '' } = query;\n        const imageIds = this.manifest.imageIds;\n        let startIndex = cursor ? imageIds.indexOf(cursor) + 1 : 0;\n\n        if (startIndex === -1 || startIndex > imageIds.length) {\n            throw new Error(\"Invalid cursor\");\n        }\n\n        let images: Image[] = [];\n        let nextCursor: string | undefined = undefined;\n\n        while(images.length < limit && startIndex < imageIds.length) {\n            let endIndex = startIndex + (limit - images.length);\n            let selectedImageIds = imageIds.slice(startIndex, endIndex);\n\n            // Load the images from S3\n            let fetchedImages = await Promise.all(selectedImageIds.map(id => this.loadImage(id)));\n\n            // Filter images\n            let filteredImages = fetchedImages.filter(image => \n                (image.params.prompt || \"\").toLowerCase().includes(filter.toLowerCase()));\n\n            images = [...images, ...filteredImages];\n            startIndex = endIndex;\n            nextCursor = imageIds[endIndex];\n        }\n\n        return {\n            images,\n            nextCursor\n        };\n    }\n\n\n    async loadImage(imageId: string): Promise<Image> {\n        const response = await axios.get(`${this.baseUrl}/${imageId}.json`);\n        return response.data;\n    }\n}\n","import React, { useState, useEffect } from \"react\";\nimport * as axios from \"axios\";\nimport { BrowserRouter, Switch, Route, Link } from \"react-router-dom\";\nimport \"./App.css\";\nimport \"./bootstrap.min.css\";\nimport { LocalImagesStore } from \"./lib/localImagesStore\";\nimport { getConfig } from \"./config\";\nimport { ImageEditor } from \"./pages/image-editor/ImageEditor\";\n\n// V2 UI\nimport { Homepage } from \"./pages/Homepage\";\nimport { DiscordLogin } from \"./pages/DiscordLogin\";\nimport { LocalDeletedImages } from \"./pages/LocalDeletedImages\";\nimport { SavedImagesPage } from \"./pages/SavedImagesPage\";\nimport { TestPage } from \"./pages/TestPage\";\nimport { CreditsBalance } from \"./components/CreditsBalance\";\nimport { HordeGenerator } from \"./lib/hordegenerator\";\nimport { HordeClient } from \"./lib/hordeclient\";\nimport HordeUser from \"./components/HordeUser\";\nimport { ImageClient } from \"./lib/savedimages\";\n\nconst localImages = new LocalImagesStore();\nconst hordeClient = new HordeClient(localStorage.getItem(\"apiKey\") || \"0000000000\");\nconst generator = new HordeGenerator(hordeClient);\n\n// get manifest_id from query string params\nfunction getManifestId(): string | undefined {\n    let manifestId: string | undefined =\n        localStorage.getItem(\"manifest_id\") || undefined;\n    if (manifestId) {\n        return manifestId;\n    }\n    const urlParams = new URLSearchParams(window.location.search);\n    manifestId = urlParams.get(\"manifest_id\") || undefined;\n    if (manifestId) {\n        localStorage.setItem(\"manifest_id\", manifestId);\n    }\n    return manifestId;\n}\n\nconst manifestId = getManifestId();\nconst imageClient = new ImageClient(\n    \"https://aibrush2-filestore.s3.amazonaws.com\",\n    manifestId\n);\n\nfunction App() {\n    const init = async () => {\n        console.log(\"App.init\");\n        await localImages.init();\n    };\n\n    useEffect(() => {\n        init();\n    }, []);\n\n    return (\n        <div className=\"App\">\n            <BrowserRouter>\n                <div className=\"container\">\n                    <div className=\"row\">\n                        <div className=\"col-lg-12\">\n                            <>\n                                {/* saved images */}\n                                <Link\n                                    className=\"btn btn-primary top-button\"\n                                    to=\"/saved\"\n                                >\n                                    {/* font awesome save icon */}\n                                    <i className=\"fas fa-save\"></i>\n                                </Link>\n                                {/* home button */}\n                                <Link\n                                    className=\"btn btn-primary top-button\"\n                                    to=\"/\"\n                                >\n                                    {/* font awesome home icon */}\n                                    <i className=\"fas fa-home\"></i>\n                                </Link>\n                                {/* Link to discord */}\n                                <a\n                                    className=\"btn btn-primary top-button\"\n                                    href=\"https://discord.gg/HYcFpDeqKJ\"\n                                    target=\"_blank\"\n                                >\n                                    {/* font awesome discord icon */}\n                                    <i className=\"fab fa-discord\"></i>\n                                </a>\n                                {/* link to github */}\n                                <a\n                                    className=\"btn btn-primary top-button\"\n                                    href=\"https://github.com/wolfgangmeyers/aibrush-2\"\n                                    target=\"_blank\"\n                                >\n                                    {/* font awesome github icon */}\n                                    <i className=\"fab fa-github\"></i>\n                                </a>\n                                <HordeUser client={hordeClient} />\n                            </>\n                        </div>\n                        <div\n                            className=\"col-lg-12\"\n                            style={{ textAlign: \"right\" }}\n                        >\n                            {/* TODO: replace with KudosBalance */}\n                            {/* <CreditsBalance\n                                api={client}\n                                apisocket={apiSocket}\n                            /> */}\n                        </div>\n                    </div>\n\n                    {/* if credentials are set, show the rest of the app */}\n\n                    <Switch>\n                        <Route path=\"/\" exact={true}>\n                            {/* <MainMenu isAdmin={isAdmin} /> */}\n                            <Homepage\n                                localImages={localImages}\n                                generator={generator}\n                                imageClient={imageClient}\n                            />\n                        </Route>\n                        <Route path=\"/images/:id\">\n                            <Homepage\n                                localImages={localImages}\n                                generator={generator}\n                                imageClient={imageClient}\n                            />\n                        </Route>\n                        <Route path=\"/saved\" exact={true}>\n                            {/* <MainMenu isAdmin={isAdmin} /> */}\n                            <SavedImagesPage\n                                imageClient={imageClient}\n                            />\n                        </Route>\n                        <Route path=\"/saved/:id\" exact={true}>\n                            {/* <MainMenu isAdmin={isAdmin} /> */}\n                            <SavedImagesPage\n                                imageClient={imageClient}\n                            />\n                        </Route>\n                        <Route path=\"/image-editor/:id\">\n                            <ImageEditor\n                                generator={generator}\n                                localImages={localImages}\n                                imageClient={imageClient}\n                            />\n                        </Route>\n                        <Route path=\"/local-deleted-images\">\n                            <LocalDeletedImages localImages={localImages} />\n                        </Route>\n                        <Route path=\"/testpage\">\n                            <TestPage />\n                        </Route>\n                    </Switch>\n                    <div\n                        // style={{ marginTop: \"100px\", padding: \"50px\" }}\n\n                        // use position:fixed to make the footer stick to the bottom of the page\n                        style={{\n                            position: \"fixed\",\n                            bottom: \"0\",\n                            left: \"0\",\n                            width: \"100%\",\n                            height: \"50px\",\n                            paddingTop: \"16px\",\n                            backgroundColor: \"#000000\",\n                        }}\n                    >\n                        {/* show external popout pages to terms and privacy policy, if they are present in the features */}\n                            <a href=\"https://www.termsfeed.com/live/4f40dfff-6360-40cb-82bd-ac31dcb250e8\" target=\"_blank\">\n                                Privacy Policy\n                            </a>\n                            <a\n                                href=\"https://www.termsfeed.com/live/03dfa444-2227-4654-954d-98a6dbe297fd\"\n                                target=\"_blank\"\n                                style={{ marginLeft: \"20px\" }}\n                            >\n                                Terms of Service\n                            </a>\n                        {/* link to mail to admin@aibrush.art */}\n                        <a\n                            href=\"mailto:admin@aibrush.art\"\n                            style={{ marginLeft: \"20px\" }}\n                        >\n                            Contact\n                        </a>\n                        <span style={{ float: \"right\", marginRight: \"50px\" }}>\n                            Powered by the{\" \"}\n                            <a href=\"https://stablehorde.net/\" target=\"_blank\">\n                                Stable Horde\n                            </a>\n                        </span>\n                    </div>\n                </div>\n            </BrowserRouter>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import React, { FC, useEffect, useRef, useState } from \"react\";\nimport { Modal } from \"react-bootstrap\";\nimport { propTypes } from \"react-bootstrap/esm/Image\";\n\ninterface Props {\n    show: boolean;\n    title?: string;\n}\n\n// Show modal with child contents\nexport const BusyModal: FC<Props> = ({ show, title, children }) => {\n    return (\n        <Modal show={show} backdrop=\"static\" keyboard={false}>\n            <Modal.Header closeButton>\n                <Modal.Title>{title || \"Processing\"}</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                {children || (\n                    <div className=\"d-flex justify-content-center\">\n                        <div className=\"spinner-border\" role=\"status\">\n                            <span className=\"sr-only\">Please Wait...</span>\n                        </div>\n                    </div>\n                )}\n            </Modal.Body>\n        </Modal>\n    );\n};\n","import { Item } from \"./civit_loras\";\nimport { KVStore } from \"./kvstore\";\nimport { recentLoras as recentList } from \"./recentList\";\n\nexport class RecentLoras {\n    private kvstore: KVStore<Item>;\n\n    constructor() {\n        this.kvstore = new KVStore<Item>({\n            dbName: \"saved-loras\",\n            storeName: \"loras\",\n        });\n        this.migrateToIDs();\n    }\n\n    async migrateToIDs(): Promise<void> {\n        console.log(\"migrateToIDs\");\n        const recentLoras = recentList.getItems();\n        let migrateRequired = false;\n        for (let id of recentLoras) {\n            console.log(\"id\", id);\n            // is id formatted as an integer?\n            if (!id.match(/^\\d+$/)) {\n                migrateRequired = true;\n                break;\n            }\n        }\n        if (migrateRequired) {\n            console.log(\"one-time migration of recent loras to int keys\");\n            recentList.clear();\n            recentLoras.reverse();\n            for (const name of recentLoras) {\n                const lora = await this.kvstore.getItem(name);\n                if (lora) {\n                    recentList.addItem(lora.id.toString());\n                    await this.kvstore.deleteItem(name);\n                    await this.kvstore.setItem(lora.id.toString(), lora);\n                }\n            }\n        }\n    }\n\n    async listRecentLoras(): Promise<Item[]> {\n        const recentLoraIDs = recentList.getItems();\n        const result: Item[] = [];\n        for (const loraID of recentLoraIDs) {\n            const savedLora = await this.kvstore.getItem(loraID);\n            if (savedLora) {\n                result.push(savedLora);\n            }\n        }\n        return result;\n    }\n\n    async getLora(loraID: string): Promise<Item | null> {\n        console.log(\"getLora\", loraID);\n        return await this.kvstore.getItem(loraID);\n    }\n\n    async addLora(lora: Item): Promise<void> {\n        const loraId = lora.id.toString();\n        await this.kvstore.setItem(loraId, lora);\n        const removed = recentList.addItem(loraId);\n        if (removed) {\n            await this.kvstore.deleteItem(removed);\n        }\n    }\n}\n\nexport const recentLoras = new RecentLoras();","import React, { FC, useEffect, useState, useCallback } from \"react\";\nimport axios from \"axios\";\nimport Modal from \"react-bootstrap/Modal\";\nimport Button from \"react-bootstrap/Button\";\nimport Form from \"react-bootstrap/Form\";\nimport Alert from \"react-bootstrap/Alert\";\nimport DOMPurify from \"dompurify\";\nimport ReactInfiniteScroll from \"react-infinite-scroll-component\";\n\nimport { Item } from \"../lib/civit_loras\";\nimport { Col, ListGroup, Row } from \"react-bootstrap\";\nimport { LoraConfig } from \"../client\";\nimport { recentLoras } from \"../lib/recentLoras\";\n\n// https://chat.openai.com/share/34a593c7-a8e5-4490-9cc7-8a1d019b8b82\n\nexport interface SelectedLora {\n    config: LoraConfig;\n    lora: Item;\n}\n\ninterface LoraModalProps {\n    onConfirm: (lora: SelectedLora) => void;\n    onCancel: () => void;\n}\n\nexport async function selectedLorasFromConfigs(configs: LoraConfig[]): Promise<SelectedLora[]> {\n    const loras = await Promise.all(configs.map(config => recentLoras.getLora(config.name)));\n    const selectedLoras: SelectedLora[] = [];\n    for (let i = 0; i < loras.length; i++) {\n        if (loras[i]) {\n            const config = configs[i];\n            selectedLoras.push({\n                config,\n                lora: loras[i]!\n            });\n        }\n    }\n    return selectedLoras;\n}\n\nexport const LoraModal: FC<LoraModalProps> = ({ onConfirm, onCancel }) => {\n    const [inputValue, setInputValue] = useState(\"\");\n    const [strength, setStrength] = useState(1);\n    const [item, setItem] = useState<Item | null>(null);\n    const [recentItems, setRecentItems] = useState<Item[]>([]);\n    const [error, setError] = useState<string | null>(null);\n    const [busy, setBusy] = useState(false);\n\n    const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setInputValue(event.target.value);\n    };\n\n    const handleSearch = useCallback(async () => {\n        const modelId = inputValue.match(/(\\d+)/)?.[0] || inputValue;\n\n        if (!modelId) {\n            setError(\"Invalid input\");\n            return;\n        }\n\n        setBusy(true);\n        try {\n            const response = await axios.get(\n                `https://civitai.com/api/v1/models/${modelId}`\n            );\n            setItem(response.data);\n            setError(null);\n        } catch (error) {\n            setError(\"Failed to fetch data\");\n        } finally {\n            setBusy(false);\n        }\n    }, [inputValue]);\n\n    const handleConfirm = () => {\n        recentLoras.addLora(item!);\n        onConfirm({\n            config: {\n                name: `${item!.id}`,\n                strength,\n            },\n            lora: item!,\n        })\n    }\n\n    useEffect(() => {\n        // Fetch recent Loras when component mounts\n        const fetchRecentLoras = async () => {\n            const items = await recentLoras.listRecentLoras();\n            setRecentItems(items);\n        };\n        fetchRecentLoras();\n    }, []);\n\n    const renderContent = () => {\n        if (error) {\n            return <Alert variant=\"danger\">{error}</Alert>;\n        }\n\n        if (item) {\n            return (\n                <div>\n                    <h5>{item.name}</h5>\n                    <div\n                        dangerouslySetInnerHTML={{\n                            __html: DOMPurify.sanitize(item.description),\n                        }}\n                    />\n\n                    <p>Allow Commercial Use: {item.allowCommercialUse}</p>\n                    <p>Creator: {item.creator.username}</p>\n\n                    <h6>Tags:</h6>\n                    <div style={{ marginBottom: \"16px\" }}>\n                        {item.tags.map((tag, index) => (\n                            // <li key={index}>{tag}</li>\n                            // comma separated instead\n                            <span key={index}>\n                                {tag}\n                                {index < item.tags.length - 1 && \", \"}\n                            </span>\n                        ))}\n                    </div>\n\n                    <h6>Model Versions:</h6>\n                    {/* TODO: support multiple model versions in the horde */}\n                    {item.modelVersions.slice(0, 1).map((version, index) => (\n                        <div key={index}>\n                            <strong>{version.name}</strong>\n                            <p>Base Model: {version.baseModel}</p>\n\n                            <strong>Trained Words:</strong>\n                            <ul>\n                                {version.trainedWords.map((word, idx) => (\n                                    <li key={idx}>{word}</li>\n                                ))}\n                            </ul>\n\n                            <strong>Images:</strong>\n                            <div className=\"row\">\n                                {version.images.map((image, idx) => (\n                                    <div\n                                        key={idx}\n                                        className=\"col-sm-4 col-md-3\"\n                                    >\n                                        <div className=\"thumbnail\">\n                                            <img\n                                                src={image.url}\n                                                alt=\"\"\n                                                style={{\n                                                    maxWidth: \"100%\",\n                                                    height: \"auto\",\n                                                    marginBottom: \"16px\",\n                                                }}\n                                            />\n                                        </div>\n                                    </div>\n                                ))}\n                            </div>\n                        </div>\n                    ))}\n                </div>\n            );\n        }\n\n        return null;\n    };\n\n    const filteredItems = recentItems.filter((recentItem) =>\n        recentItem.name.toLowerCase().includes(inputValue.toLowerCase()) || recentItem.id.toString() === inputValue\n    );\n\n    return (\n        <Modal show onHide={onCancel} size=\"xl\">\n            <Modal.Header closeButton>\n                <Modal.Title>Enter LORA URL or Model Number</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                {!item && (\n                    <>\n                        <Form\n                            onSubmit={(e) => {\n                                e.preventDefault();\n                                handleSearch();\n                            }}\n                        >\n                            <Form.Group as={Row}>\n                                <Col sm={10}>\n                                    <Form.Control\n                                        type=\"text\"\n                                        placeholder=\"Enter LORA URL or Model Number\"\n                                        value={inputValue}\n                                        onChange={handleInputChange}\n                                    />\n                                </Col>\n                                <Col sm={2}>\n                                    <Button\n                                        variant=\"primary\"\n                                        onClick={handleSearch}\n                                        disabled={busy || !inputValue}\n                                    >\n                                        {busy ? \"Loading...\" : \"Search\"}\n                                    </Button>\n                                </Col>\n                            </Form.Group>\n                        </Form>\n                        <h5 className=\"mt-3\">Recently Used Loras:</h5>\n                        <ListGroup style={{maxHeight: \"500px\", overflowY: \"auto\"}}>\n                            {filteredItems.map((recentItem, index) => (\n                                <ListGroup.Item key={index} action onClick={() => setItem(recentItem)}>\n                                    {recentItem.name}\n                                </ListGroup.Item>\n                            ))}\n                        </ListGroup>\n                    </>\n                )}\n                {/* show a strength slider only if an item has been loaded */}\n                {item && (\n                    <Form.Group as={Row}>\n                        <Form.Label column sm={2}>\n                            Strength: {strength}\n                        </Form.Label>\n                        <Col sm={10}>\n                            <Form.Control\n                                type=\"range\"\n                                min={0}\n                                max={5}\n                                step={0.1}\n                                value={strength}\n                                onChange={(e) =>\n                                    setStrength(parseFloat(e.target.value))\n                                }\n                            />\n                        </Col>\n                    </Form.Group>\n                )}\n                {renderContent()}\n            </Modal.Body>\n            <Modal.Footer>\n                <Button variant=\"secondary\" onClick={onCancel}>\n                    Cancel\n                </Button>\n                <Button\n                    variant=\"primary\"\n                    disabled={!item}\n                    onClick={() => handleConfirm()}\n                >\n                    OK\n                </Button>\n            </Modal.Footer>\n        </Modal>\n    );\n};\n","import { FC } from \"react\";\n\ninterface Props {\n    imagesCost: number;\n}\n\n//TODO: restore when doing kudos cost calculation\nexport const CostIndicator: FC<Props> = ({ imagesCost }) => {\n    return (\n        // <div style={{ textAlign: \"left\" }}>\n        //     <span className=\"helptext\" style={{ color: \"#00f0f0\" }}>\n        //         Cost: {imagesCost} credit{imagesCost > 1 ? \"s\" : \"\"}&nbsp;\n        //         <i\n        //             className=\"fas fa-info-circle\"\n        //             style={{ cursor: \"pointer\" }}\n        //             onClick={() =>\n        //                 alert(\n        //                     \"The cost is based on the image count and the size of each image. A single 512x512 image costs 1 credit.\"\n        //                 )\n        //             }\n        //         ></i>\n        //     </span>\n        // </div>\n        <></>\n    );\n};\n","import { FC } from \"react\";\n\ninterface Props {\n    progress: number;\n}\n\nexport const ProgressBar: FC<Props> = ({ progress }) => {\n    return (\n        <div className=\"progress\" style={{ height: \"20px\", marginTop: \"16px\" }}>\n            <div\n                className=\"progress-bar\"\n                role=\"progressbar\"\n                style={{ width: `${progress * 100}%` }}\n                aria-valuenow={progress * 100}\n                aria-valuemin={0}\n                aria-valuemax={100}\n            >\n                {Math.round(progress * 100)}%\n            </div>\n        </div>\n    );\n};\n","export function sleep(ms: number): Promise<void> {\n    return new Promise(resolve => window.setTimeout(resolve, ms));\n}\n","const BASE_IMAGE_SIZE = 512 * 512;\n\nexport function calculateImagesCost(count: number, width: number, height: number): number {\n    // 512x512 = 1 credit\n    // floor(count * width * height / 512 / 512)\n    return Math.max(count * Math.floor(width * height / BASE_IMAGE_SIZE), 1);\n}","import { FC } from \"react\";\nimport { LoraConfig } from \"../client\";\nimport { SelectedLora } from \"./LoraSelector\";\n\ninterface Props {\n    onRemove: (lora: SelectedLora) => void;\n    lora: SelectedLora;\n}\n\n// style the button like this:\n// <button\n//     type=\"button\"\n//     className=\"btn btn-secondary light-button\"\n//     style={{ marginLeft: \"8px\" }}\n//     onClick={() => setSelectingLora(true)}\n// >\n//     <i className=\"fas fa-plus\"></i>&nbsp;Add Lora\n// </button>\n\n// the button should have an \"X\" icon, and when you click the icon the onRemove function should be called\n// show the name of the lora and the strength\nexport const SelectedLoraTag: FC<Props> = ({ onRemove, lora }) => {\n    return <button\n        type=\"button\"\n        className=\"btn btn-secondary light-button\"\n        style={{ marginLeft: \"8px\", cursor: \"default\" }}\n    >\n        {lora.lora.name}\n        &nbsp;\n        <i className=\"fas fa-times\" style={{cursor: \"pointer\"}} onClick={() => onRemove(lora)}></i>\n    </button>;\n};","import { FC } from \"react\";\nimport { OverlayTrigger, Tooltip } from \"react-bootstrap\";\nimport { SelectedLora } from \"./LoraSelector\";\n\ninterface Props {\n    prompt: string;\n    selectedLoras: SelectedLora[];\n    onAddTrigger: (trigger: string) => void;\n}\n\nexport const LoraTriggers: FC<Props> = ({\n    prompt,\n    selectedLoras,\n    onAddTrigger,\n}) => {\n    const allTriggers = [];\n    for (const lora of selectedLoras) {\n        for (let trigger of lora.lora.modelVersions[0].trainedWords) {\n            if (\n                prompt.toLowerCase().indexOf(trigger.toLowerCase()) === -1 &&\n                allTriggers.indexOf(trigger) === -1\n            ) {\n                allTriggers.push(trigger);\n            }\n        }\n    }\n\n    const renderTooltip = (trigger: string) => (\n        <Tooltip id=\"button-tooltip\">{trigger}</Tooltip>\n    );\n\n    return (\n        <div style={{textAlign: \"left\", padding: \"8px\"}}>\n            <h5>Available Triggers</h5>\n            {allTriggers.map((trigger, index) => (\n                <OverlayTrigger\n                    key={index}\n                    placement=\"top\"\n                    overlay={renderTooltip(trigger)}\n                >\n                    <span\n                        className=\"badge bg-secondary me-2\"\n                        style={{ cursor: \"pointer\", marginRight: \"8px\" }}\n                        onClick={() => onAddTrigger(trigger)}\n                    >\n                        <i className=\"fas fa-plus ms-2\"></i>&nbsp;\n                        {trigger.length > 20 ? trigger.slice(0, 20) + \"...\" : trigger}\n                    </span>\n                </OverlayTrigger>\n            ))}\n        </div>\n    );\n};\n","import React, { FC, useEffect, useState } from \"react\";\nimport moment from \"moment\";\nimport { Image, StatusEnum } from \"../client/api\";\nimport { LocalImage } from \"../lib/models\";\n\ninterface Props {\n    image: LocalImage;\n    censorNSFW: boolean;\n    bulkDelete?: boolean;\n    onClick?: (image: LocalImage) => void;\n}\n\nexport const ImageThumbnail: FC<Props> = ({ image, censorNSFW, bulkDelete, onClick }) => {\n    const src = `https://aibrush2-filestore.s3.amazonaws.com/${image.id}.thumbnail.png?updated_at=${image.updated_at}`;\n\n    let label = image.label || \"\";\n    if (image.label === \"\") {\n        label = image.params.prompt || \"\";\n    }\n    if (label.indexOf(\",\") !== -1) {\n        label = label.substring(0, label.indexOf(\",\"));\n    }\n    \n    let className = \"image-thumbnail\";\n    if (bulkDelete) {\n        className += \" bulk-delete\";\n    }\n\n    let backgroundImage = `url(${src}), url(/images/default.png)`;\n    if (image.imageData) {\n        backgroundImage = `url(${image.imageData}), url(/images/default.png)`;\n    }\n\n    return (\n        <div\n            className={className}\n            style={{\n                backgroundImage,\n                backgroundRepeat: \"no-repeat\",\n                backgroundPosition: \"center\",\n                filter: (image.nsfw && censorNSFW) ? \"blur(8px)\" : undefined,\n            }}\n            onClick={() => onClick && onClick(image)}\n        >\n            {!bulkDelete && <div className=\"image-thumbnail-label\">\n                {label}\n            </div>}\n\n            {bulkDelete && <div className=\"image-thumbnail-label\">\n                <input type=\"checkbox\" style={{\n                    width: \"20px\",\n                    height: \"20px\",\n                    marginLeft: \"16px\",\n                    marginTop: \"16px\",\n                }} checked readOnly />\n            </div>}\n\n            {image.status === StatusEnum.Pending && <div className=\"image-thumbnail-pending\">\n                <i style={{marginTop: \"20px\"}} className=\"fa fa-hourglass-half\"></i>\n            </div>}\n            {\n                image.status === StatusEnum.Processing && <div className=\"image-thumbnail-pending\">\n                    <i style={{marginTop: \"20px\"}} className=\"fa fa-cog fa-spin\"></i>\n                </div>\n            }\n        </div>\n    );\n};\n","\n// canny, hed, depth, normal, openpose, seg, scribble, fakescribbles, hough\nexport const controlnetTypes = [\n    \"canny\",\n    \"hed\",\n    \"depth\",\n    \"normal\",\n    \"openpose\",\n    \"seg\",\n    \"scribble\",\n    \"fakescribbles\",\n    \"hough\",\n]","import { FC, useState, FormEvent } from \"react\";\nimport { Form, FormGroup, FormControl, FormText, FormCheck } from \"react-bootstrap\";\n\ninterface Props {\n    seed: string;\n    setSeed: (seed: string) => void;\n}\n\nexport const SeedInput: FC<Props> = ({seed, setSeed}) => {\n    const [useCustomSeed, setUseCustomSeed] = useState(false);\n\n    const onChangeCustomSeed = () => {\n        setUseCustomSeed(!useCustomSeed);\n        if (useCustomSeed) {\n            setSeed(\"\");\n        } else {\n            // set seed to a random number\n            setSeed(Math.floor(Math.random() * 1000000000).toString());\n        }\n    };\n\n    return (\n        <Form>\n            <FormGroup>\n                <FormCheck \n                    type=\"checkbox\"\n                    label=\"Use Custom Seed\"\n                    checked={useCustomSeed}\n                    onChange={(e) => onChangeCustomSeed()}\n                />\n            </FormGroup>\n\n            {useCustomSeed && (\n                <FormGroup>\n                    <FormControl\n                        type=\"text\"\n                        // value={seed}\n                        // onChange={(e) => setSeed(e.target.value)}\n                        placeholder=\"Enter seed\"\n                        value={seed}\n                        onChange={(e: any) => setSeed(e.target.value)}\n                    />\n                </FormGroup> \n            )}\n        </Form>\n    );\n};\n","import React, { useState } from \"react\";\nimport { InputGroup, FormControl, Dropdown } from \"react-bootstrap\";\n\ninterface TextInputWithHistoryProps {\n    value: string;\n    onChange: (newValue: string) => void;\n    history: string[];\n}\n\nconst TextInputWithHistory: React.FC<TextInputWithHistoryProps> = ({\n    value,\n    onChange,\n    history,\n}) => {\n    const [show, setShow] = useState(false);\n\n    const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        onChange(event.target.value);\n    };\n\n    const handleDropdownSelect = (eventKey: string | null) => {\n        if (eventKey) {\n            onChange(eventKey);\n        }\n        setShow(false);\n    };\n\n    const handleInputClick = () => {\n        setShow(!show);\n    };\n\n    return (\n        <div>\n            <FormControl\n                value={value}\n                onChange={handleInputChange}\n                onClick={handleInputClick}\n                onBlur={() => {\n                    setTimeout(() => setShow(false), 200);\n                }}\n            />\n            <Dropdown show={show} onSelect={handleDropdownSelect}>\n                <Dropdown.Toggle\n                    variant=\"success\"\n                    id=\"dropdown-basic\"\n                    style={{ height: \"0px\", padding: \"0px\", visibility: \"hidden\", position: \"absolute\" }}\n                />\n                <Dropdown.Menu style={{width: \"100%\", overflow: \"hidden\"}}>\n                    {history.map((item, index) => (\n                        <Dropdown.Item eventKey={item} key={index}>\n                            {item}\n                        </Dropdown.Item>\n                    ))}\n                </Dropdown.Menu>\n            </Dropdown>\n        </div>\n    );\n};\n\nexport default TextInputWithHistory;\n","import React, { FC, useEffect, useState } from \"react\";\nimport {\n    CreateImageInput,\n    StatusEnum,\n    Image,\n    AIBrushApi,\n    LoraConfig,\n} from \"../client\";\nimport {\n    aspectRatios,\n    DEFAULT_ASPECT_RATIO,\n    getClosestAspectRatio,\n    AspectRatio,\n} from \"../lib/aspecRatios\";\nimport loadImage from \"blueimp-load-image\";\nimport { AspectRatioSelector } from \"./AspectRatioSelector\";\nimport { getUpscaleLevel } from \"../lib/upscale\";\nimport { resizeEncodedImage } from \"../lib/imageutil\";\nimport { LocalImage } from \"../lib/models\";\nimport { controlnetTypes } from \"../lib/supportedModels\";\nimport { SeedInput } from \"./SeedInput\";\nimport ModelSelector from \"./ModelSelector\";\nimport { calculateImagesCost } from \"../lib/credits\";\nimport { CostIndicator } from \"./CostIndicator\";\nimport { recentPrompts, recentNegativePrompts } from \"../lib/recentList\";\nimport TextInputWithHistory from \"./TextInputWithHistory\";\nimport {\n    LoraModal,\n    SelectedLora,\n    selectedLorasFromConfigs,\n} from \"./LoraSelector\";\nimport { SelectedLoraTag } from \"./SelectedLora\";\nimport { LoraTriggers } from \"./LoraTriggers\";\nimport { recentLoras } from \"../lib/recentLoras\";\nimport { Item } from \"../lib/civit_loras\";\n\ninterface Props {\n    parent: LocalImage | null;\n    creating: boolean;\n    onSubmit: (input: CreateImageInput) => void;\n    // go straight to editor without variations\n    onEdit: (input: CreateImageInput) => void;\n    onCancel: () => void;\n}\n\nexport function defaultArgs(): CreateImageInput {\n    return {\n        params: {\n            prompt: \"\",\n            negative_prompt: defaultNegativePrompt(),\n            width: 512,\n            height: 512,\n            steps: 20,\n            denoising_strength: 0.75,\n        },\n        label: \"\",\n        encoded_image: \"\",\n        encoded_mask: \"\",\n        model: \"Epic Diffusion\",\n        count: 4,\n    };\n}\n\nfunction defaultNegativePrompt(): string {\n    return (\n        recentNegativePrompts.getItems()[0] ||\n        \"low quality, distorted, deformed, dull, boring, plain, ugly, noise\"\n    );\n}\n\nexport const ImagePrompt: FC<Props> = ({\n    parent,\n    creating,\n    onSubmit,\n    onCancel,\n    onEdit,\n}) => {\n    const [prompt, setPrompt] = useState<string>(\"\");\n    const [negativePrompt, setNegativePrompt] = useState<string>(\n        defaultNegativePrompt()\n    );\n    const [count, setCount] = useState<number>(4);\n    const [variationStrength, setVariationStrength] = useState<number>(0.75);\n    const [aspectRatio, setAspectRatio] =\n        useState<number>(DEFAULT_ASPECT_RATIO);\n    const [parentId, setParentId] = useState<string | null>(null);\n    const [advancedView, setAdvancedView] = useState<boolean>(false);\n    const [encodedImage, setEncodedImage] = useState<string>(\"\");\n    const [model, setModel] = useState<string>(\"Epic Diffusion\");\n\n    const [selectingModel, setSelectingModel] = useState<boolean>(false);\n\n    const [controlnetType, setControlnetType] = useState<string | undefined>();\n    const [cfgScale, setCfgScale] = useState<number>(7.5);\n    const [seed, setSeed] = useState<string>(\"\");\n    const [size, setSize] = useState<number>(1);\n\n    const [selectingLora, setSelectingLora] = useState<boolean>(false);\n    const [selectedLoras, setSelectedLoras] = useState<SelectedLora[]>([]);\n\n    const defaultAspectRatio = aspectRatios[DEFAULT_ASPECT_RATIO];\n\n    const [aspectRatioDetails, setAspectRatioDetails] = useState<AspectRatio>(\n        aspectRatios[DEFAULT_ASPECT_RATIO]\n    );\n    let [originalWidth, setOriginalWidth] = useState<number>(\n        defaultAspectRatio.width\n    );\n    let [originalHeight, setOriginalHeight] = useState<number>(\n        defaultAspectRatio.height\n    );\n\n    // const aspectRatioDetails = aspectRatios[aspectRatio];\n\n    const resetState = () => {\n        setPrompt(\"\");\n        setNegativePrompt(\n            recentNegativePrompts.getItems()[0] || defaultNegativePrompt\n        );\n        // setCount(4);\n        setAdvancedView(false);\n        setParentId(null);\n        // setVariationStrength(0.75);\n        setAspectRatio(DEFAULT_ASPECT_RATIO);\n        setAspectRatioDetails(aspectRatios[DEFAULT_ASPECT_RATIO]);\n        setEncodedImage(\"\");\n        // setCfgScale(7.5);\n        setSeed(\"\");\n    };\n\n    const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\n        if (negativePrompt) {\n            recentNegativePrompts.addItem(negativePrompt);\n        }\n        e.preventDefault();\n        const args = defaultArgs();\n        args.params.prompt = prompt || \"\";\n        args.params.negative_prompt = negativePrompt || \"\";\n        args.count = seed ? 1 : count;\n        args.parent = parentId || undefined;\n        args.params.denoising_strength = variationStrength;\n        args.nsfw = true;\n        args.model = model;\n        args.temporary = true;\n        args.params.controlnet_type = controlnetType as any;\n        args.params.cfg_scale = cfgScale;\n        args.params.seed = seed || undefined;\n        args.params.loras = selectedLoras.map((l) => l.config);\n        if (parent) {\n            const bestMatch = getClosestAspectRatio(\n                parent.params.width!,\n                parent.params.height!\n            ).scale(size);\n            args.params.width = bestMatch.width;\n            args.params.height = bestMatch.height;\n        } else {\n            const bestMatch = getClosestAspectRatio(\n                aspectRatioDetails.width,\n                aspectRatioDetails.height\n            ).scale(size);\n            args.params.width = bestMatch.width;\n            args.params.height = bestMatch.height;\n        }\n        if (encodedImage) {\n            args.encoded_image = await resizeEncodedImage(\n                encodedImage,\n                args.params.width,\n                args.params.height,\n                \"png\"\n            );\n        }\n\n        resetState();\n        onSubmit(args);\n    };\n\n    const handleEdit = () => {\n        if (negativePrompt) {\n            recentNegativePrompts.addItem(negativePrompt);\n        }\n        const args = defaultArgs();\n        args.params.prompt = prompt || \"\";\n        args.params.negative_prompt = negativePrompt || \"\";\n        args.count = 1;\n        args.parent = parentId || undefined;\n        // args.stable_diffusion_strength = variationStrength;\n        args.params.denoising_strength = variationStrength;\n        args.status = StatusEnum.Completed;\n        args.params.width = originalWidth;\n        args.params.height = originalHeight;\n        args.params.cfg_scale = cfgScale;\n        args.nsfw = false;\n        args.model = model;\n        if (encodedImage) {\n            args.encoded_image = encodedImage;\n        }\n\n        resetState();\n        onEdit(args);\n    };\n\n    const handleCancel = () => {\n        resetState();\n        onCancel();\n    };\n\n    const onSelectModel = (model: string) => {\n        setModel(model);\n        setSelectingModel(false);\n    };\n\n    const onImageSelected = async (e: React.ChangeEvent<HTMLInputElement>) => {\n        const file = e.target.files && e.target.files[0];\n        if (!file) {\n            return;\n        }\n        loadImage(\n            file,\n            (img: Event | HTMLImageElement | HTMLCanvasElement) => {\n                if (!(img instanceof HTMLCanvasElement)) {\n                    return;\n                }\n                // try to match width and height to a supported aspect ratio\n                const width = img.width;\n                const height = img.height;\n                let bestMatch = getClosestAspectRatio(width, height);\n\n                const canvas = document.createElement(\"canvas\");\n                // canvas.width = bestMatch.width;\n                // canvas.height = bestMatch.height;\n                canvas.width = width;\n                canvas.height = height;\n                const ctx = canvas.getContext(\"2d\");\n                if (!ctx) {\n                    return;\n                }\n                ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n\n                // convert image to base64\n                // const canvas = img as HTMLCanvasElement\n                const dataUrl = canvas.toDataURL(\"image/png\");\n                const base64 = dataUrl.split(\",\")[1];\n                setEncodedImage(base64);\n                // get the index of the best match\n                setAspectRatio(\n                    aspectRatios.findIndex((a) => a.id === bestMatch.id)\n                );\n                setAspectRatioDetails(bestMatch);\n                setOriginalWidth(width);\n                setOriginalHeight(height);\n                // remove canvas\n                canvas.remove();\n            },\n            {\n                maxWidth: 4096,\n                maxHeight: 4096,\n                canvas: true,\n            }\n        );\n    };\n\n    useEffect(() => {\n        if (parent) {\n            const imageData = parent.imageData;\n            if (imageData) {\n                setEncodedImage(imageData.split(\",\")[1]);\n            }\n            setPrompt(parent.params.prompt || \"\");\n            setNegativePrompt(\n                parent.params.negative_prompt || defaultNegativePrompt()\n            );\n            setCount(4);\n            setParentId(parent.id);\n            setAdvancedView(true);\n            setVariationStrength(parent.params.denoising_strength || 0.75);\n            setModel(parent.model);\n            setCfgScale(parent.params.cfg_scale || 7.5);\n            if (parent.params.loras && parent.params.loras.length > 0) {\n                selectedLorasFromConfigs(parent.params.loras).then((loras) => {\n                    setSelectedLoras(loras);\n                });\n            } else if (selectedLoras.length > 0) {\n                setSelectedLoras([]);\n            }\n        } else {\n            resetState();\n        }\n    }, [parent]);\n\n    // unset controlnet when encodedImage is null\n    useEffect(() => {\n        if (!encodedImage) {\n            setControlnetType(undefined);\n        }\n    }, [encodedImage]);\n\n    const scaledAspectRatio = aspectRatioDetails.scale(size);\n    const imagesCost = calculateImagesCost(\n        count,\n        scaledAspectRatio.width,\n        scaledAspectRatio.height\n    );\n\n    const onAddLora = (lora: SelectedLora) => {\n        setSelectedLoras([...selectedLoras, lora]);\n        setSelectingLora(false);\n    };\n\n    const onRemoveLora = (lora: SelectedLora) => {\n        setSelectedLoras(\n            selectedLoras.filter(\n                (selectedLora) => selectedLora.config.name !== lora.config.name\n            )\n        );\n    };\n\n    const onAddTrigger = (trigger: string) => {\n        const parts = [prompt];\n        if (prompt.length > 0 && !prompt.endsWith(\",\")) {\n            parts.push(\", \");\n        }\n        parts.push(trigger);\n        setPrompt(parts.join(\"\"));\n    };\n\n    return (\n        <>\n            <form onSubmit={handleSubmit}>\n                <div className=\"homepage-prompt\">\n                    <div className=\"input-group\">\n                        <input\n                            className=\"form-control prompt\"\n                            placeholder=\"What would you like to create?\"\n                            value={prompt}\n                            onChange={(e) => setPrompt(e.target.value)}\n                        />\n\n                        <div className=\"input-group-append\">\n                            <button\n                                type=\"submit\"\n                                className=\"btn btn-secondary light-button\"\n                                style={{ marginLeft: \"8px\" }}\n                                disabled={!prompt || creating}\n                            >\n                                {/* paintbrush button */}\n                                {!creating && (\n                                    <i className=\"fas fa-paint-brush\"></i>\n                                )}\n                                {/* spinner button */}\n                                {creating && (\n                                    <i className=\"fas fa-spinner fa-spin\"></i>\n                                )}\n                            </button>\n                        </div>\n                    </div>\n                    {selectedLoras.length > 0 && (\n                        <LoraTriggers\n                            prompt={prompt}\n                            selectedLoras={selectedLoras}\n                            onAddTrigger={onAddTrigger}\n                        />\n                    )}\n                    {!seed && (\n                        <div className=\"form-group\" style={{marginTop: \"8px\"}}>\n                            <label htmlFor=\"count\">Count: {count}</label>\n                            {/* range slider from 1 to 20 */}\n                            <input\n                                type=\"range\"\n                                className=\"form-control-range\"\n                                id=\"count\"\n                                min=\"1\"\n                                max=\"20\"\n                                value={count}\n                                onChange={(e) =>\n                                    setCount(parseInt(e.target.value))\n                                }\n                            />\n                            <span className=\"helptext\">\n                                This is how many images you want to generate\n                            </span>\n                        </div>\n                    )}\n                    <CostIndicator imagesCost={imagesCost} />\n                    <div\n                        style={{\n                            marginTop: \"24px\",\n                        }}\n                    >\n                        <a\n                            href=\"javascript:void(0)\"\n                            onClick={() => setAdvancedView(!advancedView)}\n                            style={{\n                                color: \"white\",\n                                textDecoration: \"underline\",\n                            }}\n                        >\n                            Advanced\n                        </a>\n                        &nbsp;\n                        {advancedView ? (\n                            <i className=\"fas fa-chevron-up\"></i>\n                        ) : (\n                            <i className=\"fas fa-chevron-down\"></i>\n                        )}\n                    </div>\n                    {advancedView && (\n                        <div className=\"homepage-prompt-advanced\">\n                            {encodedImage && (\n                                <div className=\"form-group\">\n                                    <label>Init Image</label>\n                                    <img\n                                        style={{\n                                            display: \"block\",\n                                            marginLeft: \"auto\",\n                                            marginRight: \"auto\",\n                                            maxWidth: \"100%\",\n                                        }}\n                                        src={`data:image/png;base64,${encodedImage}`}\n                                    />\n                                </div>\n                            )}\n                            {!parent && !encodedImage && (\n                                <AspectRatioSelector\n                                    aspectRatio={aspectRatio}\n                                    onChange={(aspectRatioId) => {\n                                        setAspectRatio(aspectRatioId);\n                                        setAspectRatioDetails(\n                                            aspectRatios[aspectRatioId]\n                                        );\n                                    }}\n                                />\n                            )}\n                            <div className=\"form-group\">\n                                <div\n                                    style={{\n                                        display: \"block\",\n                                        maxWidth: encodedImage\n                                            ? \"350px\"\n                                            : \"180px\",\n                                        marginTop: \"40px\",\n                                        marginRight: \"auto\",\n                                        marginLeft: \"auto\",\n                                    }}\n                                >\n                                    <label\n                                        id=\"loadimage-wrapper\"\n                                        className={`btn btn-primary `}\n                                        style={{ display: \"inline\" }}\n                                    >\n                                        {/* upload image */}\n                                        <i className=\"fas fa-upload\"></i>&nbsp;\n                                        {encodedImage || parent\n                                            ? \"Replace\"\n                                            : \"Upload\"}\n                                        <input\n                                            id=\"loadimage\"\n                                            type=\"file\"\n                                            style={{ display: \"none\" }}\n                                            onChange={onImageSelected}\n                                        />\n                                    </label>\n                                    {encodedImage && (\n                                        <label\n                                            className=\"btn btn-secondary\"\n                                            onClick={() => setEncodedImage(\"\")}\n                                            style={{ display: \"inline\" }}\n                                        >\n                                            {/* remove image */}\n                                            <i className=\"fas fa-trash\"></i>\n                                            &nbsp; Remove\n                                        </label>\n                                    )}\n                                </div>\n                            </div>\n                            <div className=\"form-group\">\n                                <label htmlFor=\"model\">Model</label>\n                                <div>\n                                    <button\n                                        type=\"button\"\n                                        className=\"btn btn-secondary light-button\"\n                                        onClick={() => setSelectingModel(true)}\n                                    >\n                                        {model}&nbsp;\n                                        <i className=\"fas fa-caret-down\"></i>\n                                    </button>\n                                </div>\n                            </div>\n                            <div className=\"form-group\">\n                                {/* loras */}\n                                <label htmlFor=\"loras\">Loras</label>\n                                <div>\n                                    {selectedLoras.map((lora) => (\n                                        <SelectedLoraTag\n                                            key={lora.lora.name}\n                                            lora={lora}\n                                            onRemove={(lora) =>\n                                                onRemoveLora(lora)\n                                            }\n                                        />\n                                    ))}\n                                    {/* add lora button */}\n                                    {selectedLoras.length < 5 && (\n                                        <button\n                                            type=\"button\"\n                                            className=\"btn btn-secondary light-button\"\n                                            style={{ marginLeft: \"8px\" }}\n                                            onClick={() =>\n                                                setSelectingLora(true)\n                                            }\n                                        >\n                                            <i className=\"fas fa-plus\"></i>\n                                            &nbsp;Add Lora\n                                        </button>\n                                    )}\n                                </div>\n                            </div>\n                            <div className=\"form-group\">\n                                {/* negative prompt */}\n                                <label htmlFor=\"negativePrompt\">\n                                    Negative Prompt\n                                </label>\n                                {/* <input\n                                type=\"text\"\n                                className=\"form-control\"\n                                id=\"negativePrompt\"\n                                placeholder=\"What would you like to avoid?\"\n                                value={negativePrompt}\n                                onChange={(e) =>\n                                    setNegativePrompt(e.target.value)\n                                }\n                            /> */}\n                                <TextInputWithHistory\n                                    history={recentNegativePrompts.getItems()}\n                                    value={negativePrompt}\n                                    onChange={setNegativePrompt}\n                                />\n                                <span className=\"helptext\">\n                                    Try descriptive words like \"blurry\" or\n                                    \"distorted\"\n                                </span>\n                            </div>\n                            {/* size slider */}\n                            <div className=\"form-group\">\n                                <label htmlFor=\"size\">\n                                    Size: {scaledAspectRatio.width} x{\" \"}\n                                    {scaledAspectRatio.height}\n                                </label>\n                                {/* range slider from 1 to 2 in increments of 0.1 */}\n                                <input\n                                    type=\"range\"\n                                    className=\"form-control-range\"\n                                    id=\"size\"\n                                    min=\"1\"\n                                    max=\"2\"\n                                    step=\"0.1\"\n                                    value={size}\n                                    onChange={(e) =>\n                                        setSize(parseFloat(e.target.value))\n                                    }\n                                />\n                                <span className=\"helptext\">\n                                    This allows you to adjust the size of your\n                                    images. Larger images cost more credits.\n                                </span>\n                            </div>\n\n                            {(parentId || encodedImage) && (\n                                <div className=\"form-group\">\n                                    {/* variation strength */}\n                                    <label htmlFor=\"variationStrength\">\n                                        Variation Strength:&nbsp;\n                                        {(variationStrength * 100).toFixed(0)}%\n                                    </label>\n                                    <input\n                                        type=\"range\"\n                                        className=\"form-control-range\"\n                                        id=\"variationStrength\"\n                                        min=\"0.05\"\n                                        max=\"0.95\"\n                                        step=\"0.05\"\n                                        value={variationStrength}\n                                        onChange={(e) =>\n                                            setVariationStrength(\n                                                parseFloat(e.target.value)\n                                            )\n                                        }\n                                    />\n                                    <span className=\"helptext\">\n                                        This is how much variation you want to\n                                        see from the parent image\n                                    </span>\n                                </div>\n                            )}\n                            {encodedImage && (\n                                // controlnet type - canny, hed, depth, normal, openpose, seg, scribble, fakescribbles, hough\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"controlNetType\">\n                                        Control Net Type\n                                    </label>\n                                    <select\n                                        className=\"form-control\"\n                                        id=\"controlNetType\"\n                                        value={controlnetType}\n                                        onChange={(e) =>\n                                            setControlnetType(e.target.value)\n                                        }\n                                    >\n                                        <option value=\"\">None</option>\n                                        {controlnetTypes.map((type) => (\n                                            <option\n                                                value={type}\n                                                key={`type-${type}`}\n                                            >\n                                                {type}\n                                            </option>\n                                        ))}\n                                    </select>\n                                    <span className=\"helptext\">\n                                        Controlnet is an advanced way of\n                                        controlling the output of image\n                                        generation. You can read more about it{\" \"}\n                                        <a\n                                            target=\"_blank\"\n                                            href=\"https://bootcamp.uxdesign.cc/controlnet-and-stable-diffusion-a-game-changer-for-ai-image-generation-83555cb942fc\"\n                                        >\n                                            here.\n                                        </a>\n                                    </span>\n                                </div>\n                            )}\n                            {/* cfg scale. Slider from 1 to 20 in increments of 0.1 */}\n                            <div className=\"form-group\">\n                                <label>CFG Scale: {cfgScale.toFixed(1)}</label>\n                                <input\n                                    type=\"range\"\n                                    className=\"form-control-range\"\n                                    min=\"1\"\n                                    max=\"20\"\n                                    step=\"0.5\"\n                                    value={cfgScale}\n                                    onChange={(e) =>\n                                        setCfgScale(parseFloat(e.target.value))\n                                    }\n                                />\n                                <span className=\"helptext\">\n                                    Adjust the CFG scale to control how much the\n                                    image looks like the prompt.\n                                </span>\n                            </div>\n                            <SeedInput seed={seed} setSeed={setSeed} />\n\n                            <div\n                                className=\"form-group\"\n                                style={{ minHeight: \"20px\" }}\n                            >\n                                <div className=\"float-right\">\n                                    {parent && (\n                                        <button\n                                            type=\"button\"\n                                            className=\"btn btn-secondary light-button\"\n                                            onClick={handleCancel}\n                                        >\n                                            <i className=\"fas fa-times\"></i>\n                                            &nbsp;CANCEL\n                                        </button>\n                                    )}\n                                    <button\n                                        type=\"submit\"\n                                        className=\"btn btn-primary\"\n                                        style={{ marginLeft: \"8px\" }}\n                                        disabled={!prompt || creating}\n                                    >\n                                        {/* paintbrush button */}\n                                        {!creating && (\n                                            <i className=\"fas fa-paint-brush\"></i>\n                                        )}\n                                        {/* spinner button */}\n                                        {creating && (\n                                            <i className=\"fas fa-spinner fa-spin\"></i>\n                                        )}\n                                        &nbsp;PAINT\n                                    </button>\n\n                                    <button\n                                        type=\"button\"\n                                        className=\"btn btn-secondary light-button\"\n                                        onClick={handleEdit}\n                                        style={{ marginLeft: \"8px\" }}\n                                        disabled={!prompt || creating}\n                                    >\n                                        <i className=\"fas fa-edit\"></i>\n                                        &nbsp;EDIT\n                                    </button>\n                                </div>\n                            </div>\n                        </div>\n                    )}\n                </div>\n            </form>\n            {selectingModel && (\n                <ModelSelector\n                    onCancel={() => setSelectingModel(false)}\n                    onSelectModel={onSelectModel}\n                    initialSelectedModel={model}\n                    inpainting={false}\n                />\n            )}\n            {selectingLora && (\n                <LoraModal\n                    onCancel={() => setSelectingLora(false)}\n                    onConfirm={(lora) => onAddLora(lora)}\n                />\n            )}\n        </>\n    );\n};\n","import { FC, useEffect, useState } from \"react\";\nimport { ListGroup } from \"react-bootstrap\";\nimport { StableDiffusionModel } from \"../client\";\n\ninterface Props {\n    models: StableDiffusionModel[];\n    onSelectModel: (model: StableDiffusionModel) => void;\n    selectedModel: string;\n}\n\nconst MOBILE_HEIGHT_PERCENT = 0.3;\n\nexport const ModelList: FC<Props> = ({ models, onSelectModel, selectedModel }) => {\n    const [maxHeight, setMaxHeight] = useState(window.innerWidth < 576 ? window.innerHeight * MOBILE_HEIGHT_PERCENT : window.innerHeight * 0.7); // Set maxHeight to 80% of the viewport height\n\n    useEffect(() => {\n        const handleResize = () => {\n            let maxHeight = window.innerHeight * 0.7;\n            if (window.innerWidth < 576) {\n                maxHeight = window.innerHeight * MOBILE_HEIGHT_PERCENT;\n            }\n            setMaxHeight(maxHeight); // Update maxHeight based on the current viewport height\n        };\n\n        window.addEventListener(\"resize\", handleResize);\n        return () => {\n            window.removeEventListener(\"resize\", handleResize);\n        };\n    }, []);\n\n    return (\n        <ListGroup\n            style={{\n                maxHeight: `${maxHeight}px`,\n                overflowY: \"auto\",\n                border: \"1px solid #808080\",\n                marginBottom: \"8px\",\n            }}\n        >\n            {models.map((model) => (\n                <ListGroup.Item\n                    key={model.name}\n                    active={selectedModel === model.name}\n                    onClick={() => onSelectModel(model)}\n                    style={{\n                        cursor: \"pointer\",\n                    }}\n                >\n                    {model.name}\n                </ListGroup.Item>\n            ))}\n        </ListGroup>\n    );\n};\n","import { useState, useEffect } from \"react\";\n\nexport class SimpleCache {\n    private storage: Storage;\n\n    constructor() {\n        this.storage = window.localStorage;\n    }\n\n    setItem(key: string, value: any, ttl = 60 * 60) {\n        const item: {\n            value: any;\n            expiry: number;\n        } = {\n            value,\n            expiry: Date.now() + ttl * 1000,\n        };\n        this.storage.setItem(key, JSON.stringify(item));\n    }\n\n    getItem(key: string): any {\n        try {\n            const itemStr = this.storage.getItem(key);\n            if (!itemStr) {\n                return null;\n            }\n    \n            const item: {\n                value: any;\n                expiry: number;\n            } = JSON.parse(itemStr);\n            if (Date.now() > item.expiry) {\n                this.storage.removeItem(key);\n                return null;\n            }\n            return item.value;\n        } catch (error) {\n            console.error(error);\n            return null;\n        }\n    }\n\n    removeItem(key: string) {\n        this.storage.removeItem(key);\n    }\n\n    clear() {\n        this.storage.clear();\n    }\n}\n\nconst cache = new SimpleCache();\n\nexport function useCache<T>(key: string, initialValue: T): [T, React.Dispatch<React.SetStateAction<T>>] {\n  const [value, setValue] = useState<T>(() => {\n    const cachedValue = cache.getItem(key);\n    return cachedValue !== null ? cachedValue : initialValue;\n  });\n\n  useEffect(() => {\n    cache.setItem(key, value);\n  }, [key, value]);\n\n  return [value, setValue];\n}\n","import React, { useEffect, useState } from \"react\";\nimport { Button, Modal, Form, ListGroup, Row, Col } from \"react-bootstrap\";\nimport axios from \"axios\";\nimport { AIBrushApi, StableDiffusionModel } from \"../client\";\nimport { ModelList } from \"./ModelList\";\nimport { useCache } from \"../lib/localcache\";\nimport { recentModels } from \"../lib/recentList\";\n\nconst httpclient = axios.create();\n\ninterface ModelSelectorProps {\n    initialSelectedModel: string;\n    onSelectModel: (model: string) => void;\n    onCancel: () => void;\n    inpainting: boolean;\n}\n\n\n\nconst ModelSelector: React.FC<ModelSelectorProps> = ({\n    initialSelectedModel,\n    onSelectModel,\n    onCancel,\n    inpainting,\n}) => {\n    const [models, setModels] = useCache<StableDiffusionModel[]>(\"models\", []);\n    const [selectedModel, setSelectedModel] =\n        useState<StableDiffusionModel | null>(null);\n    const [searchTerm, setSearchTerm] = useState(\"\");\n\n    const filteredModels = models.filter((model) =>\n        model.inpainting === inpainting && model.name.toLowerCase().includes(searchTerm.toLowerCase())\n    );\n\n    const handleSelect = () => {\n        console.log(\"Selected model:\", selectedModel);\n        if (selectedModel) {\n            onSelectModel(selectedModel.name);\n        }\n    };\n\n    const handleSearch = (e: React.ChangeEvent<HTMLInputElement>) => {\n        setSearchTerm(e.target.value);\n    };\n\n    const handleModelClick = (model: StableDiffusionModel) => {\n        setSelectedModel(model);\n    };\n\n    useEffect(() => {\n        const setSortedModels = (\n            selectedModel: StableDiffusionModel,\n            models: StableDiffusionModel[]\n        ) => {\n            recentModels.addItem(selectedModel.name);\n\n            const recentModelNames = recentModels.getItems();\n            // map from model name to index\n            const recentModelIndices: { [key: string]: number } = {};\n            recentModelNames.forEach((name, index) => {\n                recentModelIndices[name] = index;\n            });\n            // sort models by recentness\n            const sortedModels = models.sort((a, b) => {\n                const aIndex = recentModelIndices[a.name];\n                const bIndex = recentModelIndices[b.name];\n                if (aIndex === undefined && bIndex === undefined) {\n                    return 0;\n                } else if (aIndex === undefined) {\n                    return 1;\n                } else if (bIndex === undefined) {\n                    return -1;\n                } else {\n                    return aIndex - bIndex;\n                }\n            });\n\n            setModels(sortedModels);\n        };\n\n        if (!models || models.length === 0) {\n            // api.getModels().then((res) => {\n            //     console.log(res);\n            //     const selectedModel =\n            //         res.data[initialSelectedModel] ||\n            //         Object.values(res.data)[0];\n            //     console.log(\"Selected model:\", selectedModel);\n            //     setSelectedModel(selectedModel);\n            //     setSortedModels(selectedModel, Object.values(res.data));\n            // });\n            axios.get(\"https://raw.githubusercontent.com/Haidra-Org/AI-Horde-image-model-reference/main/stable_diffusion.json\").then((res) => {\n                const data = res.data as {[key: string]: StableDiffusionModel};\n                const selectedModel =\n                    data[initialSelectedModel] ||\n                    Object.values(data)[0];\n                setSelectedModel(selectedModel);\n                setSortedModels(selectedModel, Object.values(data));\n            });\n        } else {\n            const selectedModel =\n                models.find((model) => model.name === initialSelectedModel) ||\n                models[0];\n            setSelectedModel(selectedModel);\n            setSortedModels(selectedModel, models);\n        }\n    }, [models]);\n\n    useEffect(() => {\n        if (initialSelectedModel) {\n            recentModels.addItem(initialSelectedModel);\n        }\n    }, [initialSelectedModel]);\n\n    return (\n        <>\n            <Modal show={true} onHide={onCancel} size=\"xl\">\n                <Modal.Header closeButton>\n                    <Modal.Title>Select Model</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <Form.Control\n                        type=\"text\"\n                        placeholder=\"Search\"\n                        value={searchTerm}\n                        onChange={handleSearch}\n                    />\n                    <Row className=\"mt-3\">\n                        <Col sm={4}>\n                            <ModelList\n                                models={filteredModels}\n                                onSelectModel={handleModelClick}\n                                selectedModel={selectedModel?.name || \"\"}\n                            />\n                        </Col>\n                        <Col sm={8}>\n                            {selectedModel && (\n                                <>\n                                    <h5>{selectedModel.name}</h5>\n                                    <p>{selectedModel.description}</p>\n                                    {selectedModel.showcases &&\n                                        selectedModel.showcases.length > 0 && (\n                                            <img\n                                                src={selectedModel.showcases[0]}\n                                                alt=\"Showcase\"\n                                                style={{\n                                                    width: \"70%\",\n                                                }}\n                                            />\n                                        )}\n                                </>\n                            )}\n                        </Col>\n                    </Row>\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button variant=\"secondary\" onClick={onCancel}>\n                        Cancel\n                    </Button>\n                    <Button\n                        variant=\"primary\"\n                        onClick={handleSelect}\n                        disabled={!selectedModel}\n                    >\n                        Select\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n        </>\n    );\n};\n\nexport default ModelSelector;\n","import { OverlayTrigger, Tooltip } from \"react-bootstrap\";\n\ninterface Props {\n    onClick: () => void;\n}\n\nexport const ResetToDefaultIcon = ({ onClick }: Props) => {\n    return (\n        <OverlayTrigger\n            placement=\"top\"\n            overlay={<Tooltip id=\"reset-tooltip\">Reset to Default</Tooltip>}\n        >\n            <i className=\"fa fa-sync\" style={{\n                cursor: \"pointer\",\n            }} onClick={onClick}></i>\n        </OverlayTrigger>\n    );\n};\n","import React, { FC, useState, useEffect } from \"react\";\nimport { ChromePicker } from \"react-color\";\n\nimport \"./ColorPicker.css\"\n\ninterface Props {\n    color: string;\n    onColorSelected: (color: string) => void;\n}\n\nexport const ColorPicker: FC<Props> = ({ color, onColorSelected }) => {\n    const [displayColorPicker, setDisplayColorPicker] = useState(false);\n    const [tmpColor, setTmpColor] = useState(color);\n\n    const handleClick = () => {\n        setDisplayColorPicker(!displayColorPicker);\n        if (displayColorPicker) {\n            onColorSelected(tmpColor);\n        }\n    };\n\n    const handleClose = () => {\n        setDisplayColorPicker(false);\n        if (displayColorPicker) {\n            onColorSelected(tmpColor);\n        }\n    };\n\n    const popover: React.CSSProperties = {\n        position: \"absolute\",\n        zIndex: 2,\n    };\n    const cover: React.CSSProperties = {\n        position: \"fixed\",\n        top: \"0px\",\n        right: \"0px\",\n        bottom: \"0px\",\n        left: \"0px\",\n    };\n\n    return (\n        <>\n            <button className=\"color-picker\" onClick={handleClick}>\n                <i className=\"fas fa-plus\" />\n            </button>\n            {displayColorPicker ? (\n                <div style={popover}>\n                    <div style={cover} onClick={handleClose} />\n                    <ChromePicker\n                        color={tmpColor}\n                        onChange={(color) => setTmpColor(color.hex)}\n                        onChangeComplete={(color) => setTmpColor(color.hex)}\n                    />\n                </div>\n            ) : null}\n        </>\n    );\n};\n","import React, { FC, useEffect, useState } from \"react\";\nimport { ChromePicker } from \"react-color\";\n\nimport { Renderer } from \"./renderer\";\nimport { BaseTool, Tool } from \"./tool\";\nimport { ZoomHelper } from \"./zoomHelper\";\nimport { PaletteButton } from \"./PaletteButton\";\nimport { ColorPicker } from \"./ColorPicker\";\n\nexport const defaultColors = [\n    \"#FFFFFF\",\n    \"#5A2C02\",\n    \"#386EB6\",\n    \"#6B31A1\",\n    \"#CB2C26\",\n    \"#000000\",\n    \"#888888\",\n    \"#50B050\",\n    \"#FBDB37\",\n    \"#E88D2D\",\n];\n\nexport class PencilTool extends BaseTool implements Tool {\n    private brushSize = 10;\n\n    private panning = false;\n    private isDrawing = false;\n    private lastX = 0;\n    private lastY = 0;\n    private colorPicking = false;\n    private lastPickedColor = \"#000000\";\n    private _dirty = false;\n\n    set dirty(dirty: boolean) {\n        this._dirty = dirty;\n        if (this.dirtyListener) {\n            this.dirtyListener(dirty);\n        }\n    }\n\n    get dirty() {\n        return this._dirty;\n    }\n\n    private dirtyListener?: (dirty: boolean) => void;\n    private colorPickedListener?: (color: string) => void;\n\n    constructor(\n        renderer: Renderer,\n        private layer: \"base\" | \"mask\",\n        private brushColor = defaultColors[0],\n        name = \"pencil\"\n    ) {\n        super(renderer, name);\n    }\n\n    private sync() {\n        if (this.colorPicking) {\n            this.renderer.setCursor({\n                x: this.lastX,\n                y: this.lastY,\n                radius: this.renderer.getWidth() / 20,\n                color: this.lastPickedColor,\n                type: \"colorpicker\",\n            });\n        } else {\n            this.renderer.setCursor({\n                x: this.lastX,\n                y: this.lastY,\n                radius: this.brushSize / 2,\n                color: this.brushColor,\n                type: \"circle-fill\",\n            });\n        }\n    }\n\n    updateArgs(args: any) {\n        super.updateArgs(args);\n        this.brushSize = args.brushSize || 10;\n        this.brushColor = args.brushColor || defaultColors[0];\n        this.sync();\n    }\n\n    onMouseDown(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        if (this.colorPicking) {\n            return;\n        }\n        if (event.button === 0) {\n            let { x, y } = this.zoomHelper.translateMouseToCanvasCoordinates(\n                event.nativeEvent.offsetX,\n                event.nativeEvent.offsetY\n            );\n            this.renderer.drawPoint(\n                x,\n                y,\n                this.brushSize,\n                this.brushColor,\n                this.layer\n            );\n            this.isDrawing = true;\n            this.lastX = x;\n            this.lastY = y;\n            this.dirty = true;\n        } else if (event.button === 1) {\n            this.panning = true;\n        }\n        this.sync();\n    }\n\n    onMouseMove(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>): void {\n        let { x, y } = this.zoomHelper.translateMouseToCanvasCoordinates(\n            event.nativeEvent.offsetX,\n            event.nativeEvent.offsetY\n        );\n        if (this.colorPicking) {\n            this.lastPickedColor = this.renderer.getPixel(x, y);\n        } else if (this.panning) {\n            this.zoomHelper.onPan(event);\n        } else {\n            if (this.isDrawing) {\n                this.renderer.drawLine(\n                    this.lastX,\n                    this.lastY,\n                    x,\n                    y,\n                    this.brushSize,\n                    this.brushColor,\n                    this.layer\n                );\n                this.dirty = true;\n            }\n        }\n        this.lastX = x;\n        this.lastY = y;\n        this.sync();\n    }\n\n    onMouseUp(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>): void {\n        if (event.button === 0) {\n            this.isDrawing = false;\n            if (this.colorPicking) {\n                this.colorPicking = false;\n                this.brushColor = this.lastPickedColor;\n                if (this.colorPickedListener) {\n                    this.colorPickedListener(this.lastPickedColor);\n                }\n            }\n        } else if (event.button === 1) {\n            this.panning = false;\n        }\n        this.sync();\n    }\n\n    onWheel(event: WheelEvent) {\n        this.zoomHelper.onWheel(event);\n        this.sync();\n    }\n\n    cancel() {\n        // kind of a hack, clears the selection layer\n        this.renderer.setEditImage(null);\n        this.dirty = false;\n    }\n\n    confirm() {\n        this.renderer.commitSelection();\n        const encodedImage = this.renderer.getEncodedImage(null);\n        if (encodedImage && this.saveListener) {\n            this.saveListener(encodedImage);\n        }\n        this.dirty = false;\n    }\n\n    onSaveImage(listener: (encodedImage: string) => void): void {\n        this.saveListener = listener;\n    }\n\n    onDirty(listener: (dirty: boolean) => void): void {\n        this.dirtyListener = listener;\n    }\n\n    destroy(): boolean {\n        if (this.dirty) {\n            this.renderer.commitSelection();\n        }\n        return true;\n    }\n\n    beginColorpicker(): void {\n        this.colorPicking = true;\n        this.sync();\n    }\n\n    onColorPicked(listener: (color: string) => void): void {\n        this.colorPickedListener = listener;\n    }\n}\n\ninterface ControlsProps {\n    renderer: Renderer;\n    tool: PencilTool;\n    colors: string[];\n}\n\nconst MAX_PALETTE_SIZE = 30;\n\nfunction addToPalette(palette: string[], color: string): string[] {\n    if (palette.indexOf(color) === -1) {\n        // insert at the beginning\n        palette = [color, ...palette];\n    }\n    if (palette.length > MAX_PALETTE_SIZE) {\n        palette = palette.slice(0, MAX_PALETTE_SIZE);\n    }\n    return palette;\n}\n\nexport const Controls: FC<ControlsProps> = ({ renderer, tool, colors }) => {\n    const [brushSize, setBrushSize] = useState(10);\n    const [brushColor, setBrushColor] = useState(colors[0]);\n    const [palette, setPalette] = useState(colors);\n    const [dirty, setDirty] = useState(false);\n\n    tool.onDirty(setDirty);\n\n    useEffect(() => {\n        tool.updateArgs({\n            brushSize,\n            brushColor,\n            palette,\n        });\n    }, [brushSize, brushColor, palette]);\n\n    const onColorSelected = (color: string) => {\n        setBrushColor(color);\n        setPalette(addToPalette(palette, color));\n    };\n\n    tool.onColorPicked(onColorSelected);\n\n    return (\n        <div style={{ marginTop: \"16px\" }}>\n            <div className=\"form-group\">\n                <label style={{ width: \"100%\" }}>\n                    Brush size\n                    <small\n                        className=\"form-text text-muted\"\n                        style={{ float: \"right\" }}\n                    >\n                        {brushSize}px\n                    </small>\n                </label>\n                <input\n                    type=\"range\"\n                    className=\"form-control-range\"\n                    min=\"1\"\n                    max=\"100\"\n                    value={brushSize}\n                    onChange={(e) => setBrushSize(parseInt(e.target.value))}\n                />\n            </div>\n            <div\n                style={{\n                    display: \"flex\",\n                    flexDirection: \"row\",\n                    flexWrap: \"wrap\",\n                }}\n            >\n                {palette.map((color, i) => (\n                    <PaletteButton\n                        key={i}\n                        selectedColor={brushColor}\n                        color={color}\n                        onClick={(color) => setBrushColor(color)}\n                        onColorSelected={(color) => onColorSelected(color)}\n                    />\n                ))}\n                {/* <div\n                    className=\"color-picker\"\n                    style={{ textAlign: \"center\", backgroundColor: \"#ccc\" }}\n                >\n                    <i className=\"fas fa-eye-dropper\" />\n                </div> */}\n                <button\n                    className=\"color-picker\"\n                    onClick={() => tool.beginColorpicker()}\n                >\n                    <i className=\"fas fa-eye-dropper\" />\n                </button>\n                <ColorPicker\n                    color={brushColor}\n                    onColorSelected={(color) => onColorSelected(color)}\n                />\n            </div>\n            <div\n                className=\"form-group\"\n                style={{\n                    marginTop: \"16px\",\n                    visibility: dirty ? \"visible\" : \"hidden\",\n                }}\n            >\n                <button\n                    className=\"btn btn-secondary\"\n                    onClick={() => tool.cancel()}\n                >\n                    Revert\n                </button>\n                <button\n                    className=\"btn btn-primary\"\n                    onClick={() => tool.confirm()}\n                    style={{ marginLeft: \"8px\" }}\n                >\n                    Save\n                </button>\n            </div>\n        </div>\n    );\n};\n","import React, { useState, useEffect } from \"react\";\nimport { Renderer } from \"./renderer\";\nimport { Cursor, Rect } from \"./models\";\nimport { Tool, BaseTool } from \"./tool\";\nimport { AspectRatioSelector } from \"../../components/AspectRatioSelector\";\nimport { getUpscaleLevel } from \"../../lib/upscale\";\nimport {\n    DEFAULT_ASPECT_RATIO,\n    aspectRatios,\n    getClosestAspectRatio,\n} from \"../../lib/aspecRatios\";\nimport { ZoomHelper } from \"./zoomHelper\";\nimport { runInThisContext } from \"vm\";\n\nexport class SelectionTool extends BaseTool implements Tool {\n    private selectionOverlay: Rect | undefined;\n    private selectionOverlayPreview: Rect | undefined;\n    private outpaint?: boolean;\n\n    // private selectionWidth: number = 512;\n    // private selectionHeight: number = 512;\n\n    private panning = false;\n\n    // TODO: size modifier to make the selection overlay smaller\n\n    constructor(renderer: Renderer) {\n        super(renderer, \"select\");\n    }\n\n    updateArgs(args: any) {\n        args = {\n            ...this.getArgs(),\n            ...args,\n        }\n        super.updateArgs(args);\n        this.selectionOverlay = args.selectionOverlay || {\n            x: 0,\n            y: 0,\n            width: 512,\n            height: 512,\n        };\n        this.outpaint = args.outpaint;\n        if (!this.outpaint) {\n            this.selectionOverlay = this.clamp(this.selectionOverlay!);\n        }\n        this.sync();\n    }\n\n    private clamp(rect: Rect): Rect {\n        const imageWidth = this.renderer.getWidth();\n        const imageHeight = this.renderer.getHeight();\n        let x = rect.x;\n        let y = rect.y;\n        let width = rect.width;\n        let height = rect.height;\n        // clamp to the canvas\n        x = Math.max(0, Math.min(x, imageWidth - this.selectionOverlay!.width));\n        y = Math.max(0, Math.min(y, imageHeight - rect.height));\n        x = Math.min(x, imageWidth - rect.width);\n        y = Math.min(y, imageHeight - rect.height);\n        width = Math.min(width, imageWidth);\n        height = Math.min(height, imageHeight);\n        return {\n            x: x,\n            y: y,\n            width: width,\n            height: height,\n        };\n    }\n\n    private sync(): void {\n        this.renderer.setSelectionOverlay(this.selectionOverlay);\n        this.renderer.setSelectionOverlayPreview(this.selectionOverlayPreview);\n    }\n\n    onMouseDown(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        if (event.type == \"touch\") {\n            this.onMouseMove(event);\n        } else if (event.button === 0) {\n            this.selectionOverlay = this.selectionOverlayPreview;\n            this.selectionOverlayPreview = undefined;\n            this.sync();\n            this.updateArgs({\n                selectionOverlay: this.selectionOverlay,\n            });\n        } else if (event.button === 1) {\n            this.panning = true;\n        }\n    }\n\n    onMouseMove(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        const imageWidth = this.renderer.getWidth();\n        const imageHeight = this.renderer.getHeight();\n        if (this.panning) {\n            this.zoomHelper.onPan(event);\n        } else {\n            let { x, y } = this.zoomHelper.translateMouseToCanvasCoordinates(\n                event.nativeEvent.offsetX,\n                event.nativeEvent.offsetY\n            );\n\n            // round to the nearest 16 pixels\n            x = Math.round(x / 16) * 16;\n            y = Math.round(y / 16) * 16;\n            // offset by -256 to center the rect\n            x -= 256;\n            y -= 256;\n\n            this.selectionOverlayPreview = {\n                x: x,\n                y: y,\n                width: this.selectionOverlay!.width,\n                height: this.selectionOverlay!.height,\n            };\n\n            if (!this.outpaint) {\n                this.selectionOverlayPreview = this.clamp(this.selectionOverlayPreview);\n            }\n\n            \n            this.sync();\n        }\n    }\n\n    onMouseUp(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        if (event.button === 0 && event.type == \"touch\") {\n            this.selectionOverlay = this.selectionOverlayPreview;\n            this.selectionOverlayPreview = undefined;\n            this.sync();\n            this.updateArgs({\n                selectionOverlay: this.selectionOverlay,\n            });\n        }\n        this.panning = false;\n    }\n\n    onMouseLeave(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        this.selectionOverlayPreview = undefined;\n        this.panning = false;\n        this.sync();\n    }\n\n    onWheel(event: WheelEvent) {\n        this.zoomHelper.onWheel(event);\n    }\n\n    destroy() {\n        // this.renderer.setSelectionOverlay(undefined);\n        this.renderer.setSelectionOverlayPreview(undefined);\n        return true;\n    }\n}\n\ninterface ControlsProps {\n    renderer: Renderer;\n    tool: Tool;\n    /** Lock aspect ratio for smaller images */\n    lockAspectRatio?: boolean;\n    outpaint?: boolean;\n}\n\nexport const Controls: React.FC<ControlsProps> = ({\n    renderer,\n    tool,\n    lockAspectRatio,\n    outpaint,\n}) => {\n    const upscaleLevel = getUpscaleLevel(\n        renderer.getWidth(),\n        renderer.getHeight()\n    );\n    const [aspectRatio, setAspectRatio] = useState(DEFAULT_ASPECT_RATIO);\n    const [size, setSize] = useState(1);\n\n    useEffect(() => {\n        const upscaleLevel = getUpscaleLevel(\n            renderer.getWidth(),\n            renderer.getHeight()\n        );\n        // lock aspect ratio to image\n        if (upscaleLevel === 0 && lockAspectRatio) {\n            const aspectRatio = getClosestAspectRatio(\n                renderer.getWidth(),\n                renderer.getHeight()\n            );\n            setAspectRatio(aspectRatio.id);\n            tool.updateArgs({\n                selectionOverlay: {\n                    x: 0,\n                    y: 0,\n                    width: aspectRatio.width,\n                    height: aspectRatio.height,\n                },\n                outpaint,\n            });\n        } else {\n            const args = tool.getArgs();\n            if (args.selectionOverlay) {\n                // restore args\n                const aspectRatio = getClosestAspectRatio(\n                    args.selectionOverlay.width,\n                    args.selectionOverlay.height\n                );\n                setAspectRatio(aspectRatio.id);\n                setSize(args.selectionOverlay.width / aspectRatio.width);\n                tool.updateArgs(args);\n            } else {\n                // set default args\n                args.selectionOverlay = {\n                    x: 0,\n                    y: 0,\n                    width: aspectRatios[aspectRatio].width,\n                    height: aspectRatios[aspectRatio].height,\n                };\n                args.outpaint = outpaint;\n                tool.updateArgs(args);\n            }\n        }\n    }, [tool]);\n\n    function onChange(aspectRatioId: number, size: number) {\n        const args = tool.getArgs();\n        const aspectRatio = aspectRatios[aspectRatioId];\n        if (args.selectionOverlay) {\n            const xDiff =\n                args.selectionOverlay.width - aspectRatio.width * size;\n            const yDiff =\n                args.selectionOverlay.height - aspectRatio.height * size;\n            args.selectionOverlay.width = Math.round(aspectRatio.width * size);\n            args.selectionOverlay.height = Math.round(\n                aspectRatio.height * size\n            );\n            args.selectionOverlay.x += xDiff / 2;\n            args.selectionOverlay.y += yDiff / 2;\n            if (!outpaint) {\n                // clamp to canvas\n                args.selectionOverlay.x = Math.round(\n                    Math.max(\n                        0,\n                        Math.min(\n                            args.selectionOverlay.x,\n                            renderer.getWidth() - args.selectionOverlay.width\n                        )\n                    )\n                );\n                args.selectionOverlay.y = Math.round(\n                    Math.max(\n                        0,\n                        Math.min(\n                            args.selectionOverlay.y,\n                            renderer.getHeight() - args.selectionOverlay.height\n                        )\n                    )\n                );\n            }\n        }\n        tool.updateArgs({\n            selectionOverlay: args.selectionOverlay,\n        });\n    }\n\n    return (\n        <>\n            {upscaleLevel > 0 && (\n                <AspectRatioSelector\n                    aspectRatio={aspectRatio}\n                    onChange={(aspectRatioId) => {\n                        onChange(aspectRatioId, size);\n                        setAspectRatio(aspectRatioId);\n                    }}\n                />\n            )}\n            <div className=\"form-group\">\n                <label htmlFor=\"size\" style={{ width: \"100%\" }}>\n                    Size\n                    <small\n                        className=\"form-text text-muted\"\n                        style={{ float: \"right\" }}\n                    >\n                        {Math.round(size * 100)}%\n                    </small>\n                </label>\n                {/* range from 0.1 to 1 */}\n                <input\n                    type=\"range\"\n                    className=\"form-control-range\"\n                    id=\"size\"\n                    min=\"1\"\n                    max=\"2\"\n                    step=\"0.1\"\n                    value={size}\n                    onChange={(event) => {\n                        onChange(aspectRatio, parseFloat(event.target.value));\n                        setSize(parseFloat(event.target.value));\n                    }}\n                />\n            </div>\n        </>\n    );\n};\n","import { aspectRatios } from \"./aspecRatios\";\n\nexport function getUpscaleLevel(width: number, height: number): number {\n    for (let i = 0; i < aspectRatios.length; i++) {\n        const aspectRatio = aspectRatios[i];\n        if (width * height <= aspectRatio.width * aspectRatio.height) {\n            return 0;\n        }\n        // if (width === aspectRatio.width && height === aspectRatio.height) {\n        //     return upscaleLevel;\n        // }\n    }\n    width /= 2;\n    height /= 2;\n    for (let i = 0; i < aspectRatios.length; i++) {\n        const aspectRatio = aspectRatios[i];\n        if (width * height <= aspectRatio.width * aspectRatio.height) {\n            return 1;\n        }\n        // if (width === aspectRatio.width && height === aspectRatio.height) {\n        //     return upscaleLevel;\n        // }\n    }\n    return 2;\n}\n"],"sourceRoot":""}