{"version":3,"sources":["pages/Homepage.tsx","components/AspectRatioSelector.tsx","pages/image-editor/PaletteButton.tsx","components/PendingImagesThumbnail.tsx","components/PendingImages.tsx","components/CopyToClipboardIcon.tsx","components/ImagePopup.tsx","pages/image-editor/enhance-tool.tsx","client/api.ts","client/base.ts","client/common.ts","pages/image-editor/smudge-tool.tsx","pages/image-editor/inpaint-tool.tsx","pages/image-editor/ImageEditor.tsx","pages/image-editor/renderer.ts","lib/aspecRatios.ts","pages/image-editor/mask-editor-controls.tsx","pages/image-editor/import-export.tsx","pages/image-editor/augment-tool.tsx","components/OutOfCreditsModal.tsx","components/PaymentStatusModal.tsx","lib/imageutil.ts","components/BusyModal.tsx","lib/localImagesStore.ts","pages/Login.tsx","components/TokenRefresher.tsx","components/Healthchecker.tsx","pages/admin/GenerateCode.tsx","pages/admin/GlobalSettings.tsx","pages/admin/Admin.tsx","pages/DeletedImages.tsx","pages/DiscordLogin.tsx","pages/LocalDeletedImages.tsx","lib/kvstore.ts","pages/SavedImagesPage.tsx","lib/imagesCache.ts","pages/TestPage.tsx","components/CreditsBalance.tsx","App.tsx","config.ts","reportWebVitals.ts","index.tsx","pages/image-editor/zoomHelper.tsx","pages/image-editor/tool.ts","lib/recentList.ts","lib/apisocket.ts","components/CostIndicator.tsx","components/ImageThumbnail.tsx","lib/supportedModels.ts","components/SeedInput.tsx","components/TextInputWithHistory.tsx","components/ImagePrompt.tsx","components/ProgressBar.tsx","lib/sleep.ts","lib/credits.ts","components/ModelList.tsx","lib/localcache.ts","components/ModelSelector.tsx","components/ResetToDefaultIcon.tsx","components/Alerts.tsx","pages/image-editor/ColorPicker.tsx","pages/image-editor/pencil-tool.tsx","pages/image-editor/selection-tool.tsx","lib/upscale.ts"],"names":["anonymousClient","axios","create","defaults","headers","common","Homepage","api","assetsUrl","apiSocket","localImages","paymentStatus","useState","creating","setCreating","selectedImage","setSelectedImage","parentImage","setParentImage","loadingParent","setLoadingParent","savingImage","setSavingImage","uploadProgress","setUploadingProgress","showPendingImages","setShowPendingImages","images","setImages","err","setErr","errTime","setErrTime","success","setSuccess","successTime","setSuccessTime","hasMore","setHasMore","search","setSearch","searchDebounce","setSearchDebounce","bulkDeleteSelecting","setBulkDeleteSelecting","bulkDeleting","setBulkDeleting","bulkDeleteIds","setBulkDeleteIds","censorNSFW","setCensorNSFW","outOfCredits","setOutOfCredits","id","useParams","history","useHistory","location","useLocation","onError","moment","valueOf","useEffect","handle","setTimeout","clearTimeout","image","find","getImage","then","replace","onSubmit","input","a","window","scrollTo","encoded_image","convertPNGToJPG","encodedJpg","createTemporaryImage","tmpInitImage","binaryImageData","Buffer","from","put","data","upload_url","onUploadProgress","progressEvent","percentCompleted","loaded","total","undefined","tmp_jpg_id","createImage","newImages","saveImage","sort","sortImages","console","error","response","message","includes","onEditNewImage","encodedImage","newImage","created_at","updated_at","created_by","params","steps","width","height","prompt","negative_prompt","denoising_strength","label","uuid","model","negative_score","nsfw","parent","score","status","StatusEnum","Completed","temporary","imageData","push","onNSFW","updatedImage","map","loadImages","log","cursor","add","listImages","resp","lock","pollImages","pendingOrProcessingImages","filter","length","pendingById","reduce","acc","batchGetImages","ids","updatedImages","statusChange","i","img","Error","deleteImage","getImageDownloadUrls","downloadUrls","get","image_url","responseType","base64ImageData","toString","src","timerHandle","setInterval","clearInterval","qs","parse","ignoreQueryPrefix","loadParent","isPendingOrProcessing","Pending","Processing","b","aScore","bScore","trim","onLoadMore","minUpdatedAt","forEach","Math","min","imagesById","deleted_at","onDelete","onFork","onSave","createInput","count","Saved","split","createEncodedThumbnail","encodedThumbnail","binaryThumbnailData","createResp","imageId","getImageUploadUrls","uploadUrls","thumbnail_url","hardDeleteImage","onEdit","onThumbnailClicked","onConfirmBulkDelete","promises","Object","keys","Promise","all","completedOrSavedImages","pendingImages","processingImages","style","fontSize","textAlign","timestamp","onCancel","className","marginTop","paddingBottom","marginBottom","value","type","placeholder","onChange","e","target","float","display","onClick","marginLeft","Toggle","variant","Menu","Item","dataLength","next","loader","pendingCount","processingCount","bulkDelete","onClose","onSwipe","direction","index","findIndex","newIndex","show","title","progress","onDeleteImage","onHide","AspectRatioSelector","aspectRatio","disabled","aspectRatioDetails","aspectRatios","minHeight","alignItems","border","margin","displayName","max","parseInt","PaletteButton","selectedColor","color","onColorSelected","displayColorPicker","setDisplayColorPicker","tmpColor","setTmpColor","backgroundColor","onDoubleClick","position","zIndex","hex","onChangeComplete","marginRight","PendingImagesThumbnail","hover","setHover","icon","onMouseEnter","onMouseLeave","backgroundImage","backgroundSize","background","lineHeight","PendingImages","imageIcon","pendingDiv","phrases","substring","Header","closeButton","Title","Body","Footer","CopyToClipboardIcon","text","copied","setCopied","onCopy","ImagePopup","useRef","showNSFW","setShowNSFW","current","onerror","indexOf","swipeArrowMargin","innerWidth","maxImageHeight","innerHeight","Modal","size","left","top","transform","padding","ref","maxWidth","maxHeight","alt","right","displayStatus","charAt","toUpperCase","slice","statusBadge","href","seed","eraserWidthModifier","EnhanceTool","renderer","selectionTool","pencilTool","negativePrompt","variationStrength","_dirty","worker","idCounter","_state","stateHandler","selectionControlsListener","maskHandler","selectedImageDataIndex","selectedImageData","panning","erasing","progressListener","errorListener","dirtyListener","SelectionTool","PencilTool","selectSupported","state","selectionArgs","getArgs","selectionOverlay","x","y","getWidth","getHeight","updateArgs","brushColor","setCursor","ImageUtilWorker","this","dirty","listener","handler","destroy","outpaint","getUpscaleLevel","event","zoomHelper","translateMouseToCanvasCoordinates","nativeEvent","offsetX","offsetY","button","ImageData","erasePoint","onMouseDown","getSelectionOverlay","baseWidth","eraserRadius","floor","relX","relY","startX","startY","endX","endY","j","distance","sqrt","pow","alphaPct","alpha","setEditImage","featherWidth","radius","onPan","updateCursor","onMouseMove","onMouseUp","onWheel","args","maskData","loadImageDataElement","imageElement","canvas","document","createElement","ctx","getContext","drawImage","getImageData","newId","req","alphaMode","feather","pixels","alphaPixels","processRequest","updatedImageData","remove","isMasked","deleteMask","createMask","apisocket","notifyError","getEncodedImage","encodedMask","getEncodedMask","defaultArgs","updateProgress","tmpMaskImage","binaryMaskData","tmp_mask_id","ceil","completed","lastUpdate","onMessage","msg","JSON","NOTIFICATION_IMAGE_UPDATED","loadImageData","addMessageListener","startTime","lastCheck","completeCount","sleep","diff","pendingIds","updatedImagesResult","byId","updated","isAfter","removeMessageListener","saveListener","commitSelection","negative_phrases","BaseTool","EnhanceControls","tool","setCount","setDirty","setVariationStrength","setPrompt","setNegativePrompt","setModel","selectingModel","setSelectingModel","setState","setIsMasked","setProgress","setError","onChangeState","onChangeMask","onProgress","onDirty","cost","calculateImagesCost","role","data-dismiss","aria-label","aria-hidden","lockAspectRatio","htmlFor","step","round","parseFloat","imagesCost","onConfirm","onRevert","cancel","confirm","erase","submit","mask","when","onSelectModel","initialSelectedModel","inpainting","AddMetricItemTypeEnum","HealthcheckStatusEnum","ImageParamsControlnetTypeEnum","ImageParamsAugmentationEnum","UpsertWorkerInputStatusEnum","WorkerStatusEnum","BASE_PATH","BaseAPI","configuration","basePath","globalAxios","RequiredError","field","name","DUMMY_BASE_URL","assertParamExists","functionName","paramName","paramValue","setSearchParams","url","searchParams","URLSearchParams","objects","object","key","Array","isArray","delete","item","append","set","serializeDataIfNeeded","requestOptions","nonString","isJsonMime","stringify","toPathString","pathname","hash","createRequestFunction","axiosArgs","axiosRequestArgs","options","request","AIBrushApiFp","localVarAxiosParamCreator","addMetrics","addMetricsInput","localVarUrlObj","URL","baseOptions","localVarRequestOptions","method","localVarQueryParameter","localVarHeaderParameter","query","headersFromBaseOptions","fields","batchGetImagesInput","createDepositCode","createDepositCodeInput","createImageInput","createInviteCode","createStripeSession","createStripeSessionInput","format","localVarPath","encodeURIComponent","String","discordLogin","getAssetsUrl","getCredits","getFeatures","getGlobalSettings","getMaskData","getModels","getThumbnailData","healthcheck","isAdmin","limit","login","loginInput","redeemDepositCode","code","refresh","refreshLoginInput","updateGlobalSettings","updateGlobalSettingsRequest","updateImage","updateImageInput","uploadImageData","body","uploadThumbnailData","verify","verifyLoginInput","AIBrushApiAxiosParamCreator","localVarAxiosArgs","AIBrushApi","SmudgeTool","brushSize","brushOpacity","lastX","lastY","smudging","sync","smudgeLine","copyEditImageFromBaseImage","SmudgeControls","setBrushSize","setBrushOpacity","visibility","InpaintTool","imageWidth","imageHeight","selectionWidth","render","alphaMask","snapshot","undo","clearRedoStack","expandToOverlay","tmpImagePromises","tmpImages","binaryImages","uploadPromises","tmpImage","binaryImage","tmp_image_id","closestAspectRatio","getClosestAspectRatio","selection_overlay","InpaintControls","setoutpaint","checked","ImageEditor","showSelectionControls","setShowSelectionControls","tools","iconClass","constructor","r","renderControls","t","onShowSelectionControls","colors","defaultColors","setImage","setRenderer","setTool","toolConfig","setToolConfig","canUndo","setCanUndo","canRedo","setCanRedo","busyMessage","setBusyMessage","canvasRef","onSelectTool","toolconfig","newTool","onSaveImage","saveNewImage","newArgs","preventDefault","localImage","imageSrc","download_urls","Image","onload","createRenderer","setBaseImage","loadImage","onSnapshot","addEventListener","removeEventListener","updateCanvasSize","resetView","buttonClass","renderTool","redo","verticalAlign","touchAction","userSelect","onTouchStart","onTouchMove","onTouchEnd","select","Renderer","undoStack","redoStack","currentSnapshot","backgroundLayer","baseImageLayer","editLayer","maskLayer","selectionOverlayPreview","hasSelection","zoom","snapshotListener","initializeBackgroundLayer","allowRedo","pop","clearRect","putImageData","notifySnapshotListener","shift","context","setTransform","globalAlpha","drawOverlay","resetMask","fillStyle","fillRect","pattern","createPattern","createCheckeredPattern","color1","color2","updateSelectionOverlay","setSelectionOverlay","updateZoomAndOffset","lineWidth","strokeStyle","strokeRect","beginPath","arc","PI","stroke","fill","moveTo","lineTo","result","toDataURL","selection","imageDataToEncodedImage","erasure","layer","convertErasureToMask","imageLayer","brushx","brushy","absx","leftEdge","rightEdge","topEdge","bottomEdge","absy","contains","x1","y1","x2","y2","lineCap","unitVector","totalRed","totalGreen","totalBlue","averageRed","averageGreen","averageBlue","pixel","g","rgbToHex","minX","minY","newCanvas","AspectRatio","cfg","newWidth","newHeight","DEFAULT_ASPECT_RATIO","tests","aRatio","bRatio","abs","MaskEditor","setBrushColor","flexDirection","flexWrap","invertMask","ImportExportControls","backupImage","setBackupImage","files","byteString","atob","buffer","ArrayBuffer","intArray","Uint8Array","charCodeAt","blob","Blob","saveAs","onExport","AugmentControls","activeAugmentation","setActiveAugmentation","imageWorker","setImageWorker","lastError","setLastError","augmentImageData","augmentation","c","imageDataToCanvas","Upscale","FaceRestore","processingImage","checkResp","imageDataResp","binaryImageToDataBase64","decodeImage","upscaleFactor","newImageData","onAugment","fixImageSize","OutOfCreditsModal","centered","to","PaymentStatusModal","setShow","handleClose","resolve","reject","dataUrl","urls","catch","splitImage","initImage","tile_size","num_tiles_x","num_tiles_y","tiles","x0","y0","tile","numTilesX","numTilesY","tileSize","mergeTiles","splitResult","tileCanvas","resizeImage","numWorkers","workers","callbacks","Worker","process","bind","postMessage","terminate","cropWidth","cropHeight","cropX","cropY","base64","resizeEncodedImage","encodedImageToBlob","binaryString","arr","uploadBlob","signedUrl","xhr","XMLHttpRequest","open","setRequestHeader","send","BusyModal","children","backdrop","keyboard","LocalImagesStore","db","indexedDB","onupgradeneeded","evt","imagesStore","objectStoreNames","transaction","objectStore","createObjectStore","keyPath","createIndex","unique","onsuccess","_","legacyImage","join","stable_diffusion_strength","iterations","store","hydrateImage","cleanupDeletedImages","range","IDBKeyRange","lowerBound","upperBound","openCursor","toLowerCase","continue","imagesRequest","clear","olderThan","getDeletedImages","deletedImages","subtract","Login","props","email","setEmail","emailSubmitted","setEmailSubmitted","setCode","inviteCode","onLogin","match","client","invite_code","onVerify","fontWeight","aria-describedby","host","protocol","redirectUri","discordLink","TokenRefresher","onCredentialsRefreshed","onCredentialsExpired","credentials","interval","refreshToken","loginResult","Healthchecker","healthCheck","setHealthCheck","GenerateCode","amount","setAmount","generatedCode","setGeneratedCode","handleSubmit","Form","InputGroup","Control","Append","Button","Alert","GlobalSettings","minimum_worker_allocations","stable_diffusion","stable_diffusion_inpainting","swinir","workerSettings","setWorkerSettings","saving","setSaving","loadWorkerSettings","settings","settings_json","saveWorkerSettings","Admin","DeletedImages","deleting","setDeleting","onDeleteAllImages","onRestoreImage","goBack","borderBottom","ImageThumbnail","paddingTop","DiscordLogin","accessToken","LocalDeletedImages","clearDeletedImages","KVStore","dbConfig","dbName","storeName","createDB","getDB","savedImagesCache","kvstore","order","batchGetIds","deleteItem","getItem","savedImage","batchResult","setItem","SavedImagesPage","imagesResult","latestCursor","deletedIds","uniqueIds","Set","payload","NOTIFICATION_IMAGE_DELETED","Dropdown","res","TestPage","originalImage","setOriginalImage","upscaledImage","setUpscaledImage","upscaleImageData","onImageSelected","originalImageData","upscaledTile","upscaledImageData","upscale","feathered","upscaledCanvas","CreditsBalance","config","apiUrl","httpClient","localStorage","ApiSocket","updateHttpClient","App","setCredentials","setAssetsUrl","setIsAdmin","features","setFeatures","onLogout","removeItem","init","assets_url","storedCredentials","is_admin","updateToken","connect","path","exact","bottom","privacy_uri","terms_uri","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","getElementById","ZoomHelper","startTouches","startZoom","startOffsetX","startOffsetY","originalZoom","getZoom","getOffsetX","getOffsetY","canvasPoint","deltaY","xDiff","yDiff","movementX","movementY","rect","getBoundingClientRect","getCanvas","touches","canvasRect","startTouch1","startTouch2","touch1","touch2","startDistance","clientX","clientY","startCenterX","startCenterY","centerX","centerY","startCanvasPoint","xDiff2","yDiff2","mouseX","mouseY","touchHandle","_pinchZooming","_panning","_updateCursor","touch","identifier","pageX","pageY","screenX","screenY","RecentList","listSize","modelsJson","models","recentModels","getRecentItems","modelIndex","splice","unshift","saveRecentItems","recentNegativePrompts","messageListeners","l","close","WebSocket","onopen","onmessage","onclose","CostIndicator","retry","setRetry","backgroundRepeat","backgroundPosition","readOnly","supportedModels","controlnetTypes","SeedInput","setSeed","useCustomSeed","setUseCustomSeed","FormGroup","FormCheck","random","FormControl","TextInputWithHistory","onBlur","onSelect","eventKey","overflow","defaultNegativePrompt","encoded_mask","getItems","ImagePrompt","setAspectRatio","parentId","setParentId","advancedView","setAdvancedView","setEncodedImage","controlnetType","setControlnetType","cfgScale","setCfgScale","setSize","defaultAspectRatio","setAspectRatioDetails","originalWidth","setOriginalWidth","originalHeight","setOriginalHeight","resetState","addItem","controlnet_type","cfg_scale","bestMatch","scale","file","HTMLCanvasElement","scaledAspectRatio","borderTopLeftRadius","textDecoration","aspectRatioId","toFixed","ModelSelector","ProgressBar","aria-valuenow","aria-valuemin","aria-valuemax","ms","ModelList","selectedModel","setMaxHeight","handleResize","ListGroup","overflowY","active","cache","storage","ttl","expiry","Date","now","itemStr","initialValue","cachedValue","setValue","useCache","setModels","setSelectedModel","searchTerm","setSearchTerm","filteredModels","setSortedModels","recentModelNames","recentModelIndices","sortedModels","aIndex","bIndex","values","Row","Col","sm","description","showcases","ResetToDefaultIcon","placement","overlay","alertType","timeout","ErrorNotification","SuccessNotification","ColorPicker","isDrawing","colorPicking","lastPickedColor","colorPickedListener","drawPoint","getPixel","drawLine","Controls","palette","setPalette","addToPalette","onColorPicked","beginColorpicker","clamp","setSelectionOverlayPreview","upscaleLevel"],"mappings":"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","file":"static/js/main.3fb4057e.chunk.js","sourcesContent":["// V2 page\nimport { FC, useState, useEffect } from \"react\";\nimport * as uuid from \"uuid\";\nimport axios from \"axios\";\nimport qs from \"qs\";\nimport Dropdown from \"react-bootstrap/Dropdown\";\nimport { useParams, useHistory, Link, useLocation } from \"react-router-dom\";\nimport moment from \"moment\";\nimport ScrollToTop from \"react-scroll-to-top\";\nimport { AIBrushApi } from \"../client\";\nimport { CreateImageInput, StatusEnum, TemporaryImage } from \"../client/api\";\nimport { ImageThumbnail } from \"../components/ImageThumbnail\";\nimport { ImagePrompt, defaultArgs } from \"../components/ImagePrompt\";\nimport {\n    convertPNGToJPG,\n    createEncodedThumbnail,\n    encodedImageToBlob,\n    uploadBlob,\n} from \"../lib/imageutil\";\n\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport { ImagePopup } from \"../components/ImagePopup\";\nimport { BusyModal } from \"../components/BusyModal\";\nimport { PendingImagesThumbnail } from \"../components/PendingImagesThumbnail\";\nimport { PendingImages } from \"../components/PendingImages\";\nimport { ApiSocket } from \"../lib/apisocket\";\nimport { LocalImagesStore, LocalImage } from \"../lib/localImagesStore\";\nimport { ErrorNotification, SuccessNotification } from \"../components/Alerts\";\nimport { sleep } from \"../lib/sleep\";\nimport { ProgressBar } from \"../components/ProgressBar\";\nimport OutOfCreditsModal from \"../components/OutOfCreditsModal\";\nimport PaymentStatusModal from \"../components/PaymentStatusModal\";\n\nexport const anonymousClient = axios.create();\ndelete anonymousClient.defaults.headers.common[\"Authorization\"];\n\ninterface Props {\n    api: AIBrushApi;\n    apiSocket: ApiSocket;\n    assetsUrl: string;\n    localImages: LocalImagesStore;\n    paymentStatus?: \"success\" | \"canceled\";\n}\n\nexport const Homepage: FC<Props> = ({\n    api,\n    apiSocket,\n    assetsUrl,\n    localImages,\n    paymentStatus,\n}) => {\n    const [creating, setCreating] = useState(false);\n    const [selectedImage, setSelectedImage] = useState<LocalImage | null>(null);\n    const [parentImage, setParentImage] = useState<LocalImage | null>(null);\n    const [loadingParent, setLoadingParent] = useState(false);\n    const [savingImage, setSavingImage] = useState(false);\n    const [uploadProgress, setUploadingProgress] = useState(0);\n\n    const [showPendingImages, setShowPendingImages] = useState(false);\n\n    const [images, setImages] = useState<Array<LocalImage>>([]);\n    const [err, setErr] = useState<string | null>(null);\n    const [errTime, setErrTime] = useState<number>(0);\n    const [success, setSuccess] = useState<string | null>(null);\n    const [successTime, setSuccessTime] = useState<number>(0);\n\n    const [hasMore, setHasMore] = useState<boolean>(true);\n    const [search, setSearch] = useState<string>(\"\");\n    const [searchDebounce, setSearchDebounce] = useState<string>(\"\");\n\n    const [bulkDeleteSelecting, setBulkDeleteSelecting] = useState(false);\n    const [bulkDeleting, setBulkDeleting] = useState(false);\n    const [bulkDeleteIds, setBulkDeleteIds] = useState<{\n        [key: string]: boolean;\n    }>({});\n\n    const [censorNSFW, setCensorNSFW] = useState(true);\n    const [outOfCredits, setOutOfCredits] = useState(false);\n\n    const { id } = useParams<{ id?: string }>();\n    const history = useHistory();\n    const location = useLocation();\n\n    const onError = (err: string) => {\n        setErr(err);\n        setErrTime(moment().valueOf());\n    };\n\n    useEffect(() => {\n        let handle = setTimeout(() => {\n            setSearch(searchDebounce);\n        }, 500);\n        return () => {\n            clearTimeout(handle);\n        };\n    }, [searchDebounce]);\n\n    useEffect(() => {\n        if (id) {\n            // check if the image is already loaded\n            const image = images.find((image) => image.id === id);\n            if (image) {\n                setSelectedImage(image);\n            }\n            // refresh\n            localImages.getImage(id).then((image) => {\n                setSelectedImage(image);\n                if (!image) {\n                    history.replace(\"/\");\n                }\n            });\n        } else {\n            setSelectedImage(null);\n        }\n    }, [id]);\n\n    const onSubmit = async (input: CreateImageInput) => {\n        setCreating(true);\n        setParentImage(null);\n        setErr(null);\n        window.scrollTo(0, 0);\n        setUploadingProgress(0);\n        try {\n            if (input.encoded_image) {\n                const encodedJpg = await convertPNGToJPG(input.encoded_image);\n                const tmpInitImage = await api.createTemporaryImage(\"jpg\");\n                // convert base64 to binary\n                const binaryImageData = Buffer.from(\n                    encodedJpg,\n                    \"base64\"\n                );\n                await anonymousClient.put(\n                    tmpInitImage.data.upload_url,\n                    binaryImageData,\n                    {\n                        headers: {\n                            \"Content-Type\": \"image/jpeg\",\n                        },\n                        onUploadProgress: (progressEvent: any) => {\n                            const percentCompleted =\n                                progressEvent.loaded / progressEvent.total;\n                            setUploadingProgress(percentCompleted);\n                        },\n                    }\n                );\n                input.encoded_image = undefined;\n                input.tmp_jpg_id = tmpInitImage.data.id;\n            }\n\n            const newImages = await api.createImage(input);\n            if (newImages.data.images) {\n                for (let image of newImages.data.images || []) {\n                    localImages.saveImage(image);\n                }\n                setImages((images) => {\n                    return [...newImages.data.images!, ...images].sort(\n                        sortImages\n                    );\n                });\n            } else {\n                onError(\"Could not create images\");\n            }\n        } catch (e: any) {\n            console.error(e);\n            if (e.response?.data?.message?.includes(\"credits\")) {\n                setOutOfCredits(true);\n                return;\n            }\n            onError(\"Error creating images\");\n        } finally {\n            setCreating(false);\n        }\n    };\n\n    const onEditNewImage = async (input: CreateImageInput) => {\n        setCreating(true);\n        setParentImage(null);\n        setErr(null);\n        window.scrollTo(0, 0);\n        try {\n            const encodedImage = input.encoded_image!;\n            const newImage: LocalImage = {\n                created_at: moment().valueOf(),\n                updated_at: moment().valueOf(),\n                created_by: \"\",\n                params: {\n                    steps: 20,\n                    width: input.params.width,\n                    height: input.params.height,\n                    prompt: input.params.prompt,\n                    negative_prompt: input.params.negative_prompt,\n                    denoising_strength: input.params.denoising_strength,\n                },\n                label: \"\",\n                id: uuid.v4(),\n                model: input.model!,\n                negative_score: 0,\n                nsfw: !!input.nsfw,\n                parent: input.parent!,\n                score: 0,\n                status: StatusEnum.Completed,\n                temporary: false,\n                imageData: `data:image/png;base64,${encodedImage}`,\n            };\n            await localImages.saveImage(newImage);\n\n            history.push(`/image-editor/${newImage.id}`);\n        } catch (e: any) {\n            console.error(e);\n            onError(\"Error creating image\");\n        } finally {\n            setCreating(false);\n        }\n    };\n\n    const onNSFW = async (updatedImage: LocalImage, nsfw: boolean) => {\n        updatedImage = {\n            ...updatedImage,\n            nsfw,\n        };\n        await localImages.saveImage(updatedImage);\n        setImages((images) => {\n            return images.map((image) => {\n                if (updatedImage.id === image.id) {\n                    return {\n                        ...image,\n                        nsfw,\n                    };\n                }\n                return image;\n            });\n        });\n        setSelectedImage(updatedImage);\n    };\n\n    const loadImages = async (search: string) => {\n        console.log(\"Initial load images\");\n        // clear error\n        setErr(null);\n        setHasMore(true);\n        try {\n            const cursor = moment().add(1, \"minutes\").valueOf();\n            const resp = await localImages.listImages(\n                cursor,\n                \"prev\",\n                100,\n                search\n            );\n            setImages(resp.sort(sortImages));\n            return;\n        } catch (err) {\n            onError(\"Could not load images\");\n            console.error(err);\n        }\n    };\n\n    useEffect(() => {\n        loadImages(search);\n    }, [search]);\n\n    useEffect(() => {\n        if (!api) {\n            return;\n        }\n        let lock = false;\n\n        const pollImages = async (images: Array<LocalImage>) => {\n            if (lock) {\n                return;\n            }\n            lock = true;\n\n            const pendingOrProcessingImages = images.filter((image) => {\n                return (\n                    image.status === \"pending\" || image.status === \"processing\"\n                );\n            });\n            if (pendingOrProcessingImages.length === 0) {\n                return;\n            }\n\n            const pendingById = pendingOrProcessingImages.reduce(\n                (acc, image) => {\n                    acc[image.id] = image;\n                    return acc;\n                },\n                {} as Record<string, LocalImage>\n            );\n\n            try {\n                const resp = await api.batchGetImages(\"id,status,nsfw,error\", {\n                    ids: pendingOrProcessingImages.map((image) => image.id),\n                });\n\n                if (resp.data.images) {\n                    const updatedImages: Array<LocalImage> =\n                        resp.data.images || [];\n                    let statusChange = false;\n                    for (let i = 0; i < updatedImages.length; i++) {\n                        let img = updatedImages[i];\n                        if (pendingById[img.id].status !== img.status) {\n                            statusChange = true;\n                        }\n                        img = {\n                            ...pendingById[img.id],\n                            ...img,\n                        };\n                        updatedImages[i] = img;\n\n                        if (img.status == StatusEnum.Error) {\n                            onError(\n                                img.error ||\n                                    \"Some images failed to generate, please make sure your prompt doesn't violate our terms of service\"\n                            );\n                            await api.deleteImage(img.id);\n                            await localImages.deleteImage(img.id);\n                            continue;\n                        }\n\n                        if (img.status === StatusEnum.Completed) {\n                            const downloadUrls = await api.getImageDownloadUrls(\n                                img.id\n                            );\n                            const resp = await anonymousClient.get(\n                                downloadUrls.data.image_url!,\n                                {\n                                    responseType: \"arraybuffer\",\n                                }\n                            );\n                            const binaryImageData = Buffer.from(\n                                resp.data,\n                                \"binary\"\n                            );\n                            const base64ImageData =\n                                binaryImageData.toString(\"base64\");\n                            const src = `data:image/png;base64,${base64ImageData}`;\n                            img.imageData = src;\n                        }\n                        await localImages.saveImage(img);\n                    }\n                    if (statusChange) {\n                        setImages((images) => {\n                            return [\n                                ...images.map((image) => {\n                                    const updatedImage = updatedImages.find(\n                                        (i) => i.id === image.id\n                                    );\n                                    if (updatedImage) {\n                                        return updatedImage;\n                                    }\n                                    return image;\n                                }),\n                            ].sort(sortImages);\n                        });\n                    }\n                }\n            } catch (err) {\n                onError(\"Could not load images\");\n                console.error(err);\n            } finally {\n                lock = false;\n            }\n        };\n\n        const timerHandle = setInterval(() => {\n            pollImages(images);\n        }, 2 * 1000);\n        return () => {\n            clearInterval(timerHandle);\n        };\n    }, [api, images, search]);\n\n    // load parent image from saved images if an id is on the query string\n    useEffect(() => {\n        const loadParent = async () => {\n            const search = qs.parse(location.search, {\n                ignoreQueryPrefix: true,\n            });\n            if (search.parent) {\n                setLoadingParent(true);\n                try {\n                    const parentImage = await api.getImage(\n                        search.parent as string\n                    );\n                    if (parentImage.data) {\n                        const downloadUrls = await api.getImageDownloadUrls(\n                            parentImage.data.id\n                        );\n                        const resp = await anonymousClient.get(\n                            downloadUrls.data.image_url!,\n                            {\n                                responseType: \"arraybuffer\",\n                            }\n                        );\n                        const binaryImageData = Buffer.from(\n                            resp.data,\n                            \"binary\"\n                        );\n                        const base64ImageData =\n                            binaryImageData.toString(\"base64\");\n                        const src = `data:image/png;base64,${base64ImageData}`;\n                        setParentImage({\n                            ...parentImage.data,\n                            imageData: src,\n                        });\n                        history.push(\"/\");\n                    }\n                } finally {\n                    setLoadingParent(false);\n                }\n            }\n        };\n        loadParent();\n    }, [location.search]);\n\n    const isPendingOrProcessing = (image: LocalImage) => {\n        return (\n            image.status === StatusEnum.Pending ||\n            image.status === StatusEnum.Processing\n        );\n    };\n\n    const sortImages = (a: LocalImage, b: LocalImage) => {\n        // pending and processing images always come first\n        if (isPendingOrProcessing(a) && !isPendingOrProcessing(b)) {\n            return -1;\n        } else if (!isPendingOrProcessing(a) && isPendingOrProcessing(b)) {\n            return 1;\n        }\n        // if the parent is the same, sort by score descending\n        // otherwise, sort by updated_at\n        if (\n            a.parent === b.parent &&\n            a.params.prompt == b.params.prompt &&\n            a.status !== StatusEnum.Pending &&\n            b.status !== StatusEnum.Pending\n        ) {\n            // if the score is the same, sort by updated_at\n            let aScore = a.score;\n            let bScore = b.score;\n            // working around a bug where negative score was assigned\n            // for an empty negative prompt.\n            if (a.params.prompt!.trim() !== \"\") {\n                aScore = aScore - a.negative_score;\n            }\n            if (b.params.prompt!.trim() !== \"\") {\n                bScore = bScore - b.negative_score;\n            }\n            if (aScore == bScore) {\n                return b.updated_at - a.updated_at;\n            }\n            return bScore - aScore;\n        }\n\n        return b.updated_at - a.updated_at;\n    };\n\n    const onLoadMore = async () => {\n        // get the minimum updated_at from images\n        let minUpdatedAt = moment().valueOf();\n        images.forEach((image) => {\n            minUpdatedAt = Math.min(minUpdatedAt, image.updated_at);\n        });\n        // load images in descending order from updated_at\n        let resp = await localImages.listImages(\n            minUpdatedAt - 1,\n            \"prev\",\n            100,\n            search\n        );\n        if (resp.length > 0) {\n            // combine images with new images and sort by updated_at descending\n            setImages((images) => {\n                // filtering is required due to a race condition\n                const imagesById = images.reduce((acc, image) => {\n                    acc[image.id] = image;\n                    return acc;\n                }, {} as { [key: string]: LocalImage });\n                resp = resp.filter((image) => !imagesById[image.id]);\n                return [...images, ...resp]\n                    .filter((image) => !image.deleted_at)\n                    .sort(sortImages);\n            });\n        } else {\n            setHasMore(false);\n        }\n    };\n\n    const onDelete = async (image: LocalImage) => {\n        try {\n            // await api.deleteImage(image.id);\n            await localImages.deleteImage(image.id);\n            setImages((images) => {\n                return images.filter((i) => i.id !== image.id);\n            });\n            history.push(\"/\");\n        } catch (e) {\n            console.error(e);\n            onError(\"Error deleting image\");\n        }\n    };\n\n    const onFork = async (image: LocalImage) => {\n        setParentImage(image);\n        // setSelectedImage(null);\n        history.push(\"/\");\n        window.scrollTo(0, 0);\n    };\n\n    const onSave = async (image: LocalImage) => {\n        setSavingImage(true);\n        try {\n            history.push(\"/\");\n            const createInput: CreateImageInput = {\n                count: 1,\n                // encoded_image: image.imageData!.split(\",\")[1],\n                params: image.params,\n                status: StatusEnum.Saved,\n                temporary: false,\n                label: \"\",\n                model: image.model,\n            };\n\n            const encodedImage = image.imageData!.split(\",\")[1];\n\n            // convert base64 to binary\n            const binaryImageData = Buffer.from(encodedImage, \"base64\");\n            const encodedThumbnail = await createEncodedThumbnail(encodedImage);\n            const binaryThumbnailData = Buffer.from(encodedThumbnail, \"base64\");\n\n            const createResp = await api.createImage(createInput);\n            const imageId = createResp.data.images![0].id;\n            const uploadUrls = await api.getImageUploadUrls(imageId);\n            await anonymousClient.put(\n                uploadUrls.data.thumbnail_url!,\n                binaryThumbnailData,\n                {\n                    headers: {\n                        \"Content-Type\": \"image/png\",\n                    },\n                    onUploadProgress: (progressEvent: any) => {\n                        const percentCompleted =\n                            progressEvent.loaded / progressEvent.total;\n                        setUploadingProgress(percentCompleted / 2);\n                    },\n                }\n            );\n            await anonymousClient.put(\n                uploadUrls.data.image_url!,\n                binaryImageData,\n                {\n                    headers: {\n                        \"Content-Type\": \"image/png\",\n                    },\n                    onUploadProgress: (progressEvent: any) => {\n                        const percentCompleted =\n                            progressEvent.loaded / progressEvent.total;\n                        setUploadingProgress(percentCompleted / 2 + 0.5);\n                    },\n                }\n            );\n\n            await localImages.hardDeleteImage(image.id);\n            setImages((images) => {\n                return images.filter((i) => i.id !== image.id);\n            });\n            setSuccess(\"Image saved\");\n            setSuccessTime(moment().valueOf());\n        } catch (e) {\n            console.error(e);\n            onError(\"Error saving image\");\n        } finally {\n            setSavingImage(false);\n        }\n    };\n\n    const onEdit = async (image: LocalImage) => {\n        history.push(`/image-editor/${image.id}`);\n    };\n\n    const onThumbnailClicked = (image: LocalImage) => {\n        // setSelectedImage(image);\n        if (bulkDeleteSelecting) {\n            setBulkDeleteIds({\n                ...bulkDeleteIds,\n                [image.id]: !bulkDeleteIds[image.id],\n            });\n        } else {\n            history.push(`/images/${image.id}`);\n        }\n    };\n\n    const handleCancelFork = () => {\n        setParentImage(null);\n        window.scrollTo(0, 0);\n    };\n\n    const onConfirmBulkDelete = async () => {\n        try {\n            setBulkDeleting(true);\n            const promises = Object.keys(bulkDeleteIds).map((id) => {\n                return localImages.deleteImage(id);\n            });\n            await Promise.all(promises);\n            setImages((images) => {\n                return images.filter((image) => !bulkDeleteIds[image.id]);\n            });\n            setBulkDeleteIds({});\n            setBulkDeleteSelecting(false);\n        } catch (e) {\n            console.error(e);\n            onError(\"Error deleting images\");\n        } finally {\n            setBulkDeleting(false);\n        }\n    };\n\n    const completedOrSavedImages = images.filter((image) => {\n        return (\n            !image.deleted_at &&\n            (image.status === StatusEnum.Completed ||\n                image.status === StatusEnum.Saved)\n        );\n    });\n\n    const pendingOrProcessingImages = images.filter(\n        (image) =>\n            !image.deleted_at &&\n            (image.status === StatusEnum.Pending ||\n                image.status === StatusEnum.Processing)\n    );\n\n    const pendingImages = pendingOrProcessingImages.filter(\n        (image) => image.status === StatusEnum.Pending\n    );\n\n    const processingImages = pendingOrProcessingImages.filter(\n        (image) => image.status === StatusEnum.Processing\n    );\n\n    const onSwipe = (image: LocalImage, direction: number) => {\n        // select the previous or next image from the currently selected one\n        const index = images.findIndex((i) => i.id === image.id);\n        if (index === -1) {\n            return;\n        }\n        const newIndex = index + direction;\n        if (newIndex < 0 || newIndex >= images.length) {\n            return;\n        }\n        const newImage = images[newIndex];\n        onThumbnailClicked(newImage);\n    }\n\n    return (\n        <>\n            <h1 style={{ fontSize: \"40px\", textAlign: \"left\" }}>\n                Welcome to AiBrush - Home\n            </h1>\n\n            <ErrorNotification message={err} timestamp={errTime} />\n            <SuccessNotification message={success} timestamp={successTime} />\n\n            <ImagePrompt\n                api={api}\n                assetsUrl={assetsUrl}\n                creating={creating}\n                onSubmit={onSubmit}\n                onEdit={onEditNewImage}\n                parent={parentImage}\n                onCancel={() => handleCancelFork()}\n            />\n            <hr />\n\n            <div\n                className=\"homepage-images\"\n                style={{ marginTop: \"48px\", paddingBottom: \"48px\" }}\n            >\n                <div style={{ textAlign: \"left\" }}>\n                    <div\n                        className=\"input-group\"\n                        style={{ marginBottom: \"16px\" }}\n                    >\n                        <input\n                            style={{}}\n                            value={searchDebounce}\n                            type=\"search\"\n                            className=\"form-control image-search\"\n                            placeholder=\"Search...\"\n                            onChange={(e) => setSearchDebounce(e.target.value)}\n                        />\n\n                        <div\n                            style={{\n                                float: \"right\",\n                            }}\n                        >\n                            {!bulkDeleteSelecting && (\n                                <>\n                                    <button\n                                        style={{ display: \"inline\" }}\n                                        className=\"btn btn-primary image-popup-button\"\n                                        onClick={() =>\n                                            setCensorNSFW(!censorNSFW)\n                                        }\n                                    >\n                                        {!censorNSFW && (\n                                            <i className=\"fas fa-eye\"></i>\n                                        )}\n                                        {censorNSFW && (\n                                            <i className=\"fas fa-eye-slash\"></i>\n                                        )}\n                                    </button>\n                                    <Dropdown\n                                        style={{\n                                            display: \"inline\",\n                                            marginLeft: \"8px\",\n                                        }}\n                                    >\n                                        <Dropdown.Toggle variant=\"danger\">\n                                            <i className=\"fas fa-trash\"></i>\n                                        </Dropdown.Toggle>\n\n                                        <Dropdown.Menu>\n                                            <Dropdown.Item\n                                                onClick={() =>\n                                                    setBulkDeleteSelecting(true)\n                                                }\n                                            >\n                                                Bulk Delete\n                                            </Dropdown.Item>\n                                            <Dropdown.Item\n                                                onClick={() =>\n                                                    history.push(\n                                                        \"/local-deleted-images\"\n                                                    )\n                                                }\n                                            >\n                                                View Deleted Images\n                                            </Dropdown.Item>\n                                        </Dropdown.Menu>\n                                    </Dropdown>\n                                </>\n                            )}\n                            {bulkDeleteSelecting && (\n                                <>\n                                    <button\n                                        className=\"btn btn-primary image-popup-button\"\n                                        onClick={() => {\n                                            setBulkDeleteSelecting(false);\n                                            setBulkDeleteIds({});\n                                        }}\n                                    >\n                                        Cancel\n                                    </button>\n                                    <button\n                                        style={{ marginLeft: \"8px\" }}\n                                        className=\"btn image-popup-delete-button\"\n                                        onClick={() => {\n                                            onConfirmBulkDelete();\n                                        }}\n                                    >\n                                        Delete\n                                    </button>\n                                </>\n                            )}\n                        </div>\n                    </div>\n                </div>\n                <InfiniteScroll\n                    dataLength={images.length}\n                    next={onLoadMore}\n                    hasMore={hasMore}\n                    loader={\n                        <>\n                            <hr />\n                            <h4>Loading...</h4>\n                        </>\n                    }\n                >\n                    {pendingOrProcessingImages.length > 0 && (\n                        <PendingImagesThumbnail\n                            pendingCount={pendingImages.length}\n                            processingCount={processingImages.length}\n                            onClick={() => {\n                                setShowPendingImages(true);\n                            }}\n                        />\n                    )}\n                    {completedOrSavedImages.map((image) => (\n                        <ImageThumbnail\n                            key={image.id}\n                            image={image}\n                            assetsUrl={assetsUrl}\n                            onClick={onThumbnailClicked}\n                            bulkDelete={\n                                bulkDeleteSelecting && bulkDeleteIds[image.id]\n                            }\n                            censorNSFW={censorNSFW}\n                        />\n                    ))}\n                </InfiniteScroll>\n            </div>\n\n            {selectedImage && (\n                <ImagePopup\n                    assetsUrl={assetsUrl}\n                    image={selectedImage}\n                    onClose={() => history.push(\"/\")}\n                    onDelete={(image) => {\n                        onDelete(image);\n                        setImages(images.filter((i) => i.id !== image.id));\n                        history.push(\"/\");\n                    }}\n                    onFork={(image) => {\n                        onFork(image);\n                        history.push(\"/\");\n                    }}\n                    onEdit={(image) => {\n                        onEdit(image);\n                    }}\n                    onSave={(image) => {\n                        onSave(image);\n                    }}\n                    onNSFW={onNSFW}\n                    censorNSFW={censorNSFW}\n                    onSwipe={onSwipe}\n                />\n            )}\n            <ScrollToTop />\n            <BusyModal show={creating} title=\"Creating images\">\n                <p>Please wait while we create your image.</p>\n                <ProgressBar progress={uploadProgress} />\n            </BusyModal>\n            <BusyModal show={bulkDeleting} title=\"Deleting images\">\n                <p>Please wait while we delete your images.</p>\n            </BusyModal>\n            <BusyModal show={loadingParent} title=\"Loading parent image\">\n                <p>Please wait while we load the parent image.</p>\n            </BusyModal>\n            <BusyModal show={savingImage} title=\"Saving image\">\n                {/* bootstrap progress bar for uploadProgress (0-1 value) */}\n                <ProgressBar progress={uploadProgress} />\n            </BusyModal>\n            <PendingImages\n                images={pendingOrProcessingImages}\n                onCancel={() => setShowPendingImages(false)}\n                show={showPendingImages}\n                onDeleteImage={(image) => {\n                    onDelete(image);\n                    setImages(images.filter((i) => i.id !== image.id));\n                }}\n            />\n            <OutOfCreditsModal\n                show={outOfCredits}\n                onHide={() => setOutOfCredits(false)}\n            />\n            <PaymentStatusModal paymentStatus={paymentStatus} />\n        </>\n    );\n};\n","import React, { FC, useEffect, useRef, useState } from \"react\";\n\nimport { aspectRatios, DEFAULT_ASPECT_RATIO, getClosestAspectRatio } from \"../lib/aspecRatios\";\n\ninterface Props {\n    aspectRatio: number;\n    onChange: (aspectRatio: number) => void;\n    disabled?: boolean;\n}\n\nexport const AspectRatioSelector: FC<Props> = ({ aspectRatio, onChange, disabled }) => {\n    const aspectRatioDetails = aspectRatios[aspectRatio];\n    return (\n        <div className=\"form-group\">\n            <div\n                style={{\n                    minHeight: \"140px\",\n                    display: \"flex\",\n                    alignItems: \"center\",\n                }}\n            >\n                {/* aspect ratio slider, goes from 0 -> aspectRatios.length - 1 */}\n                <div\n                    style={{\n                        width: aspectRatioDetails.width / 8,\n                        height: aspectRatioDetails.height / 8,\n                        // dotted line options: dotted, dashed, solid, double, groove, ridge, inset, outset, none, hidden\n                        border: \"1px dashed white\",\n                        margin: \"auto\",\n                    }}\n                ></div>\n            </div>\n            <label style={{width: \"100%\"}}>\n                Aspect Ratio\n                <small className=\"form-text text-muted\" style={{float: \"right\"}}>\n                    {aspectRatioDetails.displayName}\n                </small>\n            </label>\n            <input\n                type=\"range\"\n                disabled={disabled}\n                className=\"form-control-range\"\n                min={0}\n                max={aspectRatios.length - 1}\n                value={aspectRatio}\n                onChange={(e) => {\n                    onChange(parseInt(e.target.value));\n                }}\n            />\n        </div>\n    );\n};\n","import React, { FC, useState, useEffect } from \"react\";\nimport { ChromePicker } from \"react-color\";\n\ninterface Props {\n    selectedColor: string;\n    color: string;\n    onClick: (color: string) => void;\n    onColorSelected?: (color: string) => void;\n}\n\nexport const PaletteButton: FC<Props> = ({\n    selectedColor,\n    color,\n    onClick,\n    onColorSelected,\n}) => {\n    const [displayColorPicker, setDisplayColorPicker] = useState(false);\n    const [tmpColor, setTmpColor] = useState(color);\n\n    useEffect(() => {\n        setTmpColor(color);\n    }, [color]);\n\n    const popover: React.CSSProperties = {\n        position: \"absolute\",\n        zIndex: 2,\n    };\n\n    let className = \"palette-button\";\n    if (selectedColor === color) {\n        className += \" selected\";\n    } else if (color == \"#000000\") {\n        className += \" black\";\n    }\n    return (\n        <>\n            <div\n                className={className}\n                style={{ backgroundColor: color }}\n                onClick={() => onClick(color)}\n                onDoubleClick={() => setDisplayColorPicker(!displayColorPicker)}\n            ></div>\n            {onColorSelected && displayColorPicker ? (\n                <div style={popover}>\n                    {/* <div style={cover} onClick={handleClose} /> */}\n                    <ChromePicker\n                        color={tmpColor}\n                        onChange={(color) => setTmpColor(color.hex)}\n                        onChangeComplete={(color) => setTmpColor(color.hex)}\n                    />\n                    <button\n                        className=\"btn btn-primary\"\n                        style={{ marginRight: \"8px\", marginLeft: \"16px\" }}\n                        onClick={() => {\n                            onColorSelected(tmpColor);\n                            setDisplayColorPicker(false);\n                        }}\n                    >\n                        <i className=\"fas fa-check\" />\n                    </button>\n                    <button\n                        className=\"btn btn-primary\"\n                        onClick={() => setDisplayColorPicker(false)}\n                    >\n                        <i className=\"fas fa-times\" />\n                    </button>\n                </div>\n            ) : null}\n        </>\n    );\n};\n","import React, { FC, useEffect, useState } from \"react\";\n\ninterface Props {\n    pendingCount: number;\n    processingCount: number;\n    onClick?: () => void;\n}\n\nexport const PendingImagesThumbnail: FC<Props> = ({\n    pendingCount,\n    processingCount,\n    onClick,\n}) => {\n    const [hover, setHover] = useState(false);\n\n    // on mouse in/out, set hover state\n    const onMouseEnter = () => setHover(true);\n    const onMouseLeave = () => setHover(false);\n    let icon = (\n        <i style={{ marginTop: \"20px\" }} className=\"fa fa-hourglass-half\"></i>\n    );\n\n    if (processingCount > 0) {\n        icon = (\n            <i style={{ marginTop: \"20px\" }} className=\"fa fa-cog fa-spin\"></i>\n        );\n    }\n\n    return (\n        <div\n            onMouseEnter={onMouseEnter}\n            onMouseLeave={onMouseLeave}\n            style={{\n                backgroundImage: `url(/images/default.png)`,\n                backgroundSize: \"contain\",\n                width: \"128px\",\n                height: \"128px\",\n                margin: \"8px\",\n                float: \"left\",\n                cursor: \"pointer\",\n            }}\n            onClick={onClick}\n        >\n            {hover && (\n                <div\n                    style={{\n                        background: \"rgba(255, 255, 255, 0.5)\",\n                        color: \"black\",\n                        width: \"100%\",\n                        height: \"100%\",\n                        lineHeight: \"1\",\n                        fontSize: \"20px\",\n                    }}\n                >\n                    <br/>\n                    {pendingCount > 0 && (\n                        <div style={{ marginBottom: \"24px\" }}>\n                            {pendingCount} pending\n                        </div>\n                    )}\n                    {processingCount > 0 && (\n                        <div>{processingCount} processing</div>\n                    )}\n                </div>\n            )}\n            {!hover && (\n                <div\n                    style={{\n                        background: \"rgba(255, 255, 255, 0.3)\",\n                        color: \"#555\",\n                        width: \"100%\",\n                        height: \"100%\",\n                        fontSize: \"80px\",\n                    }}\n                >\n                    {icon}\n                </div>\n            )}\n        </div>\n    );\n};\n","import React, {FC, useEffect, useState} from \"react\";\nimport { Modal } from \"react-bootstrap\";\nimport { Image } from \"../client/api\";\n\ninterface Props {\n    images: Image[];\n    onDeleteImage: (image: Image) => void;\n    onCancel: () => void;\n    show: boolean;\n}\n\nexport const PendingImages: FC<Props> = ({\n    images,\n    onDeleteImage,\n    onCancel,\n    show,\n}) => {\n\n    function imageIcon(image: Image) {\n        if (image.status === \"pending\") {\n            return <i className=\"fa fa-hourglass-half\"></i>;\n        } else if (image.status === \"processing\") {\n            return <i className=\"fa fa-cog fa-spin\"></i>;\n        }\n    }\n\n    const truncate = (phrases: string) => {\n        if (phrases.length > 35) {\n            return phrases.substring(0, 35) + \"...\";\n        }\n        return phrases;\n    }\n\n    // refactor from table to div layout\n    const pendingDiv = (\n        <div>\n            <div style={{marginBottom: \"8px\"}}>\n                <div style={{display: \"inline-block\", width: \"100px\"}}>\n                    Status\n                </div>\n                <div style={{display: \"inline-block\", width: \"250px\"}}>\n                    Phrases\n                </div>\n                <div style={{display: \"inline-block\", width: \"100px\"}}>\n                    Action\n                </div>\n            </div>\n            {images.map((image) => (\n                <div key={image.id} style={{marginBottom: \"8px\"}}>\n                    <div style={{display: \"inline-block\", width: \"100px\"}}>\n                        {imageIcon(image)}&nbsp;{image.status}\n                    </div>\n                    <div style={{display: \"inline-block\", width: \"250px\"}}>\n                        {/* if more than 30 chars, truncate with ellipsis*/}\n                        {truncate(image.params.prompt || \"\")}\n                    </div>\n                    <div style={{display: \"inline-block\", width: \"100px\"}}>\n                        <button\n                            className=\"btn btn-danger btn-sm image-popup-delete-button\"\n                            onClick={() => onDeleteImage(image)}\n                        >\n                            <i className=\"fa fa-trash\"></i>&nbsp;Delete\n                        </button>\n                    </div>\n                </div>\n            ))}\n        </div>\n    );\n\n    return (\n        <Modal show={show} onHide={onCancel}>\n            <Modal.Header closeButton>\n                <Modal.Title>Pending Images</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                {pendingDiv}\n            </Modal.Body>\n            <Modal.Footer>\n                <button className=\"btn btn-secondary\" onClick={onCancel}>\n                    Close\n                </button>\n            </Modal.Footer>\n        </Modal>\n    );\n};","import React, { useState } from 'react';\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\n\ninterface CopyToClipboardIconProps {\n  text: string;\n}\n\nconst CopyToClipboardIcon: React.FC<CopyToClipboardIconProps> = ({ text }) => {\n  const [copied, setCopied] = useState(false);\n\n  const handleCopy = () => {\n    setCopied(true);\n    setTimeout(() => setCopied(false), 5000); // Reset icon after 5 seconds\n  };\n\n  return (\n    <CopyToClipboard text={text} onCopy={handleCopy}>\n      <span style={{cursor: \"pointer\", marginLeft: \"8px\"}}>\n        {/* <FontAwesomeIcon icon={copied ? faCheck : faCopy} style={{ color: copied ? 'green' : undefined }} /> */}\n        <i className={`fas fa-${copied ? 'check' : 'copy'}`} style={{ color: copied ? 'green' : undefined }} />\n      </span>\n    </CopyToClipboard>\n  );\n};\n\nexport default CopyToClipboardIcon;\n","import React, { FC, useEffect, useRef, useState } from \"react\";\nimport { Modal } from \"react-bootstrap\";\nimport { CreateImageInput, Image, StatusEnum } from \"../client/api\";\nimport { LocalImage } from \"../lib/localImagesStore\";\nimport CopyToClipboard from \"react-copy-to-clipboard\";\nimport CopyToClipboardIcon from \"./CopyToClipboardIcon\";\n\ninterface ImagePopupProps {\n    assetsUrl: string;\n    image: LocalImage;\n    censorNSFW: boolean;\n    onClose: () => void;\n    onDelete?: (image: LocalImage) => void;\n    onFork?: (image: LocalImage) => void;\n    onEdit?: (image: LocalImage) => void;\n    onNSFW?: (image: LocalImage, nsfw: boolean) => void;\n    onSave?: (image: LocalImage) => void;\n    onSwipe?: (image: LocalImage, direction: number) => void;\n}\n\nexport const ImagePopup: FC<ImagePopupProps> = ({\n    assetsUrl,\n    image,\n    censorNSFW,\n    onClose,\n    onDelete,\n    onFork,\n    onEdit,\n    onNSFW,\n    onSave,\n    onSwipe,\n}) => {\n    const img = useRef<HTMLImageElement>(null);\n    let src = `${assetsUrl}/${image.id}.image.png?updated_at=${image.updated_at}`;\n    if (image.imageData) {\n        src = image.imageData;\n    }\n    let score = image.score;\n    if (image.params.negative_prompt && image.negative_score != 0) {\n        score -= image.negative_score;\n    }\n    const [showNSFW, setShowNSFW] = useState(false);\n\n    const statusBadge = (status: string) => {\n        const displayStatus = status.charAt(0).toUpperCase() + status.slice(1);\n        let icon = \"fa fa-question-circle\";\n        switch (status) {\n            case StatusEnum.Pending:\n                icon = \"fas fa-hourglass-half\";\n                break;\n            case StatusEnum.Processing:\n                icon = \"fas fa-cog fa-spin\";\n                break;\n            case StatusEnum.Completed:\n                icon = \"fas fa-check\";\n                break;\n            case StatusEnum.Saved:\n                icon = \"fas fa-save\";\n                break;\n            case StatusEnum.Error:\n                icon = \"fas fa-exclamation-circle\";\n                break;\n        }\n        return (\n            <>\n                <span style={{ fontSize: \"24px\" }}>\n                    <i\n                        className={`${icon} status-badge status-badge-${status}`}\n                        style={{\n                            fontSize: \"10px\",\n                            position: \"relative\",\n                            top: \"-1px\",\n                        }}\n                    ></i>\n                    &nbsp;{displayStatus}\n                </span>\n            </>\n        );\n    };\n\n    useEffect(() => {\n        if (!img.current) {\n            return;\n        }\n        img.current.onerror = () => {\n            if (!img.current) {\n                return;\n            }\n            img.current.src = \"/images/default.png\";\n        };\n    }, [img]);\n\n    let title = image.label;\n    if (!title) {\n        title = image.params.prompt!;\n    }\n    if (title.indexOf(\",\") > 0) {\n        title = title.substring(0, title.indexOf(\",\"));\n    }\n\n    let swipeArrowMargin = \"10px\";\n    if (window.innerWidth < 992) {\n        swipeArrowMargin = \"-30px\";\n    }\n    const maxImageHeight = (window.innerHeight * 0.6) + \"px\";\n\n    // if open, show modal with image\n    return (\n        <Modal show={true} onHide={onClose} size=\"xl\">\n            <Modal.Header closeButton>\n                <Modal.Title>{title}</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <div style={{ position: \"relative\" }}>\n                    {/* Left button */}\n                    {onSwipe && <button\n                        className=\"btn btn-secondary btn-sm image-popup-left-button\"\n                        style={{\n                            position: \"absolute\",\n                            left: swipeArrowMargin,\n                            top: \"50%\",\n                            transform: \"translateY(-50%)\",\n                            zIndex: 1,\n                            padding: \"5px 10px\",\n                        }}\n                        onClick={() => onSwipe(image, -1)}\n                    >\n                        <i className=\"fas fa-chevron-left\"></i>\n                    </button>}\n                    <img\n                        ref={img}\n                        style={{\n                            maxWidth: \"100%\",\n                            maxHeight: maxImageHeight,\n                            display: \"block\",\n                            marginLeft: \"auto\",\n                            marginRight: \"auto\",\n                            filter:\n                                image.nsfw && censorNSFW && !showNSFW\n                                    ? \"blur(30px)\"\n                                    : \"\",\n                        }}\n                        id={`image-popup-${image.id}`}\n                        src={src}\n                        alt={image.label}\n                    />\n                    {/* Right button */}\n                    <button\n                        className=\"btn btn-secondary btn-sm .image-popup-right-button\"\n                        style={{\n                            position: \"absolute\",\n                            right: swipeArrowMargin,\n                            top: \"50%\",\n                            transform: \"translateY(-50%)\",\n                            zIndex: 1,\n                            padding: \"5px 10px\",\n                        }}\n                        onClick={() => onSwipe && onSwipe(image, 1)}\n                    >\n                        <i className=\"fas fa-chevron-right\"></i>\n                    </button>\n                </div>\n                {/* List these fields: status, iterations, phrases */}\n                <div className=\"row\">\n                    <div className=\"col-lg-12\"></div>\n                </div>\n                {/* controls */}\n                <div className=\"row\">\n                    <div className=\"col-lg-12\">\n                        <div\n                            className=\"image-popup-controls\"\n                            style={{ marginTop: \"40px\" }}\n                        >\n                            {statusBadge(image.status)}\n                            <div style={{ float: \"right\" }}>\n                                {onFork &&\n                                    (image.status === StatusEnum.Saved ||\n                                        image.status ===\n                                            StatusEnum.Completed) && (\n                                        <button\n                                            className=\"btn btn-secondary btn-sm image-popup-button\"\n                                            onClick={() => onFork(image)}\n                                            style={{ marginRight: \"5px\" }}\n                                        >\n                                            <i className=\"fas fa-code-branch\"></i>\n                                            &nbsp;VARIATIONS\n                                        </button>\n                                    )}\n                                {onDelete && (\n                                    <button\n                                        className=\"btn btn-danger btn-sm image-popup-delete-button\"\n                                        onClick={() =>\n                                            onDelete && onDelete(image)\n                                        }\n                                        style={{ marginRight: \"5px\" }}\n                                    >\n                                        <i className=\"fas fa-trash-alt\"></i>\n                                        &nbsp;DELETE\n                                    </button>\n                                )}\n                                {onEdit && (\n                                    <button\n                                        className=\"btn btn-primary btn-sm image-popup-button edit-button\"\n                                        onClick={() => onEdit && onEdit(image)}\n                                        style={{ marginRight: \"5px\" }}\n                                    >\n                                        <i className=\"fas fa-edit\"></i>\n                                        &nbsp;EDIT\n                                    </button>\n                                )}\n                                {onSave && (\n                                    <button\n                                        className=\"btn btn-primary btn-sm image-popup-button\"\n                                        onClick={() => onSave && onSave(image)}\n                                        style={{ marginRight: \"5px\" }}\n                                    >\n                                        <i className=\"fas fa-save\"></i>\n                                        &nbsp;SAVE\n                                    </button>\n                                )}\n                                {image.nsfw && censorNSFW && (\n                                    <button\n                                        className=\"btn btn-primary btn-sm image-popup-button\"\n                                        onClick={() => setShowNSFW(!showNSFW)}\n                                        style={{ marginRight: \"5px\" }}\n                                    >\n                                        <i className=\"fas fa-eye\"></i>\n                                        &nbsp;{showNSFW ? \"HIDE\" : \"SHOW\"}\n                                    </button>\n                                )}\n                            </div>\n                        </div>\n                        <div\n                            className=\"image-popup-controls\"\n                            style={{ marginTop: \"28px\", marginBottom: \"85px\" }}\n                        >\n                            {/* Horde interface doesn't support score yet */}\n                            {/* <div>\n                                Similarity to prompt: {(score * 200).toFixed(2)}\n                                %\n                            </div> */}\n                            <div>\n                                Image dimensions: {image.params.width} x{\" \"}\n                                {image.params.height}\n                            </div>\n                            <div>Model: {image.model}</div>\n                            {image.nsfw && (\n                                <>\n                                    <div>\n                                        {/* alert warning icon */}\n                                        <i\n                                            className=\"fas fa-exclamation-triangle\"\n                                            style={{\n                                                color: \"orange\",\n                                                fontSize: \"18px\",\n                                                position: \"relative\",\n                                                top: \"2px\",\n                                            }}\n                                        ></i>\n                                        &nbsp;May contain NSFW content\n                                    </div>\n                                    {onNSFW && (\n                                        <a\n                                            href=\"javascript:void(0)\"\n                                            onClick={() => onNSFW(image, false)}\n                                        >\n                                            Mark as Safe for Work\n                                        </a>\n                                    )}\n                                </>\n                            )}\n                            {image.params.seed && (\n                                <div>Seed: {image.params.seed}</div>\n                            )}\n                            {!image.nsfw && (\n                                <>\n                                    <div>\n                                        {/* green check icon */}\n                                        <i\n                                            className=\"fas fa-check\"\n                                            style={{\n                                                color: \"green\",\n                                                fontSize: \"18px\",\n                                                position: \"relative\",\n                                                top: \"2px\",\n                                            }}\n                                        ></i>\n                                        &nbsp;Safe for Work\n                                    </div>\n                                    {onNSFW && (\n                                        <a\n                                            href=\"javascript:void(0)\"\n                                            onClick={() => onNSFW(image, true)}\n                                        >\n                                            Mark as Not Safe for Work\n                                        </a>\n                                    )}\n                                </>\n                            )}\n                            <div style={{ marginTop: \"8px\" }}>\n                                Prompt: {image.params.prompt}\n                                <CopyToClipboardIcon\n                                    text={image.params.prompt!}\n                                />\n                            </div>\n                            <div style={{ marginTop: \"8px\" }}>\n                                Negative Prompt: {image.params.negative_prompt}\n                                <CopyToClipboardIcon\n                                    text={image.params.negative_prompt!}\n                                />\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </Modal.Body>\n        </Modal>\n    );\n};\n","import React, { FC, useState, useEffect, useRef } from \"react\";\nimport axios from \"axios\";\nimport { Prompt } from \"react-router\";\nimport { loadImageAsync } from \"../../lib/loadImage\";\n\nimport { sleep } from \"../../lib/sleep\";\nimport { defaultArgs } from \"../../components/ImagePrompt\";\nimport { Tool, BaseTool } from \"./tool\";\nimport { Renderer } from \"./renderer\";\nimport { Cursor, Rect } from \"./models\";\nimport {\n    AIBrushApi,\n    CreateImageInput,\n    Image as APIImage,\n    ImageList,\n    StatusEnum,\n} from \"../../client\";\nimport { ZoomHelper } from \"./zoomHelper\";\nimport { getClosestAspectRatio } from \"../../lib/aspecRatios\";\nimport { convertPNGToJPG, ImageUtilWorker, ImageWorkerRequest, loadImageDataElement } from \"../../lib/imageutil\";\nimport { SelectionTool, Controls as SelectionControls } from \"./selection-tool\";\nimport { getUpscaleLevel } from \"../../lib/upscale\";\nimport { ApiSocket, NOTIFICATION_IMAGE_UPDATED } from \"../../lib/apisocket\";\nimport moment from \"moment\";\nimport { supportedModels } from \"../../lib/supportedModels\";\nimport { ProgressBar } from \"../../components/ProgressBar\";\nimport { calculateImagesCost } from \"../../lib/credits\";\nimport { CostIndicator } from \"../../components/CostIndicator\";\nimport ModelSelector from \"../../components/ModelSelector\";\nimport { PencilTool } from \"./pencil-tool\";\nimport { MaskEditor } from \"./mask-editor-controls\";\nimport { ResetToDefaultIcon } from \"../../components/ResetToDefaultIcon\";\n\nconst anonymousClient = axios.create();\n\ntype EnhanceToolState =\n    | \"select\"\n    | \"default\"\n    | \"uploading\"\n    | \"processing\"\n    | \"confirm\"\n    | \"erase\"\n    | \"mask\";\n\n// eraser width modifier adds a solid core with a feather edge\n// equal to the what is used on enhanced selections\nconst eraserWidthModifier = 1.3;\n\ninterface ImageWithData extends APIImage {\n    data?: ImageData;\n}\n\nexport class EnhanceTool extends BaseTool implements Tool {\n    readonly selectionTool: SelectionTool;\n    readonly pencilTool: PencilTool;\n\n    private prompt: string = \"\";\n    private negativePrompt: string = \"\";\n    private model: string = \"Epic Diffusion\";\n    private count: number = 4;\n    private variationStrength: number = 0.35;\n    private _dirty = false;\n    private worker: ImageUtilWorker;\n    private idCounter = 0;\n\n    private _state: EnhanceToolState = \"default\";\n    private stateHandler: (state: EnhanceToolState) => void = () => {};\n    private selectionControlsListener: (show: boolean) => void = () => {};\n    private maskHandler: (isMasked: boolean) => void = () => {};\n\n    private imageData: Array<ImageData> = [];\n    private selectedImageDataIndex: number = -1;\n    private selectedImageData: ImageData | null = null;\n    private panning = false;\n    private erasing = false;\n    private progressListener?: (progress: number) => void;\n    private errorListener?: (error: string | null) => void;\n    private dirtyListener?: (dirty: boolean) => void;\n\n    set dirty(dirty: boolean) {\n        this._dirty = dirty;\n        if (this.dirtyListener) {\n            this.dirtyListener(dirty);\n        }\n    }\n\n    get dirty() {\n        return this._dirty;\n    }\n\n    onDirty(listener: (dirty: boolean) => void): void {\n        this.dirtyListener = listener;\n    }\n\n    onError(handler: (error: string | null) => void) {\n        this.errorListener = handler;\n    }\n\n    private notifyError(error: string | null) {\n        if (this.errorListener) {\n            this.errorListener(error);\n        }\n    }\n\n    get state(): EnhanceToolState {\n        return this._state;\n    }\n\n    set state(state: EnhanceToolState) {\n        if (state !== this._state) {\n            this.renderer.setCursor(undefined);\n            if (this._state == \"select\") {\n                this.selectionTool.destroy();\n            }\n            // if (this._state === \"mask\") {\n            //     this.renderer.setCursor(undefined);\n            // }\n            // if (this._state === \"erase\") {\n            //     this.renderer.setCursor(undefined);\n            // }\n            this._state = state;\n            this.stateHandler(state);\n            if (state == \"confirm\") {\n                this.selectionControlsListener(true);\n            } else {\n                this.selectionControlsListener(false);\n                if (state == \"select\") {\n                    this.selectionTool.updateArgs({\n                        ...this.selectionTool.getArgs(),\n                        outpaint: false,\n                    });\n                }\n            }\n        }\n    }\n\n    selectSupported(): boolean {\n        return !(\n            getUpscaleLevel(\n                this.renderer.getWidth(),\n                this.renderer.getHeight()\n            ) === 0 && this.renderer.getWidth()\n        );\n    }\n\n    constructor(renderer: Renderer) {\n        super(renderer, \"enhance\");\n        this.selectionTool = new SelectionTool(renderer);\n        this.pencilTool = new PencilTool(\n            renderer,\n            \"mask\",\n            \"#FFFFFF\",\n            \"mask-editor\"\n        );\n        if (this.selectSupported()) {\n            this.state = \"select\";\n        } else {\n            this.state = \"default\";\n        }\n        let selectionArgs = this.selectionTool.getArgs();\n        if (!this.selectSupported()) {\n            selectionArgs = {\n                ...selectionArgs,\n                selectionOverlay: {\n                    x: 0,\n                    y: 0,\n                    width: this.renderer.getWidth(),\n                    height: this.renderer.getHeight(),\n                },\n            };\n        }\n        this.selectionTool.updateArgs(selectionArgs);\n        this.pencilTool.updateArgs({\n            ...this.pencilTool.getArgs(),\n            brushColor: \"#FFFFFF\",\n        });\n        // unset the cursor from the pencil tool (hack)\n        this.renderer.setCursor(undefined);\n        this.worker = new ImageUtilWorker();\n    }\n\n    onMouseDown(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        if (this.state == \"select\") {\n            this.selectionTool.onMouseDown(event);\n            return;\n        }\n        if (this.state == \"mask\") {\n            this.pencilTool.onMouseDown(event);\n            return;\n        }\n        let { x, y } = this.zoomHelper.translateMouseToCanvasCoordinates(\n            event.nativeEvent.offsetX,\n            event.nativeEvent.offsetY\n        );\n        if (event.button === 1) {\n            this.panning = true;\n            return;\n        }\n        if (this.state == \"erase\" && this.selectedImageData) {\n            this.erasing = true;\n            // clone selected ImageData\n            this.selectedImageData = new ImageData(\n                this.selectedImageData.data.slice(),\n                this.selectedImageData.width,\n                this.selectedImageData.height\n            );\n\n            this.erasePoint(x, y);\n        }\n    }\n\n    // TODO: on erase cancel and on erase confirm\n    // either restore the image data from the array\n    // or overwrite the array with the new image data\n\n    private erasePoint(x: number, y: number) {\n        const selectionOverlay = this.renderer.getSelectionOverlay()!;\n        const baseWidth = Math.min(\n            selectionOverlay.width,\n            selectionOverlay.height\n        );\n        const eraserRadius = Math.floor((baseWidth / 8) * eraserWidthModifier);\n\n        const relX = x - selectionOverlay.x;\n        const relY = y - selectionOverlay.y;\n        const imageData = this.selectedImageData!;\n\n        const startX = Math.max(0, relX - eraserRadius);\n        const startY = Math.max(0, relY - eraserRadius);\n        const endX = Math.min(imageData.width, relX + eraserRadius);\n        const endY = Math.min(imageData.height, relY + eraserRadius);\n\n        // relX=64.28541697636388, relY=64.24464312259761, startX=0.28541697636387653, startY=0.24464312259760845, endX=128.28541697636388, endY=128.2446431225976\n\n        for (let i = startX; i < endX; i++) {\n            for (let j = startY; j < endY; j++) {\n                const index = (j * imageData.width + i) * 4;\n                const distance = Math.sqrt(\n                    Math.pow(i - relX, 2) + Math.pow(j - relY, 2)\n                );\n                if (distance < eraserRadius) {\n                    // set alpha to a linear gradient from the center,\n                    // 100% in the middle and 0% at the edge\n                    const alphaPct =\n                        (distance / eraserRadius) * eraserWidthModifier -\n                        (eraserWidthModifier - 1);\n\n                    const alpha = Math.min(\n                        Math.floor(alphaPct * 255),\n                        imageData.data[index + 3]\n                    );\n                    imageData.data[index + 3] = alpha;\n                }\n            }\n        }\n        this.renderer.setEditImage(imageData);\n    }\n\n    private updateCursor(x: number, y: number) {\n        if (this.state == \"erase\" && this.selectedImageData) {\n            const selectionOverlay = this.renderer.getSelectionOverlay()!;\n            const baseWidth = Math.min(\n                selectionOverlay.width,\n                selectionOverlay.height\n            );\n            const featherWidth = Math.floor(baseWidth / 8);\n            this.renderer.setCursor({\n                color: \"white\",\n                radius: featherWidth * eraserWidthModifier,\n                type: \"circle\",\n                x,\n                y,\n            });\n        } else {\n            this.renderer.setCursor({\n                color: \"white\",\n                radius: 10,\n                type: \"crosshairs\",\n                x,\n                y,\n            });\n        }\n    }\n\n    onMouseMove(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        if (this.state == \"select\") {\n            this.selectionTool.onMouseMove(event);\n            return;\n        }\n        if (this.state == \"mask\") {\n            this.pencilTool.onMouseMove(event);\n            return;\n        }\n        let { x, y } = this.zoomHelper.translateMouseToCanvasCoordinates(\n            event.nativeEvent.offsetX,\n            event.nativeEvent.offsetY\n        );\n        if (this.panning) {\n            this.zoomHelper.onPan(event);\n        }\n\n        this.updateCursor(x, y);\n        if (this.erasing) {\n            this.erasePoint(x, y);\n        }\n    }\n\n    onMouseUp(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        if (this.state == \"select\") {\n            this.selectionTool.onMouseUp(event);\n        }\n        if (this.state == \"mask\") {\n            this.pencilTool.onMouseUp(event);\n        }\n        this.panning = false;\n        this.erasing = false;\n    }\n\n    onMouseLeave(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>): void {\n        if (this.state == \"select\") {\n            this.selectionTool.onMouseLeave(event);\n        }\n        if (this.state == \"mask\") {\n            this.pencilTool.onMouseLeave(event);\n        }\n        this.panning = false;\n        this.erasing = false;\n    }\n\n    onWheel(event: WheelEvent) {\n        this.zoomHelper.onWheel(event);\n        let { x, y } = this.zoomHelper.translateMouseToCanvasCoordinates(\n            event.offsetX,\n            event.offsetY\n        );\n        this.updateCursor(x, y);\n    }\n\n    updateArgs(args: any) {\n        args = {\n            ...this.getArgs(),\n            ...args,\n        };\n        this.prompt = args.prompt || \"\";\n        this.negativePrompt = args.negativePrompt || \"\";\n        this.model = args.model || \"Epic Diffusion\";\n        this.count = args.count || 4;\n        this.variationStrength = args.variationStrength || 0.75;\n        console.log(\"updateArgs\", args);\n    }\n\n    onChangeState(handler: (state: EnhanceToolState) => void) {\n        this.stateHandler = handler;\n    }\n\n    onChangeMask(handler: (isMasked: boolean) => void) {\n        this.maskHandler = handler;\n    }\n\n    onShowSelectionControls(listener: (show: boolean) => void): void {\n        this.selectionControlsListener = listener;\n    }\n\n    onProgress(listener: (progress: number) => void): void {\n        this.progressListener = listener;\n    }\n\n    private newId(): string {\n        return `${this.idCounter++}`;\n    }\n\n    private async loadImageData(\n        api: AIBrushApi,\n        imageId: string,\n        maskData: ImageData | undefined,\n        selectionOverlay: Rect\n    ): Promise<ImageData> {\n        const imageElement = await loadImageDataElement(api, imageId);\n        const canvas = document.createElement(\"canvas\");\n        canvas.width = selectionOverlay.width;\n        canvas.height = selectionOverlay.height;\n        const ctx = canvas.getContext(\"2d\");\n        if (!ctx) {\n            throw new Error(\"Failed to get canvas context\");\n        }\n        ctx.drawImage(\n            imageElement,\n            0,\n            0,\n            selectionOverlay.width,\n            selectionOverlay.height\n        );\n        const imageData = ctx.getImageData(\n            0,\n            0,\n            selectionOverlay.width,\n            selectionOverlay.height\n        );\n        const id = this.newId();\n        const req: ImageWorkerRequest = {\n            id,\n            alphaMode: \"none\",\n            feather: true,\n            height: this.renderer.getHeight(),\n            width: this.renderer.getWidth(),\n            pixels: imageData.data,\n            selectionOverlay,\n        }\n        if (maskData) {\n            req.alphaMode = \"mask\";\n            req.alphaPixels = maskData.data;\n        }\n        const resp = await this.worker.processRequest(req);\n        const updatedImageData = new ImageData(\n            resp.pixels,\n            imageData.width,\n            imageData.height\n        );\n        // remove canvas\n        canvas.remove();\n        return updatedImageData;\n    }\n\n    cancel() {\n        if (this.state == \"erase\") {\n            this.state = \"confirm\";\n            this.selectedImageData =\n                this.imageData[this.selectedImageDataIndex];\n            this.renderer.setEditImage(this.selectedImageData);\n        } else {\n            if (this.selectSupported()) {\n                this.state = \"select\";\n            } else {\n                this.state = \"default\";\n            }\n            this.imageData = [];\n            this.renderer.setEditImage(null);\n            this.dirty = false;\n        }\n    }\n\n    erase() {\n        this.state = \"erase\";\n    }\n\n    mask() {\n        if (this.renderer.isMasked()) {\n            this.renderer.deleteMask();\n        }\n        this.renderer.createMask();\n        this.state = \"mask\";\n        this.maskHandler(true);\n    }\n\n    deleteMask() {\n        this.renderer.deleteMask();\n        if (this.state == \"mask\") {\n            this.state = \"default\";\n        }\n        this.maskHandler(false);\n    }\n\n    private updateProgress(progress: number) {\n        if (this.progressListener) {\n            this.progressListener(progress);\n        }\n    }\n\n    async submit(api: AIBrushApi, apisocket: ApiSocket, image: APIImage) {\n        this.dirty = true;\n        this.notifyError(null);\n        const selectionOverlay = this.renderer.getSelectionOverlay();\n        let encodedImage = this.renderer.getEncodedImage(selectionOverlay!);\n        if (!encodedImage) {\n            console.error(\"No selection\");\n            return;\n        }\n        encodedImage = await convertPNGToJPG(encodedImage);\n        let encodedMask: string | undefined;\n        let maskData: ImageData | undefined;\n        if (this.renderer.isMasked()) {\n            encodedMask = this.renderer.getEncodedMask(selectionOverlay!, \"mask\");\n            maskData = this.renderer.getImageData(selectionOverlay!, \"mask\");\n        }\n\n        const input: CreateImageInput = defaultArgs();\n\n        const tmpInitImage = await api.createTemporaryImage(\"jpg\");\n        // convert base64 to binary\n        const binaryImageData = Buffer.from(encodedImage, \"base64\");\n        this.state = \"uploading\";\n        this.updateProgress(0);\n        await anonymousClient.put(\n            tmpInitImage.data.upload_url,\n            binaryImageData,\n            {\n                headers: {\n                    \"Content-Type\": \"image/jpeg\",\n                },\n                onUploadProgress: (progressEvent: any) => {\n                    let percentCompleted =\n                        progressEvent.loaded / progressEvent.total;\n                    if (encodedMask) {\n                        percentCompleted /= 2;\n                    }\n                    this.updateProgress(percentCompleted);\n                },\n            }\n        );\n        input.tmp_jpg_id = tmpInitImage.data.id;\n\n        if (encodedMask) {\n            const tmpMaskImage = await api.createTemporaryImage(\"png\");\n            const binaryMaskData = Buffer.from(encodedMask, \"base64\");\n            await anonymousClient.put(tmpMaskImage.data.upload_url, binaryMaskData, {\n                headers: {\n                    \"Content-Type\": \"image/png\",\n                },\n                onUploadProgress: (progressEvent: any) => {\n                    let percentCompleted = 0.5 + progressEvent.loaded / progressEvent.total / 2;\n                    this.updateProgress(percentCompleted);\n                },\n            });\n            input.tmp_mask_id = tmpMaskImage.data.id;\n        }\n\n        input.label = \"\";\n        input.parent = image.id;\n        input.params.prompt = this.prompt || image.params.prompt;\n        input.params.negative_prompt =\n            this.negativePrompt || image.params.negative_prompt;\n        input.params.denoising_strength = this.variationStrength;\n        input.count = this.count;\n        input.model = this.model;\n        input.nsfw = image.nsfw;\n\n        input.params.width = selectionOverlay!.width;\n        input.params.height = selectionOverlay!.height;\n        // round width and height up to the nearest multiple of 64\n        input.params.width = Math.ceil(input.params.width / 64) * 64;\n        input.params.height = Math.ceil(input.params.height / 64) * 64;\n        input.temporary = true;\n\n        let resp: ImageList | null = null;\n\n        try {\n            resp = (await api.createImage(input)).data;\n        } catch (err) {\n            console.error(\"Error creating images\", err);\n            this.notifyError(\"Failed to create image\");\n            this.state = \"default\";\n            return;\n        }\n        this.state = \"processing\";\n        let newImages: Array<ImageWithData> | undefined = resp.images;\n        if (!newImages || newImages.length === 0) {\n            this.state = \"default\";\n            throw new Error(\"No images returned\");\n        }\n        let completed = false;\n\n        let lastUpdate = moment();\n\n        const onMessage = async (msg: string) => {\n            const img = JSON.parse(msg) as any;\n            if (\n                img.type === NOTIFICATION_IMAGE_UPDATED &&\n                img.status === StatusEnum.Completed\n            ) {\n                lastUpdate = moment();\n                for (let i = 0; i < newImages!.length; i++) {\n                    if (newImages![i].id === img.id) {\n                        const imageData = await this.loadImageData(\n                            api,\n                            newImages![i].id,\n                            maskData,\n                            selectionOverlay!\n                        );\n                        newImages![i].data = imageData;\n                        newImages![i].status = StatusEnum.Completed;\n                    }\n                }\n            } else if (img.status == StatusEnum.Error) {\n                for (let i = 0; i < newImages!.length; i++) {\n                    if (newImages![i].id === img.id) {\n                        newImages![i].status = StatusEnum.Error;\n                    }\n                }\n            }\n        };\n        apisocket.addMessageListener(onMessage);\n        try {\n            let startTime = moment();\n            let lastCheck = moment();\n\n            while (!completed) {\n                let completeCount = 0;\n                await sleep(1000);\n                // poll for completion\n                for (let i = 0; i < newImages!.length; i++) {\n                    if (\n                        newImages![i].status === StatusEnum.Completed ||\n                        newImages![i].status === StatusEnum.Error\n                    ) {\n                        completeCount++;\n                        continue;\n                    }\n                }\n                this.updateProgress(completeCount / newImages!.length);\n                if (completeCount === newImages!.length) {\n                    completed = true;\n                }\n\n                // fallback if sockets don't catch one\n                if (moment().diff(lastCheck, \"seconds\") > 10) {\n                    // get list of ids that aren't completed and batch get them.\n                    const pendingIds = newImages\n                        .filter(\n                            (img) =>\n                                img.status === StatusEnum.Pending ||\n                                img.status === StatusEnum.Processing\n                        )\n                        .map((img) => img.id);\n                    console.log(\"Checking pending images\", pendingIds);\n                    const updatedImagesResult = await api.batchGetImages(\n                        undefined,\n                        {\n                            ids: pendingIds,\n                        }\n                    );\n                    const updatedImages = updatedImagesResult.data.images;\n                    const byId = updatedImages!.reduce((acc, img) => {\n                        acc[img.id] = img;\n                        return acc;\n                    }, {} as Record<string, APIImage>);\n                    for (let i = 0; i < newImages!.length; i++) {\n                        if (\n                            newImages![i].status === StatusEnum.Pending ||\n                            newImages![i].status === StatusEnum.Processing\n                        ) {\n                            const updated = byId[newImages![i].id];\n                            if (updated) {\n                                newImages![i].status = updated.status;\n                                if (updated.status === StatusEnum.Completed) {\n                                    lastUpdate = moment();\n                                    const imageData = await this.loadImageData(\n                                        api,\n                                        newImages![i].id,\n                                        maskData,\n                                        selectionOverlay!\n                                    );\n                                    newImages![i].data = imageData;\n                                }\n                            }\n                        }\n                    }\n                    lastCheck = moment();\n                }\n                // timeout of 2 minutes\n                if (\n                    (lastUpdate.isAfter(startTime) &&\n                        moment().diff(lastUpdate, \"seconds\") > 30) ||\n                    moment().diff(startTime, \"minutes\") > 2\n                ) {\n                    completed = true;\n                }\n            }\n        } finally {\n            apisocket.removeMessageListener(onMessage);\n        }\n\n        // sort images by score descending\n        newImages!.sort((a, b) => {\n            return b.score - a.score;\n        });\n        newImages = newImages!.filter((img) => {\n            return img.status === StatusEnum.Completed;\n        });\n\n        this.imageData = [];\n        for (let i = 0; i < newImages!.length; i++) {\n            if (newImages![i].data) {\n                this.imageData.push(newImages![i].data as ImageData);\n            }\n        }\n        if (this.imageData.length === 0) {\n            this.state = \"default\";\n            this.notifyError(\"No images returned\");\n            return;\n        }\n        this.renderer.setEditImage(this.imageData[0]);\n        this.selectedImageDataIndex = 0;\n        this.selectedImageData = this.imageData[0];\n        this.state = \"confirm\";\n        this.deleteMask();\n    }\n\n    select(direction: \"left\" | \"right\") {\n        if (direction == \"left\") {\n            this.selectedImageDataIndex--;\n            if (this.selectedImageDataIndex < -1) {\n                this.selectedImageDataIndex = this.imageData.length - 1;\n            }\n        }\n        if (direction == \"right\") {\n            this.selectedImageDataIndex++;\n            if (this.selectedImageDataIndex >= this.imageData.length) {\n                this.selectedImageDataIndex = -1;\n            }\n        }\n        if (this.selectedImageDataIndex === -1) {\n            this.selectedImageData = null;\n        } else {\n            this.selectedImageData =\n                this.imageData[this.selectedImageDataIndex];\n        }\n        this.renderer.setEditImage(this.selectedImageData);\n    }\n\n    onSaveImage(listener: (encodedImage: string, args?: any) => void): void {\n        this.saveListener = listener;\n    }\n\n    confirm() {\n        this.renderer.commitSelection();\n        if (this.selectSupported()) {\n            this.state = \"select\";\n        } else {\n            this.state = \"default\";\n        }\n        this.imageData = [];\n        const encodedImage = this.renderer.getEncodedImage(null);\n        if (encodedImage && this.saveListener) {\n            this.saveListener(encodedImage, {\n                phrases: [this.prompt],\n                negative_phrases: [this.negativePrompt],\n                model: this.model,\n            });\n        }\n        this.dirty = false;\n    }\n\n    destroy(): boolean {\n        if (this.renderer.isMasked()) {\n            this.renderer.deleteMask();\n        }\n        this.renderer.setCursor(undefined);\n        this.worker.destroy();\n        return true;\n    }\n}\n\ninterface ControlsProps {\n    api: AIBrushApi;\n    apisocket: ApiSocket;\n    image: APIImage;\n    renderer: Renderer;\n    tool: EnhanceTool;\n}\n\nexport const EnhanceControls: FC<ControlsProps> = ({\n    api,\n    apisocket,\n    image,\n    renderer,\n    tool,\n}) => {\n    const [count, setCount] = useState(4);\n    const [dirty, setDirty] = useState(false);\n    const [variationStrength, setVariationStrength] = useState(0.35);\n    const [prompt, setPrompt] = useState(image.params.prompt || \"\");\n    const [negativePrompt, setNegativePrompt] = useState(\n        image.params.negative_prompt || \"\"\n    );\n    const [model, setModel] = useState(\n        image.model == \"swinir\" || image.model == \"stable_diffusion\"\n            ? \"Epic Diffusion\"\n            : image.model\n    );\n    const [selectingModel, setSelectingModel] = useState<boolean>(false);\n    const [state, setState] = useState<EnhanceToolState>(tool.state);\n    const [isMasked, setIsMasked] = useState<boolean>(tool.renderer.isMasked());\n    const [progress, setProgress] = useState(0);\n    const [error, setError] = useState<string | null>(null);\n\n    tool.onChangeState(setState);\n    tool.onChangeMask(setIsMasked);\n    tool.onProgress(setProgress);\n    tool.onError(setError);\n    tool.onDirty(setDirty);\n\n    const selectionOverlay: Rect =\n        tool.selectionTool.getArgs().selectionOverlay;\n    let cost = count;\n    if (selectionOverlay) {\n        cost = calculateImagesCost(\n            count,\n            selectionOverlay.width,\n            selectionOverlay.height\n        );\n    }\n\n    if (state == \"processing\" || state == \"uploading\") {\n        return (\n            <div style={{ marginTop: \"16px\" }}>\n                <i className=\"fa fa-spinner fa-spin\"></i>&nbsp;{\" \"}\n                {state === \"processing\" ? \"Enhancing...\" : \"Uploading...\"}\n                <br />\n                <ProgressBar progress={progress} />\n            </div>\n        );\n    }\n\n    return (\n        <div\n            style={{\n                marginTop: \"16px\",\n                marginBottom: \"8px\",\n                marginLeft: \"16px\",\n            }}\n        >\n            {error && (\n                <div className=\"alert alert-danger\" role=\"alert\">\n                    {/* dismiss button */}\n                    <button\n                        type=\"button\"\n                        className=\"close\"\n                        data-dismiss=\"alert\"\n                        aria-label=\"Close\"\n                        onClick={() => setError(null)}\n                    >\n                        <span aria-hidden=\"true\">&times;</span>\n                    </button>\n                    {error}\n                </div>\n            )}\n            {state === \"select\" && (\n                <>\n                    <p>\n                        {/* info icon */}\n                        <i className=\"fa fa-info-circle\"></i>&nbsp; Move the\n                        selection rectangle to the area that you want to enhance\n                    </p>\n                    <SelectionControls\n                        renderer={renderer}\n                        tool={tool.selectionTool}\n                        lockAspectRatio={true}\n                    />\n                </>\n            )}\n            {state === \"default\" && (\n                <>\n                    <p>\n                        {/* info icon */}\n                        <i className=\"fa fa-info-circle\"></i>&nbsp; Confirm the\n                        parameters below and continue\n                    </p>\n                    {/* prompt */}\n                    <div className=\"form-group\">\n                        <label htmlFor=\"prompt\">\n                            Prompt&nbsp;\n                            <ResetToDefaultIcon onClick={() => setPrompt(image.params.prompt || \"\")} />\n                        </label>\n                        {/* refresh icon */}\n                        \n                        <input\n                            type=\"text\"\n                            className=\"form-control\"\n                            id=\"prompt\"\n                            value={prompt}\n                            onChange={(e) => {\n                                setPrompt(e.target.value);\n                            }}\n                        />\n                        \n                        <small className=\"form-text text-muted\">\n                            Customize the text prompt here\n                        </small>\n                    </div>\n                    {/* negative prompt */}\n                    <div className=\"form-group\">\n                        <label htmlFor=\"negative-prompt\">\n                            Negative Prompt&nbsp;\n                            <ResetToDefaultIcon onClick={() => setNegativePrompt(image.params.negative_prompt || \"\")} />\n                        </label>\n                        <input\n                            type=\"text\"\n                            className=\"form-control\"\n                            id=\"negative-prompt\"\n                            value={negativePrompt}\n                            onChange={(e) => {\n                                setNegativePrompt(e.target.value);\n                            }}\n                        />\n                        <small className=\"form-text text-muted\">\n                            Customize the negative text prompt here\n                        </small>\n                    </div>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"count\">Count: {count}</label>\n                        <input\n                            type=\"range\"\n                            className=\"form-control-range\"\n                            id=\"count\"\n                            min=\"1\"\n                            max=\"10\"\n                            step=\"1\"\n                            value={count}\n                            onChange={(e) => {\n                                setCount(parseInt(e.target.value));\n                            }}\n                        />\n                        <small className=\"form-text text-muted\">\n                            Number of enhancement options\n                        </small>\n                    </div>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"variation-strength\">\n                            Variation Strength:{\" \"}\n                            {Math.round(variationStrength * 100)}%\n                        </label>\n                        <input\n                            type=\"range\"\n                            className=\"form-control-range\"\n                            id=\"variation-strength\"\n                            min=\"0\"\n                            max=\"1\"\n                            step=\"0.05\"\n                            value={variationStrength}\n                            onChange={(e) => {\n                                setVariationStrength(\n                                    parseFloat(e.target.value)\n                                );\n                            }}\n                        />\n                        <small className=\"form-text text-muted\">\n                            How much variation to use\n                        </small>\n                    </div>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"model\">Model</label>\n                        {/* <select\n                            className=\"form-control\"\n                            id=\"model\"\n                            value={model}\n                            onChange={(e) => setModel(e.target.value)}\n                        >\n                            {supportedModels.map((model) => (\n                                <option value={model} key={`model-${model}`}>\n                                    {model}\n                                </option>\n                            ))}\n                        </select> */}\n                        <div>\n                            <button\n                                type=\"button\"\n                                className=\"btn btn-secondary light-button\"\n                                onClick={() => setSelectingModel(true)}\n                            >\n                                {model}&nbsp;\n                                <i className=\"fas fa-caret-down\"></i>\n                            </button>\n                        </div>\n                        <small className=\"form-text text-muted\">\n                            Select the model to use\n                        </small>\n                    </div>\n                    <div className=\"form-group\">\n                        <CostIndicator imagesCost={cost} />\n                    </div>\n                </>\n            )}\n            {state === \"erase\" && (\n                <p>\n                    {/* info icon */}\n                    <i className=\"fa fa-info-circle\"></i>&nbsp; Erase any\n                    undesired sections before saving\n                </p>\n            )}\n            {state === \"mask\" && (\n                <MaskEditor\n                    onConfirm={() => (tool.state = \"default\")}\n                    onRevert={() => {\n                        tool.deleteMask();\n                    }}\n                    tool={tool.pencilTool}\n                />\n            )}\n\n            <div className=\"form-group\">\n                {state === \"select\" && (\n                    <button\n                        type=\"button\"\n                        className=\"btn btn-primary btn-sm\"\n                        onClick={() => {\n                            tool.state = \"default\";\n                        }}\n                        style={{ marginRight: \"8px\" }}\n                    >\n                        {/* magic icon */}\n                        <i className=\"fa fa-magic\"></i>&nbsp; Continue\n                    </button>\n                )}\n                {((state === \"default\" && tool.selectSupported()) ||\n                    state === \"confirm\" ||\n                    state === \"erase\") && (\n                    <button\n                        className=\"btn btn-primary btn-sm\"\n                        onClick={() => {\n                            tool.cancel();\n                        }}\n                        style={{ marginRight: \"8px\" }}\n                    >\n                        {/* cancel icon */}\n                        <i className=\"fa fa-times\"></i>&nbsp; Revert\n                    </button>\n                )}\n                {(state === \"confirm\" || state === \"erase\") && (\n                    <button\n                        className=\"btn btn-primary btn-sm\"\n                        onClick={() => tool.confirm()}\n                        style={{ marginRight: \"8px\" }}\n                    >\n                        <i className=\"fa fa-save\"></i>&nbsp; Save\n                    </button>\n                )}\n                {state === \"confirm\" && (\n                    <>\n                        <button\n                            className=\"btn btn-primary btn-sm\"\n                            onClick={() => tool.erase()}\n                            style={{ marginRight: \"8px\" }}\n                        >\n                            <i className=\"fa fa-eraser\"></i>&nbsp; Erase\n                        </button>\n                    </>\n                )}\n                {state === \"default\" && (\n                    <>\n                        <button\n                            className=\"btn btn-primary btn-sm\"\n                            onClick={() => {\n                                tool.updateArgs({\n                                    count,\n                                    variationStrength,\n                                    prompt,\n                                    negativePrompt,\n                                    model,\n                                });\n                                tool.submit(api, apisocket, image);\n                            }}\n                            style={{ marginRight: \"8px\" }}\n                        >\n                            <i className=\"fa fa-magic\"></i>&nbsp; Enhance\n                        </button>\n                        <button\n                            className=\"btn btn-primary btn-sm\"\n                            onClick={() => tool.mask()}\n                            style={{ marginRight: \"8px\" }}\n                        >\n                            <i className=\"fa fa-cut\"></i>&nbsp; Mask\n                        </button>\n                        {isMasked && (\n                            <button\n                                className=\"btn btn-danger btn-sm\"\n                                onClick={() => tool.deleteMask()}\n                                style={{ marginRight: \"8px\" }}\n                            >\n                                <i className=\"fa fa-cut\"></i>&nbsp; Unmask\n                            </button>\n                        )}\n                    </>\n                )}\n            </div>\n            <Prompt\n                when={dirty}\n                message=\"Are you sure you want to leave? Your changes will be lost.\"\n            />\n            {selectingModel && (\n                <ModelSelector\n                    api={api}\n                    onCancel={() => setSelectingModel(false)}\n                    onSelectModel={(model) => {\n                        setModel(model);\n                        setSelectingModel(false);\n                    }}\n                    initialSelectedModel={model}\n                    inpainting={false}\n                />\n            )}\n        </div>\n    );\n};\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * AIBrush API\n * Orchestration backend for AI Brush\n *\n * The version of the OpenAPI document: 1.0.0\n * Contact: admin@aibrush.art\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport { Configuration } from './configuration';\nimport globalAxios, { AxiosPromise, AxiosInstance } from 'axios';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';\n\n/**\n * \n * @export\n * @interface AddMetricItem\n */\nexport interface AddMetricItem {\n    /**\n     * \n     * @type {string}\n     * @memberof AddMetricItem\n     */\n    name: string;\n    /**\n     * \n     * @type {number}\n     * @memberof AddMetricItem\n     */\n    value: number;\n    /**\n     * \n     * @type {string}\n     * @memberof AddMetricItem\n     */\n    type: AddMetricItemTypeEnum;\n    /**\n     * \n     * @type {Array<MetricAttribute>}\n     * @memberof AddMetricItem\n     */\n    attributes: Array<MetricAttribute>;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum AddMetricItemTypeEnum {\n    Gauge = 'gauge',\n    Count = 'count'\n}\n\n/**\n * \n * @export\n * @interface AddMetricsInput\n */\nexport interface AddMetricsInput {\n    /**\n     * \n     * @type {Array<AddMetricItem>}\n     * @memberof AddMetricsInput\n     */\n    metrics: Array<AddMetricItem>;\n}\n/**\n * \n * @export\n * @interface AssetsUrl\n */\nexport interface AssetsUrl {\n    /**\n     * \n     * @type {string}\n     * @memberof AssetsUrl\n     */\n    assets_url: string;\n}\n/**\n * \n * @export\n * @interface BatchGetImagesInput\n */\nexport interface BatchGetImagesInput {\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof BatchGetImagesInput\n     */\n    ids: Array<string>;\n}\n/**\n * \n * @export\n * @interface CreateDepositCodeInput\n */\nexport interface CreateDepositCodeInput {\n    /**\n     * \n     * @type {number}\n     * @memberof CreateDepositCodeInput\n     */\n    amount: number;\n}\n/**\n * \n * @export\n * @interface CreateImageInput\n */\nexport interface CreateImageInput {\n    /**\n     * \n     * @type {StatusEnum}\n     * @memberof CreateImageInput\n     */\n    status?: StatusEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateImageInput\n     */\n    label?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateImageInput\n     */\n    parent?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateImageInput\n     */\n    encoded_image?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateImageInput\n     */\n    encoded_mask?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateImageInput\n     */\n    tmp_image_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateImageInput\n     */\n    tmp_jpg_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateImageInput\n     */\n    tmp_mask_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateImageInput\n     */\n    tmp_thumbnail_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateImageInput\n     */\n    model: string;\n    /**\n     * \n     * @type {ImageParams}\n     * @memberof CreateImageInput\n     */\n    params: ImageParams;\n    /**\n     * \n     * @type {number}\n     * @memberof CreateImageInput\n     */\n    count: number;\n    /**\n     * \n     * @type {boolean}\n     * @memberof CreateImageInput\n     */\n    nsfw?: boolean;\n    /**\n     * \n     * @type {boolean}\n     * @memberof CreateImageInput\n     */\n    temporary?: boolean;\n}\n/**\n * \n * @export\n * @interface CreateStripeSessionInput\n */\nexport interface CreateStripeSessionInput {\n    /**\n     * \n     * @type {string}\n     * @memberof CreateStripeSessionInput\n     */\n    product_id: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateStripeSessionInput\n     */\n    success_url: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateStripeSessionInput\n     */\n    cancel_url: string;\n}\n/**\n * \n * @export\n * @interface Credits\n */\nexport interface Credits {\n    /**\n     * \n     * @type {number}\n     * @memberof Credits\n     */\n    free_credits: number;\n    /**\n     * \n     * @type {number}\n     * @memberof Credits\n     */\n    paid_credits: number;\n}\n/**\n * \n * @export\n * @interface DepositCode\n */\nexport interface DepositCode {\n    /**\n     * \n     * @type {string}\n     * @memberof DepositCode\n     */\n    code: string;\n    /**\n     * \n     * @type {number}\n     * @memberof DepositCode\n     */\n    amount: number;\n}\n/**\n * \n * @export\n * @interface DepositRequest\n */\nexport interface DepositRequest {\n    /**\n     * Amount in credits\n     * @type {number}\n     * @memberof DepositRequest\n     */\n    amount: number;\n}\n/**\n * \n * @export\n * @interface DiscordLogin\n */\nexport interface DiscordLogin {\n    /**\n     * \n     * @type {string}\n     * @memberof DiscordLogin\n     */\n    code: string;\n}\n/**\n * \n * @export\n * @interface FeatureList\n */\nexport interface FeatureList {\n    /**\n     * \n     * @type {string}\n     * @memberof FeatureList\n     */\n    terms_uri?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof FeatureList\n     */\n    privacy_uri?: string;\n}\n/**\n * \n * @export\n * @interface GlobalSettings\n */\nexport interface GlobalSettings {\n    /**\n     * \n     * @type {string}\n     * @memberof GlobalSettings\n     */\n    settings_key: string;\n    /**\n     * \n     * @type {object}\n     * @memberof GlobalSettings\n     */\n    settings_json: object;\n}\n/**\n * \n * @export\n * @interface Healthcheck\n */\nexport interface Healthcheck {\n    /**\n     * \n     * @type {string}\n     * @memberof Healthcheck\n     */\n    status?: HealthcheckStatusEnum;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum HealthcheckStatusEnum {\n    Ok = 'ok'\n}\n\n/**\n * \n * @export\n * @interface Image\n */\nexport interface Image {\n    /**\n     * \n     * @type {string}\n     * @memberof Image\n     */\n    id: string;\n    /**\n     * \n     * @type {number}\n     * @memberof Image\n     */\n    created_at: number;\n    /**\n     * \n     * @type {string}\n     * @memberof Image\n     */\n    created_by: string;\n    /**\n     * \n     * @type {number}\n     * @memberof Image\n     */\n    updated_at: number;\n    /**\n     * \n     * @type {ImageParams}\n     * @memberof Image\n     */\n    params: ImageParams;\n    /**\n     * \n     * @type {string}\n     * @memberof Image\n     */\n    label: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Image\n     */\n    parent: string;\n    /**\n     * \n     * @type {number}\n     * @memberof Image\n     */\n    score: number;\n    /**\n     * \n     * @type {number}\n     * @memberof Image\n     */\n    negative_score: number;\n    /**\n     * \n     * @type {StatusEnum}\n     * @memberof Image\n     */\n    status: StatusEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof Image\n     */\n    model: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof Image\n     */\n    nsfw: boolean;\n    /**\n     * \n     * @type {boolean}\n     * @memberof Image\n     */\n    temporary: boolean;\n    /**\n     * \n     * @type {number}\n     * @memberof Image\n     */\n    deleted_at?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof Image\n     */\n    error?: string;\n}\n/**\n * \n * @export\n * @interface ImageList\n */\nexport interface ImageList {\n    /**\n     * \n     * @type {Array<Image>}\n     * @memberof ImageList\n     */\n    images?: Array<Image>;\n}\n/**\n * \n * @export\n * @interface ImageParams\n */\nexport interface ImageParams {\n    /**\n     * \n     * @type {string}\n     * @memberof ImageParams\n     */\n    prompt?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof ImageParams\n     */\n    steps?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof ImageParams\n     */\n    negative_prompt?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof ImageParams\n     */\n    width?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof ImageParams\n     */\n    height?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof ImageParams\n     */\n    denoising_strength?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof ImageParams\n     */\n    cfg_scale?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof ImageParams\n     */\n    seed?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ImageParams\n     */\n    controlnet_type?: ImageParamsControlnetTypeEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof ImageParams\n     */\n    augmentation?: ImageParamsAugmentationEnum;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum ImageParamsControlnetTypeEnum {\n    Canny = 'canny',\n    Hed = 'hed',\n    Depth = 'depth',\n    Normal = 'normal',\n    Openpose = 'openpose',\n    Seg = 'seg',\n    Scribble = 'scribble',\n    Fakescribbles = 'fakescribbles',\n    Hough = 'hough'\n}\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum ImageParamsAugmentationEnum {\n    FaceRestore = 'face_restore',\n    RemoveBackground = 'remove_background',\n    Upscale = 'upscale'\n}\n\n/**\n * \n * @export\n * @interface ImageUrls\n */\nexport interface ImageUrls {\n    /**\n     * \n     * @type {string}\n     * @memberof ImageUrls\n     */\n    init_image_url?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ImageUrls\n     */\n    image_url?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ImageUrls\n     */\n    mask_url?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ImageUrls\n     */\n    thumbnail_url?: string;\n}\n/**\n * \n * @export\n * @interface InviteCode\n */\nexport interface InviteCode {\n    /**\n     * \n     * @type {string}\n     * @memberof InviteCode\n     */\n    id?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof InviteCode\n     */\n    created_at?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof InviteCode\n     */\n    created_by?: string;\n}\n/**\n * \n * @export\n * @interface IsAdminResponse\n */\nexport interface IsAdminResponse {\n    /**\n     * \n     * @type {boolean}\n     * @memberof IsAdminResponse\n     */\n    is_admin?: boolean;\n}\n/**\n * \n * @export\n * @interface LoginInput\n */\nexport interface LoginInput {\n    /**\n     * \n     * @type {string}\n     * @memberof LoginInput\n     */\n    email?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof LoginInput\n     */\n    invite_code?: string;\n}\n/**\n * \n * @export\n * @interface LoginResult\n */\nexport interface LoginResult {\n    /**\n     * \n     * @type {string}\n     * @memberof LoginResult\n     */\n    accessToken?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof LoginResult\n     */\n    refreshToken?: string;\n}\n/**\n * \n * @export\n * @interface MetricAttribute\n */\nexport interface MetricAttribute {\n    /**\n     * \n     * @type {string}\n     * @memberof MetricAttribute\n     */\n    name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof MetricAttribute\n     */\n    value?: string;\n}\n/**\n * \n * @export\n * @interface Order\n */\nexport interface Order {\n    /**\n     * \n     * @type {string}\n     * @memberof Order\n     */\n    id: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Order\n     */\n    created_by: string;\n    /**\n     * \n     * @type {number}\n     * @memberof Order\n     */\n    created_at: number;\n    /**\n     * \n     * @type {number}\n     * @memberof Order\n     */\n    ends_at: number;\n    /**\n     * \n     * @type {boolean}\n     * @memberof Order\n     */\n    is_active: boolean;\n    /**\n     * \n     * @type {number}\n     * @memberof Order\n     */\n    gpu_count: number;\n    /**\n     * \n     * @type {number}\n     * @memberof Order\n     */\n    amount_paid_cents: number;\n}\n/**\n * \n * @export\n * @interface RefreshLoginInput\n */\nexport interface RefreshLoginInput {\n    /**\n     * \n     * @type {string}\n     * @memberof RefreshLoginInput\n     */\n    refreshToken?: string;\n}\n/**\n * \n * @export\n * @interface StableDiffusionModel\n */\nexport interface StableDiffusionModel {\n    /**\n     * The name of the model\n     * @type {string}\n     * @memberof StableDiffusionModel\n     */\n    name: string;\n    /**\n     * The baseline model used\n     * @type {string}\n     * @memberof StableDiffusionModel\n     */\n    baseline: string;\n    /**\n     * The type of the model (e.g., ckpt)\n     * @type {string}\n     * @memberof StableDiffusionModel\n     */\n    type: string;\n    /**\n     * A short description of the model\n     * @type {string}\n     * @memberof StableDiffusionModel\n     */\n    description: string;\n    /**\n     * Tags associated with the model\n     * @type {Array<string>}\n     * @memberof StableDiffusionModel\n     */\n    tags: Array<string>;\n    /**\n     * A list of URIs for showcase images\n     * @type {Array<string>}\n     * @memberof StableDiffusionModel\n     */\n    showcases: Array<string>;\n    /**\n     * The version of the model\n     * @type {string}\n     * @memberof StableDiffusionModel\n     */\n    version: string;\n    /**\n     * The style of the model (e.g., anime, furry)\n     * @type {string}\n     * @memberof StableDiffusionModel\n     */\n    style: string;\n    /**\n     * Whether the model is Not Safe For Work (NSFW)\n     * @type {boolean}\n     * @memberof StableDiffusionModel\n     */\n    nsfw: boolean;\n    /**\n     * Whether to download all model files\n     * @type {boolean}\n     * @memberof StableDiffusionModel\n     */\n    download_all: boolean;\n    /**\n     * Configuration information for the model\n     * @type {object}\n     * @memberof StableDiffusionModel\n     */\n    config: object;\n    /**\n     * Whether the model is available for use\n     * @type {boolean}\n     * @memberof StableDiffusionModel\n     */\n    available: boolean;\n    /**\n     * Whether the model is an inpainting model\n     * @type {boolean}\n     * @memberof StableDiffusionModel\n     */\n    inpainting: boolean;\n}\n/**\n * \n * @export\n * @enum {string}\n */\n\nexport enum StatusEnum {\n    Pending = 'pending',\n    Processing = 'processing',\n    Completed = 'completed',\n    Saved = 'saved',\n    Error = 'error',\n    Deleted = 'deleted'\n}\n\n/**\n * \n * @export\n * @interface StripeSession\n */\nexport interface StripeSession {\n    /**\n     * \n     * @type {string}\n     * @memberof StripeSession\n     */\n    session_id: string;\n}\n/**\n * \n * @export\n * @interface TemporaryImage\n */\nexport interface TemporaryImage {\n    /**\n     * \n     * @type {string}\n     * @memberof TemporaryImage\n     */\n    id: string;\n    /**\n     * \n     * @type {string}\n     * @memberof TemporaryImage\n     */\n    upload_url: string;\n}\n/**\n * \n * @export\n * @interface UpdateGlobalSettingsRequest\n */\nexport interface UpdateGlobalSettingsRequest {\n    /**\n     * \n     * @type {object}\n     * @memberof UpdateGlobalSettingsRequest\n     */\n    settings_json: object;\n}\n/**\n * \n * @export\n * @interface UpdateImageInput\n */\nexport interface UpdateImageInput {\n    /**\n     * \n     * @type {string}\n     * @memberof UpdateImageInput\n     */\n    label?: string;\n    /**\n     * \n     * @type {StatusEnum}\n     * @memberof UpdateImageInput\n     */\n    status?: StatusEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof UpdateImageInput\n     */\n    encoded_image?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof UpdateImageInput\n     */\n    encoded_npy?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof UpdateImageInput\n     */\n    score?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof UpdateImageInput\n     */\n    negative_score?: number;\n    /**\n     * \n     * @type {boolean}\n     * @memberof UpdateImageInput\n     */\n    nsfw?: boolean;\n    /**\n     * \n     * @type {number}\n     * @memberof UpdateImageInput\n     */\n    deleted_at?: number | null;\n    /**\n     * \n     * @type {string}\n     * @memberof UpdateImageInput\n     */\n    error?: string;\n}\n/**\n * \n * @export\n * @interface UpsertWorkerConfigInput\n */\nexport interface UpsertWorkerConfigInput {\n    /**\n     * \n     * @type {Array<WorkerGpuConfig>}\n     * @memberof UpsertWorkerConfigInput\n     */\n    gpu_configs?: Array<WorkerGpuConfig>;\n}\n/**\n * \n * @export\n * @interface UpsertWorkerInput\n */\nexport interface UpsertWorkerInput {\n    /**\n     * \n     * @type {string}\n     * @memberof UpsertWorkerInput\n     */\n    display_name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof UpsertWorkerInput\n     */\n    status?: UpsertWorkerInputStatusEnum;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum UpsertWorkerInputStatusEnum {\n    Idle = 'idle',\n    Active = 'active'\n}\n\n/**\n * \n * @export\n * @interface User\n */\nexport interface User {\n    /**\n     * \n     * @type {string}\n     * @memberof User\n     */\n    id?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof User\n     */\n    active?: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof User\n     */\n    customer_id?: string;\n}\n/**\n * \n * @export\n * @interface VerifyLoginInput\n */\nexport interface VerifyLoginInput {\n    /**\n     * \n     * @type {string}\n     * @memberof VerifyLoginInput\n     */\n    email?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof VerifyLoginInput\n     */\n    code?: string;\n}\n/**\n * \n * @export\n * @interface Worker\n */\nexport interface Worker {\n    /**\n     * \n     * @type {string}\n     * @memberof Worker\n     */\n    id: string;\n    /**\n     * \n     * @type {number}\n     * @memberof Worker\n     */\n    created_at: number;\n    /**\n     * \n     * @type {string}\n     * @memberof Worker\n     */\n    display_name: string;\n    /**\n     * \n     * @type {number}\n     * @memberof Worker\n     */\n    last_ping?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof Worker\n     */\n    status?: WorkerStatusEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof Worker\n     */\n    login_code?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Worker\n     */\n    engine?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof Worker\n     */\n    num_gpus?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof Worker\n     */\n    cloud_instance_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Worker\n     */\n    gpu_type?: string;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum WorkerStatusEnum {\n    Idle = 'idle',\n    Active = 'active'\n}\n\n/**\n * \n * @export\n * @interface WorkerConfig\n */\nexport interface WorkerConfig {\n    /**\n     * \n     * @type {string}\n     * @memberof WorkerConfig\n     */\n    worker_id: string;\n    /**\n     * \n     * @type {Array<WorkerGpuConfig>}\n     * @memberof WorkerConfig\n     */\n    gpu_configs?: Array<WorkerGpuConfig>;\n}\n/**\n * \n * @export\n * @interface WorkerGpuConfig\n */\nexport interface WorkerGpuConfig {\n    /**\n     * \n     * @type {number}\n     * @memberof WorkerGpuConfig\n     */\n    gpu_num: number;\n    /**\n     * \n     * @type {string}\n     * @memberof WorkerGpuConfig\n     */\n    model: string;\n}\n/**\n * \n * @export\n * @interface WorkerList\n */\nexport interface WorkerList {\n    /**\n     * \n     * @type {Array<Worker>}\n     * @memberof WorkerList\n     */\n    workers?: Array<Worker>;\n}\n/**\n * \n * @export\n * @interface WorkerLoginCode\n */\nexport interface WorkerLoginCode {\n    /**\n     * \n     * @type {string}\n     * @memberof WorkerLoginCode\n     */\n    login_code: string;\n}\n\n/**\n * AIBrushApi - axios parameter creator\n * @export\n */\nexport const AIBrushApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * Add Metrics\n         * @param {AddMetricsInput} [addMetricsInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        addMetrics: async (addMetricsInput?: AddMetricsInput, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/metrics`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(addMetricsInput, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get a list of saved images by id\n         * @param {string} [fields] Comma-separated list of fields to include in the response images. For example: \\&quot;id,params,created_at\\&quot; \n         * @param {BatchGetImagesInput} [batchGetImagesInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        batchGetImages: async (fields?: string, batchGetImagesInput?: BatchGetImagesInput, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/batch-get-images`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (fields !== undefined) {\n                localVarQueryParameter['fields'] = fields;\n            }\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(batchGetImagesInput, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Create a new deposit code\n         * @param {CreateDepositCodeInput} [createDepositCodeInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createDepositCode: async (createDepositCodeInput?: CreateDepositCodeInput, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/deposit-codes`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(createDepositCodeInput, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Create a new image\n         * @param {CreateImageInput} [createImageInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createImage: async (createImageInput?: CreateImageInput, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/images`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(createImageInput, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Create a new invite code\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createInviteCode: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/invite-codes`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Create a new Stripe session\n         * @param {CreateStripeSessionInput} [createStripeSessionInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createStripeSession: async (createStripeSessionInput?: CreateStripeSessionInput, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/stripe-sessions`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(createStripeSessionInput, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Create a new temporary image\n         * @param {string} format \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createTemporaryImage: async (format: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'format' is not null or undefined\n            assertParamExists('createTemporaryImage', 'format', format)\n            const localVarPath = `/api/temporary-images`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (format !== undefined) {\n                localVarQueryParameter['format'] = format;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Delete a saved image\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteImage: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('deleteImage', 'id', id)\n            const localVarPath = `/api/images/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Log in with Discord\n         * @param {DiscordLogin} [discordLogin] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        discordLogin: async (discordLogin?: DiscordLogin, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/discord-login`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(discordLogin, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get the assets url\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getAssetsUrl: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/assets-url`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get the user\\'s credit balance\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getCredits: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/credits`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get the features\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getFeatures: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/features`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get the global settings\n         * @param {string} key \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getGlobalSettings: async (key: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'key' is not null or undefined\n            assertParamExists('getGlobalSettings', 'key', key)\n            const localVarPath = `/api/global-settings/{key}`\n                .replace(`{${\"key\"}}`, encodeURIComponent(String(key)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get a saved image by id\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getImage: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('getImage', 'id', id)\n            const localVarPath = `/api/images/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get the binary image data\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getImageData: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('getImageData', 'id', id)\n            const localVarPath = `/api/images/{id}.image.png`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get download urls for image assets\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getImageDownloadUrls: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('getImageDownloadUrls', 'id', id)\n            const localVarPath = `/api/images/{id}/download-urls`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get upload urls for image assets\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getImageUploadUrls: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('getImageUploadUrls', 'id', id)\n            const localVarPath = `/api/images/{id}/upload-urls`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get the binary mask data\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getMaskData: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('getMaskData', 'id', id)\n            const localVarPath = `/api/images/{id}.mask.png`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Get available models\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getModels: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/stable-diffusion-models`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get the binary thumbnail data\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getThumbnailData: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('getThumbnailData', 'id', id)\n            const localVarPath = `/api/images/{id}.thumbnail.png`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Healthcheck\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        healthcheck: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/healthcheck`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Check if the user is admin\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        isAdmin: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/is-admin`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get a list of saved images\n         * @param {number} [cursor] \n         * @param {string} [filter] \n         * @param {number} [limit] \n         * @param {'asc' | 'desc'} [direction] \n         * @param {string} [fields] Comma-separated list of fields to include in the response images. For example: \\&quot;id,params,created_at\\&quot; \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listImages: async (cursor?: number, filter?: string, limit?: number, direction?: 'asc' | 'desc', fields?: string, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/images`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (cursor !== undefined) {\n                localVarQueryParameter['cursor'] = cursor;\n            }\n\n            if (filter !== undefined) {\n                localVarQueryParameter['filter'] = filter;\n            }\n\n            if (limit !== undefined) {\n                localVarQueryParameter['limit'] = limit;\n            }\n\n            if (direction !== undefined) {\n                localVarQueryParameter['direction'] = direction;\n            }\n\n            if (fields !== undefined) {\n                localVarQueryParameter['fields'] = fields;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Login by email\n         * @param {LoginInput} [loginInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        login: async (loginInput?: LoginInput, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/auth/login`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(loginInput, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Redeem a deposit code\n         * @param {string} code \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        redeemDepositCode: async (code: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'code' is not null or undefined\n            assertParamExists('redeemDepositCode', 'code', code)\n            const localVarPath = `/api/deposit-codes/{code}`\n                .replace(`{${\"code\"}}`, encodeURIComponent(String(code)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Refresh Login code\n         * @param {RefreshLoginInput} [refreshLoginInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        refresh: async (refreshLoginInput?: RefreshLoginInput, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/auth/refresh`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(refreshLoginInput, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Update the global settings\n         * @param {string} key \n         * @param {UpdateGlobalSettingsRequest} [updateGlobalSettingsRequest] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateGlobalSettings: async (key: string, updateGlobalSettingsRequest?: UpdateGlobalSettingsRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'key' is not null or undefined\n            assertParamExists('updateGlobalSettings', 'key', key)\n            const localVarPath = `/api/global-settings/{key}`\n                .replace(`{${\"key\"}}`, encodeURIComponent(String(key)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(updateGlobalSettingsRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Update a saved image\n         * @param {string} id \n         * @param {UpdateImageInput} [updateImageInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateImage: async (id: string, updateImageInput?: UpdateImageInput, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('updateImage', 'id', id)\n            const localVarPath = `/api/images/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(updateImageInput, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Upload the binary image data\n         * @param {string} id \n         * @param {any} [body] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        uploadImageData: async (id: string, body?: any, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('uploadImageData', 'id', id)\n            const localVarPath = `/api/images/{id}.image.png`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'image/png';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Upload the binary thumbnail data\n         * @param {string} id \n         * @param {any} [body] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        uploadThumbnailData: async (id: string, body?: any, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('uploadThumbnailData', 'id', id)\n            const localVarPath = `/api/images/{id}.thumbnail.png`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'image/png';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Verify Login code\n         * @param {VerifyLoginInput} [verifyLoginInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        verify: async (verifyLoginInput?: VerifyLoginInput, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/auth/verify`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(verifyLoginInput, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * AIBrushApi - functional programming interface\n * @export\n */\nexport const AIBrushApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = AIBrushApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * Add Metrics\n         * @param {AddMetricsInput} [addMetricsInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async addMetrics(addMetricsInput?: AddMetricsInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.addMetrics(addMetricsInput, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get a list of saved images by id\n         * @param {string} [fields] Comma-separated list of fields to include in the response images. For example: \\&quot;id,params,created_at\\&quot; \n         * @param {BatchGetImagesInput} [batchGetImagesInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async batchGetImages(fields?: string, batchGetImagesInput?: BatchGetImagesInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImageList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.batchGetImages(fields, batchGetImagesInput, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Create a new deposit code\n         * @param {CreateDepositCodeInput} [createDepositCodeInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createDepositCode(createDepositCodeInput?: CreateDepositCodeInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DepositCode>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.createDepositCode(createDepositCodeInput, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Create a new image\n         * @param {CreateImageInput} [createImageInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createImage(createImageInput?: CreateImageInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImageList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.createImage(createImageInput, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Create a new invite code\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createInviteCode(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InviteCode>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.createInviteCode(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Create a new Stripe session\n         * @param {CreateStripeSessionInput} [createStripeSessionInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createStripeSession(createStripeSessionInput?: CreateStripeSessionInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StripeSession>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.createStripeSession(createStripeSessionInput, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Create a new temporary image\n         * @param {string} format \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createTemporaryImage(format: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TemporaryImage>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.createTemporaryImage(format, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Delete a saved image\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async deleteImage(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteImage(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Log in with Discord\n         * @param {DiscordLogin} [discordLogin] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async discordLogin(discordLogin?: DiscordLogin, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginResult>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.discordLogin(discordLogin, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get the assets url\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getAssetsUrl(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssetsUrl>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getAssetsUrl(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get the user\\'s credit balance\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getCredits(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Credits>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getCredits(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get the features\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getFeatures(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeatureList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getFeatures(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get the global settings\n         * @param {string} key \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getGlobalSettings(key: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GlobalSettings>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getGlobalSettings(key, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get a saved image by id\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getImage(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Image>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getImage(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get the binary image data\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getImageData(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getImageData(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get download urls for image assets\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getImageDownloadUrls(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImageUrls>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getImageDownloadUrls(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get upload urls for image assets\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getImageUploadUrls(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImageUrls>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getImageUploadUrls(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get the binary mask data\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getMaskData(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getMaskData(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Get available models\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getModels(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: StableDiffusionModel; }>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getModels(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get the binary thumbnail data\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getThumbnailData(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getThumbnailData(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Healthcheck\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async healthcheck(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Healthcheck>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.healthcheck(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Check if the user is admin\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async isAdmin(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IsAdminResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.isAdmin(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get a list of saved images\n         * @param {number} [cursor] \n         * @param {string} [filter] \n         * @param {number} [limit] \n         * @param {'asc' | 'desc'} [direction] \n         * @param {string} [fields] Comma-separated list of fields to include in the response images. For example: \\&quot;id,params,created_at\\&quot; \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listImages(cursor?: number, filter?: string, limit?: number, direction?: 'asc' | 'desc', fields?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImageList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.listImages(cursor, filter, limit, direction, fields, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Login by email\n         * @param {LoginInput} [loginInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async login(loginInput?: LoginInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.login(loginInput, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Redeem a deposit code\n         * @param {string} code \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async redeemDepositCode(code: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.redeemDepositCode(code, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Refresh Login code\n         * @param {RefreshLoginInput} [refreshLoginInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async refresh(refreshLoginInput?: RefreshLoginInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginResult>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.refresh(refreshLoginInput, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Update the global settings\n         * @param {string} key \n         * @param {UpdateGlobalSettingsRequest} [updateGlobalSettingsRequest] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async updateGlobalSettings(key: string, updateGlobalSettingsRequest?: UpdateGlobalSettingsRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GlobalSettings>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.updateGlobalSettings(key, updateGlobalSettingsRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Update a saved image\n         * @param {string} id \n         * @param {UpdateImageInput} [updateImageInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async updateImage(id: string, updateImageInput?: UpdateImageInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Image>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.updateImage(id, updateImageInput, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Upload the binary image data\n         * @param {string} id \n         * @param {any} [body] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async uploadImageData(id: string, body?: any, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadImageData(id, body, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Upload the binary thumbnail data\n         * @param {string} id \n         * @param {any} [body] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async uploadThumbnailData(id: string, body?: any, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadThumbnailData(id, body, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Verify Login code\n         * @param {VerifyLoginInput} [verifyLoginInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async verify(verifyLoginInput?: VerifyLoginInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginResult>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.verify(verifyLoginInput, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n    }\n};\n\n/**\n * AIBrushApi - factory interface\n * @export\n */\nexport const AIBrushApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = AIBrushApiFp(configuration)\n    return {\n        /**\n         * Add Metrics\n         * @param {AddMetricsInput} [addMetricsInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        addMetrics(addMetricsInput?: AddMetricsInput, options?: any): AxiosPromise<void> {\n            return localVarFp.addMetrics(addMetricsInput, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get a list of saved images by id\n         * @param {string} [fields] Comma-separated list of fields to include in the response images. For example: \\&quot;id,params,created_at\\&quot; \n         * @param {BatchGetImagesInput} [batchGetImagesInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        batchGetImages(fields?: string, batchGetImagesInput?: BatchGetImagesInput, options?: any): AxiosPromise<ImageList> {\n            return localVarFp.batchGetImages(fields, batchGetImagesInput, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Create a new deposit code\n         * @param {CreateDepositCodeInput} [createDepositCodeInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createDepositCode(createDepositCodeInput?: CreateDepositCodeInput, options?: any): AxiosPromise<DepositCode> {\n            return localVarFp.createDepositCode(createDepositCodeInput, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Create a new image\n         * @param {CreateImageInput} [createImageInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createImage(createImageInput?: CreateImageInput, options?: any): AxiosPromise<ImageList> {\n            return localVarFp.createImage(createImageInput, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Create a new invite code\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createInviteCode(options?: any): AxiosPromise<InviteCode> {\n            return localVarFp.createInviteCode(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Create a new Stripe session\n         * @param {CreateStripeSessionInput} [createStripeSessionInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createStripeSession(createStripeSessionInput?: CreateStripeSessionInput, options?: any): AxiosPromise<StripeSession> {\n            return localVarFp.createStripeSession(createStripeSessionInput, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Create a new temporary image\n         * @param {string} format \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createTemporaryImage(format: string, options?: any): AxiosPromise<TemporaryImage> {\n            return localVarFp.createTemporaryImage(format, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Delete a saved image\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteImage(id: string, options?: any): AxiosPromise<void> {\n            return localVarFp.deleteImage(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Log in with Discord\n         * @param {DiscordLogin} [discordLogin] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        discordLogin(discordLogin?: DiscordLogin, options?: any): AxiosPromise<LoginResult> {\n            return localVarFp.discordLogin(discordLogin, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get the assets url\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getAssetsUrl(options?: any): AxiosPromise<AssetsUrl> {\n            return localVarFp.getAssetsUrl(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get the user\\'s credit balance\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getCredits(options?: any): AxiosPromise<Credits> {\n            return localVarFp.getCredits(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get the features\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getFeatures(options?: any): AxiosPromise<FeatureList> {\n            return localVarFp.getFeatures(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get the global settings\n         * @param {string} key \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getGlobalSettings(key: string, options?: any): AxiosPromise<GlobalSettings> {\n            return localVarFp.getGlobalSettings(key, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get a saved image by id\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getImage(id: string, options?: any): AxiosPromise<Image> {\n            return localVarFp.getImage(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get the binary image data\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getImageData(id: string, options?: any): AxiosPromise<any> {\n            return localVarFp.getImageData(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get download urls for image assets\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getImageDownloadUrls(id: string, options?: any): AxiosPromise<ImageUrls> {\n            return localVarFp.getImageDownloadUrls(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get upload urls for image assets\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getImageUploadUrls(id: string, options?: any): AxiosPromise<ImageUrls> {\n            return localVarFp.getImageUploadUrls(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get the binary mask data\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getMaskData(id: string, options?: any): AxiosPromise<any> {\n            return localVarFp.getMaskData(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Get available models\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getModels(options?: any): AxiosPromise<{ [key: string]: StableDiffusionModel; }> {\n            return localVarFp.getModels(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get the binary thumbnail data\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getThumbnailData(id: string, options?: any): AxiosPromise<any> {\n            return localVarFp.getThumbnailData(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Healthcheck\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        healthcheck(options?: any): AxiosPromise<Healthcheck> {\n            return localVarFp.healthcheck(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Check if the user is admin\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        isAdmin(options?: any): AxiosPromise<IsAdminResponse> {\n            return localVarFp.isAdmin(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get a list of saved images\n         * @param {number} [cursor] \n         * @param {string} [filter] \n         * @param {number} [limit] \n         * @param {'asc' | 'desc'} [direction] \n         * @param {string} [fields] Comma-separated list of fields to include in the response images. For example: \\&quot;id,params,created_at\\&quot; \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listImages(cursor?: number, filter?: string, limit?: number, direction?: 'asc' | 'desc', fields?: string, options?: any): AxiosPromise<ImageList> {\n            return localVarFp.listImages(cursor, filter, limit, direction, fields, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Login by email\n         * @param {LoginInput} [loginInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        login(loginInput?: LoginInput, options?: any): AxiosPromise<void> {\n            return localVarFp.login(loginInput, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Redeem a deposit code\n         * @param {string} code \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        redeemDepositCode(code: string, options?: any): AxiosPromise<void> {\n            return localVarFp.redeemDepositCode(code, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Refresh Login code\n         * @param {RefreshLoginInput} [refreshLoginInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        refresh(refreshLoginInput?: RefreshLoginInput, options?: any): AxiosPromise<LoginResult> {\n            return localVarFp.refresh(refreshLoginInput, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Update the global settings\n         * @param {string} key \n         * @param {UpdateGlobalSettingsRequest} [updateGlobalSettingsRequest] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateGlobalSettings(key: string, updateGlobalSettingsRequest?: UpdateGlobalSettingsRequest, options?: any): AxiosPromise<GlobalSettings> {\n            return localVarFp.updateGlobalSettings(key, updateGlobalSettingsRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Update a saved image\n         * @param {string} id \n         * @param {UpdateImageInput} [updateImageInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateImage(id: string, updateImageInput?: UpdateImageInput, options?: any): AxiosPromise<Image> {\n            return localVarFp.updateImage(id, updateImageInput, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Upload the binary image data\n         * @param {string} id \n         * @param {any} [body] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        uploadImageData(id: string, body?: any, options?: any): AxiosPromise<void> {\n            return localVarFp.uploadImageData(id, body, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Upload the binary thumbnail data\n         * @param {string} id \n         * @param {any} [body] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        uploadThumbnailData(id: string, body?: any, options?: any): AxiosPromise<void> {\n            return localVarFp.uploadThumbnailData(id, body, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Verify Login code\n         * @param {VerifyLoginInput} [verifyLoginInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        verify(verifyLoginInput?: VerifyLoginInput, options?: any): AxiosPromise<LoginResult> {\n            return localVarFp.verify(verifyLoginInput, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * AIBrushApi - object-oriented interface\n * @export\n * @class AIBrushApi\n * @extends {BaseAPI}\n */\nexport class AIBrushApi extends BaseAPI {\n    /**\n     * Add Metrics\n     * @param {AddMetricsInput} [addMetricsInput] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public addMetrics(addMetricsInput?: AddMetricsInput, options?: any) {\n        return AIBrushApiFp(this.configuration).addMetrics(addMetricsInput, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get a list of saved images by id\n     * @param {string} [fields] Comma-separated list of fields to include in the response images. For example: \\&quot;id,params,created_at\\&quot; \n     * @param {BatchGetImagesInput} [batchGetImagesInput] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public batchGetImages(fields?: string, batchGetImagesInput?: BatchGetImagesInput, options?: any) {\n        return AIBrushApiFp(this.configuration).batchGetImages(fields, batchGetImagesInput, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Create a new deposit code\n     * @param {CreateDepositCodeInput} [createDepositCodeInput] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public createDepositCode(createDepositCodeInput?: CreateDepositCodeInput, options?: any) {\n        return AIBrushApiFp(this.configuration).createDepositCode(createDepositCodeInput, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Create a new image\n     * @param {CreateImageInput} [createImageInput] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public createImage(createImageInput?: CreateImageInput, options?: any) {\n        return AIBrushApiFp(this.configuration).createImage(createImageInput, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Create a new invite code\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public createInviteCode(options?: any) {\n        return AIBrushApiFp(this.configuration).createInviteCode(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Create a new Stripe session\n     * @param {CreateStripeSessionInput} [createStripeSessionInput] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public createStripeSession(createStripeSessionInput?: CreateStripeSessionInput, options?: any) {\n        return AIBrushApiFp(this.configuration).createStripeSession(createStripeSessionInput, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Create a new temporary image\n     * @param {string} format \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public createTemporaryImage(format: string, options?: any) {\n        return AIBrushApiFp(this.configuration).createTemporaryImage(format, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Delete a saved image\n     * @param {string} id \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public deleteImage(id: string, options?: any) {\n        return AIBrushApiFp(this.configuration).deleteImage(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Log in with Discord\n     * @param {DiscordLogin} [discordLogin] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public discordLogin(discordLogin?: DiscordLogin, options?: any) {\n        return AIBrushApiFp(this.configuration).discordLogin(discordLogin, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get the assets url\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public getAssetsUrl(options?: any) {\n        return AIBrushApiFp(this.configuration).getAssetsUrl(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get the user\\'s credit balance\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public getCredits(options?: any) {\n        return AIBrushApiFp(this.configuration).getCredits(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get the features\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public getFeatures(options?: any) {\n        return AIBrushApiFp(this.configuration).getFeatures(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get the global settings\n     * @param {string} key \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public getGlobalSettings(key: string, options?: any) {\n        return AIBrushApiFp(this.configuration).getGlobalSettings(key, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get a saved image by id\n     * @param {string} id \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public getImage(id: string, options?: any) {\n        return AIBrushApiFp(this.configuration).getImage(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get the binary image data\n     * @param {string} id \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public getImageData(id: string, options?: any) {\n        return AIBrushApiFp(this.configuration).getImageData(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get download urls for image assets\n     * @param {string} id \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public getImageDownloadUrls(id: string, options?: any) {\n        return AIBrushApiFp(this.configuration).getImageDownloadUrls(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get upload urls for image assets\n     * @param {string} id \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public getImageUploadUrls(id: string, options?: any) {\n        return AIBrushApiFp(this.configuration).getImageUploadUrls(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get the binary mask data\n     * @param {string} id \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public getMaskData(id: string, options?: any) {\n        return AIBrushApiFp(this.configuration).getMaskData(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Get available models\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public getModels(options?: any) {\n        return AIBrushApiFp(this.configuration).getModels(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get the binary thumbnail data\n     * @param {string} id \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public getThumbnailData(id: string, options?: any) {\n        return AIBrushApiFp(this.configuration).getThumbnailData(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Healthcheck\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public healthcheck(options?: any) {\n        return AIBrushApiFp(this.configuration).healthcheck(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Check if the user is admin\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public isAdmin(options?: any) {\n        return AIBrushApiFp(this.configuration).isAdmin(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get a list of saved images\n     * @param {number} [cursor] \n     * @param {string} [filter] \n     * @param {number} [limit] \n     * @param {'asc' | 'desc'} [direction] \n     * @param {string} [fields] Comma-separated list of fields to include in the response images. For example: \\&quot;id,params,created_at\\&quot; \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public listImages(cursor?: number, filter?: string, limit?: number, direction?: 'asc' | 'desc', fields?: string, options?: any) {\n        return AIBrushApiFp(this.configuration).listImages(cursor, filter, limit, direction, fields, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Login by email\n     * @param {LoginInput} [loginInput] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public login(loginInput?: LoginInput, options?: any) {\n        return AIBrushApiFp(this.configuration).login(loginInput, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Redeem a deposit code\n     * @param {string} code \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public redeemDepositCode(code: string, options?: any) {\n        return AIBrushApiFp(this.configuration).redeemDepositCode(code, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Refresh Login code\n     * @param {RefreshLoginInput} [refreshLoginInput] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public refresh(refreshLoginInput?: RefreshLoginInput, options?: any) {\n        return AIBrushApiFp(this.configuration).refresh(refreshLoginInput, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Update the global settings\n     * @param {string} key \n     * @param {UpdateGlobalSettingsRequest} [updateGlobalSettingsRequest] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public updateGlobalSettings(key: string, updateGlobalSettingsRequest?: UpdateGlobalSettingsRequest, options?: any) {\n        return AIBrushApiFp(this.configuration).updateGlobalSettings(key, updateGlobalSettingsRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Update a saved image\n     * @param {string} id \n     * @param {UpdateImageInput} [updateImageInput] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public updateImage(id: string, updateImageInput?: UpdateImageInput, options?: any) {\n        return AIBrushApiFp(this.configuration).updateImage(id, updateImageInput, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Upload the binary image data\n     * @param {string} id \n     * @param {any} [body] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public uploadImageData(id: string, body?: any, options?: any) {\n        return AIBrushApiFp(this.configuration).uploadImageData(id, body, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Upload the binary thumbnail data\n     * @param {string} id \n     * @param {any} [body] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public uploadThumbnailData(id: string, body?: any, options?: any) {\n        return AIBrushApiFp(this.configuration).uploadThumbnailData(id, body, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Verify Login code\n     * @param {VerifyLoginInput} [verifyLoginInput] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public verify(verifyLoginInput?: VerifyLoginInput, options?: any) {\n        return AIBrushApiFp(this.configuration).verify(verifyLoginInput, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n\n\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * AIBrush API\n * Orchestration backend for AI Brush\n *\n * The version of the OpenAPI document: 1.0.0\n * Contact: admin@aibrush.art\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport { Configuration } from \"./configuration\";\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport globalAxios, { AxiosPromise, AxiosInstance } from 'axios';\n\nexport const BASE_PATH = \"https://www.aibrush.art\".replace(/\\/+$/, \"\");\n\n/**\n *\n * @export\n */\nexport const COLLECTION_FORMATS = {\n    csv: \",\",\n    ssv: \" \",\n    tsv: \"\\t\",\n    pipes: \"|\",\n};\n\n/**\n *\n * @export\n * @interface RequestArgs\n */\nexport interface RequestArgs {\n    url: string;\n    options: any;\n}\n\n/**\n *\n * @export\n * @class BaseAPI\n */\nexport class BaseAPI {\n    protected configuration: Configuration | undefined;\n\n    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected axios: AxiosInstance = globalAxios) {\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = configuration.basePath || this.basePath;\n        }\n    }\n};\n\n/**\n *\n * @export\n * @class RequiredError\n * @extends {Error}\n */\nexport class RequiredError extends Error {\n    name: \"RequiredError\" = \"RequiredError\";\n    constructor(public field: string, msg?: string) {\n        super(msg);\n    }\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * AIBrush API\n * Orchestration backend for AI Brush\n *\n * The version of the OpenAPI document: 1.0.0\n * Contact: admin@aibrush.art\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport { Configuration } from \"./configuration\";\nimport { RequiredError,　RequestArgs } from \"./base\";\nimport { AxiosInstance } from 'axios';\n\n/**\n *\n * @export\n */\nexport const DUMMY_BASE_URL = 'https://example.com'\n\n/**\n *\n * @throws {RequiredError}\n * @export\n */\nexport const assertParamExists = function (functionName: string, paramName: string, paramValue: unknown) {\n    if (paramValue === null || paramValue === undefined) {\n        throw new RequiredError(paramName, `Required parameter ${paramName} was null or undefined when calling ${functionName}.`);\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setApiKeyToObject = async function (object: any, keyParamName: string, configuration?: Configuration) {\n    if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n            ? await configuration.apiKey(keyParamName)\n            : await configuration.apiKey;\n        object[keyParamName] = localVarApiKeyValue;\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setBasicAuthToObject = function (object: any, configuration?: Configuration) {\n    if (configuration && (configuration.username || configuration.password)) {\n        object[\"auth\"] = { username: configuration.username, password: configuration.password };\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setBearerAuthToObject = async function (object: any, configuration?: Configuration) {\n    if (configuration && configuration.accessToken) {\n        const accessToken = typeof configuration.accessToken === 'function'\n            ? await configuration.accessToken()\n            : await configuration.accessToken;\n        object[\"Authorization\"] = \"Bearer \" + accessToken;\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setOAuthToObject = async function (object: any, name: string, scopes: string[], configuration?: Configuration) {\n    if (configuration && configuration.accessToken) {\n        const localVarAccessTokenValue = typeof configuration.accessToken === 'function'\n            ? await configuration.accessToken(name, scopes)\n            : await configuration.accessToken;\n        object[\"Authorization\"] = \"Bearer \" + localVarAccessTokenValue;\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setSearchParams = function (url: URL, ...objects: any[]) {\n    const searchParams = new URLSearchParams(url.search);\n    for (const object of objects) {\n        for (const key in object) {\n            if (Array.isArray(object[key])) {\n                searchParams.delete(key);\n                for (const item of object[key]) {\n                    searchParams.append(key, item);\n                }\n            } else {\n                searchParams.set(key, object[key]);\n            }\n        }\n    }\n    url.search = searchParams.toString();\n}\n\n/**\n *\n * @export\n */\nexport const serializeDataIfNeeded = function (value: any, requestOptions: any, configuration?: Configuration) {\n    const nonString = typeof value !== 'string';\n    const needsSerialization = nonString && configuration && configuration.isJsonMime\n        ? configuration.isJsonMime(requestOptions.headers['Content-Type'])\n        : nonString;\n    return needsSerialization\n        ? JSON.stringify(value !== undefined ? value : {})\n        : (value || \"\");\n}\n\n/**\n *\n * @export\n */\nexport const toPathString = function (url: URL) {\n    return url.pathname + url.search + url.hash\n}\n\n/**\n *\n * @export\n */\nexport const createRequestFunction = function (axiosArgs: RequestArgs, globalAxios: AxiosInstance, BASE_PATH: string, configuration?: Configuration) {\n    return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n        const axiosRequestArgs = {...axiosArgs.options, url: (configuration?.basePath || basePath) + axiosArgs.url};\n        return axios.request(axiosRequestArgs);\n    };\n}\n","import React, { FC, useState, useEffect } from \"react\";\nimport { Renderer } from \"./renderer\";\nimport { BaseTool, Tool } from \"./tool\";\nimport { ZoomHelper } from \"./zoomHelper\";\n\nexport class SmudgeTool extends BaseTool implements Tool {\n    private brushSize = 10;\n    private brushOpacity = 0.2;\n\n    private lastX = 0;\n    private lastY = 0;\n    private panning = false;\n    private smudging = false;\n    private _dirty = false;\n\n    set dirty(dirty: boolean) {\n        this._dirty = dirty;\n        if (this.dirtyListener) {\n            this.dirtyListener(dirty);\n        }\n    }\n\n    get dirty() {\n        return this._dirty;\n    }\n\n    private dirtyListener?: (dirty: boolean) => void;\n\n    constructor(renderer: Renderer) {\n        super(renderer, \"smudge\");\n    }\n\n    private sync() {\n        this.renderer.setCursor({\n            type: \"circle\",\n            color: \"white\",\n            radius: this.brushSize / 2,\n            x: this.lastX,\n            y: this.lastY,\n        });\n    }\n\n    updateArgs(args: any) {\n        super.updateArgs(args);\n        this.brushSize = args.brushSize || 10;\n        this.brushOpacity = args.brushOpacity || 0.2;\n        this.sync();\n    }\n\n    onMouseMove(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>): void {\n        let { x, y } = this.zoomHelper.translateMouseToCanvasCoordinates(\n            event.nativeEvent.offsetX,\n            event.nativeEvent.offsetY\n        );\n\n        if (this.panning) {\n            this.zoomHelper.onPan(event);\n        } else if (this.smudging) {\n            this.renderer.smudgeLine(\n                this.lastX,\n                this.lastY,\n                x,\n                y,\n                this.brushSize,\n                this.brushOpacity\n            );\n            this.dirty = true;\n        }\n\n        this.lastX = x;\n        this.lastY = y;\n        this.sync();\n    }\n\n    onWheel(event: WheelEvent) {\n        this.zoomHelper.onWheel(event);\n        this.sync();\n    }\n\n    onMouseDown(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        if (event.button === 0) {\n            this.smudging = true;\n            if (!this.dirty) {\n                this.renderer.copyEditImageFromBaseImage();\n            }\n            this.dirty = true;\n            let { x, y } = this.zoomHelper.translateMouseToCanvasCoordinates(\n                event.nativeEvent.offsetX,\n                event.nativeEvent.offsetY\n            );\n            this.lastX = x;\n            this.lastY = y;\n            this.sync();\n        } else if (event.button === 1) {\n            this.panning = true;\n        }\n        this.sync();\n    }\n\n    onMouseUp(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        this.smudging = false;\n        this.panning = false;\n        this.sync();\n    }\n\n    onSaveImage(listener: (encodedImage: string) => void): void {\n        this.saveListener = listener;\n    }\n\n    onDirty(listener: (dirty: boolean) => void): void {\n        this.dirtyListener = listener;\n    }\n\n    cancel() {\n        // kind of a hack, clears the selection layer\n        this.renderer.setEditImage(null);\n        this.dirty = false;\n    }\n\n    confirm() {\n        this.renderer.commitSelection();\n        const encodedImage = this.renderer.getEncodedImage(null);\n        if (encodedImage && this.saveListener) {\n            this.saveListener(encodedImage);\n        }\n        this.dirty = false;\n    }\n\n    destroy(): boolean {\n        if (this.dirty) {\n            this.renderer.commitSelection();\n        }\n        return true;\n    }\n}\n\ninterface Props {\n    renderer: Renderer;\n    tool: SmudgeTool;\n}\n\nexport const SmudgeControls: FC<Props> = ({ renderer, tool }) => {\n    const [brushSize, setBrushSize] = useState(10);\n    const [brushOpacity, setBrushOpacity] = useState(0.2);\n    const [dirty, setDirty] = useState(false);\n\n    tool.onDirty(setDirty);\n\n    useEffect(() => {\n        tool.updateArgs({\n            brushSize,\n            brushOpacity,\n        });\n    }, [brushSize, brushOpacity]);\n\n    return (\n        <div style={{ marginTop: \"16px\" }}>\n            <div className=\"form-group\">\n                <label style={{ width: \"100%\" }}>\n                    Brush size\n                    <small\n                        className=\"form-text text-muted\"\n                        style={{ float: \"right\" }}\n                    >\n                        {brushSize}px\n                    </small>\n                </label>\n                <input\n                    type=\"range\"\n                    className=\"form-control-range\"\n                    min=\"1\"\n                    max=\"100\"\n                    value={brushSize}\n                    onChange={(e) => setBrushSize(parseInt(e.target.value))}\n                />\n            </div>\n            <div className=\"form-group\">\n                <label style={{ width: \"100%\" }}>\n                    Brush opacity\n                    <small\n                        className=\"form-text text-muted\"\n                        style={{ float: \"right\" }}\n                    >\n                        {Math.round(brushOpacity * 100)}%\n                    </small>\n                </label>\n                <input\n                    type=\"range\"\n                    className=\"form-control-range\"\n                    min=\"0\"\n                    max=\"1\"\n                    step=\"0.01\"\n                    value={brushOpacity}\n                    onChange={(e) =>\n                        setBrushOpacity(parseFloat(e.target.value))\n                    }\n                />\n            </div>\n            <div\n                className=\"form-group\"\n                style={{\n                    marginTop: \"16px\",\n                    visibility: dirty ? \"visible\" : \"hidden\",\n                }}\n            >\n                <button\n                    className=\"btn btn-secondary\"\n                    onClick={() => tool.cancel()}\n                >\n                    Revert\n                </button>\n                <button\n                    className=\"btn btn-primary\"\n                    onClick={() => tool.confirm()}\n                    style={{ marginLeft: \"8px\" }}\n                >\n                    Save\n                </button>\n            </div>\n        </div>\n    );\n};\n","import React, { FC, useState, useEffect, useRef } from \"react\";\nimport axios from \"axios\";\nimport { Prompt } from \"react-router\";\n\nimport { sleep } from \"../../lib/sleep\";\nimport { defaultArgs } from \"../../components/ImagePrompt\";\nimport { Tool, BaseTool } from \"./tool\";\nimport { Renderer } from \"./renderer\";\nimport { SelectionTool } from \"./selection-tool\";\nimport { Cursor, Rect } from \"./models\";\nimport {\n    AIBrushApi,\n    CreateImageInput,\n    Image as APIImage,\n    ImageList,\n    StatusEnum,\n} from \"../../client\";\nimport { ZoomHelper } from \"./zoomHelper\";\nimport { getClosestAspectRatio } from \"../../lib/aspecRatios\";\nimport { getUpscaleLevel } from \"../../lib/upscale\";\nimport {\n    applyAlphaMask,\n    featherEdges,\n    ImageUtilWorker,\n    loadImageDataElement,\n} from \"../../lib/imageutil\";\nimport { ApiSocket, NOTIFICATION_IMAGE_UPDATED } from \"../../lib/apisocket\";\nimport moment from \"moment\";\nimport { ProgressBar } from \"../../components/ProgressBar\";\nimport { calculateImagesCost } from \"../../lib/credits\";\nimport { CostIndicator } from \"../../components/CostIndicator\";\nimport ModelSelector from \"../../components/ModelSelector\";\nimport { ResetToDefaultIcon } from \"../../components/ResetToDefaultIcon\";\n\nconst anonymousClient = axios.create();\n\ntype InpaintToolState =\n    | \"select\"\n    | \"erase\"\n    | \"inpaint\"\n    | \"uploading\"\n    | \"processing\"\n    | \"confirm\"\n    | undefined;\n\ninterface ImageWithData extends APIImage {\n    data?: ImageData;\n}\n\nexport class InpaintTool extends BaseTool implements Tool {\n    private selectionTool: SelectionTool;\n    private prompt: string = \"\";\n    private negativePrompt: string = \"\";\n    private count: number = 4;\n    private brushSize: number = 10;\n    private _dirty = false;\n    private worker: ImageUtilWorker;\n    private idCounter = 0;\n\n    private _state: InpaintToolState;\n    private stateHandler: (state: InpaintToolState) => void = () => {};\n    private selectionControlsListener: (show: boolean) => void = () => {};\n\n    private imageData: Array<ImageData> = [];\n    private selectedImageDataIndex: number = -1;\n    private selectedImageData: ImageData | null = null;\n    private panning = false;\n    private erasing = false;\n    private progressListener?: (progress: number) => void;\n    private errorListener?: (error: string | null) => void;\n    private dirtyListener?: (dirty: boolean) => void;\n\n    set dirty(dirty: boolean) {\n        this._dirty = dirty;\n        if (this.dirtyListener) {\n            this.dirtyListener(dirty);\n        }\n    }\n\n    get dirty() {\n        return this._dirty;\n    }\n\n    private newId(): string {\n        return `${this.idCounter++}`;\n    }\n\n    onError(handler: (error: string | null) => void) {\n        this.errorListener = handler;\n    }\n\n    private notifyError(error: string | null) {\n        if (this.errorListener) {\n            this.errorListener(error);\n        }\n    }\n\n    get state(): InpaintToolState {\n        return this._state;\n    }\n\n    set state(state: InpaintToolState) {\n        if (state != this._state) {\n            if (this._state == \"select\") {\n                this.selectionTool.destroy();\n            }\n            if (this._state === \"erase\") {\n                this.renderer.setCursor(undefined);\n            }\n            this._state = state;\n            this.stateHandler(state);\n\n            if (state == \"confirm\") {\n                this.selectionControlsListener(true);\n            } else {\n                this.selectionControlsListener(false);\n                if (state == \"select\") {\n                    const imageWidth = this.renderer.getWidth();\n                    const imageHeight = this.renderer.getHeight();\n                    const selectionWidth = Math.min(\n                        imageWidth,\n                        imageHeight,\n                        512\n                    );\n                    this.selectionTool.updateArgs({\n                        selectionOverlay: {\n                            x: 0,\n                            y: 0,\n                            width: selectionWidth,\n                            height: selectionWidth,\n                        },\n                    });\n                }\n            }\n        }\n    }\n\n    selectSupported(): boolean {\n        // return !(\n        //     this.renderer.getWidth() == this.renderer.getHeight() &&\n        //     getUpscaleLevel(\n        //         this.renderer.getWidth(),\n        //         this.renderer.getHeight()\n        //     ) === 0\n        // );\n        return true;\n    }\n\n    constructor(renderer: Renderer) {\n        super(renderer, \"inpaint\");\n        this.selectionTool = new SelectionTool(renderer);\n        if (this.selectSupported()) {\n            this.state = \"select\";\n            this.selectionTool.updateArgs({\n                outpaint: this.getArgs().outpaint,\n            });\n        } else {\n            this.state = \"erase\";\n        }\n        this.worker = new ImageUtilWorker();\n    }\n\n    onMouseDown(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        if (this.state == \"select\") {\n            this.selectionTool.onMouseDown(event);\n            return;\n        }\n        let { x, y } = this.zoomHelper.translateMouseToCanvasCoordinates(\n            event.nativeEvent.offsetX,\n            event.nativeEvent.offsetY\n        );\n        if (event.button === 1) {\n            this.panning = true;\n            return;\n        }\n        if (this.state == \"erase\") {\n            this.erasing = true;\n            this.erasePoint(x, y);\n        }\n    }\n\n    private erasePoint(x: number, y: number) {\n        if (!this.dirty) {\n            this.dirty = true;\n        }\n        this.renderer.erasePoint(x, y, this.brushSize);\n        this.renderer.render();\n    }\n\n    private updateCursor(x: number, y: number) {\n        if (this.state == \"erase\") {\n            this.renderer.setCursor({\n                color: \"white\",\n                radius: this.brushSize / 2,\n                type: \"circle\",\n                x,\n                y,\n            });\n        } else {\n            this.renderer.setCursor({\n                color: \"white\",\n                radius: 10,\n                type: \"crosshairs\",\n                x,\n                y,\n            });\n        }\n    }\n\n    onMouseMove(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        let { x, y } = this.zoomHelper.translateMouseToCanvasCoordinates(\n            event.nativeEvent.offsetX,\n            event.nativeEvent.offsetY\n        );\n        this.updateCursor(x, y);\n        if (this.state == \"select\") {\n            this.selectionTool.onMouseMove(event);\n            return;\n        }\n\n        if (this.panning) {\n            this.zoomHelper.onPan(event);\n        }\n\n        if (this.erasing) {\n            this.erasePoint(x, y);\n        }\n    }\n\n    onMouseUp(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        if (this.state == \"select\") {\n            this.selectionTool.onMouseUp(event);\n        }\n        this.panning = false;\n        this.erasing = false;\n    }\n\n    onMouseLeave(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>): void {\n        if (this.state == \"select\") {\n            this.selectionTool.onMouseLeave(event);\n        }\n        this.panning = false;\n        this.erasing = false;\n    }\n\n    onWheel(event: WheelEvent) {\n        this.zoomHelper.onWheel(event);\n        let { x, y } = this.zoomHelper.translateMouseToCanvasCoordinates(\n            event.offsetX,\n            event.offsetY\n        );\n        this.updateCursor(x, y);\n    }\n\n    updateArgs(args: any) {\n        args = {\n            ...this.getArgs(),\n            ...args,\n        };\n        super.updateArgs(args);\n        this.prompt = args.prompt || \"\";\n        this.negativePrompt = args.negativePrompt || \"\";\n        this.count = args.count || 4;\n        this.brushSize = args.brushSize || 10;\n\n        this.updateCursor(\n            this.renderer.getWidth() / 2,\n            this.renderer.getHeight() / 2\n        );\n        this.selectionTool.updateArgs({\n            outpaint: args.outpaint,\n        });\n    }\n\n    onChangeState(handler: (state: InpaintToolState) => void) {\n        this.stateHandler = handler;\n    }\n\n    onShowSelectionControls(listener: (show: boolean) => void): void {\n        this.selectionControlsListener = listener;\n    }\n\n    onProgress(listener: (progress: number) => void): void {\n        this.progressListener = listener;\n    }\n\n    private async loadImageData(\n        api: AIBrushApi,\n        imageId: string,\n        alphaMask: ImageData,\n        selectionOverlay: Rect\n    ): Promise<ImageData> {\n        const imageElement = await loadImageDataElement(api, imageId);\n        const canvas = document.createElement(\"canvas\");\n        canvas.width = selectionOverlay.width;\n        canvas.height = selectionOverlay.height;\n        const ctx = canvas.getContext(\"2d\");\n        if (!ctx) {\n            throw new Error(\"Failed to get canvas context\");\n        }\n        ctx.drawImage(\n            imageElement,\n            0,\n            0,\n            selectionOverlay.width,\n            selectionOverlay.height\n        );\n        const imageData = ctx.getImageData(\n            0,\n            0,\n            selectionOverlay.width,\n            selectionOverlay.height\n        );\n\n        const id = this.newId();\n        const resp = await this.worker.processRequest({\n            id,\n            alphaMode: \"alpha\",\n            alphaPixels: alphaMask.data,\n            feather: true,\n            height: this.renderer.getHeight(),\n            width: this.renderer.getWidth(),\n            pixels: imageData.data,\n            selectionOverlay,\n            featherWidth: 10,\n        });\n        const updatedImageData = new ImageData(\n            resp.pixels,\n            imageData.width,\n            imageData.height\n        );\n        // remove canvas\n        canvas.remove();\n        return updatedImageData;\n    }\n\n    cancel() {\n        if (this.selectSupported()) {\n            this.state = \"select\";\n        } else {\n            this.state = \"erase\";\n        }\n        this.renderer.snapshot();\n        this.renderer.undo();\n        this.renderer.clearRedoStack();\n        this.imageData = [];\n        this.renderer.setEditImage(null);\n        this.dirty = false;\n    }\n\n    private updateProgress(progress: number) {\n        if (this.progressListener) {\n            this.progressListener(progress);\n        }\n    }\n\n    async submit(\n        api: AIBrushApi,\n        apisocket: ApiSocket,\n        image: APIImage,\n        model: string\n    ) {\n        this.notifyError(null);\n        let selectionOverlay = this.renderer.getSelectionOverlay();\n        if (!selectionOverlay) {\n            console.error(\"No selection\");\n            return;\n        }\n\n        if (this.getArgs().outpaint) {\n            // check if selection overlay is out of renderer bounds (width, height)\n            if (\n                selectionOverlay.x < 0 ||\n                selectionOverlay.y < 0 ||\n                selectionOverlay.x + selectionOverlay.width >\n                    this.renderer.getWidth() ||\n                selectionOverlay.y + selectionOverlay.height >\n                    this.renderer.getHeight()\n            ) {\n                this.renderer.expandToOverlay();\n                selectionOverlay = this.renderer.getSelectionOverlay()!;\n            }\n        }\n\n        this.state = \"uploading\";\n        this.updateProgress(0);\n\n        // get the erased area, then undo the erase to get the original image\n        const encodedMask = this.renderer.getEncodedMask(selectionOverlay);\n        const maskData = this.renderer.getImageData(selectionOverlay);\n        // hack to restore the image\n        this.renderer.snapshot();\n        this.renderer.undo();\n        this.renderer.clearRedoStack();\n\n        const encodedImage = this.renderer.getEncodedImage(selectionOverlay);\n\n        // upload temporary images in parallel\n        const tmpImagePromises = [\n            api.createTemporaryImage(\"png\"),\n            api.createTemporaryImage(\"png\"),\n        ];\n        const tmpImages = await Promise.all(tmpImagePromises);\n        const binaryImages = [\n            Buffer.from(encodedImage!, \"base64\"),\n            Buffer.from(encodedMask!, \"base64\"),\n        ];\n        const progress = [0, 0];\n        const uploadPromises: Array<Promise<any>> = [];\n        for (let i = 0; i < tmpImages.length; i++) {\n            const tmpImage = tmpImages[i].data;\n            const binaryImage = binaryImages[i];\n            uploadPromises.push(\n                anonymousClient.put(tmpImage.upload_url, binaryImage, {\n                    headers: {\n                        \"Content-Type\": \"image/png\",\n                    },\n                    onUploadProgress: (e) => {\n                        progress[i] = e.loaded / e.total;\n                        this.updateProgress((progress[0] + progress[1]) / 2);\n                    },\n                })\n            );\n        }\n        await Promise.all(uploadPromises);\n\n        const input: CreateImageInput = defaultArgs();\n        input.label = \"\";\n        // input.encoded_image = encodedImage;\n        // input.encoded_mask = encodedMask;\n        input.tmp_image_id = tmpImages[0].data.id;\n        input.tmp_mask_id = tmpImages[1].data.id;\n        input.parent = image.id;\n        input.params.prompt = this.prompt || image.params.prompt;\n        input.params.negative_prompt =\n            this.negativePrompt || image.params.negative_prompt;\n        input.params.denoising_strength = 1;\n        input.count = this.count;\n        input.model = model;\n\n        const closestAspectRatio = getClosestAspectRatio(\n            selectionOverlay!.width,\n            selectionOverlay!.height\n        );\n        input.params.width = closestAspectRatio.width;\n        input.params.height = closestAspectRatio.height;\n        input.temporary = true;\n\n        let resp: ImageList | null = null;\n\n        try {\n            resp = (await api.createImage(input)).data;\n        } catch (err) {\n            console.error(\"Error creating images\", err);\n            this.notifyError(\"Failed to create image\");\n            this.state = \"select\";\n            return;\n        }\n        this.state = \"processing\";\n        this.updateProgress(0);\n        let newImages: Array<ImageWithData> | undefined = resp.images;\n        if (!newImages || newImages.length === 0) {\n            this.state = \"select\";\n            throw new Error(\"No images returned\");\n        }\n        let completed = false;\n        let lastUpdate = moment();\n\n        const onMessage = async (msg: string) => {\n            console.log(\"inpaint onMessage\", msg);\n            const img = JSON.parse(msg) as any;\n            if (\n                img.type === NOTIFICATION_IMAGE_UPDATED &&\n                img.status === StatusEnum.Completed\n            ) {\n                lastUpdate = moment();\n                for (let i = 0; i < newImages!.length; i++) {\n                    if (newImages![i].id === img.id) {\n                        const imageData = await this.loadImageData(\n                            api,\n                            newImages![i].id,\n                            maskData!,\n                            selectionOverlay!\n                        );\n                        newImages![i].data = imageData;\n                        newImages![i].status = StatusEnum.Completed;\n                    }\n                }\n            } else if (img.status === StatusEnum.Error) {\n                for (let i = 0; i < newImages!.length; i++) {\n                    if (newImages![i].id === img.id) {\n                        newImages![i].status = StatusEnum.Error;\n                    }\n                }\n            }\n        };\n        apisocket.addMessageListener(onMessage);\n        try {\n            let startTime = moment();\n            let lastCheck = moment();\n            while (!completed) {\n                let completeCount = 0;\n                await sleep(100);\n                // poll for completion\n                for (let i = 0; i < newImages!.length; i++) {\n                    if (\n                        newImages![i].status === StatusEnum.Completed ||\n                        newImages![i].status === StatusEnum.Error\n                    ) {\n                        completeCount++;\n                        continue;\n                    }\n                }\n                this.updateProgress(completeCount / newImages!.length);\n                if (completeCount === newImages!.length) {\n                    completed = true;\n                    continue;\n                }\n\n                // fallback if sockets don't catch one\n                if (moment().diff(lastCheck, \"seconds\") > 10) {\n                    // get list of ids that aren't completed and batch get them.\n                    const pendingIds = newImages\n                        .filter(\n                            (img) =>\n                                img.status === StatusEnum.Pending ||\n                                img.status === StatusEnum.Processing\n                        )\n                        .map((img) => img.id);\n                    console.log(\"Checking pending images\", pendingIds);\n                    const updatedImagesResult = await api.batchGetImages(\n                        undefined,\n                        {\n                            ids: pendingIds,\n                        }\n                    );\n                    const updatedImages = updatedImagesResult.data.images;\n                    const byId = updatedImages!.reduce((acc, img) => {\n                        acc[img.id] = img;\n                        return acc;\n                    }, {} as Record<string, APIImage>);\n                    for (let i = 0; i < newImages!.length; i++) {\n                        if (\n                            newImages![i].status === StatusEnum.Pending ||\n                            newImages![i].status === StatusEnum.Processing\n                        ) {\n                            const updated = byId[newImages![i].id];\n                            if (updated) {\n                                newImages![i].status = updated.status;\n                                if (updated.status === StatusEnum.Completed) {\n                                    lastUpdate = moment();\n                                    const imageData = await this.loadImageData(\n                                        api,\n                                        newImages![i].id,\n                                        maskData!,\n                                        selectionOverlay!\n                                    );\n                                    newImages![i].data = imageData;\n                                }\n                            }\n                        }\n                    }\n                    lastCheck = moment();\n                }\n                // timeout of 2 minutes\n                if (\n                    (lastUpdate.isAfter(startTime) &&\n                        moment().diff(lastUpdate, \"seconds\") > 30) ||\n                    moment().diff(startTime, \"minutes\") > 2\n                ) {\n                    completed = true;\n                }\n            }\n        } finally {\n            apisocket.removeMessageListener(onMessage);\n        }\n\n        // sort images by score descending\n        newImages!.sort((a, b) => {\n            return b.score - a.score;\n        });\n        newImages = newImages!.filter((img) => {\n            return img.status === StatusEnum.Completed;\n        });\n\n        this.imageData = [];\n        for (let i = 0; i < newImages!.length; i++) {\n            if (newImages![i].data) {\n                this.imageData.push(newImages![i].data as ImageData);\n            }\n        }\n        if (this.imageData.length === 0) {\n            this.state = \"select\";\n            this.notifyError(\"No images returned\");\n            return;\n        }\n        this.renderer.setEditImage(this.imageData[0]);\n        this.selectedImageDataIndex = 0;\n        this.selectedImageData = this.imageData[0];\n        this.state = \"confirm\";\n    }\n\n    onDirty(listener: (dirty: boolean) => void): void {\n        this.dirtyListener = listener;\n    }\n\n    select(direction: \"left\" | \"right\") {\n        if (direction == \"left\") {\n            this.selectedImageDataIndex--;\n            if (this.selectedImageDataIndex < -1) {\n                this.selectedImageDataIndex = this.imageData.length - 1;\n            }\n        }\n        if (direction == \"right\") {\n            this.selectedImageDataIndex++;\n            if (this.selectedImageDataIndex >= this.imageData.length) {\n                this.selectedImageDataIndex = -1;\n            }\n        }\n        if (this.selectedImageDataIndex === -1) {\n            this.selectedImageData = null;\n        } else {\n            this.selectedImageData =\n                this.imageData[this.selectedImageDataIndex];\n        }\n        this.renderer.setEditImage(this.selectedImageData);\n    }\n\n    onSaveImage(listener: (encodedImage: string, args?: any) => void): void {\n        this.saveListener = listener;\n    }\n\n    confirm() {\n        this.renderer.commitSelection();\n\n        this.imageData = [];\n        const encodedImage = this.renderer.getEncodedImage(null);\n        if (encodedImage && this.saveListener) {\n            this.saveListener(encodedImage, {\n                phrases: [this.prompt],\n                negative_phrases: [this.negativePrompt],\n                selection_overlay: this.renderer.getSelectionOverlay(),\n            });\n        }\n        this.dirty = false;\n        if (this.selectSupported()) {\n            this.state = \"select\";\n        } else {\n            this.state = \"erase\";\n        }\n    }\n\n    destroy(): boolean {\n        if (this.dirty) {\n            if (!window.confirm(\"Discard changes?\")) {\n                return false;\n            }\n        }\n        this.renderer.setCursor(undefined);\n        this.renderer.setEditImage(null);\n        this.worker.destroy();\n        return true;\n    }\n}\n\ninterface ControlsProps {\n    api: AIBrushApi;\n    apisocket: ApiSocket;\n    image: APIImage;\n    renderer: Renderer;\n    tool: InpaintTool;\n}\n\nexport const InpaintControls: FC<ControlsProps> = ({\n    api,\n    apisocket,\n    image,\n    renderer,\n    tool,\n}) => {\n    const [count, setCount] = useState(4);\n    const [prompt, setPrompt] = useState(image.params.prompt || \"\");\n    const [negativePrompt, setNegativePrompt] = useState(\n        image.params.negative_prompt || \"\"\n    );\n    const [state, setState] = useState<InpaintToolState>(tool.state);\n    const [progress, setProgress] = useState(0);\n    const [error, setError] = useState<string | null>(null);\n    const [brushSize, setBrushSize] = useState(10);\n    const [dirty, setDirty] = useState(false);\n    const [outpaint, setoutpaint] = useState<boolean | undefined>(\n        tool.getArgs().outpaint\n    );\n    const [model, setModel] = useState(\"Deliberate Inpainting\");\n    const [selectingModel, setSelectingModel] = useState(false);\n\n    useEffect(() => {\n        tool.updateArgs({\n            brushSize,\n        });\n    }, [brushSize]);\n\n    tool.onChangeState(setState);\n    tool.onProgress(setProgress);\n    tool.onError(setError);\n    tool.onDirty(setDirty);\n\n    const onSelectModel = (model: string) => {\n        setModel(model);\n        setSelectingModel(false);\n    };\n\n    if (state === \"uploading\" || state === \"processing\") {\n        return (\n            <div style={{ marginTop: \"16px\" }}>\n                <i className=\"fa fa-spinner fa-spin\"></i>&nbsp;{\" \"}\n                {state === \"uploading\" ? \"Uploading...\" : \"Inpainting...\"}\n                <br />\n                <ProgressBar progress={progress} />\n            </div>\n        );\n    }\n    return (\n        <div\n            style={{\n                marginTop: \"16px\",\n                marginBottom: \"8px\",\n                marginLeft: \"16px\",\n            }}\n        >\n            {error && (\n                <div className=\"alert alert-danger\" role=\"alert\">\n                    {/* dismiss button */}\n                    <button\n                        type=\"button\"\n                        className=\"close\"\n                        data-dismiss=\"alert\"\n                        aria-label=\"Close\"\n                        onClick={() => setError(null)}\n                    >\n                        <span aria-hidden=\"true\">&times;</span>\n                    </button>\n                    {error}\n                </div>\n            )}\n            {state === \"select\" && (\n                <>\n                    <p>\n                        {/* info icon */}\n                        <i className=\"fa fa-info-circle\"></i>&nbsp; Move the\n                        selection rectangle to the area that you want to\n                        inpaint. For outpainting, try zooming out.\n                    </p>\n                    <div className=\"form-group\">\n                        {/* allow outpaint checkbox */}\n                        <div className=\"form-check\">\n                            <input\n                                className=\"form-check-input\"\n                                type=\"checkbox\"\n                                id=\"allowoutpaint\"\n                                checked={!!outpaint}\n                                onChange={(e) => {\n                                    setoutpaint(e.target.checked);\n                                    tool.updateArgs({\n                                        outpaint: e.target.checked,\n                                    });\n                                }}\n                            />\n                            <label\n                                className=\"form-check-label\"\n                                htmlFor=\"allowoutpaint\"\n                            >\n                                Allow outpainting\n                            </label>\n                        </div>\n                    </div>\n                </>\n            )}\n\n            {state === \"erase\" && (\n                <>\n                    <p>\n                        {/* info icon */}\n                        <i className=\"fa fa-info-circle\"></i>&nbsp; Erase the\n                        area that you want to inpaint.\n                    </p>\n                    <div className=\"form-group\">\n                        <label style={{ width: \"100%\" }}>\n                            Brush size\n                            <small\n                                className=\"form-text text-muted\"\n                                style={{ float: \"right\" }}\n                            >\n                                {brushSize}px\n                            </small>\n                        </label>\n                        <input\n                            type=\"range\"\n                            className=\"form-control-range\"\n                            min=\"1\"\n                            max=\"100\"\n                            value={brushSize}\n                            onChange={(e) =>\n                                setBrushSize(parseInt(e.target.value))\n                            }\n                        />\n                    </div>\n                </>\n            )}\n\n            {state === \"inpaint\" && (\n                <>\n                    <p>\n                        {/* info icon */}\n                        <i className=\"fa fa-info-circle\"></i>&nbsp; Confirm the\n                        parameters below and continue\n                    </p>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"prompt\">\n                            Prompt&nbsp;\n                            <ResetToDefaultIcon onClick={() => setPrompt(image.params.prompt || \"\")} />\n                        </label>\n                        <input\n                            type=\"text\"\n                            className=\"form-control\"\n                            id=\"prompt\"\n                            value={prompt}\n                            onChange={(e) => {\n                                setPrompt(e.target.value);\n                            }}\n                        />\n                        <small className=\"form-text text-muted\">\n                            Customize the text prompt here\n                        </small>\n                    </div>\n                    {/* negative prompt */}\n                    <div className=\"form-group\">\n                        <label htmlFor=\"negativeprompt\">\n                            Negative prompt&nbsp;\n                            <ResetToDefaultIcon onClick={() => setNegativePrompt(image.params.negative_prompt || \"\")} />\n                        </label>\n                        <input\n                            type=\"text\"\n                            className=\"form-control\"\n                            value={negativePrompt}\n                            onChange={(e) => {\n                                setNegativePrompt(e.target.value);\n                            }}\n                        />\n                        <small className=\"form-text text-muted\">\n                            Customize the negative text prompt here\n                        </small>\n                    </div>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"count\">Count: {count}</label>\n                        <input\n                            type=\"range\"\n                            className=\"form-control-range\"\n                            id=\"count\"\n                            min=\"1\"\n                            max=\"10\"\n                            step=\"1\"\n                            value={count}\n                            onChange={(e) => {\n                                setCount(parseInt(e.target.value));\n                            }}\n                        />\n                        <small className=\"form-text text-muted\">\n                            Number of inpaint options\n                        </small>\n                    </div>\n                    {/* select model dropdown */}\n                    {/* options: stable_diffusion_inpainting, \"Epic Diffusion\", \"Deliberate\" */}\n                    <div className=\"form-group\">\n                        <label htmlFor=\"model\">Model</label>\n                        <div>\n                            <button\n                                type=\"button\"\n                                className=\"btn btn-secondary light-button\"\n                                onClick={() => setSelectingModel(true)}\n                            >\n                                {model}&nbsp;\n                                <i className=\"fas fa-caret-down\"></i>\n                            </button>\n                        </div>\n                        <small className=\"form-text text-muted\">\n                            Select the inpaint model\n                        </small>\n                    </div>\n                    <div className=\"form-group\">\n                        <CostIndicator imagesCost={count} />\n                    </div>\n                </>\n            )}\n\n            {state === \"confirm\" && (\n                <>\n                    <p>\n                        Use the <i className=\"fa fa-arrow-left\"></i> and{\" \"}\n                        <i className=\"fa fa-arrow-right\"></i> buttons to\n                        navigate between the inpaint options\n                    </p>\n                </>\n            )}\n\n            <div className=\"form-group\">\n                {(dirty ||\n                    state === \"confirm\" ||\n                    (state == \"erase\" && tool.selectSupported()) ||\n                    state == \"inpaint\") && (\n                    <button\n                        style={{ marginRight: \"8px\" }}\n                        className=\"btn btn-primary btn-sm\"\n                        onClick={() => {\n                            tool.cancel();\n                        }}\n                    >\n                        {/* cancel icon */}\n                        <i className=\"fa fa-times\"></i>&nbsp; Revert\n                    </button>\n                )}\n\n                {state === \"confirm\" && (\n                    <>\n                        <button\n                            className=\"btn btn-primary btn-sm\"\n                            onClick={() => tool.confirm()}\n                            style={{ marginRight: \"8px\" }}\n                        >\n                            {/* save icon */}\n                            <i className=\"fa fa-save\"></i>&nbsp; Save\n                        </button>\n                    </>\n                )}\n                {state == \"select\" && (\n                    <button\n                        style={{ marginRight: \"8px\" }}\n                        type=\"button\"\n                        className=\"btn btn-primary btn-sm\"\n                        onClick={() => (tool.state = \"erase\")}\n                    >\n                        <i className=\"fa fa-eraser\"></i>&nbsp; Continue\n                    </button>\n                )}\n                {state == \"erase\" && (\n                    <button\n                        style={{ marginRight: \"8px\" }}\n                        type=\"button\"\n                        className=\"btn btn-primary btn-sm\"\n                        onClick={() => (tool.state = \"inpaint\")}\n                    >\n                        <i className=\"fa fa-paint-brush\"></i>&nbsp; Continue\n                    </button>\n                )}\n                {state === \"inpaint\" && (\n                    <button\n                        style={{ marginRight: \"8px\" }}\n                        className=\"btn btn-primary btn-sm\"\n                        onClick={() => {\n                            tool.updateArgs({\n                                count,\n                                prompt,\n                                negativePrompt,\n                            });\n                            tool.submit(api, apisocket, image, model);\n                        }}\n                    >\n                        {/* paint icon */}\n                        <i className=\"fa fa-paint-brush\"></i>&nbsp; Inpaint\n                    </button>\n                )}\n            </div>\n            <Prompt\n                when={dirty}\n                message=\"Are you sure you want to leave? Your changes will be lost.\"\n            />\n            {selectingModel && (\n                <ModelSelector\n                    api={api}\n                    onCancel={() => setSelectingModel(false)}\n                    onSelectModel={onSelectModel}\n                    initialSelectedModel={model}\n                    inpainting={true}\n                />\n            )}\n        </div>\n    );\n};\n","import React, { useState, useEffect, useRef } from \"react\";\nimport { useParams, useHistory } from \"react-router-dom\";\nimport axios, { AxiosInstance } from \"axios\";\nimport * as uuid from \"uuid\";\n\nimport { AIBrushApi } from \"../../client\";\nimport { getUpscaleLevel } from \"../../lib/upscale\";\nimport \"./ImageEditor.css\";\nimport { createRenderer, Renderer } from \"./renderer\";\nimport { Tool, BaseTool } from \"./tool\";\nimport { SelectionTool, Controls as SelectionControls } from \"./selection-tool\";\nimport { EnhanceTool, EnhanceControls } from \"./enhance-tool\";\nimport {\n    PencilTool,\n    Controls as PencilControls,\n    defaultColors,\n} from \"./pencil-tool\";\nimport { SmudgeTool, SmudgeControls } from \"./smudge-tool\";\nimport { ImportExportControls } from \"./import-export\";\nimport { InpaintControls, InpaintTool } from \"./inpaint-tool\";\nimport { AugmentControls } from \"./augment-tool\";\nimport { defaultArgs } from \"../../components/ImagePrompt\";\nimport { ApiSocket } from \"../../lib/apisocket\";\nimport {\n    createEncodedThumbnail,\n    encodedImageToBlob,\n    uploadBlob,\n} from \"../../lib/imageutil\";\nimport { BusyModal } from \"../../components/BusyModal\";\nimport { LocalImage, LocalImagesStore } from \"../../lib/localImagesStore\";\nimport { render } from \"@testing-library/react\";\n\ninterface CanPreventDefault {\n    preventDefault: () => void;\n}\n\ninterface Props {\n    api: AIBrushApi;\n    apisocket: ApiSocket;\n    assetsUrl: string;\n    localImages: LocalImagesStore;\n}\n\ninterface ToolConfig {\n    name: string;\n    iconClass: string;\n    constructor: (r: Renderer) => Tool;\n    renderControls: (t: Tool, renderer: Renderer) => JSX.Element;\n    defaultArgs: any;\n}\n\nexport const anonymousClient = axios.create();\ndelete anonymousClient.defaults.headers.common[\"Authorization\"];\n\nexport const ImageEditor: React.FC<Props> = ({\n    api,\n    apisocket,\n    localImages,\n}) => {\n    const [showSelectionControls, setShowSelectionControls] = useState(false);\n    const tools: Array<ToolConfig> = [\n        {\n            name: \"inpaint\",\n            iconClass: \"fas fa-paint-brush\",\n            constructor: (r: Renderer) => new InpaintTool(r),\n            defaultArgs: {},\n            renderControls: (t: Tool, renderer: Renderer) => {\n                t.onShowSelectionControls(setShowSelectionControls);\n                return (\n                    <InpaintControls\n                        tool={t as InpaintTool}\n                        renderer={renderer}\n                        api={api}\n                        apisocket={apisocket}\n                        image={image!}\n                    />\n                );\n            },\n        },\n        {\n            name: \"enhance\",\n            iconClass: \"fas fa-magic\",\n            constructor: (r: Renderer) => new EnhanceTool(r),\n            defaultArgs: {\n                variationStrength: 0.75,\n            },\n            renderControls: (t: Tool, renderer: Renderer) => {\n                t.onShowSelectionControls(setShowSelectionControls);\n                return (\n                    <EnhanceControls\n                        tool={t as EnhanceTool}\n                        renderer={renderer}\n                        api={api}\n                        apisocket={apisocket}\n                        image={image!}\n                    />\n                );\n            },\n        },\n        {\n            name: \"pencil\",\n            iconClass: \"fas fa-pencil-alt\",\n            constructor: (r: Renderer) => new PencilTool(r, \"base\"),\n            defaultArgs: {},\n            renderControls: (t: Tool, renderer: Renderer) => {\n                return (\n                    <PencilControls\n                        tool={t as PencilTool}\n                        renderer={renderer}\n                        colors={defaultColors}\n                    />\n                );\n            },\n        },\n        {\n            name: \"smudge\",\n            // finger icon\n            iconClass: \"fas fa-hand-pointer\",\n            constructor: (r: Renderer) => new SmudgeTool(r),\n            defaultArgs: {},\n            renderControls: (t: Tool, renderer: Renderer) => {\n                return (\n                    <SmudgeControls\n                        tool={t as SmudgeTool}\n                        renderer={renderer}\n                    />\n                );\n            },\n        },\n        {\n            name: \"import-export\",\n            iconClass: \"fas fa-file-import\",\n            constructor: (r: Renderer) => new BaseTool(r, \"import-export\"),\n            defaultArgs: {},\n            renderControls: (t: Tool, renderer: Renderer) => {\n                return (\n                    <ImportExportControls\n                        renderer={renderer}\n                        tool={t as BaseTool}\n                        api={api}\n                    />\n                );\n            },\n        },\n        {\n            name: \"augment\",\n            iconClass: \"fas fa-image\",\n            constructor: (r: Renderer) => new BaseTool(r, \"augment\"),\n            defaultArgs: {},\n            renderControls: (t: Tool, renderer: Renderer) => {\n                return (\n                    <AugmentControls\n                        renderer={renderer}\n                        tool={t as BaseTool}\n                        api={api}\n                        image={image!}\n                    />\n                );\n            },\n        },\n    ];\n\n    const [image, setImage] = useState<LocalImage | null>(null);\n    const [renderer, setRenderer] = useState<Renderer | null>(null);\n    const [tool, setTool] = useState<Tool | null>(null);\n    const [toolConfig, setToolConfig] = useState<ToolConfig | null>(null);\n    const [canUndo, setCanUndo] = useState(false);\n    const [canRedo, setCanRedo] = useState(false);\n    const [busyMessage, setBusyMessage] = useState<string | null>(null);\n\n    const { id } = useParams<{ id: string }>();\n    const history = useHistory();\n\n    const canvasRef = useRef<HTMLCanvasElement>(null);\n\n    const onSelectTool = (toolconfig: ToolConfig) => {\n        if (renderer) {\n            if (tool) {\n                if (!tool.destroy()) {\n                    return;\n                }\n            }\n            const newTool = toolconfig.constructor(renderer);\n            setTool(newTool);\n            setToolConfig(toolconfig);\n            newTool.onSaveImage((encodedImage, args = {}) => {\n                console.log(\"Saving image...\");\n                saveNewImage(encodedImage, args);\n            });\n        }\n    };\n\n    /**\n     * Saves a new image to the server\n     *\n     * @param encodedImage base64 encoded image\n     * @param newArgs may contain new phrases and negative phrases\n     */\n    const saveNewImage = async (encodedImage: string, newArgs: any) => {\n        if (!image || !encodedImage) {\n            throw new Error(\"Cannot save new image without existing image\");\n        }\n        if (!renderer) {\n            throw new Error(\"Cannot save new image without renderer\");\n        }\n        setBusyMessage(\"Saving image...\");\n        try {\n            const newImage: LocalImage = {\n                ...image,\n                params: {\n                    ...image.params,\n                    width: renderer!.getWidth() as any,\n                    height: renderer!.getHeight() as any,\n                },\n                id: uuid.v4(),\n                imageData: `data:image/png;base64,${encodedImage}`,\n            };\n            await localImages.saveImage(newImage);\n\n            // switch url and state to new image\n            setImage(newImage);\n            history.replace(`/image-editor/${newImage.id}`);\n        } finally {\n            setBusyMessage(null);\n        }\n    };\n\n    useEffect(() => {\n        if (image) {\n            return;\n        }\n\n        async function loadImage() {\n            const localImage = await localImages.getImage(id);\n            let imageSrc = \"\";\n            if (localImage) {\n                setImage(localImage);\n                imageSrc = localImage.imageData!;\n            } else {\n                const image = (await api.getImage(id)).data;\n                setImage(image);\n                const download_urls = await api.getImageDownloadUrls(id);\n                // Loading up data as binary, base64 encoding into image url\n                // bypasses browser security nonsense about cross-domain images\n                const resp = await anonymousClient.get(\n                    download_urls.data.image_url!,\n                    {\n                        responseType: \"arraybuffer\",\n                    }\n                );\n                const binaryImageData = Buffer.from(resp.data, \"binary\");\n                const base64ImageData = binaryImageData.toString(\"base64\");\n                imageSrc = `data:image/png;base64,${base64ImageData}`;\n            }\n\n            const imageElement = new Image();\n            imageElement.src = imageSrc;\n            imageElement.onload = () => {\n                if (!canvasRef.current) {\n                    console.error(\"Failed to get canvas\");\n                    return;\n                }\n                const renderer = createRenderer(canvasRef.current);\n                renderer.setBaseImage(imageElement);\n                setRenderer(renderer);\n            };\n        }\n        loadImage();\n    }, [image, id]);\n\n    // this covers the case that an image is upscaled to max, the upscale tool needs to\n    // be hidden and deselected.\n    useEffect(() => {\n        if (\n            image &&\n            tool &&\n            tool.name == \"upscale\" &&\n            image.params.width! * image.params.height! >= 2048 * 2048\n        ) {\n            onSelectTool(tools[0]);\n        }\n    }, [image, tool]);\n\n    useEffect(() => {\n        if (renderer) {\n            onSelectTool(tools[0]);\n            renderer.onSnapshot(() => {\n                setCanUndo(renderer.canUndo());\n                setCanRedo(renderer.canRedo());\n            });\n        }\n    }, [renderer]);\n\n    useEffect(() => {\n        if (canvasRef.current) {\n            const listener = (e: WheelEvent) => {\n                if (tool) {\n                    e.preventDefault();\n                    tool.onWheel(e);\n                }\n            };\n            canvasRef.current.addEventListener(\"wheel\", listener);\n            return () => {\n                canvasRef.current?.removeEventListener(\"wheel\", listener);\n            };\n        }\n    }, [tool, canvasRef.current]);\n\n    // implement a useEffect hook that resizes the canvas (renderer.updateCanvasSize(width, height)) when the window is resized, and also on initial load\n    // the canvas size should be set based on the current screen size\n    useEffect(() => {\n        if (renderer) {\n            const listener = () => {\n                let width = window.innerWidth * 0.85;\n                let height = window.innerHeight;\n                if (window.innerWidth <= 992) {\n                    width = window.innerWidth;\n                    height = window.innerHeight * 0.85;\n                }\n                renderer.updateCanvasSize(width, height);\n                renderer.resetView();\n            };\n            window.addEventListener(\"resize\", listener);\n            listener();\n            return () => {\n                window.removeEventListener(\"resize\", listener);\n            };\n        }\n    }, [renderer]);\n\n    function renderTool(t: ToolConfig) {\n        if (!image) {\n            return null;\n        }\n        let buttonClass = `btn btn-secondary light-button image-editor-tool-button`;\n        const isSelected = tool && tool.name == t.name;\n        if (isSelected) {\n            buttonClass = `btn btn-primary image-editor-tool-button`;\n        }\n        return (\n            <>\n                <button\n                    style={{ margin: \"4px\" }}\n                    className={buttonClass}\n                    onClick={() => onSelectTool(t)}\n                >\n                    <i className={t.iconClass}></i>\n                </button>\n                {/* capitalize tool name */}\n                {/* <label>\n                    {t.name.charAt(0).toUpperCase() + t.name.slice(1)}\n                </label>\n                {isSelected && t.renderControls(tool!, renderer!)} */}\n            </>\n        );\n    }\n\n    function preventDefault(e: CanPreventDefault): boolean {\n        e.preventDefault();\n        return true;\n    }\n\n    return (\n        <>\n            <div className=\"row\">\n                <div className=\"col-12\">\n                    <h1 style={{ fontSize: \"40px\", textAlign: \"left\" }}>\n                        <i\n                            style={{ cursor: \"pointer\" }}\n                            onClick={() => history.push(`/images/${id}`)}\n                            className=\"fas fa-chevron-left\"\n                        ></i>\n                        &nbsp; AI Edit\n                    </h1>\n                </div>\n            </div>\n            <div\n                className=\"row\"\n                style={{ marginTop: \"32px\", paddingBottom: \"120px\" }}\n            >\n                <div\n                    className=\"col-lg-3\"\n                    style={{ textAlign: \"left\", marginBottom: \"8px\" }}\n                >\n                    {renderer && (\n                        <>\n                            <div style={{marginBottom: \"16px\"}}>{tools.map((t) => renderTool(t))}</div>\n                            {tool && toolConfig && (\n                                <>\n                                    {/* capitalize tool name */}\n                                    <h4 style={{marginLeft: \"16px\"}}>\n                                        {tool.name.charAt(0).toUpperCase() +\n                                            tool.name.slice(1)}\n                                    </h4>\n                                    {toolConfig.renderControls(\n                                        tool!,\n                                        renderer!\n                                    )}\n                                </>\n                            )}\n                            {(canRedo || canUndo) && (\n                                <div className=\"form-group\">\n                                    <div className=\"btn-group\">\n                                        <button\n                                            className=\"btn btn-primary image-popup-button\"\n                                            disabled={!renderer || !canUndo}\n                                            onClick={() =>\n                                                renderer && renderer.undo()\n                                            }\n                                        >\n                                            {/* undo */}\n                                            <i className=\"fas fa-undo\"></i>\n                                        </button>\n                                        <button\n                                            className=\"btn btn-primary image-popup-button\"\n                                            disabled={!renderer || !canRedo}\n                                            onClick={() =>\n                                                renderer && renderer.redo()\n                                            }\n                                        >\n                                            <i className=\"fas fa-redo\"></i>\n                                        </button>\n                                    </div>\n                                </div>\n                            )}\n                        </>\n                    )}\n                </div>\n                <div className=\"col-lg-9\">\n                    <div style={{ verticalAlign: \"middle\" }}>\n                        <div>\n                            <canvas\n                                style={{\n                                    cursor: \"none\",\n                                    touchAction: \"none\",\n                                    userSelect: \"none\",\n                                }}\n                                width={768}\n                                height={512}\n                                ref={canvasRef}\n                                className=\"image-editor-canvas\"\n                                onMouseDown={(e) =>\n                                    preventDefault(e) &&\n                                    tool &&\n                                    tool.onMouseDown(e)\n                                }\n                                onMouseMove={(e) =>\n                                    preventDefault(e) &&\n                                    tool &&\n                                    tool.onMouseMove(e)\n                                }\n                                onMouseUp={(e) =>\n                                    preventDefault(e) &&\n                                    tool &&\n                                    tool.onMouseUp(e)\n                                }\n                                onMouseLeave={(e) =>\n                                    preventDefault(e) &&\n                                    tool &&\n                                    tool.onMouseLeave(e)\n                                }\n                                onTouchStart={(e) =>\n                                    preventDefault(e) &&\n                                    tool &&\n                                    tool.onTouchStart(e)\n                                }\n                                onTouchMove={(e) =>\n                                    preventDefault(e) &&\n                                    tool &&\n                                    tool.onTouchMove(e)\n                                }\n                                onTouchEnd={(e) =>\n                                    preventDefault(e) &&\n                                    tool &&\n                                    tool.onTouchEnd(e)\n                                }\n                            ></canvas>\n                            {showSelectionControls && (\n                                <>\n                                    <button\n                                        className=\"btn btn-secondary canvas-select-left\"\n                                        onClick={() => tool!.select(\"left\")}\n                                    >\n                                        <i className=\"fas fa-chevron-left\"></i>\n                                    </button>\n                                    <button\n                                        className=\"btn btn-secondary canvas-select-right\"\n                                        onClick={() => tool!.select(\"right\")}\n                                    >\n                                        <i className=\"fas fa-chevron-right\"></i>\n                                    </button>\n                                </>\n                            )}\n                        </div>\n                    </div>\n                    <div className=\"row\">\n                        <button\n                            className=\"btn btn-primary\"\n                            // center horizontally\n                            style={{\n                                position: \"absolute\",\n                                left: \"50%\",\n                                transform: \"translate(-50%, 0)\",\n                            }}\n                            onClick={() => {\n                                if (renderer) {\n                                    renderer.resetView();\n                                }\n                            }}\n                        >\n                            {/* reset zoom */}\n                            <i className=\"fas fa-search-plus\"></i>&nbsp; Reset\n                            View\n                        </button>\n                        {/* redo */}\n                    </div>\n                    {/* vertically center button within the div */}\n                </div>\n            </div>\n            {busyMessage && (\n                <BusyModal show={true} title=\"Please Wait\">\n                    {busyMessage}\n                </BusyModal>\n            )}\n        </>\n    );\n};\n","import { Cursor, Rect } from \"./models\";\n\nconst maxSnapshots = 10;\n\nexport class Renderer {\n    private undoStack: ImageData[] = [];\n    private redoStack: ImageData[] = [];\n    private currentSnapshot: ImageData | undefined;\n\n    private backgroundLayer: HTMLCanvasElement;\n    private baseImageLayer: HTMLCanvasElement;\n    private editLayer: HTMLCanvasElement;\n    private maskLayer: HTMLCanvasElement | undefined;\n    // private overlayLayer: HTMLCanvasElement;\n\n    private selectionOverlay: Rect | undefined;\n    private selectionOverlayPreview: Rect | undefined;\n    private hasSelection: boolean = false;\n    private cursor: Cursor | undefined;\n\n    private zoom: number;\n    private offsetX: number;\n    private offsetY: number;\n    private width = 0;\n    private height = 0;\n\n    private snapshotListener: (() => void) | null = null;\n\n    constructor(private readonly canvas: HTMLCanvasElement) {\n        // invisible canvas elements\n        this.backgroundLayer = document.createElement(\"canvas\");\n        this.backgroundLayer.width = canvas.width;\n        this.backgroundLayer.height = canvas.height;\n        this.baseImageLayer = document.createElement(\"canvas\");\n        this.editLayer = document.createElement(\"canvas\");\n        // this.overlayLayer = document.createElement(\"canvas\");\n\n        this.zoom = 1;\n        this.offsetX = 0;\n        this.offsetY = 0;\n    }\n\n    updateCanvasSize(width: number, height: number) {\n        this.canvas.width = width;\n        this.canvas.height = height;\n        this.backgroundLayer.width = width;\n        this.backgroundLayer.height = height;\n        this.initializeBackgroundLayer();\n        this.render();\n    }\n\n    undo(allowRedo: boolean = true) {\n        if (this.undoStack.length > 0 && this.currentSnapshot) {\n            const imageData = this.undoStack.pop()!;\n            if (allowRedo) {\n                this.redoStack.push(this.currentSnapshot);\n            }\n            this.currentSnapshot = imageData;\n            // set as base image\n            const ctx = this.baseImageLayer.getContext(\"2d\");\n            if (ctx) {\n                ctx.clearRect(\n                    0,\n                    0,\n                    this.baseImageLayer.width,\n                    this.baseImageLayer.height\n                );\n                ctx.putImageData(imageData, 0, 0);\n                this.render();\n            }\n            this.notifySnapshotListener();\n        }\n    }\n\n    redo() {\n        if (this.redoStack.length > 0 && this.currentSnapshot) {\n            this.undoStack.push(this.currentSnapshot);\n            const imageData = this.redoStack.pop()!;\n            this.currentSnapshot = imageData;\n\n            // set as base image\n            const ctx = this.baseImageLayer.getContext(\"2d\");\n            if (ctx) {\n                ctx.putImageData(imageData, 0, 0);\n                this.render();\n            }\n            this.notifySnapshotListener();\n        }\n    }\n\n    clearRedoStack() {\n        this.redoStack = [];\n        this.notifySnapshotListener();\n    }\n\n    canUndo(): boolean {\n        return !this.hasSelection && this.undoStack.length > 0;\n    }\n\n    canRedo(): boolean {\n        return !this.hasSelection && this.redoStack.length > 0;\n    }\n\n    onSnapshot(listener: () => void) {\n        this.snapshotListener = listener;\n    }\n\n    snapshot() {\n        const ctx = this.baseImageLayer.getContext(\"2d\");\n        if (ctx) {\n            const snapshot = ctx.getImageData(\n                0,\n                0,\n                this.baseImageLayer.width,\n                this.baseImageLayer.height\n            );\n            if (this.currentSnapshot) {\n                this.undoStack.push(this.currentSnapshot);\n                this.currentSnapshot = snapshot;\n                if (this.redoStack.length > 0) {\n                    this.redoStack = [];\n                }\n                if (this.undoStack.length > maxSnapshots) {\n                    this.undoStack.shift();\n                }\n            } else {\n                this.currentSnapshot = snapshot;\n            }\n\n            this.notifySnapshotListener();\n        }\n    }\n\n    private notifySnapshotListener() {\n        if (this.snapshotListener) {\n            this.snapshotListener();\n        }\n    }\n\n    render() {\n        const context = this.canvas.getContext(\"2d\");\n        if (context) {\n            context.clearRect(0, 0, this.width, this.height);\n            context.drawImage(this.backgroundLayer, 0, 0);\n            // apply zoom and offset\n            context.setTransform(\n                this.zoom,\n                0,\n                0,\n                this.zoom,\n                this.offsetX * this.zoom,\n                this.offsetY * this.zoom\n            );\n            // context.drawImage(this.backgroundLayer, 0, 0);\n            context.drawImage(this.baseImageLayer, 0, 0);\n            context.drawImage(this.editLayer, 0, 0);\n            // draw this.maskLayer at 0.3 opacity\n            if (this.maskLayer) {\n                context.globalAlpha = 0.3;\n                context.drawImage(this.maskLayer, 0, 0);\n                context.globalAlpha = 1;\n            }\n\n            // context.drawImage(this.overlayLayer, 0, 0);\n            this.drawOverlay(context, this.width, this.height);\n            context.setTransform(1, 0, 0, 1, 0, 0);\n        }\n    }\n\n    createMask() {\n        this.maskLayer = document.createElement(\"canvas\");\n        this.maskLayer.width = this.width;\n        this.maskLayer.height = this.height;\n        this.resetMask();\n    }\n\n    resetMask() {\n        if (this.maskLayer) {\n            const ctx = this.maskLayer.getContext(\"2d\");\n            if (ctx) {\n                ctx.fillStyle = \"#000000\";\n                ctx.fillRect(0, 0, this.width, this.height);\n            }\n            this.render();\n        }\n    }\n\n    invertMask() {\n        if (this.maskLayer) {\n            const ctx = this.maskLayer.getContext(\"2d\");\n            if (ctx) {\n                // change black to white, white to black\n                const imageData = ctx.getImageData(\n                    0,\n                    0,\n                    this.width,\n                    this.height\n                );\n                for (let i = 0; i < imageData.data.length; i += 4) {\n                    imageData.data[i] = 255 - imageData.data[i];\n                    imageData.data[i + 1] = 255 - imageData.data[i + 1];\n                    imageData.data[i + 2] = 255 - imageData.data[i + 2];\n                }\n                ctx.putImageData(imageData, 0, 0);\n            }\n            this.render();\n        }\n    }\n\n    deleteMask() {\n        this.maskLayer = undefined;\n        this.render();\n    }\n\n    isMasked() {\n        return this.maskLayer !== undefined;\n    }\n\n    getCanvas(): HTMLCanvasElement {\n        return this.canvas;\n    }\n\n    private initializeBackgroundLayer() {\n        // checkered background\n        // #DEDEDE\n        // #FFFFFF\n        // 10x10 pixel squares\n        const ctx = this.backgroundLayer.getContext(\"2d\");\n        if (ctx) {\n            const pattern = ctx.createPattern(\n                this.createCheckeredPattern(20, 20, \"#808080\", \"#AAAAAA\"),\n                \"repeat\"\n            );\n            if (pattern) {\n                ctx.fillStyle = pattern;\n                ctx.fillRect(\n                    0,\n                    0,\n                    this.backgroundLayer.width,\n                    this.backgroundLayer.height\n                );\n            }\n        }\n    }\n\n    private createCheckeredPattern(\n        width: number,\n        height: number,\n        color1: string,\n        color2: string\n    ): HTMLCanvasElement {\n        const canvas = document.createElement(\"canvas\");\n        canvas.width = width;\n        canvas.height = height;\n        const ctx = canvas.getContext(\"2d\");\n        if (ctx) {\n            ctx.fillStyle = color1;\n            ctx.fillRect(0, 0, width, height);\n            ctx.fillStyle = color2;\n            ctx.fillRect(0, 0, width / 2, height / 2);\n            ctx.fillRect(width / 2, height / 2, width / 2, height / 2);\n        }\n        return canvas;\n    }\n\n    setBaseImage(\n        image: HTMLImageElement | HTMLCanvasElement,\n        updateSelectionOverlay = true\n    ) {\n        const context = this.baseImageLayer.getContext(\"2d\");\n        if (context) {\n            // set size of all layers\n            // TODO: adapt for an always-square canvas\n            this.initializeBackgroundLayer();\n\n            this.baseImageLayer.width = image.width;\n            this.baseImageLayer.height = image.height;\n            this.editLayer.width = image.width;\n            this.editLayer.height = image.height;\n            this.maskLayer = undefined;\n            // set image size\n            this.width = image.width;\n            this.height = image.height;\n            // this.canvas.width = image.width;\n            // this.canvas.height = image.height;\n            context.drawImage(image, 0, 0);\n\n            if (updateSelectionOverlay) {\n                // set 512x512 selection overlay at the center of the image\n                this.setSelectionOverlay({\n                    x: (image.width - 512) / 2,\n                    y: (image.height - 512) / 2,\n                    width: 512,\n                    height: 512,\n                });\n            }\n            this.resetView();\n            // this.render(); // already called by updateZoomAndOffset\n            this.snapshot();\n        }\n    }\n\n    resetView() {\n        // Determine the aspect ratios of the image and canvas\n        const imageAspectRatio = this.width / this.height;\n        const canvasAspectRatio = this.canvas.width / this.canvas.height;\n    \n        let zoom, offsetX, offsetY;\n    \n        if (imageAspectRatio > canvasAspectRatio) {\n            // The image is wider than the canvas, so we should fit the image to the width of the canvas\n            zoom = this.canvas.width / this.width;\n            offsetX = 0;\n            // Calculate the amount of empty space in the height (in image coordinate space), and divide by 2 to center\n            offsetY = (this.height - (this.canvas.height / zoom)) / -2;\n        } else {\n            // The image is taller or equal aspect ratio to the canvas, so we should fit the image to the height of the canvas\n            zoom = this.canvas.height / this.height;\n            offsetY = 0;\n            // Calculate the amount of empty space in the width (in image coordinate space), and divide by 2 to center\n            offsetX = (this.width - (this.canvas.width / zoom)) / -2;\n        }\n    \n        this.updateZoomAndOffset(zoom, offsetX, offsetY);\n    }\n    \n    \n\n    setEditImage(imageData: ImageData | null) {\n        this.hasSelection = !!imageData;\n        const context = this.editLayer.getContext(\"2d\");\n        if (context && this.selectionOverlay) {\n            context.clearRect(\n                0,\n                0,\n                this.editLayer.width,\n                this.editLayer.height\n            );\n            if (imageData) {\n                context.putImageData(\n                    imageData,\n                    this.selectionOverlay.x,\n                    this.selectionOverlay.y\n                );\n            }\n            // edit image makes the selection rect and preview disappear\n            // so redraw the overlay\n            this.hasSelection = !!imageData;\n            this.render();\n        }\n        this.notifySnapshotListener();\n    }\n\n    private drawOverlay(\n        context: CanvasRenderingContext2D,\n        width: number,\n        height: number\n    ) {\n        const lineWidth = Math.max(this.width / 512, this.height / 512);\n        if (context) {\n            context.strokeStyle = \"white\";\n            context.lineWidth = lineWidth;\n            context.strokeRect(0, 0, width, height);\n\n            if (!this.hasSelection && this.selectionOverlay) {\n                context.strokeStyle = \"white\";\n                context.lineWidth = lineWidth;\n                context.strokeRect(\n                    this.selectionOverlay.x,\n                    this.selectionOverlay.y,\n                    this.selectionOverlay.width,\n                    this.selectionOverlay.height\n                );\n            }\n            if (!this.hasSelection && this.selectionOverlayPreview) {\n                context.strokeStyle = \"cyan\";\n                context.lineWidth = lineWidth;\n                context.strokeRect(\n                    this.selectionOverlayPreview.x,\n                    this.selectionOverlayPreview.y,\n                    this.selectionOverlayPreview.width,\n                    this.selectionOverlayPreview.height\n                );\n            }\n            if (this.cursor) {\n                if (this.cursor.type === \"circle\") {\n                    context.lineWidth = lineWidth;\n                    context.strokeStyle = this.cursor.color;\n                    // context.globalAlpha = 0.5;\n                    context.beginPath();\n                    context.arc(\n                        this.cursor.x,\n                        this.cursor.y,\n                        this.cursor.radius,\n                        0,\n                        2 * Math.PI\n                    );\n                    context.stroke();\n                } else if (this.cursor.type === \"circle-fill\") {\n                    context.fillStyle = this.cursor.color;\n                    context.strokeStyle = this.cursor.color;\n                    // context.lineWidth = lineWidth;\n                    // context.globalAlpha = 0.5;\n                    context.beginPath();\n                    context.arc(\n                        this.cursor.x,\n                        this.cursor.y,\n                        this.cursor.radius,\n                        0,\n                        2 * Math.PI\n                    );\n                    context.stroke();\n                    // set alpha to 0.5 and fill\n                    context.globalAlpha = 0.5;\n                    context.beginPath();\n                    context.arc(\n                        this.cursor.x,\n                        this.cursor.y,\n                        this.cursor.radius,\n                        0,\n                        2 * Math.PI\n                    );\n                    context.fill();\n                    context.globalAlpha = 1;\n                } else if (this.cursor.type == \"crosshairs\") {\n                    // draw crosshairs based on cursor radius\n                    context.strokeStyle = this.cursor.color;\n                    context.lineWidth = lineWidth;\n                    context.beginPath();\n                    context.moveTo(\n                        this.cursor.x - this.cursor.radius,\n                        this.cursor.y\n                    );\n                    context.lineTo(\n                        this.cursor.x + this.cursor.radius,\n                        this.cursor.y\n                    );\n                    context.moveTo(\n                        this.cursor.x,\n                        this.cursor.y - this.cursor.radius\n                    );\n                    context.lineTo(\n                        this.cursor.x,\n                        this.cursor.y + this.cursor.radius\n                    );\n                    context.stroke();\n                } else if (this.cursor.type === \"colorpicker\") {\n                    // TODO: add croshairs\n                    context.lineWidth = this.cursor.radius * 0.75;\n                    context.strokeStyle = this.cursor.color;\n                    // context.globalAlpha = 0.5;\n                    context.beginPath();\n                    context.arc(\n                        this.cursor.x,\n                        this.cursor.y,\n                        this.cursor.radius,\n                        0,\n                        2 * Math.PI\n                    );\n                    context.stroke();\n\n                    // draw crosshairs (black)\n                    context.lineWidth = lineWidth;\n                    context.strokeStyle = \"black\";\n                    context.beginPath();\n                    context.moveTo(\n                        this.cursor.x - this.cursor.radius,\n                        this.cursor.y\n                    );\n                    context.lineTo(\n                        this.cursor.x + this.cursor.radius,\n                        this.cursor.y\n                    );\n                    context.moveTo(\n                        this.cursor.x,\n                        this.cursor.y - this.cursor.radius\n                    );\n                    context.lineTo(\n                        this.cursor.x,\n                        this.cursor.y + this.cursor.radius\n                    );\n                    context.stroke();\n                }\n            }\n        }\n    }\n\n    setSelectionOverlay(selectionOverlay: Rect | undefined) {\n        this.selectionOverlay = selectionOverlay;\n        this.render();\n    }\n\n    setSelectionOverlayPreview(selectionOverlayPreview: Rect | undefined) {\n        this.selectionOverlayPreview = selectionOverlayPreview;\n        this.render();\n    }\n\n    setCursor(cursor: Cursor | undefined) {\n        this.cursor = cursor;\n        this.render();\n    }\n\n    getSelectionOverlay(): Rect | undefined {\n        return this.selectionOverlay;\n    }\n\n    getZoom(): number {\n        return this.zoom;\n    }\n\n    getOffsetX(): number {\n        return this.offsetX;\n    }\n\n    getOffsetY(): number {\n        return this.offsetY;\n    }\n\n    updateZoomAndOffset(zoom: number, offsetX: number, offsetY: number) {\n        // console.log(`zoom: ${zoom}, offset: ${offsetX}, ${offsetY}`)\n        this.zoom = zoom;\n        this.offsetX = offsetX;\n        this.offsetY = offsetY;\n        this.render();\n    }\n\n    getWidth(): number {\n        return this.width;\n    }\n\n    getHeight(): number {\n        return this.height;\n    }\n\n    private imageDataToEncodedImage(imageData: ImageData): string | undefined {\n        // create a canvas and draw the image data on it\n        const canvas = document.createElement(\"canvas\");\n        canvas.width = imageData.width;\n        canvas.height = imageData.height;\n        const context = canvas.getContext(\"2d\");\n        if (context) {\n            context.putImageData(imageData, 0, 0);\n            // return the data url of the canvas\n            const result = canvas.toDataURL(\"image/png\");\n            // cleanup the canvas\n            canvas.remove();\n            // extract base64 data from data url\n            return result.split(\",\")[1];\n        }\n    }\n\n    getEncodedImage(selection: Rect | null): string | undefined {\n        const imageData = this.getImageData(selection);\n        if (imageData) {\n            return this.imageDataToEncodedImage(imageData);\n        }\n    }\n\n    private convertErasureToMask(erasure: ImageData): ImageData {\n        // for each pixel, if alpha < 255, set to white, otherwise set to black\n        const mask = erasure;\n        for (let i = 0; i < erasure.data.length; i += 4) {\n            let white = erasure.data[i + 3] < 255;\n            if (white) {\n                mask.data[i] = 255;\n                mask.data[i + 1] = 255;\n                mask.data[i + 2] = 255;\n                mask.data[i + 3] = 255;\n            } else {\n                mask.data[i] = 0;\n                mask.data[i + 1] = 0;\n                mask.data[i + 2] = 0;\n                mask.data[i + 3] = 255;\n            }\n        }\n        return mask;\n    }\n\n    getEncodedMask(\n        selection: Rect | null,\n        layer: \"base\" | \"mask\" = \"base\"\n    ): string | undefined {\n        const imageData = this.getImageData(selection, layer)!;\n        if (!imageData) {\n            return;\n        }\n        if (layer === \"base\") {\n            const mask = this.convertErasureToMask(imageData);\n            return this.imageDataToEncodedImage(mask);\n        } else {\n            return this.imageDataToEncodedImage(imageData);\n        }\n    }\n\n    getImageData(\n        selection: Rect | null,\n        layer: \"base\" | \"mask\" = \"base\"\n    ): ImageData | undefined {\n        if (!selection) {\n            selection = {\n                x: 0,\n                y: 0,\n                width: this.width,\n                height: this.height,\n            };\n        }\n        // get image data of the selection\n        const imageLayer =\n            layer === \"base\" ? this.baseImageLayer : this.maskLayer;\n        if (!imageLayer) {\n            return;\n        }\n        let context = imageLayer.getContext(\"2d\");\n        if (context) {\n            const imageData = context.getImageData(\n                selection.x,\n                selection.y,\n                selection.width,\n                selection.height\n            );\n            return imageData;\n        }\n    }\n\n    commitSelection() {\n        // draw the selection overlay on the base image layer\n        const context = this.baseImageLayer.getContext(\"2d\");\n        if (context) {\n            context.drawImage(this.editLayer, 0, 0);\n            this.setEditImage(null);\n            this.snapshot();\n        }\n    }\n\n    drawPoint(\n        x: number,\n        y: number,\n        brushSize: number,\n        color: string,\n        layer: \"base\" | \"mask\" = \"base\"\n    ): void {\n        // draw on selection layer\n        const imageLayer = layer === \"base\" ? this.editLayer : this.maskLayer;\n        if (!imageLayer) {\n            return;\n        }\n        const context = imageLayer.getContext(\"2d\");\n        if (context) {\n            context.fillStyle = color;\n            context.beginPath();\n            context.arc(x, y, brushSize / 2, 0, 2 * Math.PI);\n            context.fill();\n        }\n        this.render();\n    }\n\n    erasePoint(brushx: number, brushy: number, brushSize: number): void {\n        if (!this.selectionOverlay) {\n            throw new Error(\"No selection overlay\");\n        }\n        // get image data centered on x, y with brushSize width and height\n        const context = this.baseImageLayer.getContext(\"2d\");\n        if (context) {\n            const imageData = context.getImageData(\n                brushx - brushSize / 2,\n                brushy - brushSize / 2,\n                brushSize,\n                brushSize\n            );\n            // set alpha to 0 in a circle centered on x, y with radius brushSize / 2\n            for (let i = 0; i < imageData.data.length; i += 4) {\n                const x = (i / 4) % brushSize;\n                const y = Math.floor(i / 4 / brushSize);\n\n                const absx = x - brushSize / 2 + brushx;\n                // three pixel barrier on each edge UNLESS the selection overlay borders that edge\n                let leftEdge = this.selectionOverlay.x;\n                if (leftEdge > 0) {\n                    leftEdge += 10;\n                }\n                let rightEdge =\n                    this.selectionOverlay.x + this.selectionOverlay.width;\n                if (rightEdge < this.width) {\n                    rightEdge -= 10;\n                }\n                let topEdge = this.selectionOverlay.y;\n                if (topEdge > 0) {\n                    topEdge += 10;\n                }\n                let bottomEdge =\n                    this.selectionOverlay.y + this.selectionOverlay.height;\n                if (bottomEdge < this.canvas.height) {\n                    bottomEdge -= 10;\n                }\n\n                const containsx = absx > leftEdge && absx < rightEdge;\n                const absy = y - brushSize / 2 + brushy;\n                const containsy = absy > topEdge && absy < bottomEdge;\n                const contains = containsx && containsy;\n\n                // check if x, y is within the selection overlay\n                if (this.selectionOverlay && !contains) {\n                    continue;\n                }\n\n                const distance = Math.sqrt(\n                    Math.pow(x - brushSize / 2, 2) +\n                        Math.pow(y - brushSize / 2, 2)\n                );\n                if (distance < brushSize / 2) {\n                    imageData.data[i + 3] = 0;\n                }\n            }\n            // draw the image data on the selection layer\n            context.putImageData(\n                imageData,\n                brushx - brushSize / 2,\n                brushy - brushSize / 2\n            );\n        }\n    }\n\n    drawLine(\n        x1: number,\n        y1: number,\n        x2: number,\n        y2: number,\n        brushSize: number,\n        color: string,\n        layer: \"base\" | \"mask\" = \"base\"\n    ): void {\n        const imageLayer = layer === \"base\" ? this.editLayer : this.maskLayer;\n        if (!imageLayer) {\n            return;\n        }\n        // draw on selection layer\n        const context = imageLayer.getContext(\"2d\");\n        if (context) {\n            context.strokeStyle = color;\n            context.lineWidth = brushSize;\n            context.lineCap = \"round\";\n            context.beginPath();\n            context.moveTo(x1, y1);\n            context.lineTo(x2, y2);\n            context.stroke();\n        }\n        this.render();\n    }\n\n    smudgeLine(\n        x1: number,\n        y1: number,\n        x2: number,\n        y2: number,\n        brushSize: number,\n        brushOpacity: number\n    ): void {\n        const unitVector = {\n            x: x2 - x1,\n            y: y2 - y1,\n        };\n        const length = Math.sqrt(\n            unitVector.x * unitVector.x + unitVector.y * unitVector.y\n        );\n        unitVector.x /= length;\n        unitVector.y /= length;\n\n        // for each point on the line, get image data (brushSize x brushSize) from edit layer\n        // average pixel values that are within the brush circle.\n        // update the image data with the averaged pixel values in the\n        // brush circle, then put the image data back on the edit layer\n        // at the point on the line\n\n        const context = this.editLayer.getContext(\"2d\");\n        if (context) {\n            for (let i = 0; i < length; i++) {\n                const x = x1 + i * unitVector.x;\n                const y = y1 + i * unitVector.y;\n\n                const imageData = context.getImageData(\n                    x - brushSize / 2,\n                    y - brushSize / 2,\n                    brushSize,\n                    brushSize\n                );\n\n                let totalRed = 0;\n                let totalGreen = 0;\n                let totalBlue = 0;\n                let count = 0.0;\n\n                // average pixel values\n                for (let y = 0; y < imageData.height; y++) {\n                    for (let x = 0; x < imageData.width; x++) {\n                        const index = (y * imageData.width + x) * 4;\n                        const distance = Math.sqrt(\n                            (x - brushSize / 2) * (x - brushSize / 2) +\n                                (y - brushSize / 2) * (y - brushSize / 2)\n                        );\n                        if (distance <= brushSize / 2) {\n                            // get the pixel value from the image data\n                            const r = imageData.data[index];\n                            const g = imageData.data[index + 1];\n                            const b = imageData.data[index + 2];\n\n                            totalRed += r;\n                            totalGreen += g;\n                            totalBlue += b;\n                            count++;\n                        }\n                    }\n                }\n\n                // update the image data with the averaged pixel values\n                // these need to be weighted by the brush opacity\n                const averageRed = totalRed / count;\n                const averageGreen = totalGreen / count;\n                const averageBlue = totalBlue / count;\n                for (let y = 0; y < imageData.height; y++) {\n                    for (let x = 0; x < imageData.width; x++) {\n                        const index = (y * imageData.width + x) * 4;\n                        const distance = Math.sqrt(\n                            (x - brushSize / 2) * (x - brushSize / 2) +\n                                (y - brushSize / 2) * (y - brushSize / 2)\n                        );\n                        if (distance <= brushSize / 2) {\n                            imageData.data[index] =\n                                averageRed * brushOpacity +\n                                imageData.data[index] * (1 - brushOpacity);\n                            imageData.data[index + 1] =\n                                averageGreen * brushOpacity +\n                                imageData.data[index + 1] * (1 - brushOpacity);\n                            imageData.data[index + 2] =\n                                averageBlue * brushOpacity +\n                                imageData.data[index + 2] * (1 - brushOpacity);\n                        }\n                    }\n                }\n\n                // put the image data back on the edit layer\n                context.putImageData(\n                    imageData,\n                    x - brushSize / 2,\n                    y - brushSize / 2\n                );\n            }\n        }\n        this.render();\n    }\n\n    getPixel(x: number, y: number): string {\n        const context = this.baseImageLayer.getContext(\"2d\");\n        // get pixel as hex string\n        if (context) {\n            const pixel = context.getImageData(x, y, 1, 1).data;\n            return (\n                \"#\" +\n                (\"000000\" + rgbToHex(pixel[0], pixel[1], pixel[2])).slice(-6)\n            );\n        }\n        return \"#000000\";\n    }\n\n    copyEditImageFromBaseImage(): void {\n        // copy the base image to the edit layer\n        const context = this.editLayer.getContext(\"2d\");\n        if (context) {\n            context.drawImage(this.baseImageLayer, 0, 0);\n        }\n        this.render();\n        this.hasSelection = true;\n        this.notifySnapshotListener();\n    }\n\n    expandToOverlay() {\n        if (!this.selectionOverlay) {\n            throw new Error(\"No selection overlay\");\n        }\n        const minX = Math.min(0, this.selectionOverlay.x);\n        const minY = Math.min(0, this.selectionOverlay.y);\n        const maxX = Math.max(\n            this.selectionOverlay.x + this.selectionOverlay.width,\n            this.baseImageLayer.width\n        );\n        const maxY = Math.max(\n            this.selectionOverlay.y + this.selectionOverlay.height,\n            this.baseImageLayer.height\n        );\n        const width = maxX - minX;\n        const height = maxY - minY;\n\n        // create a new canvas with the expanded size\n        const newCanvas = document.createElement(\"canvas\");\n        newCanvas.width = width;\n        newCanvas.height = height;\n        // draw the base image on the new canvas.\n        // if overlay.x is negative, image.x is overlay.x * -1\n        // if overlay.x is 0 or positive, image.x is 0\n        // if overlay.y is negative, image.y is overlay.y * -1\n        // if overlay.y is 0 or positive, image.y is 0\n        const context = newCanvas.getContext(\"2d\");\n        if (context) {\n            context.drawImage(\n                this.baseImageLayer,\n                Math.max(0, this.selectionOverlay.x * -1),\n                Math.max(0, this.selectionOverlay.y * -1)\n            );\n        }\n        if (this.selectionOverlay.x < 0) {\n            this.selectionOverlay.x = 0;\n        }\n        if (this.selectionOverlay.y < 0) {\n            this.selectionOverlay.y = 0;\n        }\n        console.log(`new Canvas size: ${width} x ${height}`);\n        this.setBaseImage(newCanvas, false);\n    }\n}\n\nfunction rgbToHex(r: number, g: number, b: number) {\n    if (r > 255 || g > 255 || b > 255) throw \"Invalid color component\";\n    return ((r << 16) | (g << 8) | b).toString(16);\n}\n\nexport function createRenderer(canvas: HTMLCanvasElement): Renderer {\n    return new Renderer(canvas);\n}\n","// export interface AspectRatio {\n//     displayName: string;\n//     width: number;\n//     height: number;\n//     id: number;\n\n//     scale: (size: number) => AspectRatio;\n// }\n\nexport class AspectRatio implements AspectRatio {\n    readonly displayName: string;\n    readonly width: number;\n    readonly height: number;\n    readonly id: number;\n\n    constructor(cfg: any) {\n        this.displayName = cfg.displayName;\n        this.width = cfg.width;\n        this.height = cfg.height;\n        this.id = cfg.id;\n    }\n\n    scale(size: number): AspectRatio {\n        const newWidth = this.width * size;\n        const newHeight = this.height * size;\n\n        return new AspectRatio({\n            id: this.id,\n            displayName: this.displayName,\n            // round width and height up to the nearest multiple of 64\n            width: Math.ceil(newWidth / 64) * 64,\n            height: Math.ceil(newHeight / 64) * 64,\n        });\n    }\n}\n\nexport const DEFAULT_ASPECT_RATIO = 5;\n\nexport const aspectRatios: AspectRatio[] = [\n    {\n        displayName: \"4:1\",\n        width: 1024,\n        height: 256,\n        id: 0,\n    },\n    {\n        displayName: \"3:1\",\n        width: 768,\n        height: 256,\n        id: 1,\n    },\n    {\n        displayName: \"2:1\",\n        width: 640,\n        height: 320,\n        id: 2,\n    },\n    {\n        displayName: \"3:2\",\n        width: 576,\n        height: 384,\n        id: 3,\n    },\n    {\n        displayName: \"5:4\",\n        width: 640,\n        height: 512,\n        id: 4,\n    },\n    {\n        displayName: \"1:1\",\n        width: 512,\n        height: 512,\n        id: 5,\n    },\n    {\n        displayName: \"4:5\",\n        width: 512,\n        height: 640,\n        id: 6,\n    },\n    {\n        displayName: \"2:3\",\n        width: 384,\n        height: 576,\n        id: 7,\n    },\n    {\n        displayName: \"1:2\",\n        width: 320,\n        height: 640,\n        id: 8,\n    },\n    {\n        displayName: \"1:3\",\n        width: 256,\n        height: 768,\n        id: 9,\n    },\n    {\n        displayName: \"1:4\",\n        width: 256,\n        height: 1024,\n        id: 10,\n    }\n].map((cfg) => new AspectRatio(cfg));\n\nexport function getClosestAspectRatio(width: number, height: number): AspectRatio {\n    const aspectRatio = width / height;\n\n    const tests = [...aspectRatios];\n    tests.sort((a, b) => {\n        const aRatio = a.width / a.height;\n        const bRatio = b.width / b.height;\n        return (\n            Math.abs(aRatio - aspectRatio) -\n            Math.abs(bRatio - aspectRatio)\n        );\n    });\n    const bestMatch = tests[0];\n    return bestMatch;\n}\n\n\n","import { FC, useEffect, useState } from \"react\";\nimport { PaletteButton } from \"./PaletteButton\";\nimport { PencilTool } from \"./pencil-tool\";\nimport { Renderer } from \"./renderer\";\n\ninterface MaskEditorProps {\n    // renderer: Renderer;\n    tool: PencilTool;\n    onConfirm: () => void;\n    onRevert: () => void;\n}\n\nconst colors = [\"#FFFFFF\", \"#000000\"];\n\nexport const MaskEditor: FC<MaskEditorProps> = ({\n    // renderer,\n    tool,\n    onConfirm,\n    onRevert,\n}) => {\n    const [brushSize, setBrushSize] = useState(10);\n    const [brushColor, setBrushColor] = useState(colors[0]);\n\n    useEffect(() => {\n        tool.updateArgs({\n            brushSize,\n            brushColor,\n        });\n    }, [brushSize, brushColor]);\n\n    return (\n        <div style={{ marginTop: \"16px\" }}>\n            <div className=\"form-group\">\n                <label style={{ width: \"100%\" }}>\n                    Brush size\n                    <small\n                        className=\"form-text text-muted\"\n                        style={{ float: \"right\" }}\n                    >\n                        {brushSize}px\n                    </small>\n                </label>\n                <input\n                    type=\"range\"\n                    className=\"form-control-range\"\n                    min=\"1\"\n                    max=\"100\"\n                    value={brushSize}\n                    onChange={(e) => setBrushSize(parseInt(e.target.value))}\n                />\n            </div>\n            <div\n                style={{\n                    display: \"flex\",\n                    flexDirection: \"row\",\n                    flexWrap: \"wrap\",\n                }}\n            >\n                {colors.map((color, i) => (\n                    <PaletteButton\n                        key={i}\n                        selectedColor={brushColor}\n                        color={color}\n                        onClick={(color) => setBrushColor(color)}\n                    />\n                ))}\n            </div>\n            <div className=\"form-group\" style={{ marginTop: \"16px\" }}>\n                <i className=\"fa fa-info-circle\"></i>&nbsp;Masking: areas that\n                are painted white will be changed, areas that are painted black\n                will be left unchanged.\n            </div>\n            <div className=\"form-group\" style={{ marginTop: \"16px\" }}>\n                <button\n                    className=\"btn btn-secondary\"\n                    onClick={() => tool.renderer.invertMask()}\n                >\n                    Invert\n                </button>\n                <button\n                    className=\"btn btn-secondary\"\n                    onClick={onRevert}\n                    style={{ marginLeft: \"8px\" }}\n                >\n                    Cancel\n                </button>\n                <button\n                    className=\"btn btn-primary\"\n                    onClick={onConfirm}\n                    style={{ marginLeft: \"8px\" }}\n                >\n                    Save\n                </button>\n            </div>\n        </div>\n    );\n};\n","import React, { FC, useState, useEffect } from \"react\";\nimport loadImage from \"blueimp-load-image\";\nimport saveAs from \"file-saver\";\n\nimport { AIBrushApi } from \"../../client\";\nimport { Renderer } from \"./renderer\";\nimport { BaseTool, Tool } from \"./tool\";\n\ninterface Props {\n    renderer: Renderer;\n    tool: BaseTool;\n    api: AIBrushApi;\n}\n\nexport const ImportExportControls: FC<Props> = ({ renderer, tool }) => {\n\n    const [backupImage, setBackupImage] = useState<string | undefined>();\n\n    const onImageSelected = (event: React.ChangeEvent<HTMLInputElement>) => {\n        const files = event.target.files;\n        if (files && files.length > 0) {\n            loadImage(\n                files[0],\n                (img) => {\n                    const backupImage = renderer.getEncodedImage(null);\n                    setBackupImage(backupImage);\n                    renderer.setBaseImage(img as HTMLImageElement);\n                },\n                { canvas: false }\n            );\n        }\n    };\n\n    const onExport = () => {\n        const encodedImage = renderer.getEncodedImage(null);\n        if (encodedImage) {\n            // base64 decode\n            const byteString = atob(encodedImage);\n            // save as file\n            const buffer = new ArrayBuffer(byteString.length);\n            const intArray = new Uint8Array(buffer);\n            for (let i = 0; i < byteString.length; i++) {\n                intArray[i] = byteString.charCodeAt(i);\n            }\n            const blob = new Blob([intArray], { type: \"image/png\" });\n            saveAs(blob, \"image.png\");\n        }\n    };\n\n    if (backupImage) {\n        return (\n            <div className=\"form-group\" style={{marginTop: \"16px\"}}>\n                <button\n                    className=\"btn btn-primary\"\n                    onClick={() => {\n                        setBackupImage(undefined);\n                        const img = new Image();\n                        // set src as data uri\n                        const src = \"data:image/png;base64,\" + backupImage;\n                        img.src = src;\n                        img.onload = () => {\n                            renderer.setBaseImage(img);\n                        };\n                    }}\n                >\n                    {/* cancel icon */}\n                    <i className=\"fas fa-times\"></i>&nbsp;\n                    Revert\n                </button>\n                <button\n                    className=\"btn btn-primary\"\n                    onClick={() => {\n                        setBackupImage(undefined);\n                        if (tool.saveListener) {\n                            const encodedImage = renderer.getEncodedImage(null);\n                            if (encodedImage) {\n                                tool.saveListener(encodedImage);\n                            }\n                        }\n                    }}\n                    style={{marginLeft: \"8px\"}}\n                >\n                    {/* save icon */}\n                    <i className=\"fas fa-save\"></i>&nbsp;\n                    Save\n                </button>\n            </div>\n        );\n    }\n\n    // Show buttons for import and export and \"save a copy\"\n    return (\n        <>\n            <div className=\"form-group\" style={{marginTop: \"16px\"}}>\n                <label\n                    id=\"loadimage-wrapper\"\n                    className={`btn btn-primary `}\n                    style={{ display: \"inline\" }}\n                >\n                    {/* upload image */}\n                    <i className=\"fas fa-upload\"></i>&nbsp; Import Image\n                    <input\n                        id=\"loadimage\"\n                        type=\"file\"\n                        style={{ display: \"none\" }}\n                        onChange={onImageSelected}\n                    />\n                </label>\n            </div>\n            <div className=\"form-group\">\n                <button\n                    className=\"btn btn-primary\"\n                    onClick={() => {\n                        onExport();\n                    }}\n                    style={{ marginLeft: \"8px\"}}\n                >\n                    <i className=\"fas fa-download\"></i>&nbsp; Export Image\n                </button>\n            </div>\n        </>\n    );\n};\n","import React, { FC, useState, useEffect } from \"react\";\nimport loadImage from \"blueimp-load-image\";\nimport saveAs from \"file-saver\";\nimport axios from \"axios\";\nimport * as uuid from \"uuid\";\n\nimport { sleep } from \"../../lib/sleep\";\n\nimport {\n    AIBrushApi,\n    CreateImageInput,\n    ImageParamsAugmentationEnum,\n    Image as APIImage,\n    StatusEnum,\n} from \"../../client\";\nimport { Renderer } from \"./renderer\";\nimport { BaseTool, Tool } from \"./tool\";\nimport {\n    splitImage,\n    mergeTiles,\n    ImageUtilWorker,\n    imageDataToCanvas,\n    fixImageSize,\n    decodeImage,\n    binaryImageToDataBase64,\n    SplitResult,\n} from \"../../lib/imageutil\";\nimport { defaultArgs } from \"../../components/ImagePrompt\";\nimport { ErrorNotification } from \"../../components/Alerts\";\nimport moment from \"moment\";\nimport { calculateImagesCost } from \"../../lib/credits\";\nimport { CostIndicator } from \"../../components/CostIndicator\";\n\nexport const anonymousClient = axios.create();\n\ninterface Props {\n    renderer: Renderer;\n    tool: BaseTool;\n    api: AIBrushApi;\n    image: APIImage;\n}\n\nexport const AugmentControls: FC<Props> = ({ renderer, tool, api, image }) => {\n    const [backupImage, setBackupImage] = useState<string | undefined>();\n    const [activeAugmentation, setActiveAugmentation] = useState<\n        \"upscale\" | \"face_restore\" | null\n    >(null);\n    const [imageWorker, setImageWorker] = useState<\n        ImageUtilWorker | undefined\n    >();\n    const [error, setError] = useState<string | null>(null);\n    const [lastError, setLastError] = useState<number>(0);\n\n    useEffect(() => {\n        const imageWorker = new ImageUtilWorker();\n        setImageWorker(imageWorker);\n        return () => {\n            imageWorker.destroy();\n        };\n    }, []);\n\n    const augmentImageData = async (\n        imageData: ImageData,\n        augmentation: \"upscale\" | \"face_restore\"\n    ): Promise<ImageData> => {\n        if (!imageWorker) {\n            throw new Error(\"Image worker not initialized\");\n        }\n        let c = imageDataToCanvas(imageData);\n        let encodedImage = c.toDataURL(\"image/png\").split(\",\")[1];\n        c.remove();\n        const input: CreateImageInput = defaultArgs();\n        input.label = \"\";\n        // input.encoded_image = encodedImage;\n\n        const tmpInitImage = await api.createTemporaryImage(\"png\");\n        const binaryImageData = Buffer.from(encodedImage, \"base64\");\n        await anonymousClient.put(\n            tmpInitImage.data.upload_url!,\n            binaryImageData,\n            {\n                headers: {\n                    \"Content-Type\": \"image/png\",\n                },\n            }\n        );\n\n        input.tmp_image_id = tmpInitImage.data.id;\n        input.params.prompt = image.params.prompt;\n        input.params.negative_prompt = image.params.negative_prompt;\n        input.params.denoising_strength = 0.05;\n        input.count = 1;\n        input.model = \"stable_diffusion\";\n        input.nsfw = true;\n        input.temporary = true;\n        input.params.width = imageData.width;\n        input.params.height = imageData.height;\n        input.params.augmentation =\n            augmentation === \"upscale\"\n                ? ImageParamsAugmentationEnum.Upscale\n                : ImageParamsAugmentationEnum.FaceRestore;\n\n        const createResp = await api.createImage(input);\n        let processingImage = createResp.data.images![0];\n        while (processingImage.status !== StatusEnum.Completed) {\n            await sleep(2000);\n            const checkResp = await api.getImage(processingImage.id);\n            processingImage = checkResp.data;\n            if (processingImage.status === StatusEnum.Error) {\n                throw new Error(\"Augmentation failed\");\n            }\n        }\n        const downloadUrls = await api.getImageDownloadUrls(processingImage.id);\n\n        // download image data, convert to canvas and resize to 2x original,\n        // convert back to image data and return.\n        const imageDataResp = await anonymousClient.get(\n            downloadUrls.data.image_url!,\n            {\n                responseType: \"arraybuffer\",\n            }\n        );\n        encodedImage = binaryImageToDataBase64(imageDataResp.data);\n        const img = await decodeImage(encodedImage);\n        c = document.createElement(\"canvas\");\n        const upscaleFactor = augmentation === \"upscale\" ? 2 : 1;\n        c.width = imageData.width * upscaleFactor;\n        c.height = imageData.height * upscaleFactor;\n        const ctx = c.getContext(\"2d\")!;\n        ctx.drawImage(img, 0, 0, c.width, c.height);\n        const newImageData = ctx.getImageData(0, 0, c.width, c.height);\n        c.remove();\n        return newImageData;\n    };\n\n    const onAugment = async (augmentation: \"upscale\" | \"face_restore\") => {\n        setActiveAugmentation(augmentation);\n        setError(null);\n        try {\n            const backupImage = renderer.getEncodedImage(null);\n            setBackupImage(backupImage);\n            let imageData = renderer.getImageData(null);\n            if (!imageData) {\n                return;\n            }\n            // ensure width and height are multiples of 64\n            if ((imageData.width % 64) + (imageData.height % 64) !== 0) {\n                const c = fixImageSize(imageDataToCanvas(imageData));\n                imageData = c\n                    .getContext(\"2d\")!\n                    .getImageData(0, 0, c.width, c.height);\n            }\n\n            const newImageData = await augmentImageData(\n                imageData,\n                augmentation\n            );\n            const newCanvas = imageDataToCanvas(newImageData);\n            renderer.setBaseImage(newCanvas);\n            newCanvas.remove();\n        } catch (err: any) {\n            setError(err.message || \"Augmentation failed\");\n            setLastError(moment().valueOf());\n        } finally {\n            setActiveAugmentation(null);\n        }\n    };\n\n    if (activeAugmentation) {\n        return (\n            <div className=\"form-group\" style={{ marginTop: \"16px\" }}>\n                <i className=\"fas fa-spinner fa-spin\"></i>&nbsp;{\" \"}\n                {activeAugmentation === \"upscale\"\n                    ? \"Upscaling...\"\n                    : \"Restoring faces...\"}\n            </div>\n        );\n    }\n\n    if (backupImage) {\n        return (\n            <div className=\"form-group\" style={{ marginTop: \"16px\" }}>\n                <ErrorNotification message={error} timestamp={lastError} />\n                <button\n                    className=\"btn btn-primary\"\n                    onClick={() => {\n                        setBackupImage(undefined);\n                        const img = new Image();\n                        // set src as data uri\n                        const src = \"data:image/png;base64,\" + backupImage;\n                        img.src = src;\n                        img.onload = () => {\n                            renderer.setBaseImage(img);\n                        };\n                    }}\n                >\n                    {/* cancel icon */}\n                    <i className=\"fas fa-times\"></i>&nbsp; Revert\n                </button>\n                <button\n                    className=\"btn btn-primary\"\n                    onClick={() => {\n                        setBackupImage(undefined);\n                        if (tool.saveListener) {\n                            const encodedImage = renderer.getEncodedImage(null);\n                            if (encodedImage) {\n                                tool.saveListener(encodedImage);\n                            }\n                        }\n                    }}\n                    style={{ marginLeft: \"8px\" }}\n                >\n                    {/* save icon */}\n                    <i className=\"fas fa-save\"></i>&nbsp; Save\n                </button>\n            </div>\n        );\n    }\n\n    const maxSize = 2048 * 2048;\n    if (renderer.getWidth() * renderer.getHeight() > maxSize) {\n        return (\n            <div style={{ marginTop: \"16px\" }}>\n                This image is too large to augment.\n            </div>\n        );\n    }\n\n    const cost = calculateImagesCost(1, image.params.width!, image.params.height!);\n\n    // Show buttons for import and export and \"save a copy\"\n    return (\n        <>\n            <ErrorNotification message={error} timestamp={lastError} />\n            <div className=\"form-group\" style={{ marginTop: \"16px\" }}>\n                <button\n                    className=\"btn btn-primary\"\n                    onClick={() => {\n                        onAugment(\"upscale\");\n                    }}\n                    style={{ marginLeft: \"8px\" }}\n                >\n                    {/* upscale icon */}\n                    <i className=\"fas fa-arrows-alt\"></i>&nbsp; Upscale Image 2x\n                </button>\n            </div>\n            <div className=\"form-group\" style={{ marginTop: \"16px\" }}>\n                <button\n                    className=\"btn btn-primary\"\n                    onClick={() => {\n                        onAugment(\"face_restore\");\n                    }}\n                    style={{ marginLeft: \"8px\" }}\n                >\n                    {/* face restore icon */}\n                    <i className=\"fas fa-smile\"></i>&nbsp; Restore Faces\n                </button>\n            </div>\n            <div className=\"form-group\" style={{ marginTop: \"16px\" }}>\n                <CostIndicator imagesCost={cost} />\n            </div>\n        </>\n    );\n};\n","import React from \"react\";\nimport { Modal, Button } from \"react-bootstrap\";\nimport { Link, useHistory } from \"react-router-dom\";\n\ninterface OutOfCreditsModalProps {\n    show: boolean;\n    onHide: () => void;\n}\n\nconst OutOfCreditsModal: React.FC<OutOfCreditsModalProps> = ({\n    show,\n    onHide,\n}) => {\n    const history = useHistory();\n\n    const redirectToPricing = () => {\n        onHide();\n        history.push(\"/pricing\");\n    };\n\n    return (\n        <Modal show={show} onHide={onHide} centered>\n            <Modal.Header closeButton>\n                <Modal.Title>Out of Credits</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                Oops! It looks like you've run out of credits for today. But\n                don't worry, you'll receive 100 free credits tomorrow to\n                continue creating amazing images. Can't wait? Check out our\n                affordable <Link to=\"/pricing\">pricing options</Link> to get instant access to more credits\n                and unleash your creativity without limits!\n            </Modal.Body>\n            <Modal.Footer>\n                <Button variant=\"secondary\" onClick={onHide}>\n                    Close\n                </Button>\n                <Button variant=\"primary\" onClick={redirectToPricing}>\n                    Visit Pricing Page\n                </Button>\n            </Modal.Footer>\n        </Modal>\n    );\n};\n\nexport default OutOfCreditsModal;\n","import React, { useEffect, useState } from \"react\";\nimport { Modal, Button } from \"react-bootstrap\";\nimport { useHistory } from \"react-router-dom\";\n\ninterface PaymentStatusModalProps {\n    paymentStatus?: \"success\" | \"canceled\";\n}\n\nconst PaymentStatusModal: React.FC<PaymentStatusModalProps> = ({\n    paymentStatus,\n}) => {\n    const [show, setShow] = useState(false);\n    const history = useHistory();\n\n    useEffect(() => {\n        if (paymentStatus) {\n            setShow(true);\n        }\n    }, [paymentStatus]);\n\n    const handleClose = () => {\n        setShow(false);\n        history.push(\"/\");\n    };\n\n    return (\n        <Modal show={show} onHide={handleClose}>\n            <Modal.Header closeButton>\n                <Modal.Title>Payment Status</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                {paymentStatus === \"success\"\n                    ? \"Payment succeeded!\"\n                    : \"Payment canceled.\"}\n            </Modal.Body>\n            <Modal.Footer>\n                <Button variant=\"secondary\" onClick={handleClose}>\n                    Close\n                </Button>\n            </Modal.Footer>\n        </Modal>\n    );\n};\n\nexport default PaymentStatusModal;\n","import axios from \"axios\";\nimport { AIBrushApi } from \"../client\";\nimport { Rect } from \"../pages/image-editor/models\";\n\nconst anonymousClient = axios.create();\n\nexport interface SplitResult {\n    numTilesX: number;\n    numTilesY: number;\n    tileSize: number;\n    imageWidth: number;\n    imageHeight: number;\n    tiles: ImageData[][]; // [x][y]\n}\n\nexport function convertPNGToJPG(encodedImage: string): Promise<string> {\n    return new Promise((resolve, reject) => {\n        const image = new Image();\n        image.onload = () => {\n            const canvas = document.createElement(\"canvas\");\n            try {\n                canvas.width = image.width;\n                canvas.height = image.height;\n                const ctx = canvas.getContext(\"2d\");\n                if (!ctx) {\n                    throw new Error(\"Could not get canvas context\");\n                }\n                ctx.drawImage(image, 0, 0);\n                const dataUrl = canvas.toDataURL(\"image/jpeg\");\n                resolve(dataUrl.split(\",\")[1]);\n            } finally {\n                canvas.remove();\n            }\n        };\n        image.src = `data:image/png;base64,${encodedImage}`\n    });\n}\n\nexport function loadImageDataElement(\n    api: AIBrushApi,\n    imageId: string\n): Promise<HTMLImageElement> {\n    return new Promise((resolve, reject) => {\n        api.getImageDownloadUrls(imageId)\n            .then((urls) => {\n                anonymousClient\n                    .get(urls.data.image_url!, {\n                        responseType: \"arraybuffer\",\n                    })\n                    .then((resp) => {\n                        const binaryImageData = Buffer.from(\n                            resp.data,\n                            \"binary\"\n                        );\n                        const base64ImageData =\n                            binaryImageData.toString(\"base64\");\n                        const src = `data:image/png;base64,${base64ImageData}`;\n                        const imageElement = new Image();\n                        imageElement.src = src;\n                        imageElement.onload = () => {\n                            resolve(imageElement);\n                        };\n                    })\n                    .catch((err) => reject(err));\n            })\n            .catch((err) => reject(err));\n    });\n}\n\n// split image for individual upscales\nexport function splitImage(initImage: ImageData) {\n    // Check if the image area is larger than 512x512\n    if (initImage.width * initImage.height > 512 * 512) {\n        // use a temporary canvas to split the image\n        const canvas = document.createElement(\"canvas\");\n        try {\n            canvas.width = initImage.width;\n            canvas.height = initImage.height;\n            const ctx = canvas.getContext(\"2d\");\n            if (!ctx) {\n                throw new Error(\"Could not get canvas context\");\n            }\n            ctx.putImageData(initImage, 0, 0);\n            const tile_size = Math.min(initImage.width, initImage.height, 512);\n            // split the image into 512x512 tiles\n            // they need to overlap by at least 32 pixels\n            // so that the edges can be merged\n\n            // calculate the number of tiles in each dimension\n            const num_tiles_x = Math.ceil(initImage.width / (tile_size - 32));\n            const num_tiles_y = Math.ceil(initImage.height / (tile_size - 32));\n\n            const tiles: ImageData[][] = [];\n            for (let x = 0; x < num_tiles_x; x++) {\n                tiles.push([]);\n                for (let y = 0; y < num_tiles_y; y++) {\n                    // calculate the bounding box of the tile\n                    const x0 = x * (tile_size - 32);\n                    const y0 = y * (tile_size - 32);\n                    const x1 = Math.min(x0 + tile_size, initImage.width);\n                    const y1 = Math.min(y0 + tile_size, initImage.height);\n                    // crop the tile\n                    const tile = ctx.getImageData(x0, y0, x1 - x0, y1 - y0);\n                    tiles[x].push(tile);\n                }\n            }\n            return {\n                numTilesX: num_tiles_x,\n                numTilesY: num_tiles_y,\n                tileSize: tile_size,\n                imageWidth: initImage.width,\n                imageHeight: initImage.height,\n                tiles,\n            };\n        } finally {\n            canvas.remove();\n        }\n    } else {\n        return null;\n    }\n}\n\n// merge the tiles back into a single image\n// tiles should be 2x original size\nexport function mergeTiles(splitResult: SplitResult): ImageData {\n    // create a new image\n    const canvas = document.createElement(\"canvas\");\n    try {\n        canvas.width = splitResult.imageWidth;\n        canvas.height = splitResult.imageHeight;\n        const ctx = canvas.getContext(\"2d\");\n        if (!ctx) {\n            throw new Error(\"Could not get canvas context\");\n        }\n        for (let x = 0; x < splitResult.numTilesX; x++) {\n            for (let y = 0; y < splitResult.numTilesY; y++) {\n                // load the tile\n                const tile = splitResult.tiles[x][y];\n                const tileCanvas = imageDataToCanvas(tile);\n\n                // paste the tile into the new image\n                ctx.drawImage(\n                    tileCanvas,\n                    x * (splitResult.tileSize - 64),\n                    y * (splitResult.tileSize - 64)\n                );\n            }\n        }\n        return ctx.getImageData(\n            0,\n            0,\n            splitResult.imageWidth,\n            splitResult.imageHeight\n        );\n    } finally {\n        canvas.remove();\n    }\n}\n\nexport function imageDataToCanvas(imageData: ImageData): HTMLCanvasElement {\n    const canvas = document.createElement(\"canvas\");\n    canvas.width = imageData.width;\n    canvas.height = imageData.height;\n    const ctx = canvas.getContext(\"2d\");\n    if (!ctx) {\n        throw new Error(\"Could not get canvas context\");\n    }\n    ctx.putImageData(imageData, 0, 0);\n    return canvas;\n}\n\n// extract resizing logic from above function into a reusable resizeImage function\nexport function resizeImage(\n    image: HTMLCanvasElement,\n    width: number,\n    height: number\n): HTMLCanvasElement {\n    const canvas = document.createElement(\"canvas\");\n    try {\n        canvas.width = width;\n        canvas.height = height;\n        const ctx = canvas.getContext(\"2d\");\n        if (!ctx) {\n            throw new Error(\"Could not get canvas context\");\n        }\n        ctx.drawImage(image, 0, 0, width, height);\n        return canvas;\n    } finally {\n        image.remove();\n    }\n}\n\n// re-implement fixImageSize using resizeImage\nexport function fixImageSize(image: HTMLCanvasElement): HTMLCanvasElement {\n    // if the width and the height are divisible by 64, return the image data\n    // otherwise, resize up to the next multiple of 64\n    const width = Math.ceil(image.width / 64) * 64;\n    const height = Math.ceil(image.height / 64) * 64;\n    if (width == image.width && height == image.height) {\n        return image;\n    }\n    return resizeImage(image, width, height);\n}\n\nexport function featherEdges(\n    selectionOverlay: Rect,\n    imageWidth: number,\n    imageHeight: number,\n    imageData: ImageData,\n    featherWidth?: number\n) {\n    const featherLeftEdge = selectionOverlay.x != 0;\n    const featherRightEdge =\n        selectionOverlay.x + selectionOverlay.width != imageWidth;\n    const featherTopEdge = selectionOverlay.y != 0;\n    const featherBottomEdge =\n        selectionOverlay.y + selectionOverlay.height != imageHeight;\n\n    const baseWidth = Math.min(selectionOverlay.width, selectionOverlay.height);\n    if (!featherWidth) {\n        featherWidth = Math.floor(baseWidth / 8);\n    }\n\n    if (featherTopEdge) {\n        for (let y = 0; y < featherWidth; y++) {\n            for (let x = 0; x < selectionOverlay.width; x++) {\n                const pixelIndex = (y * selectionOverlay.width + x) * 4;\n                const alpha = (y / featherWidth) * 255;\n                const existingAlpha = imageData.data[pixelIndex + 3];\n                imageData.data[pixelIndex + 3] = Math.min(alpha, existingAlpha);\n            }\n        }\n    }\n    if (featherBottomEdge) {\n        for (\n            let y = selectionOverlay.height - featherWidth;\n            y < selectionOverlay.height;\n            y++\n        ) {\n            for (let x = 0; x < selectionOverlay.width; x++) {\n                const pixelIndex = (y * selectionOverlay.width + x) * 4;\n                const alpha =\n                    ((selectionOverlay.height - y) / featherWidth) * 255;\n                const existingAlpha = imageData.data[pixelIndex + 3];\n                imageData.data[pixelIndex + 3] = Math.min(alpha, existingAlpha);\n            }\n        }\n    }\n    if (featherLeftEdge) {\n        for (let x = 0; x < featherWidth; x++) {\n            for (let y = 0; y < selectionOverlay.height; y++) {\n                const pixelIndex = (y * selectionOverlay.width + x) * 4;\n                const alpha = (x / featherWidth) * 255;\n                const existingAlpha = imageData.data[pixelIndex + 3];\n                imageData.data[pixelIndex + 3] = Math.min(alpha, existingAlpha);\n            }\n        }\n    }\n    if (featherRightEdge) {\n        for (\n            let x = selectionOverlay.width - featherWidth;\n            x < selectionOverlay.width;\n            x++\n        ) {\n            for (let y = 0; y < selectionOverlay.height; y++) {\n                const pixelIndex = (y * selectionOverlay.width + x) * 4;\n                const alpha =\n                    ((selectionOverlay.width - x) / featherWidth) * 255;\n                const existingAlpha = imageData.data[pixelIndex + 3];\n                imageData.data[pixelIndex + 3] = Math.min(alpha, existingAlpha);\n            }\n        }\n    }\n}\n\nexport function applyAlphaMask(imageData: ImageData, alphaMask: ImageData) {\n    if (\n        imageData.width != alphaMask.width ||\n        imageData.height != alphaMask.height\n    ) {\n        throw new Error(\"imageData and alphaMask are not the same size\");\n    }\n    const spread = 10;\n    for (let x = 0; x < imageData.width; x++) {\n        for (let y = 0; y < imageData.height; y++) {\n            // r, g, b, a\n            // if transparency within 10 pixels, set alpha to 1, otherwise to zero.\n            // binary alpha inversion with spread\n            let alpha = false;\n            for (\n                let x2 = Math.max(0, x - spread);\n                x2 < Math.min(imageData.width, x + spread);\n                x2++\n            ) {\n                for (\n                    let y2 = Math.max(0, y - spread);\n                    y2 < Math.min(imageData.height, y + spread);\n                    y2++\n                ) {\n                    const alphaValue =\n                        alphaMask.data[y2 * alphaMask.width * 4 + x2 * 4 + 3];\n                    if (alphaValue < 255) {\n                        alpha = true;\n                    }\n                }\n            }\n            const alphaIndex = y * imageData.width * 4 + x * 4 + 3;\n            if (alpha) {\n                imageData.data[alphaIndex] = 255;\n            } else {\n                imageData.data[alphaIndex] = 0;\n            }\n        }\n    }\n}\n\nexport interface ImageWorkerRequest {\n    id: string;\n    feather: boolean;\n    upscale?: boolean;\n    alphaMode: \"none\" | \"mask\" | \"alpha\";\n    pixels: Uint8ClampedArray;\n    alphaPixels?: Uint8ClampedArray;\n    width: number;\n    height: number;\n    featherWidth?: number;\n    selectionOverlay: Rect;\n}\n\nexport interface ImageWorkerResponse {\n    id: string;\n    pixels: Uint8ClampedArray;\n}\n\nexport class ImageUtilWorker {\n    private workers: Array<Worker> = [];\n    private callbacks: { [key: string]: (event: MessageEvent) => void } = {};\n    private cursor = 0;\n\n    constructor(numWorkers = 3) {\n        for (let i = 0; i < numWorkers; i++) {\n            this.workers[i] = new Worker(\n                `${process.env.PUBLIC_URL}/workers/imageutil.js`\n            );\n            this.workers[i].addEventListener(\n                \"message\",\n                this.onMessage.bind(this)\n            );\n        }\n    }\n\n    onMessage(event: MessageEvent) {\n        const resp = event.data as ImageWorkerResponse;\n        this.callbacks[resp.id](event);\n        delete this.callbacks[resp.id];\n    }\n\n    async processRequest(\n        request: ImageWorkerRequest\n    ): Promise<ImageWorkerResponse> {\n        return new Promise((resolve, reject) => {\n            this.callbacks[request.id] = (event) => {\n                resolve(event.data);\n            };\n            this.workers[this.cursor].postMessage({\n                ...request,\n            });\n            this.cursor = (this.cursor + 1) % this.workers.length;\n        });\n    }\n\n    destroy() {\n        for (let key in this.workers) {\n            this.workers[key].terminate();\n        }\n    }\n}\n\nexport function createEncodedThumbnail(encodedImage: string): Promise<string> {\n    return new Promise((resolve, reject) => {\n        // use html5 canvas\n        // crop to square aspect ratio on 128x128 canvas\n        const canvas = document.createElement(\"canvas\");\n        canvas.width = 128;\n        canvas.height = 128;\n\n        const image = new Image();\n        image.src = `data:image/png;base64,${encodedImage}`;\n        image.onload = () => {\n            const context = canvas.getContext(\"2d\");\n            if (!context) {\n                throw new Error(\"Could not create canvas context\");\n            }\n            const width = 128;\n            const height = 128;\n            canvas.width = width;\n            canvas.height = height;\n\n            const aspectRatio = image.width / image.height;\n            const cropWidth =\n                aspectRatio > 1 ? image.width : image.height * aspectRatio;\n            const cropHeight =\n                aspectRatio > 1 ? image.width / aspectRatio : image.height;\n            const cropX = (image.width - cropWidth) / 2;\n            const cropY = (image.height - cropHeight) / 2;\n            context.drawImage(\n                image,\n                cropX,\n                cropY,\n                cropWidth,\n                cropHeight,\n                0,\n                0,\n                width,\n                height\n            );\n\n            // save to png\n            const imageUrl = canvas.toDataURL(\"image/png\");\n            const base64 = imageUrl.split(\",\")[1];\n            resolve(base64);\n        };\n    });\n}\n\nexport function decodeImage(encodedImage: string): Promise<HTMLImageElement> {\n    return new Promise((resolve, reject) => {\n        const image = new Image();\n        image.src = `data:image/png;base64,${encodedImage}`;\n        image.onload = () => {\n            resolve(image);\n        };\n    });\n}\n\nexport function binaryImageToDataBase64(binaryImage: any): string {\n    const buf = Buffer.from(binaryImage, \"binary\");\n    return buf.toString(\"base64\");\n}\n\nexport function resizeEncodedImage(\n    encodedImage: string,\n    width: number,\n    height: number,\n    format: \"png\" | \"jpeg\",\n): Promise<string> {\n    return new Promise((resolve, reject) => {\n        // use html5 canvas\n        // crop to square aspect ratio on 128x128 canvas\n        const canvas = document.createElement(\"canvas\");\n        canvas.width = width;\n        canvas.height = height;\n\n        const image = new Image();\n        image.src = `data:image/${format};base64,${encodedImage}`;\n        image.onload = () => {\n            const context = canvas.getContext(\"2d\");\n            if (!context) {\n                throw new Error(\"Could not create canvas context\");\n            }\n            canvas.width = width;\n            canvas.height = height;\n\n            context.drawImage(\n                image,\n                0,\n                0,\n                image.width,\n                image.height,\n                0,\n                0,\n                width,\n                height\n            );\n\n            // save to png\n            const imageUrl = canvas.toDataURL(\"image/${format}\");\n            const base64 = imageUrl.split(\",\")[1];\n            resolve(base64);\n        };\n    });\n}\n\nexport function encodedImageToBlob(encodedImage: string): Blob {\n    const binaryString = atob(encodedImage);\n    const arr = [];\n    for (let i = 0; i < binaryString.length; i++) {\n        arr.push(binaryString.charCodeAt(i));\n    }\n    return new Blob([new Uint8Array(arr)], {\n        type: \"image/png\",\n    });\n}\n\n// This function is made to work with S3 presigned urls.\n// Solution found at https://stackoverflow.com/questions/22531114/how-to-upload-to-aws-s3-directly-from-browser-using-a-pre-signed-url-instead-of\nexport function uploadBlob(signedUrl: string, blob: Blob): Promise<void> {\n    return new Promise((resolve, reject) => {\n        var xhr = new XMLHttpRequest();\n        xhr.open(\"PUT\", signedUrl, true);\n        xhr.setRequestHeader(\"Content-Type\", \"image/png\");\n        xhr.onload = () => {\n            if (xhr.status < 400) {\n                // success!\n                resolve();\n            }\n        };\n        xhr.onerror = (err) => {\n            // error...\n            reject(err);\n        };\n        xhr.send(blob); // `file` is a File object here\n    });\n}\n","import React, { FC, useEffect, useRef, useState } from \"react\";\nimport { Modal } from \"react-bootstrap\";\nimport { propTypes } from \"react-bootstrap/esm/Image\";\n\ninterface Props {\n    show: boolean;\n    title?: string;\n}\n\n// Show modal with child contents\nexport const BusyModal: FC<Props> = ({ show, title, children }) => {\n    return (\n        <Modal show={show} backdrop=\"static\" keyboard={false}>\n            <Modal.Header closeButton>\n                <Modal.Title>{title || \"Processing\"}</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                {children || (\n                    <div className=\"d-flex justify-content-center\">\n                        <div className=\"spinner-border\" role=\"status\">\n                            <span className=\"sr-only\">Please Wait...</span>\n                        </div>\n                    </div>\n                )}\n            </Modal.Body>\n        </Modal>\n    );\n};\n","import moment from \"moment\";\n\nimport { Image } from \"../client\";\n\nexport interface LocalImage extends Image {\n    imageData?: string;\n}\n\n/**\n * This class uses indexedDB to store images locally.\n */\nexport class LocalImagesStore {\n    private db: IDBDatabase | null = null;\n\n    init(): Promise<void> {\n        return new Promise((resolve, reject) => {\n            const request = indexedDB.open(\"aibrush\", 4);\n            request.onupgradeneeded = (evt) => {\n                const db = request.result;\n                // create object store if it doesn't exist\n                // const imagesStore = db.createObjectStore(\"images\", { keyPath: \"id\" });\n                let imagesStore: IDBObjectStore;\n                if (!db.objectStoreNames.contains(\"images\")) {\n                    imagesStore = db.createObjectStore(\"images\", {\n                        keyPath: \"id\",\n                    });\n                } else {\n                    imagesStore = request.transaction?.objectStore(\n                        \"images\"\n                    ) as IDBObjectStore;\n                }\n                imagesStore.createIndex(\"updated_at\", \"updated_at\", {\n                    unique: false,\n                });\n                imagesStore.createIndex(\"deleted_at\", \"deleted_at\", {\n                    unique: false,\n                });\n                console.log(\"Local images store updated\");\n            };\n            request.onsuccess = (_) => {\n                this.db = request.result;\n                console.log(\"Local images store initialized\");\n                resolve();\n            };\n            request.onerror = (evt) => {\n                console.error(\"error opening indexeddb\", evt);\n                reject(evt);\n            };\n        });\n    }\n\n    // migrate old images to new format\n    private hydrateImage(image: LocalImage): LocalImage {\n        if (!image) {\n            return image;\n        }\n        if (!image.params) {\n            const legacyImage = image as any;\n            image.params = {\n                prompt: legacyImage.phrases.join(\", \"),\n                negative_prompt: legacyImage.negative_phrases.join(\", \"),\n                width: legacyImage.width,\n                height: legacyImage.height,\n                denoising_strength: legacyImage.stable_diffusion_strength,\n                steps: legacyImage.iterations,\n            }\n        }\n        return image;\n    }\n\n    async getImage(id: string): Promise<LocalImage | null> {\n        if (!this.db) {\n            throw new Error(\"not initialized\");\n        }\n        const transaction = this.db.transaction([\"images\"]);\n        const store = transaction.objectStore(\"images\");\n        const request = store.get(id);\n        return new Promise((resolve, reject) => {\n            request.onsuccess = (evt) => {\n                resolve(this.hydrateImage(request.result));\n            };\n            request.onerror = (evt) => {\n                console.error(\"error getting image\", evt);\n                reject(evt);\n            };\n        });\n    }\n\n    async saveImage(image: LocalImage): Promise<void> {\n        if (!this.db) {\n            throw new Error(\"not initialized\");\n        }\n        await this.cleanupDeletedImages();\n        const transaction = this.db.transaction([\"images\"], \"readwrite\");\n        const store = transaction.objectStore(\"images\");\n        const request = store.put({\n            ...image,\n            updated_at: moment().valueOf(),\n        });\n        return new Promise((resolve, reject) => {\n            request.onsuccess = (evt) => {\n                resolve();\n            };\n            request.onerror = (evt) => {\n                console.error(\"error saving image\", evt);\n                reject(evt);\n            };\n        });\n    }\n\n    async hardDeleteImage(id: string): Promise<void> {\n        if (!this.db) {\n            throw new Error(\"not initialized\");\n        }\n        const transaction = this.db.transaction([\"images\"], \"readwrite\");\n        const store = transaction.objectStore(\"images\");\n        const request = store.delete(id);\n        return new Promise((resolve, reject) => {\n            request.onsuccess = (evt) => {\n                console.log(`image ${id} permanently deleted`);\n                resolve();\n            };\n            request.onerror = (evt) => {\n                console.error(\"error deleting image\", evt);\n                reject(evt);\n            };\n        });\n    }\n\n    async deleteImage(id: string): Promise<void> {\n        if (!this.db) {\n            throw new Error(\"not initialized\");\n        }\n        // fetch the image first. If it has a deletedAt timestamp already, or if it's not\n        // in \"completed\" state, hard delete it. Otherwise, set the deletedAt timestamp.\n        const image = await this.getImage(id);\n        if (!image) {\n            console.error(\"image not found\", id);\n            return;\n        }\n        if (image.deleted_at || image.status !== \"completed\") {\n            return this.hardDeleteImage(id);\n        }\n        const transaction = this.db.transaction([\"images\"], \"readwrite\");\n        const store = transaction.objectStore(\"images\");\n        const request = store.put({\n            ...image,\n            deleted_at: moment().valueOf(),\n        });\n        return new Promise((resolve, reject) => {\n            request.onsuccess = (evt) => {\n                resolve();\n            };\n            request.onerror = (evt) => {\n                console.error(\"error deleting image\", evt);\n                reject(evt);\n            };\n        });\n    }\n\n    async listImages(\n        updated_at: number,\n        direction: IDBCursorDirection,\n        count: number,\n        search: string\n    ): Promise<LocalImage[]> {\n        // use updated_at index\n        if (!this.db) {\n            throw new Error(\"not initialized\");\n        }\n        const transaction = this.db.transaction([\"images\"]);\n        const store = transaction.objectStore(\"images\");\n        const index = store.index(\"updated_at\");\n        const range =\n            direction == \"next\"\n                ? IDBKeyRange.lowerBound(updated_at)\n                : IDBKeyRange.upperBound(updated_at);\n        const request = index.openCursor(range, direction);\n        return new Promise((resolve, reject) => {\n            const images: LocalImage[] = [];\n            request.onsuccess = (evt) => {\n                const cursor = request.result;\n                if (cursor) {\n                    const image: LocalImage = this.hydrateImage(cursor.value);\n                    const prompt = (image.params.prompt || \"\").toLowerCase();\n                    if (\n                        !image.deleted_at &&\n                        (!search || prompt.includes(search.toLowerCase()))\n                    ) {\n                        images.push(image);\n                    }\n                    if (images.length < count) {\n                        cursor.continue();\n                    } else {\n                        resolve(images);\n                    }\n                } else {\n                    resolve(images);\n                }\n            };\n            request.onerror = (evt) => {\n                console.error(\"error listing images\", evt);\n                reject(evt);\n            };\n        });\n    }\n\n    async clearImages(): Promise<void> {\n        // clear from both indexes\n        if (!this.db) {\n            throw new Error(\"not initialized\");\n        }\n        const transaction = this.db.transaction([\"images\"], \"readwrite\");\n        const imagesStore = transaction.objectStore(\"images\");\n        const imagesRequest = imagesStore.clear();\n        return new Promise((resolve, reject) => {\n            imagesRequest.onsuccess = (evt) => {\n                resolve();\n            };\n            imagesRequest.onerror = (evt) => {\n                console.error(\"error clearing images\", evt);\n                reject(evt);\n            };\n        });\n    }\n\n    async getDeletedImages(olderThan?: number): Promise<LocalImage[]> {\n        if (!this.db) {\n            throw new Error(\"not initialized\");\n        }\n        // refactor to use deleted_at index\n        const transaction = this.db.transaction([\"images\"]);\n        const store = transaction.objectStore(\"images\");\n        const index = store.index(\"deleted_at\");\n        // const request = index.openCursor();\n        // get cursor for all deleted_at values\n        const request = index.openCursor(\n            olderThan\n                ? IDBKeyRange.upperBound(olderThan)\n                : IDBKeyRange.lowerBound(1),\n            olderThan ? \"prev\" : \"next\"\n        );\n        return new Promise((resolve, reject) => {\n            const images: LocalImage[] = [];\n            request.onsuccess = (evt) => {\n                const cursor = request.result;\n                if (cursor) {\n                    const image: LocalImage = cursor.value;\n                    if (images.length < 50 && image.deleted_at) {\n                        images.push(cursor.value);\n                    }\n                    cursor.continue();\n                } else {\n                    resolve(images);\n                }\n            };\n            request.onerror = (evt) => {\n                console.error(\"error listing images\", evt);\n                reject(evt);\n            };\n        });\n    }\n\n    async clearDeletedImages(): Promise<void> {\n        if (!this.db) {\n            throw new Error(\"not initialized\");\n        }\n        let deletedImages = await this.getDeletedImages();\n        while (deletedImages.length > 0) {\n            // hard delete all deleted images\n            const promises = deletedImages.map((image) => {\n                return this.hardDeleteImage(image.id);\n            });\n            await Promise.all(promises);\n            deletedImages = await this.getDeletedImages();\n        }\n    }\n\n    async cleanupDeletedImages(): Promise<void> {\n        // delete images that are more than 1 day old\n        let deletedImages = await this.getDeletedImages(\n            moment().subtract(1, \"hours\").valueOf()\n        );\n        while (deletedImages.length > 0) {\n            // hard delete all deleted images\n            const promises = deletedImages.map((image) => {\n                return this.hardDeleteImage(image.id);\n            });\n            await Promise.all(promises);\n            deletedImages = await this.getDeletedImages(\n                moment().subtract(1, \"hours\").valueOf()\n            );\n        }\n    }\n}\n","// Login react component with hooks\nimport React, { useState, FC } from \"react\";\nimport * as axios from \"axios\";\nimport qs from \"qs\";\nimport { AIBrushApi, LoginResult } from \"../client/api\";\n\nconsole.log(process.env)\nconst DISCORD_CLIENT_ID = \"1043951225944678490\";\n\ninterface LoginProps {\n    client: AIBrushApi;\n    onLogin: (loginResult: LoginResult) => void;\n}\n\nexport const Login: FC<LoginProps> = (props) => {\n    // login form accepts email only\n    const [email, setEmail] = useState(\"\");\n    const [emailSubmitted, setEmailSubmitted] = useState(false);\n    const [code, setCode] = useState(\"\");\n    const [err, setErr] = useState(\"\");\n\n    // check query string for invite_code\n    const query = window.location.search;\n    const queryParams = qs.parse(query.substring(1));\n    const inviteCode = queryParams[\"invite_code\"];\n\n    const onLogin = async () => {\n        // clear error\n        setErr(\"\");\n        // validate valid email\n        if (!email.match(/^[^@]+@[^@]+\\.[^@]+$/)) {\n            setErr(\"Invalid email address\");\n            return;\n        }\n\n        try {\n            await props.client.login({\n                email: email,\n                invite_code: inviteCode as string,\n            });\n            setEmailSubmitted(true);\n        } catch (err) {\n            console.error(err);\n            setErr(\"Could not login\");\n        }\n    };\n\n    const discordLink = () => {\n        // localhost url:\n        // https://discord.com/api/oauth2/authorize?client_id=1043951225944678490&redirect_uri=http%3A%2F%2Flocalhost%3A3001%2Fdiscord-login&response_type=code&scope=identify%20email\n        // prod url:\n        // https://discord.com/api/oauth2/authorize?client_id=1043951225944678490&redirect_uri=https%3A%2F%2Fwww.aibrush.art%2Fdiscord-login&response_type=code&scope=identify%20email\n        const host = window.location.host;\n        const protocol = window.location.protocol;\n        const redirectUri = `${protocol}//${host}/discord-login`;\n        const url = `https://discord.com/api/oauth2/authorize?client_id=${DISCORD_CLIENT_ID}&redirect_uri=${redirectUri}&response_type=code&scope=identify%20email`;\n        return url;\n    };\n\n    const onVerify = async () => {\n        // clear error\n        setErr(\"\");\n        // attempt to verify code\n        try {\n            const result = await props.client.verify({\n                email,\n                code,\n            });\n            props.onLogin(result.data);\n        } catch (err) {\n            console.error(err);\n            setErr(\"Failed to verify code\");\n        }\n    };\n\n    // bootstrap login form\n    return (\n        <>\n            <div\n                className=\"row\"\n                style={{\n                    height: \"100vh\",\n                    marginLeft: \"0px\",\n                    marginRight: \"0px\",\n                }}\n            >\n                <div className=\"col-md-6 login-splash\">\n                    {/* <div className=\"center-cropped\" style={{backgroundImage: \"url(/images/scifi-dreamland.png)\"}}></div> */}\n                    <img\n                        className=\"center-cropped\"\n                        src=\"/images/scifi-dreamland.png\"\n                    />\n                </div>\n                <div className=\"col-md-6\">\n                    <div\n                        style={{\n                            fontWeight: 500,\n                            fontSize: \"48px\",\n                            marginTop: \"200px\",\n                        }}\n                    >\n                        AiBrush\n                    </div>\n\n                    <div\n                        style={{\n                            marginLeft: \"10%\",\n                            marginRight: \"10%\",\n                            marginTop: \"88px\",\n                            marginBottom: \"24px\",\n                        }}\n                    >\n                        Login With Email\n                    </div>\n                    {/* Display error if one is set */}\n                    {/* Use <p class=\"text-danger\" */}\n                    {err && <p className=\"text-danger\">{err}</p>}\n                    {err && (\n                        <p className=\"text-info\">\n                            If you don't have an account yet, request one by\n                            sending an email to{\" \"}\n                            <a href=\"mailto:admin@aibrush.art\">\n                                admin@aibrush.art\n                            </a>\n                        </p>\n                    )}\n                    <div\n                        style={{\n                            marginLeft: \"10%\",\n                            marginRight: \"10%\",\n                            marginTop: \"24px\",\n                            textAlign: \"left\",\n                        }}\n                    >\n                        {/* If email submitted, show verify code form*/}\n                        {emailSubmitted && (\n                            <>\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"verifyCode\">\n                                        Verify Code\n                                    </label>\n                                    <input\n                                        type=\"text\"\n                                        className=\"form-control\"\n                                        id=\"verifyCode\"\n                                        placeholder=\"Verification Code\"\n                                        value={code}\n                                        onChange={(e) =>\n                                            setCode(e.target.value)\n                                        }\n                                    />\n                                </div>\n                                {/* Cancel verification and go back to email */}\n                                <button\n                                    className=\"btn btn-secondary\"\n                                    onClick={() => setEmailSubmitted(false)}\n                                >\n                                    Cancel\n                                </button>\n                                &nbsp;\n                                {/* Verify code */}\n                                <button\n                                    type=\"button\"\n                                    className=\"btn btn-primary\"\n                                    onClick={(e) => {\n                                        e.preventDefault();\n                                        onVerify();\n                                    }}\n                                >\n                                    Verify\n                                </button>\n                            </>\n                        )}\n                        {/* Else, show login form */}\n                        {!emailSubmitted && (\n                            <>\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"email\">Email address</label>\n                                    <input\n                                        type=\"email\"\n                                        className=\"form-control\"\n                                        id=\"email\"\n                                        aria-describedby=\"emailHelp\"\n                                        placeholder=\"Enter email\"\n                                        value={email}\n                                        onChange={(e) =>\n                                            setEmail(e.target.value.trim())\n                                        }\n                                    />\n                                </div>\n                                <button\n                                    type=\"button\"\n                                    className=\"btn btn-primary\"\n                                    style={{ float: \"right\" }}\n                                    onClick={(e) => {\n                                        e.preventDefault();\n                                        onLogin();\n                                    }}\n                                >\n                                    Login\n                                </button>\n                            </>\n                        )}\n                    </div>\n                    <div\n                        style={{\n                            marginLeft: \"10%\",\n                            marginRight: \"10%\",\n                            marginTop: \"88px\",\n                            marginBottom: \"24px\",\n                        }}\n                    >\n                        <hr/>\n                        OR\n                    </div>\n                    <div\n                        style={{\n                            marginLeft: \"10%\",\n                            marginRight: \"10%\",\n                            marginTop: \"24px\",\n                        }}\n                    >\n                        <a href={discordLink()} className=\"btn btn-primary\">\n                            <i className=\"fab fa-discord\"></i> Login With Discord\n                        </a>\n                    </div>\n                </div>\n            </div>\n        </>\n    );\n};\n","// Given a set of credentials, this component will refresh them\n// every 5 minutes and invoke the onCredentialsRefreshed callback\n\nimport React, { useEffect, FC } from \"react\"\nimport { LoginResult, AIBrushApi } from \"../client/api\";\n\ninterface TokenRefresherProps {\n    onCredentialsRefreshed: (loginResult: LoginResult) => void;\n    onCredentialsExpired: () => void;\n    api: AIBrushApi;\n    credentials: LoginResult;\n}\n\nexport const TokenRefresher : FC<TokenRefresherProps> = ({ onCredentialsRefreshed, onCredentialsExpired, api, credentials }) => {\n    useEffect(() => {\n        const interval = setInterval(() => {\n            if (credentials && credentials.refreshToken) {\n                api.refresh({refreshToken: credentials.refreshToken}).then(loginResult => {\n                    onCredentialsRefreshed(loginResult.data);\n                }).catch(() => {\n                    onCredentialsExpired();\n                });\n            }\n\n        }, 5 * 60 * 1000);\n        return () => {\n            clearInterval(interval);\n        };\n    }, [credentials, api, onCredentialsRefreshed]);\n    return <div></div>;\n}","import React, { FC, useEffect, useState } from 'react';\nimport { AIBrushApi } from \"../client/api\";\n\ninterface HealthcheckerProps {\n    api: AIBrushApi;\n}\n\nexport const Healthchecker: FC<HealthcheckerProps> = ({ api }) => {\n    // automatically check health every 5 seconds\n    const [healthCheck, setHealthCheck] = useState(true);\n    \n    useEffect(() => {\n        const interval = setInterval(() => {\n            api.healthcheck().then(() => setHealthCheck(true)).catch(() => setHealthCheck(false));\n        }, 5000);\n\n        return () => clearInterval(interval);\n    }, [api]);\n\n    // only display bootstrap danger alert if healthcheck failed\n    // \"service is unavailable\"\n    return (\n        <div className=\"alert alert-danger\" role=\"alert\" style={{ display: healthCheck ? 'none' : 'block' }}>\n            <strong>Looks like we're having some trouble reaching the server.</strong>\n        </div>\n    );\n}\n\n","import React, { useState } from \"react\";\nimport { Button, Form, InputGroup, Alert } from \"react-bootstrap\";\nimport { AIBrushApi, CreateDepositCodeInput } from \"../../client/api\";\nimport CopyToClipboard from \"react-copy-to-clipboard\";\n\ninterface Props {\n    api: AIBrushApi;\n}\n\nconst GenerateCode: React.FC<Props> = ({ api }) => {\n    const [amount, setAmount] = useState<number>(100);\n    const [generatedCode, setGeneratedCode] = useState<string | null>(null);\n    const [copied, setCopied] = useState<boolean>(false);\n\n    const handleSubmit = async (event: React.FormEvent) => {\n        event.preventDefault();\n\n        const input: CreateDepositCodeInput = { amount };\n        const result = await api.createDepositCode(input);\n        setGeneratedCode(result.data.code);\n    };\n\n    const handleCopy = () => {\n        setCopied(true);\n        setTimeout(() => setCopied(false), 3000);\n    };\n\n    return (\n        <div>\n            <h4>Generate deposit code</h4>\n            <Form onSubmit={handleSubmit} style={{marginTop: \"16px\"}}>\n                <InputGroup className=\"mb-3\">\n                    {/* amount label */}\n                    <label style={{fontSize: \"24px\", marginRight: \"8px\"}}>Amount:</label>\n                    <Form.Control\n                        type=\"number\"\n                        placeholder=\"Amount\"\n                        value={amount}\n                        onChange={(e) => setAmount(parseInt(e.target.value))}\n                    />\n                    <InputGroup.Append>\n                        <Button\n                            variant=\"primary\"\n                            type=\"submit\"\n                            style={{ marginLeft: \"16px\" }}\n                        >\n                            Generate Code\n                        </Button>\n                    </InputGroup.Append>\n                </InputGroup>\n            </Form>\n\n            {generatedCode && (\n                <div className=\"mb-3\">\n                    <strong>Generated Code: </strong> {generatedCode}\n                    <CopyToClipboard text={generatedCode} onCopy={handleCopy}>\n                        <Button variant=\"secondary\" className=\"ml-2\">\n                            Copy to clipboard\n                        </Button>\n                    </CopyToClipboard>\n                </div>\n            )}\n\n            {copied && (\n                <Alert variant=\"success\">Code copied to clipboard!</Alert>\n            )}\n        </div>\n    );\n};\n\nexport default GenerateCode;\n","import { FC, useEffect, useState } from \"react\";\nimport { AIBrushApi } from \"../../client/api\";\nimport { WorkerSettings, WorkerSettingsJson } from \"../../lib/globalSettings\";\n\ninterface Props {\n    api: AIBrushApi;\n}\n\n// global settings all have a \"settings_key\" and \"settings_json\" field. settings_json is any.\n\n// default \"workers\" setting:\n// {\n//     \"minimum_worker_allocations\": {\n//         \"stable_diffusion\": 0,\n//         \"stable_diffusion_inpainting\": 0,\n//         \"swinir\": 0,\n//     }\n// }\n\nexport const GlobalSettings: FC<Props> = ({ api }) => {\n    const [workerSettings, setWorkerSettings] = useState<WorkerSettingsJson>({\n        minimum_worker_allocations: {\n            stable_diffusion: 0,\n            stable_diffusion_inpainting: 0,\n            swinir: 0,\n        },\n    });\n    const [saving, setSaving] = useState<boolean>(false);\n\n    const loadWorkerSettings = async () => {\n        const settings = await api.getGlobalSettings(\"workers\");\n        setWorkerSettings(settings.data.settings_json as any);\n    };\n\n    const saveWorkerSettings = async () => {\n        setSaving(true);\n        try {\n            await api.updateGlobalSettings(\"workers\", {\n                settings_json: workerSettings,\n            });\n        } finally {\n            setSaving(false);\n        }\n    };\n\n    useEffect(() => {\n        loadWorkerSettings();\n    }, []);\n\n    return (\n        <div style={{paddingBottom: \"48px\"}}>\n            {/* Header: Create new image */}\n            <div className=\"row\">\n                <div className=\"col-12\">\n                    <h1>Global Settings</h1>\n                </div>\n            </div>\n            {/* 50px vertical spacer */}\n            <div className=\"row\">\n                <div className=\"col-12\">\n                    <div className=\"spacer\" />\n                </div>\n            </div>\n            {/* slider from 0 to 10 for each model */}\n            <div className=\"row\">\n                <div className=\"col-12\">\n                    <label htmlFor=\"stable_diffusion\">\n                        stable_diffusion: {workerSettings.minimum_worker_allocations.stable_diffusion}\n                    </label>\n                    <input\n                        style={{marginLeft: \"16px\"}}\n                        type=\"range\"\n                        min={0}\n                        max={10}\n                        value={workerSettings.minimum_worker_allocations.stable_diffusion}\n                        className=\"form-range\"\n                        id=\"stable_diffusion\"\n                        onChange={(e) => {\n                            setWorkerSettings({\n                                ...workerSettings,\n                                minimum_worker_allocations: {\n                                    ...workerSettings.minimum_worker_allocations,\n                                    stable_diffusion: parseInt(e.target.value),\n                                },\n                            });\n                        }}\n                    />\n                </div>\n            </div>\n            <div className=\"row\">\n                <div className=\"col-12\">\n                    <label htmlFor=\"stable_diffusion_inpainting\">\n                        stable_diffusion_inpainting: {workerSettings.minimum_worker_allocations.stable_diffusion_inpainting}\n                    </label>\n                    <input\n                        style={{marginLeft: \"16px\"}}\n                        type=\"range\"\n                        min={0}\n                        max={10}\n                        value={workerSettings.minimum_worker_allocations.stable_diffusion_inpainting}\n                        className=\"form-range\"\n                        id=\"stable_diffusion_inpainting\"\n                        onChange={(e) => {\n                            setWorkerSettings({\n                                ...workerSettings,\n                                minimum_worker_allocations: {\n                                    ...workerSettings.minimum_worker_allocations,\n                                    stable_diffusion_inpainting: parseInt(e.target.value),\n                                },\n                            });\n                        }}\n                    />\n                </div>\n            </div>\n            <div className=\"row\">\n                <div className=\"col-12\">\n                    <label htmlFor=\"swinir\">\n                        swinir: {workerSettings.minimum_worker_allocations.swinir}\n                    </label>\n                    <input\n                        style={{marginLeft: \"16px\"}}\n                        type=\"range\"\n                        min={0}\n                        max={10}\n                        value={workerSettings.minimum_worker_allocations.swinir}\n                        className=\"form-range\"\n                        id=\"swinir\"\n                        onChange={(e) => {\n                            setWorkerSettings({\n                                ...workerSettings,\n                                minimum_worker_allocations: {\n                                    ...workerSettings.minimum_worker_allocations,\n                                    swinir: parseInt(e.target.value),\n                                },\n                            });\n                        }}\n                    />\n                </div>\n            </div>\n            \n            \n            {/* bottom row: save button */}\n            <div className=\"row\">\n                <div className=\"col-12\">\n                    <button className=\"btn btn-primary\" onClick={saveWorkerSettings} disabled={saving}>\n                        {saving ? <>\n                            <i className=\"fas fa-spinner fa-spin\" />\n                            &nbsp; Saving...\n                        </> : \"Save\"}\n                    </button>\n                </div>\n            </div>\n        </div>\n    );\n};","import React, { FC, useState, useEffect, useRef } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { AIBrushApi } from \"../../client/api\";\nimport GenerateCode from \"./GenerateCode\";\nimport { GlobalSettings } from \"./GlobalSettings\";\n\ninterface Props {\n    api: AIBrushApi;\n}\n\nexport const Admin: FC<Props> = ({ api }) => {\n    const [links, setLinks] = useState<string[]>([]);\n\n    const onGenerateLink = async () => {\n        const inviteCode = await api.createInviteCode();\n        setLinks([...links, `/?invite_code=${inviteCode.data.id}`]);\n    };\n\n    return (\n        <div style={{ paddingBottom: \"48px\" }}>\n            {/* Header: Create new image */}\n            <div className=\"row\">\n                <div className=\"col-12\">\n                    <h1>Admin features</h1>\n                </div>\n            </div>\n            {/* 50px vertical spacer */}\n            <div className=\"row\">\n                <div className=\"col-12\">\n                    <div className=\"spacer\" />\n                </div>\n            </div>\n            <div className=\"row\">\n                <div className=\"col-12\">\n                    <div\n                        className=\"d-flex justify-content-center align-items-center\"\n                        style={{ height: \"100%\" }}\n                    >\n                        <GenerateCode api={api} />\n                    </div>\n                </div>\n            </div>\n            <hr />\n            <GlobalSettings api={api} />\n        </div>\n    );\n};\n","import React, { FC, useEffect, useState } from \"react\";\nimport { AIBrushApi, Image } from \"../client\";\nimport moment from \"moment\";\nimport { ImageThumbnail } from \"../components/ImageThumbnail\";\nimport { useHistory } from \"react-router-dom\";\nimport { BusyModal } from \"../components/BusyModal\";\n\ninterface Props {\n    api: AIBrushApi;\n    assetsUrl: string;\n}\n\nexport const DeletedImages: FC<Props> = ({ api, assetsUrl }) => {\n    const [images, setImages] = useState<Image[]>([]);\n    const [deleting, setDeleting] = useState(false);\n\n    const history = useHistory();\n\n    const loadImages = async () => {\n        const cursor = moment().add(-24, \"hours\").valueOf();\n        // TODO: special api call for deleted images?\n        const resp = await api.listImages(cursor, \"\", 100, \"asc\");\n        setImages(\n            (\n                resp.data.images?.filter((image) => !!image.deleted_at) || []\n            ).sort((a, b) => {\n                if (a.deleted_at && b.deleted_at) {\n                    return b.deleted_at - a.deleted_at;\n                }\n                return 0;\n            })\n        );\n    };\n\n    const onDeleteImage = async (image: Image) => {\n        setImages(images.filter((i) => i.id !== image.id));\n        await api.deleteImage(image.id);\n    };\n\n    const onDeleteAllImages = async () => {\n        setDeleting(true);\n        try {\n            await Promise.all(images.map((image) => api.deleteImage(image.id)));\n            setImages([]);\n        } finally {\n            setDeleting(false);\n        }\n    };\n\n    const onRestoreImage = async (image: Image) => {\n        setImages(images.filter((i) => i.id !== image.id));\n        await api.updateImage(image.id, { deleted_at: null });\n    };\n\n    useEffect(() => {\n        loadImages();\n    }, [api]);\n\n    return (\n        <div>\n            <div>\n                <div className=\"row\">\n                    <div className=\"col-12\">\n                        <h1 style={{ fontSize: \"40px\", textAlign: \"left\" }}>\n                            <i\n                                style={{ cursor: \"pointer\" }}\n                                onClick={() => history.goBack()}\n                                className=\"fas fa-chevron-left\"\n                            ></i>\n                            &nbsp; Deleted Images\n                        </h1>\n                        {/* float right \"delete all\" button */}\n                        <button\n                            className=\"btn btn-danger btn-sm image-popup-delete-button\"\n                            onClick={onDeleteAllImages}\n                            style={{\n                                float: \"right\",\n                                marginRight: \"8px\",\n                            }}\n                        >\n                            <i className=\"fa fa-trash\"></i>&nbsp;Delete All\n                        </button>\n                    </div>\n                </div>\n                <div className=\"row\" style={{ marginTop: \"32px\" }}>\n                    <div className=\"col-sm-2 offset-sm-2\">Image</div>\n                    <div className=\"col-sm-8\">Action</div>\n                </div>\n                {images.map((image) => (\n                    <div\n                        className=\"row\"\n                        style={{\n                            marginTop: \"16px\",\n                            borderBottom: \"1px solid #303030\",\n                        }}\n                        key={image.id}\n                    >\n                        <div className=\"col-sm-2 offset-sm-2\">\n                            <ImageThumbnail\n                                assetsUrl={assetsUrl}\n                                image={image}\n                                censorNSFW={true}\n                            />\n                        </div>\n                        <div\n                            className=\"col-sm-8\"\n                            style={{\n                                paddingTop: \"64px\",\n                                paddingBottom: \"64px\",\n                            }}\n                        >\n                            <button\n                                className=\"btn btn-danger btn-sm image-popup-delete-button\"\n                                onClick={() => onDeleteImage(image)}\n                                style={{\n                                    marginRight: \"8px\",\n                                }}\n                            >\n                                <i className=\"fa fa-trash\"></i>&nbsp;Delete\n                            </button>\n                            <button\n                                className=\"btn btn-primary btn-sm image-popup-restore-button\"\n                                onClick={() => onRestoreImage(image)}\n                            >\n                                <i className=\"fa fa-undo\"></i>&nbsp;Restore\n                            </button>\n                        </div>\n                    </div>\n                ))}\n            </div>\n            <BusyModal show={deleting} title=\"Deleting Images\">\n                Please wait while we delete all images...\n            </BusyModal>\n        </div>\n    );\n};\n","import React, { useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { AIBrushApi, LoginResult } from \"../client\";\n\ninterface LoginProps {\n    client: AIBrushApi;\n    onLogin: (loginResult: LoginResult) => void;\n}\n\nexport const DiscordLogin: React.FC<LoginProps> = ({client, onLogin}) => {\n    const history = useHistory();\n    const code = new URLSearchParams(window.location.search).get(\"code\");\n    \n    useEffect(() => {\n        if (code) {\n            console.log(\"logging in with code\", code);\n            client.discordLogin({code}).then((result) => {\n                console.log(\"login result\", result);\n                if (result.data.accessToken) {\n                    onLogin(result.data);\n                }\n                \n                history.push(\"/\");\n            });\n        } else {\n            history.push(\"/\");\n        }\n    }, [])\n\n    return null;\n}","import React, { FC, useEffect, useState } from \"react\";\nimport { AIBrushApi, Image } from \"../client\";\nimport moment from \"moment\";\nimport { ImageThumbnail } from \"../components/ImageThumbnail\";\nimport { useHistory } from \"react-router-dom\";\nimport { LocalImagesStore } from \"../lib/localImagesStore\";\nimport { BusyModal } from \"../components/BusyModal\";\n\ninterface Props {\n    localImages: LocalImagesStore;\n}\n\nexport const LocalDeletedImages: FC<Props> = ({ localImages }) => {\n    const [images, setImages] = useState<Image[]>([]);\n    const [deleting, setDeleting] = useState(false);\n\n    const history = useHistory();\n\n    const loadImages = async () => {\n        const deletedImages = await localImages.getDeletedImages();\n        setImages(deletedImages);\n    };\n\n    const onDeleteImage = async (image: Image) => {\n        setImages(images.filter((i) => i.id !== image.id));\n        await localImages.deleteImage(image.id);\n        if (images.length <= 5) {\n            loadImages();\n        }\n    };\n\n    const onDeleteAllImages = async () => {\n        setDeleting(true);\n        try {\n            await localImages.clearDeletedImages();\n            setImages([]);\n        } finally {\n            setDeleting(false);\n        }\n    };\n\n    const onRestoreImage = async (image: Image) => {\n        setImages(images.filter((i) => i.id !== image.id));\n        await localImages.saveImage({\n            ...image,\n            deleted_at: undefined,\n        });\n    };\n\n    useEffect(() => {\n        loadImages();\n    }, [localImages]);\n\n    return (\n        <div>\n            <div>\n                <div className=\"row\">\n                    <div className=\"col-12\">\n                        <h1 style={{ fontSize: \"40px\", textAlign: \"left\" }}>\n                            <i\n                                style={{ cursor: \"pointer\" }}\n                                onClick={() => history.goBack()}\n                                className=\"fas fa-chevron-left\"\n                            ></i>\n                            &nbsp; Deleted Images\n                        </h1>\n                        <button\n                            className=\"btn btn-danger btn-sm image-popup-delete-button\"\n                            onClick={onDeleteAllImages}\n                            style={{\n                                float: \"right\",\n                                marginRight: \"8px\",\n                            }}\n                        >\n                            <i className=\"fa fa-trash\"></i>&nbsp;Delete All\n                        </button>\n                    </div>\n                </div>\n                <div className=\"row\" style={{ marginTop: \"32px\" }}>\n                    <div className=\"col-sm-2 offset-sm-2\">Image</div>\n                    <div className=\"col-sm-8\">Action</div>\n                </div>\n                {images.map((image) => (\n                    <div\n                        className=\"row\"\n                        style={{\n                            marginTop: \"16px\",\n                            borderBottom: \"1px solid #303030\",\n                        }}\n                        key={image.id}\n                    >\n                        <div className=\"col-sm-2 offset-sm-2\">\n                            <ImageThumbnail\n                                assetsUrl={\"\"}\n                                image={image}\n                                censorNSFW={true}\n                            />\n                        </div>\n                        <div\n                            className=\"col-sm-8\"\n                            style={{\n                                paddingTop: \"64px\",\n                                paddingBottom: \"64px\",\n                            }}\n                        >\n                            <button\n                                className=\"btn btn-danger btn-sm image-popup-delete-button\"\n                                onClick={() => onDeleteImage(image)}\n                                style={{\n                                    marginRight: \"8px\",\n                                }}\n                            >\n                                <i className=\"fa fa-trash\"></i>&nbsp;Delete\n                            </button>\n                            <button\n                                className=\"btn btn-primary btn-sm image-popup-restore-button\"\n                                onClick={() => onRestoreImage(image)}\n                            >\n                                <i className=\"fa fa-undo\"></i>&nbsp;Restore\n                            </button>\n                        </div>\n                    </div>\n                ))}\n            </div>\n            <BusyModal show={deleting} title=\"Deleting Images\">\n                Please wait while we delete all images...\n            </BusyModal>\n        </div>\n    );\n};\n","export interface DBConfig {\n    dbName: string;\n    storeName: string;\n};\n\nexport class KVStore<T> {\n    private dbConfig: DBConfig;\n    private db: IDBDatabase | null = null;\n\n    constructor(dbConfig: DBConfig) {\n        this.dbConfig = dbConfig;\n    }\n\n    private async createDB(): Promise<IDBDatabase> {\n        return new Promise((resolve, reject) => {\n            const request = indexedDB.open(this.dbConfig.dbName);\n\n            request.onupgradeneeded = () => {\n                const db = request.result;\n                db.createObjectStore(this.dbConfig.storeName);\n            };\n\n            request.onsuccess = () => {\n                resolve(request.result);\n            };\n\n            request.onerror = () => {\n                reject(request.error);\n            };\n        });\n    }\n\n    private async getDB(): Promise<IDBDatabase> {\n        if (!this.db) {\n            this.db = await this.createDB();\n        }\n        return this.db;\n    }\n\n\n    async getItem(key: string): Promise<T | null> {\n        const db = await this.getDB();\n\n        return new Promise((resolve, reject) => {\n            const transaction = db.transaction(this.dbConfig.storeName);\n            const store = transaction.objectStore(this.dbConfig.storeName);\n            const request = store.get(key);\n\n            request.onsuccess = () => {\n                resolve(request.result);\n            };\n\n            request.onerror = () => {\n                resolve(null);\n            };\n        });\n    }\n\n    async setItem(key: string, value: T): Promise<void> {\n        const db = await this.getDB();\n\n        return new Promise((resolve, reject) => {\n            const transaction = db.transaction(\n                this.dbConfig.storeName,\n                \"readwrite\"\n            );\n            const store = transaction.objectStore(this.dbConfig.storeName);\n            const request = store.put(value, key);\n\n            request.onsuccess = () => {\n                resolve();\n            };\n\n            request.onerror = () => {\n                resolve();\n            };\n        });\n    }\n\n    async deleteItem(key: string): Promise<void> {\n        const db = await this.getDB();\n\n        return new Promise((resolve, reject) => {\n            const transaction = db.transaction(\n                this.dbConfig.storeName,\n                \"readwrite\"\n            );\n            const store = transaction.objectStore(this.dbConfig.storeName);\n            const request = store.delete(key);\n\n            request.onsuccess = () => {\n                resolve();\n            };\n\n            request.onerror = () => {\n                resolve();\n            };\n        });\n    }\n}\n","// V2 page\nimport React, { FC, useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport Dropdown from \"react-bootstrap/Dropdown\";\nimport { useParams, useHistory, Link } from \"react-router-dom\";\nimport moment from \"moment\";\nimport ScrollToTop from \"react-scroll-to-top\";\nimport { AIBrushApi } from \"../client\";\nimport { CreateImageInput, Image, StatusEnum } from \"../client/api\";\nimport { ImageThumbnail } from \"../components/ImageThumbnail\";\nimport { ImagePrompt, defaultArgs } from \"../components/ImagePrompt\";\nimport {\n    createEncodedThumbnail,\n    encodedImageToBlob,\n    uploadBlob,\n} from \"../lib/imageutil\";\n\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport { ImagePopup } from \"../components/ImagePopup\";\nimport { BusyModal } from \"../components/BusyModal\";\nimport { PendingImagesThumbnail } from \"../components/PendingImagesThumbnail\";\nimport { PendingImages } from \"../components/PendingImages\";\nimport {\n    ApiSocket,\n    NOTIFICATION_IMAGE_DELETED,\n    NOTIFICATION_IMAGE_UPDATED,\n} from \"../lib/apisocket\";\nimport { KVStore } from \"../lib/kvstore\";\nimport { ImagesCache } from \"../lib/imagesCache\";\n\ninterface Props {\n    api: AIBrushApi;\n    apiSocket: ApiSocket;\n    assetsUrl: string;\n}\n\nconst savedImagesCache = new ImagesCache();\n\nexport const SavedImagesPage: FC<Props> = ({ api, apiSocket, assetsUrl }) => {\n    const [creating, setCreating] = useState(false);\n    const [selectedImage, setSelectedImage] = useState<Image | null>(null);\n    const [parentImage, setParentImage] = useState<Image | null>(null);\n\n    const [showPendingImages, setShowPendingImages] = useState(false);\n\n    const [images, setImages] = useState<Array<Image>>([]);\n    const [err, setErr] = useState<string | null>(null);\n    const [hasMore, setHasMore] = useState<boolean>(true);\n    const [search, setSearch] = useState<string>(\"\");\n    const [searchDebounce, setSearchDebounce] = useState<string>(\"\");\n\n    const [bulkDeleteSelecting, setBulkDeleteSelecting] = useState(false);\n    const [bulkDeleting, setBulkDeleting] = useState(false);\n    const [bulkDeleteIds, setBulkDeleteIds] = useState<{\n        [key: string]: boolean;\n    }>({});\n\n    const [censorNSFW, setCensorNSFW] = useState(true);\n\n    const { id } = useParams<{ id?: string }>();\n    const history = useHistory();\n\n    useEffect(() => {\n        let handle = setTimeout(() => {\n            setSearch(searchDebounce);\n        }, 500);\n        return () => {\n            clearTimeout(handle);\n        };\n    }, [searchDebounce]);\n\n    useEffect(() => {\n        if (id) {\n            // check if the image is already loaded\n            const image = images.find((image) => image.id === id);\n            if (image) {\n                setSelectedImage(image);\n            }\n            // refresh\n            api.getImage(id).then((image) => {\n                setSelectedImage(image.data);\n            });\n        } else {\n            setSelectedImage(null);\n        }\n    }, [id]);\n\n    const onSubmit = async (input: CreateImageInput) => {\n        setCreating(true);\n        setParentImage(null);\n        setErr(null);\n        window.scrollTo(0, 0);\n        try {\n            await api.createImage(input);\n        } catch (e: any) {\n            console.error(e);\n            setErr(\"Error creating image\");\n        } finally {\n            setCreating(false);\n        }\n    };\n\n    const onEditNewImage = async (input: CreateImageInput) => {\n        setCreating(true);\n        setParentImage(null);\n        setErr(null);\n        window.scrollTo(0, 0);\n        try {\n            const encodedImage = input.encoded_image!;\n            const encodedThumbnail = await createEncodedThumbnail(encodedImage);\n            const newImages = await api.createImage({\n                ...input,\n                encoded_image: undefined,\n            });\n            if (newImages.data.images) {\n                const image = newImages.data.images![0];\n                const uploadUrls = await api.getImageUploadUrls(image.id);\n                // convert base64 encoded image to binary to upload as image/png with axios\n                const blob = encodedImageToBlob(encodedImage);\n                const thumbnailBlob = encodedImageToBlob(encodedThumbnail);\n                const imagePromise = uploadBlob(\n                    uploadUrls.data.image_url!,\n                    blob\n                );\n                const thumbnailPromise = uploadBlob(\n                    uploadUrls.data.thumbnail_url!,\n                    thumbnailBlob\n                );\n                await Promise.all([imagePromise, thumbnailPromise]);\n\n                history.push(`/image-editor/${image.id}`);\n            }\n        } catch (e: any) {\n            console.error(e);\n            setErr(\"Error creating image\");\n        } finally {\n            setCreating(false);\n        }\n    };\n\n    const onNSFW = (image: Image, nsfw: boolean) => {\n        api.updateImage(image.id, { nsfw }).then((res) => {\n            setImages((images) => {\n                return images.map((i) => {\n                    if (i.id === image.id) {\n                        return res.data;\n                    }\n                    return i;\n                });\n            });\n            setSelectedImage(res.data);\n        });\n    };\n\n    useEffect(() => {\n        if (!api) {\n            return;\n        }\n        const loadImages = async () => {\n            console.log(\"Initial load images\");\n            // clear error\n            setErr(null);\n            setHasMore(true);\n            try {\n                const cursor = moment().add(1, \"minutes\").valueOf();\n                // const resp = await api.listImages(cursor, search, 100, \"desc\");\n                const imagesResult = await savedImagesCache.listImages(\n                    api,\n                    cursor,\n                    search,\n                    100,\n                    \"desc\"\n                );\n                if (imagesResult) {\n                    console.log(\"Initial load images\", imagesResult.length);\n                    setImages(imagesResult.sort(sortImages));\n                }\n                return 0;\n            } catch (err) {\n                setErr(\"Could not load images\");\n                console.error(err);\n            }\n        };\n        loadImages();\n    }, [api, search]);\n\n    useEffect(() => {\n        if (!api) {\n            return;\n        }\n\n        const pollImages = async (images: Array<Image>) => {\n            // clear error\n            setErr(null);\n            // set cursor to max updated_at from images\n            const cursor = images.reduce((max, image) => {\n                return Math.max(max, image.updated_at);\n            }, 0);\n\n            try {\n                const imagesResult = await savedImagesCache.listImages(\n                    api,\n                    cursor + 1,\n                    search,\n                    100,\n                    \"asc\"\n                );\n                if (imagesResult) {\n                    let latestCursor = cursor;\n                    for (let image of imagesResult) {\n                        if (image.updated_at > latestCursor) {\n                            latestCursor = image.updated_at;\n                        }\n                    }\n\n                    // split resp.data.images into \"new\" and \"updated\" lists\n                    // image is \"new\" if it's not in images\n                    const newImages = imagesResult.filter((image) => {\n                        return images.findIndex((i) => i.id === image.id) < 0;\n                    });\n                    const updatedImages = imagesResult.filter((image) => {\n                        return images.findIndex((i) => i.id === image.id) >= 0;\n                    });\n                    setImages((images) => {\n                        const deletedIds: { [key: string]: boolean } = {};\n                        for (let image of newImages) {\n                            if (image.deleted_at) {\n                                deletedIds[image.id] = true;\n                                console.log(\n                                    `Deleting image ${image.id} from list`\n                                );\n                            }\n                        }\n                        for (let image of updatedImages) {\n                            if (image.deleted_at) {\n                                deletedIds[image.id] = true;\n                                console.log(\n                                    `Deleting image ${image.id} from list`\n                                );\n                            }\n                        }\n                        images = images.filter(\n                            (image) => !deletedIds[image.id]\n                        );\n                        return [\n                            ...images.map((image) => {\n                                const updatedImage = updatedImages.find(\n                                    (i) => i.id === image.id\n                                );\n                                if (updatedImage) {\n                                    return updatedImage;\n                                }\n                                return image;\n                            }),\n                            ...newImages.filter((image) => !image.deleted_at),\n                        ].sort(sortImages);\n                    });\n                }\n                return images;\n            } catch (err) {\n                setErr(\"Could not load images\");\n                console.error(err);\n            }\n        };\n\n        // polling is now a fallback for when the websocket connection fails\n        const timerHandle = setInterval(() => {\n            pollImages(images);\n        }, 60 * 1000);\n        return () => {\n            clearInterval(timerHandle);\n        };\n    }, [api, images, search]);\n\n    useEffect(() => {\n        // de-duplicate images by id\n        // first check if there are any duplicates\n        // I know, I should figure out where the duplicates are coming from,\n        // but I'm lazy.\n        const ids = images.map((image) => image.id);\n        const uniqueIds = new Set(ids);\n        if (ids.length !== uniqueIds.size) {\n            setImages((images) => {\n                // there are duplicates\n                const uniqueImages = images.filter((image, index) => {\n                    return ids.indexOf(image.id) === index;\n                });\n                return uniqueImages.sort(sortImages);\n            });\n        }\n    }, [images]);\n\n    useEffect(() => {\n        const onMessage = async (message: string) => {\n            const payload = JSON.parse(message);\n            if (\n                payload.type === NOTIFICATION_IMAGE_UPDATED ||\n                payload.type === NOTIFICATION_IMAGE_DELETED\n            ) {\n                const updatedImage = await api.getImage(payload.id);\n                if (updatedImage.data.temporary) {\n                    return;\n                }\n                setImages((images) => {\n                    const index = images.findIndex(\n                        (image) => image.id === updatedImage.data.id\n                    );\n                    let updatedImages = images;\n                    if (index >= 0) {\n                        updatedImages = images.map((image) => {\n                            if (image.id === updatedImage.data.id) {\n                                return updatedImage.data;\n                            }\n                            return image;\n                        });\n                    } else {\n                        updatedImages = [...images, updatedImage.data];\n                    }\n                    return updatedImages.sort(sortImages);\n                });\n            }\n        };\n        apiSocket.addMessageListener(onMessage);\n        return () => {\n            apiSocket.removeMessageListener(onMessage);\n        };\n    }, [apiSocket]);\n\n    const isPendingOrProcessing = (image: Image) => {\n        return (\n            image.status === StatusEnum.Pending ||\n            image.status === StatusEnum.Processing\n        );\n    };\n\n    const sortImages = (a: Image, b: Image) => {\n        // pending and processing images always come first\n        if (isPendingOrProcessing(a) && !isPendingOrProcessing(b)) {\n            return -1;\n        } else if (!isPendingOrProcessing(a) && isPendingOrProcessing(b)) {\n            return 1;\n        }\n        // if the parent is the same, sort by score descending\n        // otherwise, sort by updated_at\n        if (\n            a.parent === b.parent &&\n            a.params.prompt == b.params.prompt &&\n            a.status !== StatusEnum.Pending &&\n            b.status !== StatusEnum.Pending\n        ) {\n            // if the score is the same, sort by updated_at\n            let aScore = a.score;\n            let bScore = b.score;\n            // working around a bug where negative score was assigned\n            // for an empty negative prompt.\n            if (a.params.prompt!.trim() !== \"\") {\n                aScore = aScore - a.negative_score;\n            }\n            if (b.params.prompt!.trim() !== \"\") {\n                bScore = bScore - b.negative_score;\n            }\n            if (aScore == bScore) {\n                return b.updated_at - a.updated_at;\n            }\n            return bScore - aScore;\n        }\n\n        return b.updated_at - a.updated_at;\n    };\n\n    const onLoadMore = async () => {\n        // get the minimum updated_at from images\n        let minUpdatedAt = moment().valueOf();\n        images.forEach((image) => {\n            minUpdatedAt = Math.min(minUpdatedAt, image.updated_at);\n        });\n        // load images in descending order from updated_at\n        let imagesResult = await savedImagesCache.listImages(\n            api,\n            minUpdatedAt - 1,\n            search,\n            100,\n            \"desc\"\n        );\n        if (imagesResult && imagesResult.length > 0) {\n            // combine images with new images and sort by updated_at descending\n            setImages((images) => {\n                const imagesById = images.reduce((acc, image) => {\n                    acc[image.id] = image;\n                    return acc;\n                }, {} as { [key: string]: Image });\n                imagesResult = (imagesResult || []).filter(\n                    (image) => !imagesById[image.id]\n                );\n                return [...images, ...(imagesResult || [])].sort(sortImages);\n            });\n        } else {\n            setHasMore(false);\n        }\n    };\n\n    const onDelete = async (image: Image) => {\n        try {\n            await api.deleteImage(image.id);\n        } catch (e) {\n            console.error(e);\n            setErr(\"Error deleting image\");\n        }\n    };\n\n    const onFork = async (image: Image) => {\n        history.push({\n            pathname: \"/\",\n            search: `?parent=${image.id}`,\n        });\n    };\n\n    const onEdit = async (image: Image) => {\n        history.push(`/image-editor/${image.id}`);\n    };\n\n    const onThumbnailClicked = (image: Image) => {\n        // setSelectedImage(image);\n        if (bulkDeleteSelecting) {\n            setBulkDeleteIds({\n                ...bulkDeleteIds,\n                [image.id]: !bulkDeleteIds[image.id],\n            });\n        } else {\n            history.push(`/saved/${image.id}`);\n        }\n    };\n\n    const handleCancelFork = () => {\n        setParentImage(null);\n        window.scrollTo(0, 0);\n    };\n\n    const onConfirmBulkDelete = async () => {\n        try {\n            setBulkDeleting(true);\n            // await api.deleteImages(Object.keys(bulkDeleteIds));\n            const promises = Object.keys(bulkDeleteIds).map((id) => {\n                return api.deleteImage(id);\n            });\n            await Promise.all(promises);\n            setImages((images) => {\n                return images.filter((image) => !bulkDeleteIds[image.id]);\n            });\n            setBulkDeleteIds({});\n            setBulkDeleteSelecting(false);\n        } catch (e) {\n            console.error(e);\n            setErr(\"Error deleting images\");\n        } finally {\n            setBulkDeleting(false);\n        }\n    };\n\n    const completedOrSavedImages = images.filter((image) => {\n        return (\n            !image.deleted_at &&\n            (image.status === StatusEnum.Completed ||\n                image.status === StatusEnum.Saved)\n        );\n    });\n\n    const pendingOrProcessingImages = images.filter(\n        (image) =>\n            !image.deleted_at &&\n            (image.status === StatusEnum.Pending ||\n                image.status === StatusEnum.Processing)\n    );\n\n    const pendingImages = pendingOrProcessingImages.filter(\n        (image) => image.status === StatusEnum.Pending\n    );\n\n    const processingImages = pendingOrProcessingImages.filter(\n        (image) => image.status === StatusEnum.Processing\n    );\n\n    return (\n        <>\n            <h1 style={{ fontSize: \"40px\", textAlign: \"left\" }}>\n                Welcome to AiBrush - Saved\n            </h1>\n\n            <div\n                className=\"saved-images\"\n                style={{ marginTop: \"48px\", paddingBottom: \"48px\" }}\n            >\n                <div style={{ textAlign: \"left\" }}>\n                    <div\n                        className=\"input-group\"\n                        style={{ marginBottom: \"16px\" }}\n                    >\n                        <input\n                            style={{}}\n                            value={searchDebounce}\n                            type=\"search\"\n                            className=\"form-control image-search\"\n                            placeholder=\"Search...\"\n                            onChange={(e) => setSearchDebounce(e.target.value)}\n                        />\n\n                        <div\n                            style={{\n                                float: \"right\",\n                            }}\n                        >\n                            {!bulkDeleteSelecting && (\n                                <>\n                                    <button\n                                        style={{ display: \"inline\" }}\n                                        className=\"btn btn-primary image-popup-button\"\n                                        onClick={() =>\n                                            setCensorNSFW(!censorNSFW)\n                                        }\n                                    >\n                                        {!censorNSFW && (\n                                            <i className=\"fas fa-eye\"></i>\n                                        )}\n                                        {censorNSFW && (\n                                            <i className=\"fas fa-eye-slash\"></i>\n                                        )}\n                                    </button>\n                                    <Dropdown\n                                        style={{\n                                            display: \"inline\",\n                                            marginLeft: \"8px\",\n                                        }}\n                                    >\n                                        <Dropdown.Toggle variant=\"danger\">\n                                            <i className=\"fas fa-trash\"></i>\n                                        </Dropdown.Toggle>\n\n                                        <Dropdown.Menu>\n                                            <Dropdown.Item\n                                                onClick={() =>\n                                                    setBulkDeleteSelecting(true)\n                                                }\n                                            >\n                                                Bulk Delete\n                                            </Dropdown.Item>\n                                            <Dropdown.Item\n                                                onClick={() =>\n                                                    history.push(\n                                                        \"/deleted-images\"\n                                                    )\n                                                }\n                                            >\n                                                View Deleted Images\n                                            </Dropdown.Item>\n                                        </Dropdown.Menu>\n                                    </Dropdown>\n                                </>\n                            )}\n                            {bulkDeleteSelecting && (\n                                <>\n                                    <button\n                                        className=\"btn btn-primary image-popup-button\"\n                                        onClick={() => {\n                                            setBulkDeleteSelecting(false);\n                                            setBulkDeleteIds({});\n                                        }}\n                                    >\n                                        Cancel\n                                    </button>\n                                    <button\n                                        style={{ marginLeft: \"8px\" }}\n                                        className=\"btn image-popup-delete-button\"\n                                        onClick={() => {\n                                            onConfirmBulkDelete();\n                                        }}\n                                    >\n                                        Delete\n                                    </button>\n                                </>\n                            )}\n                        </div>\n                    </div>\n                </div>\n                <InfiniteScroll\n                    dataLength={images.length}\n                    next={onLoadMore}\n                    hasMore={hasMore}\n                    loader={\n                        <>\n                            <hr />\n                            <h4>Loading...</h4>\n                        </>\n                    }\n                >\n                    {pendingOrProcessingImages.length > 0 && (\n                        <PendingImagesThumbnail\n                            pendingCount={pendingImages.length}\n                            processingCount={processingImages.length}\n                            onClick={() => {\n                                setShowPendingImages(true);\n                            }}\n                        />\n                    )}\n                    {completedOrSavedImages.map((image) => (\n                        <ImageThumbnail\n                            key={image.id}\n                            image={image}\n                            assetsUrl={assetsUrl}\n                            onClick={onThumbnailClicked}\n                            bulkDelete={\n                                bulkDeleteSelecting && bulkDeleteIds[image.id]\n                            }\n                            censorNSFW={censorNSFW}\n                        />\n                    ))}\n                </InfiniteScroll>\n            </div>\n\n            {selectedImage && (\n                <ImagePopup\n                    assetsUrl={assetsUrl}\n                    image={selectedImage}\n                    onClose={() => history.push(\"/saved\")}\n                    onDelete={(image) => {\n                        onDelete(image);\n                        setImages(images.filter((i) => i.id !== image.id));\n                        history.push(\"/saved\");\n                    }}\n                    onFork={(image) => {\n                        onFork(image);\n                    }}\n                    onEdit={(image) => {\n                        onEdit(image);\n                    }}\n                    onNSFW={onNSFW}\n                    censorNSFW={censorNSFW}\n                />\n            )}\n            <ScrollToTop />\n            <BusyModal show={creating} title=\"Creating images\">\n                <p>Please wait while we create your image.</p>\n            </BusyModal>\n            <BusyModal show={bulkDeleting} title=\"Deleting images\">\n                <p>Please wait while we delete your images.</p>\n            </BusyModal>\n            <PendingImages\n                images={pendingOrProcessingImages}\n                onCancel={() => setShowPendingImages(false)}\n                show={showPendingImages}\n                onDeleteImage={(image) => {\n                    onDelete(image);\n                    setImages(images.filter((i) => i.id !== image.id));\n                }}\n            />\n        </>\n    );\n};\n","\n\n// const imagesCache = new KVStore({\n//     dbName: \"saved-images\",\n//     storeName: \"images\",\n// })\n\nimport { AIBrushApi, Image } from \"../client\";\nimport { KVStore } from \"./kvstore\";\n\nexport class ImagesCache {\n\n    private kvstore: KVStore<Image>;\n\n    constructor() {\n        this.kvstore = new KVStore<Image>({\n            dbName: \"saved-images\",\n            storeName: \"images\",\n        });\n    }\n\n    async listImages(api: AIBrushApi, cursor: number, search: string, limit: number, order: \"asc\" | \"desc\"): Promise<Image[] | undefined> {\n        const resp = await api.listImages(cursor, search, limit, order, \"id,updated_at,deleted_at\");\n        if (!resp.data.images) {\n            return undefined;\n        }\n\n        const result: Image[] = [];\n        const batchGetIds: string[] = [];\n        for (const image of resp.data.images) {\n            if (image.deleted_at) {\n                await this.kvstore.deleteItem(image.id);\n            } else {\n                const savedImage = await this.kvstore.getItem(image.id);\n                if (savedImage && savedImage.updated_at === image.updated_at) {\n                    result.push(savedImage);\n                } else {\n                    batchGetIds.push(image.id);\n                }\n            }\n        }\n        if (batchGetIds.length > 0) {\n            const batchResult = await api.batchGetImages(undefined, {\n                ids: batchGetIds,\n            });\n            if (batchResult.data.images) {\n                for (const image of batchResult.data.images) {\n                    await this.kvstore.setItem(image.id, image);\n                    result.push(image);\n                }\n            }\n        }\n        return result;\n    }\n}","import { useEffect, useState, FC } from \"react\";\nimport loadImage from \"blueimp-load-image\";\nimport {\n    splitImage,\n    mergeTiles,\n    SplitResult,\n    ImageUtilWorker,\n} from \"../lib/imageutil\";\nimport * as uuid from \"uuid\";\n\nexport const TestPage: FC = () => {\n    const [originalImage, setOriginalImage] = useState<string | undefined>();\n    const [upscaledImage, setUpscaledImage] = useState<string | undefined>();\n    const [imageWorker, setImageWorker] = useState<\n        ImageUtilWorker | undefined\n    >();\n\n    useEffect(() => {\n        const imageWorker = new ImageUtilWorker();\n        setImageWorker(imageWorker);\n        return () => {\n            imageWorker.destroy();\n        };\n    }, []);\n\n    const imageDataToCanvas = (imageData: ImageData): HTMLCanvasElement => {\n        const canvas = document.createElement(\"canvas\");\n        canvas.width = imageData.width;\n        canvas.height = imageData.height;\n        const ctx = canvas.getContext(\"2d\");\n        if (!ctx) {\n            throw new Error(\"Could not get canvas context\");\n        }\n        ctx.putImageData(imageData, 0, 0);\n        return canvas;\n    };\n\n    const upscaleImageData = (imageData: ImageData): HTMLCanvasElement => {\n        console.log(\"upscaling image data\", imageData.width, imageData.height);\n        const canvas = document.createElement(\"canvas\");\n        canvas.width = imageData.width * 2;\n        canvas.height = imageData.height * 2;\n        const ctx = canvas.getContext(\"2d\");\n        if (!ctx) {\n            throw new Error(\"Could not get canvas context\");\n        }\n        const image = imageDataToCanvas(imageData);\n        ctx.drawImage(image, 0, 0, canvas.width, canvas.height);\n        return canvas;\n    };\n\n    const onImageSelected = async (\n        event: React.ChangeEvent<HTMLInputElement>\n    ) => {\n        if (!imageWorker) {\n            throw new Error(\"Image worker not initialized\");\n        }\n        const files = event.target.files;\n        if (files && files.length > 0) {\n            loadImage(\n                files[0],\n                async (img) => {\n                    const c = img as HTMLCanvasElement;\n                    const originalImage = c.toDataURL(\"image/png\");\n                    setOriginalImage(originalImage);\n\n                    const ctx = c.getContext(\"2d\");\n                    if (ctx) {\n                        const originalImageData = ctx.getImageData(\n                            0,\n                            0,\n                            c.width,\n                            c.height\n                        );\n                        const splitResult = splitImage(originalImageData);\n                        if (!splitResult) {\n                            setUpscaledImage(originalImage);\n                            return;\n                        }\n                        console.log(\"splitResult\", {\n                            numTilesX: splitResult.numTilesX,\n                            numTilesY: splitResult.numTilesY,\n                            tileSize: splitResult.tileSize,\n                        });\n                        splitResult.tileSize *= 2;\n                        splitResult.imageWidth *= 2;\n                        splitResult.imageHeight *= 2;\n                        for (let x = 0; x < splitResult.numTilesX; x++) {\n                            for (let y = 0; y < splitResult.numTilesY; y++) {\n                                const tile = splitResult.tiles[x][y];\n                                const upscaledTile = upscaleImageData(tile);\n                                const upscaledImageData = upscaledTile\n                                .getContext(\"2d\")!\n                                .getImageData(\n                                    0,\n                                    0,\n                                    upscaledTile.width,\n                                    upscaledTile.height\n                                );\n                                const id = uuid.v4();\n                                const feathered =\n                                    await imageWorker.processRequest({\n                                        id,\n                                        alphaMode: \"none\",\n                                        feather: true,\n                                        width: splitResult.imageWidth,\n                                        height: splitResult.imageHeight,\n                                        pixels: upscaledImageData.data,\n                                        selectionOverlay: {\n                                            x:\n                                                x *\n                                                (splitResult.tileSize - 64),\n                                            y:\n                                                y *\n                                                (splitResult.tileSize - 64),\n                                            width: upscaledTile.width,\n                                            height: upscaledTile.height,\n                                        },\n                                        upscale: true,\n                                        featherWidth: 64,\n                                    });\n\n                                splitResult.tiles[x][y] = new ImageData(feathered.pixels, upscaledTile.width, upscaledTile.height)\n                            }\n                        }\n                        const upscaledImageData = mergeTiles(splitResult);\n                        console.log(\n                            \"upscaled image data size\",\n                            upscaledImageData.width,\n                            upscaledImageData.height\n                        );\n                        const upscaledCanvas =\n                            imageDataToCanvas(upscaledImageData);\n                        const upscaledImage =\n                            upscaledCanvas.toDataURL(\"image/png\");\n                        setUpscaledImage(upscaledImage);\n                    }\n                },\n                { canvas: true }\n            );\n        }\n    };\n\n    return (\n        <div>\n            <input type=\"file\" onChange={onImageSelected} />\n            {originalImage && upscaledImage && (\n                <div>\n                    Original:\n                    <br />\n                    <img src={originalImage} />\n                    <br />\n                    Upscaled:\n                    <br />\n                    <img src={upscaledImage} />\n                </div>\n            )}\n        </div>\n    );\n};\n","import {FC, useEffect, useState} from \"react\";\nimport { AIBrushApi } from \"../client\";\nimport { ApiSocket, NOTIFICATION_CREDITS_UPDATED } from \"../lib/apisocket\";\n\ninterface Props {\n    api: AIBrushApi;\n    apisocket: ApiSocket;\n}\n\n// TODO: restore when refactoring to kudos\n// this component should fetch the credits balance {free_credits, paid_credits} from the server on mount.\n// it should also subscribe to the apisocket to receive updates to the credits balance (NOTIFICATION_CREDITS_UPDATED).\n// display paid credits above, free credits below.\n\nexport const CreditsBalance: FC<Props> = ({api, apisocket}) => {\n    // const [credits, setCredits] = useState({free_credits: 0, paid_credits: 0});\n\n    // useEffect(() => {\n    //     const fetchCredits = async () => {\n    //         const credits = await api.getCredits();\n    //         setCredits(credits.data);\n    //     };\n    //     fetchCredits();\n    //     const pollHandle = setInterval(fetchCredits, 60000);\n\n    //     const onMessage = (message: string) => {\n    //         const data = JSON.parse(message);\n    //         if (data.type === NOTIFICATION_CREDITS_UPDATED) {\n    //             fetchCredits();\n    //         }\n    //     }\n    //     apisocket.addMessageListener(onMessage);\n\n    //     return () => {\n    //         clearInterval(pollHandle);\n    //         apisocket.removeMessageListener(onMessage);\n    //     }\n    // }, [api, apisocket]);\n\n    // return (\n    //     <div>\n    //         <div style={{color: \"#00f0f0\"}}>\n    //             <span>Paid credits: </span>\n    //             <span>{credits.paid_credits}</span>\n    //         </div>\n    //         <div>\n    //             <span>Free credits: </span>\n    //             <span>{credits.free_credits}</span>\n    //         </div>\n    //     </div>\n    // );\n    return <></>;\n};","import React, { useState, useEffect } from \"react\";\nimport * as axios from \"axios\";\nimport { BrowserRouter, Switch, Route, Link } from \"react-router-dom\";\nimport \"./App.css\";\nimport \"./bootstrap.min.css\";\nimport { AIBrushApi, LoginResult, FeatureList } from \"./client/api\";\nimport { LocalImagesStore } from \"./lib/localImagesStore\";\nimport { getConfig } from \"./config\";\nimport { Login } from \"./pages/Login\";\nimport { TokenRefresher } from \"./components/TokenRefresher\";\nimport { Healthchecker } from \"./components/Healthchecker\";\nimport { Admin } from \"./pages/admin/Admin\";\nimport { ImageEditor } from \"./pages/image-editor/ImageEditor\";\nimport { DeletedImages } from \"./pages/DeletedImages\";\n\n// V2 UI\nimport { Homepage } from \"./pages/Homepage\";\nimport { ApiSocket } from \"./lib/apisocket\";\nimport { DiscordLogin } from \"./pages/DiscordLogin\";\nimport { LocalDeletedImages } from \"./pages/LocalDeletedImages\";\nimport { SavedImagesPage } from \"./pages/SavedImagesPage\";\nimport { TestPage } from \"./pages/TestPage\";\nimport { CreditsBalance } from \"./components/CreditsBalance\";\n\nconst config = getConfig();\nconst httpClient = axios.default.create();\nconst client = new AIBrushApi(\n    undefined,\n    localStorage.getItem(\"apiUrl\") || config.apiUrl,\n    httpClient\n);\nconst apiSocket: ApiSocket = new ApiSocket();\nconst localImages = new LocalImagesStore();\n\nfunction updateHttpClient(loginResult: LoginResult) {\n    if (loginResult.accessToken) {\n        httpClient.defaults.headers.common[\n            \"Authorization\"\n        ] = `Bearer ${loginResult.accessToken}`;\n    }\n}\n\nfunction App() {\n    const [credentials, setCredentials] = useState<LoginResult | null>(null);\n    const [assetsUrl, setAssetsUrl] = useState<string>(\"/api/images\");\n    const [isAdmin, setIsAdmin] = useState<boolean>(false);\n    const [features, setFeatures] = useState<FeatureList | null>(null);\n\n    const onLogout = () => {\n        setCredentials(null);\n        localStorage.removeItem(\"credentials\");\n        httpClient.defaults.headers.common[\"Authorization\"] = undefined;\n    };\n\n    const init = async () => {\n        console.log(\"App.init\");\n        await localImages.init();\n        client\n            .getAssetsUrl()\n            .then((result) => setAssetsUrl(result.data.assets_url));\n        client.getFeatures().then((result) => setFeatures(result.data));\n        const storedCredentials = localStorage.getItem(\"credentials\");\n        if (storedCredentials) {\n            // attempt to refresh token\n            try {\n                const credentials = JSON.parse(\n                    storedCredentials\n                ) as LoginResult;\n                updateHttpClient(credentials);\n                const result = await client.refresh({\n                    refreshToken: credentials.refreshToken,\n                });\n                setCredentials(result.data);\n\n                // save to storage\n                localStorage.setItem(\n                    \"credentials\",\n                    JSON.stringify(result.data)\n                );\n                updateHttpClient(result.data);\n                const isAdmin = await client.isAdmin();\n                setIsAdmin(!!isAdmin.data.is_admin);\n                apiSocket.updateToken(result.data.accessToken!);\n                apiSocket.connect();\n            } catch (e) {\n                console.log(e);\n                localStorage.removeItem(\"credentials\");\n            }\n        }\n    };\n\n    const onLogin = async (credentials: LoginResult) => {\n        localStorage.setItem(\"credentials\", JSON.stringify(credentials));\n        setCredentials(credentials);\n        updateHttpClient(credentials);\n        apiSocket.updateToken(credentials.accessToken!);\n        apiSocket.connect();\n    };\n\n    const onCredentialsExpired = () => {\n        onLogout();\n    };\n\n    useEffect(() => {\n        init();\n    }, []);\n\n    return (\n        <div className=\"App\">\n            <TokenRefresher\n                api={client}\n                credentials={credentials as LoginResult}\n                onCredentialsRefreshed={onLogin}\n                onCredentialsExpired={onCredentialsExpired}\n            />\n            <Healthchecker api={client} />\n\n            <BrowserRouter>\n                {/* if credentials are not set, show Login component */}\n                {!credentials && (\n                    <Switch>\n                        <Route path=\"/\" exact={true}>\n                            <Login client={client} onLogin={onLogin} />\n                        </Route>\n                        <Route path=\"/discord-login\">\n                            <DiscordLogin client={client} onLogin={onLogin} />\n                        </Route>\n                        {/* fallback route is login page */}\n                        <Route path=\"*\">\n                            <Login client={client} onLogin={onLogin} />\n                        </Route>\n                    </Switch>\n                )}\n                {credentials && (\n                    <div className=\"container\">\n                        <div className=\"row\">\n                            <div className=\"col-lg-12\">\n                                {/* if credentials are set, show a bootstrap logout button a the far top right corner div */}\n                                {credentials && (\n                                    <>\n                                        <button\n                                            className=\"btn btn-primary top-button\"\n                                            onClick={() => onLogout()}\n                                        >\n                                            {/* font awesome logout icon */}\n                                            <i className=\"fas fa-sign-out-alt\"></i>\n                                        </button>\n                                        {/* saved images */}\n                                        <Link\n                                            className=\"btn btn-primary top-button\"\n                                            to=\"/saved\"\n                                        >\n                                            {/* font awesome save icon */}\n                                            <i className=\"fas fa-save\"></i>\n                                        </Link>\n                                        {/* home button */}\n                                        <Link\n                                            className=\"btn btn-primary top-button\"\n                                            to=\"/\"\n                                        >\n                                            {/* font awesome home icon */}\n                                            <i className=\"fas fa-home\"></i>\n                                        </Link>\n                                        {/* Link to discord */}\n                                        <a\n                                            className=\"btn btn-primary top-button\"\n                                            href=\"https://discord.gg/HYcFpDeqKJ\"\n                                            target=\"_blank\"\n                                        >\n                                            {/* font awesome discord icon */}\n                                            <i className=\"fab fa-discord\"></i>\n                                        </a>\n                                        {/* link to github */}\n                                        <a\n                                            className=\"btn btn-primary top-button\"\n                                            href=\"https://github.com/wolfgangmeyers/aibrush-2\"\n                                            target=\"_blank\"\n                                        >\n                                            {/* font awesome github icon */}\n                                            <i className=\"fab fa-github\"></i>\n                                        </a>\n                                    </>\n                                )}\n                            </div>\n                            <div\n                                className=\"col-lg-12\"\n                                style={{ textAlign: \"right\" }}\n                            >\n                                <CreditsBalance\n                                    api={client}\n                                    apisocket={apiSocket}\n                                />\n                            </div>\n                        </div>\n\n                        {/* if credentials are set, show the rest of the app */}\n\n                        <Switch>\n                            <Route path=\"/\" exact={true}>\n                                {/* <MainMenu isAdmin={isAdmin} /> */}\n                                <Homepage\n                                    api={client}\n                                    apiSocket={apiSocket}\n                                    assetsUrl={assetsUrl}\n                                    localImages={localImages}\n                                />\n                            </Route>\n                            <Route path=\"/stripe-success\">\n                                <Homepage\n                                    api={client}\n                                    apiSocket={apiSocket}\n                                    assetsUrl={assetsUrl}\n                                    localImages={localImages}\n                                    paymentStatus=\"success\"\n                                />\n                            </Route>\n                            <Route path=\"/stripe-cancel\">\n                                <Homepage\n                                    api={client}\n                                    apiSocket={apiSocket}\n                                    assetsUrl={assetsUrl}\n                                    localImages={localImages}\n                                    paymentStatus=\"canceled\"\n                                />\n                            </Route>\n                            <Route path=\"/images/:id\">\n                                <Homepage\n                                    api={client}\n                                    apiSocket={apiSocket}\n                                    assetsUrl={assetsUrl}\n                                    localImages={localImages}\n                                />\n                            </Route>\n                            <Route path=\"/saved\" exact={true}>\n                                {/* <MainMenu isAdmin={isAdmin} /> */}\n                                <SavedImagesPage\n                                    api={client}\n                                    apiSocket={apiSocket}\n                                    assetsUrl={assetsUrl}\n                                />\n                            </Route>\n                            <Route path=\"/saved/:id\" exact={true}>\n                                {/* <MainMenu isAdmin={isAdmin} /> */}\n                                <SavedImagesPage\n                                    api={client}\n                                    apiSocket={apiSocket}\n                                    assetsUrl={assetsUrl}\n                                />\n                            </Route>\n                            <Route path=\"/image-editor/:id\">\n                                <ImageEditor\n                                    api={client}\n                                    apisocket={apiSocket}\n                                    assetsUrl={assetsUrl}\n                                    localImages={localImages}\n                                />\n                            </Route>\n                            <Route path=\"/deleted-images\">\n                                <DeletedImages\n                                    api={client}\n                                    assetsUrl={assetsUrl}\n                                />\n                            </Route>\n                            <Route path=\"/local-deleted-images\">\n                                <LocalDeletedImages localImages={localImages} />\n                            </Route>\n                            <Route path=\"/testpage\">\n                                <TestPage />\n                            </Route>\n                            {isAdmin && (\n                                <>\n                                    <Route path=\"/admin\">\n                                        <Admin api={client} />\n                                    </Route>\n                                </>\n                            )}\n                        </Switch>\n                        <div\n                            // style={{ marginTop: \"100px\", padding: \"50px\" }}\n\n                            // use position:fixed to make the footer stick to the bottom of the page\n                            style={{\n                                position: \"fixed\",\n                                bottom: \"0\",\n                                left: \"0\",\n                                width: \"100%\",\n                                height: \"50px\",\n                                paddingTop: \"16px\",\n                                backgroundColor: \"#000000\",\n                            }}\n                        >\n                            {/* show external popout pages to terms and privacy policy, if they are present in the features */}\n                            {features && features.privacy_uri && (\n                                <a href={features.privacy_uri} target=\"_blank\">\n                                    Privacy Policy\n                                </a>\n                            )}\n                            {features && features.terms_uri && (\n                                <a\n                                    href={features.terms_uri}\n                                    target=\"_blank\"\n                                    style={{ marginLeft: \"20px\" }}\n                                >\n                                    Terms of Service\n                                </a>\n                            )}\n                            {/* link to mail to admin@aibrush.art */}\n                            <a\n                                href=\"mailto:admin@aibrush.art\"\n                                style={{ marginLeft: \"20px\" }}\n                            >\n                                Contact\n                            </a>\n                            <span\n                                style={{ float: \"right\", marginRight: \"50px\" }}\n                            >\n                                Powered by the{\" \"}\n                                <a\n                                    href=\"https://stablehorde.net/\"\n                                    target=\"_blank\"\n                                >\n                                    Stable Horde\n                                </a>\n                            </span>\n                        </div>\n                    </div>\n                )}\n            </BrowserRouter>\n        </div>\n    );\n}\n\nexport default App;\n","export interface Config {\n    apiUrl: string;\n}\n\nexport function getConfig(): Config {\n    // if (process.env.REACT_APP_ENV === \"prod\") {\n    //     return {\n    //         apiUrl: \"https://aibrush.ngrok.io\"\n    //     };\n    // } else if (process.env.REACT_APP_ENV === \"alt\") {\n    //     return {\n    //         apiUrl: \"\"\n    //     };\n    // } else {\n    //     return {\n    //         apiUrl: \"http://localhost:3000\"\n    //     };\n    // }\n    return {\n        apiUrl: \"\"\n    };\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import { Renderer } from \"./renderer\";\n\nexport class ZoomHelper {\n\n    private startTouches: React.TouchList | null;\n    private startZoom = 1;\n    private startOffsetX = 0;\n    private startOffsetY = 0;\n\n    constructor(private renderer: Renderer) {\n        this.startTouches = null;\n    }\n\n    onWheel(event: WheelEvent) {\n        const originalZoom = this.renderer.getZoom();\n        let zoom = this.renderer.getZoom();\n        let offsetX = this.renderer.getOffsetX();\n        let offsetY = this.renderer.getOffsetY();\n\n        let canvasPoint = this.translateMouseToCanvasCoordinates(\n            event.offsetX,\n            event.offsetY\n        );\n        // console.log(\"x: \" + x + \", y: \" + y);\n        \n        if (event.deltaY < 0) {\n            zoom += 0.1 * zoom;\n        } else {\n            zoom -= 0.1 * zoom;\n        }\n        zoom = Math.max(0.1, Math.min(zoom, 8.0));\n\n        let xDiff = canvasPoint.x - -offsetX;\n        let yDiff = canvasPoint.y - -offsetY;\n\n        // offsetX = canvasPoint.x - xDiff * (zoom / originalZoom);\n        // offsetY = canvasPoint.y - yDiff * (zoom / originalZoom);\n        offsetX -= xDiff * (zoom / originalZoom) - xDiff;\n        offsetY -= yDiff * (zoom / originalZoom) - yDiff;\n\n        this.renderer.updateZoomAndOffset(zoom, offsetX, offsetY);\n    }\n\n    onPan(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        let movementX = event.movementX;\n        let movementY = event.movementY;\n        // translate offset to canvas coordinates\n        let rect = (\n            event.target as HTMLCanvasElement\n        ).getBoundingClientRect();\n        movementX = (movementX / rect.width) * this.renderer.getCanvas().width;\n        movementY = (movementY / rect.height) * this.renderer.getCanvas().height;\n\n        let zoom = this.renderer.getZoom();\n        let offsetX = this.renderer.getOffsetX();\n        let offsetY = this.renderer.getOffsetY();\n\n        offsetX += movementX / zoom;\n        offsetY += movementY / zoom;\n\n        this.renderer.updateZoomAndOffset(zoom, offsetX, offsetY);\n    }\n\n    onTouchStart(event: React.TouchEvent<HTMLCanvasElement>) {\n        if (event.touches.length === 2) {\n            this.startTouches = event.touches;\n            this.startZoom = this.renderer.getZoom();\n            this.startOffsetX = this.renderer.getOffsetX();\n            this.startOffsetY = this.renderer.getOffsetY();\n        }\n    }\n\n    onTouchMove(event: React.TouchEvent<HTMLCanvasElement>) {\n        if (this.startTouches) {\n            const canvasRect = this.renderer.getCanvas().getBoundingClientRect();\n            const startTouch1 = this.startTouches[0];\n            const startTouch2 = this.startTouches[1];\n            const touch1 = event.touches[0];\n            const touch2 = event.touches[1];\n\n            const startDistance = Math.sqrt(\n                Math.pow(startTouch1.clientX - startTouch2.clientX, 2) +\n                Math.pow(startTouch1.clientY - startTouch2.clientY, 2)\n            );\n            const distance = Math.sqrt(\n                Math.pow(touch1.clientX - touch2.clientX, 2) +\n                Math.pow(touch1.clientY - touch2.clientY, 2)\n            );\n            const zoom = this.startZoom * (distance / startDistance);\n\n            const startCenterX = (startTouch1.clientX + startTouch2.clientX) / 2;\n            const startCenterY = (startTouch1.clientY + startTouch2.clientY) / 2;\n            const centerX = (touch1.clientX + touch2.clientX) / 2;\n            const centerY = (touch1.clientY + touch2.clientY) / 2;\n\n            const startCanvasPoint = this.translateMouseToCanvasCoordinates(\n                startCenterX - canvasRect.left,\n                startCenterY - canvasRect.top\n            );\n            const canvasPoint = this.translateMouseToCanvasCoordinates(\n                centerX - canvasRect.left,\n                centerY - canvasRect.top\n            );\n\n            let offsetX = this.startOffsetX;\n            let offsetY = this.startOffsetY;\n\n            let xDiff = canvasPoint.x - startCanvasPoint.x;\n            let yDiff = canvasPoint.y - startCanvasPoint.y;\n\n            let xDiff2 = canvasPoint.x - -this.renderer.getOffsetX();\n            let yDiff2 = canvasPoint.y - -this.renderer.getOffsetY();\n\n            offsetX -= xDiff2 * (zoom / this.startZoom) - xDiff2 - (xDiff * (distance / startDistance));\n            offsetY -= yDiff2 * (zoom / this.startZoom) - yDiff2 - (yDiff * (distance / startDistance));\n\n            this.renderer.updateZoomAndOffset(zoom, offsetX, offsetY);\n        }\n    }\n\n    onTouchEnd(event: React.TouchEvent<HTMLCanvasElement>) {\n        this.startTouches = null;\n    }\n\n\n    translateMouseToCanvasCoordinates(mouseX: number, mouseY: number, zoom?: number, offsetX?: number, offsetY?: number) {\n        let x = mouseX;\n        let y = mouseY;\n        // adjust for zoom\n        zoom = zoom || this.renderer.getZoom();\n        offsetX = offsetX || this.renderer.getOffsetX();\n        offsetY = offsetY || this.renderer.getOffsetY();\n        x = x / zoom;\n        y = y / zoom;\n\n        // translate offset to canvas coordinates\n        let rect = this.renderer.getCanvas().getBoundingClientRect();\n\n        // x = (x / rect.width) * this.renderer.getWidth();\n        // y = (y / rect.height) * this.renderer.getHeight();\n\n        x = (x / rect.width) * this.renderer.getCanvas().width;\n        y = (y / rect.height) * this.renderer.getCanvas().height;\n\n        x = Math.round(x - offsetX);\n        y = Math.round(y - offsetY);\n\n        return { x: x, y: y };\n    }\n\n    translateCanvasToMouseCoordinates(x: number, y: number, zoom?: number, offsetX?: number, offsetY?: number) {\n        zoom = zoom || this.renderer.getZoom();\n        offsetX = offsetX || this.renderer.getOffsetX();\n        offsetY = offsetY || this.renderer.getOffsetY();\n        x = x + offsetX;\n        y = y + offsetY;\n        x = x * zoom;\n        y = y * zoom;\n\n        // translate offset to canvas coordinates\n        let rect = this.renderer.getCanvas().getBoundingClientRect();\n        x = Math.round((x / this.renderer.getWidth()) * rect.width);\n        y = Math.round((y / this.renderer.getHeight()) * rect.height);\n\n        return { x: x, y: y };\n    }\n}","import React from \"react\";\nimport { Renderer } from \"./renderer\";\nimport { ZoomHelper } from \"./zoomHelper\";\n\nexport interface Tool {\n    name: string;\n    getArgs(): any;\n    updateArgs(args: any): void;\n    onMouseDown(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>): void;\n    onMouseMove(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>): void;\n    onMouseUp(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>): void;\n    onMouseLeave(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>): void;\n\n    onTouchStart(event: React.TouchEvent<HTMLCanvasElement>): void;\n    onTouchMove(event: React.TouchEvent<HTMLCanvasElement>): void;\n    onTouchEnd(event: React.TouchEvent<HTMLCanvasElement>): void;\n\n    onKeyDown(event: KeyboardEvent): void;\n    onKeyUp(event: KeyboardEvent): void;\n    onWheel(event: WheelEvent): void;\n    destroy(): boolean;\n    onShowSelectionControls(listener: (show: boolean) => void): void;\n    select(direction: \"left\" | \"right\"): void;\n    onSaveImage(listener: (encodedImage: string) => void): void;\n}\n\nexport class BaseTool implements Tool {\n    saveListener?: (encodedImage: string, args?: any) => void = () => {};\n\n    private touchHandle: number | undefined;\n\n    readonly zoomHelper: ZoomHelper;\n\n    private _pinchZooming = false;\n    private _panning = false;\n\n    constructor(readonly renderer: Renderer, readonly name: string) {\n        this.zoomHelper = new ZoomHelper(renderer);\n    }\n\n    getArgs(): any {\n        return JSON.parse(\n            localStorage.getItem(`tool_args_${this.name}`) || \"{}\"\n        );\n    }\n    updateArgs(args: any) {\n        localStorage.setItem(`tool_args_${this.name}`, JSON.stringify(args));\n    }\n    onMouseDown(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        if (event.button === 1) {\n            this._panning = true;\n        }\n    }\n    onMouseMove(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        if (this._panning) {\n            this.zoomHelper.onPan(event);\n        }\n        let { x, y } = this.zoomHelper.translateMouseToCanvasCoordinates(\n            event.nativeEvent.offsetX,\n            event.nativeEvent.offsetY\n        );\n        this._updateCursor(x, y);\n    }\n\n    private _updateCursor(x: number, y: number) {\n        this.renderer.setCursor({\n            color: \"white\",\n            radius: 10,\n            type: \"crosshairs\",\n            x,\n            y,\n        });\n    }\n\n    onMouseUp(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        if (this._panning) {\n            this._panning = false;\n        }\n    }\n    onMouseLeave(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {}\n\n    onTouchStart(event: React.TouchEvent<HTMLCanvasElement>) {\n        if (this.touchHandle) {\n            window.clearTimeout(this.touchHandle);\n        }\n        const touches: React.Touch[] = [];\n        // make a deep copy so that the values live past the delay\n        for (let i = 0; i < event.touches.length; i++) {\n            const touch = event.touches[i];\n            touches.push({\n                identifier: touch.identifier,\n                clientX: touch.clientX,\n                clientY: touch.clientY,\n                pageX: touch.pageX,\n                pageY: touch.pageY,\n                screenX: touch.screenX,\n                screenY: touch.screenY,\n                target: null,\n            } as any);\n        }\n        event = {\n            touches,\n        } as any;\n        this.touchHandle = window.setTimeout(() => {\n            this.touchHandle = undefined;\n            if (event.touches.length === 2) {\n                this._pinchZooming = true;\n                this.zoomHelper.onTouchStart(event);\n            } else {\n                const rect = this.renderer.getCanvas().getBoundingClientRect();\n                const touch = event.touches[0];\n                if (touch) {\n                    this.onMouseDown({\n                        type: \"touch\",\n                        button: 0,\n                        nativeEvent: {\n                            offsetX: touch.clientX - rect.left,\n                            offsetY: touch.clientY - rect.top,\n                        },\n                    } as any);\n                }\n            }\n        }, 200);\n    }\n    onTouchMove(event: React.TouchEvent<HTMLCanvasElement>) {\n        if (event.touches.length === 2) {\n            this.zoomHelper.onTouchMove(event);\n        } else {\n            const rect = this.renderer.getCanvas().getBoundingClientRect();\n            const touch = event.touches[0];\n            if (touch) {\n                this.onMouseMove({\n                    type: \"touch\",\n                    button: 0,\n                    nativeEvent: {\n                        offsetX: touch.clientX - rect.left,\n                        offsetY: touch.clientY - rect.top,\n                    },\n                } as any);\n            }\n        }\n    }\n    onTouchEnd(event: React.TouchEvent<HTMLCanvasElement>) {\n        if (this._pinchZooming) {\n            this._pinchZooming = false;\n            this.zoomHelper.onTouchEnd(event);\n        } else {\n            this.onMouseUp({\n                button: 0,\n                type: \"touch\",\n            } as any);\n        }\n    }\n\n    onKeyDown(event: KeyboardEvent) {}\n    onKeyUp(event: KeyboardEvent) {}\n    onWheel(event: WheelEvent) {\n        this.zoomHelper.onWheel(event);\n    }\n    destroy(): boolean {\n        return true;\n    }\n    onShowSelectionControls(listener: (show: boolean) => void) {}\n    select(direction: \"left\" | \"right\") {}\n    onSaveImage(listener: (encodedImage: string) => void) {\n        this.saveListener = listener;\n    }\n}\n","export class RecentList {\n    private key: string;\n    private listSize: number;\n\n    constructor(key: string, listSize: number) {\n        this.key = key;\n        this.listSize = listSize;\n    }\n\n    private getRecentItems(): string[] {\n        const modelsJson = localStorage.getItem(this.key);\n        return modelsJson ? JSON.parse(modelsJson) : [];\n    }\n\n    private saveRecentItems(models: string[]): void {\n        localStorage.setItem(this.key, JSON.stringify(models));\n    }\n\n    addItem(model: string): void {\n        const recentModels = this.getRecentItems();\n        const modelIndex = recentModels.indexOf(model);\n\n        if (modelIndex !== -1) {\n            recentModels.splice(modelIndex, 1);\n        }\n\n        recentModels.unshift(model);\n\n        if (recentModels.length > this.listSize) {\n            recentModels.pop();\n        }\n\n        this.saveRecentItems(recentModels);\n    }\n\n    getItems(): string[] {\n        return this.getRecentItems();\n    }\n}\n\nexport const recentModels = new RecentList(\"recent-models\", 20);\nexport const recentNegativePrompts = new RecentList(\"recent-negative-prompts\", 20);\nexport const recentPrompts = new RecentList(\"recent-positive-prompts\", 20);","\nexport const NOTIFICATION_IMAGE_UPDATED = \"image_updated\";\nexport const NOTIFICATION_IMAGE_DELETED = \"image_deleted\";\nexport const NOTIFICATION_PENDING_IMAGE = \"pending_image\";\nexport const NOTIFICATION_CREDITS_UPDATED = \"credits_updated\";\n\ntype MessageListener = (message: string) => void;\n\nexport class ApiSocket {\n    private client?: WebSocket;\n    private accessToken?: string\n    // private messageListener?: (message: string) => void;\n    private messageListeners: MessageListener[] = [];\n\n    updateToken(accessToken: string) {\n        this.accessToken = accessToken;\n    }\n\n    // onMessage(listener?: (message: string) => void) {\n    //     this.messageListener = listener;\n    // }\n\n    addMessageListener(listener: MessageListener) {\n        this.messageListeners.push(listener);\n    }\n\n    removeMessageListener(listener: MessageListener) {\n        this.messageListeners = this.messageListeners.filter(l => l !== listener);\n    }\n\n    connect() {\n        if (!this.accessToken) {\n            throw new Error(\"unauthenticated\");\n        }\n        if (this.client) {\n            // will reconnect in one second automatically\n            // this is called every time the auth refreshes\n            this.client.close();\n            return;\n        }\n        // let host = window.location.host;\n        let host = \"www.aibrush.art\";\n        let protocol = \"wss\";\n        // if (host.includes(\"localhost\")) {\n        //   host = \"localhost:3000\";\n        //   protocol = \"ws\";\n        // }\n        this.client = new WebSocket(`${protocol}://${host}`);\n        this.client.onerror = err => console.error(err);\n        this.client.onopen = () => {\n            console.log(\"websocket connected\");\n            this.client!.send(this.accessToken!);\n        }\n        this.client.onmessage = evt => {\n            console.log(\"server push\", evt.data);\n            for (const listener of this.messageListeners) {\n                listener(evt.data as string);\n            }\n        }\n        this.client.onclose = () => {\n          console.log(\"websocket closed\");\n          this.client = undefined;\n          setTimeout(() => this.connect(), 500);\n        }\n    }\n}\n","import { FC } from \"react\";\n\ninterface Props {\n    imagesCost: number;\n}\n\n//TODO: restore when doing kudos cost calculation\nexport const CostIndicator: FC<Props> = ({ imagesCost }) => {\n    return (\n        // <div style={{ textAlign: \"left\" }}>\n        //     <span className=\"helptext\" style={{ color: \"#00f0f0\" }}>\n        //         Cost: {imagesCost} credit{imagesCost > 1 ? \"s\" : \"\"}&nbsp;\n        //         <i\n        //             className=\"fas fa-info-circle\"\n        //             style={{ cursor: \"pointer\" }}\n        //             onClick={() =>\n        //                 alert(\n        //                     \"The cost is based on the image count and the size of each image. A single 512x512 image costs 1 credit.\"\n        //                 )\n        //             }\n        //         ></i>\n        //     </span>\n        // </div>\n        <></>\n    );\n};\n","import React, { FC, useEffect, useState } from \"react\";\nimport moment from \"moment\";\nimport { Image, StatusEnum } from \"../client/api\";\nimport { LocalImage } from \"../lib/localImagesStore\";\n\ninterface Props {\n    assetsUrl: string;\n    image: LocalImage;\n    censorNSFW: boolean;\n    bulkDelete?: boolean;\n    onClick?: (image: Image) => void;\n}\n\nexport const ImageThumbnail: FC<Props> = ({ assetsUrl, image, censorNSFW, bulkDelete, onClick }) => {\n    const src = `${assetsUrl}/${image.id}.thumbnail.png?updated_at=${image.updated_at}`;\n    const [retry, setRetry] = useState(\"\");\n\n    useEffect(() => {\n        // This is to help deal with eventual consistency from S3.\n        // if image.updated_at (unix timestamp in milliseconds) is less than a minute ago, try to reload the image\n        if (moment().diff(moment(image.updated_at), \"minutes\") < 1) {\n            setRetry(\"\");\n            const t = setTimeout(() => {\n                setRetry(\"&retry\")\n            }, 3000);\n            return () => clearTimeout(t);\n        }\n    }, [image.id, image.updated_at])\n\n    let label = image.label;\n    if (image.label === \"\") {\n        label = image.params.prompt || \"\";\n    }\n    if (label.indexOf(\",\") !== -1) {\n        label = label.substring(0, label.indexOf(\",\"));\n    }\n    \n    let className = \"image-thumbnail\";\n    if (bulkDelete) {\n        className += \" bulk-delete\";\n    }\n\n    let backgroundImage = `url(${src}${retry}), url(/images/default.png)`;\n    if (image.imageData) {\n        backgroundImage = `url(${image.imageData}), url(/images/default.png)`;\n    }\n\n    return (\n        <div\n            className={className}\n            style={{\n                backgroundImage,\n                backgroundRepeat: \"no-repeat\",\n                backgroundPosition: \"center\",\n                filter: (image.nsfw && censorNSFW) ? \"blur(8px)\" : undefined,\n            }}\n            onClick={() => onClick && onClick(image)}\n        >\n            {!bulkDelete && <div className=\"image-thumbnail-label\">\n                {label}\n            </div>}\n\n            {bulkDelete && <div className=\"image-thumbnail-label\">\n                <input type=\"checkbox\" style={{\n                    width: \"20px\",\n                    height: \"20px\",\n                    marginLeft: \"16px\",\n                    marginTop: \"16px\",\n                }} checked readOnly />\n            </div>}\n\n            {image.status === StatusEnum.Pending && <div className=\"image-thumbnail-pending\">\n                <i style={{marginTop: \"20px\"}} className=\"fa fa-hourglass-half\"></i>\n            </div>}\n            {\n                image.status === StatusEnum.Processing && <div className=\"image-thumbnail-pending\">\n                    <i style={{marginTop: \"20px\"}} className=\"fa fa-cog fa-spin\"></i>\n                </div>\n            }\n        </div>\n    );\n};\n","\nexport const supportedModels = [\n    \"Epic Diffusion\",\n    \"Rev Animated\",\n    \"Anything v3\",\n    \"Hentai Diffusion\",\n    \"Ranma Diffusion\",\n    \"URPM\",\n    \"Deliberate\",\n    \"GTA5 Artwork Diffusion\",\n    \"ChilloutMix\",\n    \"Realism Engine\",\n    \"AIO Pixel Art\",\n    \"Microworlds\",\n    \"Microchars\",\n    \"OrbAI\",\n    \"App Icon Diffusion\",\n];\n\n// canny, hed, depth, normal, openpose, seg, scribble, fakescribbles, hough\nexport const controlnetTypes = [\n    \"canny\",\n    \"hed\",\n    \"depth\",\n    \"normal\",\n    \"openpose\",\n    \"seg\",\n    \"scribble\",\n    \"fakescribbles\",\n    \"hough\",\n]","import { FC, useState, FormEvent } from \"react\";\nimport { Form, FormGroup, FormControl, FormText, FormCheck } from \"react-bootstrap\";\n\ninterface Props {\n    seed: string;\n    setSeed: (seed: string) => void;\n}\n\nexport const SeedInput: FC<Props> = ({seed, setSeed}) => {\n    const [useCustomSeed, setUseCustomSeed] = useState(false);\n\n    const onChangeCustomSeed = () => {\n        setUseCustomSeed(!useCustomSeed);\n        if (useCustomSeed) {\n            setSeed(\"\");\n        } else {\n            // set seed to a random number\n            setSeed(Math.floor(Math.random() * 1000000000).toString());\n        }\n    };\n\n    return (\n        <Form>\n            <FormGroup>\n                <FormCheck \n                    type=\"checkbox\"\n                    label=\"Use Custom Seed\"\n                    checked={useCustomSeed}\n                    onChange={(e) => onChangeCustomSeed()}\n                />\n            </FormGroup>\n\n            {useCustomSeed && (\n                <FormGroup>\n                    <FormControl\n                        type=\"text\"\n                        // value={seed}\n                        // onChange={(e) => setSeed(e.target.value)}\n                        placeholder=\"Enter seed\"\n                        value={seed}\n                        onChange={(e: any) => setSeed(e.target.value)}\n                    />\n                </FormGroup> \n            )}\n        </Form>\n    );\n};\n","import React, { useState } from \"react\";\nimport { InputGroup, FormControl, Dropdown } from \"react-bootstrap\";\n\ninterface TextInputWithHistoryProps {\n    value: string;\n    onChange: (newValue: string) => void;\n    history: string[];\n}\n\nconst TextInputWithHistory: React.FC<TextInputWithHistoryProps> = ({\n    value,\n    onChange,\n    history,\n}) => {\n    const [show, setShow] = useState(false);\n\n    const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        onChange(event.target.value);\n    };\n\n    const handleDropdownSelect = (eventKey: string | null) => {\n        if (eventKey) {\n            onChange(eventKey);\n        }\n        setShow(false);\n    };\n\n    const handleInputClick = () => {\n        setShow(!show);\n    };\n\n    return (\n        <div>\n            <FormControl\n                value={value}\n                onChange={handleInputChange}\n                onClick={handleInputClick}\n                onBlur={() => {\n                    setTimeout(() => setShow(false), 200);\n                }}\n            />\n            <Dropdown show={show} onSelect={handleDropdownSelect}>\n                <Dropdown.Toggle\n                    variant=\"success\"\n                    id=\"dropdown-basic\"\n                    style={{ height: \"0px\", padding: \"0px\", visibility: \"hidden\", position: \"absolute\" }}\n                />\n                <Dropdown.Menu style={{width: \"100%\", overflow: \"hidden\"}}>\n                    {history.map((item, index) => (\n                        <Dropdown.Item eventKey={item} key={index}>\n                            {item}\n                        </Dropdown.Item>\n                    ))}\n                </Dropdown.Menu>\n            </Dropdown>\n        </div>\n    );\n};\n\nexport default TextInputWithHistory;\n","import React, { FC, useEffect, useState } from \"react\";\nimport { CreateImageInput, StatusEnum, Image, AIBrushApi } from \"../client\";\nimport {\n    aspectRatios,\n    DEFAULT_ASPECT_RATIO,\n    getClosestAspectRatio,\n    AspectRatio,\n} from \"../lib/aspecRatios\";\nimport loadImage from \"blueimp-load-image\";\nimport { AspectRatioSelector } from \"./AspectRatioSelector\";\nimport { getUpscaleLevel } from \"../lib/upscale\";\nimport { resizeEncodedImage } from \"../lib/imageutil\";\nimport { LocalImage } from \"../lib/localImagesStore\";\nimport { controlnetTypes, supportedModels } from \"../lib/supportedModels\";\nimport { SeedInput } from \"./SeedInput\";\nimport ModelSelector from \"./ModelSelector\";\nimport { calculateImagesCost } from \"../lib/credits\";\nimport { CostIndicator } from \"./CostIndicator\";\nimport { recentPrompts, recentNegativePrompts } from \"../lib/recentList\";\nimport TextInputWithHistory from \"./TextInputWithHistory\";\n\ninterface Props {\n    api: AIBrushApi;\n    parent: LocalImage | null;\n    creating: boolean;\n    assetsUrl: string;\n    onSubmit: (input: CreateImageInput) => void;\n    // go straight to editor without variations\n    onEdit: (input: CreateImageInput) => void;\n    onCancel: () => void;\n}\n\nexport function defaultArgs(): CreateImageInput {\n    return {\n        params: {\n            prompt: \"\",\n            negative_prompt: defaultNegativePrompt(),\n            width: 512,\n            height: 512,\n            steps: 20,\n            denoising_strength: 0.75,\n        },\n        label: \"\",\n        encoded_image: \"\",\n        encoded_mask: \"\",\n        model: \"Epic Diffusion\",\n        count: 4,\n    };\n}\n\nfunction defaultNegativePrompt(): string {\n    return recentNegativePrompts.getItems()[0] || \"low quality, distorted, deformed, dull, boring, plain, ugly, noise\";\n}\n\nexport const ImagePrompt: FC<Props> = ({\n    api,\n    parent,\n    creating,\n    assetsUrl,\n    onSubmit,\n    onCancel,\n    onEdit,\n}) => {\n    const [prompt, setPrompt] = useState<string>(\"\");\n    const [negativePrompt, setNegativePrompt] = useState<string>(\n        defaultNegativePrompt()\n    );\n    const [count, setCount] = useState<number>(4);\n    const [variationStrength, setVariationStrength] = useState<number>(0.75);\n    const [aspectRatio, setAspectRatio] =\n        useState<number>(DEFAULT_ASPECT_RATIO);\n    const [parentId, setParentId] = useState<string | null>(null);\n    const [advancedView, setAdvancedView] = useState<boolean>(false);\n    const [encodedImage, setEncodedImage] = useState<string>(\"\");\n    const [model, setModel] = useState<string>(\"Epic Diffusion\");\n\n    const [selectingModel, setSelectingModel] = useState<boolean>(false);\n\n    const [controlnetType, setControlnetType] = useState<string | undefined>();\n    const [cfgScale, setCfgScale] = useState<number>(7.5);\n    const [seed, setSeed] = useState<string>(\"\");\n    const [size, setSize] = useState<number>(1);\n    const defaultAspectRatio = aspectRatios[DEFAULT_ASPECT_RATIO];\n\n    const [aspectRatioDetails, setAspectRatioDetails] = useState<AspectRatio>(\n        aspectRatios[DEFAULT_ASPECT_RATIO]\n    );\n    let [originalWidth, setOriginalWidth] = useState<number>(\n        defaultAspectRatio.width\n    );\n    let [originalHeight, setOriginalHeight] = useState<number>(\n        defaultAspectRatio.height\n    );\n\n    // const aspectRatioDetails = aspectRatios[aspectRatio];\n\n    const resetState = () => {\n        setPrompt(\"\");\n        setNegativePrompt(recentNegativePrompts.getItems()[0] || defaultNegativePrompt);\n        // setCount(4);\n        setAdvancedView(false);\n        setParentId(null);\n        // setVariationStrength(0.75);\n        setAspectRatio(DEFAULT_ASPECT_RATIO);\n        setAspectRatioDetails(aspectRatios[DEFAULT_ASPECT_RATIO]);\n        setEncodedImage(\"\");\n        // setCfgScale(7.5);\n        setSeed(\"\");\n    };\n\n    const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\n        if (negativePrompt) {\n            recentNegativePrompts.addItem(negativePrompt);\n        }\n        e.preventDefault();\n        const args = defaultArgs();\n        args.params.prompt = prompt || \"\";\n        args.params.negative_prompt = negativePrompt || \"\";\n        args.count = seed ? 1 : count;\n        args.parent = parentId || undefined;\n        args.params.denoising_strength = variationStrength;\n        args.nsfw = true;\n        args.model = model;\n        args.temporary = true;\n        args.params.controlnet_type = controlnetType as any;\n        args.params.cfg_scale = cfgScale;\n        args.params.seed = seed || undefined;\n        if (parent) {\n            const bestMatch = getClosestAspectRatio(\n                parent.params.width!,\n                parent.params.height!\n            ).scale(size);\n            args.params.width = bestMatch.width;\n            args.params.height = bestMatch.height;\n        } else {\n            const bestMatch = getClosestAspectRatio(\n                aspectRatioDetails.width,\n                aspectRatioDetails.height\n            ).scale(size);\n            args.params.width = bestMatch.width;\n            args.params.height = bestMatch.height;\n        }\n        if (encodedImage) {\n            args.encoded_image = await resizeEncodedImage(\n                encodedImage,\n                args.params.width,\n                args.params.height,\n                \"png\"\n            );\n        }\n\n        resetState();\n        onSubmit(args);\n    };\n\n    const handleEdit = () => {\n        if (!encodedImage) {\n            console.error(\"Cannot edit without existing image\");\n            return;\n        }\n        if (negativePrompt) {\n            recentNegativePrompts.addItem(negativePrompt);\n        }\n        const args = defaultArgs();\n        args.params.prompt = prompt || \"\";\n        args.params.negative_prompt = negativePrompt || \"\";\n        args.count = 1;\n        args.parent = parentId || undefined;\n        // args.stable_diffusion_strength = variationStrength;\n        args.params.denoising_strength = variationStrength;\n        args.status = StatusEnum.Completed;\n        args.params.width = originalWidth;\n        args.params.height = originalHeight;\n        args.params.cfg_scale = cfgScale;\n        args.nsfw = true;\n        args.model = model;\n        if (encodedImage) {\n            args.encoded_image = encodedImage;\n        }\n\n        resetState();\n        onEdit(args);\n    };\n\n    const handleCancel = () => {\n        resetState();\n        onCancel();\n    };\n\n    const onSelectModel = (model: string) => {\n        setModel(model);\n        setSelectingModel(false);\n    };\n\n    const onImageSelected = async (e: React.ChangeEvent<HTMLInputElement>) => {\n        const file = e.target.files && e.target.files[0];\n        if (!file) {\n            return;\n        }\n        loadImage(\n            file,\n            (img: Event | HTMLImageElement | HTMLCanvasElement) => {\n                if (!(img instanceof HTMLCanvasElement)) {\n                    return;\n                }\n                // try to match width and height to a supported aspect ratio\n                const width = img.width;\n                const height = img.height;\n                let bestMatch = getClosestAspectRatio(width, height);\n\n                const canvas = document.createElement(\"canvas\");\n                // canvas.width = bestMatch.width;\n                // canvas.height = bestMatch.height;\n                canvas.width = width;\n                canvas.height = height;\n                const ctx = canvas.getContext(\"2d\");\n                if (!ctx) {\n                    return;\n                }\n                ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n\n                // convert image to base64\n                // const canvas = img as HTMLCanvasElement\n                const dataUrl = canvas.toDataURL(\"image/png\");\n                const base64 = dataUrl.split(\",\")[1];\n                setEncodedImage(base64);\n                // get the index of the best match\n                setAspectRatio(\n                    aspectRatios.findIndex((a) => a.id === bestMatch.id)\n                );\n                setAspectRatioDetails(bestMatch);\n                setOriginalWidth(width);\n                setOriginalHeight(height);\n                // remove canvas\n                canvas.remove();\n            },\n            {\n                maxWidth: 4096,\n                maxHeight: 4096,\n                canvas: true,\n            }\n        );\n    };\n\n    useEffect(() => {\n        if (parent) {\n            const imageData = parent.imageData;\n            if (imageData) {\n                setEncodedImage(imageData.split(\",\")[1]);\n            }\n            setPrompt(parent.params.prompt || \"\");\n            setNegativePrompt(\n                parent.params.negative_prompt || defaultNegativePrompt()\n            );\n            setCount(4);\n            setParentId(parent.id);\n            setAdvancedView(true);\n            setVariationStrength(parent.params.denoising_strength || 0.75);\n            setModel(\n                supportedModels.indexOf(parent.model) > -1\n                    ? parent.model\n                    : \"Epic Diffusion\"\n            );\n            setCfgScale(parent.params.cfg_scale || 7.5);\n        } else {\n            resetState();\n        }\n    }, [parent]);\n\n    // unset controlnet when encodedImage is null\n    useEffect(() => {\n        if (!encodedImage) {\n            setControlnetType(undefined);\n        }\n    }, [encodedImage]);\n\n    const scaledAspectRatio = aspectRatioDetails.scale(size);\n    const imagesCost = calculateImagesCost(\n        count,\n        scaledAspectRatio.width,\n        scaledAspectRatio.height\n    );\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <div className=\"homepage-prompt\">\n                <div className=\"input-group\">\n                    <input\n                        className=\"form-control prompt\"\n                        placeholder=\"What would you like to create?\"\n                        value={prompt}\n                        onChange={(e) => setPrompt(e.target.value)}\n                    />\n\n                    <div className=\"input-group-append\">\n                        <select\n                            className=\"form-control prompt-count\"\n                            style={{ borderTopLeftRadius: \"0px\" }}\n                            value={seed ? 1 : count}\n                            onChange={(e) => setCount(parseInt(e.target.value))}\n                            disabled={!!seed}\n                        >\n                            <option value={1}>1</option>\n                            <option>2</option>\n                            <option>3</option>\n                            <option>4</option>\n                            <option>5</option>\n                            <option>6</option>\n                            <option>7</option>\n                            <option>8</option>\n                            <option>9</option>\n                            <option>10</option>\n                        </select>\n                        <button\n                            type=\"submit\"\n                            className=\"btn btn-secondary light-button\"\n                            style={{ marginLeft: \"8px\" }}\n                            disabled={!prompt || creating}\n                        >\n                            {/* paintbrush button */}\n                            {!creating && (\n                                <i className=\"fas fa-paint-brush\"></i>\n                            )}\n                            {/* spinner button */}\n                            {creating && (\n                                <i className=\"fas fa-spinner fa-spin\"></i>\n                            )}\n                        </button>\n                    </div>\n                </div>\n                <CostIndicator imagesCost={imagesCost} />\n                <div\n                    style={{\n                        marginTop: \"24px\",\n                    }}\n                >\n                    <a\n                        href=\"javascript:void(0)\"\n                        onClick={() => setAdvancedView(!advancedView)}\n                        style={{\n                            color: \"white\",\n                            textDecoration: \"underline\",\n                        }}\n                    >\n                        Advanced\n                    </a>\n                    &nbsp;\n                    {advancedView ? (\n                        <i className=\"fas fa-chevron-up\"></i>\n                    ) : (\n                        <i className=\"fas fa-chevron-down\"></i>\n                    )}\n                </div>\n                {advancedView && (\n                    <div className=\"homepage-prompt-advanced\">\n                        {encodedImage && (\n                            <div className=\"form-group\">\n                                <label>Init Image</label>\n                                <img\n                                    style={{\n                                        display: \"block\",\n                                        marginLeft: \"auto\",\n                                        marginRight: \"auto\",\n                                        maxWidth: \"100%\",\n                                    }}\n                                    src={`data:image/png;base64,${encodedImage}`}\n                                />\n                            </div>\n                        )}\n                        {!parent && !encodedImage && (\n                            <AspectRatioSelector\n                                aspectRatio={aspectRatio}\n                                onChange={(aspectRatioId) => {\n                                    setAspectRatio(aspectRatioId);\n                                    setAspectRatioDetails(\n                                        aspectRatios[aspectRatioId]\n                                    );\n                                }}\n                            />\n                        )}\n                        <div className=\"form-group\">\n                            <div\n                                style={{\n                                    display: \"block\",\n                                    maxWidth: encodedImage ? \"350px\" : \"180px\",\n                                    marginTop: \"40px\",\n                                    marginRight: \"auto\",\n                                    marginLeft: \"auto\",\n                                }}\n                            >\n                                <label\n                                    id=\"loadimage-wrapper\"\n                                    className={`btn btn-primary `}\n                                    style={{ display: \"inline\" }}\n                                >\n                                    {/* upload image */}\n                                    <i className=\"fas fa-upload\"></i>&nbsp;\n                                    {encodedImage || parent\n                                        ? \"Replace\"\n                                        : \"Upload\"}\n                                    <input\n                                        id=\"loadimage\"\n                                        type=\"file\"\n                                        style={{ display: \"none\" }}\n                                        onChange={onImageSelected}\n                                    />\n                                </label>\n                                {encodedImage && (\n                                    <label\n                                        className=\"btn btn-secondary\"\n                                        onClick={() => setEncodedImage(\"\")}\n                                        style={{ display: \"inline\" }}\n                                    >\n                                        {/* remove image */}\n                                        <i className=\"fas fa-trash\"></i>&nbsp;\n                                        Remove\n                                    </label>\n                                )}\n                            </div>\n                        </div>\n                        <div className=\"form-group\">\n                            <label htmlFor=\"model\">Model</label>\n                            <div>\n                                <button\n                                    type=\"button\"\n                                    className=\"btn btn-secondary light-button\"\n                                    onClick={() => setSelectingModel(true)}\n                                >\n                                    {model}&nbsp;\n                                    <i className=\"fas fa-caret-down\"></i>\n                                </button>\n                            </div>\n                        </div>\n                        <div className=\"form-group\">\n                            {/* negative prompt */}\n                            <label htmlFor=\"negativePrompt\">\n                                Negative Prompt\n                            </label>\n                            {/* <input\n                                type=\"text\"\n                                className=\"form-control\"\n                                id=\"negativePrompt\"\n                                placeholder=\"What would you like to avoid?\"\n                                value={negativePrompt}\n                                onChange={(e) =>\n                                    setNegativePrompt(e.target.value)\n                                }\n                            /> */}\n                            <TextInputWithHistory\n                                history={recentNegativePrompts.getItems()}\n                                value={negativePrompt}\n                                onChange={setNegativePrompt}\n                            />\n                            <span className=\"helptext\">\n                                Try descriptive words like \"blurry\" or\n                                \"distorted\"\n                            </span>\n                        </div>\n                        {!seed && (\n                            <div className=\"form-group\">\n                                <label htmlFor=\"count\">Count: {count}</label>\n                                {/* range slider from 1 to 20 */}\n                                <input\n                                    type=\"range\"\n                                    className=\"form-control-range\"\n                                    id=\"count\"\n                                    min=\"1\"\n                                    max=\"10\"\n                                    value={count}\n                                    onChange={(e) =>\n                                        setCount(parseInt(e.target.value))\n                                    }\n                                />\n                                <span className=\"helptext\">\n                                    This is how many images you want to generate\n                                </span>\n                            </div>\n                        )}\n                        {/* size slider */}\n                        <div className=\"form-group\">\n                            <label htmlFor=\"size\">Size: {scaledAspectRatio.width} x {scaledAspectRatio.height}</label>\n                            {/* range slider from 1 to 2 in increments of 0.1 */}\n                            <input\n                                type=\"range\"\n                                className=\"form-control-range\"\n                                id=\"size\"\n                                min=\"1\"\n                                max=\"2\"\n                                step=\"0.1\"\n                                value={size}\n                                onChange={(e) =>\n                                    setSize(parseFloat(e.target.value))\n                                }\n                            />\n                            <span className=\"helptext\">\n                                This allows you to adjust the size of your images. Larger images cost more credits.\n                            </span>\n                        </div>\n\n                        {(parentId || encodedImage) && (\n                            <div className=\"form-group\">\n                                {/* variation strength */}\n                                <label htmlFor=\"variationStrength\">\n                                    Variation Strength:&nbsp;\n                                    {(variationStrength * 100).toFixed(0)}%\n                                </label>\n                                <input\n                                    type=\"range\"\n                                    className=\"form-control-range\"\n                                    id=\"variationStrength\"\n                                    min=\"0.05\"\n                                    max=\"0.95\"\n                                    step=\"0.05\"\n                                    value={variationStrength}\n                                    onChange={(e) =>\n                                        setVariationStrength(\n                                            parseFloat(e.target.value)\n                                        )\n                                    }\n                                />\n                                <span className=\"helptext\">\n                                    This is how much variation you want to see\n                                    from the parent image\n                                </span>\n                            </div>\n                        )}\n                        {encodedImage && (\n                            // controlnet type - canny, hed, depth, normal, openpose, seg, scribble, fakescribbles, hough\n                            <div className=\"form-group\">\n                                <label htmlFor=\"controlNetType\">\n                                    Control Net Type\n                                </label>\n                                <select\n                                    className=\"form-control\"\n                                    id=\"controlNetType\"\n                                    value={controlnetType}\n                                    onChange={(e) =>\n                                        setControlnetType(e.target.value)\n                                    }\n                                >\n                                    <option value=\"\">None</option>\n                                    {controlnetTypes.map((type) => (\n                                        <option\n                                            value={type}\n                                            key={`type-${type}`}\n                                        >\n                                            {type}\n                                        </option>\n                                    ))}\n                                </select>\n                                <span className=\"helptext\">\n                                    Controlnet is an advanced way of controlling\n                                    the output of image generation. You can read\n                                    more about it{\" \"}\n                                    <a\n                                        target=\"_blank\"\n                                        href=\"https://bootcamp.uxdesign.cc/controlnet-and-stable-diffusion-a-game-changer-for-ai-image-generation-83555cb942fc\"\n                                    >\n                                        here.\n                                    </a>\n                                </span>\n                            </div>\n                        )}\n                        {/* cfg scale. Slider from 1 to 20 in increments of 0.1 */}\n                        <div className=\"form-group\">\n                            <label>CFG Scale: {cfgScale.toFixed(1)}</label>\n                            <input\n                                type=\"range\"\n                                className=\"form-control-range\"\n                                min=\"1\"\n                                max=\"20\"\n                                step=\"0.5\"\n                                value={cfgScale}\n                                onChange={(e) =>\n                                    setCfgScale(parseFloat(e.target.value))\n                                }\n                            />\n                            <span className=\"helptext\">\n                                Adjust the CFG scale to control how much the\n                                image looks like the prompt.\n                            </span>\n                        </div>\n                        <SeedInput seed={seed} setSeed={setSeed} />\n\n                        <div\n                            className=\"form-group\"\n                            style={{ minHeight: \"20px\" }}\n                        >\n                            <div className=\"float-right\">\n                                {parent && (\n                                    <button\n                                        type=\"button\"\n                                        className=\"btn btn-secondary light-button\"\n                                        onClick={handleCancel}\n                                    >\n                                        <i className=\"fas fa-times\"></i>\n                                        &nbsp;CANCEL\n                                    </button>\n                                )}\n                                <button\n                                    type=\"submit\"\n                                    className=\"btn btn-primary\"\n                                    style={{ marginLeft: \"8px\" }}\n                                    disabled={!prompt || creating}\n                                >\n                                    {/* paintbrush button */}\n                                    {!creating && (\n                                        <i className=\"fas fa-paint-brush\"></i>\n                                    )}\n                                    {/* spinner button */}\n                                    {creating && (\n                                        <i className=\"fas fa-spinner fa-spin\"></i>\n                                    )}\n                                    &nbsp;PAINT\n                                </button>\n                                {encodedImage && (\n                                    <button\n                                        type=\"button\"\n                                        className=\"btn btn-secondary light-button\"\n                                        onClick={handleEdit}\n                                        style={{ marginLeft: \"8px\" }}\n                                        disabled={!prompt || creating}\n                                    >\n                                        <i className=\"fas fa-edit\"></i>\n                                        &nbsp;EDIT\n                                    </button>\n                                )}\n                            </div>\n                        </div>\n                    </div>\n                )}\n            </div>\n            {selectingModel && (\n                <ModelSelector\n                    api={api}\n                    onCancel={() => setSelectingModel(false)}\n                    onSelectModel={onSelectModel}\n                    initialSelectedModel={model}\n                    inpainting={false}\n                />\n            )}\n        </form>\n    );\n};\n","import { FC } from \"react\";\n\ninterface Props {\n    progress: number;\n}\n\nexport const ProgressBar: FC<Props> = ({ progress }) => {\n    return (\n        <div className=\"progress\" style={{ height: \"20px\", marginTop: \"16px\" }}>\n            <div\n                className=\"progress-bar\"\n                role=\"progressbar\"\n                style={{ width: `${progress * 100}%` }}\n                aria-valuenow={progress * 100}\n                aria-valuemin={0}\n                aria-valuemax={100}\n            >\n                {Math.round(progress * 100)}%\n            </div>\n        </div>\n    );\n};\n","export function sleep(ms: number): Promise<void> {\n    return new Promise(resolve => window.setTimeout(resolve, ms));\n}\n","const BASE_IMAGE_SIZE = 512 * 512;\n\nexport function calculateImagesCost(count: number, width: number, height: number): number {\n    // 512x512 = 1 credit\n    // floor(count * width * height / 512 / 512)\n    return Math.max(count * Math.floor(width * height / BASE_IMAGE_SIZE), 1);\n}","import { FC, useEffect, useState } from \"react\";\nimport { ListGroup } from \"react-bootstrap\";\nimport { StableDiffusionModel } from \"../client\";\n\ninterface Props {\n    models: StableDiffusionModel[];\n    onSelectModel: (model: StableDiffusionModel) => void;\n    selectedModel: string;\n}\n\nconst MOBILE_HEIGHT_PERCENT = 0.3;\n\nexport const ModelList: FC<Props> = ({ models, onSelectModel, selectedModel }) => {\n    const [maxHeight, setMaxHeight] = useState(window.innerWidth < 576 ? window.innerHeight * MOBILE_HEIGHT_PERCENT : window.innerHeight * 0.7); // Set maxHeight to 80% of the viewport height\n\n    useEffect(() => {\n        const handleResize = () => {\n            let maxHeight = window.innerHeight * 0.7;\n            if (window.innerWidth < 576) {\n                maxHeight = window.innerHeight * MOBILE_HEIGHT_PERCENT;\n            }\n            setMaxHeight(maxHeight); // Update maxHeight based on the current viewport height\n        };\n\n        window.addEventListener(\"resize\", handleResize);\n        return () => {\n            window.removeEventListener(\"resize\", handleResize);\n        };\n    }, []);\n\n    return (\n        <ListGroup\n            style={{\n                maxHeight: `${maxHeight}px`,\n                overflowY: \"auto\",\n                border: \"1px solid #808080\",\n                marginBottom: \"8px\",\n            }}\n        >\n            {models.map((model) => (\n                <ListGroup.Item\n                    key={model.name}\n                    active={selectedModel === model.name}\n                    onClick={() => onSelectModel(model)}\n                    style={{\n                        cursor: \"pointer\",\n                    }}\n                >\n                    {model.name}\n                </ListGroup.Item>\n            ))}\n        </ListGroup>\n    );\n};\n","import { useState, useEffect } from \"react\";\n\nexport class SimpleCache {\n    private storage: Storage;\n\n    constructor() {\n        this.storage = window.localStorage;\n    }\n\n    setItem(key: string, value: any, ttl = 60 * 60) {\n        const item: {\n            value: any;\n            expiry: number;\n        } = {\n            value,\n            expiry: Date.now() + ttl * 1000,\n        };\n        this.storage.setItem(key, JSON.stringify(item));\n    }\n\n    getItem(key: string): any {\n        try {\n            const itemStr = this.storage.getItem(key);\n            if (!itemStr) {\n                return null;\n            }\n    \n            const item: {\n                value: any;\n                expiry: number;\n            } = JSON.parse(itemStr);\n            if (Date.now() > item.expiry) {\n                this.storage.removeItem(key);\n                return null;\n            }\n            return item.value;\n        } catch (error) {\n            console.error(error);\n            return null;\n        }\n    }\n\n    removeItem(key: string) {\n        this.storage.removeItem(key);\n    }\n\n    clear() {\n        this.storage.clear();\n    }\n}\n\nconst cache = new SimpleCache();\n\nexport function useCache<T>(key: string, initialValue: T): [T, React.Dispatch<React.SetStateAction<T>>] {\n  const [value, setValue] = useState<T>(() => {\n    const cachedValue = cache.getItem(key);\n    return cachedValue !== null ? cachedValue : initialValue;\n  });\n\n  useEffect(() => {\n    cache.setItem(key, value);\n  }, [key, value]);\n\n  return [value, setValue];\n}\n","import React, { useEffect, useState } from \"react\";\nimport { Button, Modal, Form, ListGroup, Row, Col } from \"react-bootstrap\";\nimport axios from \"axios\";\nimport { AIBrushApi, StableDiffusionModel } from \"../client\";\nimport { ModelList } from \"./ModelList\";\nimport { useCache } from \"../lib/localcache\";\nimport { recentModels } from \"../lib/recentList\";\n\nconst httpclient = axios.create();\n\ninterface ModelSelectorProps {\n    api: AIBrushApi;\n    initialSelectedModel: string;\n    onSelectModel: (model: string) => void;\n    onCancel: () => void;\n    inpainting: boolean;\n}\n\n\n\nconst ModelSelector: React.FC<ModelSelectorProps> = ({\n    api,\n    initialSelectedModel,\n    onSelectModel,\n    onCancel,\n    inpainting,\n}) => {\n    const [models, setModels] = useCache<StableDiffusionModel[]>(\"models\", []);\n    const [selectedModel, setSelectedModel] =\n        useState<StableDiffusionModel | null>(null);\n    const [searchTerm, setSearchTerm] = useState(\"\");\n\n    const filteredModels = models.filter((model) =>\n        model.inpainting === inpainting && model.name.toLowerCase().includes(searchTerm.toLowerCase())\n    );\n\n    const handleSelect = () => {\n        console.log(\"Selected model:\", selectedModel);\n        if (selectedModel) {\n            onSelectModel(selectedModel.name);\n        }\n    };\n\n    const handleSearch = (e: React.ChangeEvent<HTMLInputElement>) => {\n        setSearchTerm(e.target.value);\n    };\n\n    const handleModelClick = (model: StableDiffusionModel) => {\n        setSelectedModel(model);\n    };\n\n    useEffect(() => {\n        const setSortedModels = (\n            selectedModel: StableDiffusionModel,\n            models: StableDiffusionModel[]\n        ) => {\n            recentModels.addItem(selectedModel.name);\n\n            const recentModelNames = recentModels.getItems();\n            // map from model name to index\n            const recentModelIndices: { [key: string]: number } = {};\n            recentModelNames.forEach((name, index) => {\n                recentModelIndices[name] = index;\n            });\n            // sort models by recentness\n            const sortedModels = models.sort((a, b) => {\n                const aIndex = recentModelIndices[a.name];\n                const bIndex = recentModelIndices[b.name];\n                if (aIndex === undefined && bIndex === undefined) {\n                    return 0;\n                } else if (aIndex === undefined) {\n                    return 1;\n                } else if (bIndex === undefined) {\n                    return -1;\n                } else {\n                    return aIndex - bIndex;\n                }\n            });\n\n            setModels(sortedModels);\n        };\n\n        if (!models || models.length === 0) {\n            api.getModels().then((res) => {\n                console.log(res);\n                const selectedModel =\n                    res.data[initialSelectedModel] ||\n                    Object.values(res.data)[0];\n                console.log(\"Selected model:\", selectedModel);\n                setSelectedModel(selectedModel);\n                setSortedModels(selectedModel, Object.values(res.data));\n            });\n        } else {\n            const selectedModel =\n                models.find((model) => model.name === initialSelectedModel) ||\n                models[0];\n            setSelectedModel(selectedModel);\n            setSortedModels(selectedModel, models);\n        }\n    }, [api, models]);\n\n    useEffect(() => {\n        if (initialSelectedModel) {\n            recentModels.addItem(initialSelectedModel);\n        }\n    }, [initialSelectedModel]);\n\n    return (\n        <>\n            <Modal show={true} onHide={onCancel} size=\"xl\">\n                <Modal.Header closeButton>\n                    <Modal.Title>Select Model</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <Form.Control\n                        type=\"text\"\n                        placeholder=\"Search\"\n                        value={searchTerm}\n                        onChange={handleSearch}\n                    />\n                    <Row className=\"mt-3\">\n                        <Col sm={4}>\n                            <ModelList\n                                models={filteredModels}\n                                onSelectModel={handleModelClick}\n                                selectedModel={selectedModel?.name || \"\"}\n                            />\n                        </Col>\n                        <Col sm={8}>\n                            {selectedModel && (\n                                <>\n                                    <h5>{selectedModel.name}</h5>\n                                    <p>{selectedModel.description}</p>\n                                    {selectedModel.showcases &&\n                                        selectedModel.showcases.length > 0 && (\n                                            <img\n                                                src={selectedModel.showcases[0]}\n                                                alt=\"Showcase\"\n                                                style={{\n                                                    width: \"70%\",\n                                                }}\n                                            />\n                                        )}\n                                </>\n                            )}\n                        </Col>\n                    </Row>\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button variant=\"secondary\" onClick={onCancel}>\n                        Cancel\n                    </Button>\n                    <Button\n                        variant=\"primary\"\n                        onClick={handleSelect}\n                        disabled={!selectedModel}\n                    >\n                        Select\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n        </>\n    );\n};\n\nexport default ModelSelector;\n","import { OverlayTrigger, Tooltip } from \"react-bootstrap\";\n\ninterface Props {\n    onClick: () => void;\n}\n\nexport const ResetToDefaultIcon = ({ onClick }: Props) => {\n    return (\n        <OverlayTrigger\n            placement=\"top\"\n            overlay={<Tooltip id=\"reset-tooltip\">Reset to Default</Tooltip>}\n        >\n            <i className=\"fa fa-sync\" style={{\n                cursor: \"pointer\",\n            }} onClick={onClick}></i>\n        </OverlayTrigger>\n    );\n};\n","import React, { FC, useEffect, useState } from 'react';\nimport moment from \"moment\";\n\n// implement an error notification component\n// error message and timestamp are passed in as props\n// but close button can make the error message disappear\n\n// show error when the timestamp or message changes with useEffect hook\n// hide error when the close button is clicked\n\ninterface Props {\n    message: string | null;\n    timestamp: number;\n}\n\ninterface AlertProps {\n    message: string;\n    timestamp: number;\n    alertType: 'success' | 'info' | 'warning' | 'danger';\n}\n\nconst Alert: FC<AlertProps> = ({ message, timestamp, alertType }) => {\n    const [show, setShow] = useState(!!message);\n\n    useEffect(() => {\n        setShow(!!message);\n        // set a timeout of 10 seconds to hide the message if it is currently showing\n        if (message) {\n            const timeout = setTimeout(() => {\n                setShow(false);\n            }, 10000);\n            return () => {\n                clearTimeout(timeout);\n            };\n        }\n    }, [message, timestamp]);\n\n    if (!show) {\n        return null;\n    }\n\n    return (\n        <div className={`alert alert-${alertType} ${show ? 'show' : 'hide'}`}>\n            <button\n                type=\"button\"\n                className=\"close\"\n                onClick={() => setShow(false)}\n            >\n                &times;\n            </button>\n            {message}\n        </div>\n    );\n};\n\nexport const ErrorNotification: FC<Props> = ({ message, timestamp }) => {\n    return (\n        <Alert message={message || ''} timestamp={timestamp} alertType=\"danger\" />\n    );\n};\n\nexport const SuccessNotification: FC<Props> = ({ message, timestamp }) => {\n    return (\n        <Alert message={message || ''} timestamp={timestamp} alertType=\"success\" />\n    );\n};\n","import React, { FC, useState, useEffect } from \"react\";\nimport { ChromePicker } from \"react-color\";\n\nimport \"./ColorPicker.css\"\n\ninterface Props {\n    color: string;\n    onColorSelected: (color: string) => void;\n}\n\nexport const ColorPicker: FC<Props> = ({ color, onColorSelected }) => {\n    const [displayColorPicker, setDisplayColorPicker] = useState(false);\n    const [tmpColor, setTmpColor] = useState(color);\n\n    const handleClick = () => {\n        setDisplayColorPicker(!displayColorPicker);\n        if (displayColorPicker) {\n            onColorSelected(tmpColor);\n        }\n    };\n\n    const handleClose = () => {\n        setDisplayColorPicker(false);\n        if (displayColorPicker) {\n            onColorSelected(tmpColor);\n        }\n    };\n\n    const popover: React.CSSProperties = {\n        position: \"absolute\",\n        zIndex: 2,\n    };\n    const cover: React.CSSProperties = {\n        position: \"fixed\",\n        top: \"0px\",\n        right: \"0px\",\n        bottom: \"0px\",\n        left: \"0px\",\n    };\n\n    return (\n        <>\n            <button className=\"color-picker\" onClick={handleClick}>\n                <i className=\"fas fa-plus\" />\n            </button>\n            {displayColorPicker ? (\n                <div style={popover}>\n                    <div style={cover} onClick={handleClose} />\n                    <ChromePicker\n                        color={tmpColor}\n                        onChange={(color) => setTmpColor(color.hex)}\n                        onChangeComplete={(color) => setTmpColor(color.hex)}\n                    />\n                </div>\n            ) : null}\n        </>\n    );\n};\n","import React, { FC, useEffect, useState } from \"react\";\nimport { ChromePicker } from \"react-color\";\n\nimport { Renderer } from \"./renderer\";\nimport { BaseTool, Tool } from \"./tool\";\nimport { ZoomHelper } from \"./zoomHelper\";\nimport { PaletteButton } from \"./PaletteButton\";\nimport { ColorPicker } from \"./ColorPicker\";\n\nexport const defaultColors = [\n    \"#FFFFFF\",\n    \"#5A2C02\",\n    \"#386EB6\",\n    \"#6B31A1\",\n    \"#CB2C26\",\n    \"#000000\",\n    \"#888888\",\n    \"#50B050\",\n    \"#FBDB37\",\n    \"#E88D2D\",\n];\n\nexport class PencilTool extends BaseTool implements Tool {\n    private brushSize = 10;\n\n    private panning = false;\n    private isDrawing = false;\n    private lastX = 0;\n    private lastY = 0;\n    private colorPicking = false;\n    private lastPickedColor = \"#000000\";\n    private _dirty = false;\n\n    set dirty(dirty: boolean) {\n        this._dirty = dirty;\n        if (this.dirtyListener) {\n            this.dirtyListener(dirty);\n        }\n    }\n\n    get dirty() {\n        return this._dirty;\n    }\n\n    private dirtyListener?: (dirty: boolean) => void;\n    private colorPickedListener?: (color: string) => void;\n\n    constructor(\n        renderer: Renderer,\n        private layer: \"base\" | \"mask\",\n        private brushColor = defaultColors[0],\n        name = \"pencil\"\n    ) {\n        super(renderer, name);\n    }\n\n    private sync() {\n        if (this.colorPicking) {\n            this.renderer.setCursor({\n                x: this.lastX,\n                y: this.lastY,\n                radius: this.renderer.getWidth() / 20,\n                color: this.lastPickedColor,\n                type: \"colorpicker\",\n            });\n        } else {\n            this.renderer.setCursor({\n                x: this.lastX,\n                y: this.lastY,\n                radius: this.brushSize / 2,\n                color: this.brushColor,\n                type: \"circle-fill\",\n            });\n        }\n    }\n\n    updateArgs(args: any) {\n        super.updateArgs(args);\n        this.brushSize = args.brushSize || 10;\n        this.brushColor = args.brushColor || defaultColors[0];\n        this.sync();\n    }\n\n    onMouseDown(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        if (this.colorPicking) {\n            return;\n        }\n        if (event.button === 0) {\n            let { x, y } = this.zoomHelper.translateMouseToCanvasCoordinates(\n                event.nativeEvent.offsetX,\n                event.nativeEvent.offsetY\n            );\n            this.renderer.drawPoint(\n                x,\n                y,\n                this.brushSize,\n                this.brushColor,\n                this.layer\n            );\n            this.isDrawing = true;\n            this.lastX = x;\n            this.lastY = y;\n            this.dirty = true;\n        } else if (event.button === 1) {\n            this.panning = true;\n        }\n        this.sync();\n    }\n\n    onMouseMove(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>): void {\n        let { x, y } = this.zoomHelper.translateMouseToCanvasCoordinates(\n            event.nativeEvent.offsetX,\n            event.nativeEvent.offsetY\n        );\n        if (this.colorPicking) {\n            this.lastPickedColor = this.renderer.getPixel(x, y);\n        } else if (this.panning) {\n            this.zoomHelper.onPan(event);\n        } else {\n            if (this.isDrawing) {\n                this.renderer.drawLine(\n                    this.lastX,\n                    this.lastY,\n                    x,\n                    y,\n                    this.brushSize,\n                    this.brushColor,\n                    this.layer\n                );\n                this.dirty = true;\n            }\n        }\n        this.lastX = x;\n        this.lastY = y;\n        this.sync();\n    }\n\n    onMouseUp(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>): void {\n        if (event.button === 0) {\n            this.isDrawing = false;\n            if (this.colorPicking) {\n                this.colorPicking = false;\n                this.brushColor = this.lastPickedColor;\n                if (this.colorPickedListener) {\n                    this.colorPickedListener(this.lastPickedColor);\n                }\n            }\n        } else if (event.button === 1) {\n            this.panning = false;\n        }\n        this.sync();\n    }\n\n    onWheel(event: WheelEvent) {\n        this.zoomHelper.onWheel(event);\n        this.sync();\n    }\n\n    cancel() {\n        // kind of a hack, clears the selection layer\n        this.renderer.setEditImage(null);\n        this.dirty = false;\n    }\n\n    confirm() {\n        this.renderer.commitSelection();\n        const encodedImage = this.renderer.getEncodedImage(null);\n        if (encodedImage && this.saveListener) {\n            this.saveListener(encodedImage);\n        }\n        this.dirty = false;\n    }\n\n    onSaveImage(listener: (encodedImage: string) => void): void {\n        this.saveListener = listener;\n    }\n\n    onDirty(listener: (dirty: boolean) => void): void {\n        this.dirtyListener = listener;\n    }\n\n    destroy(): boolean {\n        if (this.dirty) {\n            this.renderer.commitSelection();\n        }\n        return true;\n    }\n\n    beginColorpicker(): void {\n        this.colorPicking = true;\n        this.sync();\n    }\n\n    onColorPicked(listener: (color: string) => void): void {\n        this.colorPickedListener = listener;\n    }\n}\n\ninterface ControlsProps {\n    renderer: Renderer;\n    tool: PencilTool;\n    colors: string[];\n}\n\nconst MAX_PALETTE_SIZE = 30;\n\nfunction addToPalette(palette: string[], color: string): string[] {\n    if (palette.indexOf(color) === -1) {\n        // insert at the beginning\n        palette = [color, ...palette];\n    }\n    if (palette.length > MAX_PALETTE_SIZE) {\n        palette = palette.slice(0, MAX_PALETTE_SIZE);\n    }\n    return palette;\n}\n\nexport const Controls: FC<ControlsProps> = ({ renderer, tool, colors }) => {\n    const [brushSize, setBrushSize] = useState(10);\n    const [brushColor, setBrushColor] = useState(colors[0]);\n    const [palette, setPalette] = useState(colors);\n    const [dirty, setDirty] = useState(false);\n\n    tool.onDirty(setDirty);\n\n    useEffect(() => {\n        tool.updateArgs({\n            brushSize,\n            brushColor,\n            palette,\n        });\n    }, [brushSize, brushColor, palette]);\n\n    const onColorSelected = (color: string) => {\n        setBrushColor(color);\n        setPalette(addToPalette(palette, color));\n    };\n\n    tool.onColorPicked(onColorSelected);\n\n    return (\n        <div style={{ marginTop: \"16px\" }}>\n            <div className=\"form-group\">\n                <label style={{ width: \"100%\" }}>\n                    Brush size\n                    <small\n                        className=\"form-text text-muted\"\n                        style={{ float: \"right\" }}\n                    >\n                        {brushSize}px\n                    </small>\n                </label>\n                <input\n                    type=\"range\"\n                    className=\"form-control-range\"\n                    min=\"1\"\n                    max=\"100\"\n                    value={brushSize}\n                    onChange={(e) => setBrushSize(parseInt(e.target.value))}\n                />\n            </div>\n            <div\n                style={{\n                    display: \"flex\",\n                    flexDirection: \"row\",\n                    flexWrap: \"wrap\",\n                }}\n            >\n                {palette.map((color, i) => (\n                    <PaletteButton\n                        key={i}\n                        selectedColor={brushColor}\n                        color={color}\n                        onClick={(color) => setBrushColor(color)}\n                        onColorSelected={(color) => onColorSelected(color)}\n                    />\n                ))}\n                {/* <div\n                    className=\"color-picker\"\n                    style={{ textAlign: \"center\", backgroundColor: \"#ccc\" }}\n                >\n                    <i className=\"fas fa-eye-dropper\" />\n                </div> */}\n                <button\n                    className=\"color-picker\"\n                    onClick={() => tool.beginColorpicker()}\n                >\n                    <i className=\"fas fa-eye-dropper\" />\n                </button>\n                <ColorPicker\n                    color={brushColor}\n                    onColorSelected={(color) => onColorSelected(color)}\n                />\n            </div>\n            <div\n                className=\"form-group\"\n                style={{\n                    marginTop: \"16px\",\n                    visibility: dirty ? \"visible\" : \"hidden\",\n                }}\n            >\n                <button\n                    className=\"btn btn-secondary\"\n                    onClick={() => tool.cancel()}\n                >\n                    Revert\n                </button>\n                <button\n                    className=\"btn btn-primary\"\n                    onClick={() => tool.confirm()}\n                    style={{ marginLeft: \"8px\" }}\n                >\n                    Save\n                </button>\n            </div>\n        </div>\n    );\n};\n","import React, { useState, useEffect } from \"react\";\nimport { Renderer } from \"./renderer\";\nimport { Cursor, Rect } from \"./models\";\nimport { Tool, BaseTool } from \"./tool\";\nimport { AspectRatioSelector } from \"../../components/AspectRatioSelector\";\nimport { getUpscaleLevel } from \"../../lib/upscale\";\nimport {\n    DEFAULT_ASPECT_RATIO,\n    aspectRatios,\n    getClosestAspectRatio,\n} from \"../../lib/aspecRatios\";\nimport { ZoomHelper } from \"./zoomHelper\";\nimport { runInThisContext } from \"vm\";\n\nexport class SelectionTool extends BaseTool implements Tool {\n    private selectionOverlay: Rect | undefined;\n    private selectionOverlayPreview: Rect | undefined;\n    private outpaint?: boolean;\n\n    // private selectionWidth: number = 512;\n    // private selectionHeight: number = 512;\n\n    private panning = false;\n\n    // TODO: size modifier to make the selection overlay smaller\n\n    constructor(renderer: Renderer) {\n        super(renderer, \"select\");\n    }\n\n    updateArgs(args: any) {\n        args = {\n            ...this.getArgs(),\n            ...args,\n        }\n        super.updateArgs(args);\n        this.selectionOverlay = args.selectionOverlay || {\n            x: 0,\n            y: 0,\n            width: 512,\n            height: 512,\n        };\n        this.outpaint = args.outpaint;\n        if (!this.outpaint) {\n            this.selectionOverlay = this.clamp(this.selectionOverlay!);\n        }\n        this.sync();\n    }\n\n    private clamp(rect: Rect): Rect {\n        const imageWidth = this.renderer.getWidth();\n        const imageHeight = this.renderer.getHeight();\n        let x = rect.x;\n        let y = rect.y;\n        let width = rect.width;\n        let height = rect.height;\n        // clamp to the canvas\n        x = Math.max(0, Math.min(x, imageWidth - this.selectionOverlay!.width));\n        y = Math.max(0, Math.min(y, imageHeight - rect.height));\n        x = Math.min(x, imageWidth - rect.width);\n        y = Math.min(y, imageHeight - rect.height);\n        width = Math.min(width, imageWidth);\n        height = Math.min(height, imageHeight);\n        return {\n            x: x,\n            y: y,\n            width: width,\n            height: height,\n        };\n    }\n\n    private sync(): void {\n        this.renderer.setSelectionOverlay(this.selectionOverlay);\n        this.renderer.setSelectionOverlayPreview(this.selectionOverlayPreview);\n    }\n\n    onMouseDown(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        if (event.type == \"touch\") {\n            this.onMouseMove(event);\n        } else if (event.button === 0) {\n            this.selectionOverlay = this.selectionOverlayPreview;\n            this.selectionOverlayPreview = undefined;\n            this.sync();\n            this.updateArgs({\n                selectionOverlay: this.selectionOverlay,\n            });\n        } else if (event.button === 1) {\n            this.panning = true;\n        }\n    }\n\n    onMouseMove(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        const imageWidth = this.renderer.getWidth();\n        const imageHeight = this.renderer.getHeight();\n        if (this.panning) {\n            this.zoomHelper.onPan(event);\n        } else {\n            let { x, y } = this.zoomHelper.translateMouseToCanvasCoordinates(\n                event.nativeEvent.offsetX,\n                event.nativeEvent.offsetY\n            );\n\n            // round to the nearest 16 pixels\n            x = Math.round(x / 16) * 16;\n            y = Math.round(y / 16) * 16;\n            // offset by -256 to center the rect\n            x -= 256;\n            y -= 256;\n\n            this.selectionOverlayPreview = {\n                x: x,\n                y: y,\n                width: this.selectionOverlay!.width,\n                height: this.selectionOverlay!.height,\n            };\n\n            if (!this.outpaint) {\n                this.selectionOverlayPreview = this.clamp(this.selectionOverlayPreview);\n            }\n\n            \n            this.sync();\n        }\n    }\n\n    onMouseUp(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        if (event.button === 0 && event.type == \"touch\") {\n            this.selectionOverlay = this.selectionOverlayPreview;\n            this.selectionOverlayPreview = undefined;\n            this.sync();\n            this.updateArgs({\n                selectionOverlay: this.selectionOverlay,\n            });\n        }\n        this.panning = false;\n    }\n\n    onMouseLeave(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        this.selectionOverlayPreview = undefined;\n        this.panning = false;\n        this.sync();\n    }\n\n    onWheel(event: WheelEvent) {\n        this.zoomHelper.onWheel(event);\n    }\n\n    destroy() {\n        // this.renderer.setSelectionOverlay(undefined);\n        this.renderer.setSelectionOverlayPreview(undefined);\n        return true;\n    }\n}\n\ninterface ControlsProps {\n    renderer: Renderer;\n    tool: Tool;\n    /** Lock aspect ratio for smaller images */\n    lockAspectRatio?: boolean;\n    outpaint?: boolean;\n}\n\nexport const Controls: React.FC<ControlsProps> = ({\n    renderer,\n    tool,\n    lockAspectRatio,\n    outpaint,\n}) => {\n    const upscaleLevel = getUpscaleLevel(\n        renderer.getWidth(),\n        renderer.getHeight()\n    );\n    const [aspectRatio, setAspectRatio] = useState(DEFAULT_ASPECT_RATIO);\n    const [size, setSize] = useState(1);\n\n    useEffect(() => {\n        const upscaleLevel = getUpscaleLevel(\n            renderer.getWidth(),\n            renderer.getHeight()\n        );\n        // lock aspect ratio to image\n        if (upscaleLevel === 0 && lockAspectRatio) {\n            const aspectRatio = getClosestAspectRatio(\n                renderer.getWidth(),\n                renderer.getHeight()\n            );\n            setAspectRatio(aspectRatio.id);\n            tool.updateArgs({\n                selectionOverlay: {\n                    x: 0,\n                    y: 0,\n                    width: aspectRatio.width,\n                    height: aspectRatio.height,\n                },\n                outpaint,\n            });\n        } else {\n            const args = tool.getArgs();\n            if (args.selectionOverlay) {\n                // restore args\n                const aspectRatio = getClosestAspectRatio(\n                    args.selectionOverlay.width,\n                    args.selectionOverlay.height\n                );\n                setAspectRatio(aspectRatio.id);\n                setSize(args.selectionOverlay.width / aspectRatio.width);\n                tool.updateArgs(args);\n            } else {\n                // set default args\n                args.selectionOverlay = {\n                    x: 0,\n                    y: 0,\n                    width: aspectRatios[aspectRatio].width,\n                    height: aspectRatios[aspectRatio].height,\n                };\n                args.outpaint = outpaint;\n                tool.updateArgs(args);\n            }\n        }\n    }, [tool]);\n\n    function onChange(aspectRatioId: number, size: number) {\n        const args = tool.getArgs();\n        const aspectRatio = aspectRatios[aspectRatioId];\n        if (args.selectionOverlay) {\n            const xDiff =\n                args.selectionOverlay.width - aspectRatio.width * size;\n            const yDiff =\n                args.selectionOverlay.height - aspectRatio.height * size;\n            args.selectionOverlay.width = Math.round(aspectRatio.width * size);\n            args.selectionOverlay.height = Math.round(\n                aspectRatio.height * size\n            );\n            args.selectionOverlay.x += xDiff / 2;\n            args.selectionOverlay.y += yDiff / 2;\n            if (!outpaint) {\n                // clamp to canvas\n                args.selectionOverlay.x = Math.round(\n                    Math.max(\n                        0,\n                        Math.min(\n                            args.selectionOverlay.x,\n                            renderer.getWidth() - args.selectionOverlay.width\n                        )\n                    )\n                );\n                args.selectionOverlay.y = Math.round(\n                    Math.max(\n                        0,\n                        Math.min(\n                            args.selectionOverlay.y,\n                            renderer.getHeight() - args.selectionOverlay.height\n                        )\n                    )\n                );\n            }\n        }\n        tool.updateArgs({\n            selectionOverlay: args.selectionOverlay,\n        });\n    }\n\n    return (\n        <>\n            {upscaleLevel > 0 && (\n                <AspectRatioSelector\n                    aspectRatio={aspectRatio}\n                    onChange={(aspectRatioId) => {\n                        onChange(aspectRatioId, size);\n                        setAspectRatio(aspectRatioId);\n                    }}\n                />\n            )}\n            <div className=\"form-group\">\n                <label htmlFor=\"size\" style={{ width: \"100%\" }}>\n                    Size\n                    <small\n                        className=\"form-text text-muted\"\n                        style={{ float: \"right\" }}\n                    >\n                        {Math.round(size * 100)}%\n                    </small>\n                </label>\n                {/* range from 0.1 to 1 */}\n                <input\n                    type=\"range\"\n                    className=\"form-control-range\"\n                    id=\"size\"\n                    min=\"1\"\n                    max=\"2\"\n                    step=\"0.1\"\n                    value={size}\n                    onChange={(event) => {\n                        onChange(aspectRatio, parseFloat(event.target.value));\n                        setSize(parseFloat(event.target.value));\n                    }}\n                />\n            </div>\n        </>\n    );\n};\n","import { aspectRatios } from \"./aspecRatios\";\n\nexport function getUpscaleLevel(width: number, height: number): number {\n    for (let i = 0; i < aspectRatios.length; i++) {\n        const aspectRatio = aspectRatios[i];\n        if (width * height <= aspectRatio.width * aspectRatio.height) {\n            return 0;\n        }\n        // if (width === aspectRatio.width && height === aspectRatio.height) {\n        //     return upscaleLevel;\n        // }\n    }\n    width /= 2;\n    height /= 2;\n    for (let i = 0; i < aspectRatios.length; i++) {\n        const aspectRatio = aspectRatios[i];\n        if (width * height <= aspectRatio.width * aspectRatio.height) {\n            return 1;\n        }\n        // if (width === aspectRatio.width && height === aspectRatio.height) {\n        //     return upscaleLevel;\n        // }\n    }\n    return 2;\n}\n"],"sourceRoot":""}