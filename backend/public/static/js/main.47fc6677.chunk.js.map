{"version":3,"sources":["components/ImagePopup.tsx","components/PendingImagesThumbnail.tsx","components/PendingImages.tsx","pages/image-editor/enhance-tool.tsx","pages/image-editor/smudge-tool.tsx","pages/image-editor/inpaint-tool.tsx","pages/Homepage.tsx","pages/image-editor/PaletteButton.tsx","pages/image-editor/ColorPicker.tsx","pages/image-editor/pencil-tool.tsx","client/api.ts","client/base.ts","client/common.ts","lib/aspecRatios.ts","pages/image-editor/ImageEditor.tsx","pages/image-editor/renderer.ts","pages/image-editor/import-export.tsx","pages/image-editor/augment-tool.tsx","lib/boost.ts","components/BoostLevelPopup.tsx","components/BoostWidget.tsx","lib/imageutil.ts","components/BusyModal.tsx","pages/image-editor/zoomHelper.tsx","pages/image-editor/tool.ts","lib/localImagesStore.ts","pages/Login.tsx","components/TokenRefresher.tsx","components/Healthchecker.tsx","pages/admin/BoostList.tsx","pages/admin/GlobalSettings.tsx","pages/admin/Admin.tsx","pages/DeletedImages.tsx","pages/DiscordLogin.tsx","pages/LocalDeletedImages.tsx","pages/SavedImagesPage.tsx","pages/TestPage.tsx","App.tsx","config.ts","reportWebVitals.ts","index.tsx","lib/apisocket.ts","components/ImageThumbnail.tsx","components/SeedInput.tsx","components/ImagePrompt.tsx","lib/upscale.ts","lib/sleep.ts","lib/supportedModels.ts","components/Alerts.tsx","pages/image-editor/selection-tool.tsx","components/AspectRatioSelector.tsx"],"names":["ImagePopup","assetsUrl","image","censorNSFW","onClose","onDelete","onFork","onEdit","onNSFW","onSave","img","useRef","src","id","updated_at","imageData","score","params","negative_prompt","negative_score","useState","showNSFW","setShowNSFW","useEffect","current","onerror","title","label","prompt","show","onHide","size","Header","closeButton","Title","Body","ref","style","maxWidth","maxHeight","display","marginLeft","marginRight","filter","nsfw","alt","className","marginTop","status","displayStatus","charAt","toUpperCase","slice","icon","StatusEnum","Pending","Processing","Completed","Saved","Error","fontSize","position","top","statusBadge","float","onClick","marginBottom","width","height","model","color","href","seed","PendingImagesThumbnail","pendingCount","processingCount","hover","setHover","onMouseEnter","onMouseLeave","backgroundImage","backgroundSize","margin","cursor","background","lineHeight","PendingImages","images","onDeleteImage","onCancel","imageIcon","pendingDiv","map","phrases","length","substring","Footer","eraserWidthModifier","EnhanceTool","renderer","selectionTool","negativePrompt","count","variationStrength","_dirty","worker","idCounter","_state","stateHandler","selectionControlsListener","selectedImageDataIndex","selectedImageData","panning","erasing","progressListener","errorListener","dirtyListener","SelectionTool","selectSupported","state","selectionArgs","getArgs","selectionOverlay","x","y","getWidth","getHeight","updateArgs","ImageUtilWorker","this","dirty","listener","handler","error","destroy","setCursor","undefined","outpaint","getUpscaleLevel","event","zoomHelper","translateMouseToCanvasCoordinates","nativeEvent","offsetX","offsetY","button","ImageData","data","erasePoint","onMouseDown","getSelectionOverlay","baseWidth","Math","min","eraserRadius","floor","relX","relY","startX","max","startY","endX","endY","i","j","index","distance","sqrt","pow","alphaPct","alpha","setEditImage","featherWidth","radius","type","onPan","updateCursor","onMouseMove","onMouseUp","onWheel","args","console","log","api","imageId","baseImage","baseImageData","Promise","resolve","reject","getImageData","responseType","then","resp","base64ImageData","Buffer","from","toString","imageElement","Image","onload","canvas","document","createElement","ctx","getContext","drawImage","newId","processRequest","feather","pixels","updatedImageData","remove","progress","apisocket","a","notifyError","encodedImage","getEncodedImage","input","defaultArgs","encoded_image","parent","denoising_strength","ceil","temporary","updateProgress","createImage","onUploadProgress","progressEvent","loaded","total","newImages","completed","lastUpdate","moment","onMessage","msg","JSON","parse","NOTIFICATION_IMAGE_UPDATED","loadImageData","startTime","lastCheck","completeCount","sleep","diff","pendingIds","batchGetImages","ids","updatedImagesResult","updatedImages","byId","reduce","acc","updated","isAfter","sort","b","push","direction","saveListener","commitSelection","negative_phrases","BaseTool","EnhanceControls","tool","setCount","setDirty","setVariationStrength","setPrompt","setNegativePrompt","setModel","setState","setProgress","setError","onChangeState","onProgress","onError","onDirty","role","aria-valuenow","aria-valuemin","aria-valuemax","round","data-dismiss","aria-label","aria-hidden","lockAspectRatio","htmlFor","value","onChange","e","target","step","parseInt","parseFloat","supportedModels","cancel","confirm","erase","submit","when","message","SmudgeTool","brushSize","brushOpacity","lastX","lastY","smudging","sync","smudgeLine","copyEditImageFromBaseImage","SmudgeControls","setBrushSize","setBrushOpacity","visibility","InpaintTool","imageWidth","imageHeight","selectionWidth","render","alphaMask","alphaPixels","snapshot","undo","clearRedoStack","expandToOverlay","encodedMask","getEncodedMask","maskData","encoded_mask","closestAspectRatio","getClosestAspectRatio","selection_overlay","window","InpaintControls","setoutpaint","checked","anonymousClient","axios","create","defaults","headers","common","Homepage","apiSocket","localImages","creating","setCreating","selectedImage","setSelectedImage","parentImage","setParentImage","loadingParent","setLoadingParent","savingImage","setSavingImage","uploadProgress","setUploadingProgress","showPendingImages","setShowPendingImages","setImages","err","setErr","errTime","setErrTime","success","setSuccess","successTime","setSuccessTime","hasMore","setHasMore","search","setSearch","searchDebounce","setSearchDebounce","bulkDeleteSelecting","setBulkDeleteSelecting","bulkDeleting","setBulkDeleting","bulkDeleteIds","setBulkDeleteIds","boost","setBoost","setCensorNSFW","useParams","history","useHistory","location","useLocation","valueOf","handle","setTimeout","clearTimeout","find","getImage","replace","onSubmit","scrollTo","saveImage","sortImages","onEditNewImage","newImage","created_at","created_by","steps","uuid","updatedImage","loadImages","add","listImages","NOTIFICATION_BOOST_UPDATED","getBoost","updatedBoost","lock","pollImages","pendingOrProcessingImages","imageStatuses","statusChange","deleteImage","getImageDownloadUrls","downloadUrls","get","image_url","binaryImageData","timerHandle","setInterval","clearInterval","refreshBoost","interval","qs","ignoreQueryPrefix","loadParent","isPendingOrProcessing","aScore","bScore","trim","onLoadMore","minUpdatedAt","forEach","deleted_at","createInput","split","percentCompleted","hardDeleteImage","onThumbnailClicked","onConfirmBulkDelete","promises","Object","keys","all","completedOrSavedImages","pendingImages","processingImages","onUpdateBoostActive","active","updateBoost","is_active","level","alert","onUpdateBoostLevel","textAlign","timestamp","onUpdateActive","paddingBottom","placeholder","Toggle","variant","Menu","Item","dataLength","next","loader","bulkDelete","PaletteButton","selectedColor","backgroundColor","ColorPicker","onColorSelected","displayColorPicker","setDisplayColorPicker","tmpColor","setTmpColor","zIndex","right","bottom","left","hex","onChangeComplete","defaultColors","PencilTool","brushColor","palette","isDrawing","colorPicking","lastPickedColor","colorPickedListener","drawPoint","getPixel","drawLine","Controls","setBrushColor","setPalette","indexOf","addToPalette","onColorPicked","flexDirection","flexWrap","beginColorpicker","AddMetricItemTypeEnum","HealthcheckStatusEnum","ImageParamsControlnetTypeEnum","ImageParamsAugmentationEnum","UpsertWorkerInputStatusEnum","WorkerStatusEnum","BASE_PATH","BaseAPI","configuration","basePath","globalAxios","RequiredError","field","name","DUMMY_BASE_URL","assertParamExists","functionName","paramName","paramValue","setSearchParams","url","searchParams","URLSearchParams","objects","object","key","Array","isArray","delete","item","append","set","serializeDataIfNeeded","requestOptions","nonString","isJsonMime","stringify","toPathString","pathname","hash","createRequestFunction","axiosArgs","axiosRequestArgs","options","request","AIBrushApiFp","localVarAxiosParamCreator","addMetrics","addMetricsInput","localVarUrlObj","URL","baseOptions","localVarRequestOptions","method","localVarQueryParameter","localVarHeaderParameter","query","headersFromBaseOptions","batchGetImagesInput","createImageInput","createInviteCode","createTmpImage","localVarPath","encodeURIComponent","String","depositBoost","userId","depositRequest","discordLogin","getAssetsUrl","getBoostForUser","getFeatures","getGlobalSettings","getImageUploadUrls","getMaskData","getThumbnailData","healthcheck","isAdmin","listBoosts","limit","login","loginInput","refresh","refreshLoginInput","updateBoostRequest","updateGlobalSettings","updateGlobalSettingsRequest","updateImage","updateImageInput","updateLargeImage","updateLargeImageRequest","uploadImageData","body","uploadThumbnailData","verify","verifyLoginInput","AIBrushApiAxiosParamCreator","localVarAxiosArgs","AIBrushApi","DEFAULT_ASPECT_RATIO","aspectRatios","displayName","aspectRatio","tests","aRatio","bRatio","abs","compareSize","upscale","ImageEditor","showSelectionControls","setShowSelectionControls","tools","iconClass","constructor","r","renderControls","t","onShowSelectionControls","setImage","setRenderer","setTool","canUndo","setCanUndo","canRedo","setCanRedo","busyMessage","setBusyMessage","canvasRef","onSelectTool","toolconfig","newTool","onSaveImage","saveNewImage","newArgs","renderTool","buttonClass","isSelected","preventDefault","localImage","imageSrc","download_urls","createRenderer","setBaseImage","loadImage","onSnapshot","addEventListener","removeEventListener","disabled","redo","verticalAlign","touchAction","userSelect","onTouchStart","onTouchMove","onTouchEnd","select","transform","resetView","Renderer","undoStack","redoStack","currentSnapshot","backgroundLayer","baseImageLayer","editLayer","selectionOverlayPreview","hasSelection","zoom","snapshotListener","allowRedo","pop","clearRect","putImageData","notifySnapshotListener","shift","context","setTransform","drawOverlay","pattern","createPattern","createCheckeredPattern","fillStyle","fillRect","color1","color2","updateSelectionOverlay","initializeBackgroundLayer","setSelectionOverlay","updateZoomAndOffset","lineWidth","strokeStyle","strokeRect","beginPath","arc","PI","stroke","globalAlpha","fill","moveTo","lineTo","result","toDataURL","selection","imageDataToEncodedImage","erasure","mask","convertErasureToMask","brushx","brushy","absx","leftEdge","rightEdge","topEdge","bottomEdge","absy","contains","x1","y1","x2","y2","lineCap","unitVector","totalRed","totalGreen","totalBlue","averageRed","averageGreen","averageBlue","pixel","g","rgbToHex","minX","minY","newCanvas","ImportExportControls","backupImage","setBackupImage","files","byteString","atob","buffer","ArrayBuffer","intArray","Uint8Array","charCodeAt","blob","Blob","saveAs","onExport","AugmentControls","activeAugmentation","setActiveAugmentation","imageWorker","setImageWorker","lastError","setLastError","augmentImageData","augmentation","c","imageDataToCanvas","Upscale","FaceRestore","createResp","processingImage","checkResp","imageDataResp","binaryImageToDataBase64","decodeImage","upscaleFactor","newImageData","onAugment","fixImageSize","BOOST_LEVELS","description","BoostLevelPopup","selectedBoostLevel","updatedBoostLevel","setUpdatedBoostLevel","Modal","centered","boostLevel","COOLDOWN_MILLISECONDS","boostLevelToLabel","1","2","4","8","BoostWidget","remainingTime","setRemainingTime","hidden","setHidden","cooldown","setCooldown","updatingBoostLevel","setUpdatingBoostLevel","borderRadius","paddingTop","paddingLeft","paddingRight","fontWeight","animationName","animationDuration","animationIterationCount","updateRemainingTime","remainingMilliseconds","balance","activated_at","millisecondsSinceLastActivated","utc","format","fontStyle","animation","splitImage","initImage","tile_size","num_tiles_x","num_tiles_y","tiles","x0","y0","tile","numTilesX","numTilesY","tileSize","mergeTiles","splitResult","tileCanvas","resizeImage","numWorkers","workers","callbacks","Worker","process","bind","postMessage","terminate","createEncodedThumbnail","cropWidth","cropHeight","cropX","cropY","base64","binaryImage","resizeEncodedImage","encodedImageToBlob","binaryString","arr","uploadBlob","signedUrl","xhr","XMLHttpRequest","open","setRequestHeader","send","BusyModal","children","backdrop","keyboard","ZoomHelper","startTouches","startZoom","startOffsetX","startOffsetY","originalZoom","getZoom","getOffsetX","getOffsetY","canvasPoint","deltaY","xDiff","yDiff","movementX","movementY","rect","getBoundingClientRect","touches","canvasRect","getCanvas","startTouch1","startTouch2","touch1","touch2","startDistance","clientX","clientY","startCenterX","startCenterY","centerX","centerY","startCanvasPoint","xDiff2","yDiff2","mouseX","mouseY","touchHandle","_pinchZooming","_panning","localStorage","getItem","setItem","_updateCursor","touch","identifier","pageX","pageY","screenX","screenY","LocalImagesStore","db","indexedDB","onupgradeneeded","evt","imagesStore","objectStoreNames","transaction","objectStore","createObjectStore","keyPath","createIndex","unique","onsuccess","_","legacyImage","join","stable_diffusion_strength","iterations","store","hydrateImage","cleanupDeletedImages","put","range","IDBKeyRange","lowerBound","upperBound","openCursor","toLowerCase","includes","continue","imagesRequest","clear","olderThan","getDeletedImages","deletedImages","subtract","Login","props","email","setEmail","emailSubmitted","setEmailSubmitted","code","setCode","inviteCode","onLogin","match","client","invite_code","onVerify","aria-describedby","host","protocol","redirectUri","discordLink","TokenRefresher","onCredentialsRefreshed","onCredentialsExpired","credentials","refreshToken","loginResult","catch","Healthchecker","healthCheck","setHealthCheck","BoostList","boosts","setBoosts","amount","setAmount","setLevel","showDeposit","setShowDeposit","onDepositBoost","user_id","fromNow","Number","GlobalSettings","minimum_worker_allocations","stable_diffusion","stable_diffusion_inpainting","swinir","workerSettings","setWorkerSettings","saving","setSaving","loadWorkerSettings","settings","settings_json","saveWorkerSettings","Admin","links","setLinks","onGenerateLink","link","DeletedImages","deleting","setDeleting","onDeleteAllImages","onRestoreImage","goBack","borderBottom","ImageThumbnail","DiscordLogin","accessToken","LocalDeletedImages","clearDeletedImages","SavedImagesPage","latestCursor","findIndex","deletedIds","uniqueIds","Set","payload","NOTIFICATION_IMAGE_DELETED","Dropdown","res","TestPage","originalImage","setOriginalImage","upscaledImage","setUpscaledImage","upscaleImageData","onImageSelected","originalImageData","upscaledTile","upscaledImageData","feathered","upscaledCanvas","config","apiUrl","httpClient","ApiSocket","updateHttpClient","App","setCredentials","setAssetsUrl","setIsAdmin","features","setFeatures","onLogout","removeItem","init","assets_url","storedCredentials","is_admin","updateToken","connect","path","exact","to","privacy_uri","terms_uri","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","getElementById","messageListener","retry","setRetry","backgroundRepeat","backgroundPosition","readOnly","SeedInput","setSeed","useCustomSeed","setUseCustomSeed","Form","FormGroup","FormCheck","random","FormControl","defaultNegativePrompt","encoded_npy","ImagePrompt","setAspectRatio","parentId","setParentId","advancedView","setAdvancedView","setEncodedImage","controlnetType","setControlnetType","cfgScale","setCfgScale","defaultAspectRatio","aspectRatioDetails","setAspectRatioDetails","originalWidth","setOriginalWidth","originalHeight","setOriginalHeight","resetState","handleSubmit","controlnet_type","cfg_scale","bestMatch","file","HTMLCanvasElement","textDecoration","AspectRatioSelector","aspectRatioId","toFixed","controlnetTypes","minHeight","ms","Alert","alertType","setShow","timeout","ErrorNotification","SuccessNotification","clamp","setSelectionOverlayPreview","upscaleLevel","setSize","alignItems","border"],"mappings":"uMAkBaA,EAAkC,SAAC,GAUzC,IATHC,EASE,EATFA,UACAC,EAQE,EARFA,MACAC,EAOE,EAPFA,WACAC,EAME,EANFA,QACAC,EAKE,EALFA,SACAC,EAIE,EAJFA,OACAC,EAGE,EAHFA,OACAC,EAEE,EAFFA,OACAC,EACE,EADFA,OAEMC,EAAMC,iBAAyB,MACjCC,EAAG,UAAMX,EAAN,YAAmBC,EAAMW,GAAzB,iCAAoDX,EAAMY,YAC7DZ,EAAMa,YACNH,EAAMV,EAAMa,WAEJb,EAAMc,MAEdd,EAAMe,OAAOC,iBACW,GAAxBhB,EAAMiB,gBAEGjB,EAAMiB,eAXjB,MAa8BC,oBAAS,GAbvC,mBAaKC,EAbL,KAaeC,EAbf,KAoDFC,qBAAU,WACDb,EAAIc,UAGTd,EAAIc,QAAQC,QAAU,WACbf,EAAIc,UAGTd,EAAIc,QAAQZ,IAAM,2BAEvB,CAACF,IAEJ,IAAIgB,EAAQxB,EAAMyB,MAMlB,OALKD,IACDA,EAAQxB,EAAMe,OAAOW,QAKrB,eAAC,IAAD,CAAOC,MAAM,EAAMC,OAAQ1B,EAAS2B,KAAK,KAAzC,UACI,cAAC,IAAMC,OAAP,CAAcC,aAAW,EAAzB,SACI,cAAC,IAAMC,MAAP,UAAcR,MAElB,eAAC,IAAMS,KAAP,WACI,qBACIC,IAAK1B,EACL2B,MAAO,CACHC,SAAU,OACVC,UAAW,SACXC,QAAS,QACTC,WAAY,OACZC,YAAa,OACbC,OAASzC,EAAM0C,MAAQzC,IAAgBkB,EAAW,aAAe,IAErER,GAAE,sBAAiBX,EAAMW,IACzBD,IAAKA,EACLiC,IAAK3C,EAAMyB,QAGf,qBAAKmB,UAAU,MAAf,SACI,qBAAKA,UAAU,gBAGnB,qBAAKA,UAAU,MAAf,SACI,sBAAKA,UAAU,YAAf,UACI,sBACIA,UAAU,uBACVT,MAAO,CAAEU,UAAW,QAFxB,UAlFA,SAACC,GACjB,IAAMC,EAAgBD,EAAOE,OAAO,GAAGC,cAAgBH,EAAOI,MAAM,GAChEC,EAAO,wBACX,OAAQL,GACJ,KAAKM,IAAWC,QACZF,EAAO,wBACP,MACJ,KAAKC,IAAWE,WACZH,EAAO,qBACP,MACJ,KAAKC,IAAWG,UACZJ,EAAO,eACP,MACJ,KAAKC,IAAWI,MACZL,EAAO,cACP,MACJ,KAAKC,IAAWK,MACZN,EAAO,4BAGf,OACI,mCACI,uBAAMhB,MAAO,CAAEuB,SAAU,QAAzB,UACI,mBACId,UAAS,UAAKO,EAAL,sCAAuCL,GAChDX,MAAO,CACHuB,SAAU,OACVC,SAAU,WACVC,IAAK,UANjB,OASWb,OAuDEc,CAAY7D,EAAM8C,QACnB,sBAAKX,MAAO,CAAE2B,MAAO,SAArB,UACK1D,IACIJ,EAAM8C,SAAWM,IAAWI,OACzBxD,EAAM8C,SACFM,IAAWG,YACf,yBACIX,UAAU,8CACVmB,QAAS,kBAAM3D,EAAOJ,IACtBmC,MAAO,CAAEK,YAAa,OAH1B,UAKI,mBAAGI,UAAU,uBALjB,oBASPzC,GACG,yBACIyC,UAAU,kDACVmB,QAAS,kBACL5D,GAAYA,EAASH,IAEzBmC,MAAO,CAAEK,YAAa,OAL1B,UAOI,mBAAGI,UAAU,qBAPjB,gBAWHvC,GACG,yBACIuC,UAAU,wDACVmB,QAAS,kBAAM1D,GAAUA,EAAOL,IAChCmC,MAAO,CAAEK,YAAa,OAH1B,UAKI,mBAAGI,UAAU,gBALjB,cASHrC,GACG,yBACIqC,UAAU,4CACVmB,QAAS,kBAAMxD,GAAUA,EAAOP,IAChCmC,MAAO,CAAEK,YAAa,OAH1B,UAKI,mBAAGI,UAAU,gBALjB,cASF5C,EAAM0C,MAAQzC,GACZ,yBACI2C,UAAU,4CACVmB,QAAS,kBAAM3C,GAAaD,IAC5BgB,MAAO,CAAEK,YAAa,OAH1B,UAKI,mBAAGI,UAAU,eALjB,OAMWzB,EAAW,OAAS,gBAK3C,sBACIyB,UAAU,uBACVT,MAAO,CAAEU,UAAW,OAAQmB,aAAc,QAF9C,UASI,qDACuBhE,EAAMe,OAAOkD,MADpC,MAC8CjE,EAAMe,OAAOmD,UAE3D,0CACYlE,EAAMmE,SAEjBnE,EAAM0C,MACH,qCACI,gCAEI,mBACIE,UAAU,8BACVT,MAAO,CACHiC,MAAO,SACPV,SAAU,OACVC,SAAU,WACVC,IAAK,SARjB,kCAaCtD,GACG,mBACI+D,KAAK,qBACLN,QAAS,kBACLzD,EAAON,GAAO,IAHtB,sCAWXA,EAAMe,OAAOuD,MACV,yCACWtE,EAAMe,OAAOuD,SAG1BtE,EAAM0C,MACJ,qCACI,gCAEI,mBACIE,UAAU,eACVT,MAAO,CACHiC,MAAO,QACPV,SAAU,OACVC,SAAU,WACVC,IAAK,SARjB,uBAaCtD,GACG,mBACI+D,KAAK,qBACLN,QAAS,kBACLzD,EAAON,GAAO,IAHtB,0D,4FCnP3BuE,EAAoC,SAAC,GAI3C,IAHHC,EAGE,EAHFA,aACAC,EAEE,EAFFA,gBACAV,EACE,EADFA,QACE,EACwB7C,oBAAS,GADjC,mBACKwD,EADL,KACYC,EADZ,KAMExB,EACA,mBAAGhB,MAAO,CAAEU,UAAW,QAAUD,UAAU,yBAS/C,OANI6B,EAAkB,IAClBtB,EACI,mBAAGhB,MAAO,CAAEU,UAAW,QAAUD,UAAU,uBAK/C,sBACIgC,aAda,kBAAMD,GAAS,IAe5BE,aAda,kBAAMF,GAAS,IAe5BxC,MAAO,CACH2C,gBAAgB,2BAChBC,eAAgB,UAChBd,MAAO,QACPC,OAAQ,QACRc,OAAQ,MACRlB,MAAO,OACPmB,OAAQ,WAEZlB,QAASA,EAZb,UAcKW,GACG,sBACIvC,MAAO,CACH+C,WAAY,2BACZd,MAAO,QACPH,MAAO,OACPC,OAAQ,OACRiB,WAAY,IACZzB,SAAU,QAPlB,UAUI,uBACCc,EAAe,GACZ,sBAAKrC,MAAO,CAAE6B,aAAc,QAA5B,UACKQ,EADL,cAIHC,EAAkB,GACf,gCAAMA,EAAN,qBAIVC,GACE,qBACIvC,MAAO,CACH+C,WAAY,2BACZd,MAAO,OACPH,MAAO,OACPC,OAAQ,OACRR,SAAU,QANlB,SASKP,S,iCC3ErB,0DAWaiC,EAA2B,SAAC,GAKlC,IAJHC,EAIE,EAJFA,OACAC,EAGE,EAHFA,cACAC,EAEE,EAFFA,SACA5D,EACE,EADFA,KAGA,SAAS6D,EAAUxF,GACf,MAAqB,YAAjBA,EAAM8C,OACC,mBAAGF,UAAU,yBACI,eAAjB5C,EAAM8C,OACN,mBAAGF,UAAU,2BADjB,EAKX,IAQM6C,EACF,gCACI,sBAAKtD,MAAO,CAAC6B,aAAc,OAA3B,UACI,qBAAK7B,MAAO,CAACG,QAAS,eAAgB2B,MAAO,SAA7C,oBAGA,qBAAK9B,MAAO,CAACG,QAAS,eAAgB2B,MAAO,SAA7C,qBAGA,qBAAK9B,MAAO,CAACG,QAAS,eAAgB2B,MAAO,SAA7C,uBAIHoB,EAAOK,KAAI,SAAC1F,GAAD,OACR,sBAAoBmC,MAAO,CAAC6B,aAAc,OAA1C,UACI,sBAAK7B,MAAO,CAACG,QAAS,eAAgB2B,MAAO,SAA7C,UACKuB,EAAUxF,GADf,OAC6BA,EAAM8C,UAEnC,qBAAKX,MAAO,CAACG,QAAS,eAAgB2B,MAAO,SAA7C,UA1BE0B,EA4BY3F,EAAMe,OAAOW,QAAU,GA3B7CiE,EAAQC,OAAS,GACVD,EAAQE,UAAU,EAAG,IAAM,MAE/BF,KA0BK,qBAAKxD,MAAO,CAACG,QAAS,eAAgB2B,MAAO,SAA7C,SACI,yBACIrB,UAAU,kDACVmB,QAAS,kBAAMuB,EAActF,IAFjC,UAII,mBAAG4C,UAAU,gBAJjB,oBATE5C,EAAMW,IAtBX,IAACgF,QA2ClB,OACI,eAAC,IAAD,CAAOhE,KAAMA,EAAMC,OAAQ2D,EAA3B,UACI,cAAC,IAAMzD,OAAP,CAAcC,aAAW,EAAzB,SACI,cAAC,IAAMC,MAAP,+BAEJ,cAAC,IAAMC,KAAP,UACKwD,IAEL,cAAC,IAAMK,OAAP,UACI,wBAAQlD,UAAU,oBAAoBmB,QAASwB,EAA/C,0B,0SCjDVQ,EAAsB,IAMfC,EAAb,kDAsFI,WAAYC,GAAqB,IAAD,uBAC5B,cAAMA,EAAU,YAtFXC,mBAqFuB,IApFxBxE,OAAiB,GAoFO,EAnFxByE,eAAyB,GAmFD,EAlFxBhC,MAAgB,iBAkFQ,EAjFxBiC,MAAgB,EAiFQ,EAhFxBC,kBAA4B,IAgFJ,EA/ExBC,QAAS,EA+Ee,EA9ExBC,YA8EwB,IA7ExBC,UAAY,EA6EY,EA3ExBC,OAA2B,UA2EH,EA1ExBC,aAAkD,aA0E1B,EAzExBC,0BAAqD,aAyE7B,EAvExB9F,UAA8B,GAuEN,EAtExB+F,wBAAkC,EAsEV,EArExBC,kBAAsC,KAqEd,EApExBC,SAAU,EAoEc,EAnExBC,SAAU,EAmEc,EAlExBC,sBAkEwB,IAjExBC,mBAiEwB,IAhExBC,mBAgEwB,EAE5B,EAAKhB,cAAgB,IAAIiB,IAAclB,GACnC,EAAKmB,kBACL,EAAKC,MAAQ,SAEb,EAAKA,MAAQ,UAEjB,IAAIC,EAAgB,EAAKpB,cAAcqB,UARX,OASvB,EAAKH,oBACNE,EAAa,2BACNA,GADM,IAETE,iBAAkB,CACdC,EAAG,EACHC,EAAG,EACHzD,MAAO,EAAKgC,SAAS0B,WACrBzD,OAAQ,EAAK+B,SAAS2B,gBAIlC,EAAK1B,cAAc2B,WAAWP,GAC9B,EAAKf,OAAS,IAAIuB,IArBU,EAtFpC,uCA+BI,WACI,OAAOC,KAAKzB,QAhCpB,IAwBI,SAAU0B,GACND,KAAKzB,OAAS0B,EACVD,KAAKb,eACLa,KAAKb,cAAcc,KA3B/B,qBAmCI,SAAQC,GACJF,KAAKb,cAAgBe,IApC7B,qBAuCI,SAAQC,GACJH,KAAKd,cAAgBiB,IAxC7B,yBA2CI,SAAoBC,GACZJ,KAAKd,eACLc,KAAKd,cAAckB,KA7C/B,iBAiDI,WACI,OAAOJ,KAAKtB,QAlDpB,IAqDI,SAAUY,GACFA,IAAUU,KAAKtB,SACI,UAAfsB,KAAKtB,QACLsB,KAAK7B,cAAckC,UAEH,UAAhBL,KAAKtB,QACLsB,KAAK9B,SAASoC,eAAUC,GAE5BP,KAAKtB,OAASY,EACdU,KAAKrB,aAAaW,GACL,WAATA,EACAU,KAAKpB,2BAA0B,IAE/BoB,KAAKpB,2BAA0B,GAClB,UAATU,GACAU,KAAK7B,cAAc2B,WAAnB,2BACOE,KAAK7B,cAAcqB,WAD1B,IAEIgB,UAAU,SAtElC,6BA6EI,WACI,QAIU,IAHNC,YACIT,KAAK9B,SAAS0B,WACdI,KAAK9B,SAAS2B,cACPG,KAAK9B,SAAS0B,cAlFrC,yBA8GI,SAAYc,GACR,GAAkB,UAAdV,KAAKV,MAAT,CADgE,MAKjDU,KAAKW,WAAWC,kCAC3BF,EAAMG,YAAYC,QAClBJ,EAAMG,YAAYE,SAFhBrB,EAL0D,EAK1DA,EAAGC,EALuD,EAKvDA,EAIY,IAAjBe,EAAMM,OAIQ,SAAdhB,KAAKV,OAAoBU,KAAKlB,oBAC9BkB,KAAKhB,SAAU,EAEfgB,KAAKlB,kBAAoB,IAAImC,UACzBjB,KAAKlB,kBAAkBoC,KAAK/F,QAC5B6E,KAAKlB,kBAAkB5C,MACvB8D,KAAKlB,kBAAkB3C,QAG3B6D,KAAKmB,WAAWzB,EAAGC,IAZnBK,KAAKjB,SAAU,OARfiB,KAAK7B,cAAciD,YAAYV,KAhH3C,wBA4II,SAAmBhB,EAAWC,GAmB1B,IAlBA,IAAMF,EAAmBO,KAAK9B,SAASmD,sBACjCC,EAAYC,KAAKC,IACnB/B,EAAiBvD,MACjBuD,EAAiBtD,QAEfsF,EAAeF,KAAKG,MAAOJ,EAAY,EAAKtD,GAE5C2D,EAAOjC,EAAID,EAAiBC,EAC5BkC,EAAOjC,EAAIF,EAAiBE,EAC5B7G,EAAYkH,KAAKlB,kBAEjB+C,EAASN,KAAKO,IAAI,EAAGH,EAAOF,GAC5BM,EAASR,KAAKO,IAAI,EAAGF,EAAOH,GAC5BO,EAAOT,KAAKC,IAAI1I,EAAUoD,MAAOyF,EAAOF,GACxCQ,EAAOV,KAAKC,IAAI1I,EAAUqD,OAAQyF,EAAOH,GAItCS,EAAIL,EAAQK,EAAIF,EAAME,IAC3B,IAAK,IAAIC,EAAIJ,EAAQI,EAAIF,EAAME,IAAK,CAChC,IAAMC,EAAoC,GAA3BD,EAAIrJ,EAAUoD,MAAQgG,GAC/BG,EAAWd,KAAKe,KAClBf,KAAKgB,IAAIL,EAAIP,EAAM,GAAKJ,KAAKgB,IAAIJ,EAAIP,EAAM,IAE/C,GAAIS,EAAWZ,EAAc,CAGzB,IAAMe,EACDH,EAAWZ,EAAgBzD,EAA5B,mBAGEyE,EAAQlB,KAAKC,IACfD,KAAKG,MAAiB,IAAXc,GACX1J,EAAUoI,KAAKkB,EAAQ,IAE3BtJ,EAAUoI,KAAKkB,EAAQ,GAAKK,GAIxCzC,KAAK9B,SAASwE,aAAa5J,KApLnC,0BAuLI,SAAqB4G,EAAWC,GAC5B,GAAkB,SAAdK,KAAKV,OAAoBU,KAAKlB,kBAAmB,CACjD,IAAMW,EAAmBO,KAAK9B,SAASmD,sBACjCC,EAAYC,KAAKC,IACnB/B,EAAiBvD,MACjBuD,EAAiBtD,QAEfwG,EAAepB,KAAKG,MAAMJ,EAAY,GAC5CtB,KAAK9B,SAASoC,UAAU,CACpBjE,MAAO,QACPuG,OAAQD,EAAe3E,EACvB6E,KAAM,SACNnD,IACAC,WAGJK,KAAK9B,SAASoC,UAAU,CACpBjE,MAAO,QACPuG,OAAQ,GACRC,KAAM,aACNnD,IACAC,QA5MhB,yBAiNI,SAAYe,GACR,GAAkB,UAAdV,KAAKV,MAAT,CADgE,MAKjDU,KAAKW,WAAWC,kCAC3BF,EAAMG,YAAYC,QAClBJ,EAAMG,YAAYE,SAFhBrB,EAL0D,EAK1DA,EAAGC,EALuD,EAKvDA,EAILK,KAAKjB,SACLiB,KAAKW,WAAWmC,MAAMpC,GAG1BV,KAAK+C,aAAarD,EAAGC,GACjBK,KAAKhB,SACLgB,KAAKmB,WAAWzB,EAAGC,QAbnBK,KAAK7B,cAAc6E,YAAYtC,KAnN3C,uBAoOI,SAAUA,GACY,UAAdV,KAAKV,OACLU,KAAK7B,cAAc8E,UAAUvC,GAEjCV,KAAKjB,SAAU,EACfiB,KAAKhB,SAAU,IAzOvB,0BA4OI,SAAa0B,GACS,UAAdV,KAAKV,OACLU,KAAK7B,cAAcrB,aAAa4D,GAEpCV,KAAKjB,SAAU,EACfiB,KAAKhB,SAAU,IAjPvB,qBAoPI,SAAQ0B,GACJV,KAAKW,WAAWuC,QAAQxC,GADD,MAERV,KAAKW,WAAWC,kCAC3BF,EAAMI,QACNJ,EAAMK,SAFJrB,EAFiB,EAEjBA,EAAGC,EAFc,EAEdA,EAITK,KAAK+C,aAAarD,EAAGC,KA1P7B,wBA6PI,SAAWwD,GACPA,EAAI,2BACGnD,KAAKR,WACL2D,GAEPnD,KAAKrG,OAASwJ,EAAKxJ,QAAU,GAC7BqG,KAAK5B,eAAiB+E,EAAK/E,gBAAkB,GAC7C4B,KAAK5D,MAAQ+G,EAAK/G,OAAS,iBAC3B4D,KAAK3B,MAAQ8E,EAAK9E,OAAS,EAC3B2B,KAAK1B,kBAAoB6E,EAAK7E,mBAAqB,IACnD8E,QAAQC,IAAI,aAAcF,KAvQlC,2BA0QI,SAAchD,GACVH,KAAKrB,aAAewB,IA3Q5B,qCA8QI,SAAwBD,GACpBF,KAAKpB,0BAA4BsB,IA/QzC,wBAkRI,SAAWA,GACPF,KAAKf,iBAAmBiB,IAnRhC,mBAsRI,WACI,MAAM,GAAN,OAAUF,KAAKvB,eAvRvB,2BA0RI,SACI6E,EACAC,EACAC,EACAC,EACAhE,GACmB,IAAD,OAClB,OAAO,IAAIiE,SAAQ,SAACC,EAASC,GAEzBN,EAAIO,aAAaN,EAAS,CACtBO,aAAc,gBACfC,MAAK,SAACC,GACL,IACMC,EADkBC,EAAOC,KAAKH,EAAK9C,KAAM,UACPkD,SAAS,UAC3CzL,EAAG,gCAA4BsL,GAC/BI,EAAe,IAAIC,MACzBD,EAAa1L,IAAMA,EACnB0L,EAAaE,OAAS,WAClB,IAAMC,EAASC,SAASC,cAAc,UACtCF,EAAOtI,MAAQuD,EAAiBvD,MAChCsI,EAAOrI,OAASsD,EAAiBtD,OACjC,IAAMwI,EAAMH,EAAOI,WAAW,MAC9B,GAAKD,EAAL,CAIAA,EAAIE,UACAR,EACA,EACA,EACA5E,EAAiBvD,MACjBuD,EAAiBtD,QAErB,IAAMrD,EAAY6L,EAAId,aAClB,EACA,EACApE,EAAiBvD,MACjBuD,EAAiBtD,QAEfvD,EAAK,EAAKkM,QAChB,EAAKtG,OACAuG,eAAe,CACZnM,KACA6J,OAAO,EACPuC,SAAS,EACT7I,OAAQ,EAAK+B,SAAS2B,YACtB3D,MAAO,EAAKgC,SAAS0B,WACrBqF,OAAQnM,EAAUoI,KAClBzB,qBAEHsE,MAAK,SAACC,GACH,IAAMkB,EAAmB,IAAIjE,UACzB+C,EAAKiB,OACLnM,EAAUoD,MACVpD,EAAUqD,QAEdwH,EAAQuB,MAGhBV,EAAOW,cApCHvB,EAAO,IAAIlI,MAAM,0CAjTzC,oBA2VI,WACsB,SAAdsE,KAAKV,OACLU,KAAKV,MAAQ,UACbU,KAAKlB,kBACDkB,KAAKlH,UAAUkH,KAAKnB,wBACxBmB,KAAK9B,SAASwE,aAAa1C,KAAKlB,qBAE5BkB,KAAKX,kBACLW,KAAKV,MAAQ,SAEbU,KAAKV,MAAQ,UAEjBU,KAAKlH,UAAY,GACjBkH,KAAK9B,SAASwE,aAAa,MAC3B1C,KAAKC,OAAQ,KAzWzB,mBA6WI,WACID,KAAKV,MAAQ,UA9WrB,4BAiXI,SAAuB8F,GACfpF,KAAKf,kBACLe,KAAKf,iBAAiBmG,KAnXlC,2DAuXI,WAAa9B,EAAiB+B,EAAsBpN,GAApD,4DAAAqN,EAAA,yDACItF,KAAKC,OAAQ,EACbD,KAAKuF,YAAY,MACX9F,EAAmBO,KAAK9B,SAASmD,sBACjCmE,EAAexF,KAAK9B,SAASuH,gBAAgBhG,GAJvD,uBAMQ2D,QAAQhD,MAAM,gBANtB,iCASUqD,EAAgBzD,KAAK9B,SAAS2F,aAAapE,IAC3CiG,EAA0BC,eAC1BjM,MAAQ,GACdgM,EAAME,cAAgBJ,EACtBE,EAAMG,OAAS5N,EAAMW,GACrB8M,EAAM1M,OAAOW,OAASqG,KAAKrG,QAAU1B,EAAMe,OAAOW,OAClD+L,EAAM1M,OAAOC,gBAAkB+G,KAAK5B,gBAAkBnG,EAAMe,OAAOC,gBACnEyM,EAAM1M,OAAO8M,mBAAqB9F,KAAK1B,kBACvCoH,EAAMrH,MAAQ2B,KAAK3B,MAEnBqH,EAAMtJ,MAAQ4D,KAAK5D,MACnBsJ,EAAM/K,KAAO1C,EAAM0C,KAEnB+K,EAAM1M,OAAOkD,MAAQuD,EAAkBvD,MACvCwJ,EAAM1M,OAAOmD,OAASsD,EAAkBtD,OAExCuJ,EAAM1M,OAAOkD,MAA6C,GAArCqF,KAAKwE,KAAKL,EAAM1M,OAAOkD,MAAQ,IACpDwJ,EAAM1M,OAAOmD,OAA+C,GAAtCoF,KAAKwE,KAAKL,EAAM1M,OAAOmD,OAAS,IACtDuJ,EAAMM,WAAY,EAElBhG,KAAKV,MAAQ,YACT0E,EAAyB,KAC7BhE,KAAKiG,eAAe,GA/BxB,oBAkCkB3C,EAAI4C,YAAYR,EAAO,CACzBS,iBAAkB,SAACC,GACfhD,QAAQC,IAAI,gBAAiB+C,GAC7B,IAAMhB,EACFgB,EAAcC,OAASD,EAAcE,MAGzC,EAAKL,eAAeb,MAzCxC,QAiCQpB,EAjCR,OA4CU9C,KA5CV,0DA8CQkC,QAAQhD,MAAM,wBAAd,MACAJ,KAAKuF,YAAY,0BACjBvF,KAAKV,MAAQ,UAhDrB,8BAmDIU,KAAKV,MAAQ,cACTiH,EAA8CvC,EAAK1G,SAChB,IAArBiJ,EAAU1I,OArDhC,uBAsDQmC,KAAKV,MAAQ,UACP,IAAI5D,MAAM,sBAvDxB,QAyDQ8K,GAAY,EAEZC,EAAaC,MAEjBrB,EAAUsB,UAAV,+BAAArB,EAAA,MAAoB,WAAOsB,GAAP,qBAAAtB,EAAA,0DACV7M,EAAMoO,KAAKC,MAAMF,IAEf/D,OAASkE,KACbtO,EAAIsC,SAAWM,IAAWG,UAJd,iBAMZiL,EAAaC,MACJxE,EAAI,EAPD,YAOIA,EAAIqE,EAAW1I,QAPnB,oBAQJ0I,EAAWrE,GAAGtJ,KAAOH,EAAIG,GARrB,iCASoB,EAAKoO,cACzB1D,EACAiD,EAAWrE,GAAGtJ,GACdX,EACAwL,EACAhE,GAdA,OASE3G,EATF,OAgBJyN,EAAWrE,GAAGhB,KAAOpI,EACrByN,EAAWrE,GAAGnH,OAASM,IAAWG,UAjB9B,QAO2B0G,IAP3B,+CAoBT,GAAIzJ,EAAIsC,QAAUM,IAAWK,MAChC,IAASwG,EAAI,EAAGA,EAAIqE,EAAW1I,OAAQqE,IAC/BqE,EAAWrE,GAAGtJ,KAAOH,EAAIG,KACzB2N,EAAWrE,GAAGnH,OAASM,IAAWK,OAvB9B,4CAApB,uDA7DJ,UA0FYuL,EAAYP,MACZQ,EAAYR,MA3FxB,WA6FgBF,EA7FhB,wBA8FgBW,EAAgB,EA9FhC,UA+FkBC,YAAM,KA/FxB,QAiGqBlF,EAAI,EAjGzB,aAiG4BA,EAAIqE,EAAW1I,QAjG3C,oBAmGoB0I,EAAWrE,GAAGnH,SAAWM,IAAWG,WACpC+K,EAAWrE,GAAGnH,SAAWM,IAAWK,MApGxD,wBAsGoByL,IAtGpB,gCAiGmDjF,IAjGnD,2BA0GYlC,KAAKiG,eAAekB,EAAgBZ,EAAW1I,QAC3CsJ,IAAkBZ,EAAW1I,SAC7B2I,GAAY,KAIZE,MAASW,KAAKH,EAAW,WAAa,IAhHtD,wBAkHsBI,EAAaf,EACd7L,QACG,SAACjC,GAAD,OACIA,EAAIsC,SAAWM,IAAWC,SAC1B7C,EAAIsC,SAAWM,IAAWE,cAEjCoC,KAAI,SAAClF,GAAD,OAASA,EAAIG,MACtBwK,QAAQC,IAAI,0BAA2BiE,GAzHvD,UA0HkDhE,EAAIiE,eAAe,CACjDC,IAAKF,IA3HzB,QA0HsBG,EA1HtB,OA6HsBC,EAAgBD,EAAoBvG,KAAK5D,OACzCqK,EAAOD,EAAeE,QAAO,SAACC,EAAKpP,GAErC,OADAoP,EAAIpP,EAAIG,IAAMH,EACPoP,IACR,IACM3F,EAAI,EAlI7B,aAkIgCA,EAAIqE,EAAW1I,QAlI/C,oBAoIwB0I,EAAWrE,GAAGnH,SAAWM,IAAWC,SACpCiL,EAAWrE,GAAGnH,SAAWM,IAAWE,WArI5D,sBAuI8BuM,EAAUH,EAAKpB,EAAWrE,GAAGtJ,KAvI3D,oBAyI4B2N,EAAWrE,GAAGnH,OAAS+M,EAAQ/M,OAE3B+M,EAAQ/M,SAAWM,IAAWG,UA3I9D,wBA6IgCiL,EAAaC,MA7I7C,UA8IwD1G,KAAKgH,cACzB1D,EACAiD,EAAWrE,GAAGtJ,GACdX,EACAwL,EACAhE,GAnJpC,QA8IsC3G,EA9ItC,OAqJgCyN,EAAWrE,GAAGhB,KAAOpI,EArJrD,QAkIuDoJ,IAlIvD,wBA0JgBgF,EAAYR,MA1J5B,SA8JiBD,EAAWsB,QAAQd,IAChBP,MAASW,KAAKZ,EAAY,WAAa,IAC3CC,MAASW,KAAKJ,EAAW,WAAa,KAEtCT,GAAY,GAlK5B,yCAsKQnB,EAAUsB,eAAUpG,GAtK5B,qBAkLI,IARAgG,EAAWyB,MAAK,SAAC1C,EAAG2C,GAChB,OAAOA,EAAElP,MAAQuM,EAAEvM,SAEvBwN,EAAYA,EAAW7L,QAAO,SAACjC,GAC3B,OAAOA,EAAIsC,SAAWM,IAAWG,aAGrCwE,KAAKlH,UAAY,GACRoJ,EAAI,EAAGA,EAAIqE,EAAW1I,OAAQqE,IAC/BqE,EAAWrE,GAAGhB,MACdlB,KAAKlH,UAAUoP,KAAK3B,EAAWrE,GAAGhB,MApL9C,GAuLkC,IAA1BlB,KAAKlH,UAAU+E,OAvLvB,yBAwLQmC,KAAKV,MAAQ,UACbU,KAAKuF,YAAY,sBAzLzB,4BA4LIvF,KAAK9B,SAASwE,aAAa1C,KAAKlH,UAAU,IAC1CkH,KAAKnB,uBAAyB,EAC9BmB,KAAKlB,kBAAoBkB,KAAKlH,UAAU,GACxCkH,KAAKV,MAAQ,UA/LjB,wEAvXJ,+EAyjBI,SAAO6I,GACc,QAAbA,IACAnI,KAAKnB,yBACDmB,KAAKnB,wBAA0B,IAC/BmB,KAAKnB,uBAAyBmB,KAAKlH,UAAU+E,OAAS,IAG7C,SAAbsK,IACAnI,KAAKnB,yBACDmB,KAAKnB,wBAA0BmB,KAAKlH,UAAU+E,SAC9CmC,KAAKnB,wBAA0B,KAGF,IAAjCmB,KAAKnB,uBACLmB,KAAKlB,kBAAoB,KAEzBkB,KAAKlB,kBACDkB,KAAKlH,UAAUkH,KAAKnB,wBAE5BmB,KAAK9B,SAASwE,aAAa1C,KAAKlB,qBA5kBxC,yBA+kBI,SAAYoB,GACRF,KAAKoI,aAAelI,IAhlB5B,qBAmlBI,WACIF,KAAK9B,SAASmK,kBACVrI,KAAKX,kBACLW,KAAKV,MAAQ,SAEbU,KAAKV,MAAQ,UAEjBU,KAAKlH,UAAY,GACjB,IAAM0M,EAAexF,KAAK9B,SAASuH,gBAAgB,MAC/CD,GAAgBxF,KAAKoI,cACrBpI,KAAKoI,aAAa5C,EAAc,CAC5B5H,QAAS,CAACoC,KAAKrG,QACf2O,iBAAkB,CAACtI,KAAK5B,gBACxBhC,MAAO4D,KAAK5D,QAGpB4D,KAAKC,OAAQ,IAnmBrB,qBAsmBI,WAGI,OAFAD,KAAK9B,SAASoC,eAAUC,GACxBP,KAAKxB,OAAO6B,WACL,MAzmBf,GAAiCkI,KAqnBpBC,EAAqC,SAAC,GAM5C,IALHlF,EAKE,EALFA,IACA+B,EAIE,EAJFA,UACApN,EAGE,EAHFA,MACAiG,EAEE,EAFFA,SACAuK,EACE,EADFA,KACE,EACwBtP,mBAAS,GADjC,mBACKkF,EADL,KACYqK,EADZ,OAEwBvP,oBAAS,GAFjC,mBAEK8G,EAFL,KAEY0I,EAFZ,OAGgDxP,mBAAS,KAHzD,mBAGKmF,EAHL,KAGwBsK,EAHxB,OAI0BzP,mBAASlB,EAAMe,OAAOW,QAAU,IAJ1D,mBAIKA,EAJL,KAIakP,EAJb,OAK0C1P,mBAASlB,EAAMe,OAAOC,iBAAmB,IALnF,mBAKKmF,EALL,KAKqB0K,EALrB,OAMwB3P,mBACP,UAAflB,EAAMmE,OAAoC,oBAAfnE,EAAMmE,MAC3B,iBACAnE,EAAMmE,OATd,mBAMKA,EANL,KAMY2M,EANZ,OAWwB5P,mBAA2BsP,EAAKnJ,OAXxD,mBAWKA,EAXL,KAWY0J,EAXZ,OAY8B7P,mBAAS,GAZvC,mBAYKiM,EAZL,KAYe6D,EAZf,OAawB9P,mBAAwB,MAbhD,mBAaKiH,EAbL,KAaY8I,EAbZ,KAoBF,OALAT,EAAKU,cAAcH,GACnBP,EAAKW,WAAWH,GAChBR,EAAKY,QAAQH,GACbT,EAAKa,QAAQX,GAEA,cAATrJ,GAAkC,aAATA,EAErB,sBAAKlF,MAAO,CAAEU,UAAW,QAAzB,UACI,mBAAGD,UAAU,0BADjB,QAC+D,eAAVyE,EAAyB,eAAiB,eAC3F,uBAEA,qBACIzE,UAAU,WACVT,MAAO,CAAE+B,OAAQ,OAAQrB,UAAW,QAFxC,SAII,sBACID,UAAU,eACV0O,KAAK,cACLnP,MAAO,CAAE8B,MAAM,GAAD,OAAgB,IAAXkJ,EAAL,MACdoE,gBAA0B,IAAXpE,EACfqE,gBAAe,EACfC,gBAAe,IANnB,UAQKnI,KAAKoI,MAAiB,IAAXvE,GARhB,YAgBZ,sBACIhL,MAAO,CACHU,UAAW,OACXmB,aAAc,MACdzB,WAAY,QAJpB,UAOK4F,GACG,sBAAKvF,UAAU,qBAAqB0O,KAAK,QAAzC,UAEI,wBACI1G,KAAK,SACLhI,UAAU,QACV+O,eAAa,QACbC,aAAW,QACX7N,QAAS,kBAAMkN,EAAS,OAL5B,SAOI,sBAAMY,cAAY,OAAlB,oBAEH1J,KAGE,WAAVd,GACG,qCACI,8BAEI,mBAAGzE,UAAU,sBAFjB,4EAKA,cAAC,IAAD,CACIqD,SAAUA,EACVuK,KAAMA,EAAKtK,cACX4L,iBAAiB,OAIlB,YAAVzK,GACG,qCACI,8BAEI,mBAAGzE,UAAU,sBAFjB,oDAMA,sBAAKA,UAAU,aAAf,UACI,uBAAOmP,QAAQ,SAAf,oBACA,uBACInH,KAAK,OACLhI,UAAU,eACVjC,GAAG,SACHqR,MAAOtQ,EACPuQ,SAAU,SAACC,GACPtB,EAAUsB,EAAEC,OAAOH,UAG3B,uBAAOpP,UAAU,uBAAjB,+CAKJ,sBAAKA,UAAU,aAAf,UACI,uBAAOmP,QAAQ,kBAAf,6BACA,uBACInH,KAAK,OACLhI,UAAU,eACVjC,GAAG,kBACHqR,MAAO7L,EACP8L,SAAU,SAACC,GACPrB,EAAkBqB,EAAEC,OAAOH,UAGnC,uBAAOpP,UAAU,uBAAjB,wDAIJ,sBAAKA,UAAU,aAAf,UACI,wBAAOmP,QAAQ,QAAf,oBAA+B3L,KAC/B,uBACIwE,KAAK,QACLhI,UAAU,qBACVjC,GAAG,QACH4I,IAAI,IACJM,IAAI,KACJuI,KAAK,IACLJ,MAAO5L,EACP6L,SAAU,SAACC,GACPzB,EAAS4B,SAASH,EAAEC,OAAOH,WAGnC,uBAAOpP,UAAU,uBAAjB,8CAIJ,sBAAKA,UAAU,aAAf,UACI,wBAAOmP,QAAQ,qBAAf,gCACwB,IACnBzI,KAAKoI,MAA0B,IAApBrL,GAFhB,OAIA,uBACIuE,KAAK,QACLhI,UAAU,qBACVjC,GAAG,qBACH4I,IAAI,IACJM,IAAI,IACJuI,KAAK,OACLJ,MAAO3L,EACP4L,SAAU,SAACC,GACPvB,EACI2B,WAAWJ,EAAEC,OAAOH,WAIhC,uBAAOpP,UAAU,uBAAjB,0CAIJ,sBAAKA,UAAU,aAAf,UACI,uBAAOmP,QAAQ,QAAf,mBACA,wBACInP,UAAU,eACVjC,GAAG,QACHqR,MAAO7N,EACP8N,SAAU,SAACC,GAAD,OAAOpB,EAASoB,EAAEC,OAAOH,QAJvC,SAMKO,IAAgB7M,KAAI,SAACvB,GAAD,OACjB,wBAAQ6N,MAAO7N,EAAf,SACKA,GADL,gBAAoCA,SAK5C,uBAAOvB,UAAU,uBAAjB,2CAMD,UAAVyE,GACG,8BAEI,mBAAGzE,UAAU,sBAFjB,qDAOJ,sBAAKA,UAAU,aAAf,UACe,WAAVyE,GACG,yBACIuD,KAAK,SACLhI,UAAU,yBACVmB,QAAS,WACLyM,EAAKnJ,MAAQ,WAEjBlF,MAAO,CAAEK,YAAa,OAN1B,UASI,mBAAGI,UAAU,gBATjB,oBAYS,YAAVyE,GAAuBmJ,EAAKpJ,mBACjB,YAAVC,GACU,UAAVA,IACA,yBACIzE,UAAU,yBACVmB,QAAS,WACLyM,EAAKgC,UAETrQ,MAAO,CAAEK,YAAa,OAL1B,UAQI,mBAAGI,UAAU,gBARjB,kBAWQ,YAAVyE,GAAiC,UAAVA,IACrB,yBACIzE,UAAU,yBACVmB,QAAS,kBAAMyM,EAAKiC,WACpBtQ,MAAO,CAAEK,YAAa,OAH1B,UAKI,mBAAGI,UAAU,eALjB,eAQO,YAAVyE,GACG,mCACI,yBACIzE,UAAU,yBACVmB,QAAS,kBAAMyM,EAAKkC,SACpBvQ,MAAO,CAAEK,YAAa,OAH1B,UAKI,mBAAGI,UAAU,iBALjB,kBASG,YAAVyE,GACG,yBACIzE,UAAU,yBACVmB,QAAS,WACLyM,EAAK3I,WAAW,CACZzB,QACAC,oBACA3E,SACAyE,iBACAhC,UAEJqM,EAAKmC,OAAOtH,EAAK+B,EAAWpN,IAEhCmC,MAAO,CAAEK,YAAa,OAZ1B,UAcI,mBAAGI,UAAU,gBAdjB,qBAkBR,cAAC,IAAD,CACIgQ,KAAM5K,EACN6K,QAAQ,qE,+MC55BXC,EAAb,kDAuBI,WAAY7M,GAAqB,IAAD,8BAC5B,cAAMA,EAAU,WAvBZ8M,UAAY,GAsBY,EArBxBC,aAAe,GAqBS,EAnBxBC,MAAQ,EAmBgB,EAlBxBC,MAAQ,EAkBgB,EAjBxBpM,SAAU,EAiBc,EAhBxBqM,UAAW,EAgBa,EAfxB7M,QAAS,EAee,EAFxBY,mBAEwB,IAvBpC,uCAiBI,WACI,OAAOa,KAAKzB,QAlBpB,IAUI,SAAU0B,GACND,KAAKzB,OAAS0B,EACVD,KAAKb,eACLa,KAAKb,cAAcc,KAb/B,kBA2BI,WACID,KAAK9B,SAASoC,UAAU,CACpBuC,KAAM,SACNxG,MAAO,QACPuG,OAAQ5C,KAAKgL,UAAY,EACzBtL,EAAGM,KAAKkL,MACRvL,EAAGK,KAAKmL,UAjCpB,wBAqCI,SAAWhI,GACP,kEAAiBA,GACjBnD,KAAKgL,UAAY7H,EAAK6H,WAAa,GACnChL,KAAKiL,aAAe9H,EAAK8H,cAAgB,GACzCjL,KAAKqL,SAzCb,yBA4CI,SAAY3K,GAA+D,IAAD,EACvDV,KAAKW,WAAWC,kCAC3BF,EAAMG,YAAYC,QAClBJ,EAAMG,YAAYE,SAFhBrB,EADgE,EAChEA,EAAGC,EAD6D,EAC7DA,EAKLK,KAAKjB,QACLiB,KAAKW,WAAWmC,MAAMpC,GACfV,KAAKoL,WACZpL,KAAK9B,SAASoN,WACVtL,KAAKkL,MACLlL,KAAKmL,MACLzL,EACAC,EACAK,KAAKgL,UACLhL,KAAKiL,cAETjL,KAAKC,OAAQ,GAGjBD,KAAKkL,MAAQxL,EACbM,KAAKmL,MAAQxL,EACbK,KAAKqL,SAlEb,qBAqEI,SAAQ3K,GACJV,KAAKW,WAAWuC,QAAQxC,GACxBV,KAAKqL,SAvEb,yBA0EI,SAAY3K,GACR,GAAqB,IAAjBA,EAAMM,OAAc,CACpBhB,KAAKoL,UAAW,EACXpL,KAAKC,OACND,KAAK9B,SAASqN,6BAElBvL,KAAKC,OAAQ,EALO,MAMLD,KAAKW,WAAWC,kCAC3BF,EAAMG,YAAYC,QAClBJ,EAAMG,YAAYE,SAFhBrB,EANc,EAMdA,EAAGC,EANW,EAMXA,EAITK,KAAKkL,MAAQxL,EACbM,KAAKmL,MAAQxL,EACbK,KAAKqL,YACmB,IAAjB3K,EAAMM,SACbhB,KAAKjB,SAAU,GAEnBiB,KAAKqL,SA3Fb,uBA8FI,SAAU3K,GACNV,KAAKoL,UAAW,EAChBpL,KAAKjB,SAAU,EACfiB,KAAKqL,SAjGb,yBAoGI,SAAYnL,GACRF,KAAKoI,aAAelI,IArG5B,qBAwGI,SAAQA,GACJF,KAAKb,cAAgBe,IAzG7B,oBA4GI,WAEIF,KAAK9B,SAASwE,aAAa,MAC3B1C,KAAKC,OAAQ,IA/GrB,qBAkHI,WACID,KAAK9B,SAASmK,kBACd,IAAM7C,EAAexF,KAAK9B,SAASuH,gBAAgB,MAC/CD,GAAgBxF,KAAKoI,cACrBpI,KAAKoI,aAAa5C,GAEtBxF,KAAKC,OAAQ,IAxHrB,qBA2HI,WAII,OAHID,KAAKC,OACLD,KAAK9B,SAASmK,mBAEX,MA/Hf,GAAgCE,KAwInBiD,EAA4B,SAAC,GAAuB,EAArBtN,SAAsB,IAAZuK,EAAW,EAAXA,KAAW,EAC3BtP,mBAAS,IADkB,mBACtD6R,EADsD,KAC3CS,EAD2C,OAErBtS,mBAAS,IAFY,mBAEtD8R,EAFsD,KAExCS,EAFwC,OAGnCvS,oBAAS,GAH0B,mBAGtD8G,EAHsD,KAG/C0I,EAH+C,KAc7D,OATAF,EAAKa,QAAQX,GAEbrP,qBAAU,WACNmP,EAAK3I,WAAW,CACZkL,YACAC,mBAEL,CAACD,EAAWC,IAGX,sBAAK7Q,MAAO,CAAEU,UAAW,QAAzB,UACI,sBAAKD,UAAU,aAAf,UACI,wBAAOT,MAAO,CAAE8B,MAAO,QAAvB,uBAEI,wBACIrB,UAAU,uBACVT,MAAO,CAAE2B,MAAO,SAFpB,UAIKiP,EAJL,WAOJ,uBACInI,KAAK,QACLhI,UAAU,qBACV2G,IAAI,IACJM,IAAI,MACJmI,MAAOe,EACPd,SAAU,SAACC,GAAD,OAAOsB,EAAanB,SAASH,EAAEC,OAAOH,cAGxD,sBAAKpP,UAAU,aAAf,UACI,wBAAOT,MAAO,CAAE8B,MAAO,QAAvB,0BAEI,wBACIrB,UAAU,uBACVT,MAAO,CAAE2B,MAAO,SAFpB,UAIKwF,KAAKoI,MAAqB,IAAfsB,GAJhB,UAOJ,uBACIpI,KAAK,QACLhI,UAAU,qBACV2G,IAAI,IACJM,IAAI,IACJuI,KAAK,OACLJ,MAAOgB,EACPf,SAAU,SAACC,GAAD,OACNuB,EAAgBnB,WAAWJ,EAAEC,OAAOH,cAIhD,sBACIpP,UAAU,aACVT,MAAO,CACHU,UAAW,OACX6Q,WAAY1L,EAAQ,UAAY,UAJxC,UAOI,wBACIpF,UAAU,oBACVmB,QAAS,kBAAMyM,EAAKgC,UAFxB,oBAMA,wBACI5P,UAAU,kBACVmB,QAAS,kBAAMyM,EAAKiC,WACpBtQ,MAAO,CAAEI,WAAY,OAHzB,0B,kTC3KHoR,EAAb,kDAoGI,WAAY1N,GAAqB,IAAD,8BAC5B,cAAMA,EAAU,YApGZC,mBAmGwB,IAlGxBxE,OAAiB,GAkGO,EAjGxByE,eAAyB,GAiGD,EAhGxBC,MAAgB,EAgGQ,EA/FxBC,kBAA4B,IA+FJ,EA9FxB0M,UAAoB,GA8FI,EA7FxBzM,QAAS,EA6Fe,EA5FxBC,YA4FwB,IA3FxBC,UAAY,EA2FY,EAzFxBC,YAyFwB,IAxFxBC,aAAkD,aAwF1B,EAvFxBC,0BAAqD,aAuF7B,EArFxB9F,UAA8B,GAqFN,EApFxB+F,wBAAkC,EAoFV,EAnFxBC,kBAAsC,KAmFd,EAlFxBC,SAAU,EAkFc,EAjFxBC,SAAU,EAiFc,EAhFxBC,sBAgFwB,IA/ExBC,mBA+EwB,IA9ExBC,mBA8EwB,EAE5B,EAAKhB,cAAgB,IAAIiB,IAAclB,GACnC,EAAKmB,mBACL,EAAKC,MAAQ,SACb,EAAKnB,cAAc2B,WAAW,CAC1BU,SAAU,EAAKhB,UAAUgB,YAG7B,EAAKlB,MAAQ,QAEjB,EAAKd,OAAS,IAAIuB,IAXU,EApGpC,uCA+BI,WACI,OAAOC,KAAKzB,QAhCpB,IAwBI,SAAU0B,GACND,KAAKzB,OAAS0B,EACVD,KAAKb,eACLa,KAAKb,cAAcc,KA3B/B,mBAmCI,WACI,MAAM,GAAN,OAAUD,KAAKvB,eApCvB,qBAuCI,SAAQ0B,GACJH,KAAKd,cAAgBiB,IAxC7B,yBA2CI,SAAoBC,GACZJ,KAAKd,eACLc,KAAKd,cAAckB,KA7C/B,iBAiDI,WACI,OAAOJ,KAAKtB,QAlDpB,IAqDI,SAAUY,GACN,GAAIA,GAASU,KAAKtB,OAUd,GATmB,UAAfsB,KAAKtB,QACLsB,KAAK7B,cAAckC,UAEH,UAAhBL,KAAKtB,QACLsB,KAAK9B,SAASoC,eAAUC,GAE5BP,KAAKtB,OAASY,EACdU,KAAKrB,aAAaW,GAEL,WAATA,EACAU,KAAKpB,2BAA0B,QAG/B,GADAoB,KAAKpB,2BAA0B,GAClB,UAATU,EAAmB,CACnB,IAAMuM,EAAa7L,KAAK9B,SAAS0B,WAC3BkM,EAAc9L,KAAK9B,SAAS2B,YAC5BkM,EAAiBxK,KAAKC,IACxBqK,EACAC,EACA,KAEJ9L,KAAK7B,cAAc2B,WAAW,CAC1BL,iBAAkB,CACdC,EAAG,EACHC,EAAG,EACHzD,MAAO6P,EACP5P,OAAQ4P,QAjFpC,6BAyFI,WAQI,OAAO,IAjGf,yBAkHI,SAAYrL,GACR,GAAkB,UAAdV,KAAKV,MAAT,CADgE,MAKjDU,KAAKW,WAAWC,kCAC3BF,EAAMG,YAAYC,QAClBJ,EAAMG,YAAYE,SAFhBrB,EAL0D,EAK1DA,EAAGC,EALuD,EAKvDA,EAIY,IAAjBe,EAAMM,OAIQ,SAAdhB,KAAKV,QACLU,KAAKhB,SAAU,EACfgB,KAAKmB,WAAWzB,EAAGC,IALnBK,KAAKjB,SAAU,OARfiB,KAAK7B,cAAciD,YAAYV,KApH3C,wBAqII,SAAmBhB,EAAWC,GACrBK,KAAKC,QACND,KAAKC,OAAQ,GAEjBD,KAAK9B,SAASiD,WAAWzB,EAAGC,EAAGK,KAAKgL,WACpChL,KAAK9B,SAAS8N,WA1ItB,0BA6II,SAAqBtM,EAAWC,GACV,SAAdK,KAAKV,MACLU,KAAK9B,SAASoC,UAAU,CACpBjE,MAAO,QACPuG,OAAQ5C,KAAKgL,UAAY,EACzBnI,KAAM,SACNnD,IACAC,MAGJK,KAAK9B,SAASoC,UAAU,CACpBjE,MAAO,QACPuG,OAAQ,GACRC,KAAM,aACNnD,IACAC,QA5JhB,yBAiKI,SAAYe,GAAyD,IAAD,EACjDV,KAAKW,WAAWC,kCAC3BF,EAAMG,YAAYC,QAClBJ,EAAMG,YAAYE,SAFhBrB,EAD0D,EAC1DA,EAAGC,EADuD,EACvDA,EAITK,KAAK+C,aAAarD,EAAGC,GACH,UAAdK,KAAKV,OAKLU,KAAKjB,SACLiB,KAAKW,WAAWmC,MAAMpC,GAGtBV,KAAKhB,SACLgB,KAAKmB,WAAWzB,EAAGC,IATnBK,KAAK7B,cAAc6E,YAAYtC,KAxK3C,uBAqLI,SAAUA,GACY,UAAdV,KAAKV,OACLU,KAAK7B,cAAc8E,UAAUvC,GAEjCV,KAAKjB,SAAU,EACfiB,KAAKhB,SAAU,IA1LvB,0BA6LI,SAAa0B,GACS,UAAdV,KAAKV,OACLU,KAAK7B,cAAcrB,aAAa4D,GAEpCV,KAAKjB,SAAU,EACfiB,KAAKhB,SAAU,IAlMvB,qBAqMI,SAAQ0B,GACJV,KAAKW,WAAWuC,QAAQxC,GADD,MAERV,KAAKW,WAAWC,kCAC3BF,EAAMI,QACNJ,EAAMK,SAFJrB,EAFiB,EAEjBA,EAAGC,EAFc,EAEdA,EAITK,KAAK+C,aAAarD,EAAGC,KA3M7B,wBA8MI,SAAWwD,GACPA,EAAI,2BACGnD,KAAKR,WACL2D,GAEP,kEAAiBA,GACjBnD,KAAKrG,OAASwJ,EAAKxJ,QAAU,GAC7BqG,KAAK5B,eAAiB+E,EAAK/E,gBAAkB,GAC7C4B,KAAK3B,MAAQ8E,EAAK9E,OAAS,EAC3B2B,KAAK1B,kBAAoB6E,EAAK7E,mBAAqB,IACnD0B,KAAKgL,UAAY7H,EAAK6H,WAAa,GAEnChL,KAAK+C,aACD/C,KAAK9B,SAAS0B,WAAa,EAC3BI,KAAK9B,SAAS2B,YAAc,GAEhCG,KAAK7B,cAAc2B,WAAW,CAC1BU,SAAU2C,EAAK3C,aA/N3B,2BAmOI,SAAcL,GACVH,KAAKrB,aAAewB,IApO5B,qCAuOI,SAAwBD,GACpBF,KAAKpB,0BAA4BsB,IAxOzC,wBA2OI,SAAWA,GACPF,KAAKf,iBAAmBiB,IA5OhC,2BA+OI,SACIoD,EACAC,EACA0I,EACAzI,EACA/D,GACmB,IAAD,OAClB,OAAO,IAAIiE,SAAQ,SAACC,EAASC,GACzBN,EAAIO,aAAaN,EAAS,CACtBO,aAAc,gBACfC,MAAK,SAACC,GACL,IACMC,EADkBC,EAAOC,KAAKH,EAAK9C,KAAM,UACPkD,SAAS,UAC3CzL,EAAG,gCAA4BsL,GAC/BI,EAAe,IAAIC,MACzBD,EAAa1L,IAAMA,EACnB0L,EAAaE,OAAS,WAClB,IAAMC,EAASC,SAASC,cAAc,UACtCF,EAAOtI,MAAQuD,EAAiBvD,MAChCsI,EAAOrI,OAASsD,EAAiBtD,OACjC,IAAMwI,EAAMH,EAAOI,WAAW,MAC9B,GAAKD,EAAL,CAIAA,EAAIE,UACAR,EACA,EACA,EACA5E,EAAiBvD,MACjBuD,EAAiBtD,QAErB,IAAMrD,EAAY6L,EAAId,aAClB,EACA,EACApE,EAAiBvD,MACjBuD,EAAiBtD,QAGfvD,EAAK,EAAKkM,QAChB,EAAKtG,OACAuG,eAAe,CACZnM,KACA6J,OAAO,EACPyJ,YAAaD,EAAU/K,KACvB8D,SAAS,EACT7I,OAAQ,EAAK+B,SAAS2B,YACtB3D,MAAO,EAAKgC,SAAS0B,WACrBqF,OAAQnM,EAAUoI,KAClBzB,mBACAkD,aAAc,KAEjBoB,MAAK,SAACC,GACH,IAAMkB,EAAmB,IAAIjE,UACzB+C,EAAKiB,OACLnM,EAAUoD,MACVpD,EAAUqD,QAEdwH,EAAQuB,MAGhBV,EAAOW,cAvCHvB,EAAO,IAAIlI,MAAM,0CArQzC,oBAkTI,WACQsE,KAAKX,kBACLW,KAAKV,MAAQ,SAEbU,KAAKV,MAAQ,QAEjBU,KAAK9B,SAASiO,WACdnM,KAAK9B,SAASkO,OACdpM,KAAK9B,SAASmO,iBACdrM,KAAKlH,UAAY,GACjBkH,KAAK9B,SAASwE,aAAa,MAC3B1C,KAAKC,OAAQ,IA7TrB,4BAgUI,SAAuBmF,GACfpF,KAAKf,kBACLe,KAAKf,iBAAiBmG,KAlUlC,2DAsUI,WACI9B,EACA+B,EACApN,EACAmE,GAJJ,gEAAAkJ,EAAA,yDAMItF,KAAKuF,YAAY,MACb9F,EAAmBO,KAAK9B,SAASmD,sBAPzC,uBASQ+B,QAAQhD,MAAM,gBATtB,iCAaQJ,KAAKR,UAAUgB,WAGXf,EAAiBC,EAAI,GACrBD,EAAiBE,EAAI,GACrBF,EAAiBC,EAAID,EAAiBvD,MAClC8D,KAAK9B,SAAS0B,YAClBH,EAAiBE,EAAIF,EAAiBtD,OAClC6D,KAAK9B,SAAS2B,eAElBG,KAAK9B,SAASoO,kBACd7M,EAAmBO,KAAK9B,SAASmD,uBAKnCkL,EAAcvM,KAAK9B,SAASsO,eAAe/M,GAC3CgN,EAAWzM,KAAK9B,SAAS2F,aAAapE,GAE5CO,KAAK9B,SAASiO,WACdnM,KAAK9B,SAASkO,OACdpM,KAAK9B,SAASmO,iBAER7G,EAAexF,KAAK9B,SAASuH,gBAAgBhG,IAE7CiG,EAA0BC,eAC1BjM,MAAQ,GACdgM,EAAME,cAAgBJ,EACtBE,EAAMgH,aAAeH,EACrB7G,EAAMG,OAAS5N,EAAMW,GAMrB8M,EAAM1M,OAAOW,OAASqG,KAAKrG,QAAU1B,EAAMe,OAAOW,OAClD+L,EAAM1M,OAAOC,gBAAkB+G,KAAK5B,gBAAkBnG,EAAMe,OAAOC,gBACnEyM,EAAM1M,OAAO8M,mBAAqB9F,KAAK1B,kBACvCoH,EAAMrH,MAAQ2B,KAAK3B,MACnBqH,EAAMtJ,MAAQA,EAERuQ,EAAqBC,YACvBnN,EAAkBvD,MAClBuD,EAAkBtD,QAEtBuJ,EAAM1M,OAAOkD,MAAQyQ,EAAmBzQ,MACxCwJ,EAAM1M,OAAOmD,OAASwQ,EAAmBxQ,OACzCuJ,EAAMM,WAAY,EAElBhG,KAAKV,MAAQ,YACT0E,EAAyB,KAC7BhE,KAAKiG,eAAe,GAhExB,oBAmEkB3C,EAAI4C,YAAYR,EAAO,CACzBS,iBAAkB,SAACC,GACf,EAAKH,eACDG,EAAcC,OAASD,EAAcE,UAtE7D,QAkEQtC,EAlER,OA0EU9C,KA1EV,0DA4EQkC,QAAQhD,MAAM,wBAAd,MACAJ,KAAKuF,YAAY,0BACjBvF,KAAKV,MAAQ,SA9ErB,8BAiFIU,KAAKV,MAAQ,aACbU,KAAKiG,eAAe,IAChBM,EAA8CvC,EAAK1G,SAChB,IAArBiJ,EAAU1I,OApFhC,uBAqFQmC,KAAKV,MAAQ,SACP,IAAI5D,MAAM,sBAtFxB,QAwFQ8K,GAAY,EACZC,EAAaC,MAEjBrB,EAAUsB,UAAV,+BAAArB,EAAA,MAAoB,WAAOsB,GAAP,qBAAAtB,EAAA,yDAChBlC,QAAQC,IAAI,oBAAqBuD,IAC3BnO,EAAMoO,KAAKC,MAAMF,IAEf/D,OAASkE,KACbtO,EAAIsC,SAAWM,IAAWG,UALd,iBAOZiL,EAAaC,MACJxE,EAAI,EARD,YAQIA,EAAIqE,EAAW1I,QARnB,oBASJ0I,EAAWrE,GAAGtJ,KAAOH,EAAIG,GATrB,iCAUoB,EAAKoO,cACzB1D,EACAiD,EAAWrE,GAAGtJ,GACd6T,EACAxU,EACAwH,GAfA,OAUE3G,EAVF,OAiBJyN,EAAWrE,GAAGhB,KAAOpI,EACrByN,EAAWrE,GAAGnH,OAASM,IAAWG,UAlB9B,QAQ2B0G,IAR3B,+CAqBT,GAAIzJ,EAAIsC,SAAWM,IAAWK,MACjC,IAASwG,EAAI,EAAGA,EAAIqE,EAAW1I,OAAQqE,IAC/BqE,EAAWrE,GAAGtJ,KAAOH,EAAIG,KACzB2N,EAAWrE,GAAGnH,OAASM,IAAWK,OAxB9B,4CAApB,uDA3FJ,UAyHYuL,EAAYP,MACZQ,EAAYR,MA1HxB,WA2HgBF,EA3HhB,wBA4HgBW,EAAgB,EA5HhC,UA6HkBC,YAAM,KA7HxB,QA+HqBlF,EAAI,EA/HzB,aA+H4BA,EAAIqE,EAAW1I,QA/H3C,oBAiIoB0I,EAAWrE,GAAGnH,SAAWM,IAAWG,WACpC+K,EAAWrE,GAAGnH,SAAWM,IAAWK,MAlIxD,wBAoIoByL,IApIpB,gCA+HmDjF,IA/HnD,2BAwIYlC,KAAKiG,eAAekB,EAAgBZ,EAAW1I,QAC3CsJ,IAAkBZ,EAAW1I,OAzI7C,wBA0IgB2I,GAAY,EA1I5B,qCA+IgBE,MAASW,KAAKH,EAAW,WAAa,IA/ItD,wBAiJsBI,EAAaf,EACd7L,QACG,SAACjC,GAAD,OACIA,EAAIsC,SAAWM,IAAWC,SAC1B7C,EAAIsC,SAAWM,IAAWE,cAEjCoC,KAAI,SAAClF,GAAD,OAASA,EAAIG,MACtBwK,QAAQC,IAAI,0BAA2BiE,GAxJvD,UAyJkDhE,EAAIiE,eAAe,CACjDC,IAAKF,IA1JzB,QAyJsBG,EAzJtB,OA4JsBC,EAAgBD,EAAoBvG,KAAK5D,OACzCqK,EAAOD,EAAeE,QAAO,SAACC,EAAKpP,GAErC,OADAoP,EAAIpP,EAAIG,IAAMH,EACPoP,IACR,IACM3F,EAAI,EAjK7B,aAiKgCA,EAAIqE,EAAW1I,QAjK/C,oBAmKwB0I,EAAWrE,GAAGnH,SAAWM,IAAWC,SACpCiL,EAAWrE,GAAGnH,SAAWM,IAAWE,WApK5D,sBAsK8BuM,EAAUH,EAAKpB,EAAWrE,GAAGtJ,KAtK3D,oBAwK4B2N,EAAWrE,GAAGnH,OAAS+M,EAAQ/M,OAE3B+M,EAAQ/M,SAAWM,IAAWG,UA1K9D,wBA4KgCiL,EAAaC,MA5K7C,UA6KwD1G,KAAKgH,cACzB1D,EACAiD,EAAWrE,GAAGtJ,GACd6T,EACAxU,EACAwH,GAlLpC,QA6KsC3G,EA7KtC,OAoLgCyN,EAAWrE,GAAGhB,KAAOpI,EApLrD,QAiKuDoJ,IAjKvD,wBAyLgBgF,EAAYR,MAzL5B,SA6LiBD,EAAWsB,QAAQd,IAChBP,MAASW,KAAKZ,EAAY,WAAa,IAC3CC,MAASW,KAAKJ,EAAW,WAAa,KAEtCT,GAAY,GAjM5B,yCAqMQnB,EAAUsB,eAAUpG,GArM5B,qBAiNI,IARAgG,EAAWyB,MAAK,SAAC1C,EAAG2C,GAChB,OAAOA,EAAElP,MAAQuM,EAAEvM,SAEvBwN,EAAYA,EAAW7L,QAAO,SAACjC,GAC3B,OAAOA,EAAIsC,SAAWM,IAAWG,aAGrCwE,KAAKlH,UAAY,GACRoJ,EAAI,EAAGA,EAAIqE,EAAW1I,OAAQqE,IAC/BqE,EAAWrE,GAAGhB,MACdlB,KAAKlH,UAAUoP,KAAK3B,EAAWrE,GAAGhB,MAnN9C,GAsNkC,IAA1BlB,KAAKlH,UAAU+E,OAtNvB,yBAuNQmC,KAAKV,MAAQ,SACbU,KAAKuF,YAAY,sBAxNzB,4BA2NIvF,KAAK9B,SAASwE,aAAa1C,KAAKlH,UAAU,IAC1CkH,KAAKnB,uBAAyB,EAC9BmB,KAAKlB,kBAAoBkB,KAAKlH,UAAU,GACxCkH,KAAKV,MAAQ,UA9NjB,wEAtUJ,kFAuiBI,SAAQY,GACJF,KAAKb,cAAgBe,IAxiB7B,oBA2iBI,SAAOiI,GACc,QAAbA,IACAnI,KAAKnB,yBACDmB,KAAKnB,wBAA0B,IAC/BmB,KAAKnB,uBAAyBmB,KAAKlH,UAAU+E,OAAS,IAG7C,SAAbsK,IACAnI,KAAKnB,yBACDmB,KAAKnB,wBAA0BmB,KAAKlH,UAAU+E,SAC9CmC,KAAKnB,wBAA0B,KAGF,IAAjCmB,KAAKnB,uBACLmB,KAAKlB,kBAAoB,KAEzBkB,KAAKlB,kBACDkB,KAAKlH,UAAUkH,KAAKnB,wBAE5BmB,KAAK9B,SAASwE,aAAa1C,KAAKlB,qBA9jBxC,yBAikBI,SAAYoB,GACRF,KAAKoI,aAAelI,IAlkB5B,qBAqkBI,WACIF,KAAK9B,SAASmK,kBAEdrI,KAAKlH,UAAY,GACjB,IAAM0M,EAAexF,KAAK9B,SAASuH,gBAAgB,MAC/CD,GAAgBxF,KAAKoI,cACrBpI,KAAKoI,aAAa5C,EAAc,CAC5B5H,QAAS,CAACoC,KAAKrG,QACf2O,iBAAkB,CAACtI,KAAK5B,gBACxByO,kBAAmB7M,KAAK9B,SAASmD,wBAGzCrB,KAAKC,OAAQ,EACTD,KAAKX,kBACLW,KAAKV,MAAQ,SAEbU,KAAKV,MAAQ,UArlBzB,qBAylBI,WACI,QAAIU,KAAKC,QACA6M,OAAOpC,QAAQ,uBAIxB1K,KAAK9B,SAASoC,eAAUC,GACxBP,KAAK9B,SAASwE,aAAa,MAC3B1C,KAAKxB,OAAO6B,WACL,OAlmBf,GAAiCkI,KA8mBpBwE,EAAqC,SAAC,GAM5C,IALHzJ,EAKE,EALFA,IACA+B,EAIE,EAJFA,UACApN,EAGE,EAHFA,MAEAwQ,GACE,EAFFvK,SAEE,EADFuK,MACE,EACwBtP,mBAAS,GADjC,mBACKkF,EADL,KACYqK,EADZ,OAE0BvP,mBAASlB,EAAMe,OAAOW,QAAU,IAF1D,mBAEKA,EAFL,KAEakP,EAFb,OAG0C1P,mBAASlB,EAAMe,OAAOC,iBAAmB,IAHnF,mBAGKmF,EAHL,KAGqB0K,EAHrB,OAIwB3P,mBAA2BsP,EAAKnJ,OAJxD,mBAIKA,EAJL,KAIY0J,EAJZ,OAK8B7P,mBAAS,GALvC,mBAKKiM,EALL,KAKe6D,EALf,OAMwB9P,mBAAwB,MANhD,mBAMKiH,EANL,KAMY8I,EANZ,OAOgC/P,mBAAS,IAPzC,mBAOK6R,EAPL,KAOgBS,EAPhB,OAQwBtS,oBAAS,GARjC,mBAQK8G,EARL,KAQY0I,EARZ,OAS8BxP,mBAC5BsP,EAAKjJ,UAAUgB,UAVjB,mBASKA,EATL,KASewM,EATf,OAYwB7T,mBAAS,+BAZjC,mBAYKiD,EAZL,KAYY2M,EAZZ,KAyBF,OAXAzP,qBAAU,WACNmP,EAAK3I,WAAW,CACZkL,gBAEL,CAACA,IAEJvC,EAAKU,cAAcH,GACnBP,EAAKW,WAAWH,GAChBR,EAAKY,QAAQH,GACbT,EAAKa,QAAQX,GAEC,cAAVrJ,GAAmC,eAAVA,EAErB,sBAAKlF,MAAO,CAAEU,UAAW,QAAzB,UACI,mBAAGD,UAAU,0BADjB,OACoD,IACrC,cAAVyE,EAAwB,eAAiB,gBAC1C,uBAEA,qBACIzE,UAAU,WACVT,MAAO,CAAE+B,OAAQ,OAAQrB,UAAW,QAFxC,SAII,sBACID,UAAU,eACV0O,KAAK,cACLnP,MAAO,CAAE8B,MAAM,GAAD,OAAgB,IAAXkJ,EAAL,MACdoE,gBAA0B,IAAXpE,EACfqE,gBAAe,EACfC,gBAAe,IANnB,UAQKnI,KAAKoI,MAAiB,IAAXvE,GARhB,YAeZ,sBACIhL,MAAO,CACHU,UAAW,OACXmB,aAAc,MACdzB,WAAY,QAJpB,UAOK4F,GACG,sBAAKvF,UAAU,qBAAqB0O,KAAK,QAAzC,UAEI,wBACI1G,KAAK,SACLhI,UAAU,QACV+O,eAAa,QACbC,aAAW,QACX7N,QAAS,kBAAMkN,EAAS,OAL5B,SAOI,sBAAMY,cAAY,OAAlB,oBAEH1J,KAGE,WAAVd,GACG,qCACI,8BAEI,mBAAGzE,UAAU,sBAFjB,+GAMA,qBAAKA,UAAU,aAAf,SAEI,sBAAKA,UAAU,aAAf,UACI,uBACIA,UAAU,mBACVgI,KAAK,WACLjK,GAAG,gBACHqU,UAAWzM,EACX0J,SAAU,SAACC,GACP6C,EAAY7C,EAAEC,OAAO6C,SACrBxE,EAAK3I,WAAW,CACZU,SAAU2J,EAAEC,OAAO6C,aAI/B,uBACIpS,UAAU,mBACVmP,QAAQ,gBAFZ,uCAWL,UAAV1K,GACG,qCACI,8BAEI,mBAAGzE,UAAU,sBAFjB,mDAKA,sBAAKA,UAAU,aAAf,UACI,wBAAOT,MAAO,CAAE8B,MAAO,QAAvB,uBAEI,wBACIrB,UAAU,uBACVT,MAAO,CAAE2B,MAAO,SAFpB,UAIKiP,EAJL,WAOJ,uBACInI,KAAK,QACLhI,UAAU,qBACV2G,IAAI,IACJM,IAAI,MACJmI,MAAOe,EACPd,SAAU,SAACC,GAAD,OACNsB,EAAanB,SAASH,EAAEC,OAAOH,iBAOxC,YAAV3K,GACG,qCACI,8BAEI,mBAAGzE,UAAU,sBAFjB,oDAKA,sBAAKA,UAAU,aAAf,UACI,uBAAOmP,QAAQ,SAAf,oBACA,uBACInH,KAAK,OACLhI,UAAU,eACVjC,GAAG,SACHqR,MAAOtQ,EACPuQ,SAAU,SAACC,GACPtB,EAAUsB,EAAEC,OAAOH,UAG3B,uBAAOpP,UAAU,uBAAjB,+CAKJ,sBAAKA,UAAU,aAAf,UACI,uBAAOmP,QAAQ,iBAAf,6BACA,uBACInH,KAAK,OACLhI,UAAU,eACVoP,MAAO7L,EACP8L,SAAU,SAACC,GACPrB,EAAkBqB,EAAEC,OAAOH,UAGnC,uBAAOpP,UAAU,uBAAjB,wDAIJ,sBAAKA,UAAU,aAAf,UACI,wBAAOmP,QAAQ,QAAf,oBAA+B3L,KAC/B,uBACIwE,KAAK,QACLhI,UAAU,qBACVjC,GAAG,QACH4I,IAAI,IACJM,IAAI,KACJuI,KAAK,IACLJ,MAAO5L,EACP6L,SAAU,SAACC,GACPzB,EAAS4B,SAASH,EAAEC,OAAOH,WAGnC,uBAAOpP,UAAU,uBAAjB,0CAMJ,sBAAKA,UAAU,aAAf,UACI,uBAAOmP,QAAQ,QAAf,mBACA,yBACInP,UAAU,eACVjC,GAAG,QACHqR,MAAO7N,EACP8N,SAAU,SAACC,GACPpB,EAASoB,EAAEC,OAAOH,QAL1B,UAQI,wBAAQA,MAAM,8BAAd,8BAIA,wBAAQA,MAAM,gCAAd,gCAGA,wBAAQA,MAAM,iCAAd,iCAGA,wBAAQA,MAAM,yBAAd,yBAGA,wBAAQA,MAAM,4BAAd,4BAGA,wBAAQA,MAAM,wBAAd,2BAIJ,uBAAOpP,UAAU,uBAAjB,4CAOD,YAAVyE,GACG,mCACI,yCACY,mBAAGzE,UAAU,qBADzB,OACqD,IACjD,mBAAGA,UAAU,sBAFjB,wDAQR,sBAAKA,UAAU,aAAf,WACMoF,GACY,YAAVX,GACU,SAATA,GAAoBmJ,EAAKpJ,mBACjB,WAATC,IACA,yBACIlF,MAAO,CAAEK,YAAa,OACtBI,UAAU,yBACVmB,QAAS,WACLyM,EAAKgC,UAJb,UAQI,mBAAG5P,UAAU,gBARjB,iBAYO,YAAVyE,GACG,mCACI,yBACIzE,UAAU,yBACVmB,QAAS,kBAAMyM,EAAKiC,WACpBtQ,MAAO,CAAEK,YAAa,OAH1B,UAMI,mBAAGI,UAAU,eANjB,iBAUE,UAATyE,GACG,yBACIlF,MAAO,CAAEK,YAAa,OACtBoI,KAAK,SACLhI,UAAU,yBACVmB,QAAS,kBAAOyM,EAAKnJ,MAAQ,SAJjC,UAMI,mBAAGzE,UAAU,iBANjB,mBASM,SAATyE,GACG,yBACIlF,MAAO,CAAEK,YAAa,OACtBoI,KAAK,SACLhI,UAAU,yBACVmB,QAAS,kBAAOyM,EAAKnJ,MAAQ,WAJjC,UAMI,mBAAGzE,UAAU,sBANjB,mBASO,YAAVyE,GACG,yBACIlF,MAAO,CAAEK,YAAa,OACtBI,UAAU,yBACVmB,QAAS,WACLyM,EAAK3I,WAAW,CACZzB,QACA1E,SACAyE,mBAEJqK,EAAKmC,OAAOtH,EAAK+B,EAAWpN,EAAOmE,IAT3C,UAaI,mBAAGvB,UAAU,sBAbjB,qBAiBR,cAAC,IAAD,CACIgQ,KAAM5K,EACN6K,QAAQ,qE,iXC76BXoC,EAAkBC,IAAMC,gBAC9BF,EAAgBG,SAASC,QAAQC,OAAjC,cASA,IAAMC,EAAsB,SAAC,GAK7B,IAJHlK,EAIE,EAJFA,IACAmK,EAGE,EAHFA,UACAzV,EAEE,EAFFA,UACA0V,EACE,EADFA,YACE,EAC8BvU,oBAAS,GADvC,mBACKwU,EADL,KACeC,EADf,OAEwCzU,mBAA4B,MAFpE,mBAEK0U,EAFL,KAEoBC,EAFpB,OAGoC3U,mBAA4B,MAHhE,mBAGK4U,EAHL,KAGkBC,EAHlB,OAIwC7U,oBAAS,GAJjD,mBAIK8U,EAJL,KAIoBC,EAJpB,OAKoC/U,oBAAS,GAL7C,mBAKKgV,EALL,KAKkBC,EALlB,OAM6CjV,mBAAS,GANtD,oBAMKkV,GANL,MAMqBC,GANrB,SAQgDnV,oBAAS,GARzD,qBAQKoV,GARL,MAQwBC,GARxB,SAU0BrV,mBAA4B,IAVtD,qBAUKmE,GAVL,MAUamR,GAVb,SAWoBtV,mBAAwB,MAX5C,qBAWKuV,GAXL,MAWUC,GAXV,SAY4BxV,mBAAiB,GAZ7C,qBAYKyV,GAZL,MAYcC,GAZd,SAa4B1V,mBAAwB,MAbpD,qBAaK2V,GAbL,MAacC,GAbd,SAcoC5V,mBAAiB,GAdrD,qBAcK6V,GAdL,MAckBC,GAdlB,SAgB4B9V,oBAAkB,GAhB9C,qBAgBK+V,GAhBL,MAgBcC,GAhBd,SAiB0BhW,mBAAiB,IAjB3C,qBAiBKiW,GAjBL,MAiBaC,GAjBb,SAkB0ClW,mBAAiB,IAlB3D,qBAkBKmW,GAlBL,MAkBqBC,GAlBrB,SAoBoDpW,oBAAS,GApB7D,qBAoBKqW,GApBL,MAoB0BC,GApB1B,SAqBsCtW,oBAAS,GArB/C,qBAqBKuW,GArBL,MAqBmBC,GArBnB,SAsBwCxW,mBAEvC,IAxBD,qBAsBKyW,GAtBL,MAsBoBC,GAtBpB,SA0BwB1W,mBAAuB,MA1B/C,qBA0BK2W,GA1BL,MA0BYC,GA1BZ,SA2BkC5W,oBAAS,GA3B3C,qBA2BKjB,GA3BL,MA2BiB8X,GA3BjB,MA6BMpX,GAAOqX,cAAPrX,GACFsX,GAAUC,cACVC,GAAWC,cAEXhH,GAAU,SAACqF,GACbC,GAAOD,GACPG,GAAWnI,MAAS4J,YAGxBhX,qBAAU,WACN,IAAIiX,EAASC,YAAW,WACpBnB,GAAUC,MACX,KACH,OAAO,WACHmB,aAAaF,MAElB,CAACjB,KAEJhW,qBAAU,WACN,GAAIV,GAAI,CAEJ,IAAMX,EAAQqF,GAAOoT,MAAK,SAACzY,GAAD,OAAWA,EAAMW,KAAOA,MAC9CX,GACA6V,EAAiB7V,GAGrByV,EAAYiD,SAAS/X,IAAImL,MAAK,SAAC9L,GAC3B6V,EAAiB7V,GACZA,GACDiY,GAAQU,QAAQ,aAIxB9C,EAAiB,QAEtB,CAAClV,KAEJ,IAAMiY,GAAQ,uCAAG,WAAOnL,GAAP,qBAAAJ,EAAA,6DACbsI,GAAY,GACZI,EAAe,MACfW,GAAO,MACP7B,OAAOgE,SAAS,EAAG,GAJN,kBAMexN,EAAI4C,YAAYR,GAN/B,OAOT,IADMa,EANG,QAOKrF,KAAK5D,OAAQ,CAAC,EAAD,YACLiJ,EAAUrF,KAAK5D,QAAU,IADpB,IACvB,2BAASrF,EAAsC,QAC3CyV,EAAYqD,UAAU9Y,GAFH,gCAIvBwW,IAAU,SAACnR,GACP,MAAO,sBAAIiJ,EAAUrF,KAAK5D,QAAnB,YAA+BA,IAAQ0K,KAC1CgJ,YAIR3H,GAAQ,2BAjBH,kDAoBTjG,QAAQhD,MAAR,MACAiJ,GAAQ,wBArBC,yBAuBTuE,GAAY,GAvBH,6EAAH,sDA2BRqD,GAAc,uCAAG,WAAOvL,GAAP,iBAAAJ,EAAA,6DACnBsI,GAAY,GACZI,EAAe,MACfW,GAAO,MACP7B,OAAOgE,SAAS,EAAG,GAJA,SAMTtL,EAAeE,EAAME,cACrBsL,EAAuB,CACzBC,WAAYzK,MAAS4J,UACrBzX,WAAY6N,MAAS4J,UACrBc,WAAY,GACZpY,OAAQ,CACJqY,MAAO,GACPnV,MAAOwJ,EAAM1M,OAAOkD,MACpBC,OAAQuJ,EAAM1M,OAAOmD,OACrBxC,OAAQ+L,EAAM1M,OAAOW,OACrBV,gBAAiByM,EAAM1M,OAAOC,gBAC9B6M,mBAAoBJ,EAAM1M,OAAO8M,oBAErCpM,MAAO,GACPd,GAAI0Y,MACJlV,MAAOsJ,EAAMtJ,MACblD,eAAgB,EAChByB,OAAQ+K,EAAM/K,KACdkL,OAAQH,EAAMG,OACd9M,MAAO,EACPgC,OAAQM,IAAWG,UACnBwK,WAAW,EACXlN,UAAU,yBAAD,OAA2B0M,IA5BzB,SA8BTkI,EAAYqD,UAAUG,GA9Bb,OAgCfhB,GAAQhI,KAAR,wBAA8BgJ,EAAStY,KAhCxB,kDAkCfwK,QAAQhD,MAAR,MACAiJ,GAAQ,wBAnCO,yBAqCfuE,GAAY,GArCG,6EAAH,sDAyCdrV,GAAM,uCAAG,WAAOgZ,EAA0B5W,GAAjC,SAAA2K,EAAA,sEACLoI,EAAYqD,UAAZ,2BACCQ,GADD,IAEF5W,UAHO,OAKX8T,IAAU,SAACnR,GACP,OAAOA,EAAOK,KAAI,SAAC1F,GACf,OAAIsZ,EAAa3Y,KAAOX,EAAMW,GACnB,2BACAX,GADP,IAEI0C,SAGD1C,QAbJ,2CAAH,wDAkBNuZ,GAAU,uCAAG,WAAOpC,GAAP,iBAAA9J,EAAA,6DACflC,QAAQC,IAAI,uBAEZsL,GAAO,MACPQ,IAAW,GAJI,SAMLjS,EAASwJ,MAAS+K,IAAI,EAAG,WAAWnB,UAN/B,SAOQ5C,EAAYgE,WAC3BxU,EACA,OACA,IACAkS,GAXO,cAOLpL,EAPK,OAaXyK,GAAUzK,EAAKgE,KAAKgJ,KAbT,qDAgBX3H,GAAQ,yBACRjG,QAAQhD,MAAR,MAjBW,0DAAH,sDAqBhB9G,qBAAU,WACNkY,GAAWpC,MACZ,CAACA,KAEJ9V,qBAAU,WAQN,OAPAmU,EAAU9G,UAAV,+BAAArB,EAAA,MAAoB,WAAOwF,GAAP,eAAAxF,EAAA,yDACAuB,KAAKC,MAAMgE,GACfjI,OAAS8O,IAFL,gCAGerO,EAAIsO,WAHnB,OAGNC,EAHM,OAIZ9B,GAAS8B,EAAa3Q,MAJV,2CAApB,uDAOO,WACHuM,EAAU9G,eAAUpG,MAEzB,CAACkN,IAEJnU,qBAAU,WACN,GAAKgK,EAAL,CAGA,IAAIwO,GAAO,EAELC,EAAU,uCAAG,WAAOzU,GAAP,uCAAAgI,EAAA,0DACXwM,EADW,oDAIfA,GAAO,EAOkC,KALnCE,EAA4B1U,EAAO5C,QAAO,SAACzC,GAC7C,MACqB,YAAjBA,EAAM8C,QAAyC,eAAjB9C,EAAM8C,WAGd8C,OAXf,wDAeToU,EAAgBD,EAA0BpK,QAC5C,SAACC,EAAK5P,GAEF,OADA4P,EAAI5P,EAAMW,IAAMX,EAAM8C,OACf8M,IAEX,IApBW,mBAwBQvE,EAAIiE,eAAe,CAClCC,IAAKwK,EAA0BrU,KAAI,SAAC1F,GAAD,OAAWA,EAAMW,QAzB7C,aAwBLoL,EAxBK,QA4BF9C,KAAK5D,OA5BH,iBA6BDoK,EACF1D,EAAK9C,KAAK5D,QAAU,GACpB4U,GAAe,EA/BZ,cAgCSxK,GAhCT,8DAgCEjP,EAhCF,QAiCCwZ,EAAcxZ,EAAIG,MAAQH,EAAIsC,SAC9BmX,GAAe,GAGfzZ,EAAIsC,QAAUM,IAAWK,MArC1B,wBAsCC2N,GACI5Q,EAAI2H,OACA,qGAxCT,UA0COkD,EAAI6O,YAAY1Z,EAAIG,IA1C3B,yBA2CO8U,EAAYyE,YAAY1Z,EAAIG,IA3CnC,kDA+CCH,EAAIsC,SAAWM,IAAWG,UA/C3B,kCAgD4B8H,EAAI8O,qBAC3B3Z,EAAIG,IAjDT,eAgDOyZ,EAhDP,iBAmDoBnF,EAAgBoF,IAC/BD,EAAanR,KAAKqR,UAClB,CACIzO,aAAc,gBAtDvB,QAmDOE,EAnDP,OAyDOwO,EAAkBtO,EAAOC,KAC3BH,EAAK9C,KACL,UAEE+C,EACFuO,EAAgBpO,SAAS,UACvBzL,EA/DP,gCA+DsCsL,GACrCxL,EAAIK,UAAYH,EAhEjB,yBAkEG+U,EAAYqD,UAAUtY,GAlEzB,iJAoEHyZ,GACAzD,IAAU,SAACnR,GACP,OAAO,YACAA,EAAOK,KAAI,SAAC1F,GACX,IAAMsZ,EAAe7J,EAAcgJ,MAC/B,SAACxO,GAAD,OAAOA,EAAEtJ,KAAOX,EAAMW,MAE1B,OAAI2Y,GAGGtZ,MAEb+P,KAAKgJ,OAhFR,0DAqFX3H,GAAQ,yBACRjG,QAAQhD,MAAR,MAtFW,yBAwFX0R,GAAO,EAxFI,2FAAH,sDA4FVW,EAAcC,aAAY,WAC5BX,EAAWzU,MACZ,KACH,OAAO,WACHqV,cAAcF,OAEnB,CAACnP,EAAKhG,GAAQ8R,KAEjB9V,qBAAU,WACN,IAAMsZ,EAAY,uCAAG,4BAAAtN,EAAA,sEACUhC,EAAIsO,WADd,OACXC,EADW,OAEjB9B,GAAS8B,EAAa3Q,MAFL,2CAAH,qDAIlB0R,IACA,IAAMC,EAAWH,YAAYE,EAAc,KAC3C,OAAO,WACHD,cAAcE,MAEnB,CAACvP,IAGJhK,qBAAU,YACU,uCAAG,wCAAAgM,EAAA,2DACT8J,EAAS0D,IAAGhM,MAAMsJ,GAAShB,OAAQ,CACrC2D,mBAAmB,KAEZlN,OAJI,wBAKXqI,GAAiB,GALN,kBAOmB5K,EAAIqN,SAC1BvB,EAAOvJ,QARJ,YAODkI,EAPC,QAUS7M,KAVT,kCAWwBoC,EAAI8O,qBAC3BrE,EAAY7M,KAAKtI,IAZlB,eAWGyZ,EAXH,iBAcgBnF,EAAgBoF,IAC/BD,EAAanR,KAAKqR,UAClB,CACIzO,aAAc,gBAjBnB,QAcGE,EAdH,OAoBGwO,EAAkBtO,EAAOC,KAC3BH,EAAK9C,KACL,UAEE+C,EACFuO,EAAgBpO,SAAS,UACvBzL,EA1BH,gCA0BkCsL,GACrC+J,EAAe,2BACRD,EAAY7M,MADL,IAEVpI,UAAWH,KAEfuX,GAAQhI,KAAK,KA/BV,yBAkCPgG,GAAiB,GAlCV,2EAAH,qDAsChB8E,KACD,CAAC5C,GAAShB,SAEb,IAAM6D,GAAwB,SAAChb,GAC3B,OACIA,EAAM8C,SAAWM,IAAWC,SAC5BrD,EAAM8C,SAAWM,IAAWE,YAI9ByV,GAAa,SAAC1L,EAAe2C,GAE/B,GAAIgL,GAAsB3N,KAAO2N,GAAsBhL,GACnD,OAAQ,EACL,IAAKgL,GAAsB3N,IAAM2N,GAAsBhL,GAC1D,OAAO,EAIX,GACI3C,EAAEO,SAAWoC,EAAEpC,QACfP,EAAEtM,OAAOW,QAAUsO,EAAEjP,OAAOW,QAC5B2L,EAAEvK,SAAWM,IAAWC,SACxB2M,EAAElN,SAAWM,IAAWC,QAC1B,CAEE,IAAI4X,EAAS5N,EAAEvM,MACXoa,EAASlL,EAAElP,MASf,MANgC,KAA5BuM,EAAEtM,OAAOW,OAAQyZ,SACjBF,GAAkB5N,EAAEpM,gBAEQ,KAA5B+O,EAAEjP,OAAOW,OAAQyZ,SACjBD,GAAkBlL,EAAE/O,gBAEpBga,GAAUC,EACHlL,EAAEpP,WAAayM,EAAEzM,WAErBsa,EAASD,EAGpB,OAAOjL,EAAEpP,WAAayM,EAAEzM,YAGtBwa,GAAU,uCAAG,8BAAA/N,EAAA,6DAEXgO,EAAe5M,MAAS4J,UAC5BhT,GAAOiW,SAAQ,SAACtb,GACZqb,EAAe/R,KAAKC,IAAI8R,EAAcrb,EAAMY,eAJjC,SAOI6U,EAAYgE,WAC3B4B,EAAe,EACf,OACA,IACAlE,IAXW,QAOTpL,EAPS,QAaNnG,OAAS,EAEd4Q,IAAU,SAACnR,GAAD,MACN,sBAAIA,GAAJ,YAAe0G,IACVtJ,QAAO,SAACzC,GAAD,OAAYA,EAAMub,cACzBxL,KAAKgJ,OAGd7B,IAAW,GArBA,2CAAH,qDAyBV/W,GAAQ,uCAAG,WAAOH,GAAP,SAAAqN,EAAA,+EAGHoI,EAAYyE,YAAYla,EAAMW,IAH3B,OAIT6V,IAAU,SAACnR,GACP,OAAOA,EAAO5C,QAAO,SAACwH,GAAD,OAAOA,EAAEtJ,KAAOX,EAAMW,SAE/CsX,GAAQhI,KAAK,KAPJ,gDAST9E,QAAQhD,MAAR,MACAiJ,GAAQ,wBAVC,yDAAH,sDAcRhR,GAAM,uCAAG,WAAOJ,GAAP,SAAAqN,EAAA,sDACX0I,EAAe/V,GAEfiY,GAAQhI,KAAK,KACb4E,OAAOgE,SAAS,EAAG,GAJR,2CAAH,sDAONtY,GAAM,uCAAG,WAAOP,GAAP,eAAAqN,EAAA,6DACX8I,GAAe,GADJ,SAGP8B,GAAQhI,KAAK,KACPuL,EAAgC,CAClCpV,MAAO,EACPuH,cAAe3N,EAAMa,UAAW4a,MAAM,KAAK,GAC3C1a,OAAQf,EAAMe,OACd+B,OAAQM,IAAWI,MACnBuK,WAAW,EACXtM,MAAO,GACP0C,MAAOnE,EAAMmE,OAEjBkS,GAAqB,GAbd,SAcDhL,EAAI4C,YAAYuN,EAAa,CAC/BtN,iBAAkB,SAACC,GACf,IAAMuN,EAAmBpS,KAAKoI,MACzBvD,EAAcC,OAAUD,EAAcE,OAE3CgI,GAAqBqF,MAnBtB,uBAsBDjG,EAAYkG,gBAAgB3b,EAAMW,IAtBjC,OAuBP6V,IAAU,SAACnR,GACP,OAAOA,EAAO5C,QAAO,SAACwH,GAAD,OAAOA,EAAEtJ,KAAOX,EAAMW,SAE/CmW,GAAW,eACXE,GAAevI,MAAS4J,WA3BjB,kDA8BPlN,QAAQhD,MAAR,MACAiJ,GAAQ,sBA/BD,yBAiCP+E,GAAe,GAjCR,6EAAH,sDAqCN9V,GAAM,uCAAG,WAAOL,GAAP,SAAAqN,EAAA,sDACX4K,GAAQhI,KAAR,wBAA8BjQ,EAAMW,KADzB,2CAAH,sDAINib,GAAqB,SAAC5b,GAEpBuX,GACAK,GAAiB,2BACVD,IADS,kBAEX3X,EAAMW,IAAMgX,GAAc3X,EAAMW,OAGrCsX,GAAQhI,KAAR,kBAAwBjQ,EAAMW,MAShCkb,GAAmB,uCAAG,4BAAAxO,EAAA,sEAEpBqK,IAAgB,GACVoE,EAAWC,OAAOC,KAAKrE,IAAejS,KAAI,SAAC/E,GAC7C,OAAO8U,EAAYyE,YAAYvZ,MAJf,SAMd8K,QAAQwQ,IAAIH,GANE,OAOpBtF,IAAU,SAACnR,GACP,OAAOA,EAAO5C,QAAO,SAACzC,GAAD,OAAY2X,GAAc3X,EAAMW,UAEzDiX,GAAiB,IACjBJ,IAAuB,GAXH,kDAapBrM,QAAQhD,MAAR,MACAiJ,GAAQ,yBAdY,yBAgBpBsG,IAAgB,GAhBI,6EAAH,qDAoBnBwE,GAAyB7W,GAAO5C,QAAO,SAACzC,GAC1C,OACKA,EAAMub,aACNvb,EAAM8C,SAAWM,IAAWG,WACzBvD,EAAM8C,SAAWM,IAAWI,UAIlCuW,GAA4B1U,GAAO5C,QACrC,SAACzC,GAAD,OACKA,EAAMub,aACNvb,EAAM8C,SAAWM,IAAWC,SACzBrD,EAAM8C,SAAWM,IAAWE,eAGlC6Y,GAAgBpC,GAA0BtX,QAC5C,SAACzC,GAAD,OAAWA,EAAM8C,SAAWM,IAAWC,WAGrC+Y,GAAmBrC,GAA0BtX,QAC/C,SAACzC,GAAD,OAAWA,EAAM8C,SAAWM,IAAWE,cAGrC+Y,GAAmB,uCAAG,WAAOC,GAAP,eAAAjP,EAAA,yDACnBwK,GADmB,iEAELxM,EAAIkR,YAAY,CAC/BC,UAAWF,EACXG,MAAO5E,GAAM4E,QAJO,YAElB1Q,EAFkB,QAMf9C,KAAKd,MANU,gBAOpBuU,MAAM3Q,EAAK9C,KAAKd,OAPI,mCASpB2P,GAToB,UASJzM,EAAIsO,WATA,oBASY1Q,MATZ,0DAAH,sDAanB0T,GAAkB,uCAAG,WAAOF,GAAP,eAAApP,EAAA,yDAClBwK,GADkB,iEAEJxM,EAAIkR,YAAY,CAC/BC,UAAW3E,GAAM2E,UACjBC,MAAOA,IAJY,YAEjB1Q,EAFiB,QAMd9C,KAAKd,MANS,gBAOnBuU,MAAM3Q,EAAK9C,KAAKd,OAPG,mCASnB2P,GATmB,UASHzM,EAAIsO,WATD,oBASa1Q,MATb,0DAAH,sDAaxB,OACI,qCACI,oBAAI9G,MAAO,CAAEuB,SAAU,OAAQkZ,UAAW,QAA1C,uCAIA,cAAC,IAAD,CAAmB/J,QAAS4D,GAAKoG,UAAWlG,KAC5C,cAAC,IAAD,CAAqB9D,QAASgE,GAASgG,UAAW9F,KAElD,cAAC,IAAD,CACIhX,UAAWA,EACX2V,SAAUA,EACVkD,SAAUA,GACVvY,OAAQ2Y,GACRpL,OAAQkI,EACRvQ,SAAU,kBAxFlBwQ,EAAe,WACflB,OAAOgE,SAAS,EAAG,MAyFdhB,IACG,cAAC,IAAD,CACIA,MAAOA,GACPiF,eAAgBT,GAChBM,mBAAoBA,KAG5B,uBAEA,sBACI/Z,UAAU,kBACVT,MAAO,CAAEU,UAAW,OAAQka,cAAe,QAF/C,UAII,qBAAK5a,MAAO,CAAEya,UAAW,QAAzB,SACI,sBACIha,UAAU,cACVT,MAAO,CAAE6B,aAAc,QAF3B,UAII,uBACI7B,MAAO,GACP6P,MAAOqF,GACPzM,KAAK,SACLhI,UAAU,4BACVoa,YAAY,YACZ/K,SAAU,SAACC,GAAD,OAAOoF,GAAkBpF,EAAEC,OAAOH,UAGhD,sBACI7P,MAAO,CACH2B,MAAO,SAFf,WAKMyT,IACE,qCACI,yBACIpV,MAAO,CAAEG,QAAS,UAClBM,UAAU,qCACVmB,QAAS,kBACLgU,IAAe9X,KAJvB,WAOMA,IACE,mBAAG2C,UAAU,eAEhB3C,IACG,mBAAG2C,UAAU,wBAGrB,eAAC,IAAD,CACIT,MAAO,CACHG,QAAS,SACTC,WAAY,OAHpB,UAMI,cAAC,IAAS0a,OAAV,CAAiBC,QAAQ,SAAzB,SACI,mBAAGta,UAAU,mBAGjB,eAAC,IAASua,KAAV,WACI,cAAC,IAASC,KAAV,CACIrZ,QAAS,kBACLyT,IAAuB,IAF/B,yBAOA,cAAC,IAAS4F,KAAV,CACIrZ,QAAS,kBACLkU,GAAQhI,KACJ,0BAHZ,0CAafsH,IACG,qCACI,wBACI3U,UAAU,qCACVmB,QAAS,WACLyT,IAAuB,GACvBI,GAAiB,KAJzB,oBASA,wBACIzV,MAAO,CAAEI,WAAY,OACrBK,UAAU,gCACVmB,QAAS,WACL8X,MAJR,+BAcpB,eAAC,IAAD,CACIwB,WAAYhY,GAAOO,OACnB0X,KAAMlC,GACNnE,QAASA,GACTsG,OACI,qCACI,uBACA,+CAPZ,UAWKxD,GAA0BnU,OAAS,GAChC,cAAC,IAAD,CACIpB,aAAc2X,GAAcvW,OAC5BnB,gBAAiB2X,GAAiBxW,OAClC7B,QAAS,WACLwS,IAAqB,MAIhC2F,GAAuBxW,KAAI,SAAC1F,GAAD,OACxB,cAAC,IAAD,CAEIA,MAAOA,EACPD,UAAWA,EACXgE,QAAS6X,GACT4B,WACIjG,IAAuBI,GAAc3X,EAAMW,IAE/CV,WAAYA,IAPPD,EAAMW,aAa1BiV,GACG,cAAC,IAAD,CACI7V,UAAWA,EACXC,MAAO4V,EACP1V,QAAS,kBAAM+X,GAAQhI,KAAK,MAC5B9P,SAAU,SAACH,GACPG,GAASH,GACTwW,GAAUnR,GAAO5C,QAAO,SAACwH,GAAD,OAAOA,EAAEtJ,KAAOX,EAAMW,OAC9CsX,GAAQhI,KAAK,MAEjB7P,OAAQ,SAACJ,GACLI,GAAOJ,GACPiY,GAAQhI,KAAK,MAEjB5P,OAAQ,SAACL,GACLK,GAAOL,IAEXO,OAAQ,SAACP,GACLO,GAAOP,IAEXM,OAAQA,GACRL,WAAYA,KAGpB,cAAC,IAAD,IACA,cAAC,IAAD,CAAW0B,KAAM+T,EAAUlU,MAAM,kBAAjC,SACI,0EAEJ,cAAC,IAAD,CAAWG,KAAM8V,GAAcjW,MAAM,kBAArC,SACI,2EAEJ,cAAC,IAAD,CAAWG,KAAMqU,EAAexU,MAAM,uBAAtC,SACI,8EAEJ,cAAC,IAAD,CAAWG,KAAMuU,EAAa1U,MAAM,eAApC,SAEI,qBAAKoB,UAAU,WAAf,SACI,qBACIA,UAAU,eACV0O,KAAK,cACLnP,MAAO,CAAE8B,MAAM,GAAD,OAAsB,IAAjBmS,GAAL,MACd7E,gBAAgC,IAAjB6E,SAK3B,cAAC,IAAD,CACI/Q,OAAQ0U,GACRxU,SAAU,kBAAMgR,IAAqB,IACrC5U,KAAM2U,GACNhR,cAAe,SAACtF,GACZG,GAASH,GACTwW,GAAUnR,GAAO5C,QAAO,SAACwH,GAAD,OAAOA,EAAEtJ,KAAOX,EAAMW,gB,uNCnzBrD8c,EAA2B,SAAC,GAAuC,IAArCC,EAAoC,EAApCA,cAAetZ,EAAqB,EAArBA,MAAOL,EAAc,EAAdA,QACzDnB,EAAY,iBAMhB,OALI8a,IAAkBtZ,EAClBxB,GAAa,YACG,WAATwB,IACPxB,GAAa,UAGb,qBACIA,UAAWA,EACXT,MAAO,CAAEwb,gBAAiBvZ,GAC1BL,QAAS,kBAAMA,EAAQK,O,SC0BtBwZ,EAAyB,SAAC,GAAgC,IAA9BxZ,EAA6B,EAA7BA,MAAOyZ,EAAsB,EAAtBA,gBAAsB,EACd3c,oBAAS,GADK,mBAC3D4c,EAD2D,KACvCC,EADuC,OAElC7c,mBAASkD,GAFyB,mBAE3D4Z,EAF2D,KAEjDC,EAFiD,KA8BlE,OACI,qCACI,wBAAQrb,UAAU,eAAemB,QA5BrB,WAChBga,GAAuBD,GACnBA,GACAD,EAAgBG,IAyBhB,SACI,mBAAGpb,UAAU,kBAEhBkb,EACG,sBAAK3b,MAlBoB,CACjCwB,SAAU,WACVua,OAAQ,GAgBA,UACI,qBAAK/b,MAfc,CAC/BwB,SAAU,QACVC,IAAK,MACLua,MAAO,MACPC,OAAQ,MACRC,KAAM,OAUyBta,QA1Bf,WAChBga,GAAsB,GAClBD,GACAD,EAAgBG,MAwBR,cAAC,IAAD,CACI5Z,MAAO4Z,EACP/L,SAAU,SAAC7N,GAAD,OAAW6Z,EAAY7Z,EAAMka,MACvCC,iBAAkB,SAACna,GAAD,OAAW6Z,EAAY7Z,EAAMka,WAGvD,SChFVE,EAAgB,CAClB,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,WAGSC,EAAb,kDA4BI,WAAYxY,GAAqB,IAAD,8BAC5B,cAAMA,EAAU,WA5BZ8M,UAAY,GA2BY,EA1BxB2L,WAAaF,EAAc,GA0BH,EAzBxBG,QAyBwB,UAzBAH,GAyBA,EAvBxB1X,SAAU,EAuBc,EAtBxB8X,WAAY,EAsBY,EArBxB3L,MAAQ,EAqBgB,EApBxBC,MAAQ,EAoBgB,EAnBxB2L,cAAe,EAmBS,EAlBxBC,gBAAkB,UAkBM,EAjBxBxY,QAAS,EAiBe,EAHxBY,mBAGwB,IAFxB6X,yBAEwB,IA5BpC,uCAoBI,WACI,OAAOhX,KAAKzB,QArBpB,IAaI,SAAU0B,GACND,KAAKzB,OAAS0B,EACVD,KAAKb,eACLa,KAAKb,cAAcc,KAhB/B,kBAgCI,WACQD,KAAK8W,aACL9W,KAAK9B,SAASoC,UAAU,CACpBZ,EAAGM,KAAKkL,MACRvL,EAAGK,KAAKmL,MACRvI,OAAQ5C,KAAK9B,SAAS0B,WAAa,GACnCvD,MAAO2D,KAAK+W,gBACZlU,KAAM,gBAGV7C,KAAK9B,SAASoC,UAAU,CACpBZ,EAAGM,KAAKkL,MACRvL,EAAGK,KAAKmL,MACRvI,OAAQ5C,KAAKgL,UAAY,EACzB3O,MAAO2D,KAAK2W,WACZ9T,KAAM,kBA/CtB,wBAqDI,SAAWM,GACP,kEAAiBA,GACjBnD,KAAKgL,UAAY7H,EAAK6H,WAAa,GACnChL,KAAK2W,WAAaxT,EAAKwT,YAAcF,EAAc,GACnDzW,KAAK4W,QAAUzT,EAAKyT,SAAL,UAAoBH,GACnCzW,KAAKqL,SA1Db,yBA6DI,SAAY3K,GACR,IAAIV,KAAK8W,aAAT,CAGA,GAAqB,IAAjBpW,EAAMM,OAAc,CAAC,IAAD,EACLhB,KAAKW,WAAWC,kCAC3BF,EAAMG,YAAYC,QAClBJ,EAAMG,YAAYE,SAFhBrB,EADc,EACdA,EAAGC,EADW,EACXA,EAITK,KAAK9B,SAAS+Y,UAAUvX,EAAGC,EAAGK,KAAKgL,UAAWhL,KAAK2W,YACnD3W,KAAK6W,WAAY,EACjB7W,KAAKkL,MAAQxL,EACbM,KAAKmL,MAAQxL,EACbK,KAAKC,OAAQ,OACW,IAAjBS,EAAMM,SACbhB,KAAKjB,SAAU,GAEnBiB,KAAKqL,UA9Eb,yBAiFI,SAAY3K,GAA+D,IAAD,EACvDV,KAAKW,WAAWC,kCAC3BF,EAAMG,YAAYC,QAClBJ,EAAMG,YAAYE,SAFhBrB,EADgE,EAChEA,EAAGC,EAD6D,EAC7DA,EAILK,KAAK8W,aACL9W,KAAK+W,gBAAkB/W,KAAK9B,SAASgZ,SAASxX,EAAGC,GAC1CK,KAAKjB,QACZiB,KAAKW,WAAWmC,MAAMpC,GAElBV,KAAK6W,YACL7W,KAAK9B,SAASiZ,SACVnX,KAAKkL,MACLlL,KAAKmL,MACLzL,EACAC,EACAK,KAAKgL,UACLhL,KAAK2W,YAET3W,KAAKC,OAAQ,GAGrBD,KAAKkL,MAAQxL,EACbM,KAAKmL,MAAQxL,EACbK,KAAKqL,SAzGb,uBA4GI,SAAU3K,GACe,IAAjBA,EAAMM,QACNhB,KAAK6W,WAAY,EACb7W,KAAK8W,eACL9W,KAAK8W,cAAe,EACpB9W,KAAK2W,WAAa3W,KAAK+W,gBACnB/W,KAAKgX,qBACLhX,KAAKgX,oBAAoBhX,KAAK+W,mBAGd,IAAjBrW,EAAMM,SACbhB,KAAKjB,SAAU,GAEnBiB,KAAKqL,SAzHb,qBA4HI,SAAQ3K,GACJV,KAAKW,WAAWuC,QAAQxC,GACxBV,KAAKqL,SA9Hb,oBAiII,WAEIrL,KAAK9B,SAASwE,aAAa,MAC3B1C,KAAKC,OAAQ,IApIrB,qBAuII,WACID,KAAK9B,SAASmK,kBACd,IAAM7C,EAAexF,KAAK9B,SAASuH,gBAAgB,MAC/CD,GAAgBxF,KAAKoI,cACrBpI,KAAKoI,aAAa5C,GAEtBxF,KAAKC,OAAQ,IA7IrB,yBAgJI,SAAYC,GACRF,KAAKoI,aAAelI,IAjJ5B,qBAoJI,SAAQA,GACJF,KAAKb,cAAgBe,IArJ7B,qBAwJI,WAII,OAHIF,KAAKC,OACLD,KAAK9B,SAASmK,mBAEX,IA5Jf,8BA+JI,WACIrI,KAAK8W,cAAe,EACpB9W,KAAKqL,SAjKb,2BAoKI,SAAcnL,GACVF,KAAKgX,oBAAsB9W,MArKnC,GAAgCqI,KA2LzB,IAAM6O,EAA8B,SAAC,GAAuB,EAArBlZ,SAAsB,IAAZuK,EAAW,EAAXA,KAAW,EAC7BtP,mBAAS,IADoB,mBACxD6R,EADwD,KAC7CS,EAD6C,OAE3BtS,mBAASsd,EAAc,IAFI,mBAExDE,EAFwD,KAE5CU,EAF4C,OAGjCle,mBAASsd,GAHwB,mBAGxDG,EAHwD,KAG/CU,EAH+C,OAIrCne,oBAAS,GAJ4B,mBAIxD8G,EAJwD,KAIjD0I,EAJiD,KAM/DF,EAAKa,QAAQX,GAEbrP,qBAAU,WACNmP,EAAK3I,WAAW,CACZkL,YACA2L,aACAC,cAEL,CAAC5L,EAAW2L,EAAYC,IAE3B,IAAMd,EAAkB,SAACzZ,GACrBgb,EAAchb,GACdib,EA7BR,SAAsBV,EAAmBva,GAQrC,OAPgC,IAA5Bua,EAAQW,QAAQlb,KAEhBua,EAAO,CAAIva,GAAJ,mBAAcua,KAErBA,EAAQ/Y,OAPS,KAQjB+Y,EAAUA,EAAQzb,MAAM,EARP,KAUdyb,EAqBQY,CAAaZ,EAASva,KAKrC,OAFAoM,EAAKgP,cAAc3B,GAGf,sBAAK1b,MAAO,CAAEU,UAAW,QAAzB,UACI,sBAAKD,UAAU,aAAf,UACI,wBAAOT,MAAO,CAAC8B,MAAO,QAAtB,uBAEI,wBAAOrB,UAAU,uBAAuBT,MAAO,CAAC2B,MAAO,SAAvD,UACKiP,EADL,WAIJ,uBACInI,KAAK,QACLhI,UAAU,qBACV2G,IAAI,IACJM,IAAI,MACJmI,MAAOe,EACPd,SAAU,SAACC,GAAD,OAAOsB,EAAanB,SAASH,EAAEC,OAAOH,cAGxD,sBACI7P,MAAO,CACHG,QAAS,OACTmd,cAAe,MACfC,SAAU,QAJlB,UAOKf,EAAQjZ,KAAI,SAACtB,EAAO6F,GAAR,OACT,cAAC,EAAD,CAEIyT,cAAegB,EACfta,MAAOA,EACPL,QAAS,SAACK,GAAD,OAAWgb,EAAchb,KAH7B6F,MAYb,wBACIrH,UAAU,eACVmB,QAAS,kBAAMyM,EAAKmP,oBAFxB,SAII,mBAAG/c,UAAU,yBAEjB,cAAC,EAAD,CACIwB,MAAOsa,EACPb,gBAAiB,SAACzZ,GAAD,OAAWyZ,EAAgBzZ,SAGpD,sBAAKxB,UAAU,aAAaT,MAAO,CAC/BU,UAAW,OACX6Q,WAAY1L,EAAQ,UAAY,UAFpC,UAII,wBACIpF,UAAU,oBACVmB,QAAS,kBAAMyM,EAAKgC,UAFxB,oBAMA,wBACI5P,UAAU,kBACVmB,QAAS,kBAAMyM,EAAKiC,WACpBtQ,MAAO,CAAEI,WAAY,OAHzB,0B,0ICzOJqd,EA+PAC,EA0LAC,EAeAC,EAkMA3c,EA4NA4c,EAmHAC,E,gGChgCCC,EAAY,0BAA0BvH,QAAQ,OAAQ,IA4BtDwH,EAGT,WAAYC,GAAsH,IAA7EC,EAA4E,uDAAzDH,EAAqBhL,EAAoC,uDAAboL,IAAa,yBAA5ED,WAA4E,KAApCnL,QAAoC,KAFvHkL,mBAEuH,EACzHA,IACArY,KAAKqY,cAAgBA,EACrBrY,KAAKsY,SAAWD,EAAcC,UAAYtY,KAAKsY,WAW9CE,EAAb,kDAEI,WAAmBC,EAAe7R,GAAe,IAAD,8BAC5C,cAAMA,IADS6R,QAA6B,EADhDC,KAAwB,gBACwB,EAFpD,sBAAmChd,QC1CtBid,EAAiB,sBAOjBC,EAAoB,SAAUC,EAAsBC,EAAmBC,GAChF,GAAmB,OAAfA,QAAsCxY,IAAfwY,EACvB,MAAM,IAAIP,EAAcM,EAAlB,6BAAmDA,EAAnD,+CAAmGD,EAAnG,OAyDDG,EAAkB,SAAUC,GAA6B,IAClE,IAAMC,EAAe,IAAIC,gBAAgBF,EAAI7J,QADqB,mBAAhBgK,EAAgB,iCAAhBA,EAAgB,kBAElE,cAAqBA,EAArB,eAA8B,CAAzB,IAAMC,EAAM,KACb,IAAK,IAAMC,KAAOD,EACd,GAAIE,MAAMC,QAAQH,EAAOC,IAAO,CAC5BJ,EAAaO,OAAOH,GADQ,oBAETD,EAAOC,IAFE,IAE5B,2BAAgC,CAAC,IAAtBI,EAAqB,QAC5BR,EAAaS,OAAOL,EAAKI,IAHD,oCAM5BR,EAAaU,IAAIN,EAAKD,EAAOC,IAIzCL,EAAI7J,OAAS8J,EAAa9U,YAOjByV,EAAwB,SAAU5P,EAAY6P,EAAqBzB,GAC5E,IAAM0B,EAA6B,kBAAV9P,EAIzB,OAH2B8P,GAAa1B,GAAiBA,EAAc2B,WACjE3B,EAAc2B,WAAWF,EAAexM,QAAQ,iBAChDyM,GAEAlT,KAAKoT,eAAoB1Z,IAAV0J,EAAsBA,EAAQ,IAC5CA,GAAS,IAOPiQ,EAAe,SAAUjB,GAClC,OAAOA,EAAIkB,SAAWlB,EAAI7J,OAAS6J,EAAImB,MAO9BC,EAAwB,SAAUC,EAAwB/B,EAA4BJ,EAAmBE,GAClH,OAAO,WAAuE,IAAtElL,EAAqE,uDAA9CoL,EAAaD,EAAiC,uDAAdH,EACrDoC,EAAgB,2BAAOD,EAAUE,SAAjB,IAA0BvB,MAAmB,OAAbZ,QAAa,IAAbA,OAAA,EAAAA,EAAeC,WAAYA,GAAYgC,EAAUrB,MACvG,OAAO9L,EAAMsN,QAAQF,M,SF5EjB1C,K,cAAAA,E,eAAAA,M,cA+PAC,K,SAAAA,M,cA0LAC,K,cAAAA,E,UAAAA,E,cAAAA,E,gBAAAA,E,oBAAAA,E,UAAAA,E,oBAAAA,E,8BAAAA,E,eAAAA,M,cAeAC,K,2BAAAA,E,qCAAAA,E,mBAAAA,M,cAkMA3c,K,kBAAAA,E,wBAAAA,E,kBAAAA,E,sBAAAA,E,cAAAA,E,eAAAA,M,cA4NA4c,K,YAAAA,E,iBAAAA,M,cAmHAC,K,YAAAA,E,iBAAAA,M,KA0EL,IA6iCMwC,EAAe,SAASrC,GACjC,IAAMsC,EA9iCiC,SAAUtC,GACjD,MAAO,CAOHuC,WAAW,WAAD,4BAAE,WAAOC,GAAP,uCAAAvV,EAAA,6DAA0CkV,EAA1C,+BAAyD,GAG3DM,EAAiB,IAAIC,IAHnB,eAGqCpC,GAEzCN,IACA2C,EAAc3C,EAAc2C,aAG1BC,EATE,yBASyBC,OAAQ,QAAWF,GAAgBR,GAE9DW,EAAyB,IADzBC,EAA0B,IAKR,gBAAkB,mBAE1CpC,EAAgB8B,EAAgBK,EAAwBX,EAAQa,OAC5DC,EAAyBN,GAAeA,EAAY1N,QAAU0N,EAAY1N,QAAU,GACxF2N,EAAuB3N,QAAvB,uCAAqC8N,GAA4BE,GAA2Bd,EAAQlN,SACpG2N,EAAuB/Z,KAAO2Y,EAAsBgB,EAAiBI,EAAwB5C,GApBrF,kBAsBD,CACHY,IAAKiB,EAAaY,GAClBN,QAASS,IAxBL,4CAAF,mDAAC,GAiCX1T,eAAe,WAAD,4BAAE,WAAOgU,GAAP,uCAAAjW,EAAA,6DAAkDkV,EAAlD,+BAAiE,GAGvEM,EAAiB,IAAIC,IAHf,wBAGiCpC,GAEzCN,IACA2C,EAAc3C,EAAc2C,aAG1BC,EATM,yBASqBC,OAAQ,QAAWF,GAAgBR,GAE9DW,EAAyB,IADzBC,EAA0B,IAKR,gBAAkB,mBAE1CpC,EAAgB8B,EAAgBK,EAAwBX,EAAQa,OAC5DC,EAAyBN,GAAeA,EAAY1N,QAAU0N,EAAY1N,QAAU,GACxF2N,EAAuB3N,QAAvB,uCAAqC8N,GAA4BE,GAA2Bd,EAAQlN,SACpG2N,EAAuB/Z,KAAO2Y,EAAsB0B,EAAqBN,EAAwB5C,GApBrF,kBAsBL,CACHY,IAAKiB,EAAaY,GAClBN,QAASS,IAxBD,4CAAF,mDAAC,GAiCf/U,YAAY,WAAD,4BAAE,WAAOsV,GAAP,uCAAAlW,EAAA,6DAA4CkV,EAA5C,+BAA2D,GAG9DM,EAAiB,IAAIC,IAHlB,cAGoCpC,GAEzCN,IACA2C,EAAc3C,EAAc2C,aAG1BC,EATG,yBASwBC,OAAQ,QAAWF,GAAgBR,GAE9DW,EAAyB,IADzBC,EAA0B,IAKR,gBAAkB,mBAE1CpC,EAAgB8B,EAAgBK,EAAwBX,EAAQa,OAC5DC,EAAyBN,GAAeA,EAAY1N,QAAU0N,EAAY1N,QAAU,GACxF2N,EAAuB3N,QAAvB,uCAAqC8N,GAA4BE,GAA2Bd,EAAQlN,SACpG2N,EAAuB/Z,KAAO2Y,EAAsB2B,EAAkBP,EAAwB5C,GApBrF,kBAsBF,CACHY,IAAKiB,EAAaY,GAClBN,QAASS,IAxBJ,4CAAF,mDAAC,GAgCZQ,iBAAiB,WAAD,4BAAE,kDAAAnW,EAAA,6DAAOkV,EAAP,+BAAsB,GAG9BM,EAAiB,IAAIC,IAHb,oBAG+BpC,GAEzCN,IACA2C,EAAc3C,EAAc2C,aAG1BC,EATQ,yBASmBC,OAAQ,QAAWF,GAAgBR,GAC9DY,EAA0B,GAKhCpC,EAAgB8B,EAJe,GAIyBN,EAAQa,OAC5DC,EAAyBN,GAAeA,EAAY1N,QAAU0N,EAAY1N,QAAU,GACxF2N,EAAuB3N,QAAvB,uCAAqC8N,GAA4BE,GAA2Bd,EAAQlN,SAjBtF,kBAmBP,CACH2L,IAAKiB,EAAaY,GAClBN,QAASS,IArBC,4CAAF,kDAAC,GA6BjBS,eAAe,WAAD,4BAAE,kDAAApW,EAAA,6DAAOkV,EAAP,+BAAsB,GAG5BM,EAAiB,IAAIC,IAHf,kBAGiCpC,GAEzCN,IACA2C,EAAc3C,EAAc2C,aAG1BC,EATM,yBASqBC,OAAQ,QAAWF,GAAgBR,GAC9DY,EAA0B,GAKhCpC,EAAgB8B,EAJe,GAIyBN,EAAQa,OAC5DC,EAAyBN,GAAeA,EAAY1N,QAAU0N,EAAY1N,QAAU,GACxF2N,EAAuB3N,QAAvB,uCAAqC8N,GAA4BE,GAA2Bd,EAAQlN,SAjBxF,kBAmBL,CACH2L,IAAKiB,EAAaY,GAClBN,QAASS,IArBD,4CAAF,kDAAC,GA8Bf9I,YAAY,WAAD,4BAAE,WAAOvZ,GAAP,uCAAA0M,EAAA,6DAAmBkV,EAAnB,+BAAkC,GAE3C5B,EAAkB,cAAe,KAAMhgB,GACjC+iB,EAAe,mBAChB/K,QADgB,WACJ,KADI,KACKgL,mBAAmBC,OAAOjjB,KAE9CkiB,EAAiB,IAAIC,IAAIY,EAAchD,GAEzCN,IACA2C,EAAc3C,EAAc2C,aAG1BC,EAZG,yBAYwBC,OAAQ,UAAaF,GAAgBR,GAChEY,EAA0B,GAKhCpC,EAAgB8B,EAJe,GAIyBN,EAAQa,OAC5DC,EAAyBN,GAAeA,EAAY1N,QAAU0N,EAAY1N,QAAU,GACxF2N,EAAuB3N,QAAvB,uCAAqC8N,GAA4BE,GAA2Bd,EAAQlN,SApB3F,kBAsBF,CACH2L,IAAKiB,EAAaY,GAClBN,QAASS,IAxBJ,4CAAF,mDAAC,GAkCZa,aAAa,WAAD,4BAAE,WAAOC,EAAgBC,GAAvB,yCAAA1W,EAAA,6DAAwDkV,EAAxD,+BAAuE,GAEjF5B,EAAkB,eAAgB,SAAUmD,GACtCJ,EAAe,+BAChB/K,QADgB,WACJ,UADI,KACUgL,mBAAmBC,OAAOE,KAEnDjB,EAAiB,IAAIC,IAAIY,EAAchD,GAEzCN,IACA2C,EAAc3C,EAAc2C,aAG1BC,EAZI,yBAYuBC,OAAQ,QAAWF,GAAgBR,GAE9DW,EAAyB,IADzBC,EAA0B,IAKR,gBAAkB,mBAE1CpC,EAAgB8B,EAAgBK,EAAwBX,EAAQa,OAC5DC,EAAyBN,GAAeA,EAAY1N,QAAU0N,EAAY1N,QAAU,GACxF2N,EAAuB3N,QAAvB,uCAAqC8N,GAA4BE,GAA2Bd,EAAQlN,SACpG2N,EAAuB/Z,KAAO2Y,EAAsBmC,EAAgBf,EAAwB5C,GAvBlF,kBAyBH,CACHY,IAAKiB,EAAaY,GAClBN,QAASS,IA3BH,4CAAF,qDAAC,GAoCbgB,aAAa,WAAD,4BAAE,WAAOA,GAAP,uCAAA3W,EAAA,6DAAoCkV,EAApC,+BAAmD,GAGvDM,EAAiB,IAAIC,IAHjB,qBAGmCpC,GAEzCN,IACA2C,EAAc3C,EAAc2C,aAG1BC,EATI,yBASuBC,OAAQ,QAAWF,GAAgBR,GAE9DW,EAAyB,IADzBC,EAA0B,IAKR,gBAAkB,mBAE1CpC,EAAgB8B,EAAgBK,EAAwBX,EAAQa,OAC5DC,EAAyBN,GAAeA,EAAY1N,QAAU0N,EAAY1N,QAAU,GACxF2N,EAAuB3N,QAAvB,uCAAqC8N,GAA4BE,GAA2Bd,EAAQlN,SACpG2N,EAAuB/Z,KAAO2Y,EAAsBoC,EAAchB,EAAwB5C,GApBhF,kBAsBH,CACHY,IAAKiB,EAAaY,GAClBN,QAASS,IAxBH,4CAAF,mDAAC,GAgCbiB,aAAa,WAAD,4BAAE,kDAAA5W,EAAA,6DAAOkV,EAAP,+BAAsB,GAG1BM,EAAiB,IAAIC,IAHjB,kBAGmCpC,GAEzCN,IACA2C,EAAc3C,EAAc2C,aAG1BC,EATI,yBASuBC,OAAQ,OAAUF,GAAgBR,GAC7DY,EAA0B,GAKhCpC,EAAgB8B,EAJe,GAIyBN,EAAQa,OAC5DC,EAAyBN,GAAeA,EAAY1N,QAAU0N,EAAY1N,QAAU,GACxF2N,EAAuB3N,QAAvB,uCAAqC8N,GAA4BE,GAA2Bd,EAAQlN,SAjB1F,kBAmBH,CACH2L,IAAKiB,EAAaY,GAClBN,QAASS,IArBH,4CAAF,kDAAC,GA6BbrJ,SAAS,WAAD,4BAAE,kDAAAtM,EAAA,6DAAOkV,EAAP,+BAAsB,GAGtBM,EAAiB,IAAIC,IAHrB,aAGuCpC,GAEzCN,IACA2C,EAAc3C,EAAc2C,aAG1BC,EATA,yBAS2BC,OAAQ,OAAUF,GAAgBR,GAC7DY,EAA0B,GAKhCpC,EAAgB8B,EAJe,GAIyBN,EAAQa,OAC5DC,EAAyBN,GAAeA,EAAY1N,QAAU0N,EAAY1N,QAAU,GACxF2N,EAAuB3N,QAAvB,uCAAqC8N,GAA4BE,GAA2Bd,EAAQlN,SAjB9F,kBAmBC,CACH2L,IAAKiB,EAAaY,GAClBN,QAASS,IArBP,4CAAF,kDAAC,GA8BTkB,gBAAgB,WAAD,4BAAE,WAAOJ,GAAP,uCAAAzW,EAAA,6DAAuBkV,EAAvB,+BAAsC,GAEnD5B,EAAkB,kBAAmB,SAAUmD,GACzCJ,EAAe,uBAChB/K,QADgB,WACJ,UADI,KACUgL,mBAAmBC,OAAOE,KAEnDjB,EAAiB,IAAIC,IAAIY,EAAchD,GAEzCN,IACA2C,EAAc3C,EAAc2C,aAG1BC,EAZO,yBAYoBC,OAAQ,OAAUF,GAAgBR,GAC7DY,EAA0B,GAKhCpC,EAAgB8B,EAJe,GAIyBN,EAAQa,OAC5DC,EAAyBN,GAAeA,EAAY1N,QAAU0N,EAAY1N,QAAU,GACxF2N,EAAuB3N,QAAvB,uCAAqC8N,GAA4BE,GAA2Bd,EAAQlN,SApBvF,kBAsBN,CACH2L,IAAKiB,EAAaY,GAClBN,QAASS,IAxBA,4CAAF,mDAAC,GAgChBmB,YAAY,WAAD,4BAAE,kDAAA9W,EAAA,6DAAOkV,EAAP,+BAAsB,GAGzBM,EAAiB,IAAIC,IAHlB,gBAGoCpC,GAEzCN,IACA2C,EAAc3C,EAAc2C,aAG1BC,EATG,yBASwBC,OAAQ,OAAUF,GAAgBR,GAC7DY,EAA0B,GAKhCpC,EAAgB8B,EAJe,GAIyBN,EAAQa,OAC5DC,EAAyBN,GAAeA,EAAY1N,QAAU0N,EAAY1N,QAAU,GACxF2N,EAAuB3N,QAAvB,uCAAqC8N,GAA4BE,GAA2Bd,EAAQlN,SAjB3F,kBAmBF,CACH2L,IAAKiB,EAAaY,GAClBN,QAASS,IArBJ,4CAAF,kDAAC,GA8BZoB,kBAAkB,WAAD,4BAAE,WAAO/C,GAAP,uCAAAhU,EAAA,6DAAoBkV,EAApB,+BAAmC,GAElD5B,EAAkB,oBAAqB,MAAOU,GACxCqC,EAAe,6BAChB/K,QADgB,WACJ,MADI,KACMgL,mBAAmBC,OAAOvC,KAE/CwB,EAAiB,IAAIC,IAAIY,EAAchD,GAEzCN,IACA2C,EAAc3C,EAAc2C,aAG1BC,EAZS,yBAYkBC,OAAQ,OAAUF,GAAgBR,GAC7DY,EAA0B,GAKhCpC,EAAgB8B,EAJe,GAIyBN,EAAQa,OAC5DC,EAAyBN,GAAeA,EAAY1N,QAAU0N,EAAY1N,QAAU,GACxF2N,EAAuB3N,QAAvB,uCAAqC8N,GAA4BE,GAA2Bd,EAAQlN,SApBrF,kBAsBR,CACH2L,IAAKiB,EAAaY,GAClBN,QAASS,IAxBE,4CAAF,mDAAC,GAiClBtK,SAAS,WAAD,4BAAE,WAAO/X,GAAP,uCAAA0M,EAAA,6DAAmBkV,EAAnB,+BAAkC,GAExC5B,EAAkB,WAAY,KAAMhgB,GAC9B+iB,EAAe,mBAChB/K,QADgB,WACJ,KADI,KACKgL,mBAAmBC,OAAOjjB,KAE9CkiB,EAAiB,IAAIC,IAAIY,EAAchD,GAEzCN,IACA2C,EAAc3C,EAAc2C,aAG1BC,EAZA,yBAY2BC,OAAQ,OAAUF,GAAgBR,GAC7DY,EAA0B,GAKhCpC,EAAgB8B,EAJe,GAIyBN,EAAQa,OAC5DC,EAAyBN,GAAeA,EAAY1N,QAAU0N,EAAY1N,QAAU,GACxF2N,EAAuB3N,QAAvB,uCAAqC8N,GAA4BE,GAA2Bd,EAAQlN,SApB9F,kBAsBC,CACH2L,IAAKiB,EAAaY,GAClBN,QAASS,IAxBP,4CAAF,mDAAC,GAiCTpX,aAAa,WAAD,4BAAE,WAAOjL,GAAP,uCAAA0M,EAAA,6DAAmBkV,EAAnB,+BAAkC,GAE5C5B,EAAkB,eAAgB,KAAMhgB,GAClC+iB,EAAe,6BAChB/K,QADgB,WACJ,KADI,KACKgL,mBAAmBC,OAAOjjB,KAE9CkiB,EAAiB,IAAIC,IAAIY,EAAchD,GAEzCN,IACA2C,EAAc3C,EAAc2C,aAG1BC,EAZI,yBAYuBC,OAAQ,OAAUF,GAAgBR,GAC7DY,EAA0B,GAKhCpC,EAAgB8B,EAJe,GAIyBN,EAAQa,OAC5DC,EAAyBN,GAAeA,EAAY1N,QAAU0N,EAAY1N,QAAU,GACxF2N,EAAuB3N,QAAvB,uCAAqC8N,GAA4BE,GAA2Bd,EAAQlN,SApB1F,kBAsBH,CACH2L,IAAKiB,EAAaY,GAClBN,QAASS,IAxBH,4CAAF,mDAAC,GAiCb7I,qBAAqB,WAAD,4BAAE,WAAOxZ,GAAP,uCAAA0M,EAAA,6DAAmBkV,EAAnB,+BAAkC,GAEpD5B,EAAkB,uBAAwB,KAAMhgB,GAC1C+iB,EAAe,iCAChB/K,QADgB,WACJ,KADI,KACKgL,mBAAmBC,OAAOjjB,KAE9CkiB,EAAiB,IAAIC,IAAIY,EAAchD,GAEzCN,IACA2C,EAAc3C,EAAc2C,aAG1BC,EAZY,yBAYeC,OAAQ,OAAUF,GAAgBR,GAC7DY,EAA0B,GAKhCpC,EAAgB8B,EAJe,GAIyBN,EAAQa,OAC5DC,EAAyBN,GAAeA,EAAY1N,QAAU0N,EAAY1N,QAAU,GACxF2N,EAAuB3N,QAAvB,uCAAqC8N,GAA4BE,GAA2Bd,EAAQlN,SApBlF,kBAsBX,CACH2L,IAAKiB,EAAaY,GAClBN,QAASS,IAxBK,4CAAF,mDAAC,GAiCrBqB,mBAAmB,WAAD,4BAAE,WAAO1jB,GAAP,uCAAA0M,EAAA,6DAAmBkV,EAAnB,+BAAkC,GAElD5B,EAAkB,qBAAsB,KAAMhgB,GACxC+iB,EAAe,+BAChB/K,QADgB,WACJ,KADI,KACKgL,mBAAmBC,OAAOjjB,KAE9CkiB,EAAiB,IAAIC,IAAIY,EAAchD,GAEzCN,IACA2C,EAAc3C,EAAc2C,aAG1BC,EAZU,yBAYiBC,OAAQ,OAAUF,GAAgBR,GAC7DY,EAA0B,GAKhCpC,EAAgB8B,EAJe,GAIyBN,EAAQa,OAC5DC,EAAyBN,GAAeA,EAAY1N,QAAU0N,EAAY1N,QAAU,GACxF2N,EAAuB3N,QAAvB,uCAAqC8N,GAA4BE,GAA2Bd,EAAQlN,SApBpF,kBAsBT,CACH2L,IAAKiB,EAAaY,GAClBN,QAASS,IAxBG,4CAAF,mDAAC,GAiCnBsB,YAAY,WAAD,4BAAE,WAAO3jB,GAAP,uCAAA0M,EAAA,6DAAmBkV,EAAnB,+BAAkC,GAE3C5B,EAAkB,cAAe,KAAMhgB,GACjC+iB,EAAe,4BAChB/K,QADgB,WACJ,KADI,KACKgL,mBAAmBC,OAAOjjB,KAE9CkiB,EAAiB,IAAIC,IAAIY,EAAchD,GAEzCN,IACA2C,EAAc3C,EAAc2C,aAG1BC,EAZG,yBAYwBC,OAAQ,OAAUF,GAAgBR,GAC7DY,EAA0B,GAKhCpC,EAAgB8B,EAJe,GAIyBN,EAAQa,OAC5DC,EAAyBN,GAAeA,EAAY1N,QAAU0N,EAAY1N,QAAU,GACxF2N,EAAuB3N,QAAvB,uCAAqC8N,GAA4BE,GAA2Bd,EAAQlN,SApB3F,kBAsBF,CACH2L,IAAKiB,EAAaY,GAClBN,QAASS,IAxBJ,4CAAF,mDAAC,GAiCZuB,iBAAiB,WAAD,4BAAE,WAAO5jB,GAAP,uCAAA0M,EAAA,6DAAmBkV,EAAnB,+BAAkC,GAEhD5B,EAAkB,mBAAoB,KAAMhgB,GACtC+iB,EAAe,iCAChB/K,QADgB,WACJ,KADI,KACKgL,mBAAmBC,OAAOjjB,KAE9CkiB,EAAiB,IAAIC,IAAIY,EAAchD,GAEzCN,IACA2C,EAAc3C,EAAc2C,aAG1BC,EAZQ,yBAYmBC,OAAQ,OAAUF,GAAgBR,GAC7DY,EAA0B,GAKhCpC,EAAgB8B,EAJe,GAIyBN,EAAQa,OAC5DC,EAAyBN,GAAeA,EAAY1N,QAAU0N,EAAY1N,QAAU,GACxF2N,EAAuB3N,QAAvB,uCAAqC8N,GAA4BE,GAA2Bd,EAAQlN,SApBtF,kBAsBP,CACH2L,IAAKiB,EAAaY,GAClBN,QAASS,IAxBC,4CAAF,mDAAC,GAgCjBwB,YAAY,WAAD,4BAAE,kDAAAnX,EAAA,6DAAOkV,EAAP,+BAAsB,GAGzBM,EAAiB,IAAIC,IAHlB,mBAGoCpC,GAEzCN,IACA2C,EAAc3C,EAAc2C,aAG1BC,EATG,yBASwBC,OAAQ,OAAUF,GAAgBR,GAC7DY,EAA0B,GAKhCpC,EAAgB8B,EAJe,GAIyBN,EAAQa,OAC5DC,EAAyBN,GAAeA,EAAY1N,QAAU0N,EAAY1N,QAAU,GACxF2N,EAAuB3N,QAAvB,uCAAqC8N,GAA4BE,GAA2Bd,EAAQlN,SAjB3F,kBAmBF,CACH2L,IAAKiB,EAAaY,GAClBN,QAASS,IArBJ,4CAAF,kDAAC,GA6BZyB,QAAQ,WAAD,4BAAE,kDAAApX,EAAA,6DAAOkV,EAAP,+BAAsB,GAGrBM,EAAiB,IAAIC,IAHtB,gBAGwCpC,GAEzCN,IACA2C,EAAc3C,EAAc2C,aAG1BC,EATD,yBAS4BC,OAAQ,OAAUF,GAAgBR,GAC7DY,EAA0B,GAKhCpC,EAAgB8B,EAJe,GAIyBN,EAAQa,OAC5DC,EAAyBN,GAAeA,EAAY1N,QAAU0N,EAAY1N,QAAU,GACxF2N,EAAuB3N,QAAvB,uCAAqC8N,GAA4BE,GAA2Bd,EAAQlN,SAjB/F,kBAmBE,CACH2L,IAAKiB,EAAaY,GAClBN,QAASS,IArBR,4CAAF,kDAAC,GA6BR0B,WAAW,WAAD,4BAAE,kDAAArX,EAAA,6DAAOkV,EAAP,+BAAsB,GAGxBM,EAAiB,IAAIC,IAHnB,cAGqCpC,GAEzCN,IACA2C,EAAc3C,EAAc2C,aAG1BC,EATE,yBASyBC,OAAQ,OAAUF,GAAgBR,GAC7DY,EAA0B,GAKhCpC,EAAgB8B,EAJe,GAIyBN,EAAQa,OAC5DC,EAAyBN,GAAeA,EAAY1N,QAAU0N,EAAY1N,QAAU,GACxF2N,EAAuB3N,QAAvB,uCAAqC8N,GAA4BE,GAA2Bd,EAAQlN,SAjB5F,kBAmBD,CACH2L,IAAKiB,EAAaY,GAClBN,QAASS,IArBL,4CAAF,kDAAC,GAiCXvJ,WAAW,WAAD,4BAAE,WAAOxU,EAAiBxC,EAAiBkiB,EAAgBzU,GAAzD,uCAAA7C,EAAA,6DAAqFkV,EAArF,+BAAoG,GAGtGM,EAAiB,IAAIC,IAHnB,cAGqCpC,GAEzCN,IACA2C,EAAc3C,EAAc2C,aAG1BC,EATE,yBASyBC,OAAQ,OAAUF,GAAgBR,GAC7DY,EAA0B,GAC1BD,EAAyB,QAEhB5a,IAAXrD,IACAie,EAAsB,OAAaje,QAGxBqD,IAAX7F,IACAygB,EAAsB,OAAazgB,QAGzB6F,IAAVqc,IACAzB,EAAsB,MAAYyB,QAGpBrc,IAAd4H,IACAgT,EAAsB,UAAgBhT,GAK1C6Q,EAAgB8B,EAAgBK,EAAwBX,EAAQa,OAC5DC,EAAyBN,GAAeA,EAAY1N,QAAU0N,EAAY1N,QAAU,GACxF2N,EAAuB3N,QAAvB,uCAAqC8N,GAA4BE,GAA2Bd,EAAQlN,SAjC5F,kBAmCD,CACH2L,IAAKiB,EAAaY,GAClBN,QAASS,IArCL,4CAAF,yDAAC,GA8CX4B,MAAM,WAAD,4BAAE,WAAOC,GAAP,uCAAAxX,EAAA,6DAAgCkV,EAAhC,+BAA+C,GAG5CM,EAAiB,IAAIC,IAHxB,kBAG0CpC,GAEzCN,IACA2C,EAAc3C,EAAc2C,aAG1BC,EATH,yBAS8BC,OAAQ,QAAWF,GAAgBR,GAE9DW,EAAyB,IADzBC,EAA0B,IAKR,gBAAkB,mBAE1CpC,EAAgB8B,EAAgBK,EAAwBX,EAAQa,OAC5DC,EAAyBN,GAAeA,EAAY1N,QAAU0N,EAAY1N,QAAU,GACxF2N,EAAuB3N,QAAvB,uCAAqC8N,GAA4BE,GAA2Bd,EAAQlN,SACpG2N,EAAuB/Z,KAAO2Y,EAAsBiD,EAAY7B,EAAwB5C,GApBrF,kBAsBI,CACHY,IAAKiB,EAAaY,GAClBN,QAASS,IAxBV,4CAAF,mDAAC,GAiCN8B,QAAQ,WAAD,4BAAE,WAAOC,GAAP,uCAAA1X,EAAA,6DAA8CkV,EAA9C,+BAA6D,GAG5DM,EAAiB,IAAIC,IAHtB,oBAGwCpC,GAEzCN,IACA2C,EAAc3C,EAAc2C,aAG1BC,EATD,yBAS4BC,OAAQ,QAAWF,GAAgBR,GAE9DW,EAAyB,IADzBC,EAA0B,IAKR,gBAAkB,mBAE1CpC,EAAgB8B,EAAgBK,EAAwBX,EAAQa,OAC5DC,EAAyBN,GAAeA,EAAY1N,QAAU0N,EAAY1N,QAAU,GACxF2N,EAAuB3N,QAAvB,uCAAqC8N,GAA4BE,GAA2Bd,EAAQlN,SACpG2N,EAAuB/Z,KAAO2Y,EAAsBmD,EAAmB/B,EAAwB5C,GApB1F,kBAsBE,CACHY,IAAKiB,EAAaY,GAClBN,QAASS,IAxBR,4CAAF,mDAAC,GAiCRzG,YAAY,WAAD,4BAAE,WAAOyI,GAAP,uCAAA3X,EAAA,6DAAgDkV,EAAhD,+BAA+D,GAGlEM,EAAiB,IAAIC,IAHlB,aAGoCpC,GAEzCN,IACA2C,EAAc3C,EAAc2C,aAG1BC,EATG,yBASwBC,OAAQ,OAAUF,GAAgBR,GAE7DW,EAAyB,IADzBC,EAA0B,IAKR,gBAAkB,mBAE1CpC,EAAgB8B,EAAgBK,EAAwBX,EAAQa,OAC5DC,EAAyBN,GAAeA,EAAY1N,QAAU0N,EAAY1N,QAAU,GACxF2N,EAAuB3N,QAAvB,uCAAqC8N,GAA4BE,GAA2Bd,EAAQlN,SACpG2N,EAAuB/Z,KAAO2Y,EAAsBoD,EAAoBhC,EAAwB5C,GApBvF,kBAsBF,CACHY,IAAKiB,EAAaY,GAClBN,QAASS,IAxBJ,4CAAF,mDAAC,GAkCZiC,qBAAqB,WAAD,4BAAE,WAAO5D,EAAa6D,GAApB,yCAAA7X,EAAA,6DAA+EkV,EAA/E,+BAA8F,GAEhH5B,EAAkB,uBAAwB,MAAOU,GAC3CqC,EAAe,6BAChB/K,QADgB,WACJ,MADI,KACMgL,mBAAmBC,OAAOvC,KAE/CwB,EAAiB,IAAIC,IAAIY,EAAchD,GAEzCN,IACA2C,EAAc3C,EAAc2C,aAG1BC,EAZY,yBAYeC,OAAQ,OAAUF,GAAgBR,GAE7DW,EAAyB,IADzBC,EAA0B,IAKR,gBAAkB,mBAE1CpC,EAAgB8B,EAAgBK,EAAwBX,EAAQa,OAC5DC,EAAyBN,GAAeA,EAAY1N,QAAU0N,EAAY1N,QAAU,GACxF2N,EAAuB3N,QAAvB,uCAAqC8N,GAA4BE,GAA2Bd,EAAQlN,SACpG2N,EAAuB/Z,KAAO2Y,EAAsBsD,EAA6BlC,EAAwB5C,GAvBvF,kBAyBX,CACHY,IAAKiB,EAAaY,GAClBN,QAASS,IA3BK,4CAAF,qDAAC,GAqCrBmC,YAAY,WAAD,4BAAE,WAAOxkB,EAAYykB,GAAnB,yCAAA/X,EAAA,6DAAwDkV,EAAxD,+BAAuE,GAEhF5B,EAAkB,cAAe,KAAMhgB,GACjC+iB,EAAe,mBAChB/K,QADgB,WACJ,KADI,KACKgL,mBAAmBC,OAAOjjB,KAE9CkiB,EAAiB,IAAIC,IAAIY,EAAchD,GAEzCN,IACA2C,EAAc3C,EAAc2C,aAG1BC,EAZG,yBAYwBC,OAAQ,SAAYF,GAAgBR,GAE/DW,EAAyB,IADzBC,EAA0B,IAKR,gBAAkB,mBAE1CpC,EAAgB8B,EAAgBK,EAAwBX,EAAQa,OAC5DC,EAAyBN,GAAeA,EAAY1N,QAAU0N,EAAY1N,QAAU,GACxF2N,EAAuB3N,QAAvB,uCAAqC8N,GAA4BE,GAA2Bd,EAAQlN,SACpG2N,EAAuB/Z,KAAO2Y,EAAsBwD,EAAkBpC,EAAwB5C,GAvBrF,kBAyBF,CACHY,IAAKiB,EAAaY,GAClBN,QAASS,IA3BJ,4CAAF,qDAAC,GAoCZqC,iBAAiB,WAAD,4BAAE,WAAOC,GAAP,uCAAAjY,EAAA,6DAA0DkV,EAA1D,+BAAyE,GAGjFM,EAAiB,IAAIC,IAHb,oBAG+BpC,GAEzCN,IACA2C,EAAc3C,EAAc2C,aAG1BC,EATQ,yBASmBC,OAAQ,QAAWF,GAAgBR,GAE9DW,EAAyB,IADzBC,EAA0B,IAKR,gBAAkB,mBAE1CpC,EAAgB8B,EAAgBK,EAAwBX,EAAQa,OAC5DC,EAAyBN,GAAeA,EAAY1N,QAAU0N,EAAY1N,QAAU,GACxF2N,EAAuB3N,QAAvB,uCAAqC8N,GAA4BE,GAA2Bd,EAAQlN,SACpG2N,EAAuB/Z,KAAO2Y,EAAsB0D,EAAyBtC,EAAwB5C,GApBvF,kBAsBP,CACHY,IAAKiB,EAAaY,GAClBN,QAASS,IAxBC,4CAAF,mDAAC,GAkCjBuC,gBAAgB,WAAD,4BAAE,WAAO5kB,EAAY6kB,GAAnB,yCAAAnY,EAAA,6DAA+BkV,EAA/B,+BAA8C,GAE3D5B,EAAkB,kBAAmB,KAAMhgB,GACrC+iB,EAAe,6BAChB/K,QADgB,WACJ,KADI,KACKgL,mBAAmBC,OAAOjjB,KAE9CkiB,EAAiB,IAAIC,IAAIY,EAAchD,GAEzCN,IACA2C,EAAc3C,EAAc2C,aAG1BC,EAZO,yBAYoBC,OAAQ,OAAUF,GAAgBR,GAE7DW,EAAyB,IADzBC,EAA0B,IAKR,gBAAkB,YAE1CpC,EAAgB8B,EAAgBK,EAAwBX,EAAQa,OAC5DC,EAAyBN,GAAeA,EAAY1N,QAAU0N,EAAY1N,QAAU,GACxF2N,EAAuB3N,QAAvB,uCAAqC8N,GAA4BE,GAA2Bd,EAAQlN,SACpG2N,EAAuB/Z,KAAO2Y,EAAsB4D,EAAMxC,EAAwB5C,GAvBrE,kBAyBN,CACHY,IAAKiB,EAAaY,GAClBN,QAASS,IA3BA,4CAAF,qDAAC,GAqChByC,oBAAoB,WAAD,4BAAE,WAAO9kB,EAAY6kB,GAAnB,yCAAAnY,EAAA,6DAA+BkV,EAA/B,+BAA8C,GAE/D5B,EAAkB,sBAAuB,KAAMhgB,GACzC+iB,EAAe,iCAChB/K,QADgB,WACJ,KADI,KACKgL,mBAAmBC,OAAOjjB,KAE9CkiB,EAAiB,IAAIC,IAAIY,EAAchD,GAEzCN,IACA2C,EAAc3C,EAAc2C,aAG1BC,EAZW,yBAYgBC,OAAQ,OAAUF,GAAgBR,GAE7DW,EAAyB,IADzBC,EAA0B,IAKR,gBAAkB,YAE1CpC,EAAgB8B,EAAgBK,EAAwBX,EAAQa,OAC5DC,EAAyBN,GAAeA,EAAY1N,QAAU0N,EAAY1N,QAAU,GACxF2N,EAAuB3N,QAAvB,uCAAqC8N,GAA4BE,GAA2Bd,EAAQlN,SACpG2N,EAAuB/Z,KAAO2Y,EAAsB4D,EAAMxC,EAAwB5C,GAvBjE,kBAyBV,CACHY,IAAKiB,EAAaY,GAClBN,QAASS,IA3BI,4CAAF,qDAAC,GAoCpB0C,OAAO,WAAD,4BAAE,WAAOC,GAAP,uCAAAtY,EAAA,6DAA4CkV,EAA5C,+BAA2D,GAGzDM,EAAiB,IAAIC,IAHvB,mBAGyCpC,GAEzCN,IACA2C,EAAc3C,EAAc2C,aAG1BC,EATF,yBAS6BC,OAAQ,QAAWF,GAAgBR,GAE9DW,EAAyB,IADzBC,EAA0B,IAKR,gBAAkB,mBAE1CpC,EAAgB8B,EAAgBK,EAAwBX,EAAQa,OAC5DC,EAAyBN,GAAeA,EAAY1N,QAAU0N,EAAY1N,QAAU,GACxF2N,EAAuB3N,QAAvB,uCAAqC8N,GAA4BE,GAA2Bd,EAAQlN,SACpG2N,EAAuB/Z,KAAO2Y,EAAsB+D,EAAkB3C,EAAwB5C,GApB1F,kBAsBG,CACHY,IAAKiB,EAAaY,GAClBN,QAASS,IAxBT,4CAAF,mDAAC,IAmCuB4C,CAA4BxF,GAC9D,MAAO,CAOGuC,WAPH,SAOcC,EAAmCL,GAA2F,OAAD,0HAC1GG,EAA0BC,WAAWC,EAAiBL,GADoD,cACpIsD,EADoI,yBAEnIzD,EAAsByD,EAAmBvF,IAAaJ,EAAWE,IAFkE,8CAUxI9Q,eAjBH,SAiBkBgU,EAA2Cf,GAAgG,OAAD,0HAC3HG,EAA0BpT,eAAegU,EAAqBf,GAD6D,cACrJsD,EADqJ,yBAEpJzD,EAAsByD,EAAmBvF,IAAaJ,EAAWE,IAFmF,8CAUzJnS,YA3BH,SA2BesV,EAAqChB,GAAgG,OAAD,0HAClHG,EAA0BzU,YAAYsV,EAAkBhB,GAD0D,cAC5IsD,EAD4I,yBAE3IzD,EAAsByD,EAAmBvF,IAAaJ,EAAWE,IAF0E,8CAShJoD,iBApCH,SAoCoBjB,GAAiG,OAAD,0HACnFG,EAA0Bc,iBAAiBjB,GADwC,cAC7GsD,EAD6G,yBAE5GzD,EAAsByD,EAAmBvF,IAAaJ,EAAWE,IAF2C,8CASjHqD,eA7CH,SA6CkBlB,GAAqG,OAAD,0HACrFG,EAA0Be,eAAelB,GAD4C,cAC/GsD,EAD+G,yBAE9GzD,EAAsByD,EAAmBvF,IAAaJ,EAAWE,IAF6C,8CAUnHlG,YAvDH,SAuDevZ,EAAY4hB,GAA2F,OAAD,0HACpFG,EAA0BxI,YAAYvZ,EAAI4hB,GAD0C,cAC9GsD,EAD8G,yBAE7GzD,EAAsByD,EAAmBvF,IAAaJ,EAAWE,IAF4C,8CAWlHyD,aAlEH,SAkEgBC,EAAgBC,EAAiCxB,GAA4F,OAAD,0HAC3HG,EAA0BmB,aAAaC,EAAQC,EAAgBxB,GAD4D,cACrJsD,EADqJ,yBAEpJzD,EAAsByD,EAAmBvF,IAAaJ,EAAWE,IAFmF,8CAUzJ4D,aA5EH,SA4EgBA,EAA6BzB,GAAkG,OAAD,0HAC7GG,EAA0BsB,aAAaA,EAAczB,GADwD,cACvIsD,EADuI,yBAEtIzD,EAAsByD,EAAmBvF,IAAaJ,EAAWE,IAFqE,8CAS3I6D,aArFH,SAqFgB1B,GAAgG,OAAD,0HAC9EG,EAA0BuB,aAAa1B,GADuC,cACxGsD,EADwG,yBAEvGzD,EAAsByD,EAAmBvF,IAAaJ,EAAWE,IAFsC,8CAS5GzG,SA9FH,SA8FY4I,GAA4F,OAAD,0HACtEG,EAA0B/I,SAAS4I,GADmC,cAChGsD,EADgG,yBAE/FzD,EAAsByD,EAAmBvF,IAAaJ,EAAWE,IAF8B,8CAUpG8D,gBAxGH,SAwGmBJ,EAAgBvB,GAA4F,OAAD,0HAC7FG,EAA0BwB,gBAAgBJ,EAAQvB,GAD2C,cACvHsD,EADuH,yBAEtHzD,EAAsByD,EAAmBvF,IAAaJ,EAAWE,IAFqD,8CAS3H+D,YAjHH,SAiHe5B,GAAkG,OAAD,0HAC/EG,EAA0ByB,YAAY5B,GADyC,cACzGsD,EADyG,yBAExGzD,EAAsByD,EAAmBvF,IAAaJ,EAAWE,IAFuC,8CAU7GgE,kBA3HH,SA2HqB/C,EAAakB,GAAqG,OAAD,0HACrGG,EAA0B0B,kBAAkB/C,EAAKkB,GADoD,cAC/HsD,EAD+H,yBAE9HzD,EAAsByD,EAAmBvF,IAAaJ,EAAWE,IAF6D,8CAUnI1H,SArIH,SAqIY/X,EAAY4hB,GAA4F,OAAD,0HAClFG,EAA0BhK,SAAS/X,EAAI4hB,GAD2C,cAC5GsD,EAD4G,yBAE3GzD,EAAsByD,EAAmBvF,IAAaJ,EAAWE,IAF0C,8CAUhHxU,aA/IH,SA+IgBjL,EAAY4hB,GAA0F,OAAD,0HACpFG,EAA0B9W,aAAajL,EAAI4hB,GADyC,cAC9GsD,EAD8G,yBAE7GzD,EAAsByD,EAAmBvF,IAAaJ,EAAWE,IAF4C,8CAUlHjG,qBAzJH,SAyJwBxZ,EAAY4hB,GAAgG,OAAD,0HAClGG,EAA0BvI,qBAAqBxZ,EAAI4hB,GAD+C,cAC5HsD,EAD4H,yBAE3HzD,EAAsByD,EAAmBvF,IAAaJ,EAAWE,IAF0D,8CAUhIiE,mBAnKH,SAmKsB1jB,EAAY4hB,GAAgG,OAAD,0HAChGG,EAA0B2B,mBAAmB1jB,EAAI4hB,GAD+C,cAC1HsD,EAD0H,yBAEzHzD,EAAsByD,EAAmBvF,IAAaJ,EAAWE,IAFwD,8CAU9HkE,YA7KH,SA6Ke3jB,EAAY4hB,GAA0F,OAAD,0HACnFG,EAA0B4B,YAAY3jB,EAAI4hB,GADyC,cAC7GsD,EAD6G,yBAE5GzD,EAAsByD,EAAmBvF,IAAaJ,EAAWE,IAF2C,8CAUjHmE,iBAvLH,SAuLoB5jB,EAAY4hB,GAA0F,OAAD,0HACxFG,EAA0B6B,iBAAiB5jB,EAAI4hB,GADyC,cAClHsD,EADkH,yBAEjHzD,EAAsByD,EAAmBvF,IAAaJ,EAAWE,IAFgD,8CAStHoE,YAhMH,SAgMejC,GAAkG,OAAD,0HAC/EG,EAA0B8B,YAAYjC,GADyC,cACzGsD,EADyG,yBAExGzD,EAAsByD,EAAmBvF,IAAaJ,EAAWE,IAFuC,8CAS7GqE,QAzMH,SAyMWlC,GAAsG,OAAD,0HAC/EG,EAA0B+B,QAAQlC,GAD6C,cACzGsD,EADyG,yBAExGzD,EAAsByD,EAAmBvF,IAAaJ,EAAWE,IAFuC,8CAS7GsE,WAlNH,SAkNcnC,GAAgG,OAAD,0HAC5EG,EAA0BgC,WAAWnC,GADuC,cACtGsD,EADsG,yBAErGzD,EAAsByD,EAAmBvF,IAAaJ,EAAWE,IAFoC,8CAa1G3G,WA/NH,SA+NcxU,EAAiBxC,EAAiBkiB,EAAgBzU,EAA4BqS,GAAgG,OAAD,0HAC1JG,EAA0BjJ,WAAWxU,EAAQxC,EAAQkiB,EAAOzU,EAAWqS,GADmF,cACpLsD,EADoL,yBAEnLzD,EAAsByD,EAAmBvF,IAAaJ,EAAWE,IAFkH,8CAUxLwE,MAzOH,SAyOSC,EAAyBtC,GAA2F,OAAD,0HAC3FG,EAA0BkC,MAAMC,EAAYtC,GAD+C,cACrHsD,EADqH,yBAEpHzD,EAAsByD,EAAmBvF,IAAaJ,EAAWE,IAFmD,8CAUzH0E,QAnPH,SAmPWC,EAAuCxC,GAAkG,OAAD,0HAClHG,EAA0BoC,QAAQC,EAAmBxC,GAD6D,cAC5IsD,EAD4I,yBAE3IzD,EAAsByD,EAAmBvF,IAAaJ,EAAWE,IAF0E,8CAUhJ7D,YA7PH,SA6PeyI,EAAyCzC,GAA0G,OAAD,0HAChIG,EAA0BnG,YAAYyI,EAAoBzC,GADsE,cAC1JsD,EAD0J,yBAEzJzD,EAAsByD,EAAmBvF,IAAaJ,EAAWE,IAFwF,8CAW9J6E,qBAxQH,SAwQwB5D,EAAa6D,EAA2D3C,GAAqG,OAAD,0HACnKG,EAA0BuC,qBAAqB5D,EAAK6D,EAA6B3C,GADkF,cAC7LsD,EAD6L,yBAE5LzD,EAAsByD,EAAmBvF,IAAaJ,EAAWE,IAF2H,8CAWjM+E,YAnRH,SAmRexkB,EAAYykB,EAAqC7C,GAA4F,OAAD,0HAC1HG,EAA0ByC,YAAYxkB,EAAIykB,EAAkB7C,GAD8D,cACpJsD,EADoJ,yBAEnJzD,EAAsByD,EAAmBvF,IAAaJ,EAAWE,IAFkF,8CAUxJiF,iBA7RH,SA6RoBC,EAAmD/C,GAA2F,OAAD,0HAChIG,EAA0B2C,iBAAiBC,EAAyB/C,GAD4D,cAC1JsD,EAD0J,yBAEzJzD,EAAsByD,EAAmBvF,IAAaJ,EAAWE,IAFwF,8CAW9JmF,gBAxSH,SAwSmB5kB,EAAY6kB,EAAYjD,GAA2F,OAAD,0HACpGG,EAA0B6C,gBAAgB5kB,EAAI6kB,EAAMjD,GADgD,cAC9HsD,EAD8H,yBAE7HzD,EAAsByD,EAAmBvF,IAAaJ,EAAWE,IAF4D,8CAWlIqF,oBAnTH,SAmTuB9kB,EAAY6kB,EAAYjD,GAA2F,OAAD,0HACxGG,EAA0B+C,oBAAoB9kB,EAAI6kB,EAAMjD,GADgD,cAClIsD,EADkI,yBAEjIzD,EAAsByD,EAAmBvF,IAAaJ,EAAWE,IAFgE,8CAUtIsF,OA7TH,SA6TUC,EAAqCpD,GAAkG,OAAD,0HAC/GG,EAA0BgD,OAAOC,EAAkBpD,GAD4D,cACzIsD,EADyI,yBAExIzD,EAAsByD,EAAmBvF,IAAaJ,EAAWE,IAFuE,gDAuT9I0F,EAAb,gKAQI,SAAkBlD,EAAmCL,GAAgB,IAAD,OAChE,OAAOE,EAAa1a,KAAKqY,eAAeuC,WAAWC,EAAiBL,GAASzW,MAAK,SAAC0W,GAAD,OAAaA,EAAQ,EAAKtN,MAAO,EAAKmL,eAThI,4BAmBI,SAAsBiD,EAA2Cf,GAAgB,IAAD,OAC5E,OAAOE,EAAa1a,KAAKqY,eAAe9Q,eAAegU,EAAqBf,GAASzW,MAAK,SAAC0W,GAAD,OAAaA,EAAQ,EAAKtN,MAAO,EAAKmL,eApBxI,yBA8BI,SAAmBkD,EAAqChB,GAAgB,IAAD,OACnE,OAAOE,EAAa1a,KAAKqY,eAAenS,YAAYsV,EAAkBhB,GAASzW,MAAK,SAAC0W,GAAD,OAAaA,EAAQ,EAAKtN,MAAO,EAAKmL,eA/BlI,8BAwCI,SAAwBkC,GAAgB,IAAD,OACnC,OAAOE,EAAa1a,KAAKqY,eAAeoD,iBAAiBjB,GAASzW,MAAK,SAAC0W,GAAD,OAAaA,EAAQ,EAAKtN,MAAO,EAAKmL,eAzCrH,4BAkDI,SAAsBkC,GAAgB,IAAD,OACjC,OAAOE,EAAa1a,KAAKqY,eAAeqD,eAAelB,GAASzW,MAAK,SAAC0W,GAAD,OAAaA,EAAQ,EAAKtN,MAAO,EAAKmL,eAnDnH,yBA6DI,SAAmB1f,EAAY4hB,GAAgB,IAAD,OAC1C,OAAOE,EAAa1a,KAAKqY,eAAelG,YAAYvZ,EAAI4hB,GAASzW,MAAK,SAAC0W,GAAD,OAAaA,EAAQ,EAAKtN,MAAO,EAAKmL,eA9DpH,0BAyEI,SAAoByD,EAAgBC,EAAiCxB,GAAgB,IAAD,OAChF,OAAOE,EAAa1a,KAAKqY,eAAeyD,aAAaC,EAAQC,EAAgBxB,GAASzW,MAAK,SAAC0W,GAAD,OAAaA,EAAQ,EAAKtN,MAAO,EAAKmL,eA1EzI,0BAoFI,SAAoB2D,EAA6BzB,GAAgB,IAAD,OAC5D,OAAOE,EAAa1a,KAAKqY,eAAe4D,aAAaA,EAAczB,GAASzW,MAAK,SAAC0W,GAAD,OAAaA,EAAQ,EAAKtN,MAAO,EAAKmL,eArF/H,0BA8FI,SAAoBkC,GAAgB,IAAD,OAC/B,OAAOE,EAAa1a,KAAKqY,eAAe6D,aAAa1B,GAASzW,MAAK,SAAC0W,GAAD,OAAaA,EAAQ,EAAKtN,MAAO,EAAKmL,eA/FjH,sBAwGI,SAAgBkC,GAAgB,IAAD,OAC3B,OAAOE,EAAa1a,KAAKqY,eAAezG,SAAS4I,GAASzW,MAAK,SAAC0W,GAAD,OAAaA,EAAQ,EAAKtN,MAAO,EAAKmL,eAzG7G,6BAmHI,SAAuByD,EAAgBvB,GAAgB,IAAD,OAClD,OAAOE,EAAa1a,KAAKqY,eAAe8D,gBAAgBJ,EAAQvB,GAASzW,MAAK,SAAC0W,GAAD,OAAaA,EAAQ,EAAKtN,MAAO,EAAKmL,eApH5H,yBA6HI,SAAmBkC,GAAgB,IAAD,OAC9B,OAAOE,EAAa1a,KAAKqY,eAAe+D,YAAY5B,GAASzW,MAAK,SAAC0W,GAAD,OAAaA,EAAQ,EAAKtN,MAAO,EAAKmL,eA9HhH,+BAwII,SAAyBgB,EAAakB,GAAgB,IAAD,OACjD,OAAOE,EAAa1a,KAAKqY,eAAegE,kBAAkB/C,EAAKkB,GAASzW,MAAK,SAAC0W,GAAD,OAAaA,EAAQ,EAAKtN,MAAO,EAAKmL,eAzI3H,sBAmJI,SAAgB1f,EAAY4hB,GAAgB,IAAD,OACvC,OAAOE,EAAa1a,KAAKqY,eAAe1H,SAAS/X,EAAI4hB,GAASzW,MAAK,SAAC0W,GAAD,OAAaA,EAAQ,EAAKtN,MAAO,EAAKmL,eApJjH,0BA8JI,SAAoB1f,EAAY4hB,GAAgB,IAAD,OAC3C,OAAOE,EAAa1a,KAAKqY,eAAexU,aAAajL,EAAI4hB,GAASzW,MAAK,SAAC0W,GAAD,OAAaA,EAAQ,EAAKtN,MAAO,EAAKmL,eA/JrH,kCAyKI,SAA4B1f,EAAY4hB,GAAgB,IAAD,OACnD,OAAOE,EAAa1a,KAAKqY,eAAejG,qBAAqBxZ,EAAI4hB,GAASzW,MAAK,SAAC0W,GAAD,OAAaA,EAAQ,EAAKtN,MAAO,EAAKmL,eA1K7H,gCAoLI,SAA0B1f,EAAY4hB,GAAgB,IAAD,OACjD,OAAOE,EAAa1a,KAAKqY,eAAeiE,mBAAmB1jB,EAAI4hB,GAASzW,MAAK,SAAC0W,GAAD,OAAaA,EAAQ,EAAKtN,MAAO,EAAKmL,eArL3H,yBA+LI,SAAmB1f,EAAY4hB,GAAgB,IAAD,OAC1C,OAAOE,EAAa1a,KAAKqY,eAAekE,YAAY3jB,EAAI4hB,GAASzW,MAAK,SAAC0W,GAAD,OAAaA,EAAQ,EAAKtN,MAAO,EAAKmL,eAhMpH,8BA0MI,SAAwB1f,EAAY4hB,GAAgB,IAAD,OAC/C,OAAOE,EAAa1a,KAAKqY,eAAemE,iBAAiB5jB,EAAI4hB,GAASzW,MAAK,SAAC0W,GAAD,OAAaA,EAAQ,EAAKtN,MAAO,EAAKmL,eA3MzH,yBAoNI,SAAmBkC,GAAgB,IAAD,OAC9B,OAAOE,EAAa1a,KAAKqY,eAAeoE,YAAYjC,GAASzW,MAAK,SAAC0W,GAAD,OAAaA,EAAQ,EAAKtN,MAAO,EAAKmL,eArNhH,qBA8NI,SAAekC,GAAgB,IAAD,OAC1B,OAAOE,EAAa1a,KAAKqY,eAAeqE,QAAQlC,GAASzW,MAAK,SAAC0W,GAAD,OAAaA,EAAQ,EAAKtN,MAAO,EAAKmL,eA/N5G,wBAwOI,SAAkBkC,GAAgB,IAAD,OAC7B,OAAOE,EAAa1a,KAAKqY,eAAesE,WAAWnC,GAASzW,MAAK,SAAC0W,GAAD,OAAaA,EAAQ,EAAKtN,MAAO,EAAKmL,eAzO/G,wBAsPI,SAAkBpb,EAAiBxC,EAAiBkiB,EAAgBzU,EAA4BqS,GAAgB,IAAD,OAC3G,OAAOE,EAAa1a,KAAKqY,eAAe3G,WAAWxU,EAAQxC,EAAQkiB,EAAOzU,EAAWqS,GAASzW,MAAK,SAAC0W,GAAD,OAAaA,EAAQ,EAAKtN,MAAO,EAAKmL,eAvPjJ,mBAiQI,SAAawE,EAAyBtC,GAAgB,IAAD,OACjD,OAAOE,EAAa1a,KAAKqY,eAAewE,MAAMC,EAAYtC,GAASzW,MAAK,SAAC0W,GAAD,OAAaA,EAAQ,EAAKtN,MAAO,EAAKmL,eAlQtH,qBA4QI,SAAe0E,EAAuCxC,GAAgB,IAAD,OACjE,OAAOE,EAAa1a,KAAKqY,eAAe0E,QAAQC,EAAmBxC,GAASzW,MAAK,SAAC0W,GAAD,OAAaA,EAAQ,EAAKtN,MAAO,EAAKmL,eA7Q/H,yBAuRI,SAAmB2E,EAAyCzC,GAAgB,IAAD,OACvE,OAAOE,EAAa1a,KAAKqY,eAAe7D,YAAYyI,EAAoBzC,GAASzW,MAAK,SAAC0W,GAAD,OAAaA,EAAQ,EAAKtN,MAAO,EAAKmL,eAxRpI,kCAmSI,SAA4BgB,EAAa6D,EAA2D3C,GAAgB,IAAD,OAC/G,OAAOE,EAAa1a,KAAKqY,eAAe6E,qBAAqB5D,EAAK6D,EAA6B3C,GAASzW,MAAK,SAAC0W,GAAD,OAAaA,EAAQ,EAAKtN,MAAO,EAAKmL,eApS3J,yBA+SI,SAAmB1f,EAAYykB,EAAqC7C,GAAgB,IAAD,OAC/E,OAAOE,EAAa1a,KAAKqY,eAAe+E,YAAYxkB,EAAIykB,EAAkB7C,GAASzW,MAAK,SAAC0W,GAAD,OAAaA,EAAQ,EAAKtN,MAAO,EAAKmL,eAhTtI,8BA0TI,SAAwBiF,EAAmD/C,GAAgB,IAAD,OACtF,OAAOE,EAAa1a,KAAKqY,eAAeiF,iBAAiBC,EAAyB/C,GAASzW,MAAK,SAAC0W,GAAD,OAAaA,EAAQ,EAAKtN,MAAO,EAAKmL,eA3T9I,6BAsUI,SAAuB1f,EAAY6kB,EAAYjD,GAAgB,IAAD,OAC1D,OAAOE,EAAa1a,KAAKqY,eAAemF,gBAAgB5kB,EAAI6kB,EAAMjD,GAASzW,MAAK,SAAC0W,GAAD,OAAaA,EAAQ,EAAKtN,MAAO,EAAKmL,eAvU9H,iCAkVI,SAA2B1f,EAAY6kB,EAAYjD,GAAgB,IAAD,OAC9D,OAAOE,EAAa1a,KAAKqY,eAAeqF,oBAAoB9kB,EAAI6kB,EAAMjD,GAASzW,MAAK,SAAC0W,GAAD,OAAaA,EAAQ,EAAKtN,MAAO,EAAKmL,eAnVlI,oBA6VI,SAAcsF,EAAqCpD,GAAgB,IAAD,OAC9D,OAAOE,EAAa1a,KAAKqY,eAAesF,OAAOC,EAAkBpD,GAASzW,MAAK,SAAC0W,GAAD,OAAaA,EAAQ,EAAKtN,MAAO,EAAKmL,iBA9V7H,GAAgCF,I,gCG1vFhC,0KAAO,IAAM4F,EAAuB,EAEvBC,EAA8B,CACvC,CACIC,YAAa,MACbhiB,MAAO,KACPC,OAAQ,IACRvD,GAAI,GAER,CACIslB,YAAa,MACbhiB,MAAO,IACPC,OAAQ,IACRvD,GAAI,GAER,CACIslB,YAAa,MACbhiB,MAAO,IACPC,OAAQ,IACRvD,GAAI,GAER,CACIslB,YAAa,MACbhiB,MAAO,IACPC,OAAQ,IACRvD,GAAI,GAER,CACIslB,YAAa,MACbhiB,MAAO,IACPC,OAAQ,IACRvD,GAAI,GAER,CACIslB,YAAa,MACbhiB,MAAO,IACPC,OAAQ,IACRvD,GAAI,GAER,CACIslB,YAAa,MACbhiB,MAAO,IACPC,OAAQ,IACRvD,GAAI,GAER,CACIslB,YAAa,MACbhiB,MAAO,IACPC,OAAQ,IACRvD,GAAI,GAER,CACIslB,YAAa,MACbhiB,MAAO,IACPC,OAAQ,IACRvD,GAAI,GAER,CACIslB,YAAa,MACbhiB,MAAO,IACPC,OAAQ,IACRvD,GAAI,GAER,CACIslB,YAAa,MACbhiB,MAAO,IACPC,OAAQ,KACRvD,GAAI,KAIL,SAASgU,EAAsB1Q,EAAeC,GACjD,IAAMgiB,EAAcjiB,EAAQC,EAEtBiiB,EAAK,UAAOH,GAUlB,OATAG,EAAMpW,MAAK,SAAC1C,EAAG2C,GACX,IAAMoW,EAAS/Y,EAAEpJ,MAAQoJ,EAAEnJ,OACrBmiB,EAASrW,EAAE/L,MAAQ+L,EAAE9L,OAC3B,OACIoF,KAAKgd,IAAIF,EAASF,GAClB5c,KAAKgd,IAAID,EAASH,MAGRC,EAAM,GAIrB,SAASI,EAAYlZ,EAAgBpJ,EAAeC,GAGvD,OAFcmJ,EAAEpJ,MAAQoJ,EAAEnJ,OACZD,EAAQC,EAInB,SAASsiB,EAAQN,GACpB,MAAO,CACHD,YAAaC,EAAYD,YACzBhiB,MAA2B,EAApBiiB,EAAYjiB,MACnBC,OAA6B,EAArBgiB,EAAYhiB,OACpBvD,GAAIulB,EAAYvlB,M,kYC1DXsU,EAAkBC,IAAMC,gBAC9BF,EAAgBG,SAASC,QAAQC,OAAjC,cAEA,IAAMmR,EAA+B,SAAC,GAItC,IAHHpb,EAGE,EAHFA,IACA+B,EAEE,EAFFA,UACAqI,EACE,EADFA,YACE,EACwDvU,oBAAS,GADjE,mBACKwlB,EADL,KAC4BC,EAD5B,KAEIC,EAA2B,CAC7B,CACInG,KAAM,UACNoG,UAAW,qBACXC,YAAa,SAACC,GAAD,OAAiB,IAAIpT,IAAYoT,IAC9CrZ,YAAa,GACbsZ,eAAgB,SAACC,EAAShhB,GAEtB,OADAghB,EAAEC,wBAAwBP,GAEtB,cAAC,IAAD,CACInW,KAAMyW,EACNhhB,SAAUA,EACVoF,IAAKA,EACL+B,UAAWA,EACXpN,MAAOA,MAKvB,CACIygB,KAAM,UACNoG,UAAW,eACXC,YAAa,SAACC,GAAD,OAAiB,IAAI/gB,IAAY+gB,IAC9CrZ,YAAa,CACTrH,kBAAmB,KAEvB2gB,eAAgB,SAACC,EAAShhB,GAEtB,OADAghB,EAAEC,wBAAwBP,GAEtB,cAAC,IAAD,CACInW,KAAMyW,EACNhhB,SAAUA,EACVoF,IAAKA,EACL+B,UAAWA,EACXpN,MAAOA,MAKvB,CACIygB,KAAM,SACNoG,UAAW,oBACXC,YAAa,SAACC,GAAD,OAAiB,IAAItI,IAAWsI,IAC7CrZ,YAAa,GACbsZ,eAAgB,SAACC,EAAShhB,GACtB,OACI,cAAC,IAAD,CACIuK,KAAMyW,EACNhhB,SAAUA,MAK1B,CACIwa,KAAM,SAENoG,UAAW,sBACXC,YAAa,SAACC,GAAD,OAAiB,IAAIjU,IAAWiU,IAC7CrZ,YAAa,GACbsZ,eAAgB,SAACC,EAAShhB,GACtB,OACI,cAAC,IAAD,CACIuK,KAAMyW,EACNhhB,SAAUA,MAK1B,CACIwa,KAAM,gBACNoG,UAAW,qBACXC,YAAa,SAACC,GAAD,OAAiB,IAAIzW,IAASyW,EAAG,kBAC9CrZ,YAAa,GACbsZ,eAAgB,SAACC,EAAShhB,GACtB,OACI,cAAC,IAAD,CACIA,SAAUA,EACVuK,KAAMyW,EACN5b,IAAKA,MAKrB,CACIoV,KAAM,UACNoG,UAAW,eACXC,YAAa,SAACC,GAAD,OAAiB,IAAIzW,IAASyW,EAAG,YAC9CrZ,YAAa,GACbsZ,eAAgB,SAACC,EAAShhB,GACtB,OACI,cAAC,IAAD,CACIA,SAAUA,EACVuK,KAAMyW,EACN5b,IAAKA,EACLrL,MAAOA,OAhGzB,EAuGwBkB,mBAA4B,MAvGpD,mBAuGKlB,EAvGL,KAuGYmnB,EAvGZ,OAwG8BjmB,mBAA0B,MAxGxD,mBAwGK+E,EAxGL,KAwGemhB,EAxGf,OAyGsBlmB,mBAAsB,MAzG5C,mBAyGKsP,EAzGL,KAyGW6W,EAzGX,OA0G4BnmB,oBAAS,GA1GrC,mBA0GKomB,EA1GL,KA0GcC,EA1Gd,OA2G4BrmB,oBAAS,GA3GrC,mBA2GKsmB,EA3GL,KA2GcC,EA3Gd,OA4GoCvmB,mBAAwB,MA5G5D,mBA4GKwmB,EA5GL,KA4GkBC,EA5GlB,KA8GMhnB,EAAOqX,cAAPrX,GACFsX,EAAUC,cAEV0P,GAAYnnB,iBAA0B,MAEtConB,GAAe,SAACC,GAClB,GAAI7hB,EAAU,CACV,GAAIuK,IACKA,EAAKpI,UACN,OAGR,IAAM2f,EAAUD,EAAWhB,YAAY7gB,GACvCohB,EAAQU,GACRA,EAAQC,aAAY,SAACza,GAA6B,IAAfrC,EAAc,uDAAP,GACtCC,QAAQC,IAAI,mBACZ6c,GAAa1a,EAAcrC,QAWjC+c,GAAY,uCAAG,WAAO1a,EAAsB2a,GAA7B,eAAA7a,EAAA,yDACZrN,GAAUuN,EADE,sBAEP,IAAI9J,MAAM,gDAFH,UAIZwC,EAJY,sBAKP,IAAIxC,MAAM,0CALH,cAOjBkkB,EAAe,mBAPE,SASP1O,EATO,2BAUNjZ,GAVM,IAWTe,OAAO,2BACAf,EAAMe,QADP,IAEFkD,MAAOgC,EAAU0B,WACjBzD,OAAQ+B,EAAU2B,cAEtBjH,GAAI0Y,MACJxY,UAAU,yBAAD,OAA2B0M,KAjB3B,SAmBPkI,EAAYqD,UAAUG,GAnBf,OAsBbkO,EAASlO,GACThB,EAAQU,QAAR,wBAAiCM,EAAStY,KAvB7B,yBAyBbgnB,EAAe,MAzBF,2EAAH,wDA8GlB,SAASQ,GAAWlB,GAChB,IAAKjnB,EACD,OAAO,KAEX,GACc,WAAVinB,EAAExG,MACFzgB,EAAMe,OAAOkD,MAASjE,EAAMe,OAAOmD,QAAW,QAE9C,OAAO,KAEX,IAAIkkB,EAAW,0DACTC,EAAa7X,GAAQA,EAAKiQ,MAAQwG,EAAExG,KAI1C,OAHI4H,IACAD,EAAW,4CAGX,sBAAKxlB,UAAU,aAAf,UACI,wBAAQA,UAAWwlB,EAAarkB,QAAS,kBAAM8jB,GAAaZ,IAA5D,SACI,mBAAGrkB,UAAWqkB,EAAEJ,cAGpB,gCACKI,EAAExG,KAAKzd,OAAO,GAAGC,cAAgBgkB,EAAExG,KAAKvd,MAAM,KAElDmlB,GAAcpB,EAAED,eAAexW,EAAOvK,KARVghB,EAAExG,MAa3C,SAAS6H,GAAepW,GAEpB,OADAA,EAAEoW,kBACK,EAGX,OAnHAjnB,qBAAU,WAAM,4CAKZ,0CAAAgM,EAAA,sEAC6BoI,EAAYiD,SAAS/X,GADlD,UACU4nB,EADV,OAEQC,EAAW,IACXD,EAHR,gBAIQpB,EAASoB,GACTC,EAAWD,EAAW1nB,UAL9B,wCAO6BwK,EAAIqN,SAAS/X,GAP1C,eAOcX,EAPd,OAO+CiJ,KACvCke,EAASnnB,GARjB,UASoCqL,EAAI8O,qBAAqBxZ,GAT7D,eASc8nB,EATd,iBAY2BxT,EAAgBoF,IAC/BoO,EAAcxf,KAAKqR,UACnB,CACIzO,aAAc,gBAf9B,QAYcE,EAZd,OAkBcwO,EAAkBtO,EAAOC,KAAKH,EAAK9C,KAAM,UACzC+C,EAAkBuO,EAAgBpO,SAAS,UACjDqc,EAAQ,gCAA4Bxc,GApB5C,SAuBUI,EAAe,IAAIC,OACZ3L,IAAM8nB,EACnBpc,EAAaE,OAAS,WAClB,GAAKsb,GAAUtmB,QAAf,CAIA,IAAM2E,EAAWyiB,YAAed,GAAUtmB,SAC1C2E,EAAS0iB,aAAavc,GACtBgb,EAAYnhB,QALRkF,QAAQhD,MAAM,yBA3B1B,6CALY,sBACRnI,GADQ,mCAwCZ4oB,KACD,CAAC5oB,EAAOW,IAIXU,qBAAU,WAEFrB,GACAwQ,GACa,WAAbA,EAAKiQ,MACLzgB,EAAMe,OAAOkD,MAASjE,EAAMe,OAAOmD,QAAW,SAE9C2jB,GAAajB,EAAM,MAExB,CAAC5mB,EAAOwQ,IAEXnP,qBAAU,WACF4E,IACA4hB,GAAajB,EAAM,IACnB3gB,EAAS4iB,YAAW,WAChBtB,EAAWthB,EAASqhB,WACpBG,EAAWxhB,EAASuhB,iBAG7B,CAACvhB,IAEJ5E,qBAAU,WACN,GAAIumB,GAAUtmB,QAAS,CACnB,IAAM2G,EAAW,SAACiK,GACV1B,IACA0B,EAAEoW,iBACF9X,EAAKvF,QAAQiH,KAIrB,OADA0V,GAAUtmB,QAAQwnB,iBAAiB,QAAS7gB,GACrC,WAAO,IAAD,EACT,UAAA2f,GAAUtmB,eAAV,SAAmBynB,oBAAoB,QAAS9gB,OAGzD,CAACuI,EAAMoX,GAAUtmB,UAqChB,qCACI,qBAAKsB,UAAU,MAAf,SACI,qBAAKA,UAAU,SAAf,SACI,qBAAIT,MAAO,CAAEuB,SAAU,OAAQkZ,UAAW,QAA1C,UACI,mBACIza,MAAO,CAAE8C,OAAQ,WACjBlB,QAAS,kBAAMkU,EAAQhI,KAAR,kBAAwBtP,KACvCiC,UAAU,wBAJlB,sBAUR,sBACIA,UAAU,MACVT,MAAO,CAAEU,UAAW,OAAQka,cAAe,SAF/C,UAII,qBAAKna,UAAU,WAAf,SACKqD,GACG,qCACK2gB,EAAMlhB,KAAI,SAAC8K,GAAD,OAAU2X,GAAW3X,OAC9BgX,GAAWF,IACT,qBAAK1kB,UAAU,aAAf,SACI,sBAAKA,UAAU,YAAf,UACI,wBACIA,UAAU,qCACVomB,UAAW/iB,IAAaqhB,EACxBvjB,QAAS,kBACLkC,GAAYA,EAASkO,QAJ7B,SAQI,mBAAGvR,UAAU,kBAEjB,wBACIA,UAAU,qCACVomB,UAAW/iB,IAAauhB,EACxBzjB,QAAS,kBACLkC,GAAYA,EAASgjB,QAJ7B,SAOI,mBAAGrmB,UAAU,4BAQzC,sBAAKA,UAAU,WAAf,UACI,qBAAKT,MAAO,CAAE+mB,cAAe,UAA7B,SACI,gCACI,wBACI/mB,MAAO,CACH8C,OAAQ,OACRkkB,YAAa,OACbC,WAAY,QAEhBlnB,IAAK0lB,GACLhlB,UAAU,sBACVuG,YAAa,SAAC+I,GAAD,OACToW,GAAepW,IACf1B,GACAA,EAAKrH,YAAY+I,IAErBnH,YAAa,SAACmH,GAAD,OACToW,GAAepW,IACf1B,GACAA,EAAKzF,YAAYmH,IAErBlH,UAAW,SAACkH,GAAD,OACPoW,GAAepW,IACf1B,GACAA,EAAKxF,UAAUkH,IAEnBrN,aAAc,SAACqN,GAAD,OACVoW,GAAepW,IACf1B,GACAA,EAAK3L,aAAaqN,IAEtBmX,aAAc,SAACnX,GAAD,OACVoW,GAAepW,IACf1B,GACAA,EAAK6Y,aAAanX,IAEtBoX,YAAa,SAACpX,GAAD,OACToW,GAAepW,IACf1B,GACAA,EAAK8Y,YAAYpX,IAErBqX,WAAY,SAACrX,GAAD,OACRoW,GAAepW,IACf1B,GACAA,EAAK+Y,WAAWrX,MAGvBwU,GACG,qCACI,wBACI9jB,UAAU,uCACVmB,QAAS,kBAAMyM,EAAMgZ,OAAO,SAFhC,SAII,mBAAG5mB,UAAU,0BAEjB,wBACIA,UAAU,wCACVmB,QAAS,kBAAMyM,EAAMgZ,OAAO,UAFhC,SAII,mBAAG5mB,UAAU,mCAMjC,qBAAKA,UAAU,MAAf,SACI,yBACIA,UAAU,kBAEVT,MAAO,CACHwB,SAAU,WACV0a,KAAM,MACNoL,UAAW,sBAEf1lB,QAAS,WACDkC,GACAA,EAASyjB,aAVrB,UAeI,mBAAG9mB,UAAU,uBAfjB,6BAuBX8kB,GACG,cAAC,IAAD,CAAW/lB,MAAM,EAAMH,MAAM,cAA7B,SACKkmB,U,gHCxdRiC,EAAb,WAuBI,WAA6Bpd,GAA4B,yBAA5BA,SAA2B,KAtBhDqd,UAAyB,GAsBuB,KArBhDC,UAAyB,GAqBuB,KApBhDC,qBAoBgD,OAlBhDC,qBAkBgD,OAjBhDC,oBAiBgD,OAhBhDC,eAgBgD,OAbhDziB,sBAagD,OAZhD0iB,6BAYgD,OAXhDC,cAAwB,EAWwB,KAVhDllB,YAUgD,OARhDmlB,UAQgD,OAPhDvhB,aAOgD,OANhDC,aAMgD,OALhD7E,MAAQ,EAKwC,KAJhDC,OAAS,EAIuC,KAFhDmmB,iBAAwC,KAG5C9d,EAAOtI,MAAQ,IACfsI,EAAOrI,OAAS,IAEhB6D,KAAKgiB,gBAAkBvd,SAASC,cAAc,UAC9C1E,KAAKgiB,gBAAgB9lB,MAAQ,IAC7B8D,KAAKgiB,gBAAgB7lB,OAAS,IAC9B6D,KAAKiiB,eAAiBxd,SAASC,cAAc,UAC7C1E,KAAKkiB,UAAYzd,SAASC,cAAc,UAGxC1E,KAAKqiB,KAAO,EACZriB,KAAKc,QAAU,EACfd,KAAKe,QAAU,EApCvB,wCAuCI,WAAiC,IAA5BwhB,IAA2B,yDAC5B,GAAIviB,KAAK6hB,UAAUhkB,OAAS,GAAKmC,KAAK+hB,gBAAiB,CACnD,IAAMjpB,EAAYkH,KAAK6hB,UAAUW,MAC7BD,GACAviB,KAAK8hB,UAAU5Z,KAAKlI,KAAK+hB,iBAE7B/hB,KAAK+hB,gBAAkBjpB,EAEvB,IAAM6L,EAAM3E,KAAKiiB,eAAerd,WAAW,MACvCD,IACAA,EAAI8d,UACA,EACA,EACAziB,KAAKiiB,eAAe/lB,MACpB8D,KAAKiiB,eAAe9lB,QAExBwI,EAAI+d,aAAa5pB,EAAW,EAAG,GAC/BkH,KAAKgM,UAEThM,KAAK2iB,4BA1DjB,kBA8DI,WACI,GAAI3iB,KAAK8hB,UAAUjkB,OAAS,GAAKmC,KAAK+hB,gBAAiB,CACnD/hB,KAAK6hB,UAAU3Z,KAAKlI,KAAK+hB,iBACzB,IAAMjpB,EAAYkH,KAAK8hB,UAAUU,MACjCxiB,KAAK+hB,gBAAkBjpB,EAGvB,IAAM6L,EAAM3E,KAAKiiB,eAAerd,WAAW,MACvCD,IACAA,EAAI+d,aAAa5pB,EAAW,EAAG,GAC/BkH,KAAKgM,UAEThM,KAAK2iB,4BA1EjB,4BA8EI,WACI3iB,KAAK8hB,UAAY,GACjB9hB,KAAK2iB,2BAhFb,qBAmFI,WACI,OAAQ3iB,KAAKoiB,cAAgBpiB,KAAK6hB,UAAUhkB,OAAS,IApF7D,qBAuFI,WACI,OAAQmC,KAAKoiB,cAAgBpiB,KAAK8hB,UAAUjkB,OAAS,IAxF7D,wBA2FI,SAAWqC,GACPF,KAAKsiB,iBAAmBpiB,IA5FhC,sBA+FI,WACI,IAAMyE,EAAM3E,KAAKiiB,eAAerd,WAAW,MAC3C,GAAID,EAAK,CACL,IAAMwH,EAAWxH,EAAId,aACjB,EACA,EACA7D,KAAKiiB,eAAe/lB,MACpB8D,KAAKiiB,eAAe9lB,QAEpB6D,KAAK+hB,iBACL/hB,KAAK6hB,UAAU3Z,KAAKlI,KAAK+hB,iBACzB/hB,KAAK+hB,gBAAkB5V,EACnBnM,KAAK8hB,UAAUjkB,OAAS,IACxBmC,KAAK8hB,UAAY,IAEjB9hB,KAAK6hB,UAAUhkB,OAhHd,IAiHDmC,KAAK6hB,UAAUe,SAGnB5iB,KAAK+hB,gBAAkB5V,EAG3BnM,KAAK2iB,4BArHjB,oCAyHI,WACQ3iB,KAAKsiB,kBACLtiB,KAAKsiB,qBA3HjB,oBA+HI,WACI,IAAMO,EAAU7iB,KAAKwE,OAAOI,WAAW,MACnCie,IACAA,EAAQJ,UAAU,EAAG,EAAGziB,KAAK9D,MAAO8D,KAAK7D,QACzC0mB,EAAQhe,UAAU7E,KAAKgiB,gBAAiB,EAAG,GAE3Ca,EAAQC,aACJ9iB,KAAKqiB,KACL,EACA,EACAriB,KAAKqiB,KACLriB,KAAKc,QAAUd,KAAKqiB,KACpBriB,KAAKe,QAAUf,KAAKqiB,MAGxBQ,EAAQhe,UAAU7E,KAAKiiB,eAAgB,EAAG,GAC1CY,EAAQhe,UAAU7E,KAAKkiB,UAAW,EAAG,GAErCliB,KAAK+iB,YAAYF,EAAS7iB,KAAK9D,MAAO8D,KAAK7D,QAC3C0mB,EAAQC,aAAa,EAAG,EAAG,EAAG,EAAG,EAAG,MAlJhD,uBAsJI,WACI,OAAO9iB,KAAKwE,SAvJpB,uCA0JI,WAKI,IAAMG,EAAM3E,KAAKgiB,gBAAgBpd,WAAW,MAC5C,GAAID,EAAK,CACL,IAAMqe,EAAUre,EAAIse,cAChBjjB,KAAKkjB,uBAAuB,GAAI,GAAI,UAAW,WAC/C,UAEAF,IACAre,EAAIwe,UAAYH,EAChBre,EAAIye,SACA,EACA,EACApjB,KAAKgiB,gBAAgB9lB,MACrB8D,KAAKgiB,gBAAgB7lB,YA3KzC,oCAiLI,SACID,EACAC,EACAknB,EACAC,GAEA,IAAM9e,EAASC,SAASC,cAAc,UACtCF,EAAOtI,MAAQA,EACfsI,EAAOrI,OAASA,EAChB,IAAMwI,EAAMH,EAAOI,WAAW,MAQ9B,OAPID,IACAA,EAAIwe,UAAYE,EAChB1e,EAAIye,SAAS,EAAG,EAAGlnB,EAAOC,GAC1BwI,EAAIwe,UAAYG,EAChB3e,EAAIye,SAAS,EAAG,EAAGlnB,EAAQ,EAAGC,EAAS,GACvCwI,EAAIye,SAASlnB,EAAQ,EAAGC,EAAS,EAAGD,EAAQ,EAAGC,EAAS,IAErDqI,IAlMf,0BAqMI,SACIvM,GAED,IADCsrB,IACF,yDACQV,EAAU7iB,KAAKiiB,eAAerd,WAAW,MAC3Cie,IAGA7iB,KAAKwjB,4BAELxjB,KAAKiiB,eAAe/lB,MAAQjE,EAAMiE,MAClC8D,KAAKiiB,eAAe9lB,OAASlE,EAAMkE,OACnC6D,KAAKkiB,UAAUhmB,MAAQjE,EAAMiE,MAC7B8D,KAAKkiB,UAAU/lB,OAASlE,EAAMkE,OAE9B6D,KAAK9D,MAAQjE,EAAMiE,MACnB8D,KAAK7D,OAASlE,EAAMkE,OAGpB0mB,EAAQhe,UAAU5M,EAAO,EAAG,GAExBsrB,GAEAvjB,KAAKyjB,oBAAoB,CACrB/jB,GAAIzH,EAAMiE,MAAQ,KAAO,EACzByD,GAAI1H,EAAMkE,OAAS,KAAO,EAC1BD,MAAO,IACPC,OAAQ,MAGhB6D,KAAK2hB,YAEL3hB,KAAKmM,cArOjB,uBAyOI,WAEI,IAAM9R,EAAWkH,KAAKO,IAAI9B,KAAK9D,MAAO8D,KAAK7D,QACrCkmB,EAAOriB,KAAKwE,OAAOtI,MAAQ7B,EAE7ByG,EAAU,EACVC,EAAU,EAEVf,KAAK9D,MAAQ8D,KAAK7D,OAClB4E,GAAWf,KAAK9D,MAAQ8D,KAAK7D,QAAU,EAChC6D,KAAK7D,OAAS6D,KAAK9D,QAC1B4E,GAAWd,KAAK7D,OAAS6D,KAAK9D,OAAS,GAG3C8D,KAAK0jB,oBAAoBrB,EAAMvhB,EAASC,KAvPhD,0BA0PI,SAAajI,GACTkH,KAAKoiB,eAAiBtpB,EACtB,IAAM+pB,EAAU7iB,KAAKkiB,UAAUtd,WAAW,MACtCie,GAAW7iB,KAAKP,mBAChBojB,EAAQJ,UACJ,EACA,EACAziB,KAAKkiB,UAAUhmB,MACf8D,KAAKkiB,UAAU/lB,QAEfrD,GACA+pB,EAAQH,aACJ5pB,EACAkH,KAAKP,iBAAiBC,EACtBM,KAAKP,iBAAiBE,GAK9BK,KAAKoiB,eAAiBtpB,EACtBkH,KAAKgM,UAEThM,KAAK2iB,2BAhRb,yBAmRI,SACIE,EACA3mB,EACAC,GAEA,IAAMwnB,EAAYpiB,KAAKO,IAAI9B,KAAK9D,MAAQ,IAAK8D,KAAK7D,OAAS,KACvD0mB,IACAA,EAAQe,YAAc,QACtBf,EAAQc,UAAYA,EACpBd,EAAQgB,WAAW,EAAG,EAAG3nB,EAAOC,IAE3B6D,KAAKoiB,cAAgBpiB,KAAKP,mBAC3BojB,EAAQe,YAAc,QACtBf,EAAQc,UAAYA,EACpBd,EAAQgB,WACJ7jB,KAAKP,iBAAiBC,EACtBM,KAAKP,iBAAiBE,EACtBK,KAAKP,iBAAiBvD,MACtB8D,KAAKP,iBAAiBtD,UAGzB6D,KAAKoiB,cAAgBpiB,KAAKmiB,0BAC3BU,EAAQe,YAAc,OACtBf,EAAQc,UAAYA,EACpBd,EAAQgB,WACJ7jB,KAAKmiB,wBAAwBziB,EAC7BM,KAAKmiB,wBAAwBxiB,EAC7BK,KAAKmiB,wBAAwBjmB,MAC7B8D,KAAKmiB,wBAAwBhmB,SAGjC6D,KAAK9C,SACoB,WAArB8C,KAAK9C,OAAO2F,MACZggB,EAAQc,UAAYA,EACpBd,EAAQe,YAAc5jB,KAAK9C,OAAOb,MAElCwmB,EAAQiB,YACRjB,EAAQkB,IACJ/jB,KAAK9C,OAAOwC,EACZM,KAAK9C,OAAOyC,EACZK,KAAK9C,OAAO0F,OACZ,EACA,EAAIrB,KAAKyiB,IAEbnB,EAAQoB,UACoB,gBAArBjkB,KAAK9C,OAAO2F,MACnBggB,EAAQM,UAAYnjB,KAAK9C,OAAOb,MAChCwmB,EAAQe,YAAc5jB,KAAK9C,OAAOb,MAGlCwmB,EAAQiB,YACRjB,EAAQkB,IACJ/jB,KAAK9C,OAAOwC,EACZM,KAAK9C,OAAOyC,EACZK,KAAK9C,OAAO0F,OACZ,EACA,EAAIrB,KAAKyiB,IAEbnB,EAAQoB,SAERpB,EAAQqB,YAAc,GACtBrB,EAAQiB,YACRjB,EAAQkB,IACJ/jB,KAAK9C,OAAOwC,EACZM,KAAK9C,OAAOyC,EACZK,KAAK9C,OAAO0F,OACZ,EACA,EAAIrB,KAAKyiB,IAEbnB,EAAQsB,OACRtB,EAAQqB,YAAc,GACK,cAApBlkB,KAAK9C,OAAO2F,MAEnBggB,EAAQe,YAAc5jB,KAAK9C,OAAOb,MAClCwmB,EAAQc,UAAYA,EACpBd,EAAQiB,YACRjB,EAAQuB,OACJpkB,KAAK9C,OAAOwC,EAAIM,KAAK9C,OAAO0F,OAC5B5C,KAAK9C,OAAOyC,GAEhBkjB,EAAQwB,OACJrkB,KAAK9C,OAAOwC,EAAIM,KAAK9C,OAAO0F,OAC5B5C,KAAK9C,OAAOyC,GAEhBkjB,EAAQuB,OACJpkB,KAAK9C,OAAOwC,EACZM,KAAK9C,OAAOyC,EAAIK,KAAK9C,OAAO0F,QAEhCigB,EAAQwB,OACJrkB,KAAK9C,OAAOwC,EACZM,KAAK9C,OAAOyC,EAAIK,KAAK9C,OAAO0F,QAEhCigB,EAAQoB,UACoB,gBAArBjkB,KAAK9C,OAAO2F,OAEnBggB,EAAQc,UAAiC,IAArB3jB,KAAK9C,OAAO0F,OAChCigB,EAAQe,YAAc5jB,KAAK9C,OAAOb,MAElCwmB,EAAQiB,YACRjB,EAAQkB,IACJ/jB,KAAK9C,OAAOwC,EACZM,KAAK9C,OAAOyC,EACZK,KAAK9C,OAAO0F,OACZ,EACA,EAAIrB,KAAKyiB,IAEbnB,EAAQoB,SAGRpB,EAAQc,UAAYA,EACpBd,EAAQe,YAAc,QACtBf,EAAQiB,YACRjB,EAAQuB,OACJpkB,KAAK9C,OAAOwC,EAAIM,KAAK9C,OAAO0F,OAC5B5C,KAAK9C,OAAOyC,GAEhBkjB,EAAQwB,OACJrkB,KAAK9C,OAAOwC,EAAIM,KAAK9C,OAAO0F,OAC5B5C,KAAK9C,OAAOyC,GAEhBkjB,EAAQuB,OACJpkB,KAAK9C,OAAOwC,EACZM,KAAK9C,OAAOyC,EAAIK,KAAK9C,OAAO0F,QAEhCigB,EAAQwB,OACJrkB,KAAK9C,OAAOwC,EACZM,KAAK9C,OAAOyC,EAAIK,KAAK9C,OAAO0F,QAEhCigB,EAAQoB,cAnZ5B,iCAyZI,SAAoBxkB,GAChBO,KAAKP,iBAAmBA,EACxBO,KAAKgM,WA3Zb,wCA8ZI,SAA2BmW,GACvBniB,KAAKmiB,wBAA0BA,EAC/BniB,KAAKgM,WAhab,uBAmaI,SAAU9O,GACN8C,KAAK9C,OAASA,EACd8C,KAAKgM,WArab,iCAwaI,WACI,OAAOhM,KAAKP,mBAzapB,qBA4aI,WACI,OAAOO,KAAKqiB,OA7apB,wBAgbI,WACI,OAAOriB,KAAKc,UAjbpB,wBAobI,WACI,OAAOd,KAAKe,UArbpB,iCAwbI,SAAoBshB,EAAcvhB,EAAiBC,GAE/Cf,KAAKqiB,KAAOA,EACZriB,KAAKc,QAAUA,EACfd,KAAKe,QAAUA,EACff,KAAKgM,WA7bb,sBAgcI,WACI,OAAOhM,KAAK9D,QAjcpB,uBAocI,WACI,OAAO8D,KAAK7D,SArcpB,qCAwcI,SAAgCrD,GAE5B,IAAM0L,EAASC,SAASC,cAAc,UACtCF,EAAOtI,MAAQpD,EAAUoD,MACzBsI,EAAOrI,OAASrD,EAAUqD,OAC1B,IAAM0mB,EAAUre,EAAOI,WAAW,MAClC,GAAIie,EAAS,CACTA,EAAQH,aAAa5pB,EAAW,EAAG,GAEnC,IAAMwrB,EAAS9f,EAAO+f,UAAU,aAIhC,OAFA/f,EAAOW,SAEAmf,EAAO5Q,MAAM,KAAK,MArdrC,6BAydI,SAAgB8Q,GACZ,IAAM1rB,EAAYkH,KAAK6D,aAAa2gB,GACpC,GAAI1rB,EACA,OAAOkH,KAAKykB,wBAAwB3rB,KA5dhD,kCAgeI,SAA6B4rB,GAGzB,IADA,IAAMC,EAAOD,EACJxiB,EAAI,EAAGA,EAAIwiB,EAAQxjB,KAAKrD,OAAQqE,GAAK,EACtCwiB,EAAQxjB,KAAKgB,EAAI,GAAK,KACtByiB,EAAKzjB,KAAKgB,GAAK,IACfyiB,EAAKzjB,KAAKgB,EAAI,GAAK,IACnByiB,EAAKzjB,KAAKgB,EAAI,GAAK,IACnByiB,EAAKzjB,KAAKgB,EAAI,GAAK,MAEnByiB,EAAKzjB,KAAKgB,GAAK,EACfyiB,EAAKzjB,KAAKgB,EAAI,GAAK,EACnByiB,EAAKzjB,KAAKgB,EAAI,GAAK,EACnByiB,EAAKzjB,KAAKgB,EAAI,GAAK,KAG3B,OAAOyiB,IAhff,4BAmfI,SAAeH,GACX,IAAM1rB,EAAYkH,KAAK6D,aAAa2gB,GAC9BG,EAAO3kB,KAAK4kB,qBAAqB9rB,GACvC,OAAOkH,KAAKykB,wBAAwBE,KAtf5C,0BAyfI,SAAaH,GACJA,IACDA,EAAY,CACR9kB,EAAG,EACHC,EAAG,EACHzD,MAAO8D,KAAK9D,MACZC,OAAQ6D,KAAK7D,SAIrB,IAAI0mB,EAAU7iB,KAAKiiB,eAAerd,WAAW,MAC7C,GAAIie,EAOA,OANkBA,EAAQhf,aACtB2gB,EAAU9kB,EACV8kB,EAAU7kB,EACV6kB,EAAUtoB,MACVsoB,EAAUroB,UAzgB1B,6BA+gBI,WAEI,IAAM0mB,EAAU7iB,KAAKiiB,eAAerd,WAAW,MAC3Cie,IACAA,EAAQhe,UAAU7E,KAAKkiB,UAAW,EAAG,GACrCliB,KAAK0C,aAAa,MAClB1C,KAAKmM,cArhBjB,uBAyhBI,SAAUzM,EAAWC,EAAWqL,EAAmB3O,GAE/C,IAAMwmB,EAAU7iB,KAAKkiB,UAAUtd,WAAW,MACtCie,IACAA,EAAQM,UAAY9mB,EACpBwmB,EAAQiB,YACRjB,EAAQkB,IAAIrkB,EAAGC,EAAGqL,EAAY,EAAG,EAAG,EAAIzJ,KAAKyiB,IAC7CnB,EAAQsB,QAEZnkB,KAAKgM,WAliBb,wBAqiBI,SAAW6Y,EAAgBC,EAAgB9Z,GACvC,IAAKhL,KAAKP,iBACN,MAAM,IAAI/D,MAAM,wBAGpB,IAAMmnB,EAAU7iB,KAAKiiB,eAAerd,WAAW,MAC/C,GAAIie,EAAS,CAQT,IAPA,IAAM/pB,EAAY+pB,EAAQhf,aACtBghB,EAAS7Z,EAAY,EACrB8Z,EAAS9Z,EAAY,EACrBA,EACAA,GAGK9I,EAAI,EAAGA,EAAIpJ,EAAUoI,KAAKrD,OAAQqE,GAAK,EAAG,CAC/C,IAAMxC,EAAKwC,EAAI,EAAK8I,EACdrL,EAAI4B,KAAKG,MAAMQ,EAAI,EAAI8I,GAEvB+Z,EAAOrlB,EAAIsL,EAAY,EAAI6Z,EAE7BG,EAAWhlB,KAAKP,iBAAiBC,EACjCslB,EAAW,IACXA,GAAY,IAEhB,IAAIC,EACAjlB,KAAKP,iBAAiBC,EAAIM,KAAKP,iBAAiBvD,MAChD+oB,EAAYjlB,KAAK9D,QACjB+oB,GAAa,IAEjB,IAAIC,EAAUllB,KAAKP,iBAAiBE,EAChCulB,EAAU,IACVA,GAAW,IAEf,IAAIC,EACAnlB,KAAKP,iBAAiBE,EAAIK,KAAKP,iBAAiBtD,OAChDgpB,EAAanlB,KAAKwE,OAAOrI,SACzBgpB,GAAc,IAGlB,IACMC,EAAOzlB,EAAIqL,EAAY,EAAI8Z,EAE3BO,EAHYN,EAAOC,GAAYD,EAAOE,IAE1BG,EAAOF,GAAWE,EAAOD,GAI3C,IAAInlB,KAAKP,kBAAqB4lB,EAIb9jB,KAAKe,KAClBf,KAAKgB,IAAI7C,EAAIsL,EAAY,EAAG,GACxBzJ,KAAKgB,IAAI5C,EAAIqL,EAAY,EAAG,IAErBA,EAAY,IACvBlS,EAAUoI,KAAKgB,EAAI,GAAK,GAIhC2gB,EAAQH,aACJ5pB,EACA+rB,EAAS7Z,EAAY,EACrB8Z,EAAS9Z,EAAY,MAlmBrC,sBAumBI,SACIsa,EACAC,EACAC,EACAC,EACAza,EACA3O,GAGA,IAAMwmB,EAAU7iB,KAAKkiB,UAAUtd,WAAW,MACtCie,IACAA,EAAQe,YAAcvnB,EACtBwmB,EAAQc,UAAY3Y,EACpB6X,EAAQ6C,QAAU,QAClB7C,EAAQiB,YACRjB,EAAQuB,OAAOkB,EAAIC,GACnB1C,EAAQwB,OAAOmB,EAAIC,GACnB5C,EAAQoB,UAEZjkB,KAAKgM,WA1nBb,wBA6nBI,SACIsZ,EACAC,EACAC,EACAC,EACAza,EACAC,GAEA,IAAM0a,EAAa,CACfjmB,EAAG8lB,EAAKF,EACR3lB,EAAG8lB,EAAKF,GAEN1nB,EAAS0D,KAAKe,KAChBqjB,EAAWjmB,EAAIimB,EAAWjmB,EAAIimB,EAAWhmB,EAAIgmB,EAAWhmB,GAE5DgmB,EAAWjmB,GAAK7B,EAChB8nB,EAAWhmB,GAAK9B,EAQhB,IAAMglB,EAAU7iB,KAAKkiB,UAAUtd,WAAW,MAC1C,GAAIie,EACA,IAAK,IAAI3gB,EAAI,EAAGA,EAAIrE,EAAQqE,IAAK,CAiB7B,IAhBA,IAAMxC,EAAI4lB,EAAKpjB,EAAIyjB,EAAWjmB,EACxBC,EAAI4lB,EAAKrjB,EAAIyjB,EAAWhmB,EAExB7G,EAAY+pB,EAAQhf,aACtBnE,EAAIsL,EAAY,EAChBrL,EAAIqL,EAAY,EAChBA,EACAA,GAGA4a,EAAW,EACXC,EAAa,EACbC,EAAY,EACZznB,EAAQ,EAGHsB,EAAI,EAAGA,EAAI7G,EAAUqD,OAAQwD,IAClC,IAAK,IAAID,EAAI,EAAGA,EAAI5G,EAAUoD,MAAOwD,IAAK,CACtC,IAAM0C,EAAoC,GAA3BzC,EAAI7G,EAAUoD,MAAQwD,GAKrC,GAJiB6B,KAAKe,MACjB5C,EAAIsL,EAAY,IAAMtL,EAAIsL,EAAY,IAClCrL,EAAIqL,EAAY,IAAMrL,EAAIqL,EAAY,KAE/BA,EAAY,EAMxB4a,GAJU9sB,EAAUoI,KAAKkB,GAKzByjB,GAJU/sB,EAAUoI,KAAKkB,EAAQ,GAKjC0jB,GAJUhtB,EAAUoI,KAAKkB,EAAQ,GAKjC/D,IAUZ,IAHA,IAAM0nB,EAAaH,EAAWvnB,EACxB2nB,EAAeH,EAAaxnB,EAC5B4nB,EAAcH,EAAYznB,EACvBsB,EAAI,EAAGA,EAAI7G,EAAUqD,OAAQwD,IAClC,IAAK,IAAID,EAAI,EAAGA,EAAI5G,EAAUoD,MAAOwD,IAAK,CACtC,IAAM0C,EAAoC,GAA3BzC,EAAI7G,EAAUoD,MAAQwD,GACpB6B,KAAKe,MACjB5C,EAAIsL,EAAY,IAAMtL,EAAIsL,EAAY,IAClCrL,EAAIqL,EAAY,IAAMrL,EAAIqL,EAAY,KAE/BA,EAAY,IACxBlS,EAAUoI,KAAKkB,GACX2jB,EAAa9a,EACbnS,EAAUoI,KAAKkB,IAAU,EAAI6I,GACjCnS,EAAUoI,KAAKkB,EAAQ,GACnB4jB,EAAe/a,EACfnS,EAAUoI,KAAKkB,EAAQ,IAAM,EAAI6I,GACrCnS,EAAUoI,KAAKkB,EAAQ,GACnB6jB,EAAchb,EACdnS,EAAUoI,KAAKkB,EAAQ,IAAM,EAAI6I,IAMjD4X,EAAQH,aACJ5pB,EACA4G,EAAIsL,EAAY,EAChBrL,EAAIqL,EAAY,GAI5BhL,KAAKgM,WA/tBb,sBAkuBI,SAAStM,EAAWC,GAChB,IAAMkjB,EAAU7iB,KAAKiiB,eAAerd,WAAW,MAE/C,GAAIie,EAAS,CACT,IAAMqD,EAAQrD,EAAQhf,aAAanE,EAAGC,EAAG,EAAG,GAAGuB,KAC/C,MACI,KACC,SA8DjB,SAAkB8d,EAAWmH,EAAWle,GACpC,GAAI+W,EAAI,KAAOmH,EAAI,KAAOle,EAAI,IAAK,KAAM,0BACzC,OAAS+W,GAAK,GAAOmH,GAAK,EAAKle,GAAG7D,SAAS,IAhEnBgiB,CAASF,EAAM,GAAIA,EAAM,GAAIA,EAAM,KAAK/qB,OAAO,GAGnE,MAAO,YA5uBf,wCA+uBI,WAEI,IAAM0nB,EAAU7iB,KAAKkiB,UAAUtd,WAAW,MACtCie,GACAA,EAAQhe,UAAU7E,KAAKiiB,eAAgB,EAAG,GAE9CjiB,KAAKgM,SACLhM,KAAKoiB,cAAe,EACpBpiB,KAAK2iB,2BAvvBb,6BA0vBI,WACI,IAAK3iB,KAAKP,iBACN,MAAM,IAAI/D,MAAM,wBAEpB,IAAM2qB,EAAO9kB,KAAKC,IAAI,EAAGxB,KAAKP,iBAAiBC,GACzC4mB,EAAO/kB,KAAKC,IAAI,EAAGxB,KAAKP,iBAAiBE,GASzCzD,EAROqF,KAAKO,IACd9B,KAAKP,iBAAiBC,EAAIM,KAAKP,iBAAiBvD,MAChD8D,KAAKiiB,eAAe/lB,OAMHmqB,EACflqB,EALOoF,KAAKO,IACd9B,KAAKP,iBAAiBE,EAAIK,KAAKP,iBAAiBtD,OAChD6D,KAAKiiB,eAAe9lB,QAGFmqB,EAGhBC,EAAY9hB,SAASC,cAAc,UACzC6hB,EAAUrqB,MAAQA,EAClBqqB,EAAUpqB,OAASA,EAMnB,IAAM0mB,EAAU0D,EAAU3hB,WAAW,MACjCie,GACAA,EAAQhe,UACJ7E,KAAKiiB,eACL1gB,KAAKO,IAAI,GAA8B,EAA3B9B,KAAKP,iBAAiBC,GAClC6B,KAAKO,IAAI,GAA8B,EAA3B9B,KAAKP,iBAAiBE,IAGtCK,KAAKP,iBAAiBC,EAAI,IAC1BM,KAAKP,iBAAiBC,EAAI,GAE1BM,KAAKP,iBAAiBE,EAAI,IAC1BK,KAAKP,iBAAiBE,EAAI,GAE9ByD,QAAQC,IAAR,2BAAgCnH,EAAhC,cAA2CC,IAC3C6D,KAAK4gB,aAAa2F,GAAW,OAnyBrC,KA4yBO,SAAS5F,EAAenc,GAC3B,OAAO,IAAIod,EAASpd,K,+HCnyBXgiB,EAAkC,SAAC,GAAwB,IAAtBtoB,EAAqB,EAArBA,SAAUuK,EAAW,EAAXA,KAAW,EAE7BtP,qBAF6B,mBAE5DstB,EAF4D,KAE/CC,EAF+C,KAmCnE,OAAID,EAEI,sBAAK5rB,UAAU,aAAaT,MAAO,CAACU,UAAW,QAA/C,UACI,yBACID,UAAU,kBACVmB,QAAS,WACL0qB,OAAenmB,GACf,IAAM9H,EAAM,IAAI6L,MAEV3L,EAAM,yBAA2B8tB,EACvChuB,EAAIE,IAAMA,EACVF,EAAI8L,OAAS,WACTrG,EAAS0iB,aAAanoB,KATlC,UAcI,mBAAGoC,UAAU,iBAdjB,iBAiBA,yBACIA,UAAU,kBACVmB,QAAS,WAEL,GADA0qB,OAAenmB,GACXkI,EAAKL,aAAc,CACnB,IAAM5C,EAAetH,EAASuH,gBAAgB,MAC1CD,GACAiD,EAAKL,aAAa5C,KAI9BpL,MAAO,CAACI,WAAY,OAXxB,UAcI,mBAAGK,UAAU,gBAdjB,kBAuBR,qCACI,qBAAKA,UAAU,aAAaT,MAAO,CAACU,UAAW,QAA/C,SACI,wBACIlC,GAAG,oBACHiC,UAAS,mBACTT,MAAO,CAAEG,QAAS,UAHtB,UAMI,mBAAGM,UAAU,kBANjB,oBAOI,uBACIjC,GAAG,YACHiK,KAAK,OACLzI,MAAO,CAAEG,QAAS,QAClB2P,SAvFI,SAACxJ,GACrB,IAAMimB,EAAQjmB,EAAM0J,OAAOuc,MACvBA,GAASA,EAAM9oB,OAAS,GACxBgjB,IACI8F,EAAM,IACN,SAACluB,GACG,IAAMguB,EAAcvoB,EAASuH,gBAAgB,MAC7CihB,EAAeD,GACfvoB,EAAS0iB,aAAanoB,KAE1B,CAAE+L,QAAQ,YAiFd,qBAAK3J,UAAU,aAAf,SACI,yBACIA,UAAU,kBACVmB,QAAS,YA/ER,WACb,IAAMwJ,EAAetH,EAASuH,gBAAgB,MAC9C,GAAID,EAAc,CAMd,IAJA,IAAMohB,EAAaC,KAAKrhB,GAElBshB,EAAS,IAAIC,YAAYH,EAAW/oB,QACpCmpB,EAAW,IAAIC,WAAWH,GACvB5kB,EAAI,EAAGA,EAAI0kB,EAAW/oB,OAAQqE,IACnC8kB,EAAS9kB,GAAK0kB,EAAWM,WAAWhlB,GAExC,IAAMilB,EAAO,IAAIC,KAAK,CAACJ,GAAW,CAAEnkB,KAAM,cAC1CwkB,IAAOF,EAAM,cAoEDG,IAEJltB,MAAO,CAAEI,WAAY,OALzB,UAOI,mBAAGK,UAAU,oBAPjB,8B,6LC/EHqS,EAAkBC,IAAMC,gBAC9BF,EAAgBG,SAASC,QAAQC,OAAjC,cASA,IAAMga,EAA6B,SAAC,GAAoC,IAAlCrpB,EAAiC,EAAjCA,SAAUuK,EAAuB,EAAvBA,KAAMnF,EAAiB,EAAjBA,IAAKrL,EAAY,EAAZA,MAAY,EACpCkB,qBADoC,mBACnEstB,EADmE,KACtDC,EADsD,OAEtBvtB,mBAElD,MAJwE,mBAEnEquB,EAFmE,KAE/CC,EAF+C,OAKpCtuB,qBALoC,mBAKnEuuB,EALmE,KAKtDC,EALsD,OAQhDxuB,mBAAwB,MARwB,mBAQnEiH,EARmE,KAQ5D8I,EAR4D,OASxC/P,mBAAiB,GATuB,mBASnEyuB,EATmE,KASxDC,EATwD,KAW1EvuB,qBAAU,WACN,IAAMouB,EAAc,IAAI3nB,IAExB,OADA4nB,EAAeD,GACR,WACHA,EAAYrnB,aAEjB,IAEH,IAAMynB,EAAgB,uCAAG,WACrBhvB,EACAivB,GAFqB,qCAAAziB,EAAA,yDAIhBoiB,EAJgB,sBAKX,IAAIhsB,MAAM,gCALC,cAOjBssB,EAAIC,YAAkBnvB,GACtB0M,EAAewiB,EAAEzD,UAAU,aAAa7Q,MAAM,KAAK,GACvDsU,EAAE7iB,UACIO,EAA0BC,eAC1BjM,MAAQ,GACdgM,EAAME,cAAgBJ,EACtBE,EAAM1M,OAAOW,OAAS1B,EAAMe,OAAOW,OACnC+L,EAAM1M,OAAOC,gBAAkBhB,EAAMe,OAAOC,gBAC5CyM,EAAM1M,OAAO8M,mBAAqB,IAClCJ,EAAMrH,MAAQ,EACdqH,EAAMtJ,MAAQ,mBACdsJ,EAAM/K,MAAO,EACb+K,EAAMM,WAAY,EAClBN,EAAM1M,OAAOkD,MAAQpD,EAAUoD,MAC/BwJ,EAAM1M,OAAOmD,OAASrD,EAAUqD,OAChCuJ,EAAM1M,OAAO+uB,aACQ,YAAjBA,EACM/P,IAA4BkQ,QAC5BlQ,IAA4BmQ,YAzBjB,UA2BI7kB,EAAI4C,YAAYR,GA3BpB,QA2Bf0iB,EA3Be,OA4BjBC,EAAkBD,EAAWlnB,KAAK5D,OAAQ,GA5BzB,WA6Bd+qB,EAAgBttB,SAAWM,IAAWG,UA7BxB,kCA8BX4L,YAAM,KA9BK,yBA+BO9D,EAAIqN,SAAS0X,EAAgBzvB,IA/BpC,WA+BX0vB,EA/BW,QAgCjBD,EAAkBC,EAAUpnB,MACRnG,SAAWM,IAAWK,MAjCzB,uBAkCP,IAAIA,MAAM,uBAlCH,iDAqCM4H,EAAI8O,qBAAqBiW,EAAgBzvB,IArC/C,eAqCfyZ,EArCe,iBAyCOnF,EAAgBoF,IACxCD,EAAanR,KAAKqR,UAClB,CACIzO,aAAc,gBA5CD,eAyCfykB,EAzCe,OA+CrB/iB,EAAegjB,YAAwBD,EAAcrnB,MA/ChC,UAgDHunB,YAAYjjB,GAhDT,eAgDf/M,EAhDe,OAiDrBuvB,EAAIvjB,SAASC,cAAc,UACrBgkB,EAAiC,YAAjBX,EAA6B,EAAI,EACvDC,EAAE9rB,MAAQpD,EAAUoD,MAAQwsB,EAC5BV,EAAE7rB,OAASrD,EAAUqD,OAASusB,GACxB/jB,EAAMqjB,EAAEpjB,WAAW,OACrBC,UAAUpM,EAAK,EAAG,EAAGuvB,EAAE9rB,MAAO8rB,EAAE7rB,QAC9BwsB,EAAehkB,EAAId,aAAa,EAAG,EAAGmkB,EAAE9rB,MAAO8rB,EAAE7rB,QACvD6rB,EAAE7iB,SAxDmB,kBAyDdwjB,GAzDc,4CAAH,wDA4DhBC,EAAS,uCAAG,WAAOb,GAAP,uBAAAziB,EAAA,yDACdmiB,EAAsBM,GACtB7e,EAAS,MAFK,SAIJud,EAAcvoB,EAASuH,gBAAgB,MAC7CihB,EAAeD,GACX3tB,EAAYoF,EAAS2F,aAAa,MAN5B,wDAWL/K,EAAUoD,MAAQ,GAAOpD,EAAUqD,OAAS,KAAQ,IAC/C6rB,EAAIa,YAAaZ,YAAkBnvB,IACzCA,EAAYkvB,EACPpjB,WAAW,MACXf,aAAa,EAAG,EAAGmkB,EAAE9rB,MAAO8rB,EAAE7rB,SAf7B,UAkBiB2rB,EACvBhvB,EACAivB,GApBM,QAkBJY,EAlBI,OAsBJpC,EAAY0B,YAAkBU,GACpCzqB,EAAS0iB,aAAa2F,GACtBA,EAAUphB,SAxBA,kDA0BV+D,EAAS,KAAI4B,SAAW,oBACxB+c,EAAanhB,MAAS4J,WA3BZ,yBA6BVmX,EAAsB,MA7BZ,6EAAH,sDAiCf,GAAID,EACA,OACI,sBAAK3sB,UAAU,aAAaT,MAAO,CAAEU,UAAW,QAAhD,UACI,mBAAGD,UAAU,2BADjB,OACqD,IACzB,YAAvB2sB,EACK,eACA,wBAKlB,GAAIf,EACA,OACI,sBAAK5rB,UAAU,aAAaT,MAAO,CAAEU,UAAW,QAAhD,UACI,cAAC,IAAD,CAAmBgQ,QAAS1K,EAAO0U,UAAW8S,IAC9C,yBACI/sB,UAAU,kBACVmB,QAAS,WACL0qB,OAAenmB,GACf,IAAM9H,EAAM,IAAI6L,MAEV3L,EAAM,yBAA2B8tB,EACvChuB,EAAIE,IAAMA,EACVF,EAAI8L,OAAS,WACTrG,EAAS0iB,aAAanoB,KATlC,UAcI,mBAAGoC,UAAU,iBAdjB,iBAgBA,yBACIA,UAAU,kBACVmB,QAAS,WAEL,GADA0qB,OAAenmB,GACXkI,EAAKL,aAAc,CACnB,IAAM5C,EAAetH,EAASuH,gBAAgB,MAC1CD,GACAiD,EAAKL,aAAa5C,KAI9BpL,MAAO,CAAEI,WAAY,OAXzB,UAcI,mBAAGK,UAAU,gBAdjB,kBAqBZ,OAAIqD,EAAS0B,WAAa1B,EAAS2B,YADnB,QAGR,qBAAKzF,MAAO,CAAEU,UAAW,QAAzB,iDAQJ,qCACI,cAAC,IAAD,CAAmBgQ,QAAS1K,EAAO0U,UAAW8S,IAC9C,qBAAK/sB,UAAU,aAAaT,MAAO,CAAEU,UAAW,QAAhD,SACI,yBACID,UAAU,kBACVmB,QAAS,WACL4sB,EAAU,YAEdxuB,MAAO,CAAEI,WAAY,OALzB,UAQI,mBAAGK,UAAU,sBARjB,6BAWJ,qBAAKA,UAAU,aAAaT,MAAO,CAAEU,UAAW,QAAhD,SACI,yBACID,UAAU,kBACVmB,QAAS,WACL4sB,EAAU,iBAEdxuB,MAAO,CAAEI,WAAY,OALzB,UAQI,mBAAGK,UAAU,iBARjB,+B,8GChOHiuB,EAA6B,CACtC,CACIpU,MAAO,EACPgE,KAAM,QACNqQ,YAAa,+HAEjB,CACIrU,MAAO,EACPgE,KAAM,OACNqQ,YAAa,+IAEjB,CACIrU,MAAO,EACPgE,KAAM,MACNqQ,YAAa,4JAEjB,CACIrU,MAAO,EACPgE,KAAM,QACNqQ,YAAa,8K,gBCbRC,EAA6B,SAAC,GAIpC,IAHHC,EAGE,EAHFA,mBACArU,EAEE,EAFFA,mBACApX,EACE,EADFA,SACE,EAEgDrE,mBAAiB8vB,GAFjE,mBAEKC,EAFL,KAEwBC,EAFxB,KAQF,OAJA7vB,qBAAU,WACN6vB,EAAqBF,KACtB,CAACA,IAEI,eAACG,EAAA,EAAD,CACJvvB,OAAQ,kBAAM2D,KACd6rB,UAAQ,EACRzvB,MAAM,EAHF,UAKJ,cAACwvB,EAAA,EAAMrvB,OAAP,CAAcC,aAAW,EAAzB,SACI,cAACovB,EAAA,EAAMnvB,MAAP,4BAEJ,cAACmvB,EAAA,EAAMlvB,KAAP,UAkBK4uB,EAAanrB,KAAI,SAAA2rB,GAAU,OACxB,sBACIzuB,UAAW,cAAgBquB,IAAsBI,EAAW5U,MAAQ,YAAc,IAElF1Y,QAAS,kBAAMmtB,EAAqBG,EAAW5U,QAHnD,UAKI,qBAAK7Z,UAAU,mBAAf,SACKyuB,EAAW5Q,OAEhB,qBAAK7d,UAAU,yBAAf,SACKyuB,EAAWP,gBAPXO,EAAW5U,YAY5B,eAAC0U,EAAA,EAAMrrB,OAAP,WACI,wBACI8E,KAAK,SACLhI,UAAU,oBACVmB,QAAS,kBAAMwB,KAHnB,mBADJ,OASI,wBACIqF,KAAK,SACLhI,UAAU,kBACVmB,QAAS,kBAAM4Y,EAAmBsU,IAHtC,2BC7DNK,EAAwB,IACxBC,EAA+C,CACjDC,EAAG,QACHC,EAAG,OACHC,EAAG,MACHC,EAAG,SAGMC,EAAyB,SAAC,GAIhC,IAHH/Z,EAGE,EAHFA,MACAiF,EAEE,EAFFA,eACAH,EACE,EADFA,mBACE,EACwCzb,mBAAiB,YADzD,mBACK2wB,EADL,KACoBC,EADpB,OAE0B5wB,oBAAkB,GAF5C,mBAEK6wB,EAFL,KAEaC,EAFb,OAG8B9wB,oBAAS,GAHvC,mBAGK+wB,EAHL,KAGeC,EAHf,OAIkDhxB,oBAAS,GAJ3D,mBAIKixB,EAJL,KAIyBC,EAJzB,KAMIjwB,EAAuB,CAEzB+B,OAAQ,OAGRyZ,gBAAiB,UACjB5Y,eAAgB,YAChBstB,aAAc,MACdzV,UAAW,OACX0V,WAAY,MACZC,YAAa,OACbC,aAAc,OACd9uB,SAAU,OACV+uB,WAAY,UAuDhB,OAhDI5a,EAAM2E,YACNra,EAAMwb,qBAAkBrV,EACxBnG,EAAM2C,gBACF,qDACJ3C,EAAMuwB,cAAgB,QACtBvwB,EAAMwwB,kBAAoB,KAC1BxwB,EAAMywB,wBAA0B,YAGpCvxB,qBAAU,WACN,IAAMwxB,EAAsB,WAIxB,IAAIC,EAAwBjb,EAAMkb,QAAUlb,EAAM4E,MAElD,GAAI5E,EAAM2E,WACNsW,GAAyBrkB,MACpBW,KAAKX,IAAOoJ,EAAMmb,eAClB3a,YACwB,IACzBya,EAAwB,GAE5Bd,EAAoC,IAA1Bc,GACVZ,GAAY,OACT,CACH,IAAMe,EACFxkB,MAAS4J,UAAYR,EAAMmb,aAC3BC,EAAiC3B,GACjCY,GAAY,GACZY,EACIxB,EAAwB2B,GAE5Bf,GAAY,GAEhBF,EAA4B,IAAlBna,EAAMkb,SAGpB,IAAIlB,EAAgBpjB,IACfykB,IAAIJ,GACJK,OAAO,YACZrB,EAAiBD,IAErBgB,IACA,IAAMjY,EAAWH,YAAYoY,EAAqB,KAClD,OAAO,kBAAMnY,cAAcE,MAC5B,CAAC/C,IAEAka,EACO,wBAIP,sBAAKnvB,UAAU,eAAeT,MAAOA,EAArC,UACI,sBACIA,MAAO,CACH8C,OAAQ,UACRmuB,UAAWvb,EAAM2E,UAAY,SAAW,UAE5CzY,QAAS,kBAAMquB,GAAsB,IALzC,SAOKb,EAAkB1Z,EAAM4E,SAG7B,sBACIta,MAAO,CACH2B,MAAO,SAFf,WAKM+T,EAAM2E,WACJ,mBACI5Z,UAAU,cACVmB,QAAS,kBAAM+Y,GAAe,IAC9B3a,MAAO,CAAE8C,OAAQ,aAGxB4S,EAAM2E,WACH,mBACI5Z,UAAU,eACVmB,QAAS,kBAAM+Y,GAAe,IAC9B3a,MAAO,CAAE8C,OAAQ,gBAI7B,uBACI9C,MAAO,CACHixB,UAAW,SACX1vB,SAAU,OACVI,MAAO,QACPwuB,WAAY,MACZ9vB,YAAa,OANrB,UASKqvB,EATL,UAWCI,GACG,sBACI9vB,MAAO,CACHixB,UAAW,SACX1vB,SAAU,OACVI,MAAO,QACPwuB,WAAY,MACZ9vB,YAAa,MACb4B,MAAO,UACPivB,UAAW,6BARnB,0BAcHlB,GACG,cAAC,EAAD,CACI5sB,SAAU,kBAAM6sB,GAAsB,IACtCzV,mBAAoB,SAACF,GACjB2V,GAAsB,GACtBzV,EAAmBF,IAEvBuU,mBAAoBnZ,EAAM4E,a,uhBC5JvC,SAAS6W,EAAWC,GAEvB,KAAIA,EAAUtvB,MAAQsvB,EAAUrvB,OAAS,QA8CrC,OAAO,KA5CP,IAAMqI,EAASC,SAASC,cAAc,UACtC,IACIF,EAAOtI,MAAQsvB,EAAUtvB,MACzBsI,EAAOrI,OAASqvB,EAAUrvB,OAC1B,IAAMwI,EAAMH,EAAOI,WAAW,MAC9B,IAAKD,EACD,MAAM,IAAIjJ,MAAM,gCAEpBiJ,EAAI+d,aAAa8I,EAAW,EAAG,GAW/B,IAVA,IAAMC,EAAYlqB,KAAKC,IAAIgqB,EAAUtvB,MAAOsvB,EAAUrvB,OAAQ,KAMxDuvB,EAAcnqB,KAAKwE,KAAKylB,EAAUtvB,OAASuvB,EAAY,KACvDE,EAAcpqB,KAAKwE,KAAKylB,EAAUrvB,QAAUsvB,EAAY,KAExDG,EAAuB,GACpBlsB,EAAI,EAAGA,EAAIgsB,EAAahsB,IAAK,CAClCksB,EAAM1jB,KAAK,IACX,IAAK,IAAIvI,EAAI,EAAGA,EAAIgsB,EAAahsB,IAAK,CAElC,IAAMksB,EAAKnsB,GAAK+rB,EAAY,IACtBK,EAAKnsB,GAAK8rB,EAAY,IACtBnG,EAAK/jB,KAAKC,IAAIqqB,EAAKJ,EAAWD,EAAUtvB,OACxCqpB,EAAKhkB,KAAKC,IAAIsqB,EAAKL,EAAWD,EAAUrvB,QAExC4vB,EAAOpnB,EAAId,aAAagoB,EAAIC,EAAIxG,EAAKuG,EAAItG,EAAKuG,GACpDF,EAAMlsB,GAAGwI,KAAK6jB,IAGtB,MAAO,CACHC,UAAWN,EACXO,UAAWN,EACXO,SAAUT,EACV5f,WAAY2f,EAAUtvB,MACtB4P,YAAa0f,EAAUrvB,OACvByvB,SArCR,QAwCIpnB,EAAOW,UASZ,SAASgnB,EAAWC,GAEvB,IAAM5nB,EAASC,SAASC,cAAc,UACtC,IACIF,EAAOtI,MAAQkwB,EAAYvgB,WAC3BrH,EAAOrI,OAASiwB,EAAYtgB,YAC5B,IAAMnH,EAAMH,EAAOI,WAAW,MAC9B,IAAKD,EACD,MAAM,IAAIjJ,MAAM,gCAEpB,IAAK,IAAIgE,EAAI,EAAGA,EAAI0sB,EAAYJ,UAAWtsB,IACvC,IAAK,IAAIC,EAAI,EAAGA,EAAIysB,EAAYH,UAAWtsB,IAAK,CAE5C,IACM0sB,EAAapE,EADNmE,EAAYR,MAAMlsB,GAAGC,IAIlCgF,EAAIE,UAAUwnB,EAAY3sB,GAAK0sB,EAAYF,SAAW,IAAKvsB,GAAKysB,EAAYF,SAAW,KAG/F,OAAOvnB,EAAId,aACP,EACA,EACAuoB,EAAYvgB,WACZugB,EAAYtgB,aArBpB,QAwBItH,EAAOW,UAIR,SAAS8iB,EAAkBnvB,GAC9B,IAAM0L,EAASC,SAASC,cAAc,UACtCF,EAAOtI,MAAQpD,EAAUoD,MACzBsI,EAAOrI,OAASrD,EAAUqD,OAC1B,IAAMwI,EAAMH,EAAOI,WAAW,MAC9B,IAAKD,EACD,MAAM,IAAIjJ,MAAM,gCAGpB,OADAiJ,EAAI+d,aAAa5pB,EAAW,EAAG,GACxB0L,EAyBJ,SAASqkB,EAAa5wB,GAGzB,IAAMiE,EAAsC,GAA9BqF,KAAKwE,KAAK9N,EAAMiE,MAAQ,IAChCC,EAAwC,GAA/BoF,KAAKwE,KAAK9N,EAAMkE,OAAS,IACxC,OAAID,GAASjE,EAAMiE,OAASC,GAAUlE,EAAMkE,OACjClE,EA3BR,SACHA,EACAiE,EACAC,GAEA,IAAMqI,EAASC,SAASC,cAAc,UACtC,IACIF,EAAOtI,MAAQA,EACfsI,EAAOrI,OAASA,EAChB,IAAMwI,EAAMH,EAAOI,WAAW,MAC9B,IAAKD,EACD,MAAM,IAAIjJ,MAAM,gCAGpB,OADAiJ,EAAIE,UAAU5M,EAAO,EAAG,EAAGiE,EAAOC,GAC3BqI,EARX,QAUIvM,EAAMkN,UAaHmnB,CAAYr0B,EAAOiE,EAAOC,GAqI9B,IAAM4D,EAAb,WAKI,aAA6B,IAAjBwsB,EAAgB,uDAAH,EAAG,yBAJpBC,QAAyB,GAIL,KAHpBC,UAA8D,GAG1C,KAFpBvvB,OAAS,EAGb,IAAK,IAAIgF,EAAI,EAAGA,EAAIqqB,EAAYrqB,IAC5BlC,KAAKwsB,QAAQtqB,GAAK,IAAIwqB,OAAJ,UACXC,GADW,0BAGlB3sB,KAAKwsB,QAAQtqB,GAAG6e,iBACZ,UACA/gB,KAAK2G,UAAUimB,KAAK5sB,OAZpC,6CAiBI,SAAUU,GACN,IAAMsD,EAAOtD,EAAMQ,KACnBlB,KAAKysB,UAAUzoB,EAAKpL,IAAI8H,UACjBV,KAAKysB,UAAUzoB,EAAKpL,MApBnC,mEAuBI,WACI6hB,GADJ,oBAAAnV,EAAA,+EAGW,IAAI5B,SAAQ,SAACC,EAASC,GACzB,EAAK6oB,UAAUhS,EAAQ7hB,IAAM,SAAC8H,GAC1BiD,EAAQjD,EAAMQ,OAElB,EAAKsrB,QAAQ,EAAKtvB,QAAQ2vB,YAA1B,eACOpS,IAEP,EAAKvd,QAAU,EAAKA,OAAS,GAAK,EAAKsvB,QAAQ3uB,WAVvD,2CAvBJ,4EAqCI,WACI,IAAK,IAAIyb,KAAOtZ,KAAKwsB,QACjBxsB,KAAKwsB,QAAQlT,GAAKwT,gBAvC9B,KA4CO,SAASC,EAAuBvnB,GACnC,OAAO,IAAI9B,SAAQ,SAACC,EAASC,GAGzB,IAAMY,EAASC,SAASC,cAAc,UACtCF,EAAOtI,MAAQ,IACfsI,EAAOrI,OAAS,IAEhB,IAAMlE,EAAQ,IAAIqM,MAClBrM,EAAMU,IAAN,gCAAqC6M,GACrCvN,EAAMsM,OAAS,WACX,IAAMse,EAAUre,EAAOI,WAAW,MAClC,IAAKie,EACD,MAAM,IAAInnB,MAAM,mCAIpB8I,EAAOtI,MAFO,IAGdsI,EAAOrI,OAFQ,IAIf,IAAMgiB,EAAclmB,EAAMiE,MAAQjE,EAAMkE,OAClC6wB,EACF7O,EAAc,EAAIlmB,EAAMiE,MAAQjE,EAAMkE,OAASgiB,EAC7C8O,EACF9O,EAAc,EAAIlmB,EAAMiE,MAAQiiB,EAAclmB,EAAMkE,OAClD+wB,GAASj1B,EAAMiE,MAAQ8wB,GAAa,EACpCG,GAASl1B,EAAMkE,OAAS8wB,GAAc,EAC5CpK,EAAQhe,UACJ5M,EACAi1B,EACAC,EACAH,EACAC,EACA,EACA,EAnBU,IACC,KAwBf,IACMG,EADW5oB,EAAO+f,UAAU,aACV7Q,MAAM,KAAK,GACnC/P,EAAQypB,OAKb,SAAS3E,EAAYjjB,GACxB,OAAO,IAAI9B,SAAQ,SAACC,EAASC,GACzB,IAAM3L,EAAQ,IAAIqM,MAClBrM,EAAMU,IAAN,gCAAqC6M,GACrCvN,EAAMsM,OAAS,WACXZ,EAAQ1L,OAKb,SAASuwB,EAAwB6E,GAEpC,OADYnpB,EAAOC,KAAKkpB,EAAa,UAC1BjpB,SAAS,UAGjB,SAASkpB,EACZ9nB,EACAtJ,EACAC,GAEA,OAAO,IAAIuH,SAAQ,SAACC,EAASC,GAGzB,IAAMY,EAASC,SAASC,cAAc,UACtCF,EAAOtI,MAAQA,EACfsI,EAAOrI,OAASA,EAEhB,IAAMlE,EAAQ,IAAIqM,MAClBrM,EAAMU,IAAN,gCAAqC6M,GACrCvN,EAAMsM,OAAS,WACX,IAAMse,EAAUre,EAAOI,WAAW,MAClC,IAAKie,EACD,MAAM,IAAInnB,MAAM,mCAEpB8I,EAAOtI,MAAQA,EACfsI,EAAOrI,OAASA,EAEhB0mB,EAAQhe,UACJ5M,EACA,EACA,EACAA,EAAMiE,MACNjE,EAAMkE,OACN,EACA,EACAD,EACAC,GAIJ,IACMixB,EADW5oB,EAAO+f,UAAU,aACV7Q,MAAM,KAAK,GACnC/P,EAAQypB,OAKb,SAASG,EAAmB/nB,GAG/B,IAFA,IAAMgoB,EAAe3G,KAAKrhB,GACpBioB,EAAM,GACHvrB,EAAI,EAAGA,EAAIsrB,EAAa3vB,OAAQqE,IACrCurB,EAAIvlB,KAAKslB,EAAatG,WAAWhlB,IAErC,OAAO,IAAIklB,KAAK,CAAC,IAAIH,WAAWwG,IAAO,CACnC5qB,KAAM,cAMP,SAAS6qB,EAAWC,EAAmBxG,GAC1C,OAAO,IAAIzjB,SAAQ,SAACC,EAASC,GACzB,IAAIgqB,EAAM,IAAIC,eACdD,EAAIE,KAAK,MAAOH,GAAW,GAC3BC,EAAIG,iBAAiB,eAAgB,aACrCH,EAAIrpB,OAAS,WACLqpB,EAAI7yB,OAAS,KAEb4I,KAGRiqB,EAAIp0B,QAAU,SAACkV,GAEX9K,EAAO8K,IAEXkf,EAAII,KAAK7G,S,mGChcjB,0DAUa8G,EAAuB,SAAC,GAA+B,IAA7Br0B,EAA4B,EAA5BA,KAAMH,EAAsB,EAAtBA,MAAOy0B,EAAe,EAAfA,SAChD,OACI,eAAC,IAAD,CAAOt0B,KAAMA,EAAMu0B,SAAS,SAASC,UAAU,EAA/C,UACI,cAAC,IAAMr0B,OAAP,CAAcC,aAAW,EAAzB,SACI,cAAC,IAAMC,MAAP,UAAcR,GAAS,iBAE3B,cAAC,IAAMS,KAAP,UACKg0B,GACG,qBAAKrzB,UAAU,gCAAf,SACI,qBAAKA,UAAU,iBAAiB0O,KAAK,SAArC,SACI,sBAAM1O,UAAU,UAAhB,uC,sFClBfwzB,EAAb,WAOI,WAAoBnwB,GAAqB,yBAArBA,WAAoB,KALhCowB,kBAKgC,OAJhCC,UAAY,EAIoB,KAHhCC,aAAe,EAGiB,KAFhCC,aAAe,EAGnBzuB,KAAKsuB,aAAe,KAR5B,2CAWI,SAAQ5tB,GACJ,IAAMguB,EAAe1uB,KAAK9B,SAASywB,UAC/BtM,EAAOriB,KAAK9B,SAASywB,UACrB7tB,EAAUd,KAAK9B,SAAS0wB,aACxB7tB,EAAUf,KAAK9B,SAAS2wB,aAExBC,EAAc9uB,KAAKY,kCACnBF,EAAMI,QACNJ,EAAMK,SAINL,EAAMquB,OAAS,EACf1M,GAAQ,GAAMA,EAEdA,GAAQ,GAAMA,EAElBA,EAAO9gB,KAAKO,IAAI,GAAKP,KAAKC,IAAI6gB,EAAM,IAEpC,IAAI2M,EAAQF,EAAYpvB,IAAKoB,EACzBmuB,EAAQH,EAAYnvB,IAAKoB,EAI7BD,GAAWkuB,GAAS3M,EAAOqM,GAAgBM,EAC3CjuB,GAAWkuB,GAAS5M,EAAOqM,GAAgBO,EAE3CjvB,KAAK9B,SAASwlB,oBAAoBrB,EAAMvhB,EAASC,KAtCzD,mBAyCI,SAAML,GACF,IAAIwuB,EAAYxuB,EAAMwuB,UAClBC,EAAYzuB,EAAMyuB,UAElBC,EACA1uB,EAAM0J,OACRilB,wBACFH,EAAaA,EAAYE,EAAKlzB,MAAS,IACvCizB,EAAaA,EAAYC,EAAKjzB,OAAU,IAExC,IAAIkmB,EAAOriB,KAAK9B,SAASywB,UACrB7tB,EAAUd,KAAK9B,SAAS0wB,aACxB7tB,EAAUf,KAAK9B,SAAS2wB,aAE5B/tB,GAAWouB,EAAY7M,EACvBthB,GAAWouB,EAAY9M,EAEvBriB,KAAK9B,SAASwlB,oBAAoBrB,EAAMvhB,EAASC,KA1DzD,0BA6DI,SAAaL,GACoB,IAAzBA,EAAM4uB,QAAQzxB,SACdmC,KAAKsuB,aAAe5tB,EAAM4uB,QAC1BtvB,KAAKuuB,UAAYvuB,KAAK9B,SAASywB,UAC/B3uB,KAAKwuB,aAAexuB,KAAK9B,SAAS0wB,aAClC5uB,KAAKyuB,aAAezuB,KAAK9B,SAAS2wB,gBAlE9C,yBAsEI,SAAYnuB,GACR,GAAIV,KAAKsuB,aAAc,CACnB,IAAMiB,EAAavvB,KAAK9B,SAASsxB,YAAYH,wBACvCI,EAAczvB,KAAKsuB,aAAa,GAChCoB,EAAc1vB,KAAKsuB,aAAa,GAChCqB,EAASjvB,EAAM4uB,QAAQ,GACvBM,EAASlvB,EAAM4uB,QAAQ,GAEvBO,EAAgBtuB,KAAKe,KACvBf,KAAKgB,IAAIktB,EAAYK,QAAUJ,EAAYI,QAAS,GACpDvuB,KAAKgB,IAAIktB,EAAYM,QAAUL,EAAYK,QAAS,IAElD1tB,EAAWd,KAAKe,KAClBf,KAAKgB,IAAIotB,EAAOG,QAAUF,EAAOE,QAAS,GAC1CvuB,KAAKgB,IAAIotB,EAAOI,QAAUH,EAAOG,QAAS,IAExC1N,EAAOriB,KAAKuuB,WAAalsB,EAAWwtB,GAEpCG,GAAgBP,EAAYK,QAAUJ,EAAYI,SAAW,EAC7DG,GAAgBR,EAAYM,QAAUL,EAAYK,SAAW,EAC7DG,GAAWP,EAAOG,QAAUF,EAAOE,SAAW,EAC9CK,GAAWR,EAAOI,QAAUH,EAAOG,SAAW,EAE9CK,EAAmBpwB,KAAKY,kCAC1BovB,EAAeT,EAAWjZ,KAC1B2Z,EAAeV,EAAW1zB,KAExBizB,EAAc9uB,KAAKY,kCACrBsvB,EAAUX,EAAWjZ,KACrB6Z,EAAUZ,EAAW1zB,KAGrBiF,EAAUd,KAAKwuB,aACfztB,EAAUf,KAAKyuB,aAEfO,EAAQF,EAAYpvB,EAAI0wB,EAAiB1wB,EACzCuvB,EAAQH,EAAYnvB,EAAIywB,EAAiBzwB,EAEzC0wB,EAASvB,EAAYpvB,IAAKM,KAAK9B,SAAS0wB,aACxC0B,EAASxB,EAAYnvB,IAAKK,KAAK9B,SAAS2wB,aAE5C/tB,GAAWuvB,GAAUhO,EAAOriB,KAAKuuB,WAAa8B,EAAUrB,GAAS3sB,EAAWwtB,GAC5E9uB,GAAWuvB,GAAUjO,EAAOriB,KAAKuuB,WAAa+B,EAAUrB,GAAS5sB,EAAWwtB,GAE5E7vB,KAAK9B,SAASwlB,oBAAoBrB,EAAMvhB,EAASC,MAlH7D,wBAsHI,SAAWL,GACPV,KAAKsuB,aAAe,OAvH5B,+CA2HI,SAAkCiC,EAAgBC,EAAgBnO,EAAevhB,EAAkBC,GAC/F,IAAIrB,EAAI6wB,EACJ5wB,EAAI6wB,EAERnO,EAAOA,GAAQriB,KAAK9B,SAASywB,UAC7B7tB,EAAUA,GAAWd,KAAK9B,SAAS0wB,aACnC7tB,EAAUA,GAAWf,KAAK9B,SAAS2wB,aACnCnvB,GAAQ2iB,EACR1iB,GAAQ0iB,EAGR,IAAI+M,EAAOpvB,KAAK9B,SAASsxB,YAAYH,wBAWrC,OANA3vB,EAAKA,EAAI0vB,EAAKlzB,MAAS,IACvByD,EAAKA,EAAIyvB,EAAKjzB,OAAU,IAKjB,CAAEuD,EAHTA,EAAI6B,KAAKoI,MAAMjK,EAAIoB,GAGJnB,EAFfA,EAAI4B,KAAKoI,MAAMhK,EAAIoB,MA/I3B,+CAoJI,SAAkCrB,EAAWC,EAAW0iB,EAAevhB,EAAkBC,GACrFshB,EAAOA,GAAQriB,KAAK9B,SAASywB,UAG7BjvB,GAFAoB,EAAUA,GAAWd,KAAK9B,SAAS0wB,aAGnCjvB,GAFAoB,EAAUA,GAAWf,KAAK9B,SAAS2wB,aAGnCnvB,GAAQ2iB,EACR1iB,GAAQ0iB,EAGR,IAAI+M,EAAOpvB,KAAK9B,SAASsxB,YAAYH,wBAIrC,MAAO,CAAE3vB,EAHTA,EAAI6B,KAAKoI,MAAOjK,EAAIM,KAAK9B,SAAS0B,WAAcwvB,EAAKlzB,OAGtCyD,EAFfA,EAAI4B,KAAKoI,MAAOhK,EAAIK,KAAK9B,SAAS2B,YAAeuvB,EAAKjzB,aAhK9D,KCwBaoM,EAAb,WAUI,WAAqBrK,EAA6Bwa,GAAe,yBAA5Cxa,WAA2C,KAAdwa,OAAc,KAThEtQ,aAA4D,aASI,KAPxDqoB,iBAOwD,OALvD9vB,gBAKuD,OAHxD+vB,eAAgB,EAGwC,KAFxDC,UAAW,EAGf3wB,KAAKW,WAAa,IAAI0tB,EAAWnwB,GAXzC,2CAcI,WACI,OAAO2I,KAAKC,MACR8pB,aAAaC,QAAb,oBAAkC7wB,KAAK0Y,QAAW,QAhB9D,wBAmBI,SAAWvV,GACPytB,aAAaE,QAAb,oBAAkC9wB,KAAK0Y,MAAQ7R,KAAKoT,UAAU9W,MApBtE,yBAsBI,SAAYzC,GACa,IAAjBA,EAAMM,SACNhB,KAAK2wB,UAAW,KAxB5B,yBA2BI,SAAYjwB,GACJV,KAAK2wB,UACL3wB,KAAKW,WAAWmC,MAAMpC,GAFsC,MAIjDV,KAAKW,WAAWC,kCAC3BF,EAAMG,YAAYC,QAClBJ,EAAMG,YAAYE,SAFhBrB,EAJ0D,EAI1DA,EAAGC,EAJuD,EAIvDA,EAITK,KAAK+wB,cAAcrxB,EAAGC,KAnC9B,2BAsCI,SAAsBD,EAAWC,GAC7BK,KAAK9B,SAASoC,UAAU,CACpBjE,MAAO,QACPuG,OAAQ,GACRC,KAAM,aACNnD,IACAC,QA5CZ,uBAgDI,SAAUe,GACFV,KAAK2wB,WACL3wB,KAAK2wB,UAAW,KAlD5B,0BAqDI,SAAajwB,MArDjB,0BAuDI,SAAaA,GAA6C,IAAD,OACjDV,KAAKywB,aACL3jB,OAAO2D,aAAazQ,KAAKywB,aAI7B,IAFA,IAAMnB,EAAyB,GAEtBptB,EAAI,EAAGA,EAAIxB,EAAM4uB,QAAQzxB,OAAQqE,IAAK,CAC3C,IAAM8uB,EAAQtwB,EAAM4uB,QAAQptB,GAC5BotB,EAAQpnB,KAAK,CACT+oB,WAAYD,EAAMC,WAClBnB,QAASkB,EAAMlB,QACfC,QAASiB,EAAMjB,QACfmB,MAAOF,EAAME,MACbC,MAAOH,EAAMG,MACbC,QAASJ,EAAMI,QACfC,QAASL,EAAMK,QACfjnB,OAAQ,OAGhB1J,EAAQ,CACJ4uB,WAEJtvB,KAAKywB,YAAc3jB,OAAO0D,YAAW,WAEjC,GADA,EAAKigB,iBAAclwB,EACU,IAAzBG,EAAM4uB,QAAQzxB,OACd,EAAK6yB,eAAgB,EACrB,EAAK/vB,WAAW2gB,aAAa5gB,OAC1B,CACH,IAAM0uB,EAAO,EAAKlxB,SAASsxB,YAAYH,wBACjC2B,EAAQtwB,EAAM4uB,QAAQ,GACxB0B,GACA,EAAK5vB,YAAY,CACbyB,KAAM,QACN7B,OAAQ,EACRH,YAAa,CACTC,QAASkwB,EAAMlB,QAAUV,EAAK9Y,KAC9BvV,QAASiwB,EAAMjB,QAAUX,EAAKvzB,UAK/C,OAhGX,yBAkGI,SAAY6E,GACR,GAA6B,IAAzBA,EAAM4uB,QAAQzxB,OACdmC,KAAKW,WAAW4gB,YAAY7gB,OACzB,CACH,IAAM0uB,EAAOpvB,KAAK9B,SAASsxB,YAAYH,wBACjC2B,EAAQtwB,EAAM4uB,QAAQ,GACxB0B,GACAhxB,KAAKgD,YAAY,CACbH,KAAM,QACN7B,OAAQ,EACRH,YAAa,CACTC,QAASkwB,EAAMlB,QAAUV,EAAK9Y,KAC9BvV,QAASiwB,EAAMjB,QAAUX,EAAKvzB,UA9GtD,wBAoHI,SAAW6E,GACHV,KAAK0wB,eACL1wB,KAAK0wB,eAAgB,EACrB1wB,KAAKW,WAAW6gB,WAAW9gB,IAE3BV,KAAKiD,UAAU,CACXjC,OAAQ,EACR6B,KAAM,YA3HtB,uBAgII,SAAUnC,MAhId,qBAiII,SAAQA,MAjIZ,qBAkII,SAAQA,GACJV,KAAKW,WAAWuC,QAAQxC,KAnIhC,qBAqII,WACI,OAAO,IAtIf,qCAwII,SAAwBR,MAxI5B,oBAyII,SAAOiI,MAzIX,yBA0II,SAAYjI,GACRF,KAAKoI,aAAelI,MA3I5B,M,2OCfaoxB,EAAb,iDACYC,GAAyB,KADrC,wCAGI,WAAuB,IAAD,OAClB,OAAO,IAAI7tB,SAAQ,SAACC,EAASC,GACzB,IAAM6W,EAAU+W,UAAU1D,KAAK,UAAW,GAC1CrT,EAAQgX,gBAAkB,SAACC,GACvB,IAGIC,EAKG,EARDJ,EAAK9W,EAAQ6J,OAIdiN,EAAGK,iBAAiBvM,SAAS,UAK9BsM,EAAW,UAAGlX,EAAQoX,mBAAX,aAAG,EAAqBC,YAC/B,UALJH,EAAcJ,EAAGQ,kBAAkB,SAAU,CACzCC,QAAS,OAOjBL,EAAYM,YAAY,aAAc,aAAc,CAChDC,QAAQ,IAEZP,EAAYM,YAAY,aAAc,aAAc,CAChDC,QAAQ,IAEZ9uB,QAAQC,IAAI,+BAEhBoX,EAAQ0X,UAAY,SAACC,GACjB,EAAKb,GAAK9W,EAAQ6J,OAClBlhB,QAAQC,IAAI,kCACZM,KAEJ8W,EAAQjhB,QAAU,SAACk4B,GACftuB,QAAQhD,MAAM,0BAA2BsxB,GACzC9tB,EAAO8tB,SAnCvB,0BAyCI,SAAqBz5B,GACjB,IAAKA,EAAMe,OAAQ,CACf,IAAMq5B,EAAcp6B,EACpBA,EAAMe,OAAS,CACXW,OAAQ04B,EAAYz0B,QAAQ00B,KAAK,MACjCr5B,gBAAiBo5B,EAAY/pB,iBAAiBgqB,KAAK,MACnDp2B,MAAOm2B,EAAYn2B,MACnBC,OAAQk2B,EAAYl2B,OACpB2J,mBAAoBusB,EAAYE,0BAChClhB,MAAOghB,EAAYG,YAG3B,OAAOv6B,IArDf,6DAwDI,WAAeW,GAAf,0BAAA0M,EAAA,yDACStF,KAAKuxB,GADd,sBAEc,IAAI71B,MAAM,mBAFxB,cAIUm2B,EAAc7xB,KAAKuxB,GAAGM,YAAY,CAAC,WACnCY,EAAQZ,EAAYC,YAAY,UAChCrX,EAAUgY,EAAMngB,IAAI1Z,GAN9B,kBAOW,IAAI8K,SAAQ,SAACC,EAASC,GACzB6W,EAAQ0X,UAAY,SAACT,GACjB/tB,EAAQ,EAAK+uB,aAAajY,EAAQ6J,UAEtC7J,EAAQjhB,QAAU,SAACk4B,GACftuB,QAAQhD,MAAM,sBAAuBsxB,GACrC9tB,EAAO8tB,QAbnB,gDAxDJ,qHA0EI,WAAgBz5B,GAAhB,mBAAAqN,EAAA,yDACStF,KAAKuxB,GADd,sBAEc,IAAI71B,MAAM,mBAFxB,uBAIUsE,KAAK2yB,uBAJf,cAKUd,EAAc7xB,KAAKuxB,GAAGM,YAAY,CAAC,UAAW,aAC9CY,EAAQZ,EAAYC,YAAY,UAChCrX,EAAUgY,EAAMG,IAAN,2BACT36B,GADS,IAEZY,WAAY6N,MAAS4J,aAT7B,kBAWW,IAAI5M,SAAQ,SAACC,EAASC,GACzB6W,EAAQ0X,UAAY,SAACT,GACjB/tB,KAEJ8W,EAAQjhB,QAAU,SAACk4B,GACftuB,QAAQhD,MAAM,qBAAsBsxB,GACpC9tB,EAAO8tB,QAjBnB,gDA1EJ,2HAgGI,WAAsB94B,GAAtB,mBAAA0M,EAAA,yDACStF,KAAKuxB,GADd,sBAEc,IAAI71B,MAAM,mBAFxB,cAIUm2B,EAAc7xB,KAAKuxB,GAAGM,YAAY,CAAC,UAAW,aAC9CY,EAAQZ,EAAYC,YAAY,UAChCrX,EAAUgY,EAAMhZ,OAAO7gB,GANjC,kBAOW,IAAI8K,SAAQ,SAACC,EAASC,GACzB6W,EAAQ0X,UAAY,SAACT,GACjBtuB,QAAQC,IAAR,gBAAqBzK,EAArB,yBACA+K,KAEJ8W,EAAQjhB,QAAU,SAACk4B,GACftuB,QAAQhD,MAAM,uBAAwBsxB,GACtC9tB,EAAO8tB,QAdnB,gDAhGJ,uHAmHI,WAAkB94B,GAAlB,qBAAA0M,EAAA,yDACStF,KAAKuxB,GADd,sBAEc,IAAI71B,MAAM,mBAFxB,uBAMwBsE,KAAK2Q,SAAS/X,GANtC,UAMUX,EANV,8BAQQmL,QAAQhD,MAAM,kBAAmBxH,GARzC,8BAWQX,EAAMub,YAA+B,cAAjBvb,EAAM8C,OAXlC,0CAYeiF,KAAK4T,gBAAgBhb,IAZpC,eAcUi5B,EAAc7xB,KAAKuxB,GAAGM,YAAY,CAAC,UAAW,aAC9CY,EAAQZ,EAAYC,YAAY,UAChCrX,EAAUgY,EAAMG,IAAN,2BACT36B,GADS,IAEZub,WAAY9M,MAAS4J,aAlB7B,kBAoBW,IAAI5M,SAAQ,SAACC,EAASC,GACzB6W,EAAQ0X,UAAY,SAACT,GACjB/tB,KAEJ8W,EAAQjhB,QAAU,SAACk4B,GACftuB,QAAQhD,MAAM,uBAAwBsxB,GACtC9tB,EAAO8tB,QA1BnB,iDAnHJ,sHAkJI,WACI74B,EACAsP,EACA9J,EACA+Q,GAJJ,8BAAA9J,EAAA,yDAOStF,KAAKuxB,GAPd,sBAQc,IAAI71B,MAAM,mBARxB,cAUUm2B,EAAc7xB,KAAKuxB,GAAGM,YAAY,CAAC,WACnCY,EAAQZ,EAAYC,YAAY,UAChC1vB,EAAQqwB,EAAMrwB,MAAM,cACpBywB,EACW,QAAb1qB,EACM2qB,YAAYC,WAAWl6B,GACvBi6B,YAAYE,WAAWn6B,GAC3B4hB,EAAUrY,EAAM6wB,WAAWJ,EAAO1qB,GAjB5C,kBAkBW,IAAIzE,SAAQ,SAACC,EAASC,GACzB,IAAMtG,EAAuB,GAC7Bmd,EAAQ0X,UAAY,SAACT,GACjB,IAAMx0B,EAASud,EAAQ6J,OACvB,GAAIpnB,EAAQ,CACR,IAAMjF,EAAoB,EAAKy6B,aAAax1B,EAAO+M,OAC7CtQ,GAAU1B,EAAMe,OAAOW,QAAU,IAAIu5B,cAEtCj7B,EAAMub,YACLpE,IAAUzV,EAAOw5B,SAAS/jB,EAAO8jB,gBAEnC51B,EAAO4K,KAAKjQ,GAEZqF,EAAOO,OAASQ,EAChBnB,EAAOk2B,WAEPzvB,EAAQrG,QAGZqG,EAAQrG,IAGhBmd,EAAQjhB,QAAU,SAACk4B,GACftuB,QAAQhD,MAAM,uBAAwBsxB,GACtC9tB,EAAO8tB,QA1CnB,gDAlJJ,6HAiMI,gCAAApsB,EAAA,yDAEStF,KAAKuxB,GAFd,sBAGc,IAAI71B,MAAM,mBAHxB,cAKUm2B,EAAc7xB,KAAKuxB,GAAGM,YAAY,CAAC,UAAW,aAC9CF,EAAcE,EAAYC,YAAY,UACtCuB,EAAgB1B,EAAY2B,QAPtC,kBAQW,IAAI5vB,SAAQ,SAACC,EAASC,GACzByvB,EAAclB,UAAY,SAACT,GACvB/tB,KAEJ0vB,EAAc75B,QAAU,SAACk4B,GACrBtuB,QAAQhD,MAAM,wBAAyBsxB,GACvC9tB,EAAO8tB,QAdnB,gDAjMJ,2HAoNI,WAAuB6B,GAAvB,qBAAAjuB,EAAA,yDACStF,KAAKuxB,GADd,sBAEc,IAAI71B,MAAM,mBAFxB,cAKUm2B,EAAc7xB,KAAKuxB,GAAGM,YAAY,CAAC,WACnCY,EAAQZ,EAAYC,YAAY,UAChC1vB,EAAQqwB,EAAMrwB,MAAM,cAGpBqY,EAAUrY,EAAM6wB,WAClBM,EACMT,YAAYE,WAAWO,GACvBT,YAAYC,WAAW,GAC7BQ,EAAY,OAAS,QAd7B,kBAgBW,IAAI7vB,SAAQ,SAACC,EAASC,GACzB,IAAMtG,EAAuB,GAC7Bmd,EAAQ0X,UAAY,SAACT,GACjB,IAAMx0B,EAASud,EAAQ6J,OACvB,GAAIpnB,EAAQ,CACR,IAAMjF,EAAoBiF,EAAO+M,MAC7B3M,EAAOO,OAAS,IAAM5F,EAAMub,YAC5BlW,EAAO4K,KAAKhL,EAAO+M,OAEvB/M,EAAOk2B,gBAEPzvB,EAAQrG,IAGhBmd,EAAQjhB,QAAU,SAACk4B,GACftuB,QAAQhD,MAAM,uBAAwBsxB,GACtC9tB,EAAO8tB,QAhCnB,gDApNJ,8HAyPI,qCAAApsB,EAAA,yDACStF,KAAKuxB,GADd,sBAEc,IAAI71B,MAAM,mBAFxB,uBAI8BsE,KAAKwzB,mBAJnC,OAIQC,EAJR,mBAKWA,EAAc51B,OAAS,GALlC,wBAOckW,EAAW0f,EAAc91B,KAAI,SAAC1F,GAChC,OAAO,EAAK2b,gBAAgB3b,EAAMW,OAR9C,SAUc8K,QAAQwQ,IAAIH,GAV1B,wBAW8B/T,KAAKwzB,mBAXnC,QAWQC,EAXR,uEAzPJ,+HAwQI,qCAAAnuB,EAAA,sEAE8BtF,KAAKwzB,iBAC3B9sB,MAASgtB,SAAS,EAAG,SAASpjB,WAHtC,OAEQmjB,EAFR,mBAKWA,EAAc51B,OAAS,GALlC,wBAOckW,EAAW0f,EAAc91B,KAAI,SAAC1F,GAChC,OAAO,EAAK2b,gBAAgB3b,EAAMW,OAR9C,SAUc8K,QAAQwQ,IAAIH,GAV1B,uBAW8B/T,KAAKwzB,iBACvB9sB,MAASgtB,SAAS,EAAG,SAASpjB,WAZ1C,OAWQmjB,EAXR,uEAxQJ,6D,4BCLArwB,QAAQC,IAAIspB,oIACZ,IAOagH,EAAwB,SAACC,GAAU,MAElBz6B,mBAAS,IAFS,mBAErC06B,EAFqC,KAE9BC,EAF8B,OAGA36B,oBAAS,GAHT,mBAGrC46B,EAHqC,KAGrBC,EAHqB,OAIpB76B,mBAAS,IAJW,mBAIrC86B,EAJqC,KAI/BC,EAJ+B,OAKtB/6B,mBAAS,IALa,mBAKrCuV,EALqC,KAKhCC,EALgC,KAQtC0M,EAAQvO,OAAOsD,SAAShB,OAExB+kB,EADcrhB,IAAGhM,MAAMuU,EAAMvd,UAAU,IACf,YAExBs2B,EAAO,uCAAG,sBAAA9uB,EAAA,yDAEZqJ,EAAO,IAEFklB,EAAMQ,MAAM,wBAJL,uBAKR1lB,EAAO,yBALC,mDAUFilB,EAAMU,OAAOzX,MAAM,CACrBgX,MAAOA,EACPU,YAAaJ,IAZT,OAcRH,GAAkB,GAdV,kDAgBR5wB,QAAQhD,MAAR,MACAuO,EAAO,mBAjBC,0DAAH,qDAiCP6lB,EAAQ,uCAAG,4BAAAlvB,EAAA,6DAEbqJ,EAAO,IAFM,kBAKYilB,EAAMU,OAAO3W,OAAO,CACrCkW,QACAI,SAPK,OAKH3P,EALG,OASTsP,EAAMQ,QAAQ9P,EAAOpjB,MATZ,gDAWTkC,QAAQhD,MAAR,MACAuO,EAAO,yBAZE,yDAAH,qDAiBd,OACI,mCACI,sBACI9T,UAAU,MACVT,MAAO,CACH+B,OAAQ,QACR3B,WAAY,MACZC,YAAa,OALrB,UAQI,qBAAKI,UAAU,wBAAf,SAEI,qBACIA,UAAU,iBACVlC,IAAI,kCAGZ,sBAAKkC,UAAU,WAAf,UACI,qBACIT,MAAO,CACHswB,WAAY,IACZ/uB,SAAU,OACVb,UAAW,SAJnB,qBAUA,qBACIV,MAAO,CACHI,WAAY,MACZC,YAAa,MACbK,UAAW,OACXmB,aAAc,QALtB,8BAYCyS,GAAO,mBAAG7T,UAAU,cAAb,SAA4B6T,IACnCA,GACG,oBAAG7T,UAAU,YAAb,iFAEwB,IACpB,mBAAGyB,KAAK,2BAAR,kCAKR,sBACIlC,MAAO,CACHI,WAAY,MACZC,YAAa,MACbK,UAAW,OACX+Z,UAAW,QALnB,UASKkf,GACG,qCACI,sBAAKl5B,UAAU,aAAf,UACI,uBAAOmP,QAAQ,aAAf,yBAGA,uBACInH,KAAK,OACLhI,UAAU,eACVjC,GAAG,aACHqc,YAAY,oBACZhL,MAAOgqB,EACP/pB,SAAU,SAACC,GAAD,OACN+pB,EAAQ/pB,EAAEC,OAAOH,aAK7B,wBACIpP,UAAU,oBACVmB,QAAS,kBAAMg4B,GAAkB,IAFrC,oBAjBJ,OAyBI,wBACInxB,KAAK,SACLhI,UAAU,kBACVmB,QAAS,SAACmO,GACNA,EAAEoW,iBACFiU,KALR,wBAaNT,GACE,qCACI,sBAAKl5B,UAAU,aAAf,UACI,uBAAOmP,QAAQ,QAAf,2BACA,uBACInH,KAAK,QACLhI,UAAU,eACVjC,GAAG,QACH67B,mBAAiB,YACjBxf,YAAY,cACZhL,MAAO4pB,EACP3pB,SAAU,SAACC,GAAD,OACN2pB,EAAS3pB,EAAEC,OAAOH,MAAMmJ,cAIpC,wBACIvQ,KAAK,SACLhI,UAAU,kBACVT,MAAO,CAAE2B,MAAO,SAChBC,QAAS,SAACmO,GACNA,EAAEoW,iBACF6T,KANR,yBAcZ,sBACIh6B,MAAO,CACHI,WAAY,MACZC,YAAa,MACbK,UAAW,OACXmB,aAAc,QALtB,UAQI,uBARJ,QAWA,qBACI7B,MAAO,CACHI,WAAY,MACZC,YAAa,MACbK,UAAW,QAJnB,SAOI,oBAAGwB,KA/KH,WAKhB,IAAMo4B,EAAO5nB,OAAOsD,SAASskB,KACvBC,EAAW7nB,OAAOsD,SAASukB,SAC3BC,EAAW,UAAMD,EAAN,aAAmBD,EAAnB,kBAEjB,MADS,6DAhDS,sBAgDT,yBAA2FE,EAA3F,8CAuKgBC,GAAeh6B,UAAU,kBAAlC,UACI,mBAAGA,UAAU,mBADjB,oCCjNXi6B,EAA2C,SAAC,GAAwE,IAAtEC,EAAqE,EAArEA,uBAAwBC,EAA6C,EAA7CA,qBAAsB1xB,EAAuB,EAAvBA,IAAK2xB,EAAkB,EAAlBA,YAgB1G,OAfA37B,qBAAU,WACN,IAAMuZ,EAAWH,aAAY,WACrBuiB,GAAeA,EAAYC,cAC3B5xB,EAAIyZ,QAAQ,CAACmY,aAAcD,EAAYC,eAAenxB,MAAK,SAAAoxB,GACvDJ,EAAuBI,EAAYj0B,SACpCk0B,OAAM,WACLJ,SAIT,KACH,OAAO,WACHriB,cAAcE,MAEnB,CAACoiB,EAAa3xB,EAAKyxB,IACf,yBCtBEM,EAAwC,SAAC,GAAa,IAAX/xB,EAAU,EAAVA,IAAU,EAExBnK,oBAAS,GAFe,mBAEvDm8B,EAFuD,KAE1CC,EAF0C,KAc9D,OAVAj8B,qBAAU,WACN,IAAMuZ,EAAWH,aAAY,WACzBpP,EAAImZ,cAAc1Y,MAAK,kBAAMwxB,GAAe,MAAOH,OAAM,kBAAMG,GAAe,QAC/E,KAEH,OAAO,kBAAM5iB,cAAcE,MAC5B,CAACvP,IAKA,qBAAKzI,UAAU,qBAAqB0O,KAAK,QAAQnP,MAAO,CAAEG,QAAS+6B,EAAc,OAAS,SAA1F,SACI,+D,gBCdCE,EAAuB,SAAC,GAAa,IAAXlyB,EAAU,EAAVA,IAAU,EACjBnK,mBAAkB,IADD,mBACtCs8B,EADsC,KAC9BC,EAD8B,OAEnBv8B,mBAAiB,IAFE,mBAEtC06B,EAFsC,KAE/BC,EAF+B,OAGjB36B,mBAAiB,GAHA,mBAGtCw8B,EAHsC,KAG9BC,EAH8B,OAInBz8B,mBAAiB,GAJE,mBAItCub,EAJsC,KAI/BmhB,EAJ+B,OAMP18B,oBAAkB,GANX,mBAMtC28B,EANsC,KAMzBC,EANyB,KAQ7C,SAAShZ,IACLzZ,EAAIqZ,aAAa5Y,MAAK,SAACC,GACnB,IAAMyxB,EAASzxB,EAAK9C,KAAKu0B,QAAU,GACnCC,EAAUD,MAIlBn8B,qBAAU,WACNyjB,MACD,CAACzZ,IAEJ,IAAM0yB,EAAc,uCAAG,sBAAA1wB,EAAA,sEACbhC,EAAIwY,aAAa+X,EAAO,CAC1B8B,OAAQA,EAASjhB,EAAQ,IAAO,GAAK,GACrCA,MAAOA,IAHQ,OAKnBqI,IACAgZ,GAAe,GANI,2CAAH,qDASpB,OACI,qCACI,+CACA,sBAAKl7B,UAAU,MAAf,UACI,yBACIA,UAAU,kBACVmB,QAAS,kBAAM+5B,GAAe,IAFlC,UAII,mBAAGl7B,UAAU,gBAJjB,wBADJ,OASI,yBAAQA,UAAU,kBAAkBmB,QAAS+gB,EAA7C,UACI,mBAAGliB,UAAU,gBADjB,qBAKJ,uBACA,qBAAKA,UAAU,MAAMT,MAAO,CAAEU,UAAW,QAAzC,SACI,kCACI,gCACI,+BACI,sCACA,uCACA,8CAGR,gCACK26B,EAAO93B,KAAI,SAACmS,GAAD,OACR,+BACI,6BAAKA,EAAMmmB,UACX,6BAAKnmB,EAAM4E,QACX,gCACM5E,EAAM2E,WAAa/N,MAAS+K,IAAI3B,EAAMkb,QAAS,gBAAgBkL,UAChEpmB,EAAM2E,WAAa/N,IAAOoJ,EAAMmb,aAAenb,EAAMkb,SAASkL,eAL9DpmB,EAAMmmB,mBAY9BH,GACG,eAAC1M,EAAA,EAAD,CAAOxvB,KAAMk8B,EAAaj8B,OAAQ,kBAAMk8B,GAAe,IAAvD,UACI,cAAC3M,EAAA,EAAMrvB,OAAP,CAAcC,aAAW,EAAzB,SACI,cAACovB,EAAA,EAAMnvB,MAAP,8BAEJ,eAACmvB,EAAA,EAAMlvB,KAAP,WAEI,sBAAKW,UAAU,aAAf,UACI,uBAAOmP,QAAQ,QAAf,mBACA,uBACInH,KAAK,OACLhI,UAAU,eACVjC,GAAG,QACHqR,MAAO4pB,EACP3pB,SAAU,SAACC,GAAD,OAAO2pB,EAAS3pB,EAAEC,OAAOH,aAG3C,sBAAKpP,UAAU,aAAf,UACI,uBAAOmP,QAAQ,SAAf,oBACA,uBACInH,KAAK,SACLhI,UAAU,eACVjC,GAAG,SACHqR,MAAO0rB,EACPzrB,SAAU,SAACC,GAAD,OACNyrB,EAAUO,OAAOhsB,EAAEC,OAAOH,SAE9BzI,IAAK,GACLM,IAAK,GACLuI,KAAM,QAId,sBAAKxP,UAAU,aAAf,UACI,uBAAOmP,QAAQ,QAAf,mBACA,yBACInP,UAAU,eACVjC,GAAG,QACHqR,MAAOyK,EACPxK,SAAU,SAACC,GAAD,OACN0rB,EAASvrB,SAASH,EAAEC,OAAOH,SALnC,UAQI,wBAAQA,MAAO,EAAf,mBACA,wBAAQA,MAAO,EAAf,kBACA,wBAAQA,MAAO,EAAf,iBACA,wBAAQA,MAAO,EAAf,4BAIZ,eAACmf,EAAA,EAAMrrB,OAAP,WAEI,wBACI8E,KAAK,SACLhI,UAAU,oBACVmB,QAAS,kBAAM+5B,GAAe,IAHlC,oBAFJ,OAUI,wBACIlzB,KAAK,SACLhI,UAAU,kBACVmB,QAASg6B,EAHb,+BCvHXI,EAA4B,SAAC,GAAa,IAAX9yB,EAAU,EAAVA,IAAU,EACNnK,mBAA6B,CACrEk9B,2BAA4B,CACxBC,iBAAkB,EAClBC,4BAA6B,EAC7BC,OAAQ,KALkC,mBAC3CC,EAD2C,KAC3BC,EAD2B,OAQtBv9B,oBAAkB,GARI,mBAQ3Cw9B,EAR2C,KAQnCC,EARmC,KAU5CC,EAAkB,uCAAG,4BAAAvxB,EAAA,sEACAhC,EAAI+Y,kBAAkB,WADtB,OACjBya,EADiB,OAEvBJ,EAAkBI,EAAS51B,KAAK61B,eAFT,2CAAH,qDAKlBC,EAAkB,uCAAG,sBAAA1xB,EAAA,6DACvBsxB,GAAU,GADa,kBAGbtzB,EAAI4Z,qBAAqB,UAAW,CACtC6Z,cAAeN,IAJA,uBAOnBG,GAAU,GAPS,uEAAH,qDAexB,OAJAt9B,qBAAU,WACNu9B,MACD,IAGC,sBAAKz8B,MAAO,CAAC4a,cAAe,QAA5B,UAEI,qBAAKna,UAAU,MAAf,SACI,qBAAKA,UAAU,SAAf,SACI,qDAIR,qBAAKA,UAAU,MAAf,SACI,qBAAKA,UAAU,SAAf,SACI,qBAAKA,UAAU,eAIvB,qBAAKA,UAAU,MAAf,SACI,sBAAKA,UAAU,SAAf,UACI,wBAAOmP,QAAQ,mBAAf,+BACuBysB,EAAeJ,2BAA2BC,oBAEjE,uBACIl8B,MAAO,CAACI,WAAY,QACpBqI,KAAK,QACLrB,IAAK,EACLM,IAAK,GACLmI,MAAOwsB,EAAeJ,2BAA2BC,iBACjDz7B,UAAU,aACVjC,GAAG,mBACHsR,SAAU,SAACC,GACPusB,EAAkB,2BACXD,GADU,IAEbJ,2BAA2B,2BACpBI,EAAeJ,4BADI,IAEtBC,iBAAkBhsB,SAASH,EAAEC,OAAOH,oBAO5D,qBAAKpP,UAAU,MAAf,SACI,sBAAKA,UAAU,SAAf,UACI,wBAAOmP,QAAQ,8BAAf,0CACkCysB,EAAeJ,2BAA2BE,+BAE5E,uBACIn8B,MAAO,CAACI,WAAY,QACpBqI,KAAK,QACLrB,IAAK,EACLM,IAAK,GACLmI,MAAOwsB,EAAeJ,2BAA2BE,4BACjD17B,UAAU,aACVjC,GAAG,8BACHsR,SAAU,SAACC,GACPusB,EAAkB,2BACXD,GADU,IAEbJ,2BAA2B,2BACpBI,EAAeJ,4BADI,IAEtBE,4BAA6BjsB,SAASH,EAAEC,OAAOH,oBAOvE,qBAAKpP,UAAU,MAAf,SACI,sBAAKA,UAAU,SAAf,UACI,wBAAOmP,QAAQ,SAAf,qBACaysB,EAAeJ,2BAA2BG,UAEvD,uBACIp8B,MAAO,CAACI,WAAY,QACpBqI,KAAK,QACLrB,IAAK,EACLM,IAAK,GACLmI,MAAOwsB,EAAeJ,2BAA2BG,OACjD37B,UAAU,aACVjC,GAAG,SACHsR,SAAU,SAACC,GACPusB,EAAkB,2BACXD,GADU,IAEbJ,2BAA2B,2BACpBI,EAAeJ,4BADI,IAEtBG,OAAQlsB,SAASH,EAAEC,OAAOH,oBAUlD,qBAAKpP,UAAU,MAAf,SACI,qBAAKA,UAAU,SAAf,SACI,wBAAQA,UAAU,kBAAkBmB,QAASg7B,EAAoB/V,SAAU0V,EAA3E,SACKA,EAAS,qCACN,mBAAG97B,UAAU,2BADP,oBAGJ,iBC1IjBo8B,EAAmB,SAAC,GAAa,IAAX3zB,EAAU,EAAVA,IAAU,EACfnK,mBAAmB,IADJ,mBAClC+9B,EADkC,KAC3BC,EAD2B,KAGnCC,EAAc,uCAAG,4BAAA9xB,EAAA,sEACMhC,EAAImY,mBADV,OACb0Y,EADa,OAEnBgD,EAAS,GAAD,mBAAKD,GAAL,yBAA6B/C,EAAWjzB,KAAKtI,OAFlC,2CAAH,qDAKpB,OACI,sBAAKwB,MAAO,CAAC4a,cAAe,QAA5B,UAEI,qBAAKna,UAAU,MAAf,SACI,qBAAKA,UAAU,SAAf,SACI,oDAIR,qBAAKA,UAAU,MAAf,SACI,qBAAKA,UAAU,SAAf,SACI,qBAAKA,UAAU,eAGtBq8B,EAAMr5B,OAAS,GACZ,qBAAKhD,UAAU,MAAf,SACI,qBAAKA,UAAU,SAAf,SACI,qEAIZ,qBAAKA,UAAU,MAAf,SACI,qBAAKA,UAAU,iCAAf,SAEI,qBAAKA,UAAU,qBAAf,SACKq8B,EAAMv5B,KAAI,SAAC05B,EAAMn1B,GAAP,OACP,oBAAW5F,KAAM+6B,EAAMx8B,UAAU,kBAAjC,UACI,mBAAGA,UAAU,gBADjB,qBAAQqH,YAQxB,qBAAKrH,UAAU,MAAf,SACI,qBAAKA,UAAU,SAAf,SACI,qBAAKA,UAAU,eAGvB,qBAAKA,UAAU,MAAf,SACI,qBAAKA,UAAU,SAAf,SAEI,wBACIA,UAAU,kBACVmB,QAASo7B,EAFb,+BAQR,uBACA,cAAC,EAAD,CAAW9zB,IAAKA,IAChB,uBACA,cAAC,EAAD,CAAgBA,IAAKA,Q,yBC3DpBg0B,EAA2B,SAAC,GAAwB,IAAtBh0B,EAAqB,EAArBA,IAAKtL,EAAgB,EAAhBA,UAAgB,EAChCmB,mBAAkB,IADc,mBACrDmE,EADqD,KAC7CmR,EAD6C,OAE5BtV,oBAAS,GAFmB,mBAErDo+B,EAFqD,KAE3CC,EAF2C,KAItDtnB,EAAUC,cAEVqB,EAAU,uCAAG,gCAAAlM,EAAA,6DACTpI,EAASwJ,MAAS+K,KAAK,GAAI,SAASnB,UAD3B,SAGIhN,EAAIoO,WAAWxU,EAAQ,GAAI,IAAK,OAHpC,OAGT8G,EAHS,OAIfyK,IAEQ,UAAAzK,EAAK9C,KAAK5D,cAAV,eAAkB5C,QAAO,SAACzC,GAAD,QAAaA,EAAMub,gBAAe,IAC7DxL,MAAK,SAAC1C,EAAG2C,GACP,OAAI3C,EAAEkO,YAAcvL,EAAEuL,WACXvL,EAAEuL,WAAalO,EAAEkO,WAErB,MAXA,2CAAH,qDAgBVjW,EAAa,uCAAG,WAAOtF,GAAP,SAAAqN,EAAA,6DAClBmJ,EAAUnR,EAAO5C,QAAO,SAACwH,GAAD,OAAOA,EAAEtJ,KAAOX,EAAMW,OAD5B,SAEZ0K,EAAI6O,YAAYla,EAAMW,IAFV,2CAAH,sDAKb6+B,EAAiB,uCAAG,sBAAAnyB,EAAA,6DACtBkyB,GAAY,GADU,kBAGZ9zB,QAAQwQ,IAAI5W,EAAOK,KAAI,SAAC1F,GAAD,OAAWqL,EAAI6O,YAAYla,EAAMW,QAH5C,OAIlB6V,EAAU,IAJQ,uBAMlB+oB,GAAY,GANM,uEAAH,qDAUjBE,EAAc,uCAAG,WAAOz/B,GAAP,SAAAqN,EAAA,6DACnBmJ,EAAUnR,EAAO5C,QAAO,SAACwH,GAAD,OAAOA,EAAEtJ,KAAOX,EAAMW,OAD3B,SAEb0K,EAAI8Z,YAAYnlB,EAAMW,GAAI,CAAE4a,WAAY,OAF3B,2CAAH,sDASpB,OAJAla,qBAAU,WACNkY,MACD,CAAClO,IAGA,gCACI,gCACI,qBAAKzI,UAAU,MAAf,SACI,sBAAKA,UAAU,SAAf,UACI,qBAAIT,MAAO,CAAEuB,SAAU,OAAQkZ,UAAW,QAA1C,UACI,mBACIza,MAAO,CAAE8C,OAAQ,WACjBlB,QAAS,kBAAMkU,EAAQynB,UACvB98B,UAAU,wBAJlB,yBASA,yBACIA,UAAU,kDACVmB,QAASy7B,EACTr9B,MAAO,CACH2B,MAAO,QACPtB,YAAa,OALrB,UAQI,mBAAGI,UAAU,gBARjB,yBAYR,sBAAKA,UAAU,MAAMT,MAAO,CAAEU,UAAW,QAAzC,UACI,qBAAKD,UAAU,uBAAf,mBACA,qBAAKA,UAAU,WAAf,uBAEHyC,EAAOK,KAAI,SAAC1F,GAAD,OACR,sBACI4C,UAAU,MACVT,MAAO,CACHU,UAAW,OACX88B,aAAc,qBAJtB,UAQI,qBAAK/8B,UAAU,uBAAf,SACI,cAACg9B,EAAA,EAAD,CACI7/B,UAAWA,EACXC,MAAOA,EACPC,YAAY,MAGpB,sBACI2C,UAAU,WACVT,MAAO,CACHmwB,WAAY,OACZvV,cAAe,QAJvB,UAOI,yBACIna,UAAU,kDACVmB,QAAS,kBAAMuB,EAActF,IAC7BmC,MAAO,CACHK,YAAa,OAJrB,UAOI,mBAAGI,UAAU,gBAPjB,gBASA,yBACIA,UAAU,oDACVmB,QAAS,kBAAM07B,EAAez/B,IAFlC,UAII,mBAAG4C,UAAU,eAJjB,sBAzBC5C,EAAMW,UAmCvB,cAACq1B,EAAA,EAAD,CAAWr0B,KAAM29B,EAAU99B,MAAM,kBAAjC,2D,iBCzHCq+B,EAAqC,SAAC,GAAuB,IAAtBxD,EAAqB,EAArBA,OAAQF,EAAa,EAAbA,QAClDlkB,EAAUC,cACV8jB,EAAO,IAAI9a,gBAAgBrM,OAAOsD,SAAShB,QAAQkD,IAAI,QAkB7D,OAhBAhZ,qBAAU,WACF26B,GACA7wB,QAAQC,IAAI,uBAAwB4wB,GACpCK,EAAOrY,aAAa,CAACgY,SAAOlwB,MAAK,SAACugB,GAC9BlhB,QAAQC,IAAI,eAAgBihB,GACxBA,EAAOpjB,KAAK62B,aACZ3D,EAAQ9P,EAAOpjB,MAGnBgP,EAAQhI,KAAK,SAGjBgI,EAAQhI,KAAK,OAElB,IAEI,MCjBE8vB,EAAgC,SAAC,GAAqB,IAAnBtqB,EAAkB,EAAlBA,YAAkB,EAClCvU,mBAAkB,IADgB,mBACvDmE,EADuD,KAC/CmR,EAD+C,OAE9BtV,oBAAS,GAFqB,mBAEvDo+B,EAFuD,KAE7CC,EAF6C,KAIxDtnB,EAAUC,cAEVqB,EAAU,uCAAG,4BAAAlM,EAAA,sEACaoI,EAAY8lB,mBADzB,OACTC,EADS,OAEfhlB,EAAUglB,GAFK,2CAAH,qDAKVl2B,EAAa,uCAAG,WAAOtF,GAAP,SAAAqN,EAAA,6DAClBmJ,EAAUnR,EAAO5C,QAAO,SAACwH,GAAD,OAAOA,EAAEtJ,KAAOX,EAAMW,OAD5B,SAEZ8U,EAAYyE,YAAYla,EAAMW,IAFlB,OAGd0E,EAAOO,QAAU,GACjB2T,IAJc,2CAAH,sDAQbimB,EAAiB,uCAAG,sBAAAnyB,EAAA,6DACtBkyB,GAAY,GADU,kBAGZ9pB,EAAYuqB,qBAHA,OAIlBxpB,EAAU,IAJQ,uBAMlB+oB,GAAY,GANM,uEAAH,qDAUjBE,EAAc,uCAAG,WAAOz/B,GAAP,SAAAqN,EAAA,6DACnBmJ,EAAUnR,EAAO5C,QAAO,SAACwH,GAAD,OAAOA,EAAEtJ,KAAOX,EAAMW,OAD3B,SAEb8U,EAAYqD,UAAZ,2BACC9Y,GADD,IAEFub,gBAAYjT,KAJG,2CAAH,sDAYpB,OAJAjH,qBAAU,WACNkY,MACD,CAAC9D,IAGA,gCACI,gCACI,qBAAK7S,UAAU,MAAf,SACI,sBAAKA,UAAU,SAAf,UACI,qBAAIT,MAAO,CAAEuB,SAAU,OAAQkZ,UAAW,QAA1C,UACI,mBACIza,MAAO,CAAE8C,OAAQ,WACjBlB,QAAS,kBAAMkU,EAAQynB,UACvB98B,UAAU,wBAJlB,yBAQA,yBACIA,UAAU,kDACVmB,QAASy7B,EACTr9B,MAAO,CACH2B,MAAO,QACPtB,YAAa,OALrB,UAQI,mBAAGI,UAAU,gBARjB,yBAYR,sBAAKA,UAAU,MAAMT,MAAO,CAAEU,UAAW,QAAzC,UACI,qBAAKD,UAAU,uBAAf,mBACA,qBAAKA,UAAU,WAAf,uBAEHyC,EAAOK,KAAI,SAAC1F,GAAD,OACR,sBACI4C,UAAU,MACVT,MAAO,CACHU,UAAW,OACX88B,aAAc,qBAJtB,UAQI,qBAAK/8B,UAAU,uBAAf,SACI,cAACg9B,EAAA,EAAD,CACI7/B,UAAW,GACXC,MAAOA,EACPC,YAAY,MAGpB,sBACI2C,UAAU,WACVT,MAAO,CACHmwB,WAAY,OACZvV,cAAe,QAJvB,UAOI,yBACIna,UAAU,kDACVmB,QAAS,kBAAMuB,EAActF,IAC7BmC,MAAO,CACHK,YAAa,OAJrB,UAOI,mBAAGI,UAAU,gBAPjB,gBASA,yBACIA,UAAU,oDACVmB,QAAS,kBAAM07B,EAAez/B,IAFlC,UAII,mBAAG4C,UAAU,eAJjB,sBAzBC5C,EAAMW,UAmCvB,cAACq1B,EAAA,EAAD,CAAWr0B,KAAM29B,EAAU99B,MAAM,kBAAjC,2D,oFCxFCy+B,EAA6B,SAAC,GAAmC,IAAjC50B,EAAgC,EAAhCA,IAAKmK,EAA2B,EAA3BA,UAAWzV,EAAgB,EAAhBA,UAAgB,EACzCmB,oBAAS,GADgC,mBAClEwU,EADkE,aAE/BxU,mBAAuB,OAFQ,mBAElE0U,EAFkE,KAEnDC,EAFmD,OAGnC3U,mBAAuB,MAHY,gCAKvBA,oBAAS,IALc,mBAKlEoV,EALkE,KAK/CC,EAL+C,OAO7CrV,mBAAuB,IAPsB,mBAOlEmE,EAPkE,KAO1DmR,EAP0D,OAQnDtV,mBAAwB,MAR2B,mBAQ7DwV,GAR6D,aAS3CxV,oBAAkB,GATyB,mBASlE+V,EATkE,KASzDC,EATyD,OAU7ChW,mBAAiB,IAV4B,mBAUlEiW,EAVkE,KAU1DC,EAV0D,OAW7BlW,mBAAiB,IAXY,oBAWlEmW,GAXkE,MAWlDC,GAXkD,SAanBpW,oBAAS,GAbU,qBAalEqW,GAbkE,MAa7CC,GAb6C,SAcjCtW,oBAAS,GAdwB,qBAclEuW,GAdkE,MAcpDC,GAdoD,SAe/BxW,mBAEvC,IAjBsE,qBAelEyW,GAfkE,MAenDC,GAfmD,SAmB/C1W,mBAAuB,MAnBwB,qBAmB3D4W,IAnB2D,gBAoBrC5W,oBAAS,GApB4B,qBAoBlEjB,GApBkE,MAoBtD8X,GApBsD,MAsBjEpX,GAAOqX,cAAPrX,GACFsX,GAAUC,cAEhB7W,qBAAU,WACN,IAAIiX,EAASC,YAAW,WACpBnB,EAAUC,MACX,KACH,OAAO,WACHmB,aAAaF,MAElB,CAACjB,KAEJhW,qBAAU,WACN,GAAIV,GAAI,CAEJ,IAAMX,EAAQqF,EAAOoT,MAAK,SAACzY,GAAD,OAAWA,EAAMW,KAAOA,MAC9CX,GACA6V,EAAiB7V,GAGrBqL,EAAIqN,SAAS/X,IAAImL,MAAK,SAAC9L,GACnB6V,EAAiB7V,EAAMiJ,cAG3B4M,EAAiB,QAEtB,CAAClV,KAqEJU,qBAAU,WACDgK,GAGW,uCAAG,8BAAAgC,EAAA,6DACflC,QAAQC,IAAI,uBAEZsL,EAAO,MACPQ,GAAW,GAJI,SAMLjS,EAASwJ,MAAS+K,IAAI,EAAG,WAAWnB,UAN/B,SAOQhN,EAAIoO,WAAWxU,EAAQkS,EAAQ,IAAK,QAP5C,cAOLpL,EAPK,QAQF9C,KAAK5D,SACV8F,QAAQC,IAAI,sBAAuBW,EAAK9C,KAAK5D,OAAOO,QACpD4Q,EACIzK,EAAK9C,KAAK5D,OACL5C,QAAO,SAACzC,GAAD,OAAYA,EAAMub,cACzBxL,KAAKgJ,MAbP,kBAgBJ,GAhBI,kCAkBXrC,EAAO,yBACPvL,QAAQhD,MAAR,MAnBW,0DAAH,oDAsBhBoR,KACD,CAAClO,EAAK8L,IAET9V,qBAAU,WACN,GAAKgK,EAAL,CAIA,IAAMyO,EAAU,uCAAG,WAAOzU,GAAP,6BAAAgI,EAAA,6DAEfqJ,EAAO,MAEDzR,EAASI,EAAOsK,QAAO,SAAC9F,EAAK7J,GAC/B,OAAOsJ,KAAKO,IAAIA,EAAK7J,EAAMY,cAC5B,GANY,kBASQyK,EAAIoO,WACnBxU,EAAS,EACTkS,EACA,IACA,OAbO,OAeX,IANMpL,EATK,QAeF9C,KAAK5D,OAAQ,CACd66B,EAAej7B,EADD,cAEA8G,EAAK9C,KAAK5D,QAFV,IAElB,4BAASrF,EAA2B,SACtBY,WAAas/B,IACnBA,EAAelgC,EAAMY,YAJX,8BAUZ0N,EAAYvC,EAAK9C,KAAK5D,OAAO5C,QAAO,SAACzC,GACvC,OAAOqF,EAAO86B,WAAU,SAACl2B,GAAD,OAAOA,EAAEtJ,KAAOX,EAAMW,MAAM,KAElD8O,EAAgB1D,EAAK9C,KAAK5D,OAAO5C,QAAO,SAACzC,GAC3C,OAAOqF,EAAO86B,WAAU,SAACl2B,GAAD,OAAOA,EAAEtJ,KAAOX,EAAMW,OAAO,KAEzD6V,GAAU,SAACnR,GACP,IADkB,EACZ+6B,EAAyC,GAD7B,cAEA9xB,GAFA,IAElB,2BAA6B,CAAC,IAArBtO,EAAoB,QACrBA,EAAMub,aACN6kB,EAAWpgC,EAAMW,KAAM,EACvBwK,QAAQC,IAAR,yBACsBpL,EAAMW,GAD5B,iBALU,kDAUA8O,GAVA,IAUlB,2BAAiC,CAAC,IAAzBzP,EAAwB,QACzBA,EAAMub,aACN6kB,EAAWpgC,EAAMW,KAAM,EACvBwK,QAAQC,IAAR,yBACsBpL,EAAMW,GAD5B,iBAbU,8BAqBlB,OAHA0E,EAASA,EAAO5C,QACZ,SAACzC,GAAD,OAAYogC,EAAWpgC,EAAMW,OAE1B,sBACA0E,EAAOK,KAAI,SAAC1F,GACX,IAAMsZ,EAAe7J,EAAcgJ,MAC/B,SAACxO,GAAD,OAAOA,EAAEtJ,KAAOX,EAAMW,MAE1B,OAAI2Y,GAGGtZ,MARR,YAUAsO,EAAU7L,QAAO,SAACzC,GAAD,OAAYA,EAAMub,gBACxCxL,KAAKgJ,OA/DJ,yBAkEJ1T,GAlEI,kCAoEXqR,EAAO,yBACPvL,QAAQhD,MAAR,MArEW,0DAAH,sDA0EVqS,EAAcC,aAAY,WAC5BX,EAAWzU,KACZ,KACH,OAAO,WACHqV,cAAcF,OAEnB,CAACnP,EAAKhG,EAAQ8R,IAEjB9V,qBAAU,WAKN,IAAMkO,EAAMlK,EAAOK,KAAI,SAAC1F,GAAD,OAAWA,EAAMW,MAClC0/B,EAAY,IAAIC,IAAI/wB,GACtBA,EAAI3J,SAAWy6B,EAAUx+B,MACzB2U,GAAU,SAACnR,GAKP,OAHqBA,EAAO5C,QAAO,SAACzC,EAAOmK,GACvC,OAAOoF,EAAI+P,QAAQtf,EAAMW,MAAQwJ,KAEjB4F,KAAKgJ,SAGlC,CAAC1T,IAEJhE,qBAAU,WAiCN,OAhCAmU,EAAU9G,UAAV,+BAAArB,EAAA,MAAoB,WAAOwF,GAAP,mBAAAxF,EAAA,0DACVkzB,EAAU3xB,KAAKC,MAAMgE,IAEfjI,OAASkE,KACjByxB,EAAQ31B,OAAS41B,IAJL,iCAMen1B,EAAIqN,SAAS6nB,EAAQ5/B,IANpC,YAMN2Y,EANM,QAOKrQ,KAAK8E,UAPV,iDAUZyI,GAAU,SAACnR,GACP,IAAM8E,EAAQ9E,EAAO86B,WACjB,SAACngC,GAAD,OAAWA,EAAMW,KAAO2Y,EAAarQ,KAAKtI,MAa9C,OAVIwJ,GAAS,EACO9E,EAAOK,KAAI,SAAC1F,GACxB,OAAIA,EAAMW,KAAO2Y,EAAarQ,KAAKtI,GACxB2Y,EAAarQ,KAEjBjJ,KAGE,sBAAOqF,GAAP,CAAeiU,EAAarQ,QAExB8G,KAAKgJ,OAzBlB,2BA2BLwnB,EAAQ31B,OAAS8O,IA3BZ,kCA4BerO,EAAIsO,WA5BnB,QA4BNC,EA5BM,OA6BZ9B,GAAS8B,EAAa3Q,MA7BV,4CAApB,uDAgCO,WACHuM,EAAU9G,eAAUpG,MAEzB,CAACkN,IAEJnU,qBAAU,WACN,IAAMsZ,EAAY,uCAAG,4BAAAtN,EAAA,sEACUhC,EAAIsO,WADd,OACXC,EADW,OAEjB9B,GAAS8B,EAAa3Q,MAFL,2CAAH,qDAIlB0R,IACA,IAAMC,EAAWH,YAAYE,EAAc,KAC3C,OAAO,WACHD,cAAcE,MAEnB,CAACvP,IAEJ,IAAM2P,GAAwB,SAAChb,GAC3B,OACIA,EAAM8C,SAAWM,IAAWC,SAC5BrD,EAAM8C,SAAWM,IAAWE,YAI9ByV,GAAa,SAAC1L,EAAU2C,GAE1B,GAAIgL,GAAsB3N,KAAO2N,GAAsBhL,GACnD,OAAQ,EACL,IAAKgL,GAAsB3N,IAAM2N,GAAsBhL,GAC1D,OAAO,EAIX,GACI3C,EAAEO,SAAWoC,EAAEpC,QACfP,EAAEtM,OAAOW,QAAUsO,EAAEjP,OAAOW,QAC5B2L,EAAEvK,SAAWM,IAAWC,SACxB2M,EAAElN,SAAWM,IAAWC,QAC1B,CAEE,IAAI4X,EAAS5N,EAAEvM,MACXoa,EAASlL,EAAElP,MASf,MANgC,KAA5BuM,EAAEtM,OAAOW,OAAQyZ,SACjBF,GAAkB5N,EAAEpM,gBAEQ,KAA5B+O,EAAEjP,OAAOW,OAAQyZ,SACjBD,GAAkBlL,EAAE/O,gBAEpBga,GAAUC,EACHlL,EAAEpP,WAAayM,EAAEzM,WAErBsa,EAASD,EAGpB,OAAOjL,EAAEpP,WAAayM,EAAEzM,YAGtBwa,GAAU,uCAAG,8BAAA/N,EAAA,6DAEXgO,EAAe5M,MAAS4J,UAC5BhT,EAAOiW,SAAQ,SAACtb,GACZqb,EAAe/R,KAAKC,IAAI8R,EAAcrb,EAAMY,eAJjC,SAOIyK,EAAIoO,WACnB4B,EAAe,EACflE,EACA,IACA,QAXW,QAOTpL,EAPS,QAaN9C,KAAK5D,QAAU0G,EAAK9C,KAAK5D,OAAOO,OAAS,EAE9C4Q,GAAU,SAACnR,GAAD,MACN,sBAAIA,GAAJ,YAAgB0G,EAAK9C,KAAK5D,QAAU,KAC/B5C,QAAO,SAACzC,GAAD,OAAYA,EAAMub,cACzBxL,KAAKgJ,OAGd7B,GAAW,GArBA,2CAAH,qDAyBV/W,GAAQ,uCAAG,WAAOH,GAAP,SAAAqN,EAAA,+EAEHhC,EAAI6O,YAAYla,EAAMW,IAFnB,sDAITwK,QAAQhD,MAAR,MACAuO,EAAO,wBALE,wDAAH,sDASRtW,GAAM,uCAAG,WAAOJ,GAAP,SAAAqN,EAAA,sDACX4K,GAAQhI,KAAK,CACTiS,SAAU,IACV/K,OAAO,WAAD,OAAanX,EAAMW,MAHlB,2CAAH,sDAONN,GAAM,uCAAG,WAAOL,GAAP,SAAAqN,EAAA,sDACX4K,GAAQhI,KAAR,wBAA8BjQ,EAAMW,KADzB,2CAAH,sDAINib,GAAqB,SAAC5b,GAEpBuX,GACAK,GAAiB,2BACVD,IADS,kBAEX3X,EAAMW,IAAMgX,GAAc3X,EAAMW,OAGrCsX,GAAQhI,KAAR,iBAAuBjQ,EAAMW,MAS/Bkb,GAAmB,uCAAG,4BAAAxO,EAAA,sEAEpBqK,IAAgB,GAEVoE,EAAWC,OAAOC,KAAKrE,IAAejS,KAAI,SAAC/E,GAC7C,OAAO0K,EAAI6O,YAAYvZ,MALP,SAOd8K,QAAQwQ,IAAIH,GAPE,OAQpBtF,GAAU,SAACnR,GACP,OAAOA,EAAO5C,QAAO,SAACzC,GAAD,OAAY2X,GAAc3X,EAAMW,UAEzDiX,GAAiB,IACjBJ,IAAuB,GAZH,kDAcpBrM,QAAQhD,MAAR,MACAuO,EAAO,yBAfa,yBAiBpBgB,IAAgB,GAjBI,6EAAH,qDAqBnBwE,GAAyB7W,EAAO5C,QAAO,SAACzC,GAC1C,OACKA,EAAMub,aACNvb,EAAM8C,SAAWM,IAAWG,WACzBvD,EAAM8C,SAAWM,IAAWI,UAIlCuW,GAA4B1U,EAAO5C,QACrC,SAACzC,GAAD,OACKA,EAAMub,aACNvb,EAAM8C,SAAWM,IAAWC,SACzBrD,EAAM8C,SAAWM,IAAWE,eAGlC6Y,GAAgBpC,GAA0BtX,QAC5C,SAACzC,GAAD,OAAWA,EAAM8C,SAAWM,IAAWC,WAGrC+Y,GAAmBrC,GAA0BtX,QAC/C,SAACzC,GAAD,OAAWA,EAAM8C,SAAWM,IAAWE,cAG3C,OACI,qCACI,oBAAInB,MAAO,CAAEuB,SAAU,OAAQkZ,UAAW,QAA1C,wCAIA,sBACIha,UAAU,eACVT,MAAO,CAAEU,UAAW,OAAQka,cAAe,QAF/C,UAII,qBAAK5a,MAAO,CAAEya,UAAW,QAAzB,SACI,sBACIha,UAAU,cACVT,MAAO,CAAE6B,aAAc,QAF3B,UAII,uBACI7B,MAAO,GACP6P,MAAOqF,GACPzM,KAAK,SACLhI,UAAU,4BACVoa,YAAY,YACZ/K,SAAU,SAACC,GAAD,OAAOoF,GAAkBpF,EAAEC,OAAOH,UAGhD,sBACI7P,MAAO,CACH2B,MAAO,SAFf,WAKMyT,IACE,qCACI,yBACIpV,MAAO,CAAEG,QAAS,UAClBM,UAAU,qCACVmB,QAAS,kBACLgU,IAAe9X,KAJvB,WAOMA,IACE,mBAAG2C,UAAU,eAEhB3C,IACG,mBAAG2C,UAAU,wBAGrB,eAAC69B,EAAA,EAAD,CAAUt+B,MAAO,CAAEG,QAAS,SAAUC,WAAY,OAAlD,UACI,cAACk+B,EAAA,EAASxjB,OAAV,CAAiBC,QAAQ,SAAzB,SACI,mBAAGta,UAAU,mBAGjB,eAAC69B,EAAA,EAAStjB,KAAV,WACI,cAACsjB,EAAA,EAASrjB,KAAV,CACIrZ,QAAS,kBACLyT,IAAuB,IAF/B,yBAOA,cAACipB,EAAA,EAASrjB,KAAV,CACIrZ,QAAS,kBACLkU,GAAQhI,KACJ,oBAHZ,0CAcfsH,IACG,qCACI,wBACI3U,UAAU,qCACVmB,QAAS,WACLyT,IAAuB,GACvBI,GAAiB,KAJzB,oBASA,wBACIzV,MAAO,CAAEI,WAAY,OACrBK,UAAU,gCACVmB,QAAS,WACL8X,MAJR,+BAcpB,eAAC,IAAD,CACIwB,WAAYhY,EAAOO,OACnB0X,KAAMlC,GACNnE,QAASA,EACTsG,OACI,qCACI,uBACA,+CAPZ,UAWKxD,GAA0BnU,OAAS,GAChC,cAACrB,EAAA,EAAD,CACIC,aAAc2X,GAAcvW,OAC5BnB,gBAAiB2X,GAAiBxW,OAClC7B,QAAS,WACLwS,GAAqB,MAIhC2F,GAAuBxW,KAAI,SAAC1F,GAAD,OACxB,cAAC4/B,EAAA,EAAD,CAEI5/B,MAAOA,EACPD,UAAWA,EACXgE,QAAS6X,GACT4B,WACIjG,IAAuBI,GAAc3X,EAAMW,IAE/CV,WAAYA,IAPPD,EAAMW,aAa1BiV,GACG,cAAC9V,EAAA,EAAD,CACIC,UAAWA,EACXC,MAAO4V,EACP1V,QAAS,kBAAM+X,GAAQhI,KAAK,WAC5B9P,SAAU,SAACH,GACPG,GAASH,GACTwW,EAAUnR,EAAO5C,QAAO,SAACwH,GAAD,OAAOA,EAAEtJ,KAAOX,EAAMW,OAC9CsX,GAAQhI,KAAK,WAEjB7P,OAAQ,SAACJ,GACLI,GAAOJ,IAEXK,OAAQ,SAACL,GACLK,GAAOL,IAEXM,OA9eD,SAACN,EAAc0C,GAC1B2I,EAAI8Z,YAAYnlB,EAAMW,GAAI,CAAE+B,SAAQoJ,MAAK,SAAC40B,GACtClqB,GAAU,SAACnR,GACP,OAAOA,EAAOK,KAAI,SAACuE,GACf,OAAIA,EAAEtJ,KAAOX,EAAMW,GACR+/B,EAAIz3B,KAERgB,QAGf4L,EAAiB6qB,EAAIz3B,UAqebhJ,WAAYA,KAGpB,cAAC,IAAD,IACA,cAAC+1B,EAAA,EAAD,CAAWr0B,KAAM+T,EAAUlU,MAAM,kBAAjC,SACI,0EAEJ,cAACw0B,EAAA,EAAD,CAAWr0B,KAAM8V,GAAcjW,MAAM,kBAArC,SACI,2EAEJ,cAAC4D,EAAA,EAAD,CACIC,OAAQ0U,GACRxU,SAAU,kBAAMgR,GAAqB,IACrC5U,KAAM2U,EACNhR,cAAe,SAACtF,GACZG,GAASH,GACTwW,EAAUnR,EAAO5C,QAAO,SAACwH,GAAD,OAAOA,EAAEtJ,KAAOX,EAAMW,c,2BChoBrDggC,GAAe,WAAO,IAAD,EACYz/B,qBADZ,mBACvB0/B,EADuB,KACRC,EADQ,OAEY3/B,qBAFZ,mBAEvB4/B,EAFuB,KAERC,EAFQ,OAGQ7/B,qBAHR,mBAGvBuuB,EAHuB,KAGVC,EAHU,KAO9BruB,qBAAU,WACN,IAAMouB,EAAc,IAAI3nB,IAExB,OADA4nB,EAAeD,GACR,WACHA,EAAYrnB,aAEjB,IAEH,IAAM4nB,EAAoB,SAACnvB,GACvB,IAAM0L,EAASC,SAASC,cAAc,UACtCF,EAAOtI,MAAQpD,EAAUoD,MACzBsI,EAAOrI,OAASrD,EAAUqD,OAC1B,IAAMwI,EAAMH,EAAOI,WAAW,MAC9B,IAAKD,EACD,MAAM,IAAIjJ,MAAM,gCAGpB,OADAiJ,EAAI+d,aAAa5pB,EAAW,EAAG,GACxB0L,GAGLy0B,EAAmB,SAACngC,GACtBsK,QAAQC,IAAI,uBAAwBvK,EAAUoD,MAAOpD,EAAUqD,QAC/D,IAAMqI,EAASC,SAASC,cAAc,UACtCF,EAAOtI,MAA0B,EAAlBpD,EAAUoD,MACzBsI,EAAOrI,OAA4B,EAAnBrD,EAAUqD,OAC1B,IAAMwI,EAAMH,EAAOI,WAAW,MAC9B,IAAKD,EACD,MAAM,IAAIjJ,MAAM,gCAEpB,IAAMzD,EAAQgwB,EAAkBnvB,GAEhC,OADA6L,EAAIE,UAAU5M,EAAO,EAAG,EAAGuM,EAAOtI,MAAOsI,EAAOrI,QACzCqI,GAGL00B,EAAe,uCAAG,WACpBx4B,GADoB,eAAA4E,EAAA,yDAGfoiB,EAHe,sBAIV,IAAIhsB,MAAM,gCAJA,QAMdirB,EAAQjmB,EAAM0J,OAAOuc,QACdA,EAAM9oB,OAAS,GACxBgjB,IACI8F,EAAM,GADD,uCAEL,WAAOluB,GAAP,2CAAA6M,EAAA,yDAEUuzB,GADA7Q,EAAIvvB,GACc8rB,UAAU,aAClCuU,EAAiBD,KAEXl0B,EAAMqjB,EAAEpjB,WAAW,OAL7B,oBAOcu0B,EAAoBx0B,EAAId,aAC1B,EACA,EACAmkB,EAAE9rB,MACF8rB,EAAE7rB,QAEAiwB,EAAcb,YAAW4N,GAbvC,wBAeYH,EAAiBH,GAf7B,2BAkBQz1B,QAAQC,IAAI,cAAe,CACvB2oB,UAAWI,EAAYJ,UACvBC,UAAWG,EAAYH,UACvBC,SAAUE,EAAYF,WAE1BE,EAAYF,UAAY,EACxBE,EAAYvgB,YAAc,EAC1BugB,EAAYtgB,aAAe,EAClBpM,EAAI,EA1BrB,aA0BwBA,EAAI0sB,EAAYJ,WA1BxC,iBA2BqBrsB,EAAI,EA3BzB,aA2B4BA,EAAIysB,EAAYH,WA3B5C,wBA4BsBF,EAAOK,EAAYR,MAAMlsB,GAAGC,GAC5By5B,EAAeH,EAAiBlN,GAChCsN,EAAoBD,EACzBx0B,WAAW,MACXf,aACG,EACA,EACAu1B,EAAal9B,MACbk9B,EAAaj9B,QAEXvD,EAAK0Y,OAtC3B,UAwC0BoW,EAAY3iB,eAAe,CAC7BnM,KACA6J,OAAO,EACPuC,SAAS,EACT9I,MAAOkwB,EAAYvgB,WACnB1P,OAAQiwB,EAAYtgB,YACpB7G,OAAQo0B,EAAkBn4B,KAC1BzB,iBAAkB,CACdC,EACIA,GACC0sB,EAAYF,SAAW,IAC5BvsB,EACIA,GACCysB,EAAYF,SAAW,IAC5BhwB,MAAOk9B,EAAal9B,MACpBC,OAAQi9B,EAAaj9B,QAEzBsiB,SAAS,EACT9b,aAAc,KA1DtC,QAuCsB22B,EAvCtB,OA6DgBlN,EAAYR,MAAMlsB,GAAGC,GAAK,IAAIsB,UAAUq4B,EAAUr0B,OAAQm0B,EAAal9B,MAAOk9B,EAAaj9B,QA7D3G,QA2BuDwD,IA3BvD,wBA0BmDD,IA1BnD,wBAgEc25B,EAAoBlN,YAAWC,GACrChpB,QAAQC,IACJ,2BACAg2B,EAAkBn9B,MAClBm9B,EAAkBl9B,QAEhBo9B,EACFtR,EAAkBoR,GAChBN,EACFQ,EAAehV,UAAU,aAC7ByU,EAAiBD,GA1EzB,4CAFK,sDA+EL,CAAEv0B,QAAQ,IAvFE,2CAAH,sDA4FrB,OACI,gCACI,uBAAO3B,KAAK,OAAOqH,SAAUgvB,IAC5BL,GAAiBE,GACd,4CAEI,uBACA,qBAAKpgC,IAAKkgC,IACV,uBAJJ,YAMI,uBACA,qBAAKlgC,IAAKogC,WCnIxBS,GCLK,CACHC,OAAQ,IDKVC,GAAavsB,IAAcC,SAC3BknB,GAAS,IAAIvW,SACfxd,EACAqwB,aAAaC,QAAQ,WAAa2I,GAAOC,OACzCC,IAEEjsB,GAAuB,IAAIksB,IAC3BjsB,GAAc,IAAI4jB,EAExB,SAASsI,GAAiBzE,GAClBA,EAAY4C,cACZ2B,GAAWrsB,SAASC,QAAQC,OAA5B,+BAEc4nB,EAAY4C,cA+QnB8B,OA3Qf,WAAgB,IAAD,EAC2B1gC,mBAA6B,MADxD,mBACJ87B,EADI,KACS6E,EADT,OAEuB3gC,mBAAiB,eAFxC,mBAEJnB,EAFI,KAEO+hC,EAFP,OAGmB5gC,oBAAkB,GAHrC,mBAGJujB,EAHI,KAGKsd,EAHL,OAIqB7gC,mBAA6B,MAJlD,mBAIJ8gC,EAJI,KAIMC,EAJN,KAMLC,EAAW,WACbL,EAAe,MACflJ,aAAawJ,WAAW,eACxBV,GAAWrsB,SAASC,QAAQC,OAA5B,mBAAsDhN,GAGpD85B,EAAI,uCAAG,kCAAA/0B,EAAA,6DACTlC,QAAQC,IAAI,YADH,SAEHqK,GAAY2sB,OAFT,UAGT/F,GACKpY,eACAnY,MAAK,SAACugB,GAAD,OAAYyV,EAAazV,EAAOpjB,KAAKo5B,eAC/ChG,GAAOlY,cAAcrY,MAAK,SAACugB,GAAD,OAAY4V,EAAY5V,EAAOpjB,WACnDq5B,EAAoB3J,aAAaC,QAAQ,gBAPtC,iCAcD+I,GAHM3E,EAAcpuB,KAAKC,MACrByzB,IAZH,UAeoBjG,GAAOvX,QAAQ,CAChCmY,aAAcD,EAAYC,eAhB7B,eAeK5Q,EAfL,OAkBDwV,EAAexV,EAAOpjB,MAGtB0vB,aAAaE,QACT,cACAjqB,KAAKoT,UAAUqK,EAAOpjB,OAE1B04B,GAAiBtV,EAAOpjB,MAzBvB,UA0BqBozB,GAAO5X,UA1B5B,QA0BKA,EA1BL,OA2BDsd,IAAatd,EAAQxb,KAAKs5B,UAC1B/sB,GAAUgtB,YAAYnW,EAAOpjB,KAAK62B,aAClCtqB,GAAUitB,UA7BT,kDA+BDt3B,QAAQC,IAAR,MACAutB,aAAawJ,WAAW,eAhCvB,0DAAH,qDAqCJhG,EAAO,uCAAG,WAAOa,GAAP,SAAA3vB,EAAA,sDACZsrB,aAAaE,QAAQ,cAAejqB,KAAKoT,UAAUgb,IACnD6E,EAAe7E,GACf2E,GAAiB3E,GACjBxnB,GAAUgtB,YAAYxF,EAAY8C,aAClCtqB,GAAUitB,UALE,2CAAH,sDAgBb,OAJAphC,qBAAU,WACN+gC,MACD,IAGC,sBAAKx/B,UAAU,MAAf,UACI,cAAC,EAAD,CACIyI,IAAKgxB,GACLW,YAAaA,EACbF,uBAAwBX,EACxBY,qBAdiB,WACzBmF,OAeI,cAAC,EAAD,CAAe72B,IAAKgxB,KAEpB,eAAC,IAAD,YAEMW,GACE,eAAC,IAAD,WACI,cAAC,IAAD,CAAO0F,KAAK,IAAIC,OAAO,EAAvB,SACI,cAAC,EAAD,CAAOtG,OAAQA,GAAQF,QAASA,MAEpC,cAAC,IAAD,CAAOuG,KAAK,iBAAZ,SACI,cAAC,EAAD,CAAcrG,OAAQA,GAAQF,QAASA,MAG3C,cAAC,IAAD,CAAOuG,KAAK,IAAZ,SACI,cAAC,EAAD,CAAOrG,OAAQA,GAAQF,QAASA,SAI3Ca,GACG,sBAAKp6B,UAAU,YAAf,UACI,qBAAKA,UAAU,MAAf,SACI,qBAAKA,UAAU,YAAf,SAEKo6B,GACG,qCACI,wBACIp6B,UAAU,6BACVmB,QAAS,kBAAMm+B,KAFnB,SAKI,mBAAGt/B,UAAU,0BAGjB,cAAC,IAAD,CACIA,UAAU,6BACVggC,GAAG,SAFP,SAKI,mBAAGhgC,UAAU,kBAGjB,cAAC,IAAD,CACIA,UAAU,6BACVggC,GAAG,IAFP,SAKI,mBAAGhgC,UAAU,kBAGjB,mBACIA,UAAU,6BACVyB,KAAK,gCACL8N,OAAO,SAHX,SAMI,mBAAGvP,UAAU,qBAEjB,cAAC,IAAD,CACIA,UAAU,uBACVggC,GAAG,IACHzgC,MAAO,CACH8B,MAAO,QAEXF,QAAS,kBACL2Y,MAAM,iBAPd,SAWI,mBAAG9Z,UAAU,yBASjC,eAAC,IAAD,WACI,cAAC,IAAD,CAAO8/B,KAAK,IAAIC,OAAO,EAAvB,SAEI,cAACptB,EAAA,EAAD,CACIlK,IAAKgxB,GACL7mB,UAAWA,GACXzV,UAAWA,EACX0V,YAAaA,OAGrB,cAAC,IAAD,CAAOitB,KAAK,cAAZ,SACI,cAACntB,EAAA,EAAD,CACIlK,IAAKgxB,GACL7mB,UAAWA,GACXzV,UAAWA,EACX0V,YAAaA,OAGrB,cAAC,IAAD,CAAOitB,KAAK,SAASC,OAAO,EAA5B,SAEI,cAAC,EAAD,CACIt3B,IAAKgxB,GACL7mB,UAAWA,GACXzV,UAAWA,MAGnB,cAAC,IAAD,CAAO2iC,KAAK,aAAaC,OAAO,EAAhC,SAEI,cAAC,EAAD,CACIt3B,IAAKgxB,GACL7mB,UAAWA,GACXzV,UAAWA,MAGnB,cAAC,IAAD,CAAO2iC,KAAK,oBAAZ,SACI,cAACjc,EAAA,EAAD,CACIpb,IAAKgxB,GACLjvB,UAAWoI,GACXzV,UAAWA,EACX0V,YAAaA,OAGrB,cAAC,IAAD,CAAOitB,KAAK,kBAAZ,SACI,cAAC,EAAD,CACIr3B,IAAKgxB,GACLt8B,UAAWA,MAGnB,cAAC,IAAD,CAAO2iC,KAAK,wBAAZ,SACI,cAAC,EAAD,CACIjtB,YAAaA,OAGrB,cAAC,IAAD,CAAOitB,KAAK,YAAZ,SACI,cAAC,GAAD,MAEHje,GACG,mCACI,cAAC,IAAD,CAAOie,KAAK,SAAZ,SACI,cAAC,EAAD,CAAOr3B,IAAKgxB,YAK5B,sBAIIl6B,MAAO,CACHwB,SAAU,QACVya,OAAQ,IACRC,KAAM,IACNpa,MAAO,OACPC,OAAQ,OACRouB,WAAY,OACZ3U,gBAAiB,WAXzB,UAeKqkB,GAAYA,EAASa,aAClB,mBAAGx+B,KAAM29B,EAASa,YAAa1wB,OAAO,SAAtC,4BAIH6vB,GAAYA,EAASc,WAClB,mBACIz+B,KAAM29B,EAASc,UACf3wB,OAAO,SACPhQ,MAAO,CAAEI,WAAY,QAHzB,8BASJ,mBACI8B,KAAK,2BACLlC,MAAO,CAAEI,WAAY,QAFzB,qBAMA,uBAAMJ,MAAO,CAAE2B,MAAO,QAAStB,YAAa,QAA5C,2BACmB,IACf,mBACI6B,KAAK,2BACL8N,OAAO,SAFX,0CEvRjB4wB,GAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBn3B,MAAK,YAAkD,IAA/Co3B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASxvB,OACP,cAAC,IAAMyvB,WAAP,UACE,cAAC,GAAD,MAEFh3B,SAASi3B,eAAe,SAM1BV,M,4LCfaj0B,EAA6B,gBAC7B0xB,EAA6B,gBAE7B9mB,EAA6B,gBAE7BgoB,EAAb,iDACYrF,YADZ,OAEYyD,iBAFZ,OAGY4D,qBAHZ,iDAKI,SAAY5D,GACR/3B,KAAK+3B,YAAcA,IAN3B,uBASI,SAAU73B,GACNF,KAAK27B,gBAAkBz7B,IAV/B,qBAaI,gBAbJ,M,oHCOa23B,EAA4B,SAAC,GAA2D,IAAzD7/B,EAAwD,EAAxDA,UAAWC,EAA6C,EAA7CA,MAAOC,EAAsC,EAAtCA,WAAYud,EAA0B,EAA1BA,WAAYzZ,EAAc,EAAdA,QAC5ErD,EAAG,UAAMX,EAAN,YAAmBC,EAAMW,GAAzB,qCAAwDX,EAAMY,YADyB,EAEtEM,mBAAS,IAF6D,mBAEzFyiC,EAFyF,KAElFC,EAFkF,KAIhGviC,qBAAU,WAGN,GAAIoN,MAASW,KAAKX,IAAOzO,EAAMY,YAAa,WAAa,EAAG,CACxDgjC,EAAS,IACT,IAAM3c,EAAI1O,YAAW,WACjBqrB,EAAS,YACV,KACH,OAAO,kBAAMprB,aAAayO,OAE/B,CAACjnB,EAAMW,GAAIX,EAAMY,aAEpB,IAAIa,EAAQzB,EAAMyB,MACE,KAAhBzB,EAAMyB,QACNA,EAAQzB,EAAMe,OAAOW,QAAU,IAGnC,IAAIkB,EAAY,kBACZ4a,IACA5a,GAAa,gBAGjB,IAAIkC,EAAe,cAAUpE,GAAV,OAAgBijC,EAAhB,+BAKnB,OAJI3jC,EAAMa,YACNiE,EAAe,cAAU9E,EAAMa,UAAhB,gCAIf,sBACI+B,UAAWA,EACXT,MAAO,CACH2C,kBACA++B,iBAAkB,YAClBC,mBAAoB,SACpBrhC,OAASzC,EAAM0C,MAAQzC,EAAc,iBAAcqI,GAEvDvE,QAAS,kBAAMA,GAAWA,EAAQ/D,IARtC,WAUMwd,GAAc,qBAAK5a,UAAU,wBAAf,SACXnB,IAGJ+b,GAAc,qBAAK5a,UAAU,wBAAf,SACX,uBAAOgI,KAAK,WAAWzI,MAAO,CAC1B8B,MAAO,OACPC,OAAQ,OACR3B,WAAY,OACZM,UAAW,QACZmS,SAAO,EAAC+uB,UAAQ,MAGtB/jC,EAAM8C,SAAWM,IAAWC,SAAW,qBAAKT,UAAU,0BAAf,SACpC,mBAAGT,MAAO,CAACU,UAAW,QAASD,UAAU,2BAGzC5C,EAAM8C,SAAWM,IAAWE,YAAc,qBAAKV,UAAU,0BAAf,SACtC,mBAAGT,MAAO,CAACU,UAAW,QAASD,UAAU,6B,wPCjEhDohC,EAAuB,SAAC,GAAqB,IAApB1/B,EAAmB,EAAnBA,KAAM2/B,EAAa,EAAbA,QAAa,EACX/iC,oBAAS,GADE,mBAC9CgjC,EAD8C,KAC/BC,EAD+B,KAarD,OACI,eAACC,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,UACI,cAACC,EAAA,EAAD,CACI15B,KAAK,WACLnJ,MAAM,kBACNuT,QAASkvB,EACTjyB,SAAU,SAACC,GAAD,OAhBtBiyB,GAAkBD,QAEdD,EADAC,EACQ,GAGA56B,KAAKG,MAAsB,IAAhBH,KAAKi7B,UAAuBp4B,iBAe9C+3B,GACG,cAACG,EAAA,EAAD,UACI,cAACG,EAAA,EAAD,CACI55B,KAAK,OAGLoS,YAAY,aACZhL,MAAO1N,EACP2N,SAAU,SAACC,GAAD,OAAY+xB,EAAQ/xB,EAAEC,OAAOH,gBCZxD,SAAStE,IACZ,MAAO,CACH3M,OAAQ,CACJW,OAAQ,iDACRV,gBAAiByjC,EACjBxgC,MAAO,IACPC,OAAQ,IACRkV,MAAO,GACPvL,mBAAoB,KAExBpM,MAAO,GACPkM,cAAe,GACf+2B,YAAa,GACbjwB,aAAc,GACdtQ,MAAO,iBACPiC,MAAO,GAIf,IAAMq+B,EACF,qEAESE,EAAyB,SAAC,GAOhC,IANH/2B,EAME,EANFA,OACA8H,EAKE,EALFA,SAEAkD,GAGE,EAJF7Y,UAIE,EAHF6Y,UACArT,EAEE,EAFFA,SACAlF,EACE,EADFA,OACE,EAC0Ba,mBAAiB,IAD3C,mBACKQ,EADL,KACakP,EADb,OAE0C1P,mBACxCujC,GAHF,mBAEKt+B,EAFL,KAEqB0K,EAFrB,OAKwB3P,mBAAiB,GALzC,mBAKKkF,EALL,KAKYqK,EALZ,OAMgDvP,mBAAiB,KANjE,mBAMKmF,EANL,KAMwBsK,EANxB,OAQEzP,mBAAiB6kB,KARnB,mBAOKG,EAPL,KAOkB0e,EAPlB,OAS8B1jC,mBAAwB,MATtD,mBASK2jC,EATL,KASeC,EATf,OAUsC5jC,oBAAkB,GAVxD,mBAUK6jC,EAVL,KAUmBC,EAVnB,OAWsC9jC,mBAAiB,IAXvD,mBAWKqM,EAXL,KAWmB03B,EAXnB,OAYwB/jC,mBAAiB,kBAZzC,oBAYKiD,GAZL,MAYY2M,GAZZ,SAa0C5P,qBAb1C,qBAaKgkC,GAbL,MAaqBC,GAbrB,SAc8BjkC,mBAAiB,KAd/C,qBAcKkkC,GAdL,MAceC,GAdf,SAesBnkC,mBAAiB,IAfvC,qBAeKoD,GAfL,MAeW2/B,GAfX,MAgBIqB,GAAqBtf,IAAaD,KAhBtC,GAkBkD7kB,mBAChD8kB,IAAaD,MAnBf,qBAkBKwf,GAlBL,MAkByBC,GAlBzB,SAqBsCtkC,mBACpCokC,GAAmBrhC,OAtBrB,qBAqBGwhC,GArBH,MAqBkBC,GArBlB,SAwBwCxkC,mBACtCokC,GAAmBphC,QAzBrB,qBAwBGyhC,GAxBH,MAwBmBC,GAxBnB,MA8BIC,GAAa,WACfj1B,EAAU,IACVC,EAAkB4zB,GAClBh0B,EAAS,GACTu0B,GAAgB,GAChBF,EAAY,MACZn0B,EAAqB,KACrBi0B,EAAe7e,KACfyf,GAAsBxf,IAAaD,MACnCkf,EAAgB,IAChBI,GAAY,KACZpB,GAAQ,KAGN6B,GAAY,uCAAG,WAAO5zB,GAAP,mBAAA7E,EAAA,yDACjB6E,EAAEoW,kBACIpd,EAAOwC,KACR3M,OAAOW,OAASA,GAAU,GAC/BwJ,EAAKnK,OAAOC,gBAAkBmF,GAAkB,GAChD+E,EAAK9E,MAAQ9B,GAAO,EAAI8B,EACxB8E,EAAK0C,OAASi3B,QAAYv8B,EAC1B4C,EAAKnK,OAAO8M,mBAAqBxH,EACjC6E,EAAKxI,MAAO,EACZwI,EAAK/G,MAAQA,GACb+G,EAAK6C,WAAY,EACjB7C,EAAKnK,OAAOglC,gBAAkBb,GAC9Bh6B,EAAKnK,OAAOilC,UAAYZ,GACxBl6B,EAAKnK,OAAOuD,KAAOA,SAAQgE,EACvBsF,GACMq4B,EAAYtxB,YACd/G,EAAO7M,OAAOkD,MACd2J,EAAO7M,OAAOmD,QAElBgH,EAAKnK,OAAOkD,MAAQgiC,EAAUhiC,MAC9BiH,EAAKnK,OAAOmD,OAAS+hC,EAAU/hC,SAEzB+hC,EAAYtxB,YACd4wB,GAAmBthC,MACnBshC,GAAmBrhC,QAEvBgH,EAAKnK,OAAOkD,MAAQgiC,EAAUhiC,MAC9BiH,EAAKnK,OAAOmD,OAAS+hC,EAAU/hC,SAE/BqJ,EA7Ba,kCA8Bc8nB,YACvB9nB,EACArC,EAAKnK,OAAOkD,MACZiH,EAAKnK,OAAOmD,QAjCH,QA8BbgH,EAAKyC,cA9BQ,eAqCjBk4B,KACAjtB,EAAS1N,GAtCQ,4CAAH,sDAwEZ+1B,GAAe,uCAAG,WAAO/uB,GAAP,eAAA7E,EAAA,yDACd64B,EAAOh0B,EAAEC,OAAOuc,OAASxc,EAAEC,OAAOuc,MAAM,GAD1B,iDAKpB9F,IACIsd,GACA,SAAC1lC,GACG,GAAMA,aAAe2lC,kBAArB,CAOA,IAHA,IAAMliC,EAAQzD,EAAIyD,MACZC,EAAS1D,EAAI0D,OACf+hC,EAAYtxB,YAAsB1Q,EAAOC,GACtCqiB,YAAYC,YAAQyf,GAAYhiC,EAAOC,IAAW,IACrD+hC,EAAYzf,YAAQyf,KAEhBz9B,YAAgBy9B,EAAUhiC,MAAOgiC,EAAU/hC,SAAW,MAK9DiH,QAAQC,IAAI,aAAc66B,GAE1B,IAAM15B,EAASC,SAASC,cAAc,UAGtCF,EAAOtI,MAAQA,EACfsI,EAAOrI,OAASA,EAChB,IAAMwI,EAAMH,EAAOI,WAAW,MAC9B,GAAKD,EAAL,CAGAA,EAAIE,UAAUpM,EAAK,EAAG,EAAG+L,EAAOtI,MAAOsI,EAAOrI,QAI9C,IACMixB,EADU5oB,EAAO+f,UAAU,aACV7Q,MAAM,KAAK,GAClCwpB,EAAgB9P,GAEhByP,EACI5e,IAAama,WAAU,SAAC9yB,GAAD,OAAOA,EAAE1M,KAAOslC,EAAUtlC,OAErD6kC,GAAsBS,GACtBP,GAAiBzhC,GACjB2hC,GAAkB1hC,GAElBqI,EAAOW,aAEX,CACI9K,SAAU,KACVC,UAAW,KACXkK,QAAQ,IAtDI,2CAAH,sDA2FrB,OAhCAlL,qBAAU,WACN,GAAIuM,EAAQ,CACR,IAAM/M,EAAY+M,EAAO/M,UACrBA,GACAokC,EAAgBpkC,EAAU4a,MAAM,KAAK,IAEzC7K,EAAUhD,EAAO7M,OAAOW,QAAU,IAClCmP,EACIjD,EAAO7M,OAAOC,iBAAmByjC,GAErCh0B,EAAS,GACTq0B,EAAYl3B,EAAOjN,IACnBqkC,GAAgB,GAChBr0B,EAAqB/C,EAAO7M,OAAO8M,oBAAsB,KACzDiD,GACIyB,IAAgB+M,QAAQ1R,EAAOzJ,QAAU,EACnCyJ,EAAOzJ,MACP,kBAEVkhC,GAAYz3B,EAAO7M,OAAOilC,WAAa,UAEvCH,OAEL,CAACj4B,IAGJvM,qBAAU,WACDkM,GACD43B,QAAkB78B,KAEvB,CAACiF,IAGA,sBAAMqL,SAAUktB,GAAhB,SACI,sBAAKljC,UAAU,kBAAf,UACI,sBAAKA,UAAU,cAAf,UACI,uBACIA,UAAU,eACVoa,YAAY,iCACZhL,MAAOtQ,EACPuQ,SAAU,SAACC,GAAD,OAAOtB,EAAUsB,EAAEC,OAAOH,UAGxC,qBAAKpP,UAAU,qBAAf,SACI,yBACIgI,KAAK,SACLhI,UAAU,iCACVT,MAAO,CAAEI,WAAY,OACrBymB,UAAWtnB,GAAUgU,EAJzB,WAOMA,GACE,mBAAG9S,UAAU,uBAGhB8S,GACG,mBAAG9S,UAAU,mCAK7B,sBACIT,MAAO,CACHU,UAAW,QAFnB,UAKI,mBACIwB,KAAK,qBACLN,QAAS,kBAAMihC,GAAiBD,IAChC5iC,MAAO,CACHiC,MAAO,QACPgiC,eAAgB,aALxB,sBALJ,OAgBKrB,EACG,mBAAGniC,UAAU,sBAEb,mBAAGA,UAAU,2BAGpBmiC,GACG,sBAAKniC,UAAU,2BAAf,UACK2K,GACG,sBAAK3K,UAAU,aAAf,UACI,+CACA,qBACIT,MAAO,CACHG,QAAS,QACTC,WAAY,OACZC,YAAa,OACbJ,SAAU,QAEd1B,IAAG,gCAA2B6M,SAIxCK,IAAWL,GACT,cAAC84B,EAAA,EAAD,CACIngB,YAAaA,EACbjU,SAAU,SAACq0B,GACP1B,EAAe0B,GACfd,GACIxf,IAAasgB,OAK7B,qBAAK1jC,UAAU,aAAf,SACI,sBACIT,MAAO,CACHG,QAAS,QACTF,SAAUmL,EAAe,QAAU,QACnC1K,UAAW,OACXL,YAAa,OACbD,WAAY,QANpB,UASI,wBACI5B,GAAG,oBACHiC,UAAS,mBACTT,MAAO,CAAEG,QAAS,UAHtB,UAMI,mBAAGM,UAAU,kBANjB,OAOK2K,GAAgBK,EACX,gBACA,eACN,uBACIjN,GAAG,YACHiK,KAAK,OACLzI,MAAO,CAAEG,QAAS,QAClB2P,SAAUgvB,QAGjB1zB,GACG,wBACI3K,UAAU,oBACVmB,QAAS,kBAAMkhC,EAAgB,KAC/B9iC,MAAO,CAAEG,QAAS,UAHtB,UAMI,mBAAGM,UAAU,iBANjB,4BAYZ,sBAAKA,UAAU,aAAf,UACI,uBAAOmP,QAAQ,QAAf,mBACA,wBACInP,UAAU,eACVjC,GAAG,QACHqR,MAAO7N,GACP8N,SAAU,SAACC,GAAD,OAAOpB,GAASoB,EAAEC,OAAOH,QAJvC,SAMKO,IAAgB7M,KAAI,SAACvB,GAAD,OACjB,wBACI6N,MAAO7N,EADX,SAIKA,GAJL,gBAEkBA,YAO9B,sBAAKvB,UAAU,aAAf,UAEI,uBAAOmP,QAAQ,iBAAf,6BAGA,uBACInH,KAAK,OACLhI,UAAU,eACVjC,GAAG,iBACHqc,YAAY,gCACZhL,MAAO7L,EACP8L,SAAU,SAACC,GAAD,OACNrB,EAAkBqB,EAAEC,OAAOH,UAGnC,sBAAMpP,UAAU,WAAhB,oEAKF0B,IAAQ,sBAAK1B,UAAU,aAAf,UACN,wBAAOmP,QAAQ,QAAf,oBAA+B3L,KAE/B,uBACIwE,KAAK,QACLhI,UAAU,qBACVjC,GAAG,QACH4I,IAAI,IACJM,IAAI,KACJmI,MAAO5L,EACP6L,SAAU,SAACC,GAAD,OACNzB,EAAS4B,SAASH,EAAEC,OAAOH,WAGnC,sBAAMpP,UAAU,WAAhB,8DAIFiiC,GAAYt3B,IACV,sBAAK3K,UAAU,aAAf,UAEI,wBAAOmP,QAAQ,oBAAf,qCAE0B,IAApB1L,GAAyBkgC,QAAQ,GAFvC,OAIA,uBACI37B,KAAK,QACLhI,UAAU,qBACVjC,GAAG,oBACH4I,IAAI,OACJM,IAAI,OACJuI,KAAK,OACLJ,MAAO3L,EACP4L,SAAU,SAACC,GAAD,OACNvB,EACI2B,WAAWJ,EAAEC,OAAOH,WAIhC,sBAAMpP,UAAU,WAAhB,iFAMP2K,GAEG,sBAAK3K,UAAU,aAAf,UACI,uBAAOmP,QAAQ,iBAAf,8BAGA,yBACInP,UAAU,eACVjC,GAAG,iBACHqR,MAAOkzB,GACPjzB,SAAU,SAACC,GAAD,OACNizB,GAAkBjzB,EAAEC,OAAOH,QALnC,UAQI,wBAAQA,MAAM,GAAd,kBACCw0B,IAAgB9gC,KAAI,SAACkF,GAAD,OACjB,wBACIoH,MAAOpH,EADX,SAIKA,GAJL,eAEiBA,UAMzB,uBAAMhI,UAAU,WAAhB,oHAGkB,IACd,mBACIuP,OAAO,SACP9N,KAAK,mHAFT,yBAUZ,sBAAKzB,UAAU,aAAf,UACI,gDACgBwiC,GAASmB,QAAQ,MAEjC,uBACI37B,KAAK,QACLhI,UAAU,qBACV2G,IAAI,IACJM,IAAI,KACJuI,KAAK,MACLJ,MAAOozB,GACPnzB,SAAU,SAACC,GAAD,OACNmzB,GAAY/yB,WAAWJ,EAAEC,OAAOH,WAGxC,sBAAMpP,UAAU,WAAhB,0FAKJ,cAAC,EAAD,CACI0B,KAAMA,GACN2/B,QAASA,KAGb,qBACIrhC,UAAU,aACVT,MAAO,CAAEskC,UAAW,QAFxB,SAII,sBAAK7jC,UAAU,cAAf,UACKgL,GACG,yBACIhD,KAAK,SACLhI,UAAU,iCACVmB,QAjXf,WACjB8hC,KACAtgC,KA4W4B,UAKI,mBAAG3C,UAAU,iBALjB,gBASJ,yBACIgI,KAAK,SACLhI,UAAU,kBACVT,MAAO,CAAEI,WAAY,OACrBymB,UAAWtnB,GAAUgU,EAJzB,WAOMA,GACE,mBAAG9S,UAAU,uBAGhB8S,GACG,mBAAG9S,UAAU,2BAZrB,eAgBC2K,GACG,yBACI3C,KAAK,SACLhI,UAAU,iCACVmB,QArajB,WACf,GAAKwJ,EAAL,CAIA,IAAMrC,EAAOwC,IACbxC,EAAKnK,OAAOW,OAASA,GAAU,GAC/BwJ,EAAKnK,OAAOC,gBAAkBmF,GAAkB,GAChD+E,EAAK9E,MAAQ,EACb8E,EAAK0C,OAASi3B,QAAYv8B,EAE1B4C,EAAKnK,OAAO8M,mBAAqBxH,EACjC6E,EAAKpI,OAASM,IAAWG,UACzB2H,EAAKnK,OAAOkD,MAAQwhC,GACpBv6B,EAAKnK,OAAOmD,OAASyhC,GACrBz6B,EAAKnK,OAAOilC,UAAYZ,GACxBl6B,EAAKxI,MAAO,EACZwI,EAAK/G,MAAQA,GACToJ,IACArC,EAAKyC,cAAgBJ,GAGzBs4B,KACAxlC,EAAO6K,QArBHC,QAAQhD,MAAM,uCAoachG,MAAO,CAAEI,WAAY,OACrBymB,UAAWtnB,GAAUgU,EALzB,UAOI,mBAAG9S,UAAU,gBAPjB,6B,gCChjBpC,8CAEO,SAAS4F,EAAgBvE,EAAeC,GAC3C,IAAK,IAAI+F,EAAI,EAAGA,EAAI+b,IAAapgB,OAAQqE,IAAK,CAC1C,IAAMic,EAAcF,IAAa/b,GACjC,GAAIhG,EAAQC,GAAUgiB,EAAYjiB,MAAQiiB,EAAYhiB,OAClD,OAAO,EAMfD,GAAS,EACTC,GAAU,EACV,IAAK,IAAI+F,EAAI,EAAGA,EAAI+b,IAAapgB,OAAQqE,IAAK,CAC1C,IAAMic,EAAcF,IAAa/b,GACjC,GAAIhG,EAAQC,GAAUgiB,EAAYjiB,MAAQiiB,EAAYhiB,OAClD,OAAO,EAMf,OAAO,I,gCCvBJ,SAASiL,EAAMu3B,GAClB,OAAO,IAAIj7B,SAAQ,SAAAC,GAAO,OAAImJ,OAAO0D,WAAW7M,EAASg7B,MAD7D,mC,gCCCA,oEAAO,IAAMn0B,EAAkB,CAC3B,iBACA,eACA,cACA,mBACA,kBACA,OACA,aACA,yBACA,cACA,iBACA,gBACA,cACA,aACA,QACA,sBAISi0B,EAAkB,CAC3B,QACA,MACA,QACA,SACA,WACA,MACA,WACA,gBACA,U,6HCREG,EAAwB,SAAC,GAAuC,IAArC9zB,EAAoC,EAApCA,QAASgK,EAA2B,EAA3BA,UAAW+pB,EAAgB,EAAhBA,UAAgB,EACzC1lC,qBAAW2R,GAD8B,mBAC1DlR,EAD0D,KACpDklC,EADoD,KAgBjE,OAbAxlC,qBAAU,WAGN,GAFAwlC,IAAUh0B,GAENA,EAAS,CACT,IAAMi0B,EAAUvuB,YAAW,WACvBsuB,GAAQ,KACT,KACH,OAAO,WACHruB,aAAasuB,OAGtB,CAACj0B,EAASgK,IAERlb,EAKD,sBAAKiB,UAAS,sBAAiBgkC,EAAjB,YAA8BjlC,EAAO,OAAS,QAA5D,UACI,wBACIiJ,KAAK,SACLhI,UAAU,QACVmB,QAAS,kBAAM8iC,GAAQ,IAH3B,kBAOCh0B,KAZE,MAiBFk0B,EAA+B,SAAC,GAA4B,IAA1Bl0B,EAAyB,EAAzBA,QAASgK,EAAgB,EAAhBA,UACpD,OACI,cAAC8pB,EAAD,CAAO9zB,QAASA,GAAW,GAAIgK,UAAWA,EAAW+pB,UAAU,YAI1DI,EAAiC,SAAC,GAA4B,IAA1Bn0B,EAAyB,EAAzBA,QAASgK,EAAgB,EAAhBA,UACtD,OACI,cAAC8pB,EAAD,CAAO9zB,QAASA,GAAW,GAAIgK,UAAWA,EAAW+pB,UAAU,c,oNCjD1Dz/B,EAAb,kDAYI,WAAYlB,GAAqB,IAAD,8BAC5B,cAAMA,EAAU,WAZZuB,sBAWwB,IAVxB0iB,6BAUwB,IATxB3hB,cASwB,IAJxBzB,SAAU,EAIc,EAZpC,8CAgBI,SAAWoE,GACPA,EAAI,2BACGnD,KAAKR,WACL2D,GAEP,kEAAiBA,GACjBnD,KAAKP,iBAAmB0D,EAAK1D,kBAAoB,CAC7CC,EAAG,EACHC,EAAG,EACHzD,MAAO,IACPC,OAAQ,KAEZ6D,KAAKQ,SAAW2C,EAAK3C,SAChBR,KAAKQ,WACNR,KAAKP,iBAAmBO,KAAKk/B,MAAMl/B,KAAKP,mBAE5CO,KAAKqL,SAhCb,mBAmCI,SAAc+jB,GACV,IAAMvjB,EAAa7L,KAAK9B,SAAS0B,WAC3BkM,EAAc9L,KAAK9B,SAAS2B,YAC9BH,EAAI0vB,EAAK1vB,EACTC,EAAIyvB,EAAKzvB,EACTzD,EAAQkzB,EAAKlzB,MACbC,EAASizB,EAAKjzB,OAQlB,OANAuD,EAAI6B,KAAKO,IAAI,EAAGP,KAAKC,IAAI9B,EAAGmM,EAAa7L,KAAKP,iBAAkBvD,QAChEyD,EAAI4B,KAAKO,IAAI,EAAGP,KAAKC,IAAI7B,EAAGmM,EAAcsjB,EAAKjzB,SAKxC,CACHuD,EALJA,EAAI6B,KAAKC,IAAI9B,EAAGmM,EAAaujB,EAAKlzB,OAM9ByD,EALJA,EAAI4B,KAAKC,IAAI7B,EAAGmM,EAAcsjB,EAAKjzB,QAM/BD,MALJA,EAAQqF,KAAKC,IAAItF,EAAO2P,GAMpB1P,OALJA,EAASoF,KAAKC,IAAIrF,EAAQ2P,MAhDlC,kBAyDI,WACI9L,KAAK9B,SAASulB,oBAAoBzjB,KAAKP,kBACvCO,KAAK9B,SAASihC,2BAA2Bn/B,KAAKmiB,2BA3DtD,yBA8DI,SAAYzhB,GACU,SAAdA,EAAMmC,KACN7C,KAAKgD,YAAYtC,GACO,IAAjBA,EAAMM,QACbhB,KAAKP,iBAAmBO,KAAKmiB,wBAC7BniB,KAAKmiB,6BAA0B5hB,EAC/BP,KAAKqL,OACLrL,KAAKF,WAAW,CACZL,iBAAkBO,KAAKP,oBAEH,IAAjBiB,EAAMM,SACbhB,KAAKjB,SAAU,KAzE3B,yBA6EI,SAAY2B,GACWV,KAAK9B,SAAS0B,WACbI,KAAK9B,SAAS2B,YAClC,GAAIG,KAAKjB,QACLiB,KAAKW,WAAWmC,MAAMpC,OACnB,CAAC,IAAD,EACYV,KAAKW,WAAWC,kCAC3BF,EAAMG,YAAYC,QAClBJ,EAAMG,YAAYE,SAFhBrB,EADH,EACGA,EAAGC,EADN,EACMA,EAMTD,EAAyB,GAArB6B,KAAKoI,MAAMjK,EAAI,IACnBC,EAAyB,GAArB4B,KAAKoI,MAAMhK,EAAI,IAEnBD,GAAK,IACLC,GAAK,IAELK,KAAKmiB,wBAA0B,CAC3BziB,EAAGA,EACHC,EAAGA,EACHzD,MAAO8D,KAAKP,iBAAkBvD,MAC9BC,OAAQ6D,KAAKP,iBAAkBtD,QAG9B6D,KAAKQ,WACNR,KAAKmiB,wBAA0BniB,KAAKk/B,MAAMl/B,KAAKmiB,0BAInDniB,KAAKqL,UA3GjB,uBA+GI,SAAU3K,GACe,IAAjBA,EAAMM,QAA8B,SAAdN,EAAMmC,OAC5B7C,KAAKP,iBAAmBO,KAAKmiB,wBAC7BniB,KAAKmiB,6BAA0B5hB,EAC/BP,KAAKqL,OACLrL,KAAKF,WAAW,CACZL,iBAAkBO,KAAKP,oBAG/BO,KAAKjB,SAAU,IAxHvB,0BA2HI,SAAa2B,GACTV,KAAKmiB,6BAA0B5hB,EAC/BP,KAAKjB,SAAU,EACfiB,KAAKqL,SA9Hb,qBAiII,SAAQ3K,GACJV,KAAKW,WAAWuC,QAAQxC,KAlIhC,qBAqII,WAGI,OADAV,KAAK9B,SAASihC,gCAA2B5+B,IAClC,MAxIf,GAAmCgI,KAoJtB6O,EAAoC,SAAC,GAK3C,IAJHlZ,EAIE,EAJFA,SACAuK,EAGE,EAHFA,KACAsB,EAEE,EAFFA,gBACAvJ,EACE,EADFA,SAEM4+B,EAAe3+B,YACjBvC,EAAS0B,WACT1B,EAAS2B,aAHX,EAKoC1G,mBAAS6kB,KAL7C,mBAKKG,EALL,KAKkB0e,EALlB,OAMsB1jC,mBAAS,GAN/B,mBAMKW,EANL,KAMWulC,EANX,KAsDF,SAASn1B,EAASq0B,EAAuBzkC,GACrC,IAAMqJ,EAAOsF,EAAKjJ,UACZ2e,EAAcF,IAAasgB,GACjC,GAAIp7B,EAAK1D,iBAAkB,CACvB,IAAMuvB,EACF7rB,EAAK1D,iBAAiBvD,MAAQiiB,EAAYjiB,MAAQpC,EAChDm1B,EACF9rB,EAAK1D,iBAAiBtD,OAASgiB,EAAYhiB,OAASrC,EACxDqJ,EAAK1D,iBAAiBvD,MAAQqF,KAAKoI,MAAMwU,EAAYjiB,MAAQpC,GAC7DqJ,EAAK1D,iBAAiBtD,OAASoF,KAAKoI,MAChCwU,EAAYhiB,OAASrC,GAEzBqJ,EAAK1D,iBAAiBC,GAAKsvB,EAAQ,EACnC7rB,EAAK1D,iBAAiBE,GAAKsvB,EAAQ,EAC9BzuB,IAED2C,EAAK1D,iBAAiBC,EAAI6B,KAAKoI,MAC3BpI,KAAKO,IACD,EACAP,KAAKC,IACD2B,EAAK1D,iBAAiBC,EACtBxB,EAAS0B,WAAauD,EAAK1D,iBAAiBvD,SAIxDiH,EAAK1D,iBAAiBE,EAAI4B,KAAKoI,MAC3BpI,KAAKO,IACD,EACAP,KAAKC,IACD2B,EAAK1D,iBAAiBE,EACtBzB,EAAS2B,YAAcsD,EAAK1D,iBAAiBtD,WAMjEsM,EAAK3I,WAAW,CACZL,iBAAkB0D,EAAK1D,mBAI/B,OAvFAnG,qBAAU,WAMN,GAAqB,IALAmH,YACjBvC,EAAS0B,WACT1B,EAAS2B,cAGakK,EAAiB,CACvC,IAAMoU,EAAcvR,YAChB1O,EAAS0B,WACT1B,EAAS2B,aAEbg9B,EAAe1e,EAAYvlB,IAC3B6P,EAAK3I,WAAW,CACZL,iBAAkB,CACdC,EAAG,EACHC,EAAG,EACHzD,MAAOiiB,EAAYjiB,MACnBC,OAAQgiB,EAAYhiB,QAExBqE,iBAED,CACH,IAAM2C,EAAOsF,EAAKjJ,UAClB,GAAI2D,EAAK1D,iBAAkB,CAEvB,IAAM0e,EAAcvR,YAChBzJ,EAAK1D,iBAAiBvD,MACtBiH,EAAK1D,iBAAiBtD,QAE1B0gC,EAAe1e,EAAYvlB,IAC3BymC,EAAQl8B,EAAK1D,iBAAiBvD,MAAQiiB,EAAYjiB,OAClDuM,EAAK3I,WAAWqD,QAGhBA,EAAK1D,iBAAmB,CACpBC,EAAG,EACHC,EAAG,EACHzD,MAAO+hB,IAAaE,GAAajiB,MACjCC,OAAQ8hB,IAAaE,GAAahiB,QAEtCgH,EAAK3C,SAAWA,EAChBiI,EAAK3I,WAAWqD,MAGzB,CAACsF,IA4CA,qCACK22B,EAAe,GACZ,cAAC,IAAD,CACIjhB,YAAaA,EACbjU,SAAU,SAACq0B,GACPr0B,EAASq0B,EAAezkC,GACxB+iC,EAAe0B,MAI3B,sBAAK1jC,UAAU,aAAf,UACI,wBAAOmP,QAAQ,OAAO5P,MAAO,CAAE8B,MAAO,QAAtC,iBAEI,wBACIrB,UAAU,uBACVT,MAAO,CAAE2B,MAAO,SAFpB,UAIKwF,KAAKoI,MAAa,IAAP7P,GAJhB,UAQJ,uBACI+I,KAAK,QACLhI,UAAU,qBACVjC,GAAG,OACH4I,IAAI,IACJM,IAAI,IACJuI,KAAK,MACLJ,MAAOnQ,EACPoQ,SAAU,SAACxJ,GACPwJ,EAASiU,EAAa5T,WAAW7J,EAAM0J,OAAOH,QAC9Co1B,EAAQ90B,WAAW7J,EAAM0J,OAAOH,mB,gCCtSxD,0DAUaq0B,EAAiC,SAAC,GAAyC,IAAvCngB,EAAsC,EAAtCA,YAAajU,EAAyB,EAAzBA,SAAU+W,EAAe,EAAfA,SAC9Duc,EAAqBvf,IAAaE,GACxC,OACI,sBAAKtjB,UAAU,aAAf,UACI,qBACIT,MAAO,CACHskC,UAAW,QACXnkC,QAAS,OACT+kC,WAAY,UAJpB,SAQI,qBACIllC,MAAO,CACH8B,MAAOshC,EAAmBthC,MAAQ,EAClCC,OAAQqhC,EAAmBrhC,OAAS,EAEpCojC,OAAQ,mBACRtiC,OAAQ,YAIpB,wBAAO7C,MAAO,CAAC8B,MAAO,QAAtB,yBAEI,uBAAOrB,UAAU,uBAAuBT,MAAO,CAAC2B,MAAO,SAAvD,SACKyhC,EAAmBtf,iBAG5B,uBACIrb,KAAK,QACLoe,SAAUA,EACVpmB,UAAU,qBACV2G,IAAK,EACLM,IAAKmc,IAAapgB,OAAS,EAC3BoM,MAAOkU,EACPjU,SAAU,SAACC,GACPD,EAASI,SAASH,EAAEC,OAAOH,iB","file":"static/js/main.47fc6677.chunk.js","sourcesContent":["import React, { FC, useEffect, useRef, useState } from \"react\";\nimport { Modal } from \"react-bootstrap\";\nimport { CreateImageInput, Image, StatusEnum } from \"../client/api\";\nimport { LocalImage } from \"../lib/localImagesStore\";\nimport { getUpscaleLevel } from \"../lib/upscale\";\n\ninterface ImagePopupProps {\n    assetsUrl: string;\n    image: LocalImage;\n    censorNSFW: boolean;\n    onClose: () => void;\n    onDelete?: (image: LocalImage) => void;\n    onFork?: (image: LocalImage) => void;\n    onEdit?: (image: LocalImage) => void;\n    onNSFW?: (image: LocalImage, nsfw: boolean) => void;\n    onSave?: (image: LocalImage) => void;\n}\n\nexport const ImagePopup: FC<ImagePopupProps> = ({\n    assetsUrl,\n    image,\n    censorNSFW,\n    onClose,\n    onDelete,\n    onFork,\n    onEdit,\n    onNSFW,\n    onSave,\n}) => {\n    const img = useRef<HTMLImageElement>(null);\n    let src = `${assetsUrl}/${image.id}.image.png?updated_at=${image.updated_at}`;\n    if (image.imageData) {\n        src = image.imageData;\n    }\n    let score = image.score;\n    if (\n        image.params.negative_prompt &&\n        image.negative_score != 0\n    ) {\n        score -= image.negative_score;\n    }\n    const [showNSFW, setShowNSFW] = useState(false);\n\n    const statusBadge = (status: string) => {\n        const displayStatus = status.charAt(0).toUpperCase() + status.slice(1);\n        let icon = \"fa fa-question-circle\";\n        switch (status) {\n            case StatusEnum.Pending:\n                icon = \"fas fa-hourglass-half\";\n                break;\n            case StatusEnum.Processing:\n                icon = \"fas fa-cog fa-spin\";\n                break;\n            case StatusEnum.Completed:\n                icon = \"fas fa-check\";\n                break;\n            case StatusEnum.Saved:\n                icon = \"fas fa-save\";\n                break;\n            case StatusEnum.Error:\n                icon = \"fas fa-exclamation-circle\";\n                break;\n        }\n        return (\n            <>\n                <span style={{ fontSize: \"24px\" }}>\n                    <i\n                        className={`${icon} status-badge status-badge-${status}`}\n                        style={{\n                            fontSize: \"10px\",\n                            position: \"relative\",\n                            top: \"-1px\",\n                        }}\n                    ></i>\n                    &nbsp;{displayStatus}\n                </span>\n            </>\n        );\n    };\n\n    useEffect(() => {\n        if (!img.current) {\n            return;\n        }\n        img.current.onerror = () => {\n            if (!img.current) {\n                return;\n            }\n            img.current.src = \"/images/default.png\";\n        };\n    }, [img]);\n\n    let title = image.label;\n    if (!title) {\n        title = image.params.prompt!;\n    }\n\n    // if open, show modal with image\n    return (\n        <Modal show={true} onHide={onClose} size=\"xl\">\n            <Modal.Header closeButton>\n                <Modal.Title>{title}</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <img\n                    ref={img}\n                    style={{\n                        maxWidth: \"100%\",\n                        maxHeight: \"1024px\",\n                        display: \"block\",\n                        marginLeft: \"auto\",\n                        marginRight: \"auto\",\n                        filter: (image.nsfw && censorNSFW) && !showNSFW ? \"blur(30px)\" : \"\",\n                    }}\n                    id={`image-popup-${image.id}`}\n                    src={src}\n                    alt={image.label}\n                />\n                {/* List these fields: status, iterations, phrases */}\n                <div className=\"row\">\n                    <div className=\"col-lg-12\"></div>\n                </div>\n                {/* controls */}\n                <div className=\"row\">\n                    <div className=\"col-lg-12\">\n                        <div\n                            className=\"image-popup-controls\"\n                            style={{ marginTop: \"40px\" }}\n                        >\n                            {statusBadge(image.status)}\n                            <div style={{ float: \"right\" }}>\n                                {onFork &&\n                                    (image.status === StatusEnum.Saved ||\n                                        image.status ===\n                                            StatusEnum.Completed) && (\n                                        <button\n                                            className=\"btn btn-secondary btn-sm image-popup-button\"\n                                            onClick={() => onFork(image)}\n                                            style={{ marginRight: \"5px\" }}\n                                        >\n                                            <i className=\"fas fa-code-branch\"></i>\n                                            &nbsp;VARIATIONS\n                                        </button>\n                                    )}\n                                {onDelete && (\n                                    <button\n                                        className=\"btn btn-danger btn-sm image-popup-delete-button\"\n                                        onClick={() =>\n                                            onDelete && onDelete(image)\n                                        }\n                                        style={{ marginRight: \"5px\" }}\n                                    >\n                                        <i className=\"fas fa-trash-alt\"></i>\n                                        &nbsp;DELETE\n                                    </button>\n                                )}\n                                {onEdit && (\n                                    <button\n                                        className=\"btn btn-primary btn-sm image-popup-button edit-button\"\n                                        onClick={() => onEdit && onEdit(image)}\n                                        style={{ marginRight: \"5px\" }}\n                                    >\n                                        <i className=\"fas fa-edit\"></i>\n                                        &nbsp;EDIT\n                                    </button>\n                                )}\n                                {onSave && (\n                                    <button\n                                        className=\"btn btn-primary btn-sm image-popup-button\"\n                                        onClick={() => onSave && onSave(image)}\n                                        style={{ marginRight: \"5px\" }}\n                                    >\n                                        <i className=\"fas fa-save\"></i>\n                                        &nbsp;SAVE\n                                    </button>\n                                )}\n                                {(image.nsfw && censorNSFW) && (\n                                    <button\n                                        className=\"btn btn-primary btn-sm image-popup-button\"\n                                        onClick={() => setShowNSFW(!showNSFW)}\n                                        style={{ marginRight: \"5px\" }}\n                                    >\n                                        <i className=\"fas fa-eye\"></i>\n                                        &nbsp;{showNSFW ? \"HIDE\" : \"SHOW\"}\n                                    </button>\n                                )}\n                            </div>\n                        </div>\n                        <div\n                            className=\"image-popup-controls\"\n                            style={{ marginTop: \"28px\", marginBottom: \"85px\" }}\n                        >\n                            {/* Horde interface doesn't support score yet */}\n                            {/* <div>\n                                Similarity to prompt: {(score * 200).toFixed(2)}\n                                %\n                            </div> */}\n                            <div>\n                                Image dimensions: {image.params.width} x {image.params.height}\n                            </div>\n                            <div>\n                                Model: {image.model}\n                            </div>\n                            {image.nsfw && (\n                                <>\n                                    <div>\n                                        {/* alert warning icon */}\n                                        <i\n                                            className=\"fas fa-exclamation-triangle\"\n                                            style={{\n                                                color: \"orange\",\n                                                fontSize: \"18px\",\n                                                position: \"relative\",\n                                                top: \"2px\",\n                                            }}\n                                        ></i>\n                                        &nbsp;May contain NSFW content\n                                    </div>\n                                    {onNSFW && (\n                                        <a\n                                            href=\"javascript:void(0)\"\n                                            onClick={() =>\n                                                onNSFW(image, false)\n                                            }\n                                        >\n                                            Mark as Safe for Work\n                                        </a>\n                                    )}\n                                </>\n                            )}\n                            {image.params.seed && (\n                                <div>\n                                    Seed: {image.params.seed}\n                                </div>\n                            )}\n                            {!image.nsfw && (\n                                <>\n                                    <div>\n                                        {/* green check icon */}\n                                        <i\n                                            className=\"fas fa-check\"\n                                            style={{\n                                                color: \"green\",\n                                                fontSize: \"18px\",\n                                                position: \"relative\",\n                                                top: \"2px\",\n                                            }}\n                                        ></i>\n                                        &nbsp;Safe for Work\n                                    </div>\n                                    {onNSFW && (\n                                        <a\n                                            href=\"javascript:void(0)\"\n                                            onClick={() =>\n                                                onNSFW(image, true)\n                                            }\n                                        >\n                                            Mark as Not Safe for Work\n                                        </a>\n                                    )}\n                                </>\n                            )}\n                        </div>\n                    </div>\n                </div>\n            </Modal.Body>\n        </Modal>\n    );\n};\n","import React, { FC, useEffect, useState } from \"react\";\n\ninterface Props {\n    pendingCount: number;\n    processingCount: number;\n    onClick?: () => void;\n}\n\nexport const PendingImagesThumbnail: FC<Props> = ({\n    pendingCount,\n    processingCount,\n    onClick,\n}) => {\n    const [hover, setHover] = useState(false);\n\n    // on mouse in/out, set hover state\n    const onMouseEnter = () => setHover(true);\n    const onMouseLeave = () => setHover(false);\n    let icon = (\n        <i style={{ marginTop: \"20px\" }} className=\"fa fa-hourglass-half\"></i>\n    );\n\n    if (processingCount > 0) {\n        icon = (\n            <i style={{ marginTop: \"20px\" }} className=\"fa fa-cog fa-spin\"></i>\n        );\n    }\n\n    return (\n        <div\n            onMouseEnter={onMouseEnter}\n            onMouseLeave={onMouseLeave}\n            style={{\n                backgroundImage: `url(/images/default.png)`,\n                backgroundSize: \"contain\",\n                width: \"128px\",\n                height: \"128px\",\n                margin: \"8px\",\n                float: \"left\",\n                cursor: \"pointer\",\n            }}\n            onClick={onClick}\n        >\n            {hover && (\n                <div\n                    style={{\n                        background: \"rgba(255, 255, 255, 0.5)\",\n                        color: \"black\",\n                        width: \"100%\",\n                        height: \"100%\",\n                        lineHeight: \"1\",\n                        fontSize: \"20px\",\n                    }}\n                >\n                    <br/>\n                    {pendingCount > 0 && (\n                        <div style={{ marginBottom: \"24px\" }}>\n                            {pendingCount} pending\n                        </div>\n                    )}\n                    {processingCount > 0 && (\n                        <div>{processingCount} processing</div>\n                    )}\n                </div>\n            )}\n            {!hover && (\n                <div\n                    style={{\n                        background: \"rgba(255, 255, 255, 0.3)\",\n                        color: \"#555\",\n                        width: \"100%\",\n                        height: \"100%\",\n                        fontSize: \"80px\",\n                    }}\n                >\n                    {icon}\n                </div>\n            )}\n        </div>\n    );\n};\n","import React, {FC, useEffect, useState} from \"react\";\nimport { Modal } from \"react-bootstrap\";\nimport { Image } from \"../client/api\";\n\ninterface Props {\n    images: Image[];\n    onDeleteImage: (image: Image) => void;\n    onCancel: () => void;\n    show: boolean;\n}\n\nexport const PendingImages: FC<Props> = ({\n    images,\n    onDeleteImage,\n    onCancel,\n    show,\n}) => {\n\n    function imageIcon(image: Image) {\n        if (image.status === \"pending\") {\n            return <i className=\"fa fa-hourglass-half\"></i>;\n        } else if (image.status === \"processing\") {\n            return <i className=\"fa fa-cog fa-spin\"></i>;\n        }\n    }\n\n    const truncate = (phrases: string) => {\n        if (phrases.length > 35) {\n            return phrases.substring(0, 35) + \"...\";\n        }\n        return phrases;\n    }\n\n    // refactor from table to div layout\n    const pendingDiv = (\n        <div>\n            <div style={{marginBottom: \"8px\"}}>\n                <div style={{display: \"inline-block\", width: \"100px\"}}>\n                    Status\n                </div>\n                <div style={{display: \"inline-block\", width: \"250px\"}}>\n                    Phrases\n                </div>\n                <div style={{display: \"inline-block\", width: \"100px\"}}>\n                    Action\n                </div>\n            </div>\n            {images.map((image) => (\n                <div key={image.id} style={{marginBottom: \"8px\"}}>\n                    <div style={{display: \"inline-block\", width: \"100px\"}}>\n                        {imageIcon(image)}&nbsp;{image.status}\n                    </div>\n                    <div style={{display: \"inline-block\", width: \"250px\"}}>\n                        {/* if more than 30 chars, truncate with ellipsis*/}\n                        {truncate(image.params.prompt || \"\")}\n                    </div>\n                    <div style={{display: \"inline-block\", width: \"100px\"}}>\n                        <button\n                            className=\"btn btn-danger btn-sm image-popup-delete-button\"\n                            onClick={() => onDeleteImage(image)}\n                        >\n                            <i className=\"fa fa-trash\"></i>&nbsp;Delete\n                        </button>\n                    </div>\n                </div>\n            ))}\n        </div>\n    );\n\n    return (\n        <Modal show={show} onHide={onCancel}>\n            <Modal.Header closeButton>\n                <Modal.Title>Pending Images</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                {pendingDiv}\n            </Modal.Body>\n            <Modal.Footer>\n                <button className=\"btn btn-secondary\" onClick={onCancel}>\n                    Close\n                </button>\n            </Modal.Footer>\n        </Modal>\n    );\n};","import React, { FC, useState, useEffect, useRef } from \"react\";\nimport { Prompt } from \"react-router\";\nimport { loadImageAsync } from \"../../lib/loadImage\";\n\nimport { sleep } from \"../../lib/sleep\";\nimport { defaultArgs } from \"../../components/ImagePrompt\";\nimport { Tool, BaseTool } from \"./tool\";\nimport { Renderer } from \"./renderer\";\nimport { Cursor, Rect } from \"./models\";\nimport {\n    AIBrushApi,\n    CreateImageInput,\n    Image as APIImage,\n    ImageList,\n    StatusEnum,\n} from \"../../client\";\nimport { ZoomHelper } from \"./zoomHelper\";\nimport { getClosestAspectRatio } from \"../../lib/aspecRatios\";\nimport { ImageUtilWorker } from \"../../lib/imageutil\";\nimport { SelectionTool, Controls as SelectionControls } from \"./selection-tool\";\nimport { getUpscaleLevel } from \"../../lib/upscale\";\nimport { ApiSocket, NOTIFICATION_IMAGE_UPDATED } from \"../../lib/apisocket\";\nimport moment from \"moment\";\nimport { supportedModels } from \"../../lib/supportedModels\";\n\ntype EnhanceToolState = \"select\" | \"default\" | \"uploading\" | \"processing\" | \"confirm\" | \"erase\";\n\n// eraser width modifier adds a solid core with a feather edge\n// equal to the what is used on enhanced selections\nconst eraserWidthModifier = 1.3;\n\ninterface ImageWithData extends APIImage {\n    data?: ImageData;\n}\n\nexport class EnhanceTool extends BaseTool implements Tool {\n    readonly selectionTool: SelectionTool;\n    private prompt: string = \"\";\n    private negativePrompt: string = \"\";\n    private model: string = \"Epic Diffusion\";\n    private count: number = 4;\n    private variationStrength: number = 0.35;\n    private _dirty = false;\n    private worker: ImageUtilWorker;\n    private idCounter = 0;\n\n    private _state: EnhanceToolState = \"default\";\n    private stateHandler: (state: EnhanceToolState) => void = () => {};\n    private selectionControlsListener: (show: boolean) => void = () => {};\n\n    private imageData: Array<ImageData> = [];\n    private selectedImageDataIndex: number = -1;\n    private selectedImageData: ImageData | null = null;\n    private panning = false;\n    private erasing = false;\n    private progressListener?: (progress: number) => void;\n    private errorListener?: (error: string | null) => void;\n    private dirtyListener?: (dirty: boolean) => void;\n\n    set dirty(dirty: boolean) {\n        this._dirty = dirty;\n        if (this.dirtyListener) {\n            this.dirtyListener(dirty);\n        }\n    }\n\n    get dirty() {\n        return this._dirty;\n    }\n\n    onDirty(listener: (dirty: boolean) => void): void {\n        this.dirtyListener = listener;\n    }\n\n    onError(handler: (error: string | null) => void) {\n        this.errorListener = handler;\n    }\n\n    private notifyError(error: string | null) {\n        if (this.errorListener) {\n            this.errorListener(error);\n        }\n    }\n\n    get state(): EnhanceToolState {\n        return this._state;\n    }\n\n    set state(state: EnhanceToolState) {\n        if (state !== this._state) {\n            if (this._state == \"select\") {\n                this.selectionTool.destroy();\n            }\n            if (this._state === \"erase\") {\n                this.renderer.setCursor(undefined);\n            }\n            this._state = state;\n            this.stateHandler(state);\n            if (state == \"confirm\") {\n                this.selectionControlsListener(true);\n            } else {\n                this.selectionControlsListener(false);\n                if (state == \"select\") {\n                    this.selectionTool.updateArgs({\n                        ...this.selectionTool.getArgs(),\n                        outpaint: false,\n                    });\n                }\n            }\n        }\n    }\n\n    selectSupported(): boolean {\n        return !(\n            getUpscaleLevel(\n                this.renderer.getWidth(),\n                this.renderer.getHeight()\n            ) === 0 && this.renderer.getWidth()\n        );\n    }\n\n    constructor(renderer: Renderer) {\n        super(renderer, \"enhance\");\n        this.selectionTool = new SelectionTool(renderer);\n        if (this.selectSupported()) {\n            this.state = \"select\";\n        } else {\n            this.state = \"default\";\n        }\n        let selectionArgs = this.selectionTool.getArgs();\n        if (!this.selectSupported()) {\n            selectionArgs = {\n                ...selectionArgs,\n                selectionOverlay: {\n                    x: 0,\n                    y: 0,\n                    width: this.renderer.getWidth(),\n                    height: this.renderer.getHeight(),\n                },\n            };\n        }\n        this.selectionTool.updateArgs(selectionArgs);\n        this.worker = new ImageUtilWorker();\n    }\n\n    onMouseDown(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        if (this.state == \"select\") {\n            this.selectionTool.onMouseDown(event);\n            return;\n        }\n        let { x, y } = this.zoomHelper.translateMouseToCanvasCoordinates(\n            event.nativeEvent.offsetX,\n            event.nativeEvent.offsetY\n        );\n        if (event.button === 1) {\n            this.panning = true;\n            return;\n        }\n        if (this.state == \"erase\" && this.selectedImageData) {\n            this.erasing = true;\n            // clone selected ImageData\n            this.selectedImageData = new ImageData(\n                this.selectedImageData.data.slice(),\n                this.selectedImageData.width,\n                this.selectedImageData.height\n            );\n\n            this.erasePoint(x, y);\n        }\n    }\n\n    // TODO: on erase cancel and on erase confirm\n    // either restore the image data from the array\n    // or overwrite the array with the new image data\n\n    private erasePoint(x: number, y: number) {\n        const selectionOverlay = this.renderer.getSelectionOverlay()!;\n        const baseWidth = Math.min(\n            selectionOverlay.width,\n            selectionOverlay.height\n        );\n        const eraserRadius = Math.floor((baseWidth / 8) * eraserWidthModifier);\n\n        const relX = x - selectionOverlay.x;\n        const relY = y - selectionOverlay.y;\n        const imageData = this.selectedImageData!;\n\n        const startX = Math.max(0, relX - eraserRadius);\n        const startY = Math.max(0, relY - eraserRadius);\n        const endX = Math.min(imageData.width, relX + eraserRadius);\n        const endY = Math.min(imageData.height, relY + eraserRadius);\n\n        // relX=64.28541697636388, relY=64.24464312259761, startX=0.28541697636387653, startY=0.24464312259760845, endX=128.28541697636388, endY=128.2446431225976\n\n        for (let i = startX; i < endX; i++) {\n            for (let j = startY; j < endY; j++) {\n                const index = (j * imageData.width + i) * 4;\n                const distance = Math.sqrt(\n                    Math.pow(i - relX, 2) + Math.pow(j - relY, 2)\n                );\n                if (distance < eraserRadius) {\n                    // set alpha to a linear gradient from the center,\n                    // 100% in the middle and 0% at the edge\n                    const alphaPct =\n                        (distance / eraserRadius) * eraserWidthModifier -\n                        (eraserWidthModifier - 1);\n\n                    const alpha = Math.min(\n                        Math.floor(alphaPct * 255),\n                        imageData.data[index + 3]\n                    );\n                    imageData.data[index + 3] = alpha;\n                }\n            }\n        }\n        this.renderer.setEditImage(imageData);\n    }\n\n    private updateCursor(x: number, y: number) {\n        if (this.state == \"erase\" && this.selectedImageData) {\n            const selectionOverlay = this.renderer.getSelectionOverlay()!;\n            const baseWidth = Math.min(\n                selectionOverlay.width,\n                selectionOverlay.height\n            );\n            const featherWidth = Math.floor(baseWidth / 8);\n            this.renderer.setCursor({\n                color: \"white\",\n                radius: featherWidth * eraserWidthModifier,\n                type: \"circle\",\n                x,\n                y,\n            });\n        } else {\n            this.renderer.setCursor({\n                color: \"white\",\n                radius: 10,\n                type: \"crosshairs\",\n                x,\n                y,\n            });\n        }\n    }\n\n    onMouseMove(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        if (this.state == \"select\") {\n            this.selectionTool.onMouseMove(event);\n            return;\n        }\n        let { x, y } = this.zoomHelper.translateMouseToCanvasCoordinates(\n            event.nativeEvent.offsetX,\n            event.nativeEvent.offsetY\n        );\n        if (this.panning) {\n            this.zoomHelper.onPan(event);\n        }\n\n        this.updateCursor(x, y);\n        if (this.erasing) {\n            this.erasePoint(x, y);\n        }\n    }\n\n    onMouseUp(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        if (this.state == \"select\") {\n            this.selectionTool.onMouseUp(event);\n        }\n        this.panning = false;\n        this.erasing = false;\n    }\n\n    onMouseLeave(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>): void {\n        if (this.state == \"select\") {\n            this.selectionTool.onMouseLeave(event);\n        }\n        this.panning = false;\n        this.erasing = false;\n    }\n\n    onWheel(event: WheelEvent) {\n        this.zoomHelper.onWheel(event);\n        let { x, y } = this.zoomHelper.translateMouseToCanvasCoordinates(\n            event.offsetX,\n            event.offsetY\n        );\n        this.updateCursor(x, y);\n    }\n\n    updateArgs(args: any) {\n        args = {\n            ...this.getArgs(),\n            ...args,\n        };\n        this.prompt = args.prompt || \"\";\n        this.negativePrompt = args.negativePrompt || \"\";\n        this.model = args.model || \"Epic Diffusion\";\n        this.count = args.count || 4;\n        this.variationStrength = args.variationStrength || 0.75;\n        console.log(\"updateArgs\", args);\n    }\n\n    onChangeState(handler: (state: EnhanceToolState) => void) {\n        this.stateHandler = handler;\n    }\n\n    onShowSelectionControls(listener: (show: boolean) => void): void {\n        this.selectionControlsListener = listener;\n    }\n\n    onProgress(listener: (progress: number) => void): void {\n        this.progressListener = listener;\n    }\n\n    private newId(): string {\n        return `${this.idCounter++}`;\n    }\n\n    private loadImageData(\n        api: AIBrushApi,\n        imageId: string,\n        baseImage: APIImage,\n        baseImageData: ImageData,\n        selectionOverlay: Rect\n    ): Promise<ImageData> {\n        return new Promise((resolve, reject) => {\n            // TODO: use anonymous client to load image data instead with download urls\n            api.getImageData(imageId, {\n                responseType: \"arraybuffer\",\n            }).then((resp) => {\n                const binaryImageData = Buffer.from(resp.data, \"binary\");\n                const base64ImageData = binaryImageData.toString(\"base64\");\n                const src = `data:image/png;base64,${base64ImageData}`;\n                const imageElement = new Image();\n                imageElement.src = src;\n                imageElement.onload = () => {\n                    const canvas = document.createElement(\"canvas\");\n                    canvas.width = selectionOverlay.width;\n                    canvas.height = selectionOverlay.height;\n                    const ctx = canvas.getContext(\"2d\");\n                    if (!ctx) {\n                        reject(new Error(\"Failed to get canvas context\"));\n                        return;\n                    }\n                    ctx.drawImage(\n                        imageElement,\n                        0,\n                        0,\n                        selectionOverlay.width,\n                        selectionOverlay.height\n                    );\n                    const imageData = ctx.getImageData(\n                        0,\n                        0,\n                        selectionOverlay.width,\n                        selectionOverlay.height\n                    );\n                    const id = this.newId();\n                    this.worker\n                        .processRequest({\n                            id,\n                            alpha: false,\n                            feather: true,\n                            height: this.renderer.getHeight(),\n                            width: this.renderer.getWidth(),\n                            pixels: imageData.data,\n                            selectionOverlay,\n                        })\n                        .then((resp) => {\n                            const updatedImageData = new ImageData(\n                                resp.pixels,\n                                imageData.width,\n                                imageData.height\n                            );\n                            resolve(updatedImageData);\n                        });\n                    // remove canvas\n                    canvas.remove();\n                };\n            });\n        });\n    }\n\n    cancel() {\n        if (this.state == \"erase\") {\n            this.state = \"confirm\";\n            this.selectedImageData =\n                this.imageData[this.selectedImageDataIndex];\n            this.renderer.setEditImage(this.selectedImageData);\n        } else {\n            if (this.selectSupported()) {\n                this.state = \"select\";\n            } else {\n                this.state = \"default\";\n            }\n            this.imageData = [];\n            this.renderer.setEditImage(null);\n            this.dirty = false;\n        }\n    }\n\n    erase() {\n        this.state = \"erase\";\n    }\n\n    private updateProgress(progress: number) {\n        if (this.progressListener) {\n            this.progressListener(progress);\n        }\n    }\n\n    async submit(api: AIBrushApi, apisocket: ApiSocket, image: APIImage) {\n        this.dirty = true;\n        this.notifyError(null);\n        const selectionOverlay = this.renderer.getSelectionOverlay();\n        const encodedImage = this.renderer.getEncodedImage(selectionOverlay!);\n        if (!encodedImage) {\n            console.error(\"No selection\");\n            return;\n        }\n        const baseImageData = this.renderer.getImageData(selectionOverlay!)!;\n        const input: CreateImageInput = defaultArgs();\n        input.label = \"\";\n        input.encoded_image = encodedImage;\n        input.parent = image.id;\n        input.params.prompt = this.prompt || image.params.prompt;\n        input.params.negative_prompt = this.negativePrompt || image.params.negative_prompt;\n        input.params.denoising_strength = this.variationStrength;\n        input.count = this.count;\n        // TODO: allow switching model\n        input.model = this.model;\n        input.nsfw = image.nsfw;\n\n        input.params.width = selectionOverlay!.width;\n        input.params.height = selectionOverlay!.height;\n        // round width and height up to the nearest multiple of 64\n        input.params.width = Math.ceil(input.params.width / 64) * 64;\n        input.params.height = Math.ceil(input.params.height / 64) * 64;\n        input.temporary = true;\n\n        this.state = \"uploading\";\n        let resp: ImageList | null = null;\n        this.updateProgress(0);\n        try {\n            resp = (\n                await api.createImage(input, {\n                    onUploadProgress: (progressEvent: any) => {\n                        console.log(\"progressEvent\", progressEvent)\n                        const progress =\n                            progressEvent.loaded / progressEvent.total;\n\n                        // this.progressListener(progress);\n                        this.updateProgress(progress);\n                    },\n                })\n            ).data;\n        } catch (err) {\n            console.error(\"Error creating images\", err);\n            this.notifyError(\"Failed to create image\");\n            this.state = \"default\";\n            return;\n        }\n        this.state = \"processing\";\n        let newImages: Array<ImageWithData> | undefined = resp.images;\n        if (!newImages || newImages.length === 0) {\n            this.state = \"default\";\n            throw new Error(\"No images returned\");\n        }\n        let completed = false;\n\n        let lastUpdate = moment();\n\n        apisocket.onMessage(async (msg: string) => {\n            const img = JSON.parse(msg) as any;\n            if (\n                img.type === NOTIFICATION_IMAGE_UPDATED &&\n                img.status === StatusEnum.Completed\n            ) {\n                lastUpdate = moment();\n                for (let i = 0; i < newImages!.length; i++) {\n                    if (newImages![i].id === img.id) {\n                        const imageData = await this.loadImageData(\n                            api,\n                            newImages![i].id,\n                            image,\n                            baseImageData,\n                            selectionOverlay!\n                        );\n                        newImages![i].data = imageData;\n                        newImages![i].status = StatusEnum.Completed;\n                    }\n                }\n            } else if (img.status == StatusEnum.Error) {\n                for (let i = 0; i < newImages!.length; i++) {\n                    if (newImages![i].id === img.id) {\n                        newImages![i].status = StatusEnum.Error;\n                    }\n                }\n            }\n        });\n        try {\n            let startTime = moment();\n            let lastCheck = moment();\n\n            while (!completed) {\n                let completeCount = 0;\n                await sleep(1000);\n                // poll for completion\n                for (let i = 0; i < newImages!.length; i++) {\n                    if (\n                        newImages![i].status === StatusEnum.Completed ||\n                        newImages![i].status === StatusEnum.Error\n                    ) {\n                        completeCount++;\n                        continue;\n                    }\n                }\n                this.updateProgress(completeCount / newImages!.length);\n                if (completeCount === newImages!.length) {\n                    completed = true;\n                }\n\n                // fallback if sockets don't catch one\n                if (moment().diff(lastCheck, \"seconds\") > 10) {\n                    // get list of ids that aren't completed and batch get them.\n                    const pendingIds = newImages\n                        .filter(\n                            (img) =>\n                                img.status === StatusEnum.Pending ||\n                                img.status === StatusEnum.Processing\n                        )\n                        .map((img) => img.id);\n                    console.log(\"Checking pending images\", pendingIds);\n                    const updatedImagesResult = await api.batchGetImages({\n                        ids: pendingIds,\n                    });\n                    const updatedImages = updatedImagesResult.data.images;\n                    const byId = updatedImages!.reduce((acc, img) => {\n                        acc[img.id] = img;\n                        return acc;\n                    }, {} as Record<string, APIImage>);\n                    for (let i = 0; i < newImages!.length; i++) {\n                        if (\n                            newImages![i].status === StatusEnum.Pending ||\n                            newImages![i].status === StatusEnum.Processing\n                        ) {\n                            const updated = byId[newImages![i].id];\n                            if (updated) {\n                                newImages![i].status = updated.status;\n                                if (\n                                    updated.status === StatusEnum.Completed\n                                ) {\n                                    lastUpdate = moment();\n                                    const imageData = await this.loadImageData(\n                                        api,\n                                        newImages![i].id,\n                                        image,\n                                        baseImageData,\n                                        selectionOverlay!\n                                    );\n                                    newImages![i].data = imageData;\n                                }\n                            }\n                        }\n                    }\n                    lastCheck = moment();\n                }\n                // timeout of 2 minutes\n                if (\n                    (lastUpdate.isAfter(startTime) &&\n                        moment().diff(lastUpdate, \"seconds\") > 30) ||\n                    moment().diff(startTime, \"minutes\") > 2\n                ) {\n                    completed = true;\n                }\n            }\n        } finally {\n            apisocket.onMessage(undefined);\n        }\n\n        // sort images by score descending\n        newImages!.sort((a, b) => {\n            return b.score - a.score;\n        });\n        newImages = newImages!.filter((img) => {\n            return img.status === StatusEnum.Completed;\n        });\n\n        this.imageData = [];\n        for (let i = 0; i < newImages!.length; i++) {\n            if (newImages![i].data) {\n                this.imageData.push(newImages![i].data as ImageData);\n            }\n        }\n        if (this.imageData.length === 0) {\n            this.state = \"default\";\n            this.notifyError(\"No images returned\");\n            return;\n        }\n        this.renderer.setEditImage(this.imageData[0]);\n        this.selectedImageDataIndex = 0;\n        this.selectedImageData = this.imageData[0];\n        this.state = \"confirm\";\n    }\n\n    select(direction: \"left\" | \"right\") {\n        if (direction == \"left\") {\n            this.selectedImageDataIndex--;\n            if (this.selectedImageDataIndex < -1) {\n                this.selectedImageDataIndex = this.imageData.length - 1;\n            }\n        }\n        if (direction == \"right\") {\n            this.selectedImageDataIndex++;\n            if (this.selectedImageDataIndex >= this.imageData.length) {\n                this.selectedImageDataIndex = -1;\n            }\n        }\n        if (this.selectedImageDataIndex === -1) {\n            this.selectedImageData = null;\n        } else {\n            this.selectedImageData =\n                this.imageData[this.selectedImageDataIndex];\n        }\n        this.renderer.setEditImage(this.selectedImageData);\n    }\n\n    onSaveImage(listener: (encodedImage: string, args?: any) => void): void {\n        this.saveListener = listener;\n    }\n\n    confirm() {\n        this.renderer.commitSelection();\n        if (this.selectSupported()) {\n            this.state = \"select\";\n        } else {\n            this.state = \"default\";\n        }\n        this.imageData = [];\n        const encodedImage = this.renderer.getEncodedImage(null);\n        if (encodedImage && this.saveListener) {\n            this.saveListener(encodedImage, {\n                phrases: [this.prompt],\n                negative_phrases: [this.negativePrompt],\n                model: this.model,\n            });\n        }\n        this.dirty = false;\n    }\n\n    destroy(): boolean {\n        this.renderer.setCursor(undefined);\n        this.worker.destroy();\n        return true;\n    }\n}\n\ninterface ControlsProps {\n    api: AIBrushApi;\n    apisocket: ApiSocket;\n    image: APIImage;\n    renderer: Renderer;\n    tool: EnhanceTool;\n}\n\nexport const EnhanceControls: FC<ControlsProps> = ({\n    api,\n    apisocket,\n    image,\n    renderer,\n    tool,\n}) => {\n    const [count, setCount] = useState(4);\n    const [dirty, setDirty] = useState(false);\n    const [variationStrength, setVariationStrength] = useState(0.35);\n    const [prompt, setPrompt] = useState(image.params.prompt || \"\");\n    const [negativePrompt, setNegativePrompt] = useState(image.params.negative_prompt || \"\");\n    const [model, setModel] = useState(\n        image.model == \"swinir\" || image.model == \"stable_diffusion\"\n            ? \"Epic Diffusion\"\n            : image.model\n    );\n    const [state, setState] = useState<EnhanceToolState>(tool.state);\n    const [progress, setProgress] = useState(0);\n    const [error, setError] = useState<string | null>(null);\n\n    tool.onChangeState(setState);\n    tool.onProgress(setProgress);\n    tool.onError(setError);\n    tool.onDirty(setDirty);\n\n    if (state == \"processing\" || state == \"uploading\") {\n        return (\n            <div style={{ marginTop: \"16px\" }}>\n                <i className=\"fa fa-spinner fa-spin\"></i>&nbsp; {state === \"processing\" ? \"Enhancing...\" : \"Uploading...\"}\n                <br />\n                {/* bootstrap progress bar */}\n                <div\n                    className=\"progress\"\n                    style={{ height: \"20px\", marginTop: \"16px\" }}\n                >\n                    <div\n                        className=\"progress-bar\"\n                        role=\"progressbar\"\n                        style={{ width: `${progress * 100}%` }}\n                        aria-valuenow={progress * 100}\n                        aria-valuemin={0}\n                        aria-valuemax={100}\n                    >\n                        {Math.round(progress * 100)}%\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n    return (\n        <div\n            style={{\n                marginTop: \"16px\",\n                marginBottom: \"8px\",\n                marginLeft: \"16px\",\n            }}\n        >\n            {error && (\n                <div className=\"alert alert-danger\" role=\"alert\">\n                    {/* dismiss button */}\n                    <button\n                        type=\"button\"\n                        className=\"close\"\n                        data-dismiss=\"alert\"\n                        aria-label=\"Close\"\n                        onClick={() => setError(null)}\n                    >\n                        <span aria-hidden=\"true\">&times;</span>\n                    </button>\n                    {error}\n                </div>\n            )}\n            {state === \"select\" && (\n                <>\n                    <p>\n                        {/* info icon */}\n                        <i className=\"fa fa-info-circle\"></i>&nbsp; Move the\n                        selection rectangle to the area that you want to enhance\n                    </p>\n                    <SelectionControls\n                        renderer={renderer}\n                        tool={tool.selectionTool}\n                        lockAspectRatio={true}\n                    />\n                </>\n            )}\n            {state === \"default\" && (\n                <>\n                    <p>\n                        {/* info icon */}\n                        <i className=\"fa fa-info-circle\"></i>&nbsp; Confirm the\n                        parameters below and continue\n                    </p>\n                    {/* prompt */}\n                    <div className=\"form-group\">\n                        <label htmlFor=\"prompt\">Prompt</label>\n                        <input\n                            type=\"text\"\n                            className=\"form-control\"\n                            id=\"prompt\"\n                            value={prompt}\n                            onChange={(e) => {\n                                setPrompt(e.target.value);\n                            }}\n                        />\n                        <small className=\"form-text text-muted\">\n                            Customize the text prompt here\n                        </small>\n                    </div>\n                    {/* negative prompt */}\n                    <div className=\"form-group\">\n                        <label htmlFor=\"negative-prompt\">Negative Prompt</label>\n                        <input\n                            type=\"text\"\n                            className=\"form-control\"\n                            id=\"negative-prompt\"\n                            value={negativePrompt}\n                            onChange={(e) => {\n                                setNegativePrompt(e.target.value);\n                            }}\n                        />\n                        <small className=\"form-text text-muted\">\n                            Customize the negative text prompt here\n                        </small>\n                    </div>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"count\">Count: {count}</label>\n                        <input\n                            type=\"range\"\n                            className=\"form-control-range\"\n                            id=\"count\"\n                            min=\"1\"\n                            max=\"10\"\n                            step=\"1\"\n                            value={count}\n                            onChange={(e) => {\n                                setCount(parseInt(e.target.value));\n                            }}\n                        />\n                        <small className=\"form-text text-muted\">\n                            Number of enhancement options\n                        </small>\n                    </div>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"variation-strength\">\n                            Variation Strength:{\" \"}\n                            {Math.round(variationStrength * 100)}%\n                        </label>\n                        <input\n                            type=\"range\"\n                            className=\"form-control-range\"\n                            id=\"variation-strength\"\n                            min=\"0\"\n                            max=\"1\"\n                            step=\"0.05\"\n                            value={variationStrength}\n                            onChange={(e) => {\n                                setVariationStrength(\n                                    parseFloat(e.target.value)\n                                );\n                            }}\n                        />\n                        <small className=\"form-text text-muted\">\n                            How much variation to use\n                        </small>\n                    </div>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"model\">Model</label>\n                        <select\n                            className=\"form-control\"\n                            id=\"model\"\n                            value={model}\n                            onChange={(e) => setModel(e.target.value)}\n                        >\n                            {supportedModels.map((model) => (\n                                <option value={model} key={`model-${model}`}>\n                                    {model}\n                                </option>\n                            ))}\n                        </select>\n                        <small className=\"form-text text-muted\">\n                            Select the model to use\n                        </small>\n                    </div>\n                </>\n            )}\n            {state === \"erase\" && (\n                <p>\n                    {/* info icon */}\n                    <i className=\"fa fa-info-circle\"></i>&nbsp; Erase any\n                    undesired sections before saving\n                </p>\n            )}\n\n            <div className=\"form-group\">\n                {state === \"select\" && (\n                    <button\n                        type=\"button\"\n                        className=\"btn btn-primary btn-sm\"\n                        onClick={() => {\n                            tool.state = \"default\";\n                        }}\n                        style={{ marginRight: \"8px\" }}\n                    >\n                        {/* magic icon */}\n                        <i className=\"fa fa-magic\"></i>&nbsp; Continue\n                    </button>\n                )}\n                {((state === \"default\" && tool.selectSupported()) ||\n                    state === \"confirm\" ||\n                    state === \"erase\") && (\n                    <button\n                        className=\"btn btn-primary btn-sm\"\n                        onClick={() => {\n                            tool.cancel();\n                        }}\n                        style={{ marginRight: \"8px\" }}\n                    >\n                        {/* cancel icon */}\n                        <i className=\"fa fa-times\"></i>&nbsp; Revert\n                    </button>\n                )}\n                {(state === \"confirm\" || state === \"erase\") && (\n                    <button\n                        className=\"btn btn-primary btn-sm\"\n                        onClick={() => tool.confirm()}\n                        style={{ marginRight: \"8px\" }}\n                    >\n                        <i className=\"fa fa-save\"></i>&nbsp; Save\n                    </button>\n                )}\n                {state === \"confirm\" && (\n                    <>\n                        <button\n                            className=\"btn btn-primary btn-sm\"\n                            onClick={() => tool.erase()}\n                            style={{ marginRight: \"8px\" }}\n                        >\n                            <i className=\"fa fa-eraser\"></i>&nbsp; Erase\n                        </button>\n                    </>\n                )}\n                {state === \"default\" && (\n                    <button\n                        className=\"btn btn-primary btn-sm\"\n                        onClick={() => {\n                            tool.updateArgs({\n                                count,\n                                variationStrength,\n                                prompt,\n                                negativePrompt,\n                                model,\n                            });\n                            tool.submit(api, apisocket, image);\n                        }}\n                        style={{ marginRight: \"8px\" }}\n                    >\n                        <i className=\"fa fa-magic\"></i>&nbsp; Enhance\n                    </button>\n                )}\n            </div>\n            <Prompt\n                when={dirty}\n                message=\"Are you sure you want to leave? Your changes will be lost.\"\n            />\n        </div>\n    );\n};\n","import React, { FC, useState, useEffect } from \"react\";\nimport { Renderer } from \"./renderer\";\nimport { BaseTool, Tool } from \"./tool\";\nimport { ZoomHelper } from \"./zoomHelper\";\n\nexport class SmudgeTool extends BaseTool implements Tool {\n    private brushSize = 10;\n    private brushOpacity = 0.2;\n\n    private lastX = 0;\n    private lastY = 0;\n    private panning = false;\n    private smudging = false;\n    private _dirty = false;\n\n    set dirty(dirty: boolean) {\n        this._dirty = dirty;\n        if (this.dirtyListener) {\n            this.dirtyListener(dirty);\n        }\n    }\n\n    get dirty() {\n        return this._dirty;\n    }\n\n    private dirtyListener?: (dirty: boolean) => void;\n\n    constructor(renderer: Renderer) {\n        super(renderer, \"smudge\");\n    }\n\n    private sync() {\n        this.renderer.setCursor({\n            type: \"circle\",\n            color: \"white\",\n            radius: this.brushSize / 2,\n            x: this.lastX,\n            y: this.lastY,\n        });\n    }\n\n    updateArgs(args: any) {\n        super.updateArgs(args);\n        this.brushSize = args.brushSize || 10;\n        this.brushOpacity = args.brushOpacity || 0.2;\n        this.sync();\n    }\n\n    onMouseMove(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>): void {\n        let { x, y } = this.zoomHelper.translateMouseToCanvasCoordinates(\n            event.nativeEvent.offsetX,\n            event.nativeEvent.offsetY\n        );\n\n        if (this.panning) {\n            this.zoomHelper.onPan(event);\n        } else if (this.smudging) {\n            this.renderer.smudgeLine(\n                this.lastX,\n                this.lastY,\n                x,\n                y,\n                this.brushSize,\n                this.brushOpacity\n            );\n            this.dirty = true;\n        }\n\n        this.lastX = x;\n        this.lastY = y;\n        this.sync();\n    }\n\n    onWheel(event: WheelEvent) {\n        this.zoomHelper.onWheel(event);\n        this.sync();\n    }\n\n    onMouseDown(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        if (event.button === 0) {\n            this.smudging = true;\n            if (!this.dirty) {\n                this.renderer.copyEditImageFromBaseImage();\n            }\n            this.dirty = true;\n            let { x, y } = this.zoomHelper.translateMouseToCanvasCoordinates(\n                event.nativeEvent.offsetX,\n                event.nativeEvent.offsetY\n            );\n            this.lastX = x;\n            this.lastY = y;\n            this.sync();\n        } else if (event.button === 1) {\n            this.panning = true;\n        }\n        this.sync();\n    }\n\n    onMouseUp(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        this.smudging = false;\n        this.panning = false;\n        this.sync();\n    }\n\n    onSaveImage(listener: (encodedImage: string) => void): void {\n        this.saveListener = listener;\n    }\n\n    onDirty(listener: (dirty: boolean) => void): void {\n        this.dirtyListener = listener;\n    }\n\n    cancel() {\n        // kind of a hack, clears the selection layer\n        this.renderer.setEditImage(null);\n        this.dirty = false;\n    }\n\n    confirm() {\n        this.renderer.commitSelection();\n        const encodedImage = this.renderer.getEncodedImage(null);\n        if (encodedImage && this.saveListener) {\n            this.saveListener(encodedImage);\n        }\n        this.dirty = false;\n    }\n\n    destroy(): boolean {\n        if (this.dirty) {\n            this.renderer.commitSelection();\n        }\n        return true;\n    }\n}\n\ninterface Props {\n    renderer: Renderer;\n    tool: SmudgeTool;\n}\n\nexport const SmudgeControls: FC<Props> = ({ renderer, tool }) => {\n    const [brushSize, setBrushSize] = useState(10);\n    const [brushOpacity, setBrushOpacity] = useState(0.2);\n    const [dirty, setDirty] = useState(false);\n\n    tool.onDirty(setDirty);\n\n    useEffect(() => {\n        tool.updateArgs({\n            brushSize,\n            brushOpacity,\n        });\n    }, [brushSize, brushOpacity]);\n\n    return (\n        <div style={{ marginTop: \"16px\" }}>\n            <div className=\"form-group\">\n                <label style={{ width: \"100%\" }}>\n                    Brush size\n                    <small\n                        className=\"form-text text-muted\"\n                        style={{ float: \"right\" }}\n                    >\n                        {brushSize}px\n                    </small>\n                </label>\n                <input\n                    type=\"range\"\n                    className=\"form-control-range\"\n                    min=\"1\"\n                    max=\"100\"\n                    value={brushSize}\n                    onChange={(e) => setBrushSize(parseInt(e.target.value))}\n                />\n            </div>\n            <div className=\"form-group\">\n                <label style={{ width: \"100%\" }}>\n                    Brush opacity\n                    <small\n                        className=\"form-text text-muted\"\n                        style={{ float: \"right\" }}\n                    >\n                        {Math.round(brushOpacity * 100)}%\n                    </small>\n                </label>\n                <input\n                    type=\"range\"\n                    className=\"form-control-range\"\n                    min=\"0\"\n                    max=\"1\"\n                    step=\"0.01\"\n                    value={brushOpacity}\n                    onChange={(e) =>\n                        setBrushOpacity(parseFloat(e.target.value))\n                    }\n                />\n            </div>\n            <div\n                className=\"form-group\"\n                style={{\n                    marginTop: \"16px\",\n                    visibility: dirty ? \"visible\" : \"hidden\",\n                }}\n            >\n                <button\n                    className=\"btn btn-secondary\"\n                    onClick={() => tool.cancel()}\n                >\n                    Revert\n                </button>\n                <button\n                    className=\"btn btn-primary\"\n                    onClick={() => tool.confirm()}\n                    style={{ marginLeft: \"8px\" }}\n                >\n                    Save\n                </button>\n            </div>\n        </div>\n    );\n};\n","import React, { FC, useState, useEffect, useRef } from \"react\";\nimport { Prompt } from \"react-router\";\n\nimport { sleep } from \"../../lib/sleep\";\nimport { defaultArgs } from \"../../components/ImagePrompt\";\nimport { Tool, BaseTool } from \"./tool\";\nimport { Renderer } from \"./renderer\";\nimport { SelectionTool } from \"./selection-tool\";\nimport { Cursor, Rect } from \"./models\";\nimport {\n    AIBrushApi,\n    CreateImageInput,\n    Image as APIImage,\n    ImageList,\n    StatusEnum,\n} from \"../../client\";\nimport { ZoomHelper } from \"./zoomHelper\";\nimport { getClosestAspectRatio } from \"../../lib/aspecRatios\";\nimport { getUpscaleLevel } from \"../../lib/upscale\";\nimport {\n    applyAlphaMask,\n    featherEdges,\n    ImageUtilWorker,\n} from \"../../lib/imageutil\";\nimport { ApiSocket, NOTIFICATION_IMAGE_UPDATED } from \"../../lib/apisocket\";\nimport moment from \"moment\";\n\ntype InpaintToolState =\n    | \"select\"\n    | \"erase\"\n    | \"inpaint\"\n    | \"uploading\"\n    | \"processing\"\n    | \"confirm\"\n    | undefined;\n\ninterface ImageWithData extends APIImage {\n    data?: ImageData;\n}\n\nexport class InpaintTool extends BaseTool implements Tool {\n    private selectionTool: SelectionTool;\n    private prompt: string = \"\";\n    private negativePrompt: string = \"\";\n    private count: number = 4;\n    private variationStrength: number = 0.35;\n    private brushSize: number = 10;\n    private _dirty = false;\n    private worker: ImageUtilWorker;\n    private idCounter = 0;\n\n    private _state: InpaintToolState;\n    private stateHandler: (state: InpaintToolState) => void = () => {};\n    private selectionControlsListener: (show: boolean) => void = () => {};\n\n    private imageData: Array<ImageData> = [];\n    private selectedImageDataIndex: number = -1;\n    private selectedImageData: ImageData | null = null;\n    private panning = false;\n    private erasing = false;\n    private progressListener?: (progress: number) => void;\n    private errorListener?: (error: string | null) => void;\n    private dirtyListener?: (dirty: boolean) => void;\n\n    set dirty(dirty: boolean) {\n        this._dirty = dirty;\n        if (this.dirtyListener) {\n            this.dirtyListener(dirty);\n        }\n    }\n\n    get dirty() {\n        return this._dirty;\n    }\n\n    private newId(): string {\n        return `${this.idCounter++}`;\n    }\n\n    onError(handler: (error: string | null) => void) {\n        this.errorListener = handler;\n    }\n\n    private notifyError(error: string | null) {\n        if (this.errorListener) {\n            this.errorListener(error);\n        }\n    }\n\n    get state(): InpaintToolState {\n        return this._state;\n    }\n\n    set state(state: InpaintToolState) {\n        if (state != this._state) {\n            if (this._state == \"select\") {\n                this.selectionTool.destroy();\n            }\n            if (this._state === \"erase\") {\n                this.renderer.setCursor(undefined);\n            }\n            this._state = state;\n            this.stateHandler(state);\n\n            if (state == \"confirm\") {\n                this.selectionControlsListener(true);\n            } else {\n                this.selectionControlsListener(false);\n                if (state == \"select\") {\n                    const imageWidth = this.renderer.getWidth();\n                    const imageHeight = this.renderer.getHeight();\n                    const selectionWidth = Math.min(\n                        imageWidth,\n                        imageHeight,\n                        512\n                    );\n                    this.selectionTool.updateArgs({\n                        selectionOverlay: {\n                            x: 0,\n                            y: 0,\n                            width: selectionWidth,\n                            height: selectionWidth,\n                        },\n                    });\n                }\n            }\n        }\n    }\n\n    selectSupported(): boolean {\n        // return !(\n        //     this.renderer.getWidth() == this.renderer.getHeight() &&\n        //     getUpscaleLevel(\n        //         this.renderer.getWidth(),\n        //         this.renderer.getHeight()\n        //     ) === 0\n        // );\n        return true;\n    }\n\n    constructor(renderer: Renderer) {\n        super(renderer, \"inpaint\");\n        this.selectionTool = new SelectionTool(renderer);\n        if (this.selectSupported()) {\n            this.state = \"select\";\n            this.selectionTool.updateArgs({\n                outpaint: this.getArgs().outpaint,\n            });\n        } else {\n            this.state = \"erase\";\n        }\n        this.worker = new ImageUtilWorker();\n    }\n\n    onMouseDown(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        if (this.state == \"select\") {\n            this.selectionTool.onMouseDown(event);\n            return;\n        }\n        let { x, y } = this.zoomHelper.translateMouseToCanvasCoordinates(\n            event.nativeEvent.offsetX,\n            event.nativeEvent.offsetY\n        );\n        if (event.button === 1) {\n            this.panning = true;\n            return;\n        }\n        if (this.state == \"erase\") {\n            this.erasing = true;\n            this.erasePoint(x, y);\n        }\n    }\n\n    private erasePoint(x: number, y: number) {\n        if (!this.dirty) {\n            this.dirty = true;\n        }\n        this.renderer.erasePoint(x, y, this.brushSize);\n        this.renderer.render();\n    }\n\n    private updateCursor(x: number, y: number) {\n        if (this.state == \"erase\") {\n            this.renderer.setCursor({\n                color: \"white\",\n                radius: this.brushSize / 2,\n                type: \"circle\",\n                x,\n                y,\n            });\n        } else {\n            this.renderer.setCursor({\n                color: \"white\",\n                radius: 10,\n                type: \"crosshairs\",\n                x,\n                y,\n            });\n        }\n    }\n\n    onMouseMove(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        let { x, y } = this.zoomHelper.translateMouseToCanvasCoordinates(\n            event.nativeEvent.offsetX,\n            event.nativeEvent.offsetY\n        );\n        this.updateCursor(x, y);\n        if (this.state == \"select\") {\n            this.selectionTool.onMouseMove(event);\n            return;\n        }\n\n        if (this.panning) {\n            this.zoomHelper.onPan(event);\n        }\n\n        if (this.erasing) {\n            this.erasePoint(x, y);\n        }\n    }\n\n    onMouseUp(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        if (this.state == \"select\") {\n            this.selectionTool.onMouseUp(event);\n        }\n        this.panning = false;\n        this.erasing = false;\n    }\n\n    onMouseLeave(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>): void {\n        if (this.state == \"select\") {\n            this.selectionTool.onMouseLeave(event);\n        }\n        this.panning = false;\n        this.erasing = false;\n    }\n\n    onWheel(event: WheelEvent) {\n        this.zoomHelper.onWheel(event);\n        let { x, y } = this.zoomHelper.translateMouseToCanvasCoordinates(\n            event.offsetX,\n            event.offsetY\n        );\n        this.updateCursor(x, y);\n    }\n\n    updateArgs(args: any) {\n        args = {\n            ...this.getArgs(),\n            ...args,\n        };\n        super.updateArgs(args);\n        this.prompt = args.prompt || \"\";\n        this.negativePrompt = args.negativePrompt || \"\";\n        this.count = args.count || 4;\n        this.variationStrength = args.variationStrength || 0.75;\n        this.brushSize = args.brushSize || 10;\n\n        this.updateCursor(\n            this.renderer.getWidth() / 2,\n            this.renderer.getHeight() / 2\n        );\n        this.selectionTool.updateArgs({\n            outpaint: args.outpaint,\n        });\n    }\n\n    onChangeState(handler: (state: InpaintToolState) => void) {\n        this.stateHandler = handler;\n    }\n\n    onShowSelectionControls(listener: (show: boolean) => void): void {\n        this.selectionControlsListener = listener;\n    }\n\n    onProgress(listener: (progress: number) => void): void {\n        this.progressListener = listener;\n    }\n\n    private loadImageData(\n        api: AIBrushApi,\n        imageId: string,\n        alphaMask: ImageData,\n        baseImage: APIImage,\n        selectionOverlay: Rect\n    ): Promise<ImageData> {\n        return new Promise((resolve, reject) => {\n            api.getImageData(imageId, {\n                responseType: \"arraybuffer\",\n            }).then((resp) => {\n                const binaryImageData = Buffer.from(resp.data, \"binary\");\n                const base64ImageData = binaryImageData.toString(\"base64\");\n                const src = `data:image/png;base64,${base64ImageData}`;\n                const imageElement = new Image();\n                imageElement.src = src;\n                imageElement.onload = () => {\n                    const canvas = document.createElement(\"canvas\");\n                    canvas.width = selectionOverlay.width;\n                    canvas.height = selectionOverlay.height;\n                    const ctx = canvas.getContext(\"2d\");\n                    if (!ctx) {\n                        reject(new Error(\"Failed to get canvas context\"));\n                        return;\n                    }\n                    ctx.drawImage(\n                        imageElement,\n                        0,\n                        0,\n                        selectionOverlay.width,\n                        selectionOverlay.height\n                    );\n                    const imageData = ctx.getImageData(\n                        0,\n                        0,\n                        selectionOverlay.width,\n                        selectionOverlay.height\n                    );\n\n                    const id = this.newId();\n                    this.worker\n                        .processRequest({\n                            id,\n                            alpha: true,\n                            alphaPixels: alphaMask.data,\n                            feather: true,\n                            height: this.renderer.getHeight(),\n                            width: this.renderer.getWidth(),\n                            pixels: imageData.data,\n                            selectionOverlay,\n                            featherWidth: 10,\n                        })\n                        .then((resp) => {\n                            const updatedImageData = new ImageData(\n                                resp.pixels,\n                                imageData.width,\n                                imageData.height\n                            );\n                            resolve(updatedImageData);\n                        });\n                    // remove canvas\n                    canvas.remove();\n                };\n            });\n        });\n    }\n\n    cancel() {\n        if (this.selectSupported()) {\n            this.state = \"select\";\n        } else {\n            this.state = \"erase\";\n        }\n        this.renderer.snapshot();\n        this.renderer.undo();\n        this.renderer.clearRedoStack();\n        this.imageData = [];\n        this.renderer.setEditImage(null);\n        this.dirty = false;\n    }\n\n    private updateProgress(progress: number) {\n        if (this.progressListener) {\n            this.progressListener(progress);\n        }\n    }\n\n    async submit(\n        api: AIBrushApi,\n        apisocket: ApiSocket,\n        image: APIImage,\n        model: string\n    ) {\n        this.notifyError(null);\n        let selectionOverlay = this.renderer.getSelectionOverlay();\n        if (!selectionOverlay) {\n            console.error(\"No selection\");\n            return;\n        }\n\n        if (this.getArgs().outpaint) {\n            // check if selection overlay is out of renderer bounds (width, height)\n            if (\n                selectionOverlay.x < 0 ||\n                selectionOverlay.y < 0 ||\n                selectionOverlay.x + selectionOverlay.width >\n                    this.renderer.getWidth() ||\n                selectionOverlay.y + selectionOverlay.height >\n                    this.renderer.getHeight()\n            ) {\n                this.renderer.expandToOverlay();\n                selectionOverlay = this.renderer.getSelectionOverlay()!;\n            }\n        }\n\n        // get the erased area, then undo the erase to get the original image\n        const encodedMask = this.renderer.getEncodedMask(selectionOverlay);\n        const maskData = this.renderer.getImageData(selectionOverlay);\n        // hack to restore the image\n        this.renderer.snapshot();\n        this.renderer.undo();\n        this.renderer.clearRedoStack();\n\n        const encodedImage = this.renderer.getEncodedImage(selectionOverlay);\n\n        const input: CreateImageInput = defaultArgs();\n        input.label = \"\";\n        input.encoded_image = encodedImage;\n        input.encoded_mask = encodedMask;\n        input.parent = image.id;\n        // input.phrases = [this.prompt || image.phrases[0]];\n        // input.negative_phrases = [\n        //     this.negativePrompt || image.negative_phrases[0],\n        // ];\n        // input.stable_diffusion_strength = this.variationStrength;\n        input.params.prompt = this.prompt || image.params.prompt;\n        input.params.negative_prompt = this.negativePrompt || image.params.negative_prompt;\n        input.params.denoising_strength = this.variationStrength;\n        input.count = this.count;\n        input.model = model;\n\n        const closestAspectRatio = getClosestAspectRatio(\n            selectionOverlay!.width,\n            selectionOverlay!.height\n        );\n        input.params.width = closestAspectRatio.width;\n        input.params.height = closestAspectRatio.height;\n        input.temporary = true;\n\n        this.state = \"uploading\";\n        let resp: ImageList | null = null;\n        this.updateProgress(0);\n        try {\n            resp = (\n                await api.createImage(input, {\n                    onUploadProgress: (progressEvent: any) => {\n                        this.updateProgress(\n                            progressEvent.loaded / progressEvent.total\n                        );\n                    },\n                })\n            ).data;\n        } catch (err) {\n            console.error(\"Error creating images\", err);\n            this.notifyError(\"Failed to create image\");\n            this.state = \"select\";\n            return;\n        }\n        this.state = \"processing\";\n        this.updateProgress(0);\n        let newImages: Array<ImageWithData> | undefined = resp.images;\n        if (!newImages || newImages.length === 0) {\n            this.state = \"select\";\n            throw new Error(\"No images returned\");\n        }\n        let completed = false;\n        let lastUpdate = moment();\n\n        apisocket.onMessage(async (msg: string) => {\n            console.log(\"inpaint onMessage\", msg);\n            const img = JSON.parse(msg) as any;\n            if (\n                img.type === NOTIFICATION_IMAGE_UPDATED &&\n                img.status === StatusEnum.Completed\n            ) {\n                lastUpdate = moment();\n                for (let i = 0; i < newImages!.length; i++) {\n                    if (newImages![i].id === img.id) {\n                        const imageData = await this.loadImageData(\n                            api,\n                            newImages![i].id,\n                            maskData!,\n                            image,\n                            selectionOverlay!\n                        );\n                        newImages![i].data = imageData;\n                        newImages![i].status = StatusEnum.Completed;\n                    }\n                }\n            } else if (img.status === StatusEnum.Error) {\n                for (let i = 0; i < newImages!.length; i++) {\n                    if (newImages![i].id === img.id) {\n                        newImages![i].status = StatusEnum.Error;\n                    }\n                }\n            }\n        });\n        try {\n            let startTime = moment();\n            let lastCheck = moment();\n            while (!completed) {\n                let completeCount = 0;\n                await sleep(100);\n                // poll for completion\n                for (let i = 0; i < newImages!.length; i++) {\n                    if (\n                        newImages![i].status === StatusEnum.Completed ||\n                        newImages![i].status === StatusEnum.Error\n                    ) {\n                        completeCount++;\n                        continue;\n                    }\n                }\n                this.updateProgress(completeCount / newImages!.length);\n                if (completeCount === newImages!.length) {\n                    completed = true;\n                    continue;\n                }\n\n                // fallback if sockets don't catch one\n                if (moment().diff(lastCheck, \"seconds\") > 10) {\n                    // get list of ids that aren't completed and batch get them.\n                    const pendingIds = newImages\n                        .filter(\n                            (img) =>\n                                img.status === StatusEnum.Pending ||\n                                img.status === StatusEnum.Processing\n                        )\n                        .map((img) => img.id);\n                    console.log(\"Checking pending images\", pendingIds);\n                    const updatedImagesResult = await api.batchGetImages({\n                        ids: pendingIds,\n                    });\n                    const updatedImages = updatedImagesResult.data.images;\n                    const byId = updatedImages!.reduce((acc, img) => {\n                        acc[img.id] = img;\n                        return acc;\n                    }, {} as Record<string, APIImage>);\n                    for (let i = 0; i < newImages!.length; i++) {\n                        if (\n                            newImages![i].status === StatusEnum.Pending ||\n                            newImages![i].status === StatusEnum.Processing\n                        ) {\n                            const updated = byId[newImages![i].id];\n                            if (updated) {\n                                newImages![i].status = updated.status;\n                                if (\n                                    updated.status === StatusEnum.Completed\n                                ) {\n                                    lastUpdate = moment();\n                                    const imageData = await this.loadImageData(\n                                        api,\n                                        newImages![i].id,\n                                        maskData!,\n                                        image,\n                                        selectionOverlay!\n                                    );\n                                    newImages![i].data = imageData;\n                                }\n                            }\n                        }\n                    }\n                    lastCheck = moment();\n                }\n                // timeout of 2 minutes\n                if (\n                    (lastUpdate.isAfter(startTime) &&\n                        moment().diff(lastUpdate, \"seconds\") > 30) ||\n                    moment().diff(startTime, \"minutes\") > 2\n                ) {\n                    completed = true;\n                }\n            }\n        } finally {\n            apisocket.onMessage(undefined);\n        }\n\n        // sort images by score descending\n        newImages!.sort((a, b) => {\n            return b.score - a.score;\n        });\n        newImages = newImages!.filter((img) => {\n            return img.status === StatusEnum.Completed;\n        });\n\n        this.imageData = [];\n        for (let i = 0; i < newImages!.length; i++) {\n            if (newImages![i].data) {\n                this.imageData.push(newImages![i].data as ImageData);\n            }\n        }\n        if (this.imageData.length === 0) {\n            this.state = \"select\";\n            this.notifyError(\"No images returned\");\n            return;\n        }\n        this.renderer.setEditImage(this.imageData[0]);\n        this.selectedImageDataIndex = 0;\n        this.selectedImageData = this.imageData[0];\n        this.state = \"confirm\";\n    }\n\n    onDirty(listener: (dirty: boolean) => void): void {\n        this.dirtyListener = listener;\n    }\n\n    select(direction: \"left\" | \"right\") {\n        if (direction == \"left\") {\n            this.selectedImageDataIndex--;\n            if (this.selectedImageDataIndex < -1) {\n                this.selectedImageDataIndex = this.imageData.length - 1;\n            }\n        }\n        if (direction == \"right\") {\n            this.selectedImageDataIndex++;\n            if (this.selectedImageDataIndex >= this.imageData.length) {\n                this.selectedImageDataIndex = -1;\n            }\n        }\n        if (this.selectedImageDataIndex === -1) {\n            this.selectedImageData = null;\n        } else {\n            this.selectedImageData =\n                this.imageData[this.selectedImageDataIndex];\n        }\n        this.renderer.setEditImage(this.selectedImageData);\n    }\n\n    onSaveImage(listener: (encodedImage: string, args?: any) => void): void {\n        this.saveListener = listener;\n    }\n\n    confirm() {\n        this.renderer.commitSelection();\n\n        this.imageData = [];\n        const encodedImage = this.renderer.getEncodedImage(null);\n        if (encodedImage && this.saveListener) {\n            this.saveListener(encodedImage, {\n                phrases: [this.prompt],\n                negative_phrases: [this.negativePrompt],\n                selection_overlay: this.renderer.getSelectionOverlay(),\n            });\n        }\n        this.dirty = false;\n        if (this.selectSupported()) {\n            this.state = \"select\";\n        } else {\n            this.state = \"erase\";\n        }\n    }\n\n    destroy(): boolean {\n        if (this.dirty) {\n            if (!window.confirm(\"Discard changes?\")) {\n                return false;\n            }\n        }\n        this.renderer.setCursor(undefined);\n        this.renderer.setEditImage(null);\n        this.worker.destroy();\n        return true;\n    }\n}\n\ninterface ControlsProps {\n    api: AIBrushApi;\n    apisocket: ApiSocket;\n    image: APIImage;\n    renderer: Renderer;\n    tool: InpaintTool;\n}\n\nexport const InpaintControls: FC<ControlsProps> = ({\n    api,\n    apisocket,\n    image,\n    renderer,\n    tool,\n}) => {\n    const [count, setCount] = useState(4);\n    const [prompt, setPrompt] = useState(image.params.prompt || \"\");\n    const [negativePrompt, setNegativePrompt] = useState(image.params.negative_prompt || \"\");\n    const [state, setState] = useState<InpaintToolState>(tool.state);\n    const [progress, setProgress] = useState(0);\n    const [error, setError] = useState<string | null>(null);\n    const [brushSize, setBrushSize] = useState(10);\n    const [dirty, setDirty] = useState(false);\n    const [outpaint, setoutpaint] = useState<boolean | undefined>(\n        tool.getArgs().outpaint\n    );\n    const [model, setModel] = useState(\"stable_diffusion_inpainting\");\n\n    useEffect(() => {\n        tool.updateArgs({\n            brushSize,\n        });\n    }, [brushSize]);\n\n    tool.onChangeState(setState);\n    tool.onProgress(setProgress);\n    tool.onError(setError);\n    tool.onDirty(setDirty);\n\n    if (state === \"uploading\" || state === \"processing\") {\n        return (\n            <div style={{ marginTop: \"16px\" }}>\n                <i className=\"fa fa-spinner fa-spin\"></i>&nbsp;{\" \"}\n                {state === \"uploading\" ? \"Uploading...\" : \"Inpainting...\"}\n                <br />\n                {/* bootstrap progress bar */}\n                <div\n                    className=\"progress\"\n                    style={{ height: \"20px\", marginTop: \"16px\" }}\n                >\n                    <div\n                        className=\"progress-bar\"\n                        role=\"progressbar\"\n                        style={{ width: `${progress * 100}%` }}\n                        aria-valuenow={progress * 100}\n                        aria-valuemin={0}\n                        aria-valuemax={100}\n                    >\n                        {Math.round(progress * 100)}%\n                    </div>\n                </div>\n            </div>\n        );\n    }\n    return (\n        <div\n            style={{\n                marginTop: \"16px\",\n                marginBottom: \"8px\",\n                marginLeft: \"16px\",\n            }}\n        >\n            {error && (\n                <div className=\"alert alert-danger\" role=\"alert\">\n                    {/* dismiss button */}\n                    <button\n                        type=\"button\"\n                        className=\"close\"\n                        data-dismiss=\"alert\"\n                        aria-label=\"Close\"\n                        onClick={() => setError(null)}\n                    >\n                        <span aria-hidden=\"true\">&times;</span>\n                    </button>\n                    {error}\n                </div>\n            )}\n            {state === \"select\" && (\n                <>\n                    <p>\n                        {/* info icon */}\n                        <i className=\"fa fa-info-circle\"></i>&nbsp; Move the\n                        selection rectangle to the area that you want to\n                        inpaint. For outpainting, try zooming out.\n                    </p>\n                    <div className=\"form-group\">\n                        {/* allow outpaint checkbox */}\n                        <div className=\"form-check\">\n                            <input\n                                className=\"form-check-input\"\n                                type=\"checkbox\"\n                                id=\"allowoutpaint\"\n                                checked={!!outpaint}\n                                onChange={(e) => {\n                                    setoutpaint(e.target.checked);\n                                    tool.updateArgs({\n                                        outpaint: e.target.checked,\n                                    });\n                                }}\n                            />\n                            <label\n                                className=\"form-check-label\"\n                                htmlFor=\"allowoutpaint\"\n                            >\n                                Allow outpainting\n                            </label>\n                        </div>\n                    </div>\n                </>\n            )}\n\n            {state === \"erase\" && (\n                <>\n                    <p>\n                        {/* info icon */}\n                        <i className=\"fa fa-info-circle\"></i>&nbsp; Erase the\n                        area that you want to inpaint.\n                    </p>\n                    <div className=\"form-group\">\n                        <label style={{ width: \"100%\" }}>\n                            Brush size\n                            <small\n                                className=\"form-text text-muted\"\n                                style={{ float: \"right\" }}\n                            >\n                                {brushSize}px\n                            </small>\n                        </label>\n                        <input\n                            type=\"range\"\n                            className=\"form-control-range\"\n                            min=\"1\"\n                            max=\"100\"\n                            value={brushSize}\n                            onChange={(e) =>\n                                setBrushSize(parseInt(e.target.value))\n                            }\n                        />\n                    </div>\n                </>\n            )}\n\n            {state === \"inpaint\" && (\n                <>\n                    <p>\n                        {/* info icon */}\n                        <i className=\"fa fa-info-circle\"></i>&nbsp; Confirm the\n                        parameters below and continue\n                    </p>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"prompt\">Prompt</label>\n                        <input\n                            type=\"text\"\n                            className=\"form-control\"\n                            id=\"prompt\"\n                            value={prompt}\n                            onChange={(e) => {\n                                setPrompt(e.target.value);\n                            }}\n                        />\n                        <small className=\"form-text text-muted\">\n                            Customize the text prompt here\n                        </small>\n                    </div>\n                    {/* negative prompt */}\n                    <div className=\"form-group\">\n                        <label htmlFor=\"negativeprompt\">Negative prompt</label>\n                        <input\n                            type=\"text\"\n                            className=\"form-control\"\n                            value={negativePrompt}\n                            onChange={(e) => {\n                                setNegativePrompt(e.target.value);\n                            }}\n                        />\n                        <small className=\"form-text text-muted\">\n                            Customize the negative text prompt here\n                        </small>\n                    </div>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"count\">Count: {count}</label>\n                        <input\n                            type=\"range\"\n                            className=\"form-control-range\"\n                            id=\"count\"\n                            min=\"1\"\n                            max=\"10\"\n                            step=\"1\"\n                            value={count}\n                            onChange={(e) => {\n                                setCount(parseInt(e.target.value));\n                            }}\n                        />\n                        <small className=\"form-text text-muted\">\n                            Number of inpaint options\n                        </small>\n                    </div>\n                    {/* select model dropdown */}\n                    {/* options: stable_diffusion_inpainting, \"Epic Diffusion\", \"Deliberate\" */}\n                    <div className=\"form-group\">\n                        <label htmlFor=\"model\">Model</label>\n                        <select\n                            className=\"form-control\"\n                            id=\"model\"\n                            value={model}\n                            onChange={(e) => {\n                                setModel(e.target.value);\n                            }}\n                        >\n                            <option value=\"stable_diffusion_inpainting\">\n                                Stable Diffusion\n                            </option>\n\n                            <option value=\"stable_diffusion_2_inpainting\">\n                                Stable Diffusion 2\n                            </option>\n                            <option value=\"dreamlike_diffusion_inpainting\">\n                                Dreamlike Diffusion\n                            </option>\n                            <option value=\"anything_v4_inpainting\">\n                                Anything v4\n                            </option>\n                            <option value=\"Epic Diffusion Inpainting\">\n                                Epic Diffusion\n                            </option>\n                            <option value=\"Deliberate Inpainting\">\n                                Deliberate\n                            </option>\n                        </select>\n                        <small className=\"form-text text-muted\">\n                            Select the inpaint model\n                        </small>\n                    </div>\n                </>\n            )}\n\n            {state === \"confirm\" && (\n                <>\n                    <p>\n                        Use the <i className=\"fa fa-arrow-left\"></i> and{\" \"}\n                        <i className=\"fa fa-arrow-right\"></i> buttons to\n                        navigate between the inpaint options\n                    </p>\n                </>\n            )}\n\n            <div className=\"form-group\">\n                {(dirty ||\n                    state === \"confirm\" ||\n                    (state == \"erase\" && tool.selectSupported()) ||\n                    state == \"inpaint\") && (\n                    <button\n                        style={{ marginRight: \"8px\" }}\n                        className=\"btn btn-primary btn-sm\"\n                        onClick={() => {\n                            tool.cancel();\n                        }}\n                    >\n                        {/* cancel icon */}\n                        <i className=\"fa fa-times\"></i>&nbsp; Revert\n                    </button>\n                )}\n\n                {state === \"confirm\" && (\n                    <>\n                        <button\n                            className=\"btn btn-primary btn-sm\"\n                            onClick={() => tool.confirm()}\n                            style={{ marginRight: \"8px\" }}\n                        >\n                            {/* save icon */}\n                            <i className=\"fa fa-save\"></i>&nbsp; Save\n                        </button>\n                    </>\n                )}\n                {state == \"select\" && (\n                    <button\n                        style={{ marginRight: \"8px\" }}\n                        type=\"button\"\n                        className=\"btn btn-primary btn-sm\"\n                        onClick={() => (tool.state = \"erase\")}\n                    >\n                        <i className=\"fa fa-eraser\"></i>&nbsp; Continue\n                    </button>\n                )}\n                {state == \"erase\" && (\n                    <button\n                        style={{ marginRight: \"8px\" }}\n                        type=\"button\"\n                        className=\"btn btn-primary btn-sm\"\n                        onClick={() => (tool.state = \"inpaint\")}\n                    >\n                        <i className=\"fa fa-paint-brush\"></i>&nbsp; Continue\n                    </button>\n                )}\n                {state === \"inpaint\" && (\n                    <button\n                        style={{ marginRight: \"8px\" }}\n                        className=\"btn btn-primary btn-sm\"\n                        onClick={() => {\n                            tool.updateArgs({\n                                count,\n                                prompt,\n                                negativePrompt,\n                            });\n                            tool.submit(api, apisocket, image, model);\n                        }}\n                    >\n                        {/* paint icon */}\n                        <i className=\"fa fa-paint-brush\"></i>&nbsp; Inpaint\n                    </button>\n                )}\n            </div>\n            <Prompt\n                when={dirty}\n                message=\"Are you sure you want to leave? Your changes will be lost.\"\n            />\n        </div>\n    );\n};\n","// V2 page\nimport { FC, useState, useEffect } from \"react\";\nimport * as uuid from \"uuid\";\nimport axios from \"axios\";\nimport qs from \"qs\";\nimport Dropdown from \"react-bootstrap/Dropdown\";\nimport { useParams, useHistory, Link, useLocation } from \"react-router-dom\";\nimport moment from \"moment\";\nimport ScrollToTop from \"react-scroll-to-top\";\nimport { AIBrushApi } from \"../client\";\nimport {\n    CreateImageInput,\n    StatusEnum,\n    Boost,\n} from \"../client/api\";\nimport { ImageThumbnail } from \"../components/ImageThumbnail\";\nimport { ImagePrompt, defaultArgs } from \"../components/ImagePrompt\";\nimport { BoostWidget } from \"../components/BoostWidget\";\nimport {\n    createEncodedThumbnail,\n    encodedImageToBlob,\n    uploadBlob,\n} from \"../lib/imageutil\";\n\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport { ImagePopup } from \"../components/ImagePopup\";\nimport { BusyModal } from \"../components/BusyModal\";\nimport { PendingImagesThumbnail } from \"../components/PendingImagesThumbnail\";\nimport { PendingImages } from \"../components/PendingImages\";\nimport {\n    ApiSocket,\n    NOTIFICATION_BOOST_UPDATED,\n    NOTIFICATION_IMAGE_DELETED,\n    NOTIFICATION_IMAGE_UPDATED,\n} from \"../lib/apisocket\";\nimport { LocalImagesStore, LocalImage } from \"../lib/localImagesStore\";\nimport { ErrorNotification, SuccessNotification } from \"../components/Alerts\";\n\nexport const anonymousClient = axios.create();\ndelete anonymousClient.defaults.headers.common[\"Authorization\"];\n\ninterface Props {\n    api: AIBrushApi;\n    apiSocket: ApiSocket;\n    assetsUrl: string;\n    localImages: LocalImagesStore;\n}\n\nexport const Homepage: FC<Props> = ({\n    api,\n    apiSocket,\n    assetsUrl,\n    localImages,\n}) => {\n    const [creating, setCreating] = useState(false);\n    const [selectedImage, setSelectedImage] = useState<LocalImage | null>(null);\n    const [parentImage, setParentImage] = useState<LocalImage | null>(null);\n    const [loadingParent, setLoadingParent] = useState(false);\n    const [savingImage, setSavingImage] = useState(false);\n    const [uploadProgress, setUploadingProgress] = useState(0);\n\n    const [showPendingImages, setShowPendingImages] = useState(false);\n\n    const [images, setImages] = useState<Array<LocalImage>>([]);\n    const [err, setErr] = useState<string | null>(null);\n    const [errTime, setErrTime] = useState<number>(0);\n    const [success, setSuccess] = useState<string | null>(null);\n    const [successTime, setSuccessTime] = useState<number>(0);\n\n    const [hasMore, setHasMore] = useState<boolean>(true);\n    const [search, setSearch] = useState<string>(\"\");\n    const [searchDebounce, setSearchDebounce] = useState<string>(\"\");\n\n    const [bulkDeleteSelecting, setBulkDeleteSelecting] = useState(false);\n    const [bulkDeleting, setBulkDeleting] = useState(false);\n    const [bulkDeleteIds, setBulkDeleteIds] = useState<{\n        [key: string]: boolean;\n    }>({});\n\n    const [boost, setBoost] = useState<Boost | null>(null);\n    const [censorNSFW, setCensorNSFW] = useState(true);\n\n    const { id } = useParams<{ id?: string }>();\n    const history = useHistory();\n    const location = useLocation();\n\n    const onError = (err: string) => {\n        setErr(err);\n        setErrTime(moment().valueOf());\n    };\n\n    useEffect(() => {\n        let handle = setTimeout(() => {\n            setSearch(searchDebounce);\n        }, 500);\n        return () => {\n            clearTimeout(handle);\n        };\n    }, [searchDebounce]);\n\n    useEffect(() => {\n        if (id) {\n            // check if the image is already loaded\n            const image = images.find((image) => image.id === id);\n            if (image) {\n                setSelectedImage(image);\n            }\n            // refresh\n            localImages.getImage(id).then((image) => {\n                setSelectedImage(image);\n                if (!image) {\n                    history.replace(\"/\");\n                }\n            });\n        } else {\n            setSelectedImage(null);\n        }\n    }, [id]);\n\n    const onSubmit = async (input: CreateImageInput) => {\n        setCreating(true);\n        setParentImage(null);\n        setErr(null);\n        window.scrollTo(0, 0);\n        try {\n            const newImages = await api.createImage(input);\n            if (newImages.data.images) {\n                for (let image of newImages.data.images || []) {\n                    localImages.saveImage(image);\n                }\n                setImages((images) => {\n                    return [...newImages.data.images!, ...images].sort(\n                        sortImages\n                    );\n                });\n            } else {\n                onError(\"Could not create images\");\n            }\n        } catch (e: any) {\n            console.error(e);\n            onError(\"Error creating image\");\n        } finally {\n            setCreating(false);\n        }\n    };\n\n    const onEditNewImage = async (input: CreateImageInput) => {\n        setCreating(true);\n        setParentImage(null);\n        setErr(null);\n        window.scrollTo(0, 0);\n        try {\n            const encodedImage = input.encoded_image!;\n            const newImage: LocalImage = {\n                created_at: moment().valueOf(),\n                updated_at: moment().valueOf(),\n                created_by: \"\",\n                params: {\n                    steps: 20,\n                    width: input.params.width,\n                    height: input.params.height,\n                    prompt: input.params.prompt,\n                    negative_prompt: input.params.negative_prompt,\n                    denoising_strength: input.params.denoising_strength,\n                },\n                label: \"\",\n                id: uuid.v4(),\n                model: input.model!,\n                negative_score: 0,\n                nsfw: !!input.nsfw,\n                parent: input.parent!,\n                score: 0,\n                status: StatusEnum.Completed,\n                temporary: false,\n                imageData: `data:image/png;base64,${encodedImage}`,\n            };\n            await localImages.saveImage(newImage);\n\n            history.push(`/image-editor/${newImage.id}`);\n        } catch (e: any) {\n            console.error(e);\n            onError(\"Error creating image\");\n        } finally {\n            setCreating(false);\n        }\n    };\n\n    const onNSFW = async (updatedImage: LocalImage, nsfw: boolean) => {\n        await localImages.saveImage({\n            ...updatedImage,\n            nsfw,\n        });\n        setImages((images) => {\n            return images.map((image) => {\n                if (updatedImage.id === image.id) {\n                    return {\n                        ...image,\n                        nsfw,\n                    };\n                }\n                return image;\n            });\n        });\n    };\n\n    const loadImages = async (search: string) => {\n        console.log(\"Initial load images\");\n        // clear error\n        setErr(null);\n        setHasMore(true);\n        try {\n            const cursor = moment().add(1, \"minutes\").valueOf();\n            const resp = await localImages.listImages(\n                cursor,\n                \"prev\",\n                100,\n                search\n            );\n            setImages(resp.sort(sortImages));\n            return;\n        } catch (err) {\n            onError(\"Could not load images\");\n            console.error(err);\n        }\n    };\n\n    useEffect(() => {\n        loadImages(search);\n    }, [search]);\n\n    useEffect(() => {\n        apiSocket.onMessage(async (message) => {\n            const payload = JSON.parse(message);\n            if (payload.type === NOTIFICATION_BOOST_UPDATED) {\n                const updatedBoost = await api.getBoost();\n                setBoost(updatedBoost.data);\n            }\n        });\n        return () => {\n            apiSocket.onMessage(undefined);\n        };\n    }, [apiSocket]);\n\n    useEffect(() => {\n        if (!api) {\n            return;\n        }\n        let lock = false;\n\n        const pollImages = async (images: Array<LocalImage>) => {\n            if (lock) {\n                return;\n            }\n            lock = true;\n\n            const pendingOrProcessingImages = images.filter((image) => {\n                return (\n                    image.status === \"pending\" || image.status === \"processing\"\n                );\n            });\n            if (pendingOrProcessingImages.length === 0) {\n                return;\n            }\n\n            const imageStatuses = pendingOrProcessingImages.reduce(\n                (acc, image) => {\n                    acc[image.id] = image.status;\n                    return acc;\n                },\n                {} as Record<string, StatusEnum>\n            );\n\n            try {\n                const resp = await api.batchGetImages({\n                    ids: pendingOrProcessingImages.map((image) => image.id),\n                });\n\n                if (resp.data.images) {\n                    const updatedImages: Array<LocalImage> =\n                        resp.data.images || [];\n                    let statusChange = false;\n                    for (let img of updatedImages) {\n                        if (imageStatuses[img.id] !== img.status) {\n                            statusChange = true;\n                        }\n\n                        if (img.status == StatusEnum.Error) {\n                            onError(\n                                img.error ||\n                                    \"Some images failed to generate, please make sure your prompt doesn't violate our terms of service\"\n                            );\n                            await api.deleteImage(img.id);\n                            await localImages.deleteImage(img.id);\n                            continue;\n                        }\n\n                        if (img.status === StatusEnum.Completed) {\n                            const downloadUrls = await api.getImageDownloadUrls(\n                                img.id\n                            );\n                            const resp = await anonymousClient.get(\n                                downloadUrls.data.image_url!,\n                                {\n                                    responseType: \"arraybuffer\",\n                                }\n                            );\n                            const binaryImageData = Buffer.from(\n                                resp.data,\n                                \"binary\"\n                            );\n                            const base64ImageData =\n                                binaryImageData.toString(\"base64\");\n                            const src = `data:image/png;base64,${base64ImageData}`;\n                            img.imageData = src;\n                        }\n                        await localImages.saveImage(img);\n                    }\n                    if (statusChange) {\n                        setImages((images) => {\n                            return [\n                                ...images.map((image) => {\n                                    const updatedImage = updatedImages.find(\n                                        (i) => i.id === image.id\n                                    );\n                                    if (updatedImage) {\n                                        return updatedImage;\n                                    }\n                                    return image;\n                                }),\n                            ].sort(sortImages);\n                        });\n                    }\n                }\n            } catch (err) {\n                onError(\"Could not load images\");\n                console.error(err);\n            } finally {\n                lock = false;\n            }\n        };\n\n        const timerHandle = setInterval(() => {\n            pollImages(images);\n        }, 2 * 1000);\n        return () => {\n            clearInterval(timerHandle);\n        };\n    }, [api, images, search]);\n\n    useEffect(() => {\n        const refreshBoost = async () => {\n            const updatedBoost = await api.getBoost();\n            setBoost(updatedBoost.data);\n        };\n        refreshBoost();\n        const interval = setInterval(refreshBoost, 60 * 1000);\n        return () => {\n            clearInterval(interval);\n        };\n    }, [api]);\n\n    // load parent image from saved images if an id is on the query string\n    useEffect(() => {\n        const loadParent = async () => {\n            const search = qs.parse(location.search, {\n                ignoreQueryPrefix: true,\n            });\n            if (search.parent) {\n                setLoadingParent(true);\n                try {\n                    const parentImage = await api.getImage(\n                        search.parent as string\n                    );\n                    if (parentImage.data) {\n                        const downloadUrls = await api.getImageDownloadUrls(\n                            parentImage.data.id\n                        );\n                        const resp = await anonymousClient.get(\n                            downloadUrls.data.image_url!,\n                            {\n                                responseType: \"arraybuffer\",\n                            }\n                        );\n                        const binaryImageData = Buffer.from(\n                            resp.data,\n                            \"binary\"\n                        );\n                        const base64ImageData =\n                            binaryImageData.toString(\"base64\");\n                        const src = `data:image/png;base64,${base64ImageData}`;\n                        setParentImage({\n                            ...parentImage.data,\n                            imageData: src,\n                        });\n                        history.push(\"/\");\n                    }\n                } finally {\n                    setLoadingParent(false);\n                }\n            }\n        };\n        loadParent();\n    }, [location.search]);\n\n    const isPendingOrProcessing = (image: LocalImage) => {\n        return (\n            image.status === StatusEnum.Pending ||\n            image.status === StatusEnum.Processing\n        );\n    };\n\n    const sortImages = (a: LocalImage, b: LocalImage) => {\n        // pending and processing images always come first\n        if (isPendingOrProcessing(a) && !isPendingOrProcessing(b)) {\n            return -1;\n        } else if (!isPendingOrProcessing(a) && isPendingOrProcessing(b)) {\n            return 1;\n        }\n        // if the parent is the same, sort by score descending\n        // otherwise, sort by updated_at\n        if (\n            a.parent === b.parent &&\n            a.params.prompt == b.params.prompt &&\n            a.status !== StatusEnum.Pending &&\n            b.status !== StatusEnum.Pending\n        ) {\n            // if the score is the same, sort by updated_at\n            let aScore = a.score;\n            let bScore = b.score;\n            // working around a bug where negative score was assigned\n            // for an empty negative prompt.\n            if (a.params.prompt!.trim() !== \"\") {\n                aScore = aScore - a.negative_score;\n            }\n            if (b.params.prompt!.trim() !== \"\") {\n                bScore = bScore - b.negative_score;\n            }\n            if (aScore == bScore) {\n                return b.updated_at - a.updated_at;\n            }\n            return bScore - aScore;\n        }\n\n        return b.updated_at - a.updated_at;\n    };\n\n    const onLoadMore = async () => {\n        // get the minimum updated_at from images\n        let minUpdatedAt = moment().valueOf();\n        images.forEach((image) => {\n            minUpdatedAt = Math.min(minUpdatedAt, image.updated_at);\n        });\n        // load images in descending order from updated_at\n        const resp = await localImages.listImages(\n            minUpdatedAt - 1,\n            \"prev\",\n            100,\n            search\n        );\n        if (resp.length > 0) {\n            // combine images with new images and sort by updated_at descending\n            setImages((images) =>\n                [...images, ...resp]\n                    .filter((image) => !image.deleted_at)\n                    .sort(sortImages)\n            );\n        } else {\n            setHasMore(false);\n        }\n    };\n\n    const onDelete = async (image: LocalImage) => {\n        try {\n            // await api.deleteImage(image.id);\n            await localImages.deleteImage(image.id);\n            setImages((images) => {\n                return images.filter((i) => i.id !== image.id);\n            });\n            history.push(\"/\");\n        } catch (e) {\n            console.error(e);\n            onError(\"Error deleting image\");\n        }\n    };\n\n    const onFork = async (image: LocalImage) => {\n        setParentImage(image);\n        // setSelectedImage(null);\n        history.push(\"/\");\n        window.scrollTo(0, 0);\n    };\n\n    const onSave = async (image: LocalImage) => {\n        setSavingImage(true);\n        try {\n            history.push(\"/\");\n            const createInput: CreateImageInput = {\n                count: 1,\n                encoded_image: image.imageData!.split(\",\")[1],\n                params: image.params,\n                status: StatusEnum.Saved,\n                temporary: false,\n                label: \"\",\n                model: image.model,\n            };\n            setUploadingProgress(0);\n            await api.createImage(createInput, {\n                onUploadProgress: (progressEvent: any) => {\n                    const percentCompleted = Math.round(\n                        (progressEvent.loaded) / progressEvent.total\n                    );\n                    setUploadingProgress(percentCompleted);\n                },\n            });\n            await localImages.hardDeleteImage(image.id);\n            setImages((images) => {\n                return images.filter((i) => i.id !== image.id);\n            });\n            setSuccess(\"Image saved\");\n            setSuccessTime(moment().valueOf());\n            \n        } catch (e) {\n            console.error(e);\n            onError(\"Error saving image\");\n        } finally {\n            setSavingImage(false);\n        }\n    };\n\n    const onEdit = async (image: LocalImage) => {\n        history.push(`/image-editor/${image.id}`);\n    };\n\n    const onThumbnailClicked = (image: LocalImage) => {\n        // setSelectedImage(image);\n        if (bulkDeleteSelecting) {\n            setBulkDeleteIds({\n                ...bulkDeleteIds,\n                [image.id]: !bulkDeleteIds[image.id],\n            });\n        } else {\n            history.push(`/images/${image.id}`);\n        }\n    };\n\n    const handleCancelFork = () => {\n        setParentImage(null);\n        window.scrollTo(0, 0);\n    };\n\n    const onConfirmBulkDelete = async () => {\n        try {\n            setBulkDeleting(true);\n            const promises = Object.keys(bulkDeleteIds).map((id) => {\n                return localImages.deleteImage(id);\n            });\n            await Promise.all(promises);\n            setImages((images) => {\n                return images.filter((image) => !bulkDeleteIds[image.id]);\n            });\n            setBulkDeleteIds({});\n            setBulkDeleteSelecting(false);\n        } catch (e) {\n            console.error(e);\n            onError(\"Error deleting images\");\n        } finally {\n            setBulkDeleting(false);\n        }\n    };\n\n    const completedOrSavedImages = images.filter((image) => {\n        return (\n            !image.deleted_at &&\n            (image.status === StatusEnum.Completed ||\n                image.status === StatusEnum.Saved)\n        );\n    });\n\n    const pendingOrProcessingImages = images.filter(\n        (image) =>\n            !image.deleted_at &&\n            (image.status === StatusEnum.Pending ||\n                image.status === StatusEnum.Processing)\n    );\n\n    const pendingImages = pendingOrProcessingImages.filter(\n        (image) => image.status === StatusEnum.Pending\n    );\n\n    const processingImages = pendingOrProcessingImages.filter(\n        (image) => image.status === StatusEnum.Processing\n    );\n\n    const onUpdateBoostActive = async (active: boolean) => {\n        if (!boost) return;\n        const resp = await api.updateBoost({\n            is_active: active,\n            level: boost.level,\n        });\n        if (resp.data.error) {\n            alert(resp.data.error);\n        } else {\n            setBoost((await api.getBoost()).data);\n        }\n    };\n\n    const onUpdateBoostLevel = async (level: number) => {\n        if (!boost) return;\n        const resp = await api.updateBoost({\n            is_active: boost.is_active,\n            level: level,\n        });\n        if (resp.data.error) {\n            alert(resp.data.error);\n        } else {\n            setBoost((await api.getBoost()).data);\n        }\n    };\n\n    return (\n        <>\n            <h1 style={{ fontSize: \"40px\", textAlign: \"left\" }}>\n                Welcome to AiBrush - Home\n            </h1>\n\n            <ErrorNotification message={err} timestamp={errTime} />\n            <SuccessNotification message={success} timestamp={successTime} />\n\n            <ImagePrompt\n                assetsUrl={assetsUrl}\n                creating={creating}\n                onSubmit={onSubmit}\n                onEdit={onEditNewImage}\n                parent={parentImage}\n                onCancel={() => handleCancelFork()}\n            />\n            {boost && (\n                <BoostWidget\n                    boost={boost}\n                    onUpdateActive={onUpdateBoostActive}\n                    onUpdateBoostLevel={onUpdateBoostLevel}\n                />\n            )}\n            <hr />\n\n            <div\n                className=\"homepage-images\"\n                style={{ marginTop: \"48px\", paddingBottom: \"48px\" }}\n            >\n                <div style={{ textAlign: \"left\" }}>\n                    <div\n                        className=\"input-group\"\n                        style={{ marginBottom: \"16px\" }}\n                    >\n                        <input\n                            style={{}}\n                            value={searchDebounce}\n                            type=\"search\"\n                            className=\"form-control image-search\"\n                            placeholder=\"Search...\"\n                            onChange={(e) => setSearchDebounce(e.target.value)}\n                        />\n\n                        <div\n                            style={{\n                                float: \"right\",\n                            }}\n                        >\n                            {!bulkDeleteSelecting && (\n                                <>\n                                    <button\n                                        style={{ display: \"inline\" }}\n                                        className=\"btn btn-primary image-popup-button\"\n                                        onClick={() =>\n                                            setCensorNSFW(!censorNSFW)\n                                        }\n                                    >\n                                        {!censorNSFW && (\n                                            <i className=\"fas fa-eye\"></i>\n                                        )}\n                                        {censorNSFW && (\n                                            <i className=\"fas fa-eye-slash\"></i>\n                                        )}\n                                    </button>\n                                    <Dropdown\n                                        style={{\n                                            display: \"inline\",\n                                            marginLeft: \"8px\",\n                                        }}\n                                    >\n                                        <Dropdown.Toggle variant=\"danger\">\n                                            <i className=\"fas fa-trash\"></i>\n                                        </Dropdown.Toggle>\n\n                                        <Dropdown.Menu>\n                                            <Dropdown.Item\n                                                onClick={() =>\n                                                    setBulkDeleteSelecting(true)\n                                                }\n                                            >\n                                                Bulk Delete\n                                            </Dropdown.Item>\n                                            <Dropdown.Item\n                                                onClick={() =>\n                                                    history.push(\n                                                        \"/local-deleted-images\"\n                                                    )\n                                                }\n                                            >\n                                                View Deleted Images\n                                            </Dropdown.Item>\n                                        </Dropdown.Menu>\n                                    </Dropdown>\n                                </>\n                            )}\n                            {bulkDeleteSelecting && (\n                                <>\n                                    <button\n                                        className=\"btn btn-primary image-popup-button\"\n                                        onClick={() => {\n                                            setBulkDeleteSelecting(false);\n                                            setBulkDeleteIds({});\n                                        }}\n                                    >\n                                        Cancel\n                                    </button>\n                                    <button\n                                        style={{ marginLeft: \"8px\" }}\n                                        className=\"btn image-popup-delete-button\"\n                                        onClick={() => {\n                                            onConfirmBulkDelete();\n                                        }}\n                                    >\n                                        Delete\n                                    </button>\n                                </>\n                            )}\n                        </div>\n                    </div>\n                </div>\n                <InfiniteScroll\n                    dataLength={images.length}\n                    next={onLoadMore}\n                    hasMore={hasMore}\n                    loader={\n                        <>\n                            <hr />\n                            <h4>Loading...</h4>\n                        </>\n                    }\n                >\n                    {pendingOrProcessingImages.length > 0 && (\n                        <PendingImagesThumbnail\n                            pendingCount={pendingImages.length}\n                            processingCount={processingImages.length}\n                            onClick={() => {\n                                setShowPendingImages(true);\n                            }}\n                        />\n                    )}\n                    {completedOrSavedImages.map((image) => (\n                        <ImageThumbnail\n                            key={image.id}\n                            image={image}\n                            assetsUrl={assetsUrl}\n                            onClick={onThumbnailClicked}\n                            bulkDelete={\n                                bulkDeleteSelecting && bulkDeleteIds[image.id]\n                            }\n                            censorNSFW={censorNSFW}\n                        />\n                    ))}\n                </InfiniteScroll>\n            </div>\n\n            {selectedImage && (\n                <ImagePopup\n                    assetsUrl={assetsUrl}\n                    image={selectedImage}\n                    onClose={() => history.push(\"/\")}\n                    onDelete={(image) => {\n                        onDelete(image);\n                        setImages(images.filter((i) => i.id !== image.id));\n                        history.push(\"/\");\n                    }}\n                    onFork={(image) => {\n                        onFork(image);\n                        history.push(\"/\");\n                    }}\n                    onEdit={(image) => {\n                        onEdit(image);\n                    }}\n                    onSave={(image) => {\n                        onSave(image);\n                    }}\n                    onNSFW={onNSFW}\n                    censorNSFW={censorNSFW}\n                />\n            )}\n            <ScrollToTop />\n            <BusyModal show={creating} title=\"Creating images\">\n                <p>Please wait while we create your image.</p>\n            </BusyModal>\n            <BusyModal show={bulkDeleting} title=\"Deleting images\">\n                <p>Please wait while we delete your images.</p>\n            </BusyModal>\n            <BusyModal show={loadingParent} title=\"Loading parent image\">\n                <p>Please wait while we load the parent image.</p>\n            </BusyModal>\n            <BusyModal show={savingImage} title=\"Saving image\">\n                {/* bootstrap progress bar for uploadProgress (0-1 value) */}\n                <div className=\"progress\">\n                    <div\n                        className=\"progress-bar\"\n                        role=\"progressbar\"\n                        style={{ width: `${uploadProgress * 100}%` }}\n                        aria-valuenow={uploadProgress * 100}\n                    ></div>\n                </div>\n                \n            </BusyModal>\n            <PendingImages\n                images={pendingOrProcessingImages}\n                onCancel={() => setShowPendingImages(false)}\n                show={showPendingImages}\n                onDeleteImage={(image) => {\n                    onDelete(image);\n                    setImages(images.filter((i) => i.id !== image.id));\n                }}\n            />\n        </>\n    );\n};\n","import React, { FC, useState, useEffect } from \"react\";\n\ninterface Props {\n    selectedColor: string;\n    color: string;\n    onClick: (color: string) => void;\n}\n\nexport const PaletteButton: FC<Props> = ({ selectedColor, color, onClick }) => {\n    let className = \"palette-button\";\n    if (selectedColor === color) {\n        className += \" selected\";\n    } else if (color == \"#000000\") {\n        className += \" black\";\n    }\n    return (\n        <div\n            className={className}\n            style={{ backgroundColor: color }}\n            onClick={() => onClick(color)}\n        ></div>\n    );\n};\n","import React, { FC, useState, useEffect } from \"react\";\nimport { ChromePicker } from \"react-color\";\n\n// class ButtonExample extends React.Component {\n//   state = {\n//     displayColorPicker: false,\n//   };\n\n//   handleClick = () => {\n//     this.setState({ displayColorPicker: !this.state.displayColorPicker })\n//   };\n\n//   handleClose = () => {\n//     this.setState({ displayColorPicker: false })\n//   };\n\n//   render() {\n//     const popover = {\n//       position: 'absolute',\n//       zIndex: '2',\n//     }\n//     const cover = {\n//       position: 'fixed',\n//       top: '0px',\n//       right: '0px',\n//       bottom: '0px',\n//       left: '0px',\n//     }\n//     return (\n//       <div>\n//         <button onClick={ this.handleClick }>Pick Color</button>\n//         { this.state.displayColorPicker ? <div style={ popover }>\n//           <div style={ cover } onClick={ this.handleClose }/>\n//           <ChromePicker />\n//         </div> : null }\n//       </div>\n//     )\n//   }\n// }\n\ninterface Props {\n    color: string;\n    onColorSelected: (color: string) => void;\n}\n\nexport const ColorPicker: FC<Props> = ({ color, onColorSelected }) => {\n    const [displayColorPicker, setDisplayColorPicker] = useState(false);\n    const [tmpColor, setTmpColor] = useState(color);\n\n    const handleClick = () => {\n        setDisplayColorPicker(!displayColorPicker);\n        if (displayColorPicker) {\n            onColorSelected(tmpColor);\n        }\n    };\n\n    const handleClose = () => {\n        setDisplayColorPicker(false);\n        if (displayColorPicker) {\n            onColorSelected(tmpColor);\n        }\n    };\n\n    const popover: React.CSSProperties = {\n        position: \"absolute\",\n        zIndex: 2,\n    };\n    const cover: React.CSSProperties = {\n        position: \"fixed\",\n        top: \"0px\",\n        right: \"0px\",\n        bottom: \"0px\",\n        left: \"0px\",\n    };\n\n    return (\n        <>\n            <button className=\"color-picker\" onClick={handleClick}>\n                <i className=\"fas fa-plus\" />\n            </button>\n            {displayColorPicker ? (\n                <div style={popover}>\n                    <div style={cover} onClick={handleClose} />\n                    <ChromePicker\n                        color={tmpColor}\n                        onChange={(color) => setTmpColor(color.hex)}\n                        onChangeComplete={(color) => setTmpColor(color.hex)}\n                    />\n                </div>\n            ) : null}\n        </>\n    );\n};\n","import React, { FC, useEffect, useState } from \"react\";\nimport { ChromePicker } from \"react-color\";\n\nimport { Renderer } from \"./renderer\";\nimport { BaseTool, Tool } from \"./tool\";\nimport { ZoomHelper } from \"./zoomHelper\";\nimport { PaletteButton } from \"./PaletteButton\";\nimport { ColorPicker } from \"./ColorPicker\";\n\nconst defaultColors = [\n    \"#FFFFFF\",\n    \"#5A2C02\",\n    \"#386EB6\",\n    \"#6B31A1\",\n    \"#CB2C26\",\n    \"#000000\",\n    \"#888888\",\n    \"#50B050\",\n    \"#FBDB37\",\n    \"#E88D2D\",\n];\n\nexport class PencilTool extends BaseTool implements Tool {\n    private brushSize = 10;\n    private brushColor = defaultColors[0];\n    private palette: string[] = [...defaultColors];\n\n    private panning = false;\n    private isDrawing = false;\n    private lastX = 0;\n    private lastY = 0;\n    private colorPicking = false;\n    private lastPickedColor = \"#000000\";\n    private _dirty = false;\n\n    set dirty(dirty: boolean) {\n        this._dirty = dirty;\n        if (this.dirtyListener) {\n            this.dirtyListener(dirty);\n        }\n    }\n\n    get dirty() {\n        return this._dirty;\n    }\n\n\n    private dirtyListener?: (dirty: boolean) => void;\n    private colorPickedListener?: (color: string) => void;\n\n    constructor(renderer: Renderer) {\n        super(renderer, \"pencil\");\n    }\n\n    private sync() {\n        if (this.colorPicking) {\n            this.renderer.setCursor({\n                x: this.lastX,\n                y: this.lastY,\n                radius: this.renderer.getWidth() / 20,\n                color: this.lastPickedColor,\n                type: \"colorpicker\",\n            })\n        } else {\n            this.renderer.setCursor({\n                x: this.lastX,\n                y: this.lastY,\n                radius: this.brushSize / 2,\n                color: this.brushColor,\n                type: \"circle-fill\",\n            });\n        }\n        \n    }\n\n    updateArgs(args: any) {\n        super.updateArgs(args);\n        this.brushSize = args.brushSize || 10;\n        this.brushColor = args.brushColor || defaultColors[0];\n        this.palette = args.palette || [...defaultColors];\n        this.sync();\n    }\n\n    onMouseDown(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        if (this.colorPicking) {\n            return;\n        }\n        if (event.button === 0) {\n            let { x, y } = this.zoomHelper.translateMouseToCanvasCoordinates(\n                event.nativeEvent.offsetX,\n                event.nativeEvent.offsetY\n            );\n            this.renderer.drawPoint(x, y, this.brushSize, this.brushColor);\n            this.isDrawing = true;\n            this.lastX = x;\n            this.lastY = y;\n            this.dirty = true;\n        } else if (event.button === 1) {\n            this.panning = true;\n        }\n        this.sync();\n    }\n\n    onMouseMove(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>): void {\n        let { x, y } = this.zoomHelper.translateMouseToCanvasCoordinates(\n            event.nativeEvent.offsetX,\n            event.nativeEvent.offsetY\n        );\n        if (this.colorPicking) {\n            this.lastPickedColor = this.renderer.getPixel(x, y);\n        } else if (this.panning) {\n            this.zoomHelper.onPan(event);\n        } else {\n            if (this.isDrawing) {\n                this.renderer.drawLine(\n                    this.lastX,\n                    this.lastY,\n                    x,\n                    y,\n                    this.brushSize,\n                    this.brushColor\n                );\n                this.dirty = true;\n            }\n        }\n        this.lastX = x;\n        this.lastY = y;\n        this.sync();\n    }\n\n    onMouseUp(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>): void {\n        if (event.button === 0) {\n            this.isDrawing = false;\n            if (this.colorPicking) {\n                this.colorPicking = false;\n                this.brushColor = this.lastPickedColor;\n                if (this.colorPickedListener) {\n                    this.colorPickedListener(this.lastPickedColor);\n                }\n            }\n        } else if (event.button === 1) {\n            this.panning = false;\n        }\n        this.sync();\n    }\n\n    onWheel(event: WheelEvent) {\n        this.zoomHelper.onWheel(event);\n        this.sync();\n    }\n\n    cancel() {\n        // kind of a hack, clears the selection layer\n        this.renderer.setEditImage(null);\n        this.dirty = false;\n    }\n\n    confirm() {\n        this.renderer.commitSelection();\n        const encodedImage = this.renderer.getEncodedImage(null);\n        if (encodedImage && this.saveListener) {\n            this.saveListener(encodedImage);\n        }\n        this.dirty = false;\n    }\n\n    onSaveImage(listener: (encodedImage: string) => void): void {\n        this.saveListener = listener;\n    }\n\n    onDirty(listener: (dirty: boolean) => void): void {\n        this.dirtyListener = listener;\n    }\n\n    destroy(): boolean {\n        if (this.dirty) {\n            this.renderer.commitSelection();\n        }\n        return true;\n    }\n\n    beginColorpicker(): void {\n        this.colorPicking = true;\n        this.sync();\n    }\n\n    onColorPicked(listener: (color: string) => void): void {\n        this.colorPickedListener = listener;\n    }\n}\n\ninterface ControlsProps {\n    renderer: Renderer;\n    tool: PencilTool;\n}\n\nconst MAX_PALETTE_SIZE = 30;\n\nfunction addToPalette(palette: string[], color: string): string[] {\n    if (palette.indexOf(color) === -1) {\n        // insert at the beginning\n        palette = [color, ...palette];\n    }\n    if (palette.length > MAX_PALETTE_SIZE) {\n        palette = palette.slice(0, MAX_PALETTE_SIZE);\n    }\n    return palette;\n}\n\nexport const Controls: FC<ControlsProps> = ({ renderer, tool }) => {\n    const [brushSize, setBrushSize] = useState(10);\n    const [brushColor, setBrushColor] = useState(defaultColors[0]);\n    const [palette, setPalette] = useState(defaultColors);\n    const [dirty, setDirty] = useState(false);\n\n    tool.onDirty(setDirty);\n\n    useEffect(() => {\n        tool.updateArgs({\n            brushSize,\n            brushColor,\n            palette,\n        });\n    }, [brushSize, brushColor, palette]);\n\n    const onColorSelected = (color: string) => {\n        setBrushColor(color);\n        setPalette(addToPalette(palette, color));\n    };\n\n    tool.onColorPicked(onColorSelected);\n\n    return (\n        <div style={{ marginTop: \"16px\" }}>\n            <div className=\"form-group\">\n                <label style={{width: \"100%\"}}>\n                    Brush size\n                    <small className=\"form-text text-muted\" style={{float: \"right\"}}>\n                        {brushSize}px\n                    </small>\n                </label>\n                <input\n                    type=\"range\"\n                    className=\"form-control-range\"\n                    min=\"1\"\n                    max=\"100\"\n                    value={brushSize}\n                    onChange={(e) => setBrushSize(parseInt(e.target.value))}\n                />\n            </div>\n            <div\n                style={{\n                    display: \"flex\",\n                    flexDirection: \"row\",\n                    flexWrap: \"wrap\",\n                }}\n            >\n                {palette.map((color, i) => (\n                    <PaletteButton\n                        key={i}\n                        selectedColor={brushColor}\n                        color={color}\n                        onClick={(color) => setBrushColor(color)}\n                    />\n                ))}\n                {/* <div\n                    className=\"color-picker\"\n                    style={{ textAlign: \"center\", backgroundColor: \"#ccc\" }}\n                >\n                    <i className=\"fas fa-eye-dropper\" />\n                </div> */}\n                <button\n                    className=\"color-picker\"\n                    onClick={() => tool.beginColorpicker()}\n                >\n                    <i className=\"fas fa-eye-dropper\" />\n                </button>\n                <ColorPicker\n                    color={brushColor}\n                    onColorSelected={(color) => onColorSelected(color)}\n                />\n            </div>\n            <div className=\"form-group\" style={{\n                marginTop: \"16px\",\n                visibility: dirty ? \"visible\" : \"hidden\",\n            }}>\n                <button\n                    className=\"btn btn-secondary\"\n                    onClick={() => tool.cancel()}\n                >\n                    Revert\n                </button>\n                <button\n                    className=\"btn btn-primary\"\n                    onClick={() => tool.confirm()}\n                    style={{ marginLeft: \"8px\" }}\n                >\n                    Save\n                </button>\n            </div>\n        </div>\n    );\n};\n\n// TODO list:\n// reset to initial colors\n// color picker\n// eyedropper\n// color history\n\n// zoom/pan\n// actual drawing\n// undo/redo\n// save\n// revert\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * AIBrush API\n * Orchestration backend for AI Brush\n *\n * The version of the OpenAPI document: 1.0.0\n * Contact: admin@aibrush.art\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport { Configuration } from './configuration';\nimport globalAxios, { AxiosPromise, AxiosInstance } from 'axios';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';\n\n/**\n * \n * @export\n * @interface AddMetricItem\n */\nexport interface AddMetricItem {\n    /**\n     * \n     * @type {string}\n     * @memberof AddMetricItem\n     */\n    name: string;\n    /**\n     * \n     * @type {number}\n     * @memberof AddMetricItem\n     */\n    value: number;\n    /**\n     * \n     * @type {string}\n     * @memberof AddMetricItem\n     */\n    type: AddMetricItemTypeEnum;\n    /**\n     * \n     * @type {Array<MetricAttribute>}\n     * @memberof AddMetricItem\n     */\n    attributes: Array<MetricAttribute>;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum AddMetricItemTypeEnum {\n    Gauge = 'gauge',\n    Count = 'count'\n}\n\n/**\n * \n * @export\n * @interface AddMetricsInput\n */\nexport interface AddMetricsInput {\n    /**\n     * \n     * @type {Array<AddMetricItem>}\n     * @memberof AddMetricsInput\n     */\n    metrics: Array<AddMetricItem>;\n}\n/**\n * \n * @export\n * @interface AssetsUrl\n */\nexport interface AssetsUrl {\n    /**\n     * \n     * @type {string}\n     * @memberof AssetsUrl\n     */\n    assets_url: string;\n}\n/**\n * \n * @export\n * @interface BatchGetImagesInput\n */\nexport interface BatchGetImagesInput {\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof BatchGetImagesInput\n     */\n    ids: Array<string>;\n}\n/**\n * \n * @export\n * @interface Boost\n */\nexport interface Boost {\n    /**\n     * \n     * @type {string}\n     * @memberof Boost\n     */\n    user_id: string;\n    /**\n     * \n     * @type {number}\n     * @memberof Boost\n     */\n    activated_at: number;\n    /**\n     * Balance in 1/2 gpu milliseconds (.1 cents)\n     * @type {number}\n     * @memberof Boost\n     */\n    balance: number;\n    /**\n     * \n     * @type {number}\n     * @memberof Boost\n     */\n    level: number;\n    /**\n     * Whether the boost is active\n     * @type {boolean}\n     * @memberof Boost\n     */\n    is_active?: boolean;\n}\n/**\n * \n * @export\n * @interface BoostList\n */\nexport interface BoostList {\n    /**\n     * \n     * @type {Array<Boost>}\n     * @memberof BoostList\n     */\n    boosts: Array<Boost>;\n}\n/**\n * \n * @export\n * @interface CreateImageInput\n */\nexport interface CreateImageInput {\n    /**\n     * \n     * @type {StatusEnum}\n     * @memberof CreateImageInput\n     */\n    status?: StatusEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateImageInput\n     */\n    label?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateImageInput\n     */\n    parent?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateImageInput\n     */\n    encoded_image?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateImageInput\n     */\n    encoded_mask?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateImageInput\n     */\n    encoded_npy?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateImageInput\n     */\n    model: string;\n    /**\n     * \n     * @type {ImageParams}\n     * @memberof CreateImageInput\n     */\n    params: ImageParams;\n    /**\n     * \n     * @type {number}\n     * @memberof CreateImageInput\n     */\n    count: number;\n    /**\n     * \n     * @type {boolean}\n     * @memberof CreateImageInput\n     */\n    nsfw?: boolean;\n    /**\n     * \n     * @type {boolean}\n     * @memberof CreateImageInput\n     */\n    temporary?: boolean;\n}\n/**\n * \n * @export\n * @interface DepositRequest\n */\nexport interface DepositRequest {\n    /**\n     * Amount in 1/2 gpu milliseconds (.1 cents)\n     * @type {number}\n     * @memberof DepositRequest\n     */\n    amount: number;\n    /**\n     * Boost level to activate after deposit\n     * @type {number}\n     * @memberof DepositRequest\n     */\n    level: number;\n}\n/**\n * \n * @export\n * @interface DiscordLogin\n */\nexport interface DiscordLogin {\n    /**\n     * \n     * @type {string}\n     * @memberof DiscordLogin\n     */\n    code: string;\n}\n/**\n * \n * @export\n * @interface FeatureList\n */\nexport interface FeatureList {\n    /**\n     * \n     * @type {string}\n     * @memberof FeatureList\n     */\n    terms_uri?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof FeatureList\n     */\n    privacy_uri?: string;\n}\n/**\n * \n * @export\n * @interface GlobalSettings\n */\nexport interface GlobalSettings {\n    /**\n     * \n     * @type {string}\n     * @memberof GlobalSettings\n     */\n    settings_key: string;\n    /**\n     * \n     * @type {object}\n     * @memberof GlobalSettings\n     */\n    settings_json: object;\n}\n/**\n * \n * @export\n * @interface Healthcheck\n */\nexport interface Healthcheck {\n    /**\n     * \n     * @type {string}\n     * @memberof Healthcheck\n     */\n    status?: HealthcheckStatusEnum;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum HealthcheckStatusEnum {\n    Ok = 'ok'\n}\n\n/**\n * \n * @export\n * @interface Image\n */\nexport interface Image {\n    /**\n     * \n     * @type {string}\n     * @memberof Image\n     */\n    id: string;\n    /**\n     * \n     * @type {number}\n     * @memberof Image\n     */\n    created_at: number;\n    /**\n     * \n     * @type {string}\n     * @memberof Image\n     */\n    created_by: string;\n    /**\n     * \n     * @type {number}\n     * @memberof Image\n     */\n    updated_at: number;\n    /**\n     * \n     * @type {ImageParams}\n     * @memberof Image\n     */\n    params: ImageParams;\n    /**\n     * \n     * @type {string}\n     * @memberof Image\n     */\n    label: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Image\n     */\n    parent: string;\n    /**\n     * \n     * @type {number}\n     * @memberof Image\n     */\n    score: number;\n    /**\n     * \n     * @type {number}\n     * @memberof Image\n     */\n    negative_score: number;\n    /**\n     * \n     * @type {StatusEnum}\n     * @memberof Image\n     */\n    status: StatusEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof Image\n     */\n    model: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof Image\n     */\n    nsfw: boolean;\n    /**\n     * \n     * @type {boolean}\n     * @memberof Image\n     */\n    temporary: boolean;\n    /**\n     * \n     * @type {number}\n     * @memberof Image\n     */\n    deleted_at?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof Image\n     */\n    error?: string;\n}\n/**\n * \n * @export\n * @interface ImageList\n */\nexport interface ImageList {\n    /**\n     * \n     * @type {Array<Image>}\n     * @memberof ImageList\n     */\n    images?: Array<Image>;\n}\n/**\n * \n * @export\n * @interface ImageParams\n */\nexport interface ImageParams {\n    /**\n     * \n     * @type {string}\n     * @memberof ImageParams\n     */\n    prompt?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof ImageParams\n     */\n    steps?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof ImageParams\n     */\n    negative_prompt?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof ImageParams\n     */\n    width?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof ImageParams\n     */\n    height?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof ImageParams\n     */\n    denoising_strength?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof ImageParams\n     */\n    cfg_scale?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof ImageParams\n     */\n    seed?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ImageParams\n     */\n    controlnet_type?: ImageParamsControlnetTypeEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof ImageParams\n     */\n    augmentation?: ImageParamsAugmentationEnum;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum ImageParamsControlnetTypeEnum {\n    Canny = 'canny',\n    Hed = 'hed',\n    Depth = 'depth',\n    Normal = 'normal',\n    Openpose = 'openpose',\n    Seg = 'seg',\n    Scribble = 'scribble',\n    Fakescribbles = 'fakescribbles',\n    Hough = 'hough'\n}\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum ImageParamsAugmentationEnum {\n    FaceRestore = 'face_restore',\n    RemoveBackground = 'remove_background',\n    Upscale = 'upscale'\n}\n\n/**\n * \n * @export\n * @interface ImageUrls\n */\nexport interface ImageUrls {\n    /**\n     * \n     * @type {string}\n     * @memberof ImageUrls\n     */\n    image_url?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ImageUrls\n     */\n    mask_url?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ImageUrls\n     */\n    thumbnail_url?: string;\n}\n/**\n * \n * @export\n * @interface InviteCode\n */\nexport interface InviteCode {\n    /**\n     * \n     * @type {string}\n     * @memberof InviteCode\n     */\n    id?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof InviteCode\n     */\n    created_at?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof InviteCode\n     */\n    created_by?: string;\n}\n/**\n * \n * @export\n * @interface IsAdminResponse\n */\nexport interface IsAdminResponse {\n    /**\n     * \n     * @type {boolean}\n     * @memberof IsAdminResponse\n     */\n    is_admin?: boolean;\n}\n/**\n * \n * @export\n * @interface LoginInput\n */\nexport interface LoginInput {\n    /**\n     * \n     * @type {string}\n     * @memberof LoginInput\n     */\n    email?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof LoginInput\n     */\n    invite_code?: string;\n}\n/**\n * \n * @export\n * @interface LoginResult\n */\nexport interface LoginResult {\n    /**\n     * \n     * @type {string}\n     * @memberof LoginResult\n     */\n    accessToken?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof LoginResult\n     */\n    refreshToken?: string;\n}\n/**\n * \n * @export\n * @interface MetricAttribute\n */\nexport interface MetricAttribute {\n    /**\n     * \n     * @type {string}\n     * @memberof MetricAttribute\n     */\n    name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof MetricAttribute\n     */\n    value?: string;\n}\n/**\n * \n * @export\n * @interface Order\n */\nexport interface Order {\n    /**\n     * \n     * @type {string}\n     * @memberof Order\n     */\n    id: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Order\n     */\n    created_by: string;\n    /**\n     * \n     * @type {number}\n     * @memberof Order\n     */\n    created_at: number;\n    /**\n     * \n     * @type {number}\n     * @memberof Order\n     */\n    ends_at: number;\n    /**\n     * \n     * @type {boolean}\n     * @memberof Order\n     */\n    is_active: boolean;\n    /**\n     * \n     * @type {number}\n     * @memberof Order\n     */\n    gpu_count: number;\n    /**\n     * \n     * @type {number}\n     * @memberof Order\n     */\n    amount_paid_cents: number;\n}\n/**\n * \n * @export\n * @interface RefreshLoginInput\n */\nexport interface RefreshLoginInput {\n    /**\n     * \n     * @type {string}\n     * @memberof RefreshLoginInput\n     */\n    refreshToken?: string;\n}\n/**\n * \n * @export\n * @enum {string}\n */\n\nexport enum StatusEnum {\n    Pending = 'pending',\n    Processing = 'processing',\n    Ranking = 'ranking',\n    Completed = 'completed',\n    Saved = 'saved',\n    Error = 'error'\n}\n\n/**\n * \n * @export\n * @interface TemporaryImage\n */\nexport interface TemporaryImage {\n    /**\n     * \n     * @type {string}\n     * @memberof TemporaryImage\n     */\n    id: string;\n    /**\n     * \n     * @type {string}\n     * @memberof TemporaryImage\n     */\n    upload_url: string;\n}\n/**\n * \n * @export\n * @interface UpdateBoostRequest\n */\nexport interface UpdateBoostRequest {\n    /**\n     * Boost level to set for current user\n     * @type {number}\n     * @memberof UpdateBoostRequest\n     */\n    level?: number;\n    /**\n     * Whether to activate or deactivate the boost\n     * @type {boolean}\n     * @memberof UpdateBoostRequest\n     */\n    is_active?: boolean;\n}\n/**\n * \n * @export\n * @interface UpdateBoostResponse\n */\nexport interface UpdateBoostResponse {\n    /**\n     * \n     * @type {number}\n     * @memberof UpdateBoostResponse\n     */\n    level?: number;\n    /**\n     * Balance in 1/2 gpu milliseconds (.1 cents)\n     * @type {number}\n     * @memberof UpdateBoostResponse\n     */\n    balance?: number;\n    /**\n     * Whether the boost is active\n     * @type {boolean}\n     * @memberof UpdateBoostResponse\n     */\n    is_active?: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof UpdateBoostResponse\n     */\n    error?: string;\n}\n/**\n * \n * @export\n * @interface UpdateGlobalSettingsRequest\n */\nexport interface UpdateGlobalSettingsRequest {\n    /**\n     * \n     * @type {object}\n     * @memberof UpdateGlobalSettingsRequest\n     */\n    settings_json: object;\n}\n/**\n * \n * @export\n * @interface UpdateImageInput\n */\nexport interface UpdateImageInput {\n    /**\n     * \n     * @type {string}\n     * @memberof UpdateImageInput\n     */\n    label?: string;\n    /**\n     * \n     * @type {StatusEnum}\n     * @memberof UpdateImageInput\n     */\n    status?: StatusEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof UpdateImageInput\n     */\n    encoded_image?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof UpdateImageInput\n     */\n    encoded_npy?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof UpdateImageInput\n     */\n    score?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof UpdateImageInput\n     */\n    negative_score?: number;\n    /**\n     * \n     * @type {boolean}\n     * @memberof UpdateImageInput\n     */\n    nsfw?: boolean;\n    /**\n     * \n     * @type {number}\n     * @memberof UpdateImageInput\n     */\n    deleted_at?: number | null;\n    /**\n     * \n     * @type {string}\n     * @memberof UpdateImageInput\n     */\n    error?: string;\n}\n/**\n * \n * @export\n * @interface UpdateLargeImageRequest\n */\nexport interface UpdateLargeImageRequest {\n    /**\n     * \n     * @type {string}\n     * @memberof UpdateLargeImageRequest\n     */\n    image_id: string;\n    /**\n     * \n     * @type {string}\n     * @memberof UpdateLargeImageRequest\n     */\n    tmp_image_id: string;\n    /**\n     * \n     * @type {number}\n     * @memberof UpdateLargeImageRequest\n     */\n    x: number;\n    /**\n     * \n     * @type {number}\n     * @memberof UpdateLargeImageRequest\n     */\n    y: number;\n}\n/**\n * \n * @export\n * @interface UpsertWorkerConfigInput\n */\nexport interface UpsertWorkerConfigInput {\n    /**\n     * \n     * @type {Array<WorkerGpuConfig>}\n     * @memberof UpsertWorkerConfigInput\n     */\n    gpu_configs?: Array<WorkerGpuConfig>;\n}\n/**\n * \n * @export\n * @interface UpsertWorkerInput\n */\nexport interface UpsertWorkerInput {\n    /**\n     * \n     * @type {string}\n     * @memberof UpsertWorkerInput\n     */\n    display_name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof UpsertWorkerInput\n     */\n    status?: UpsertWorkerInputStatusEnum;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum UpsertWorkerInputStatusEnum {\n    Idle = 'idle',\n    Active = 'active'\n}\n\n/**\n * \n * @export\n * @interface User\n */\nexport interface User {\n    /**\n     * \n     * @type {string}\n     * @memberof User\n     */\n    id?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof User\n     */\n    active?: boolean;\n}\n/**\n * \n * @export\n * @interface VerifyLoginInput\n */\nexport interface VerifyLoginInput {\n    /**\n     * \n     * @type {string}\n     * @memberof VerifyLoginInput\n     */\n    email?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof VerifyLoginInput\n     */\n    code?: string;\n}\n/**\n * \n * @export\n * @interface Worker\n */\nexport interface Worker {\n    /**\n     * \n     * @type {string}\n     * @memberof Worker\n     */\n    id: string;\n    /**\n     * \n     * @type {number}\n     * @memberof Worker\n     */\n    created_at: number;\n    /**\n     * \n     * @type {string}\n     * @memberof Worker\n     */\n    display_name: string;\n    /**\n     * \n     * @type {number}\n     * @memberof Worker\n     */\n    last_ping?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof Worker\n     */\n    status?: WorkerStatusEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof Worker\n     */\n    login_code?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Worker\n     */\n    engine?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof Worker\n     */\n    num_gpus?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof Worker\n     */\n    cloud_instance_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Worker\n     */\n    gpu_type?: string;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum WorkerStatusEnum {\n    Idle = 'idle',\n    Active = 'active'\n}\n\n/**\n * \n * @export\n * @interface WorkerConfig\n */\nexport interface WorkerConfig {\n    /**\n     * \n     * @type {string}\n     * @memberof WorkerConfig\n     */\n    worker_id: string;\n    /**\n     * \n     * @type {Array<WorkerGpuConfig>}\n     * @memberof WorkerConfig\n     */\n    gpu_configs?: Array<WorkerGpuConfig>;\n}\n/**\n * \n * @export\n * @interface WorkerGpuConfig\n */\nexport interface WorkerGpuConfig {\n    /**\n     * \n     * @type {number}\n     * @memberof WorkerGpuConfig\n     */\n    gpu_num: number;\n    /**\n     * \n     * @type {string}\n     * @memberof WorkerGpuConfig\n     */\n    model: string;\n}\n/**\n * \n * @export\n * @interface WorkerList\n */\nexport interface WorkerList {\n    /**\n     * \n     * @type {Array<Worker>}\n     * @memberof WorkerList\n     */\n    workers?: Array<Worker>;\n}\n/**\n * \n * @export\n * @interface WorkerLoginCode\n */\nexport interface WorkerLoginCode {\n    /**\n     * \n     * @type {string}\n     * @memberof WorkerLoginCode\n     */\n    login_code: string;\n}\n\n/**\n * AIBrushApi - axios parameter creator\n * @export\n */\nexport const AIBrushApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * Add Metrics\n         * @param {AddMetricsInput} [addMetricsInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        addMetrics: async (addMetricsInput?: AddMetricsInput, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/metrics`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(addMetricsInput, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get a list of saved images by id\n         * @param {BatchGetImagesInput} [batchGetImagesInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        batchGetImages: async (batchGetImagesInput?: BatchGetImagesInput, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/batch-get-images`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(batchGetImagesInput, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Create a new image\n         * @param {CreateImageInput} [createImageInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createImage: async (createImageInput?: CreateImageInput, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/images`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(createImageInput, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Create a new invite code\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createInviteCode: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/invite-codes`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Create a temporary image\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createTmpImage: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/tmp-images`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Delete a saved image\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteImage: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('deleteImage', 'id', id)\n            const localVarPath = `/api/images/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Deposit to a user\\'s boost\n         * @param {string} userId \n         * @param {DepositRequest} [depositRequest] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        depositBoost: async (userId: string, depositRequest?: DepositRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'userId' is not null or undefined\n            assertParamExists('depositBoost', 'userId', userId)\n            const localVarPath = `/api/boost/{user_id}/deposit`\n                .replace(`{${\"user_id\"}}`, encodeURIComponent(String(userId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(depositRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Log in with Discord\n         * @param {DiscordLogin} [discordLogin] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        discordLogin: async (discordLogin?: DiscordLogin, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/discord-login`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(discordLogin, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get the assets url\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getAssetsUrl: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/assets-url`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get the boost for the current user\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getBoost: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/boost`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get the boost for a user\n         * @param {string} userId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getBoostForUser: async (userId: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'userId' is not null or undefined\n            assertParamExists('getBoostForUser', 'userId', userId)\n            const localVarPath = `/api/boost/{user_id}`\n                .replace(`{${\"user_id\"}}`, encodeURIComponent(String(userId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get the features\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getFeatures: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/features`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get the global settings\n         * @param {string} key \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getGlobalSettings: async (key: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'key' is not null or undefined\n            assertParamExists('getGlobalSettings', 'key', key)\n            const localVarPath = `/api/global-settings/{key}`\n                .replace(`{${\"key\"}}`, encodeURIComponent(String(key)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get a saved image by id\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getImage: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('getImage', 'id', id)\n            const localVarPath = `/api/images/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get the binary image data\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getImageData: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('getImageData', 'id', id)\n            const localVarPath = `/api/images/{id}.image.png`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get download urls for image assets\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getImageDownloadUrls: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('getImageDownloadUrls', 'id', id)\n            const localVarPath = `/api/images/{id}/download-urls`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get upload urls for image assets\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getImageUploadUrls: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('getImageUploadUrls', 'id', id)\n            const localVarPath = `/api/images/{id}/upload-urls`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get the binary mask data\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getMaskData: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('getMaskData', 'id', id)\n            const localVarPath = `/api/images/{id}.mask.png`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get the binary thumbnail data\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getThumbnailData: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('getThumbnailData', 'id', id)\n            const localVarPath = `/api/images/{id}.thumbnail.png`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Healthcheck\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        healthcheck: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/healthcheck`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Check if the user is admin\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        isAdmin: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/is-admin`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get the boost for all users\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listBoosts: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/boosts`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get a list of saved images\n         * @param {number} [cursor] \n         * @param {string} [filter] \n         * @param {number} [limit] \n         * @param {'asc' | 'desc'} [direction] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listImages: async (cursor?: number, filter?: string, limit?: number, direction?: 'asc' | 'desc', options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/images`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (cursor !== undefined) {\n                localVarQueryParameter['cursor'] = cursor;\n            }\n\n            if (filter !== undefined) {\n                localVarQueryParameter['filter'] = filter;\n            }\n\n            if (limit !== undefined) {\n                localVarQueryParameter['limit'] = limit;\n            }\n\n            if (direction !== undefined) {\n                localVarQueryParameter['direction'] = direction;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Login by email\n         * @param {LoginInput} [loginInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        login: async (loginInput?: LoginInput, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/auth/login`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(loginInput, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Refresh Login code\n         * @param {RefreshLoginInput} [refreshLoginInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        refresh: async (refreshLoginInput?: RefreshLoginInput, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/auth/refresh`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(refreshLoginInput, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Update the boost level for the current user\n         * @param {UpdateBoostRequest} [updateBoostRequest] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateBoost: async (updateBoostRequest?: UpdateBoostRequest, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/boost`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(updateBoostRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Update the global settings\n         * @param {string} key \n         * @param {UpdateGlobalSettingsRequest} [updateGlobalSettingsRequest] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateGlobalSettings: async (key: string, updateGlobalSettingsRequest?: UpdateGlobalSettingsRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'key' is not null or undefined\n            assertParamExists('updateGlobalSettings', 'key', key)\n            const localVarPath = `/api/global-settings/{key}`\n                .replace(`{${\"key\"}}`, encodeURIComponent(String(key)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(updateGlobalSettingsRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Update a saved image\n         * @param {string} id \n         * @param {UpdateImageInput} [updateImageInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateImage: async (id: string, updateImageInput?: UpdateImageInput, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('updateImage', 'id', id)\n            const localVarPath = `/api/images/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(updateImageInput, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Update a large image\n         * @param {UpdateLargeImageRequest} [updateLargeImageRequest] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateLargeImage: async (updateLargeImageRequest?: UpdateLargeImageRequest, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/large-images`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(updateLargeImageRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Upload the binary image data\n         * @param {string} id \n         * @param {any} [body] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        uploadImageData: async (id: string, body?: any, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('uploadImageData', 'id', id)\n            const localVarPath = `/api/images/{id}.image.png`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'image/png';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Upload the binary thumbnail data\n         * @param {string} id \n         * @param {any} [body] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        uploadThumbnailData: async (id: string, body?: any, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('uploadThumbnailData', 'id', id)\n            const localVarPath = `/api/images/{id}.thumbnail.png`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'image/png';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Verify Login code\n         * @param {VerifyLoginInput} [verifyLoginInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        verify: async (verifyLoginInput?: VerifyLoginInput, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/auth/verify`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(verifyLoginInput, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * AIBrushApi - functional programming interface\n * @export\n */\nexport const AIBrushApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = AIBrushApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * Add Metrics\n         * @param {AddMetricsInput} [addMetricsInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async addMetrics(addMetricsInput?: AddMetricsInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.addMetrics(addMetricsInput, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get a list of saved images by id\n         * @param {BatchGetImagesInput} [batchGetImagesInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async batchGetImages(batchGetImagesInput?: BatchGetImagesInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImageList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.batchGetImages(batchGetImagesInput, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Create a new image\n         * @param {CreateImageInput} [createImageInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createImage(createImageInput?: CreateImageInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImageList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.createImage(createImageInput, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Create a new invite code\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createInviteCode(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InviteCode>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.createInviteCode(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Create a temporary image\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createTmpImage(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TemporaryImage>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.createTmpImage(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Delete a saved image\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async deleteImage(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteImage(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Deposit to a user\\'s boost\n         * @param {string} userId \n         * @param {DepositRequest} [depositRequest] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async depositBoost(userId: string, depositRequest?: DepositRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Boost>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.depositBoost(userId, depositRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Log in with Discord\n         * @param {DiscordLogin} [discordLogin] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async discordLogin(discordLogin?: DiscordLogin, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginResult>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.discordLogin(discordLogin, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get the assets url\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getAssetsUrl(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssetsUrl>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getAssetsUrl(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get the boost for the current user\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getBoost(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Boost>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getBoost(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get the boost for a user\n         * @param {string} userId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getBoostForUser(userId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Boost>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getBoostForUser(userId, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get the features\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getFeatures(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeatureList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getFeatures(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get the global settings\n         * @param {string} key \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getGlobalSettings(key: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GlobalSettings>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getGlobalSettings(key, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get a saved image by id\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getImage(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Image>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getImage(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get the binary image data\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getImageData(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getImageData(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get download urls for image assets\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getImageDownloadUrls(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImageUrls>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getImageDownloadUrls(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get upload urls for image assets\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getImageUploadUrls(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImageUrls>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getImageUploadUrls(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get the binary mask data\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getMaskData(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getMaskData(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get the binary thumbnail data\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getThumbnailData(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getThumbnailData(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Healthcheck\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async healthcheck(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Healthcheck>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.healthcheck(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Check if the user is admin\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async isAdmin(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IsAdminResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.isAdmin(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get the boost for all users\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listBoosts(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BoostList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.listBoosts(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get a list of saved images\n         * @param {number} [cursor] \n         * @param {string} [filter] \n         * @param {number} [limit] \n         * @param {'asc' | 'desc'} [direction] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listImages(cursor?: number, filter?: string, limit?: number, direction?: 'asc' | 'desc', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImageList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.listImages(cursor, filter, limit, direction, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Login by email\n         * @param {LoginInput} [loginInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async login(loginInput?: LoginInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.login(loginInput, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Refresh Login code\n         * @param {RefreshLoginInput} [refreshLoginInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async refresh(refreshLoginInput?: RefreshLoginInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginResult>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.refresh(refreshLoginInput, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Update the boost level for the current user\n         * @param {UpdateBoostRequest} [updateBoostRequest] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async updateBoost(updateBoostRequest?: UpdateBoostRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateBoostResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.updateBoost(updateBoostRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Update the global settings\n         * @param {string} key \n         * @param {UpdateGlobalSettingsRequest} [updateGlobalSettingsRequest] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async updateGlobalSettings(key: string, updateGlobalSettingsRequest?: UpdateGlobalSettingsRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GlobalSettings>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.updateGlobalSettings(key, updateGlobalSettingsRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Update a saved image\n         * @param {string} id \n         * @param {UpdateImageInput} [updateImageInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async updateImage(id: string, updateImageInput?: UpdateImageInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Image>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.updateImage(id, updateImageInput, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Update a large image\n         * @param {UpdateLargeImageRequest} [updateLargeImageRequest] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async updateLargeImage(updateLargeImageRequest?: UpdateLargeImageRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.updateLargeImage(updateLargeImageRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Upload the binary image data\n         * @param {string} id \n         * @param {any} [body] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async uploadImageData(id: string, body?: any, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadImageData(id, body, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Upload the binary thumbnail data\n         * @param {string} id \n         * @param {any} [body] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async uploadThumbnailData(id: string, body?: any, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadThumbnailData(id, body, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Verify Login code\n         * @param {VerifyLoginInput} [verifyLoginInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async verify(verifyLoginInput?: VerifyLoginInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginResult>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.verify(verifyLoginInput, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n    }\n};\n\n/**\n * AIBrushApi - factory interface\n * @export\n */\nexport const AIBrushApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = AIBrushApiFp(configuration)\n    return {\n        /**\n         * Add Metrics\n         * @param {AddMetricsInput} [addMetricsInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        addMetrics(addMetricsInput?: AddMetricsInput, options?: any): AxiosPromise<void> {\n            return localVarFp.addMetrics(addMetricsInput, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get a list of saved images by id\n         * @param {BatchGetImagesInput} [batchGetImagesInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        batchGetImages(batchGetImagesInput?: BatchGetImagesInput, options?: any): AxiosPromise<ImageList> {\n            return localVarFp.batchGetImages(batchGetImagesInput, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Create a new image\n         * @param {CreateImageInput} [createImageInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createImage(createImageInput?: CreateImageInput, options?: any): AxiosPromise<ImageList> {\n            return localVarFp.createImage(createImageInput, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Create a new invite code\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createInviteCode(options?: any): AxiosPromise<InviteCode> {\n            return localVarFp.createInviteCode(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Create a temporary image\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createTmpImage(options?: any): AxiosPromise<TemporaryImage> {\n            return localVarFp.createTmpImage(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Delete a saved image\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteImage(id: string, options?: any): AxiosPromise<void> {\n            return localVarFp.deleteImage(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Deposit to a user\\'s boost\n         * @param {string} userId \n         * @param {DepositRequest} [depositRequest] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        depositBoost(userId: string, depositRequest?: DepositRequest, options?: any): AxiosPromise<Boost> {\n            return localVarFp.depositBoost(userId, depositRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Log in with Discord\n         * @param {DiscordLogin} [discordLogin] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        discordLogin(discordLogin?: DiscordLogin, options?: any): AxiosPromise<LoginResult> {\n            return localVarFp.discordLogin(discordLogin, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get the assets url\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getAssetsUrl(options?: any): AxiosPromise<AssetsUrl> {\n            return localVarFp.getAssetsUrl(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get the boost for the current user\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getBoost(options?: any): AxiosPromise<Boost> {\n            return localVarFp.getBoost(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get the boost for a user\n         * @param {string} userId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getBoostForUser(userId: string, options?: any): AxiosPromise<Boost> {\n            return localVarFp.getBoostForUser(userId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get the features\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getFeatures(options?: any): AxiosPromise<FeatureList> {\n            return localVarFp.getFeatures(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get the global settings\n         * @param {string} key \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getGlobalSettings(key: string, options?: any): AxiosPromise<GlobalSettings> {\n            return localVarFp.getGlobalSettings(key, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get a saved image by id\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getImage(id: string, options?: any): AxiosPromise<Image> {\n            return localVarFp.getImage(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get the binary image data\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getImageData(id: string, options?: any): AxiosPromise<any> {\n            return localVarFp.getImageData(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get download urls for image assets\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getImageDownloadUrls(id: string, options?: any): AxiosPromise<ImageUrls> {\n            return localVarFp.getImageDownloadUrls(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get upload urls for image assets\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getImageUploadUrls(id: string, options?: any): AxiosPromise<ImageUrls> {\n            return localVarFp.getImageUploadUrls(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get the binary mask data\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getMaskData(id: string, options?: any): AxiosPromise<any> {\n            return localVarFp.getMaskData(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get the binary thumbnail data\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getThumbnailData(id: string, options?: any): AxiosPromise<any> {\n            return localVarFp.getThumbnailData(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Healthcheck\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        healthcheck(options?: any): AxiosPromise<Healthcheck> {\n            return localVarFp.healthcheck(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Check if the user is admin\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        isAdmin(options?: any): AxiosPromise<IsAdminResponse> {\n            return localVarFp.isAdmin(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get the boost for all users\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listBoosts(options?: any): AxiosPromise<BoostList> {\n            return localVarFp.listBoosts(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get a list of saved images\n         * @param {number} [cursor] \n         * @param {string} [filter] \n         * @param {number} [limit] \n         * @param {'asc' | 'desc'} [direction] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listImages(cursor?: number, filter?: string, limit?: number, direction?: 'asc' | 'desc', options?: any): AxiosPromise<ImageList> {\n            return localVarFp.listImages(cursor, filter, limit, direction, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Login by email\n         * @param {LoginInput} [loginInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        login(loginInput?: LoginInput, options?: any): AxiosPromise<void> {\n            return localVarFp.login(loginInput, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Refresh Login code\n         * @param {RefreshLoginInput} [refreshLoginInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        refresh(refreshLoginInput?: RefreshLoginInput, options?: any): AxiosPromise<LoginResult> {\n            return localVarFp.refresh(refreshLoginInput, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Update the boost level for the current user\n         * @param {UpdateBoostRequest} [updateBoostRequest] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateBoost(updateBoostRequest?: UpdateBoostRequest, options?: any): AxiosPromise<UpdateBoostResponse> {\n            return localVarFp.updateBoost(updateBoostRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Update the global settings\n         * @param {string} key \n         * @param {UpdateGlobalSettingsRequest} [updateGlobalSettingsRequest] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateGlobalSettings(key: string, updateGlobalSettingsRequest?: UpdateGlobalSettingsRequest, options?: any): AxiosPromise<GlobalSettings> {\n            return localVarFp.updateGlobalSettings(key, updateGlobalSettingsRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Update a saved image\n         * @param {string} id \n         * @param {UpdateImageInput} [updateImageInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateImage(id: string, updateImageInput?: UpdateImageInput, options?: any): AxiosPromise<Image> {\n            return localVarFp.updateImage(id, updateImageInput, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Update a large image\n         * @param {UpdateLargeImageRequest} [updateLargeImageRequest] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateLargeImage(updateLargeImageRequest?: UpdateLargeImageRequest, options?: any): AxiosPromise<void> {\n            return localVarFp.updateLargeImage(updateLargeImageRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Upload the binary image data\n         * @param {string} id \n         * @param {any} [body] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        uploadImageData(id: string, body?: any, options?: any): AxiosPromise<void> {\n            return localVarFp.uploadImageData(id, body, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Upload the binary thumbnail data\n         * @param {string} id \n         * @param {any} [body] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        uploadThumbnailData(id: string, body?: any, options?: any): AxiosPromise<void> {\n            return localVarFp.uploadThumbnailData(id, body, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Verify Login code\n         * @param {VerifyLoginInput} [verifyLoginInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        verify(verifyLoginInput?: VerifyLoginInput, options?: any): AxiosPromise<LoginResult> {\n            return localVarFp.verify(verifyLoginInput, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * AIBrushApi - object-oriented interface\n * @export\n * @class AIBrushApi\n * @extends {BaseAPI}\n */\nexport class AIBrushApi extends BaseAPI {\n    /**\n     * Add Metrics\n     * @param {AddMetricsInput} [addMetricsInput] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public addMetrics(addMetricsInput?: AddMetricsInput, options?: any) {\n        return AIBrushApiFp(this.configuration).addMetrics(addMetricsInput, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get a list of saved images by id\n     * @param {BatchGetImagesInput} [batchGetImagesInput] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public batchGetImages(batchGetImagesInput?: BatchGetImagesInput, options?: any) {\n        return AIBrushApiFp(this.configuration).batchGetImages(batchGetImagesInput, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Create a new image\n     * @param {CreateImageInput} [createImageInput] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public createImage(createImageInput?: CreateImageInput, options?: any) {\n        return AIBrushApiFp(this.configuration).createImage(createImageInput, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Create a new invite code\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public createInviteCode(options?: any) {\n        return AIBrushApiFp(this.configuration).createInviteCode(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Create a temporary image\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public createTmpImage(options?: any) {\n        return AIBrushApiFp(this.configuration).createTmpImage(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Delete a saved image\n     * @param {string} id \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public deleteImage(id: string, options?: any) {\n        return AIBrushApiFp(this.configuration).deleteImage(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Deposit to a user\\'s boost\n     * @param {string} userId \n     * @param {DepositRequest} [depositRequest] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public depositBoost(userId: string, depositRequest?: DepositRequest, options?: any) {\n        return AIBrushApiFp(this.configuration).depositBoost(userId, depositRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Log in with Discord\n     * @param {DiscordLogin} [discordLogin] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public discordLogin(discordLogin?: DiscordLogin, options?: any) {\n        return AIBrushApiFp(this.configuration).discordLogin(discordLogin, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get the assets url\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public getAssetsUrl(options?: any) {\n        return AIBrushApiFp(this.configuration).getAssetsUrl(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get the boost for the current user\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public getBoost(options?: any) {\n        return AIBrushApiFp(this.configuration).getBoost(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get the boost for a user\n     * @param {string} userId \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public getBoostForUser(userId: string, options?: any) {\n        return AIBrushApiFp(this.configuration).getBoostForUser(userId, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get the features\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public getFeatures(options?: any) {\n        return AIBrushApiFp(this.configuration).getFeatures(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get the global settings\n     * @param {string} key \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public getGlobalSettings(key: string, options?: any) {\n        return AIBrushApiFp(this.configuration).getGlobalSettings(key, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get a saved image by id\n     * @param {string} id \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public getImage(id: string, options?: any) {\n        return AIBrushApiFp(this.configuration).getImage(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get the binary image data\n     * @param {string} id \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public getImageData(id: string, options?: any) {\n        return AIBrushApiFp(this.configuration).getImageData(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get download urls for image assets\n     * @param {string} id \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public getImageDownloadUrls(id: string, options?: any) {\n        return AIBrushApiFp(this.configuration).getImageDownloadUrls(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get upload urls for image assets\n     * @param {string} id \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public getImageUploadUrls(id: string, options?: any) {\n        return AIBrushApiFp(this.configuration).getImageUploadUrls(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get the binary mask data\n     * @param {string} id \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public getMaskData(id: string, options?: any) {\n        return AIBrushApiFp(this.configuration).getMaskData(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get the binary thumbnail data\n     * @param {string} id \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public getThumbnailData(id: string, options?: any) {\n        return AIBrushApiFp(this.configuration).getThumbnailData(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Healthcheck\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public healthcheck(options?: any) {\n        return AIBrushApiFp(this.configuration).healthcheck(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Check if the user is admin\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public isAdmin(options?: any) {\n        return AIBrushApiFp(this.configuration).isAdmin(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get the boost for all users\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public listBoosts(options?: any) {\n        return AIBrushApiFp(this.configuration).listBoosts(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get a list of saved images\n     * @param {number} [cursor] \n     * @param {string} [filter] \n     * @param {number} [limit] \n     * @param {'asc' | 'desc'} [direction] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public listImages(cursor?: number, filter?: string, limit?: number, direction?: 'asc' | 'desc', options?: any) {\n        return AIBrushApiFp(this.configuration).listImages(cursor, filter, limit, direction, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Login by email\n     * @param {LoginInput} [loginInput] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public login(loginInput?: LoginInput, options?: any) {\n        return AIBrushApiFp(this.configuration).login(loginInput, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Refresh Login code\n     * @param {RefreshLoginInput} [refreshLoginInput] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public refresh(refreshLoginInput?: RefreshLoginInput, options?: any) {\n        return AIBrushApiFp(this.configuration).refresh(refreshLoginInput, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Update the boost level for the current user\n     * @param {UpdateBoostRequest} [updateBoostRequest] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public updateBoost(updateBoostRequest?: UpdateBoostRequest, options?: any) {\n        return AIBrushApiFp(this.configuration).updateBoost(updateBoostRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Update the global settings\n     * @param {string} key \n     * @param {UpdateGlobalSettingsRequest} [updateGlobalSettingsRequest] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public updateGlobalSettings(key: string, updateGlobalSettingsRequest?: UpdateGlobalSettingsRequest, options?: any) {\n        return AIBrushApiFp(this.configuration).updateGlobalSettings(key, updateGlobalSettingsRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Update a saved image\n     * @param {string} id \n     * @param {UpdateImageInput} [updateImageInput] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public updateImage(id: string, updateImageInput?: UpdateImageInput, options?: any) {\n        return AIBrushApiFp(this.configuration).updateImage(id, updateImageInput, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Update a large image\n     * @param {UpdateLargeImageRequest} [updateLargeImageRequest] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public updateLargeImage(updateLargeImageRequest?: UpdateLargeImageRequest, options?: any) {\n        return AIBrushApiFp(this.configuration).updateLargeImage(updateLargeImageRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Upload the binary image data\n     * @param {string} id \n     * @param {any} [body] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public uploadImageData(id: string, body?: any, options?: any) {\n        return AIBrushApiFp(this.configuration).uploadImageData(id, body, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Upload the binary thumbnail data\n     * @param {string} id \n     * @param {any} [body] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public uploadThumbnailData(id: string, body?: any, options?: any) {\n        return AIBrushApiFp(this.configuration).uploadThumbnailData(id, body, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Verify Login code\n     * @param {VerifyLoginInput} [verifyLoginInput] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public verify(verifyLoginInput?: VerifyLoginInput, options?: any) {\n        return AIBrushApiFp(this.configuration).verify(verifyLoginInput, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n\n\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * AIBrush API\n * Orchestration backend for AI Brush\n *\n * The version of the OpenAPI document: 1.0.0\n * Contact: admin@aibrush.art\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport { Configuration } from \"./configuration\";\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport globalAxios, { AxiosPromise, AxiosInstance } from 'axios';\n\nexport const BASE_PATH = \"https://www.aibrush.art\".replace(/\\/+$/, \"\");\n\n/**\n *\n * @export\n */\nexport const COLLECTION_FORMATS = {\n    csv: \",\",\n    ssv: \" \",\n    tsv: \"\\t\",\n    pipes: \"|\",\n};\n\n/**\n *\n * @export\n * @interface RequestArgs\n */\nexport interface RequestArgs {\n    url: string;\n    options: any;\n}\n\n/**\n *\n * @export\n * @class BaseAPI\n */\nexport class BaseAPI {\n    protected configuration: Configuration | undefined;\n\n    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected axios: AxiosInstance = globalAxios) {\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = configuration.basePath || this.basePath;\n        }\n    }\n};\n\n/**\n *\n * @export\n * @class RequiredError\n * @extends {Error}\n */\nexport class RequiredError extends Error {\n    name: \"RequiredError\" = \"RequiredError\";\n    constructor(public field: string, msg?: string) {\n        super(msg);\n    }\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * AIBrush API\n * Orchestration backend for AI Brush\n *\n * The version of the OpenAPI document: 1.0.0\n * Contact: admin@aibrush.art\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport { Configuration } from \"./configuration\";\nimport { RequiredError,　RequestArgs } from \"./base\";\nimport { AxiosInstance } from 'axios';\n\n/**\n *\n * @export\n */\nexport const DUMMY_BASE_URL = 'https://example.com'\n\n/**\n *\n * @throws {RequiredError}\n * @export\n */\nexport const assertParamExists = function (functionName: string, paramName: string, paramValue: unknown) {\n    if (paramValue === null || paramValue === undefined) {\n        throw new RequiredError(paramName, `Required parameter ${paramName} was null or undefined when calling ${functionName}.`);\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setApiKeyToObject = async function (object: any, keyParamName: string, configuration?: Configuration) {\n    if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n            ? await configuration.apiKey(keyParamName)\n            : await configuration.apiKey;\n        object[keyParamName] = localVarApiKeyValue;\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setBasicAuthToObject = function (object: any, configuration?: Configuration) {\n    if (configuration && (configuration.username || configuration.password)) {\n        object[\"auth\"] = { username: configuration.username, password: configuration.password };\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setBearerAuthToObject = async function (object: any, configuration?: Configuration) {\n    if (configuration && configuration.accessToken) {\n        const accessToken = typeof configuration.accessToken === 'function'\n            ? await configuration.accessToken()\n            : await configuration.accessToken;\n        object[\"Authorization\"] = \"Bearer \" + accessToken;\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setOAuthToObject = async function (object: any, name: string, scopes: string[], configuration?: Configuration) {\n    if (configuration && configuration.accessToken) {\n        const localVarAccessTokenValue = typeof configuration.accessToken === 'function'\n            ? await configuration.accessToken(name, scopes)\n            : await configuration.accessToken;\n        object[\"Authorization\"] = \"Bearer \" + localVarAccessTokenValue;\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setSearchParams = function (url: URL, ...objects: any[]) {\n    const searchParams = new URLSearchParams(url.search);\n    for (const object of objects) {\n        for (const key in object) {\n            if (Array.isArray(object[key])) {\n                searchParams.delete(key);\n                for (const item of object[key]) {\n                    searchParams.append(key, item);\n                }\n            } else {\n                searchParams.set(key, object[key]);\n            }\n        }\n    }\n    url.search = searchParams.toString();\n}\n\n/**\n *\n * @export\n */\nexport const serializeDataIfNeeded = function (value: any, requestOptions: any, configuration?: Configuration) {\n    const nonString = typeof value !== 'string';\n    const needsSerialization = nonString && configuration && configuration.isJsonMime\n        ? configuration.isJsonMime(requestOptions.headers['Content-Type'])\n        : nonString;\n    return needsSerialization\n        ? JSON.stringify(value !== undefined ? value : {})\n        : (value || \"\");\n}\n\n/**\n *\n * @export\n */\nexport const toPathString = function (url: URL) {\n    return url.pathname + url.search + url.hash\n}\n\n/**\n *\n * @export\n */\nexport const createRequestFunction = function (axiosArgs: RequestArgs, globalAxios: AxiosInstance, BASE_PATH: string, configuration?: Configuration) {\n    return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n        const axiosRequestArgs = {...axiosArgs.options, url: (configuration?.basePath || basePath) + axiosArgs.url};\n        return axios.request(axiosRequestArgs);\n    };\n}\n","export interface AspectRatio {\n    displayName: string;\n    width: number;\n    height: number;\n    id: number;\n}\n\nexport const DEFAULT_ASPECT_RATIO = 5;\n\nexport const aspectRatios: AspectRatio[] = [\n    {\n        displayName: \"4:1\",\n        width: 1024,\n        height: 256,\n        id: 0,\n    },\n    {\n        displayName: \"3:1\",\n        width: 768,\n        height: 256,\n        id: 1,\n    },\n    {\n        displayName: \"2:1\",\n        width: 640,\n        height: 320,\n        id: 2,\n    },\n    {\n        displayName: \"3:2\",\n        width: 576,\n        height: 384,\n        id: 3,\n    },\n    {\n        displayName: \"5:4\",\n        width: 640,\n        height: 512,\n        id: 4,\n    },\n    {\n        displayName: \"1:1\",\n        width: 512,\n        height: 512,\n        id: 5,\n    },\n    {\n        displayName: \"4:5\",\n        width: 512,\n        height: 640,\n        id: 6,\n    },\n    {\n        displayName: \"2:3\",\n        width: 384,\n        height: 576,\n        id: 7,\n    },\n    {\n        displayName: \"1:2\",\n        width: 320,\n        height: 640,\n        id: 8,\n    },\n    {\n        displayName: \"1:3\",\n        width: 256,\n        height: 768,\n        id: 9,\n    },\n    {\n        displayName: \"1:4\",\n        width: 256,\n        height: 1024,\n        id: 10,\n    }\n];\n\nexport function getClosestAspectRatio(width: number, height: number): AspectRatio {\n    const aspectRatio = width / height;\n\n    const tests = [...aspectRatios];\n    tests.sort((a, b) => {\n        const aRatio = a.width / a.height;\n        const bRatio = b.width / b.height;\n        return (\n            Math.abs(aRatio - aspectRatio) -\n            Math.abs(bRatio - aspectRatio)\n        );\n    });\n    const bestMatch = tests[0];\n    return bestMatch;\n}\n\nexport function compareSize(a: AspectRatio, width: number, height: number): number {\n    const area1 = a.width * a.height;\n    const area2 = width * height;\n    return area1 - area2;\n}\n\nexport function upscale(aspectRatio: AspectRatio): AspectRatio {\n    return {\n        displayName: aspectRatio.displayName,\n        width: aspectRatio.width * 2,\n        height: aspectRatio.height * 2,\n        id: aspectRatio.id,\n    }\n}\n\nexport function downscale(aspectRatio: AspectRatio): AspectRatio {\n    return {\n        displayName: aspectRatio.displayName,\n        width: aspectRatio.width / 2,\n        height: aspectRatio.height / 2,\n        id: aspectRatio.id,\n    }\n}\n","import React, { useState, useEffect, useRef } from \"react\";\nimport { useParams, useHistory } from \"react-router-dom\";\nimport axios, { AxiosInstance } from \"axios\";\nimport * as uuid from \"uuid\";\n\nimport { AIBrushApi } from \"../../client\";\nimport { getUpscaleLevel } from \"../../lib/upscale\";\nimport \"./ImageEditor.css\";\nimport { createRenderer, Renderer } from \"./renderer\";\nimport { Tool, BaseTool } from \"./tool\";\nimport { SelectionTool, Controls as SelectionControls } from \"./selection-tool\";\nimport { EnhanceTool, EnhanceControls } from \"./enhance-tool\";\nimport { PencilTool, Controls as PencilControls } from \"./pencil-tool\";\nimport { SmudgeTool, SmudgeControls } from \"./smudge-tool\";\nimport { ImportExportControls } from \"./import-export\";\nimport { InpaintControls, InpaintTool } from \"./inpaint-tool\";\nimport { AugmentControls } from \"./augment-tool\";\nimport { defaultArgs } from \"../../components/ImagePrompt\";\nimport { ApiSocket } from \"../../lib/apisocket\";\nimport {\n    createEncodedThumbnail,\n    encodedImageToBlob,\n    uploadBlob,\n} from \"../../lib/imageutil\";\nimport { BusyModal } from \"../../components/BusyModal\";\nimport { LocalImage, LocalImagesStore } from \"../../lib/localImagesStore\";\nimport { render } from \"@testing-library/react\";\n\ninterface CanPreventDefault {\n    preventDefault: () => void;\n}\n\ninterface Props {\n    api: AIBrushApi;\n    apisocket: ApiSocket;\n    assetsUrl: string;\n    localImages: LocalImagesStore;\n}\n\ninterface ToolConfig {\n    name: string;\n    iconClass: string;\n    constructor: (r: Renderer) => Tool;\n    renderControls: (t: Tool, renderer: Renderer) => JSX.Element;\n    defaultArgs: any;\n}\n\nexport const anonymousClient = axios.create();\ndelete anonymousClient.defaults.headers.common[\"Authorization\"];\n\nexport const ImageEditor: React.FC<Props> = ({\n    api,\n    apisocket,\n    localImages,\n}) => {\n    const [showSelectionControls, setShowSelectionControls] = useState(false);\n    const tools: Array<ToolConfig> = [\n        {\n            name: \"inpaint\",\n            iconClass: \"fas fa-paint-brush\",\n            constructor: (r: Renderer) => new InpaintTool(r),\n            defaultArgs: {},\n            renderControls: (t: Tool, renderer: Renderer) => {\n                t.onShowSelectionControls(setShowSelectionControls);\n                return (\n                    <InpaintControls\n                        tool={t as InpaintTool}\n                        renderer={renderer}\n                        api={api}\n                        apisocket={apisocket}\n                        image={image!}\n                    />\n                );\n            },\n        },\n        {\n            name: \"enhance\",\n            iconClass: \"fas fa-magic\",\n            constructor: (r: Renderer) => new EnhanceTool(r),\n            defaultArgs: {\n                variationStrength: 0.75,\n            },\n            renderControls: (t: Tool, renderer: Renderer) => {\n                t.onShowSelectionControls(setShowSelectionControls);\n                return (\n                    <EnhanceControls\n                        tool={t as EnhanceTool}\n                        renderer={renderer}\n                        api={api}\n                        apisocket={apisocket}\n                        image={image!}\n                    />\n                );\n            },\n        },\n        {\n            name: \"pencil\",\n            iconClass: \"fas fa-pencil-alt\",\n            constructor: (r: Renderer) => new PencilTool(r),\n            defaultArgs: {},\n            renderControls: (t: Tool, renderer: Renderer) => {\n                return (\n                    <PencilControls\n                        tool={t as PencilTool}\n                        renderer={renderer}\n                    />\n                );\n            },\n        },\n        {\n            name: \"smudge\",\n            // finger icon\n            iconClass: \"fas fa-hand-pointer\",\n            constructor: (r: Renderer) => new SmudgeTool(r),\n            defaultArgs: {},\n            renderControls: (t: Tool, renderer: Renderer) => {\n                return (\n                    <SmudgeControls\n                        tool={t as SmudgeTool}\n                        renderer={renderer}\n                    />\n                );\n            },\n        },\n        {\n            name: \"import-export\",\n            iconClass: \"fas fa-file-import\",\n            constructor: (r: Renderer) => new BaseTool(r, \"import-export\"),\n            defaultArgs: {},\n            renderControls: (t: Tool, renderer: Renderer) => {\n                return (\n                    <ImportExportControls\n                        renderer={renderer}\n                        tool={t as BaseTool}\n                        api={api}\n                    />\n                );\n            },\n        },\n        {\n            name: \"augment\",\n            iconClass: \"fas fa-image\",\n            constructor: (r: Renderer) => new BaseTool(r, \"augment\"),\n            defaultArgs: {},\n            renderControls: (t: Tool, renderer: Renderer) => {\n                return (\n                    <AugmentControls\n                        renderer={renderer}\n                        tool={t as BaseTool}\n                        api={api}\n                        image={image!}\n                    />\n                );\n            },\n        },\n    ];\n\n    const [image, setImage] = useState<LocalImage | null>(null);\n    const [renderer, setRenderer] = useState<Renderer | null>(null);\n    const [tool, setTool] = useState<Tool | null>(null);\n    const [canUndo, setCanUndo] = useState(false);\n    const [canRedo, setCanRedo] = useState(false);\n    const [busyMessage, setBusyMessage] = useState<string | null>(null);\n\n    const { id } = useParams<{ id: string }>();\n    const history = useHistory();\n\n    const canvasRef = useRef<HTMLCanvasElement>(null);\n\n    const onSelectTool = (toolconfig: ToolConfig) => {\n        if (renderer) {\n            if (tool) {\n                if (!tool.destroy()) {\n                    return;\n                }\n            }\n            const newTool = toolconfig.constructor(renderer);\n            setTool(newTool);\n            newTool.onSaveImage((encodedImage, args = {}) => {\n                console.log(\"Saving image...\");\n                saveNewImage(encodedImage, args);\n            });\n        }\n    };\n\n    /**\n     * Saves a new image to the server\n     *\n     * @param encodedImage base64 encoded image\n     * @param newArgs may contain new phrases and negative phrases\n     */\n    const saveNewImage = async (encodedImage: string, newArgs: any) => {\n        if (!image || !encodedImage) {\n            throw new Error(\"Cannot save new image without existing image\");\n        }\n        if (!renderer) {\n            throw new Error(\"Cannot save new image without renderer\");\n        }\n        setBusyMessage(\"Saving image...\");\n        try {\n            const newImage: LocalImage = {\n                ...image,\n                params: {\n                    ...image.params,\n                    width: renderer!.getWidth() as any,\n                    height: renderer!.getHeight() as any,\n                },\n                id: uuid.v4(),\n                imageData: `data:image/png;base64,${encodedImage}`,\n            };\n            await localImages.saveImage(newImage);\n\n            // switch url and state to new image\n            setImage(newImage);\n            history.replace(`/image-editor/${newImage.id}`);\n        } finally {\n            setBusyMessage(null);\n        }\n    };\n\n    useEffect(() => {\n        if (image) {\n            return;\n        }\n\n        async function loadImage() {\n            const localImage = await localImages.getImage(id);\n            let imageSrc = \"\";\n            if (localImage) {\n                setImage(localImage);\n                imageSrc = localImage.imageData!;\n            } else {\n                const image = (await api.getImage(id)).data;\n                setImage(image);\n                const download_urls = await api.getImageDownloadUrls(id);\n                // Loading up data as binary, base64 encoding into image url\n                // bypasses browser security nonsense about cross-domain images\n                const resp = await anonymousClient.get(\n                    download_urls.data.image_url!,\n                    {\n                        responseType: \"arraybuffer\",\n                    }\n                );\n                const binaryImageData = Buffer.from(resp.data, \"binary\");\n                const base64ImageData = binaryImageData.toString(\"base64\");\n                imageSrc = `data:image/png;base64,${base64ImageData}`;\n            }\n\n            const imageElement = new Image();\n            imageElement.src = imageSrc;\n            imageElement.onload = () => {\n                if (!canvasRef.current) {\n                    console.error(\"Failed to get canvas\");\n                    return;\n                }\n                const renderer = createRenderer(canvasRef.current);\n                renderer.setBaseImage(imageElement);\n                setRenderer(renderer);\n            };\n        }\n        loadImage();\n    }, [image, id]);\n\n    // this covers the case that an image is upscaled to max, the upscale tool needs to\n    // be hidden and deselected.\n    useEffect(() => {\n        if (\n            image &&\n            tool &&\n            tool.name == \"upscale\" &&\n            image.params.width! * image.params.height! >= 2048 * 2048\n        ) {\n            onSelectTool(tools[0]);\n        }\n    }, [image, tool]);\n\n    useEffect(() => {\n        if (renderer) {\n            onSelectTool(tools[0]);\n            renderer.onSnapshot(() => {\n                setCanUndo(renderer.canUndo());\n                setCanRedo(renderer.canRedo());\n            });\n        }\n    }, [renderer]);\n\n    useEffect(() => {\n        if (canvasRef.current) {\n            const listener = (e: WheelEvent) => {\n                if (tool) {\n                    e.preventDefault();\n                    tool.onWheel(e);\n                }\n            };\n            canvasRef.current.addEventListener(\"wheel\", listener);\n            return () => {\n                canvasRef.current?.removeEventListener(\"wheel\", listener);\n            };\n        }\n    }, [tool, canvasRef.current]);\n\n    function renderTool(t: ToolConfig) {\n        if (!image) {\n            return null;\n        }\n        if (\n            t.name == \"upscale\" &&\n            image.params.width! * image.params.height! >= 2048 * 2048\n        ) {\n            return null;\n        }\n        let buttonClass = `btn btn-secondary light-button image-editor-tool-button`;\n        const isSelected = tool && tool.name == t.name;\n        if (isSelected) {\n            buttonClass = `btn btn-primary image-editor-tool-button`;\n        }\n        return (\n            <div className=\"form-group\" key={t.name}>\n                <button className={buttonClass} onClick={() => onSelectTool(t)}>\n                    <i className={t.iconClass}></i>\n                </button>\n                {/* capitalize tool name */}\n                <label>\n                    {t.name.charAt(0).toUpperCase() + t.name.slice(1)}\n                </label>\n                {isSelected && t.renderControls(tool!, renderer!)}\n            </div>\n        );\n    }\n\n    function preventDefault(e: CanPreventDefault): boolean {\n        e.preventDefault();\n        return true;\n    }\n\n    return (\n        <>\n            <div className=\"row\">\n                <div className=\"col-12\">\n                    <h1 style={{ fontSize: \"40px\", textAlign: \"left\" }}>\n                        <i\n                            style={{ cursor: \"pointer\" }}\n                            onClick={() => history.push(`/images/${id}`)}\n                            className=\"fas fa-chevron-left\"\n                        ></i>\n                        &nbsp; AI Edit\n                    </h1>\n                </div>\n            </div>\n            <div\n                className=\"row\"\n                style={{ marginTop: \"32px\", paddingBottom: \"120px\" }}\n            >\n                <div className=\"col-lg-3\">\n                    {renderer && (\n                        <>\n                            {tools.map((tool) => renderTool(tool))}\n                            {(canRedo || canUndo) && (\n                                <div className=\"form-group\">\n                                    <div className=\"btn-group\">\n                                        <button\n                                            className=\"btn btn-primary image-popup-button\"\n                                            disabled={!renderer || !canUndo}\n                                            onClick={() =>\n                                                renderer && renderer.undo()\n                                            }\n                                        >\n                                            {/* undo */}\n                                            <i className=\"fas fa-undo\"></i>\n                                        </button>\n                                        <button\n                                            className=\"btn btn-primary image-popup-button\"\n                                            disabled={!renderer || !canRedo}\n                                            onClick={() =>\n                                                renderer && renderer.redo()\n                                            }\n                                        >\n                                            <i className=\"fas fa-redo\"></i>\n                                        </button>\n                                    </div>\n                                </div>\n                            )}\n                        </>\n                    )}\n                </div>\n                <div className=\"col-lg-9\">\n                    <div style={{ verticalAlign: \"middle\" }}>\n                        <div>\n                            <canvas\n                                style={{\n                                    cursor: \"none\",\n                                    touchAction: \"none\",\n                                    userSelect: \"none\",\n                                }}\n                                ref={canvasRef}\n                                className=\"image-editor-canvas\"\n                                onMouseDown={(e) =>\n                                    preventDefault(e) &&\n                                    tool &&\n                                    tool.onMouseDown(e)\n                                }\n                                onMouseMove={(e) =>\n                                    preventDefault(e) &&\n                                    tool &&\n                                    tool.onMouseMove(e)\n                                }\n                                onMouseUp={(e) =>\n                                    preventDefault(e) &&\n                                    tool &&\n                                    tool.onMouseUp(e)\n                                }\n                                onMouseLeave={(e) =>\n                                    preventDefault(e) &&\n                                    tool &&\n                                    tool.onMouseLeave(e)\n                                }\n                                onTouchStart={(e) =>\n                                    preventDefault(e) &&\n                                    tool &&\n                                    tool.onTouchStart(e)\n                                }\n                                onTouchMove={(e) =>\n                                    preventDefault(e) &&\n                                    tool &&\n                                    tool.onTouchMove(e)\n                                }\n                                onTouchEnd={(e) =>\n                                    preventDefault(e) &&\n                                    tool &&\n                                    tool.onTouchEnd(e)\n                                }\n                            ></canvas>\n                            {showSelectionControls && (\n                                <>\n                                    <button\n                                        className=\"btn btn-secondary canvas-select-left\"\n                                        onClick={() => tool!.select(\"left\")}\n                                    >\n                                        <i className=\"fas fa-chevron-left\"></i>\n                                    </button>\n                                    <button\n                                        className=\"btn btn-secondary canvas-select-right\"\n                                        onClick={() => tool!.select(\"right\")}\n                                    >\n                                        <i className=\"fas fa-chevron-right\"></i>\n                                    </button>\n                                </>\n                            )}\n                        </div>\n                    </div>\n                    <div className=\"row\">\n                        <button\n                            className=\"btn btn-primary\"\n                            // center horizontally\n                            style={{\n                                position: \"absolute\",\n                                left: \"50%\",\n                                transform: \"translate(-50%, 0)\",\n                            }}\n                            onClick={() => {\n                                if (renderer) {\n                                    renderer.resetView();\n                                }\n                            }}\n                        >\n                            {/* reset zoom */}\n                            <i className=\"fas fa-search-plus\"></i>&nbsp; Reset\n                            View\n                        </button>\n                        {/* redo */}\n                    </div>\n                    {/* vertically center button within the div */}\n                </div>\n            </div>\n            {busyMessage && (\n                <BusyModal show={true} title=\"Please Wait\">\n                    {busyMessage}\n                </BusyModal>\n            )}\n        </>\n    );\n};\n","import { Cursor, Rect } from \"./models\";\n\nconst maxSnapshots = 10;\n\nexport class Renderer {\n    private undoStack: ImageData[] = [];\n    private redoStack: ImageData[] = [];\n    private currentSnapshot: ImageData | undefined;\n\n    private backgroundLayer: HTMLCanvasElement;\n    private baseImageLayer: HTMLCanvasElement;\n    private editLayer: HTMLCanvasElement;\n    // private overlayLayer: HTMLCanvasElement;\n\n    private selectionOverlay: Rect | undefined;\n    private selectionOverlayPreview: Rect | undefined;\n    private hasSelection: boolean = false;\n    private cursor: Cursor | undefined;\n\n    private zoom: number;\n    private offsetX: number;\n    private offsetY: number;\n    private width = 0;\n    private height = 0;\n\n    private snapshotListener: (() => void) | null = null;\n\n    constructor(private readonly canvas: HTMLCanvasElement) {\n        canvas.width = 512;\n        canvas.height = 512;\n        // invisible canvas elements\n        this.backgroundLayer = document.createElement(\"canvas\");\n        this.backgroundLayer.width = 512;\n        this.backgroundLayer.height = 512;\n        this.baseImageLayer = document.createElement(\"canvas\");\n        this.editLayer = document.createElement(\"canvas\");\n        // this.overlayLayer = document.createElement(\"canvas\");\n\n        this.zoom = 1;\n        this.offsetX = 0;\n        this.offsetY = 0;\n    }\n\n    undo(allowRedo: boolean = true) {\n        if (this.undoStack.length > 0 && this.currentSnapshot) {\n            const imageData = this.undoStack.pop()!;\n            if (allowRedo) {\n                this.redoStack.push(this.currentSnapshot);\n            }\n            this.currentSnapshot = imageData;\n            // set as base image\n            const ctx = this.baseImageLayer.getContext(\"2d\");\n            if (ctx) {\n                ctx.clearRect(\n                    0,\n                    0,\n                    this.baseImageLayer.width,\n                    this.baseImageLayer.height\n                );\n                ctx.putImageData(imageData, 0, 0);\n                this.render();\n            }\n            this.notifySnapshotListener();\n        }\n    }\n\n    redo() {\n        if (this.redoStack.length > 0 && this.currentSnapshot) {\n            this.undoStack.push(this.currentSnapshot);\n            const imageData = this.redoStack.pop()!;\n            this.currentSnapshot = imageData;\n\n            // set as base image\n            const ctx = this.baseImageLayer.getContext(\"2d\");\n            if (ctx) {\n                ctx.putImageData(imageData, 0, 0);\n                this.render();\n            }\n            this.notifySnapshotListener();\n        }\n    }\n\n    clearRedoStack() {\n        this.redoStack = [];\n        this.notifySnapshotListener();\n    }\n\n    canUndo(): boolean {\n        return !this.hasSelection && this.undoStack.length > 0;\n    }\n\n    canRedo(): boolean {\n        return !this.hasSelection && this.redoStack.length > 0;\n    }\n\n    onSnapshot(listener: () => void) {\n        this.snapshotListener = listener;\n    }\n\n    snapshot() {\n        const ctx = this.baseImageLayer.getContext(\"2d\");\n        if (ctx) {\n            const snapshot = ctx.getImageData(\n                0,\n                0,\n                this.baseImageLayer.width,\n                this.baseImageLayer.height\n            );\n            if (this.currentSnapshot) {\n                this.undoStack.push(this.currentSnapshot);\n                this.currentSnapshot = snapshot;\n                if (this.redoStack.length > 0) {\n                    this.redoStack = [];\n                }\n                if (this.undoStack.length > maxSnapshots) {\n                    this.undoStack.shift();\n                }\n            } else {\n                this.currentSnapshot = snapshot;\n            }\n\n            this.notifySnapshotListener();\n        }\n    }\n\n    private notifySnapshotListener() {\n        if (this.snapshotListener) {\n            this.snapshotListener();\n        }\n    }\n\n    render() {\n        const context = this.canvas.getContext(\"2d\");\n        if (context) {\n            context.clearRect(0, 0, this.width, this.height);\n            context.drawImage(this.backgroundLayer, 0, 0);\n            // apply zoom and offset\n            context.setTransform(\n                this.zoom,\n                0,\n                0,\n                this.zoom,\n                this.offsetX * this.zoom,\n                this.offsetY * this.zoom\n            );\n            // context.drawImage(this.backgroundLayer, 0, 0);\n            context.drawImage(this.baseImageLayer, 0, 0);\n            context.drawImage(this.editLayer, 0, 0);\n            // context.drawImage(this.overlayLayer, 0, 0);\n            this.drawOverlay(context, this.width, this.height);\n            context.setTransform(1, 0, 0, 1, 0, 0);\n        }\n    }\n\n    getCanvas(): HTMLCanvasElement {\n        return this.canvas;\n    }\n\n    private initializeBackgroundLayer() {\n        // checkered background\n        // #DEDEDE\n        // #FFFFFF\n        // 10x10 pixel squares\n        const ctx = this.backgroundLayer.getContext(\"2d\");\n        if (ctx) {\n            const pattern = ctx.createPattern(\n                this.createCheckeredPattern(20, 20, \"#808080\", \"#AAAAAA\"),\n                \"repeat\"\n            );\n            if (pattern) {\n                ctx.fillStyle = pattern;\n                ctx.fillRect(\n                    0,\n                    0,\n                    this.backgroundLayer.width,\n                    this.backgroundLayer.height\n                );\n            }\n        }\n    }\n\n    private createCheckeredPattern(\n        width: number,\n        height: number,\n        color1: string,\n        color2: string\n    ): HTMLCanvasElement {\n        const canvas = document.createElement(\"canvas\");\n        canvas.width = width;\n        canvas.height = height;\n        const ctx = canvas.getContext(\"2d\");\n        if (ctx) {\n            ctx.fillStyle = color1;\n            ctx.fillRect(0, 0, width, height);\n            ctx.fillStyle = color2;\n            ctx.fillRect(0, 0, width / 2, height / 2);\n            ctx.fillRect(width / 2, height / 2, width / 2, height / 2);\n        }\n        return canvas;\n    }\n\n    setBaseImage(\n        image: HTMLImageElement | HTMLCanvasElement,\n        updateSelectionOverlay = true\n    ) {\n        const context = this.baseImageLayer.getContext(\"2d\");\n        if (context) {\n            // set size of all layers\n            // TODO: adapt for an always-square canvas\n            this.initializeBackgroundLayer();\n\n            this.baseImageLayer.width = image.width;\n            this.baseImageLayer.height = image.height;\n            this.editLayer.width = image.width;\n            this.editLayer.height = image.height;\n            // set image size\n            this.width = image.width;\n            this.height = image.height;\n            // this.canvas.width = image.width;\n            // this.canvas.height = image.height;\n            context.drawImage(image, 0, 0);\n\n            if (updateSelectionOverlay) {\n                // set 512x512 selection overlay at the center of the image\n                this.setSelectionOverlay({\n                    x: (image.width - 512) / 2,\n                    y: (image.height - 512) / 2,\n                    width: 512,\n                    height: 512,\n                });\n            }\n            this.resetView();\n            // this.render(); // already called by updateZoomAndOffset\n            this.snapshot();\n        }\n    }\n\n    resetView() {\n        // determine zoom based on image difference from canvas size\n        const maxWidth = Math.max(this.width, this.height);\n        const zoom = this.canvas.width / maxWidth;\n\n        let offsetX = 0;\n        let offsetY = 0;\n\n        if (this.width > this.height) {\n            offsetY = (this.width - this.height) / 2;\n        } else if (this.height > this.width) {\n            offsetX = (this.height - this.width) / 2;\n        }\n\n        this.updateZoomAndOffset(zoom, offsetX, offsetY);\n    }\n\n    setEditImage(imageData: ImageData | null) {\n        this.hasSelection = !!imageData;\n        const context = this.editLayer.getContext(\"2d\");\n        if (context && this.selectionOverlay) {\n            context.clearRect(\n                0,\n                0,\n                this.editLayer.width,\n                this.editLayer.height\n            );\n            if (imageData) {\n                context.putImageData(\n                    imageData,\n                    this.selectionOverlay.x,\n                    this.selectionOverlay.y\n                );\n            }\n            // edit image makes the selection rect and preview disappear\n            // so redraw the overlay\n            this.hasSelection = !!imageData;\n            this.render();\n        }\n        this.notifySnapshotListener();\n    }\n\n    private drawOverlay(\n        context: CanvasRenderingContext2D,\n        width: number,\n        height: number\n    ) {\n        const lineWidth = Math.max(this.width / 512, this.height / 512);\n        if (context) {\n            context.strokeStyle = \"white\";\n            context.lineWidth = lineWidth;\n            context.strokeRect(0, 0, width, height);\n\n            if (!this.hasSelection && this.selectionOverlay) {\n                context.strokeStyle = \"white\";\n                context.lineWidth = lineWidth;\n                context.strokeRect(\n                    this.selectionOverlay.x,\n                    this.selectionOverlay.y,\n                    this.selectionOverlay.width,\n                    this.selectionOverlay.height\n                );\n            }\n            if (!this.hasSelection && this.selectionOverlayPreview) {\n                context.strokeStyle = \"cyan\";\n                context.lineWidth = lineWidth;\n                context.strokeRect(\n                    this.selectionOverlayPreview.x,\n                    this.selectionOverlayPreview.y,\n                    this.selectionOverlayPreview.width,\n                    this.selectionOverlayPreview.height\n                );\n            }\n            if (this.cursor) {\n                if (this.cursor.type === \"circle\") {\n                    context.lineWidth = lineWidth;\n                    context.strokeStyle = this.cursor.color;\n                    // context.globalAlpha = 0.5;\n                    context.beginPath();\n                    context.arc(\n                        this.cursor.x,\n                        this.cursor.y,\n                        this.cursor.radius,\n                        0,\n                        2 * Math.PI\n                    );\n                    context.stroke();\n                } else if (this.cursor.type === \"circle-fill\") {\n                    context.fillStyle = this.cursor.color;\n                    context.strokeStyle = this.cursor.color;\n                    // context.lineWidth = lineWidth;\n                    // context.globalAlpha = 0.5;\n                    context.beginPath();\n                    context.arc(\n                        this.cursor.x,\n                        this.cursor.y,\n                        this.cursor.radius,\n                        0,\n                        2 * Math.PI\n                    );\n                    context.stroke();\n                    // set alpha to 0.5 and fill\n                    context.globalAlpha = 0.5;\n                    context.beginPath();\n                    context.arc(\n                        this.cursor.x,\n                        this.cursor.y,\n                        this.cursor.radius,\n                        0,\n                        2 * Math.PI\n                    );\n                    context.fill();\n                    context.globalAlpha = 1;\n                } else if (this.cursor.type == \"crosshairs\") {\n                    // draw crosshairs based on cursor radius\n                    context.strokeStyle = this.cursor.color;\n                    context.lineWidth = lineWidth;\n                    context.beginPath();\n                    context.moveTo(\n                        this.cursor.x - this.cursor.radius,\n                        this.cursor.y\n                    );\n                    context.lineTo(\n                        this.cursor.x + this.cursor.radius,\n                        this.cursor.y\n                    );\n                    context.moveTo(\n                        this.cursor.x,\n                        this.cursor.y - this.cursor.radius\n                    );\n                    context.lineTo(\n                        this.cursor.x,\n                        this.cursor.y + this.cursor.radius\n                    );\n                    context.stroke();\n                } else if (this.cursor.type === \"colorpicker\") {\n                    // TODO: add croshairs\n                    context.lineWidth = this.cursor.radius * 0.75;\n                    context.strokeStyle = this.cursor.color;\n                    // context.globalAlpha = 0.5;\n                    context.beginPath();\n                    context.arc(\n                        this.cursor.x,\n                        this.cursor.y,\n                        this.cursor.radius,\n                        0,\n                        2 * Math.PI\n                    );\n                    context.stroke();\n\n                    // draw crosshairs (black)\n                    context.lineWidth = lineWidth;\n                    context.strokeStyle = \"black\";\n                    context.beginPath();\n                    context.moveTo(\n                        this.cursor.x - this.cursor.radius,\n                        this.cursor.y\n                    );\n                    context.lineTo(\n                        this.cursor.x + this.cursor.radius,\n                        this.cursor.y\n                    );\n                    context.moveTo(\n                        this.cursor.x,\n                        this.cursor.y - this.cursor.radius\n                    );\n                    context.lineTo(\n                        this.cursor.x,\n                        this.cursor.y + this.cursor.radius\n                    );\n                    context.stroke();\n                }\n            }\n        }\n    }\n\n    setSelectionOverlay(selectionOverlay: Rect | undefined) {\n        this.selectionOverlay = selectionOverlay;\n        this.render();\n    }\n\n    setSelectionOverlayPreview(selectionOverlayPreview: Rect | undefined) {\n        this.selectionOverlayPreview = selectionOverlayPreview;\n        this.render();\n    }\n\n    setCursor(cursor: Cursor | undefined) {\n        this.cursor = cursor;\n        this.render();\n    }\n\n    getSelectionOverlay(): Rect | undefined {\n        return this.selectionOverlay;\n    }\n\n    getZoom(): number {\n        return this.zoom;\n    }\n\n    getOffsetX(): number {\n        return this.offsetX;\n    }\n\n    getOffsetY(): number {\n        return this.offsetY;\n    }\n\n    updateZoomAndOffset(zoom: number, offsetX: number, offsetY: number) {\n        // console.log(`zoom: ${zoom}, offset: ${offsetX}, ${offsetY}`)\n        this.zoom = zoom;\n        this.offsetX = offsetX;\n        this.offsetY = offsetY;\n        this.render();\n    }\n\n    getWidth(): number {\n        return this.width;\n    }\n\n    getHeight(): number {\n        return this.height;\n    }\n\n    private imageDataToEncodedImage(imageData: ImageData): string | undefined {\n        // create a canvas and draw the image data on it\n        const canvas = document.createElement(\"canvas\");\n        canvas.width = imageData.width;\n        canvas.height = imageData.height;\n        const context = canvas.getContext(\"2d\");\n        if (context) {\n            context.putImageData(imageData, 0, 0);\n            // return the data url of the canvas\n            const result = canvas.toDataURL(\"image/png\");\n            // cleanup the canvas\n            canvas.remove();\n            // extract base64 data from data url\n            return result.split(\",\")[1];\n        }\n    }\n\n    getEncodedImage(selection: Rect | null): string | undefined {\n        const imageData = this.getImageData(selection);\n        if (imageData) {\n            return this.imageDataToEncodedImage(imageData);\n        }\n    }\n\n    private convertErasureToMask(erasure: ImageData): ImageData {\n        // for each pixel, if alpha < 255, set to white, otherwise set to black\n        const mask = erasure;\n        for (let i = 0; i < erasure.data.length; i += 4) {\n            if (erasure.data[i + 3] < 255) {\n                mask.data[i] = 255;\n                mask.data[i + 1] = 255;\n                mask.data[i + 2] = 255;\n                mask.data[i + 3] = 255;\n            } else {\n                mask.data[i] = 0;\n                mask.data[i + 1] = 0;\n                mask.data[i + 2] = 0;\n                mask.data[i + 3] = 255;\n            }\n        }\n        return mask;\n    }\n\n    getEncodedMask(selection: Rect | null): string | undefined {\n        const imageData = this.getImageData(selection)!;\n        const mask = this.convertErasureToMask(imageData);\n        return this.imageDataToEncodedImage(mask);\n    }\n\n    getImageData(selection: Rect | null): ImageData | undefined {\n        if (!selection) {\n            selection = {\n                x: 0,\n                y: 0,\n                width: this.width,\n                height: this.height,\n            };\n        }\n        // get image data of the selection\n        let context = this.baseImageLayer.getContext(\"2d\");\n        if (context) {\n            const imageData = context.getImageData(\n                selection.x,\n                selection.y,\n                selection.width,\n                selection.height\n            );\n            return imageData;\n        }\n    }\n\n    commitSelection() {\n        // draw the selection overlay on the base image layer\n        const context = this.baseImageLayer.getContext(\"2d\");\n        if (context) {\n            context.drawImage(this.editLayer, 0, 0);\n            this.setEditImage(null);\n            this.snapshot();\n        }\n    }\n\n    drawPoint(x: number, y: number, brushSize: number, color: string): void {\n        // draw on selection layer\n        const context = this.editLayer.getContext(\"2d\");\n        if (context) {\n            context.fillStyle = color;\n            context.beginPath();\n            context.arc(x, y, brushSize / 2, 0, 2 * Math.PI);\n            context.fill();\n        }\n        this.render();\n    }\n\n    erasePoint(brushx: number, brushy: number, brushSize: number): void {\n        if (!this.selectionOverlay) {\n            throw new Error(\"No selection overlay\");\n        }\n        // get image data centered on x, y with brushSize width and height\n        const context = this.baseImageLayer.getContext(\"2d\");\n        if (context) {\n            const imageData = context.getImageData(\n                brushx - brushSize / 2,\n                brushy - brushSize / 2,\n                brushSize,\n                brushSize\n            );\n            // set alpha to 0 in a circle centered on x, y with radius brushSize / 2\n            for (let i = 0; i < imageData.data.length; i += 4) {\n                const x = (i / 4) % brushSize;\n                const y = Math.floor(i / 4 / brushSize);\n\n                const absx = x - brushSize / 2 + brushx;\n                // three pixel barrier on each edge UNLESS the selection overlay borders that edge\n                let leftEdge = this.selectionOverlay.x;\n                if (leftEdge > 0) {\n                    leftEdge += 10;\n                }\n                let rightEdge =\n                    this.selectionOverlay.x + this.selectionOverlay.width;\n                if (rightEdge < this.width) {\n                    rightEdge -= 10;\n                }\n                let topEdge = this.selectionOverlay.y;\n                if (topEdge > 0) {\n                    topEdge += 10;\n                }\n                let bottomEdge =\n                    this.selectionOverlay.y + this.selectionOverlay.height;\n                if (bottomEdge < this.canvas.height) {\n                    bottomEdge -= 10;\n                }\n\n                const containsx = absx > leftEdge && absx < rightEdge;\n                const absy = y - brushSize / 2 + brushy;\n                const containsy = absy > topEdge && absy < bottomEdge;\n                const contains = containsx && containsy;\n\n                // check if x, y is within the selection overlay\n                if (this.selectionOverlay && !contains) {\n                    continue;\n                }\n\n                const distance = Math.sqrt(\n                    Math.pow(x - brushSize / 2, 2) +\n                        Math.pow(y - brushSize / 2, 2)\n                );\n                if (distance < brushSize / 2) {\n                    imageData.data[i + 3] = 0;\n                }\n            }\n            // draw the image data on the selection layer\n            context.putImageData(\n                imageData,\n                brushx - brushSize / 2,\n                brushy - brushSize / 2\n            );\n        }\n    }\n\n    drawLine(\n        x1: number,\n        y1: number,\n        x2: number,\n        y2: number,\n        brushSize: number,\n        color: string\n    ): void {\n        // draw on selection layer\n        const context = this.editLayer.getContext(\"2d\");\n        if (context) {\n            context.strokeStyle = color;\n            context.lineWidth = brushSize;\n            context.lineCap = \"round\";\n            context.beginPath();\n            context.moveTo(x1, y1);\n            context.lineTo(x2, y2);\n            context.stroke();\n        }\n        this.render();\n    }\n\n    smudgeLine(\n        x1: number,\n        y1: number,\n        x2: number,\n        y2: number,\n        brushSize: number,\n        brushOpacity: number\n    ): void {\n        const unitVector = {\n            x: x2 - x1,\n            y: y2 - y1,\n        };\n        const length = Math.sqrt(\n            unitVector.x * unitVector.x + unitVector.y * unitVector.y\n        );\n        unitVector.x /= length;\n        unitVector.y /= length;\n\n        // for each point on the line, get image data (brushSize x brushSize) from edit layer\n        // average pixel values that are within the brush circle.\n        // update the image data with the averaged pixel values in the\n        // brush circle, then put the image data back on the edit layer\n        // at the point on the line\n\n        const context = this.editLayer.getContext(\"2d\");\n        if (context) {\n            for (let i = 0; i < length; i++) {\n                const x = x1 + i * unitVector.x;\n                const y = y1 + i * unitVector.y;\n\n                const imageData = context.getImageData(\n                    x - brushSize / 2,\n                    y - brushSize / 2,\n                    brushSize,\n                    brushSize\n                );\n\n                let totalRed = 0;\n                let totalGreen = 0;\n                let totalBlue = 0;\n                let count = 0.0;\n\n                // average pixel values\n                for (let y = 0; y < imageData.height; y++) {\n                    for (let x = 0; x < imageData.width; x++) {\n                        const index = (y * imageData.width + x) * 4;\n                        const distance = Math.sqrt(\n                            (x - brushSize / 2) * (x - brushSize / 2) +\n                                (y - brushSize / 2) * (y - brushSize / 2)\n                        );\n                        if (distance <= brushSize / 2) {\n                            // get the pixel value from the image data\n                            const r = imageData.data[index];\n                            const g = imageData.data[index + 1];\n                            const b = imageData.data[index + 2];\n\n                            totalRed += r;\n                            totalGreen += g;\n                            totalBlue += b;\n                            count++;\n                        }\n                    }\n                }\n\n                // update the image data with the averaged pixel values\n                // these need to be weighted by the brush opacity\n                const averageRed = totalRed / count;\n                const averageGreen = totalGreen / count;\n                const averageBlue = totalBlue / count;\n                for (let y = 0; y < imageData.height; y++) {\n                    for (let x = 0; x < imageData.width; x++) {\n                        const index = (y * imageData.width + x) * 4;\n                        const distance = Math.sqrt(\n                            (x - brushSize / 2) * (x - brushSize / 2) +\n                                (y - brushSize / 2) * (y - brushSize / 2)\n                        );\n                        if (distance <= brushSize / 2) {\n                            imageData.data[index] =\n                                averageRed * brushOpacity +\n                                imageData.data[index] * (1 - brushOpacity);\n                            imageData.data[index + 1] =\n                                averageGreen * brushOpacity +\n                                imageData.data[index + 1] * (1 - brushOpacity);\n                            imageData.data[index + 2] =\n                                averageBlue * brushOpacity +\n                                imageData.data[index + 2] * (1 - brushOpacity);\n                        }\n                    }\n                }\n\n                // put the image data back on the edit layer\n                context.putImageData(\n                    imageData,\n                    x - brushSize / 2,\n                    y - brushSize / 2\n                );\n            }\n        }\n        this.render();\n    }\n\n    getPixel(x: number, y: number): string {\n        const context = this.baseImageLayer.getContext(\"2d\");\n        // get pixel as hex string\n        if (context) {\n            const pixel = context.getImageData(x, y, 1, 1).data;\n            return (\n                \"#\" +\n                (\"000000\" + rgbToHex(pixel[0], pixel[1], pixel[2])).slice(-6)\n            );\n        }\n        return \"#000000\";\n    }\n\n    copyEditImageFromBaseImage(): void {\n        // copy the base image to the edit layer\n        const context = this.editLayer.getContext(\"2d\");\n        if (context) {\n            context.drawImage(this.baseImageLayer, 0, 0);\n        }\n        this.render();\n        this.hasSelection = true;\n        this.notifySnapshotListener();\n    }\n\n    expandToOverlay() {\n        if (!this.selectionOverlay) {\n            throw new Error(\"No selection overlay\");\n        }\n        const minX = Math.min(0, this.selectionOverlay.x);\n        const minY = Math.min(0, this.selectionOverlay.y);\n        const maxX = Math.max(\n            this.selectionOverlay.x + this.selectionOverlay.width,\n            this.baseImageLayer.width\n        );\n        const maxY = Math.max(\n            this.selectionOverlay.y + this.selectionOverlay.height,\n            this.baseImageLayer.height\n        );\n        const width = maxX - minX;\n        const height = maxY - minY;\n\n        // create a new canvas with the expanded size\n        const newCanvas = document.createElement(\"canvas\");\n        newCanvas.width = width;\n        newCanvas.height = height;\n        // draw the base image on the new canvas.\n        // if overlay.x is negative, image.x is overlay.x * -1\n        // if overlay.x is 0 or positive, image.x is 0\n        // if overlay.y is negative, image.y is overlay.y * -1\n        // if overlay.y is 0 or positive, image.y is 0\n        const context = newCanvas.getContext(\"2d\");\n        if (context) {\n            context.drawImage(\n                this.baseImageLayer,\n                Math.max(0, this.selectionOverlay.x * -1),\n                Math.max(0, this.selectionOverlay.y * -1)\n            );\n        }\n        if (this.selectionOverlay.x < 0) {\n            this.selectionOverlay.x = 0;\n        }\n        if (this.selectionOverlay.y < 0) {\n            this.selectionOverlay.y = 0;\n        }\n        console.log(`new Canvas size: ${width} x ${height}`);\n        this.setBaseImage(newCanvas, false);\n    }\n}\n\nfunction rgbToHex(r: number, g: number, b: number) {\n    if (r > 255 || g > 255 || b > 255) throw \"Invalid color component\";\n    return ((r << 16) | (g << 8) | b).toString(16);\n}\n\nexport function createRenderer(canvas: HTMLCanvasElement): Renderer {\n    return new Renderer(canvas);\n}\n","import React, { FC, useState, useEffect } from \"react\";\nimport loadImage from \"blueimp-load-image\";\nimport saveAs from \"file-saver\";\n\nimport { AIBrushApi } from \"../../client\";\nimport { Renderer } from \"./renderer\";\nimport { BaseTool, Tool } from \"./tool\";\n\ninterface Props {\n    renderer: Renderer;\n    tool: BaseTool;\n    api: AIBrushApi;\n}\n\nexport const ImportExportControls: FC<Props> = ({ renderer, tool }) => {\n\n    const [backupImage, setBackupImage] = useState<string | undefined>();\n\n    const onImageSelected = (event: React.ChangeEvent<HTMLInputElement>) => {\n        const files = event.target.files;\n        if (files && files.length > 0) {\n            loadImage(\n                files[0],\n                (img) => {\n                    const backupImage = renderer.getEncodedImage(null);\n                    setBackupImage(backupImage);\n                    renderer.setBaseImage(img as HTMLImageElement);\n                },\n                { canvas: false }\n            );\n        }\n    };\n\n    const onExport = () => {\n        const encodedImage = renderer.getEncodedImage(null);\n        if (encodedImage) {\n            // base64 decode\n            const byteString = atob(encodedImage);\n            // save as file\n            const buffer = new ArrayBuffer(byteString.length);\n            const intArray = new Uint8Array(buffer);\n            for (let i = 0; i < byteString.length; i++) {\n                intArray[i] = byteString.charCodeAt(i);\n            }\n            const blob = new Blob([intArray], { type: \"image/png\" });\n            saveAs(blob, \"image.png\");\n        }\n    };\n\n    if (backupImage) {\n        return (\n            <div className=\"form-group\" style={{marginTop: \"16px\"}}>\n                <button\n                    className=\"btn btn-primary\"\n                    onClick={() => {\n                        setBackupImage(undefined);\n                        const img = new Image();\n                        // set src as data uri\n                        const src = \"data:image/png;base64,\" + backupImage;\n                        img.src = src;\n                        img.onload = () => {\n                            renderer.setBaseImage(img);\n                        };\n                    }}\n                >\n                    {/* cancel icon */}\n                    <i className=\"fas fa-times\"></i>&nbsp;\n                    Revert\n                </button>\n                <button\n                    className=\"btn btn-primary\"\n                    onClick={() => {\n                        setBackupImage(undefined);\n                        if (tool.saveListener) {\n                            const encodedImage = renderer.getEncodedImage(null);\n                            if (encodedImage) {\n                                tool.saveListener(encodedImage);\n                            }\n                        }\n                    }}\n                    style={{marginLeft: \"8px\"}}\n                >\n                    {/* save icon */}\n                    <i className=\"fas fa-save\"></i>&nbsp;\n                    Save\n                </button>\n            </div>\n        );\n    }\n\n    // Show buttons for import and export and \"save a copy\"\n    return (\n        <>\n            <div className=\"form-group\" style={{marginTop: \"16px\"}}>\n                <label\n                    id=\"loadimage-wrapper\"\n                    className={`btn btn-primary `}\n                    style={{ display: \"inline\" }}\n                >\n                    {/* upload image */}\n                    <i className=\"fas fa-upload\"></i>&nbsp; Import Image\n                    <input\n                        id=\"loadimage\"\n                        type=\"file\"\n                        style={{ display: \"none\" }}\n                        onChange={onImageSelected}\n                    />\n                </label>\n            </div>\n            <div className=\"form-group\">\n                <button\n                    className=\"btn btn-primary\"\n                    onClick={() => {\n                        onExport();\n                    }}\n                    style={{ marginLeft: \"8px\"}}\n                >\n                    <i className=\"fas fa-download\"></i>&nbsp; Export Image\n                </button>\n            </div>\n        </>\n    );\n};\n","import React, { FC, useState, useEffect } from \"react\";\nimport loadImage from \"blueimp-load-image\";\nimport saveAs from \"file-saver\";\nimport axios from \"axios\";\nimport * as uuid from \"uuid\";\n\nimport { sleep } from \"../../lib/sleep\";\n\nimport {\n    AIBrushApi,\n    CreateImageInput,\n    ImageParamsAugmentationEnum,\n    Image as APIImage,\n    StatusEnum,\n} from \"../../client\";\nimport { Renderer } from \"./renderer\";\nimport { BaseTool, Tool } from \"./tool\";\nimport {\n    splitImage,\n    mergeTiles,\n    ImageUtilWorker,\n    imageDataToCanvas,\n    fixImageSize,\n    decodeImage,\n    binaryImageToDataBase64,\n    SplitResult,\n} from \"../../lib/imageutil\";\nimport { defaultArgs } from \"../../components/ImagePrompt\";\nimport { ErrorNotification } from \"../../components/Alerts\";\nimport moment from \"moment\";\n\nexport const anonymousClient = axios.create();\ndelete anonymousClient.defaults.headers.common[\"Authorization\"];\n\ninterface Props {\n    renderer: Renderer;\n    tool: BaseTool;\n    api: AIBrushApi;\n    image: APIImage;\n}\n\nexport const AugmentControls: FC<Props> = ({ renderer, tool, api, image }) => {\n    const [backupImage, setBackupImage] = useState<string | undefined>();\n    const [activeAugmentation, setActiveAugmentation] = useState<\n        \"upscale\" | \"face_restore\" | null\n    >(null);\n    const [imageWorker, setImageWorker] = useState<\n        ImageUtilWorker | undefined\n    >();\n    const [error, setError] = useState<string | null>(null);\n    const [lastError, setLastError] = useState<number>(0);\n\n    useEffect(() => {\n        const imageWorker = new ImageUtilWorker();\n        setImageWorker(imageWorker);\n        return () => {\n            imageWorker.destroy();\n        };\n    }, []);\n\n    const augmentImageData = async (\n        imageData: ImageData,\n        augmentation: \"upscale\" | \"face_restore\"\n    ): Promise<ImageData> => {\n        if (!imageWorker) {\n            throw new Error(\"Image worker not initialized\");\n        }\n        let c = imageDataToCanvas(imageData);\n        let encodedImage = c.toDataURL(\"image/png\").split(\",\")[1];\n        c.remove();\n        const input: CreateImageInput = defaultArgs();\n        input.label = \"\";\n        input.encoded_image = encodedImage;\n        input.params.prompt = image.params.prompt;\n        input.params.negative_prompt = image.params.negative_prompt;\n        input.params.denoising_strength = 0.05;\n        input.count = 1;\n        input.model = \"stable_diffusion\";\n        input.nsfw = true;\n        input.temporary = true;\n        input.params.width = imageData.width;\n        input.params.height = imageData.height;\n        input.params.augmentation =\n            augmentation === \"upscale\"\n                ? ImageParamsAugmentationEnum.Upscale\n                : ImageParamsAugmentationEnum.FaceRestore;\n\n        const createResp = await api.createImage(input);\n        let processingImage = createResp.data.images![0];\n        while (processingImage.status !== StatusEnum.Completed) {\n            await sleep(2000);\n            const checkResp = await api.getImage(processingImage.id);\n            processingImage = checkResp.data;\n            if (processingImage.status === StatusEnum.Error) {\n                throw new Error(\"Augmentation failed\");\n            }\n        }\n        const downloadUrls = await api.getImageDownloadUrls(processingImage.id);\n\n        // download image data, convert to canvas and resize to 2x original,\n        // convert back to image data and return.\n        const imageDataResp = await anonymousClient.get(\n            downloadUrls.data.image_url!,\n            {\n                responseType: \"arraybuffer\",\n            }\n        );\n        encodedImage = binaryImageToDataBase64(imageDataResp.data);\n        const img = await decodeImage(encodedImage);\n        c = document.createElement(\"canvas\");\n        const upscaleFactor = augmentation === \"upscale\" ? 2 : 1;\n        c.width = imageData.width * upscaleFactor;\n        c.height = imageData.height * upscaleFactor;\n        const ctx = c.getContext(\"2d\")!;\n        ctx.drawImage(img, 0, 0, c.width, c.height);\n        const newImageData = ctx.getImageData(0, 0, c.width, c.height);\n        c.remove();\n        return newImageData;\n    };\n\n    const onAugment = async (augmentation: \"upscale\" | \"face_restore\") => {\n        setActiveAugmentation(augmentation);\n        setError(null);\n        try {\n            const backupImage = renderer.getEncodedImage(null);\n            setBackupImage(backupImage);\n            let imageData = renderer.getImageData(null);\n            if (!imageData) {\n                return;\n            }\n            // ensure width and height are multiples of 64\n            if ((imageData.width % 64) + (imageData.height % 64) !== 0) {\n                const c = fixImageSize(imageDataToCanvas(imageData));\n                imageData = c\n                    .getContext(\"2d\")!\n                    .getImageData(0, 0, c.width, c.height);\n            }\n\n            const newImageData = await augmentImageData(\n                imageData,\n                augmentation\n            );\n            const newCanvas = imageDataToCanvas(newImageData);\n            renderer.setBaseImage(newCanvas);\n            newCanvas.remove();\n        } catch (err: any) {\n            setError(err.message || \"Upscaling failed\");\n            setLastError(moment().valueOf());\n        } finally {\n            setActiveAugmentation(null);\n        }\n    };\n\n    if (activeAugmentation) {\n        return (\n            <div className=\"form-group\" style={{ marginTop: \"16px\" }}>\n                <i className=\"fas fa-spinner fa-spin\"></i>&nbsp;{\" \"}\n                {activeAugmentation === \"upscale\"\n                    ? \"Upscaling...\"\n                    : \"Restoring faces...\"}\n            </div>\n        );\n    }\n\n    if (backupImage) {\n        return (\n            <div className=\"form-group\" style={{ marginTop: \"16px\" }}>\n                <ErrorNotification message={error} timestamp={lastError} />\n                <button\n                    className=\"btn btn-primary\"\n                    onClick={() => {\n                        setBackupImage(undefined);\n                        const img = new Image();\n                        // set src as data uri\n                        const src = \"data:image/png;base64,\" + backupImage;\n                        img.src = src;\n                        img.onload = () => {\n                            renderer.setBaseImage(img);\n                        };\n                    }}\n                >\n                    {/* cancel icon */}\n                    <i className=\"fas fa-times\"></i>&nbsp; Revert\n                </button>\n                <button\n                    className=\"btn btn-primary\"\n                    onClick={() => {\n                        setBackupImage(undefined);\n                        if (tool.saveListener) {\n                            const encodedImage = renderer.getEncodedImage(null);\n                            if (encodedImage) {\n                                tool.saveListener(encodedImage);\n                            }\n                        }\n                    }}\n                    style={{ marginLeft: \"8px\" }}\n                >\n                    {/* save icon */}\n                    <i className=\"fas fa-save\"></i>&nbsp; Save\n                </button>\n            </div>\n        );\n    }\n\n    const maxSize = 2048 * 2048;\n    if (renderer.getWidth() * renderer.getHeight() > maxSize) {\n        return (\n            <div style={{ marginTop: \"16px\" }}>\n                This image is too large to augment.\n            </div>\n        );\n    }\n\n    // Show buttons for import and export and \"save a copy\"\n    return (\n        <>\n            <ErrorNotification message={error} timestamp={lastError} />\n            <div className=\"form-group\" style={{ marginTop: \"16px\" }}>\n                <button\n                    className=\"btn btn-primary\"\n                    onClick={() => {\n                        onAugment(\"upscale\");\n                    }}\n                    style={{ marginLeft: \"8px\" }}\n                >\n                    {/* upscale icon */}\n                    <i className=\"fas fa-arrows-alt\"></i>&nbsp; Upscale Image 2x\n                </button>\n            </div>\n            <div className=\"form-group\" style={{ marginTop: \"16px\" }}>\n                <button\n                    className=\"btn btn-primary\"\n                    onClick={() => {\n                        onAugment(\"face_restore\");\n                    }}\n                    style={{ marginLeft: \"8px\" }}\n                >\n                    {/* face restore icon */}\n                    <i className=\"fas fa-smile\"></i>&nbsp; Restore Faces\n                </button>\n            </div>\n        </>\n    );\n};\n","export interface BoostLevel {\n    level: number\n    name: string\n    description: string\n}\n\nexport const BOOST_LEVELS: BoostLevel[] = [\n    {\n        level: 1,\n        name: \"Quick\",\n        description: \"This boost is a great deal for anyone who needs dedicated gpu power on a budget. Estimated peak output: 350 images per hour\"\n    },\n    {\n        level: 2,\n        name: \"Fast\",\n        description: \"With twice the gpu power of the Quick boost, the Fast boost is ideal for the impatient hobbyist. Estimated peak output: 700 images per hour\"\n    },\n    {\n        level: 4,\n        name: \"Pro\",\n        description: \"Is Fast not enough for you? Prepare to break the sound barrier and double your gpu power with the Pro boost. Estimated peak output: 1400 images per hour\"\n    },\n    {\n        level: 8,\n        name: \"Super\",\n        description: \"Upgrade to the Pro boost to achieve unparalleled speed. This boost is for people who want to make images as fast as possible. Estimated peak output: 2800 images per hour\"\n    }\n]","import React, { FC, useState, useEffect, CSSProperties } from \"react\";\nimport { Modal } from \"react-bootstrap\";\nimport { BOOST_LEVELS } from \"../lib/boost\";\n\nimport \"./BoostLevelPopup.css\";\n\ninterface Props {\n    selectedBoostLevel: number;\n    onUpdateBoostLevel: (level: number) => void;\n    onCancel: () => void;\n}\n\nexport const BoostLevelPopup: FC<Props> = ({\n    selectedBoostLevel,\n    onUpdateBoostLevel,\n    onCancel,\n}) => {\n\n    const [updatedBoostLevel, setUpdatedBoostLevel] = useState<number>(selectedBoostLevel);\n\n    useEffect(() => {\n        setUpdatedBoostLevel(selectedBoostLevel);\n    }, [selectedBoostLevel])\n\n    return (<Modal\n        onHide={() => onCancel()}\n        centered\n        show={true}\n    >\n        <Modal.Header closeButton>\n            <Modal.Title>Boost Level</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n            {/* Select from the list: Quick (1), Fast (2), Pro (4) and Super (8)\n            <div className=\"form-group\">\n                <label htmlFor=\"boost-level\">Boost Level</label>\n                <select\n                    className=\"form-control\"\n                    id=\"boost-level\"\n                    value={selectedBoostLevel}\n                    onChange={(e) =>\n                        setUpdatedBoostLevel(parseInt(e.target.value))\n                    }\n                >\n                    <option value={1}>Quick</option>\n                    <option value={2}>Fast</option>\n                    <option value={4}>Pro</option>\n                    <option value={8}>Super</option>\n                </select>\n            </div> */}\n            {BOOST_LEVELS.map(boostLevel => (\n                <div\n                    className={\"boost-item\" + (updatedBoostLevel === boostLevel.level ? \" selected\" : \"\")}\n                    key={boostLevel.level}\n                    onClick={() => setUpdatedBoostLevel(boostLevel.level)}\n                >\n                    <div className=\"boost-item-label\">\n                        {boostLevel.name}\n                    </div>\n                    <div className=\"boost-item-description\">\n                        {boostLevel.description}\n                    </div>\n                </div>\n            ))}\n        </Modal.Body>\n        <Modal.Footer>\n            <button\n                type=\"button\"\n                className=\"btn btn-secondary\"\n                onClick={() => onCancel()}\n            >\n                Close\n            </button>\n            &nbsp;\n            <button\n                type=\"button\"\n                className=\"btn btn-primary\"\n                onClick={() => onUpdateBoostLevel(updatedBoostLevel)}\n            >\n                Update\n            </button>\n        </Modal.Footer>\n    </Modal>)\n}","import React, { FC, useState, useEffect, CSSProperties } from \"react\";\nimport { Modal } from \"react-bootstrap\";\nimport moment from \"moment\";\nimport { Boost } from \"../client\";\nimport { relative } from \"path\";\nimport { BoostLevelPopup } from \"./BoostLevelPopup\";\n\ninterface Props {\n    boost: Boost;\n    onUpdateActive: (active: boolean) => void;\n    onUpdateBoostLevel: (level: number) => void;\n}\n\nconst COOLDOWN_MILLISECONDS = 1000 * 60 * 10; // 10 minutes\nconst boostLevelToLabel: { [key: number]: string } = {\n    1: \"QUICK\",\n    2: \"FAST\",\n    4: \"PRO\",\n    8: \"SUPER\",\n};\n\nexport const BoostWidget: FC<Props> = ({\n    boost,\n    onUpdateActive,\n    onUpdateBoostLevel,\n}) => {\n    const [remainingTime, setRemainingTime] = useState<string>(\"00:00:00\");\n    const [hidden, setHidden] = useState<boolean>(false);\n    const [cooldown, setCooldown] = useState(false);\n    const [updatingBoostLevel, setUpdatingBoostLevel] = useState(false);\n\n    const style: CSSProperties = {\n        // width: \"100%\",\n        height: \"50px\",\n        // background:\n        //     \"linear-gradient(-45deg, #3D3BB5, #8B41D6, #26D6E1)\",\n        backgroundColor: \"#3D3BB5\",\n        backgroundSize: \"400% 400%\",\n        borderRadius: \"8px\",\n        textAlign: \"left\",\n        paddingTop: \"8px\",\n        paddingLeft: \"16px\",\n        paddingRight: \"16px\",\n        fontSize: \"24px\",\n        fontWeight: \"bolder\",\n        // italic\n        // fontStyle: \"italic\",\n        // animationName: \"boost\",\n        // animationDuration: \"5s\",\n        // animationIterationCount: \"infinite\",\n    };\n    if (boost.is_active) {\n        style.backgroundColor = undefined;\n        style.backgroundImage =\n            \"linear-gradient(-45deg, #3D3BB5, #8B41D6, #26D6E1)\";\n        style.animationName = \"boost\";\n        style.animationDuration = \"5s\";\n        style.animationIterationCount = \"infinite\";\n    }\n\n    useEffect(() => {\n        const updateRemainingTime = () => {\n            // boost.balance is specified in milliseconds\n            // use the moment library to show remaining time in the form of\n            // \"HH:MM:SS\"\n            let remainingMilliseconds = boost.balance / boost.level;\n\n            if (boost.is_active) {\n                remainingMilliseconds -= moment()\n                    .diff(moment(boost.activated_at))\n                    .valueOf();\n                if (remainingMilliseconds <= 0) {\n                    remainingMilliseconds = 0;\n                }\n                setHidden(remainingMilliseconds === 0);\n                setCooldown(false);\n            } else {\n                const millisecondsSinceLastActivated =\n                    moment().valueOf() - boost.activated_at;\n                if (millisecondsSinceLastActivated < COOLDOWN_MILLISECONDS) {\n                    setCooldown(true);\n                    remainingMilliseconds =\n                        COOLDOWN_MILLISECONDS - millisecondsSinceLastActivated;\n                } else {\n                    setCooldown(false);\n                }\n                setHidden(boost.balance === 0);\n            }\n\n            let remainingTime = moment\n                .utc(remainingMilliseconds)\n                .format(\"HH:mm:ss\");\n            setRemainingTime(remainingTime);\n        };\n        updateRemainingTime();\n        const interval = setInterval(updateRemainingTime, 1000);\n        return () => clearInterval(interval);\n    }, [boost]);\n\n    if (hidden) {\n        return <div></div>;\n    }\n\n    return (\n        <div className=\"boost-widget\" style={style}>\n            <span\n                style={{\n                    cursor: \"pointer\",\n                    fontStyle: boost.is_active ? \"italic\" : \"normal\",\n                }}\n                onClick={() => setUpdatingBoostLevel(true)}\n            >\n                {boostLevelToLabel[boost.level]}\n            </span>\n\n            <div\n                style={{\n                    float: \"right\",\n                }}\n            >\n                {!boost.is_active && (\n                    <i\n                        className=\"fas fa-play\"\n                        onClick={() => onUpdateActive(true)}\n                        style={{ cursor: \"pointer\" }}\n                    />\n                )}\n                {boost.is_active && (\n                    <i\n                        className=\"fas fa-pause\"\n                        onClick={() => onUpdateActive(false)}\n                        style={{ cursor: \"pointer\" }}\n                    />\n                )}\n            </div>\n            <span\n                style={{\n                    fontStyle: \"normal\",\n                    fontSize: \"16px\",\n                    float: \"right\",\n                    paddingTop: \"6px\",\n                    marginRight: \"8px\",\n                }}\n            >\n                {remainingTime}&nbsp;\n            </span>\n            {cooldown && (\n                <span\n                    style={{\n                        fontStyle: \"normal\",\n                        fontSize: \"12px\",\n                        float: \"right\",\n                        paddingTop: \"8px\",\n                        marginRight: \"8px\",\n                        color: \"#26D6E1\",\n                        animation: \"cooldown 5s ease infinite\",\n                    }}\n                >\n                    COOLDOWN&nbsp;\n                </span>\n            )}\n            {updatingBoostLevel && (\n                <BoostLevelPopup\n                    onCancel={() => setUpdatingBoostLevel(false)}\n                    onUpdateBoostLevel={(level: number) => {\n                        setUpdatingBoostLevel(false);\n                        onUpdateBoostLevel(level);\n                    }}\n                    selectedBoostLevel={boost.level}\n                />\n            )}\n        </div>\n    );\n};\n","import { Rect } from \"../pages/image-editor/models\";\n\nexport interface SplitResult {\n    numTilesX: number;\n    numTilesY: number;\n    tileSize: number;\n    imageWidth: number;\n    imageHeight: number;\n    tiles: ImageData[][]; // [x][y]\n}\n\n// split image for individual upscales\nexport function splitImage(initImage: ImageData) {\n    // Check if the image area is larger than 512x512\n    if (initImage.width * initImage.height > 512 * 512) {\n        // use a temporary canvas to split the image\n        const canvas = document.createElement(\"canvas\");\n        try {\n            canvas.width = initImage.width;\n            canvas.height = initImage.height;\n            const ctx = canvas.getContext(\"2d\");\n            if (!ctx) {\n                throw new Error(\"Could not get canvas context\");\n            }\n            ctx.putImageData(initImage, 0, 0);\n            const tile_size = Math.min(initImage.width, initImage.height, 512);\n            // split the image into 512x512 tiles\n            // they need to overlap by at least 32 pixels\n            // so that the edges can be merged\n\n            // calculate the number of tiles in each dimension\n            const num_tiles_x = Math.ceil(initImage.width / (tile_size - 32));\n            const num_tiles_y = Math.ceil(initImage.height / (tile_size - 32));\n\n            const tiles: ImageData[][] = [];\n            for (let x = 0; x < num_tiles_x; x++) {\n                tiles.push([]);\n                for (let y = 0; y < num_tiles_y; y++) {\n                    // calculate the bounding box of the tile\n                    const x0 = x * (tile_size - 32);\n                    const y0 = y * (tile_size - 32);\n                    const x1 = Math.min(x0 + tile_size, initImage.width);\n                    const y1 = Math.min(y0 + tile_size, initImage.height);\n                    // crop the tile\n                    const tile = ctx.getImageData(x0, y0, x1 - x0, y1 - y0);\n                    tiles[x].push(tile);\n                }\n            }\n            return {\n                numTilesX: num_tiles_x,\n                numTilesY: num_tiles_y,\n                tileSize: tile_size,\n                imageWidth: initImage.width,\n                imageHeight: initImage.height,\n                tiles,\n            };\n        } finally {\n            canvas.remove();\n        }\n    } else {\n        return null;\n    }\n}\n\n// merge the tiles back into a single image\n// tiles should be 2x original size\nexport function mergeTiles(splitResult: SplitResult): ImageData {\n    // create a new image\n    const canvas = document.createElement(\"canvas\");\n    try {\n        canvas.width = splitResult.imageWidth;\n        canvas.height = splitResult.imageHeight;\n        const ctx = canvas.getContext(\"2d\");\n        if (!ctx) {\n            throw new Error(\"Could not get canvas context\");\n        }\n        for (let x = 0; x < splitResult.numTilesX; x++) {\n            for (let y = 0; y < splitResult.numTilesY; y++) {\n                // load the tile\n                const tile = splitResult.tiles[x][y];\n                const tileCanvas = imageDataToCanvas(tile);\n                \n                // paste the tile into the new image\n                ctx.drawImage(tileCanvas, x * (splitResult.tileSize - 64), y * (splitResult.tileSize - 64));\n            }\n        }\n        return ctx.getImageData(\n            0,\n            0,\n            splitResult.imageWidth,\n            splitResult.imageHeight\n        );\n    } finally {\n        canvas.remove();\n    }\n}\n\nexport function imageDataToCanvas(imageData: ImageData): HTMLCanvasElement {\n    const canvas = document.createElement(\"canvas\");\n    canvas.width = imageData.width;\n    canvas.height = imageData.height;\n    const ctx = canvas.getContext(\"2d\");\n    if (!ctx) {\n        throw new Error(\"Could not get canvas context\");\n    }\n    ctx.putImageData(imageData, 0, 0);\n    return canvas;\n}\n\n// extract resizing logic from above function into a reusable resizeImage function\nexport function resizeImage(\n    image: HTMLCanvasElement,\n    width: number,\n    height: number\n): HTMLCanvasElement {\n    const canvas = document.createElement(\"canvas\");\n    try {\n        canvas.width = width;\n        canvas.height = height;\n        const ctx = canvas.getContext(\"2d\");\n        if (!ctx) {\n            throw new Error(\"Could not get canvas context\");\n        }\n        ctx.drawImage(image, 0, 0, width, height);\n        return canvas;\n    } finally {\n        image.remove();\n    }\n}\n\n// re-implement fixImageSize using resizeImage\nexport function fixImageSize(image: HTMLCanvasElement): HTMLCanvasElement {\n    // if the width and the height are divisible by 64, return the image data\n    // otherwise, resize up to the next multiple of 64\n    const width = Math.ceil(image.width / 64) * 64;\n    const height = Math.ceil(image.height / 64) * 64;\n    if (width == image.width && height == image.height) {\n        return image;\n    }\n    return resizeImage(image, width, height);\n}\n\nexport function featherEdges(\n    selectionOverlay: Rect,\n    imageWidth: number,\n    imageHeight: number,\n    imageData: ImageData,\n    featherWidth?: number\n) {\n    const featherLeftEdge = selectionOverlay.x != 0;\n    const featherRightEdge =\n        selectionOverlay.x + selectionOverlay.width != imageWidth;\n    const featherTopEdge = selectionOverlay.y != 0;\n    const featherBottomEdge =\n        selectionOverlay.y + selectionOverlay.height != imageHeight;\n\n    const baseWidth = Math.min(selectionOverlay.width, selectionOverlay.height);\n    if (!featherWidth) {\n        featherWidth = Math.floor(baseWidth / 8);\n    }\n\n    if (featherTopEdge) {\n        for (let y = 0; y < featherWidth; y++) {\n            for (let x = 0; x < selectionOverlay.width; x++) {\n                const pixelIndex = (y * selectionOverlay.width + x) * 4;\n                const alpha = (y / featherWidth) * 255;\n                const existingAlpha = imageData.data[pixelIndex + 3];\n                imageData.data[pixelIndex + 3] = Math.min(alpha, existingAlpha);\n            }\n        }\n    }\n    if (featherBottomEdge) {\n        for (\n            let y = selectionOverlay.height - featherWidth;\n            y < selectionOverlay.height;\n            y++\n        ) {\n            for (let x = 0; x < selectionOverlay.width; x++) {\n                const pixelIndex = (y * selectionOverlay.width + x) * 4;\n                const alpha =\n                    ((selectionOverlay.height - y) / featherWidth) * 255;\n                const existingAlpha = imageData.data[pixelIndex + 3];\n                imageData.data[pixelIndex + 3] = Math.min(alpha, existingAlpha);\n            }\n        }\n    }\n    if (featherLeftEdge) {\n        for (let x = 0; x < featherWidth; x++) {\n            for (let y = 0; y < selectionOverlay.height; y++) {\n                const pixelIndex = (y * selectionOverlay.width + x) * 4;\n                const alpha = (x / featherWidth) * 255;\n                const existingAlpha = imageData.data[pixelIndex + 3];\n                imageData.data[pixelIndex + 3] = Math.min(alpha, existingAlpha);\n            }\n        }\n    }\n    if (featherRightEdge) {\n        for (\n            let x = selectionOverlay.width - featherWidth;\n            x < selectionOverlay.width;\n            x++\n        ) {\n            for (let y = 0; y < selectionOverlay.height; y++) {\n                const pixelIndex = (y * selectionOverlay.width + x) * 4;\n                const alpha =\n                    ((selectionOverlay.width - x) / featherWidth) * 255;\n                const existingAlpha = imageData.data[pixelIndex + 3];\n                imageData.data[pixelIndex + 3] = Math.min(alpha, existingAlpha);\n            }\n        }\n    }\n}\n\nexport function applyAlphaMask(imageData: ImageData, alphaMask: ImageData) {\n    if (\n        imageData.width != alphaMask.width ||\n        imageData.height != alphaMask.height\n    ) {\n        throw new Error(\"imageData and alphaMask are not the same size\");\n    }\n    const spread = 10;\n    for (let x = 0; x < imageData.width; x++) {\n        for (let y = 0; y < imageData.height; y++) {\n            // r, g, b, a\n            // if transparency within 10 pixels, set alpha to 1, otherwise to zero.\n            // binary alpha inversion with spread\n            let alpha = false;\n            for (\n                let x2 = Math.max(0, x - spread);\n                x2 < Math.min(imageData.width, x + spread);\n                x2++\n            ) {\n                for (\n                    let y2 = Math.max(0, y - spread);\n                    y2 < Math.min(imageData.height, y + spread);\n                    y2++\n                ) {\n                    const alphaValue =\n                        alphaMask.data[y2 * alphaMask.width * 4 + x2 * 4 + 3];\n                    if (alphaValue < 255) {\n                        alpha = true;\n                    }\n                }\n            }\n            const alphaIndex = y * imageData.width * 4 + x * 4 + 3;\n            if (alpha) {\n                imageData.data[alphaIndex] = 255;\n            } else {\n                imageData.data[alphaIndex] = 0;\n            }\n        }\n    }\n}\n\nexport interface ImageWorkerRequest {\n    id: string;\n    feather: boolean;\n    upscale?: boolean;\n    alpha: boolean;\n    pixels: Uint8ClampedArray;\n    alphaPixels?: Uint8ClampedArray;\n    width: number;\n    height: number;\n    featherWidth?: number;\n    selectionOverlay: Rect;\n}\n\nexport interface ImageWorkerResponse {\n    id: string;\n    pixels: Uint8ClampedArray;\n}\n\nexport class ImageUtilWorker {\n    private workers: Array<Worker> = [];\n    private callbacks: { [key: string]: (event: MessageEvent) => void } = {};\n    private cursor = 0;\n\n    constructor(numWorkers = 3) {\n        for (let i = 0; i < numWorkers; i++) {\n            this.workers[i] = new Worker(\n                `${process.env.PUBLIC_URL}/workers/imageutil.js`\n            );\n            this.workers[i].addEventListener(\n                \"message\",\n                this.onMessage.bind(this)\n            );\n        }\n    }\n\n    onMessage(event: MessageEvent) {\n        const resp = event.data as ImageWorkerResponse;\n        this.callbacks[resp.id](event);\n        delete this.callbacks[resp.id];\n    }\n\n    async processRequest(\n        request: ImageWorkerRequest\n    ): Promise<ImageWorkerResponse> {\n        return new Promise((resolve, reject) => {\n            this.callbacks[request.id] = (event) => {\n                resolve(event.data);\n            };\n            this.workers[this.cursor].postMessage({\n                ...request,\n            });\n            this.cursor = (this.cursor + 1) % this.workers.length;\n        });\n    }\n\n    destroy() {\n        for (let key in this.workers) {\n            this.workers[key].terminate();\n        }\n    }\n}\n\nexport function createEncodedThumbnail(encodedImage: string): Promise<string> {\n    return new Promise((resolve, reject) => {\n        // use html5 canvas\n        // crop to square aspect ratio on 128x128 canvas\n        const canvas = document.createElement(\"canvas\");\n        canvas.width = 128;\n        canvas.height = 128;\n\n        const image = new Image();\n        image.src = `data:image/png;base64,${encodedImage}`;\n        image.onload = () => {\n            const context = canvas.getContext(\"2d\");\n            if (!context) {\n                throw new Error(\"Could not create canvas context\");\n            }\n            const width = 128;\n            const height = 128;\n            canvas.width = width;\n            canvas.height = height;\n\n            const aspectRatio = image.width / image.height;\n            const cropWidth =\n                aspectRatio > 1 ? image.width : image.height * aspectRatio;\n            const cropHeight =\n                aspectRatio > 1 ? image.width / aspectRatio : image.height;\n            const cropX = (image.width - cropWidth) / 2;\n            const cropY = (image.height - cropHeight) / 2;\n            context.drawImage(\n                image,\n                cropX,\n                cropY,\n                cropWidth,\n                cropHeight,\n                0,\n                0,\n                width,\n                height\n            );\n\n            // save to png\n            const imageUrl = canvas.toDataURL(\"image/png\");\n            const base64 = imageUrl.split(\",\")[1];\n            resolve(base64);\n        };\n    });\n}\n\nexport function decodeImage(encodedImage: string): Promise<HTMLImageElement> {\n    return new Promise((resolve, reject) => {\n        const image = new Image();\n        image.src = `data:image/png;base64,${encodedImage}`;\n        image.onload = () => {\n            resolve(image);\n        };\n    });\n}\n\nexport function binaryImageToDataBase64(binaryImage: any): string {\n    const buf = Buffer.from(binaryImage, \"binary\");\n    return buf.toString(\"base64\");\n}\n\nexport function resizeEncodedImage(\n    encodedImage: string,\n    width: number,\n    height: number\n): Promise<string> {\n    return new Promise((resolve, reject) => {\n        // use html5 canvas\n        // crop to square aspect ratio on 128x128 canvas\n        const canvas = document.createElement(\"canvas\");\n        canvas.width = width;\n        canvas.height = height;\n\n        const image = new Image();\n        image.src = `data:image/png;base64,${encodedImage}`;\n        image.onload = () => {\n            const context = canvas.getContext(\"2d\");\n            if (!context) {\n                throw new Error(\"Could not create canvas context\");\n            }\n            canvas.width = width;\n            canvas.height = height;\n\n            context.drawImage(\n                image,\n                0,\n                0,\n                image.width,\n                image.height,\n                0,\n                0,\n                width,\n                height\n            );\n\n            // save to png\n            const imageUrl = canvas.toDataURL(\"image/png\");\n            const base64 = imageUrl.split(\",\")[1];\n            resolve(base64);\n        };\n    });\n}\n\nexport function encodedImageToBlob(encodedImage: string): Blob {\n    const binaryString = atob(encodedImage);\n    const arr = [];\n    for (let i = 0; i < binaryString.length; i++) {\n        arr.push(binaryString.charCodeAt(i));\n    }\n    return new Blob([new Uint8Array(arr)], {\n        type: \"image/png\",\n    });\n}\n\n// This function is made to work with S3 presigned urls.\n// Solution found at https://stackoverflow.com/questions/22531114/how-to-upload-to-aws-s3-directly-from-browser-using-a-pre-signed-url-instead-of\nexport function uploadBlob(signedUrl: string, blob: Blob): Promise<void> {\n    return new Promise((resolve, reject) => {\n        var xhr = new XMLHttpRequest();\n        xhr.open(\"PUT\", signedUrl, true);\n        xhr.setRequestHeader(\"Content-Type\", \"image/png\");\n        xhr.onload = () => {\n            if (xhr.status < 400) {\n                // success!\n                resolve();\n            }\n        };\n        xhr.onerror = (err) => {\n            // error...\n            reject(err);\n        };\n        xhr.send(blob); // `file` is a File object here\n    });\n}\n","import React, { FC, useEffect, useRef, useState } from \"react\";\nimport { Modal } from \"react-bootstrap\";\nimport { propTypes } from \"react-bootstrap/esm/Image\";\n\ninterface Props {\n    show: boolean;\n    title?: string;\n}\n\n// Show modal with child contents\nexport const BusyModal: FC<Props> = ({ show, title, children }) => {\n    return (\n        <Modal show={show} backdrop=\"static\" keyboard={false}>\n            <Modal.Header closeButton>\n                <Modal.Title>{title || \"Processing\"}</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                {children || (\n                    <div className=\"d-flex justify-content-center\">\n                        <div className=\"spinner-border\" role=\"status\">\n                            <span className=\"sr-only\">Please Wait...</span>\n                        </div>\n                    </div>\n                )}\n            </Modal.Body>\n        </Modal>\n    );\n};\n","import { Renderer } from \"./renderer\";\n\nexport class ZoomHelper {\n\n    private startTouches: React.TouchList | null;\n    private startZoom = 1;\n    private startOffsetX = 0;\n    private startOffsetY = 0;\n\n    constructor(private renderer: Renderer) {\n        this.startTouches = null;\n    }\n\n    onWheel(event: WheelEvent) {\n        const originalZoom = this.renderer.getZoom();\n        let zoom = this.renderer.getZoom();\n        let offsetX = this.renderer.getOffsetX();\n        let offsetY = this.renderer.getOffsetY();\n\n        let canvasPoint = this.translateMouseToCanvasCoordinates(\n            event.offsetX,\n            event.offsetY\n        );\n        // console.log(\"x: \" + x + \", y: \" + y);\n        \n        if (event.deltaY < 0) {\n            zoom += 0.1 * zoom;\n        } else {\n            zoom -= 0.1 * zoom;\n        }\n        zoom = Math.max(0.1, Math.min(zoom, 8.0));\n\n        let xDiff = canvasPoint.x - -offsetX;\n        let yDiff = canvasPoint.y - -offsetY;\n\n        // offsetX = canvasPoint.x - xDiff * (zoom / originalZoom);\n        // offsetY = canvasPoint.y - yDiff * (zoom / originalZoom);\n        offsetX -= xDiff * (zoom / originalZoom) - xDiff;\n        offsetY -= yDiff * (zoom / originalZoom) - yDiff;\n\n        this.renderer.updateZoomAndOffset(zoom, offsetX, offsetY);\n    }\n\n    onPan(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        let movementX = event.movementX;\n        let movementY = event.movementY;\n        // translate offset to canvas coordinates\n        let rect = (\n            event.target as HTMLCanvasElement\n        ).getBoundingClientRect();\n        movementX = (movementX / rect.width) * 512;\n        movementY = (movementY / rect.height) * 512;\n\n        let zoom = this.renderer.getZoom();\n        let offsetX = this.renderer.getOffsetX();\n        let offsetY = this.renderer.getOffsetY();\n\n        offsetX += movementX / zoom;\n        offsetY += movementY / zoom;\n\n        this.renderer.updateZoomAndOffset(zoom, offsetX, offsetY);\n    }\n\n    onTouchStart(event: React.TouchEvent<HTMLCanvasElement>) {\n        if (event.touches.length === 2) {\n            this.startTouches = event.touches;\n            this.startZoom = this.renderer.getZoom();\n            this.startOffsetX = this.renderer.getOffsetX();\n            this.startOffsetY = this.renderer.getOffsetY();\n        }\n    }\n\n    onTouchMove(event: React.TouchEvent<HTMLCanvasElement>) {\n        if (this.startTouches) {\n            const canvasRect = this.renderer.getCanvas().getBoundingClientRect();\n            const startTouch1 = this.startTouches[0];\n            const startTouch2 = this.startTouches[1];\n            const touch1 = event.touches[0];\n            const touch2 = event.touches[1];\n\n            const startDistance = Math.sqrt(\n                Math.pow(startTouch1.clientX - startTouch2.clientX, 2) +\n                Math.pow(startTouch1.clientY - startTouch2.clientY, 2)\n            );\n            const distance = Math.sqrt(\n                Math.pow(touch1.clientX - touch2.clientX, 2) +\n                Math.pow(touch1.clientY - touch2.clientY, 2)\n            );\n            const zoom = this.startZoom * (distance / startDistance);\n\n            const startCenterX = (startTouch1.clientX + startTouch2.clientX) / 2;\n            const startCenterY = (startTouch1.clientY + startTouch2.clientY) / 2;\n            const centerX = (touch1.clientX + touch2.clientX) / 2;\n            const centerY = (touch1.clientY + touch2.clientY) / 2;\n\n            const startCanvasPoint = this.translateMouseToCanvasCoordinates(\n                startCenterX - canvasRect.left,\n                startCenterY - canvasRect.top\n            );\n            const canvasPoint = this.translateMouseToCanvasCoordinates(\n                centerX - canvasRect.left,\n                centerY - canvasRect.top\n            );\n\n            let offsetX = this.startOffsetX;\n            let offsetY = this.startOffsetY;\n\n            let xDiff = canvasPoint.x - startCanvasPoint.x;\n            let yDiff = canvasPoint.y - startCanvasPoint.y;\n\n            let xDiff2 = canvasPoint.x - -this.renderer.getOffsetX();\n            let yDiff2 = canvasPoint.y - -this.renderer.getOffsetY();\n\n            offsetX -= xDiff2 * (zoom / this.startZoom) - xDiff2 - (xDiff * (distance / startDistance));\n            offsetY -= yDiff2 * (zoom / this.startZoom) - yDiff2 - (yDiff * (distance / startDistance));\n\n            this.renderer.updateZoomAndOffset(zoom, offsetX, offsetY);\n        }\n    }\n\n    onTouchEnd(event: React.TouchEvent<HTMLCanvasElement>) {\n        this.startTouches = null;\n    }\n\n\n    translateMouseToCanvasCoordinates(mouseX: number, mouseY: number, zoom?: number, offsetX?: number, offsetY?: number) {\n        let x = mouseX;\n        let y = mouseY;\n        // adjust for zoom\n        zoom = zoom || this.renderer.getZoom();\n        offsetX = offsetX || this.renderer.getOffsetX();\n        offsetY = offsetY || this.renderer.getOffsetY();\n        x = x / zoom;\n        y = y / zoom;\n\n        // translate offset to canvas coordinates\n        let rect = this.renderer.getCanvas().getBoundingClientRect();\n\n        // x = (x / rect.width) * this.renderer.getWidth();\n        // y = (y / rect.height) * this.renderer.getHeight();\n\n        x = (x / rect.width) * 512;\n        y = (y / rect.height) * 512;\n\n        x = Math.round(x - offsetX);\n        y = Math.round(y - offsetY);\n\n        return { x: x, y: y };\n    }\n\n    translateCanvasToMouseCoordinates(x: number, y: number, zoom?: number, offsetX?: number, offsetY?: number) {\n        zoom = zoom || this.renderer.getZoom();\n        offsetX = offsetX || this.renderer.getOffsetX();\n        offsetY = offsetY || this.renderer.getOffsetY();\n        x = x + offsetX;\n        y = y + offsetY;\n        x = x * zoom;\n        y = y * zoom;\n\n        // translate offset to canvas coordinates\n        let rect = this.renderer.getCanvas().getBoundingClientRect();\n        x = Math.round((x / this.renderer.getWidth()) * rect.width);\n        y = Math.round((y / this.renderer.getHeight()) * rect.height);\n\n        return { x: x, y: y };\n    }\n}","import React from \"react\";\nimport { Renderer } from \"./renderer\";\nimport { ZoomHelper } from \"./zoomHelper\";\n\nexport interface Tool {\n    name: string;\n    getArgs(): any;\n    updateArgs(args: any): void;\n    onMouseDown(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>): void;\n    onMouseMove(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>): void;\n    onMouseUp(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>): void;\n    onMouseLeave(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>): void;\n\n    onTouchStart(event: React.TouchEvent<HTMLCanvasElement>): void;\n    onTouchMove(event: React.TouchEvent<HTMLCanvasElement>): void;\n    onTouchEnd(event: React.TouchEvent<HTMLCanvasElement>): void;\n\n    onKeyDown(event: KeyboardEvent): void;\n    onKeyUp(event: KeyboardEvent): void;\n    onWheel(event: WheelEvent): void;\n    destroy(): boolean;\n    onShowSelectionControls(listener: (show: boolean) => void): void;\n    select(direction: \"left\" | \"right\"): void;\n    onSaveImage(listener: (encodedImage: string) => void): void;\n}\n\nexport class BaseTool implements Tool {\n    saveListener?: (encodedImage: string, args?: any) => void = () => {};\n\n    private touchHandle: number | undefined;\n\n    readonly zoomHelper: ZoomHelper;\n\n    private _pinchZooming = false;\n    private _panning = false;\n\n    constructor(readonly renderer: Renderer, readonly name: string) {\n        this.zoomHelper = new ZoomHelper(renderer);\n    }\n\n    getArgs(): any {\n        return JSON.parse(\n            localStorage.getItem(`tool_args_${this.name}`) || \"{}\"\n        );\n    }\n    updateArgs(args: any) {\n        localStorage.setItem(`tool_args_${this.name}`, JSON.stringify(args));\n    }\n    onMouseDown(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        if (event.button === 1) {\n            this._panning = true;\n        }\n    }\n    onMouseMove(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        if (this._panning) {\n            this.zoomHelper.onPan(event);\n        }\n        let { x, y } = this.zoomHelper.translateMouseToCanvasCoordinates(\n            event.nativeEvent.offsetX,\n            event.nativeEvent.offsetY\n        );\n        this._updateCursor(x, y);\n    }\n\n    private _updateCursor(x: number, y: number) {\n        this.renderer.setCursor({\n            color: \"white\",\n            radius: 10,\n            type: \"crosshairs\",\n            x,\n            y,\n        });\n    }\n\n    onMouseUp(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        if (this._panning) {\n            this._panning = false;\n        }\n    }\n    onMouseLeave(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {}\n\n    onTouchStart(event: React.TouchEvent<HTMLCanvasElement>) {\n        if (this.touchHandle) {\n            window.clearTimeout(this.touchHandle);\n        }\n        const touches: React.Touch[] = [];\n        // make a deep copy so that the values live past the delay\n        for (let i = 0; i < event.touches.length; i++) {\n            const touch = event.touches[i];\n            touches.push({\n                identifier: touch.identifier,\n                clientX: touch.clientX,\n                clientY: touch.clientY,\n                pageX: touch.pageX,\n                pageY: touch.pageY,\n                screenX: touch.screenX,\n                screenY: touch.screenY,\n                target: null,\n            } as any);\n        }\n        event = {\n            touches,\n        } as any;\n        this.touchHandle = window.setTimeout(() => {\n            this.touchHandle = undefined;\n            if (event.touches.length === 2) {\n                this._pinchZooming = true;\n                this.zoomHelper.onTouchStart(event);\n            } else {\n                const rect = this.renderer.getCanvas().getBoundingClientRect();\n                const touch = event.touches[0];\n                if (touch) {\n                    this.onMouseDown({\n                        type: \"touch\",\n                        button: 0,\n                        nativeEvent: {\n                            offsetX: touch.clientX - rect.left,\n                            offsetY: touch.clientY - rect.top,\n                        },\n                    } as any);\n                }\n            }\n        }, 200);\n    }\n    onTouchMove(event: React.TouchEvent<HTMLCanvasElement>) {\n        if (event.touches.length === 2) {\n            this.zoomHelper.onTouchMove(event);\n        } else {\n            const rect = this.renderer.getCanvas().getBoundingClientRect();\n            const touch = event.touches[0];\n            if (touch) {\n                this.onMouseMove({\n                    type: \"touch\",\n                    button: 0,\n                    nativeEvent: {\n                        offsetX: touch.clientX - rect.left,\n                        offsetY: touch.clientY - rect.top,\n                    },\n                } as any);\n            }\n        }\n    }\n    onTouchEnd(event: React.TouchEvent<HTMLCanvasElement>) {\n        if (this._pinchZooming) {\n            this._pinchZooming = false;\n            this.zoomHelper.onTouchEnd(event);\n        } else {\n            this.onMouseUp({\n                button: 0,\n                type: \"touch\",\n            } as any);\n        }\n    }\n\n    onKeyDown(event: KeyboardEvent) {}\n    onKeyUp(event: KeyboardEvent) {}\n    onWheel(event: WheelEvent) {\n        this.zoomHelper.onWheel(event);\n    }\n    destroy(): boolean {\n        return true;\n    }\n    onShowSelectionControls(listener: (show: boolean) => void) {}\n    select(direction: \"left\" | \"right\") {}\n    onSaveImage(listener: (encodedImage: string) => void) {\n        this.saveListener = listener;\n    }\n}\n","import moment from \"moment\";\n\nimport { Image } from \"../client\";\n\nexport interface LocalImage extends Image {\n    imageData?: string;\n}\n\n/**\n * This class uses indexedDB to store images locally.\n */\nexport class LocalImagesStore {\n    private db: IDBDatabase | null = null;\n\n    init(): Promise<void> {\n        return new Promise((resolve, reject) => {\n            const request = indexedDB.open(\"aibrush\", 4);\n            request.onupgradeneeded = (evt) => {\n                const db = request.result;\n                // create object store if it doesn't exist\n                // const imagesStore = db.createObjectStore(\"images\", { keyPath: \"id\" });\n                let imagesStore: IDBObjectStore;\n                if (!db.objectStoreNames.contains(\"images\")) {\n                    imagesStore = db.createObjectStore(\"images\", {\n                        keyPath: \"id\",\n                    });\n                } else {\n                    imagesStore = request.transaction?.objectStore(\n                        \"images\"\n                    ) as IDBObjectStore;\n                }\n                imagesStore.createIndex(\"updated_at\", \"updated_at\", {\n                    unique: false,\n                });\n                imagesStore.createIndex(\"deleted_at\", \"deleted_at\", {\n                    unique: false,\n                });\n                console.log(\"Local images store updated\");\n            };\n            request.onsuccess = (_) => {\n                this.db = request.result;\n                console.log(\"Local images store initialized\");\n                resolve();\n            };\n            request.onerror = (evt) => {\n                console.error(\"error opening indexeddb\", evt);\n                reject(evt);\n            };\n        });\n    }\n\n    // migrate old images to new format\n    private hydrateImage(image: LocalImage): LocalImage {\n        if (!image.params) {\n            const legacyImage = image as any;\n            image.params = {\n                prompt: legacyImage.phrases.join(\", \"),\n                negative_prompt: legacyImage.negative_phrases.join(\", \"),\n                width: legacyImage.width,\n                height: legacyImage.height,\n                denoising_strength: legacyImage.stable_diffusion_strength,\n                steps: legacyImage.iterations,\n            }\n        }\n        return image;\n    }\n\n    async getImage(id: string): Promise<LocalImage | null> {\n        if (!this.db) {\n            throw new Error(\"not initialized\");\n        }\n        const transaction = this.db.transaction([\"images\"]);\n        const store = transaction.objectStore(\"images\");\n        const request = store.get(id);\n        return new Promise((resolve, reject) => {\n            request.onsuccess = (evt) => {\n                resolve(this.hydrateImage(request.result));\n            };\n            request.onerror = (evt) => {\n                console.error(\"error getting image\", evt);\n                reject(evt);\n            };\n        });\n    }\n\n    async saveImage(image: LocalImage): Promise<void> {\n        if (!this.db) {\n            throw new Error(\"not initialized\");\n        }\n        await this.cleanupDeletedImages();\n        const transaction = this.db.transaction([\"images\"], \"readwrite\");\n        const store = transaction.objectStore(\"images\");\n        const request = store.put({\n            ...image,\n            updated_at: moment().valueOf(),\n        });\n        return new Promise((resolve, reject) => {\n            request.onsuccess = (evt) => {\n                resolve();\n            };\n            request.onerror = (evt) => {\n                console.error(\"error saving image\", evt);\n                reject(evt);\n            };\n        });\n    }\n\n    async hardDeleteImage(id: string): Promise<void> {\n        if (!this.db) {\n            throw new Error(\"not initialized\");\n        }\n        const transaction = this.db.transaction([\"images\"], \"readwrite\");\n        const store = transaction.objectStore(\"images\");\n        const request = store.delete(id);\n        return new Promise((resolve, reject) => {\n            request.onsuccess = (evt) => {\n                console.log(`image ${id} permanently deleted`);\n                resolve();\n            };\n            request.onerror = (evt) => {\n                console.error(\"error deleting image\", evt);\n                reject(evt);\n            };\n        });\n    }\n\n    async deleteImage(id: string): Promise<void> {\n        if (!this.db) {\n            throw new Error(\"not initialized\");\n        }\n        // fetch the image first. If it has a deletedAt timestamp already, or if it's not\n        // in \"completed\" state, hard delete it. Otherwise, set the deletedAt timestamp.\n        const image = await this.getImage(id);\n        if (!image) {\n            console.error(\"image not found\", id);\n            return;\n        }\n        if (image.deleted_at || image.status !== \"completed\") {\n            return this.hardDeleteImage(id);\n        }\n        const transaction = this.db.transaction([\"images\"], \"readwrite\");\n        const store = transaction.objectStore(\"images\");\n        const request = store.put({\n            ...image,\n            deleted_at: moment().valueOf(),\n        });\n        return new Promise((resolve, reject) => {\n            request.onsuccess = (evt) => {\n                resolve();\n            };\n            request.onerror = (evt) => {\n                console.error(\"error deleting image\", evt);\n                reject(evt);\n            };\n        });\n    }\n\n    async listImages(\n        updated_at: number,\n        direction: IDBCursorDirection,\n        count: number,\n        search: string\n    ): Promise<LocalImage[]> {\n        // use updated_at index\n        if (!this.db) {\n            throw new Error(\"not initialized\");\n        }\n        const transaction = this.db.transaction([\"images\"]);\n        const store = transaction.objectStore(\"images\");\n        const index = store.index(\"updated_at\");\n        const range =\n            direction == \"next\"\n                ? IDBKeyRange.lowerBound(updated_at)\n                : IDBKeyRange.upperBound(updated_at);\n        const request = index.openCursor(range, direction);\n        return new Promise((resolve, reject) => {\n            const images: LocalImage[] = [];\n            request.onsuccess = (evt) => {\n                const cursor = request.result;\n                if (cursor) {\n                    const image: LocalImage = this.hydrateImage(cursor.value);\n                    const prompt = (image.params.prompt || \"\").toLowerCase();\n                    if (\n                        !image.deleted_at &&\n                        (!search || prompt.includes(search.toLowerCase()))\n                    ) {\n                        images.push(image);\n                    }\n                    if (images.length < count) {\n                        cursor.continue();\n                    } else {\n                        resolve(images);\n                    }\n                } else {\n                    resolve(images);\n                }\n            };\n            request.onerror = (evt) => {\n                console.error(\"error listing images\", evt);\n                reject(evt);\n            };\n        });\n    }\n\n    async clearImages(): Promise<void> {\n        // clear from both indexes\n        if (!this.db) {\n            throw new Error(\"not initialized\");\n        }\n        const transaction = this.db.transaction([\"images\"], \"readwrite\");\n        const imagesStore = transaction.objectStore(\"images\");\n        const imagesRequest = imagesStore.clear();\n        return new Promise((resolve, reject) => {\n            imagesRequest.onsuccess = (evt) => {\n                resolve();\n            };\n            imagesRequest.onerror = (evt) => {\n                console.error(\"error clearing images\", evt);\n                reject(evt);\n            };\n        });\n    }\n\n    async getDeletedImages(olderThan?: number): Promise<LocalImage[]> {\n        if (!this.db) {\n            throw new Error(\"not initialized\");\n        }\n        // refactor to use deleted_at index\n        const transaction = this.db.transaction([\"images\"]);\n        const store = transaction.objectStore(\"images\");\n        const index = store.index(\"deleted_at\");\n        // const request = index.openCursor();\n        // get cursor for all deleted_at values\n        const request = index.openCursor(\n            olderThan\n                ? IDBKeyRange.upperBound(olderThan)\n                : IDBKeyRange.lowerBound(1),\n            olderThan ? \"prev\" : \"next\"\n        );\n        return new Promise((resolve, reject) => {\n            const images: LocalImage[] = [];\n            request.onsuccess = (evt) => {\n                const cursor = request.result;\n                if (cursor) {\n                    const image: LocalImage = cursor.value;\n                    if (images.length < 50 && image.deleted_at) {\n                        images.push(cursor.value);\n                    }\n                    cursor.continue();\n                } else {\n                    resolve(images);\n                }\n            };\n            request.onerror = (evt) => {\n                console.error(\"error listing images\", evt);\n                reject(evt);\n            };\n        });\n    }\n\n    async clearDeletedImages(): Promise<void> {\n        if (!this.db) {\n            throw new Error(\"not initialized\");\n        }\n        let deletedImages = await this.getDeletedImages();\n        while (deletedImages.length > 0) {\n            // hard delete all deleted images\n            const promises = deletedImages.map((image) => {\n                return this.hardDeleteImage(image.id);\n            });\n            await Promise.all(promises);\n            deletedImages = await this.getDeletedImages();\n        }\n    }\n\n    async cleanupDeletedImages(): Promise<void> {\n        // delete images that are more than 1 day old\n        let deletedImages = await this.getDeletedImages(\n            moment().subtract(1, \"hours\").valueOf()\n        );\n        while (deletedImages.length > 0) {\n            // hard delete all deleted images\n            const promises = deletedImages.map((image) => {\n                return this.hardDeleteImage(image.id);\n            });\n            await Promise.all(promises);\n            deletedImages = await this.getDeletedImages(\n                moment().subtract(1, \"hours\").valueOf()\n            );\n        }\n    }\n}\n","// Login react component with hooks\nimport React, { useState, FC } from \"react\";\nimport * as axios from \"axios\";\nimport qs from \"qs\";\nimport { AIBrushApi, LoginResult } from \"../client/api\";\n\nconsole.log(process.env)\nconst DISCORD_CLIENT_ID = \"1043951225944678490\";\n\ninterface LoginProps {\n    client: AIBrushApi;\n    onLogin: (loginResult: LoginResult) => void;\n}\n\nexport const Login: FC<LoginProps> = (props) => {\n    // login form accepts email only\n    const [email, setEmail] = useState(\"\");\n    const [emailSubmitted, setEmailSubmitted] = useState(false);\n    const [code, setCode] = useState(\"\");\n    const [err, setErr] = useState(\"\");\n\n    // check query string for invite_code\n    const query = window.location.search;\n    const queryParams = qs.parse(query.substring(1));\n    const inviteCode = queryParams[\"invite_code\"];\n\n    const onLogin = async () => {\n        // clear error\n        setErr(\"\");\n        // validate valid email\n        if (!email.match(/^[^@]+@[^@]+\\.[^@]+$/)) {\n            setErr(\"Invalid email address\");\n            return;\n        }\n\n        try {\n            await props.client.login({\n                email: email,\n                invite_code: inviteCode as string,\n            });\n            setEmailSubmitted(true);\n        } catch (err) {\n            console.error(err);\n            setErr(\"Could not login\");\n        }\n    };\n\n    const discordLink = () => {\n        // localhost url:\n        // https://discord.com/api/oauth2/authorize?client_id=1043951225944678490&redirect_uri=http%3A%2F%2Flocalhost%3A3001%2Fdiscord-login&response_type=code&scope=identify%20email\n        // prod url:\n        // https://discord.com/api/oauth2/authorize?client_id=1043951225944678490&redirect_uri=https%3A%2F%2Fwww.aibrush.art%2Fdiscord-login&response_type=code&scope=identify%20email\n        const host = window.location.host;\n        const protocol = window.location.protocol;\n        const redirectUri = `${protocol}//${host}/discord-login`;\n        const url = `https://discord.com/api/oauth2/authorize?client_id=${DISCORD_CLIENT_ID}&redirect_uri=${redirectUri}&response_type=code&scope=identify%20email`;\n        return url;\n    };\n\n    const onVerify = async () => {\n        // clear error\n        setErr(\"\");\n        // attempt to verify code\n        try {\n            const result = await props.client.verify({\n                email,\n                code,\n            });\n            props.onLogin(result.data);\n        } catch (err) {\n            console.error(err);\n            setErr(\"Failed to verify code\");\n        }\n    };\n\n    // bootstrap login form\n    return (\n        <>\n            <div\n                className=\"row\"\n                style={{\n                    height: \"100vh\",\n                    marginLeft: \"0px\",\n                    marginRight: \"0px\",\n                }}\n            >\n                <div className=\"col-md-6 login-splash\">\n                    {/* <div className=\"center-cropped\" style={{backgroundImage: \"url(/images/scifi-dreamland.png)\"}}></div> */}\n                    <img\n                        className=\"center-cropped\"\n                        src=\"/images/scifi-dreamland.png\"\n                    />\n                </div>\n                <div className=\"col-md-6\">\n                    <div\n                        style={{\n                            fontWeight: 500,\n                            fontSize: \"48px\",\n                            marginTop: \"200px\",\n                        }}\n                    >\n                        AiBrush\n                    </div>\n\n                    <div\n                        style={{\n                            marginLeft: \"10%\",\n                            marginRight: \"10%\",\n                            marginTop: \"88px\",\n                            marginBottom: \"24px\",\n                        }}\n                    >\n                        Login With Email\n                    </div>\n                    {/* Display error if one is set */}\n                    {/* Use <p class=\"text-danger\" */}\n                    {err && <p className=\"text-danger\">{err}</p>}\n                    {err && (\n                        <p className=\"text-info\">\n                            If you don't have an account yet, request one by\n                            sending an email to{\" \"}\n                            <a href=\"mailto:admin@aibrush.art\">\n                                admin@aibrush.art\n                            </a>\n                        </p>\n                    )}\n                    <div\n                        style={{\n                            marginLeft: \"10%\",\n                            marginRight: \"10%\",\n                            marginTop: \"24px\",\n                            textAlign: \"left\",\n                        }}\n                    >\n                        {/* If email submitted, show verify code form*/}\n                        {emailSubmitted && (\n                            <>\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"verifyCode\">\n                                        Verify Code\n                                    </label>\n                                    <input\n                                        type=\"text\"\n                                        className=\"form-control\"\n                                        id=\"verifyCode\"\n                                        placeholder=\"Verification Code\"\n                                        value={code}\n                                        onChange={(e) =>\n                                            setCode(e.target.value)\n                                        }\n                                    />\n                                </div>\n                                {/* Cancel verification and go back to email */}\n                                <button\n                                    className=\"btn btn-secondary\"\n                                    onClick={() => setEmailSubmitted(false)}\n                                >\n                                    Cancel\n                                </button>\n                                &nbsp;\n                                {/* Verify code */}\n                                <button\n                                    type=\"button\"\n                                    className=\"btn btn-primary\"\n                                    onClick={(e) => {\n                                        e.preventDefault();\n                                        onVerify();\n                                    }}\n                                >\n                                    Verify\n                                </button>\n                            </>\n                        )}\n                        {/* Else, show login form */}\n                        {!emailSubmitted && (\n                            <>\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"email\">Email address</label>\n                                    <input\n                                        type=\"email\"\n                                        className=\"form-control\"\n                                        id=\"email\"\n                                        aria-describedby=\"emailHelp\"\n                                        placeholder=\"Enter email\"\n                                        value={email}\n                                        onChange={(e) =>\n                                            setEmail(e.target.value.trim())\n                                        }\n                                    />\n                                </div>\n                                <button\n                                    type=\"button\"\n                                    className=\"btn btn-primary\"\n                                    style={{ float: \"right\" }}\n                                    onClick={(e) => {\n                                        e.preventDefault();\n                                        onLogin();\n                                    }}\n                                >\n                                    Login\n                                </button>\n                            </>\n                        )}\n                    </div>\n                    <div\n                        style={{\n                            marginLeft: \"10%\",\n                            marginRight: \"10%\",\n                            marginTop: \"88px\",\n                            marginBottom: \"24px\",\n                        }}\n                    >\n                        <hr/>\n                        OR\n                    </div>\n                    <div\n                        style={{\n                            marginLeft: \"10%\",\n                            marginRight: \"10%\",\n                            marginTop: \"24px\",\n                        }}\n                    >\n                        <a href={discordLink()} className=\"btn btn-primary\">\n                            <i className=\"fab fa-discord\"></i> Login With Discord\n                        </a>\n                    </div>\n                </div>\n            </div>\n        </>\n    );\n};\n","// Given a set of credentials, this component will refresh them\n// every 5 minutes and invoke the onCredentialsRefreshed callback\n\nimport React, { useEffect, FC } from \"react\"\nimport { LoginResult, AIBrushApi } from \"../client/api\";\n\ninterface TokenRefresherProps {\n    onCredentialsRefreshed: (loginResult: LoginResult) => void;\n    onCredentialsExpired: () => void;\n    api: AIBrushApi;\n    credentials: LoginResult;\n}\n\nexport const TokenRefresher : FC<TokenRefresherProps> = ({ onCredentialsRefreshed, onCredentialsExpired, api, credentials }) => {\n    useEffect(() => {\n        const interval = setInterval(() => {\n            if (credentials && credentials.refreshToken) {\n                api.refresh({refreshToken: credentials.refreshToken}).then(loginResult => {\n                    onCredentialsRefreshed(loginResult.data);\n                }).catch(() => {\n                    onCredentialsExpired();\n                });\n            }\n\n        }, 5 * 60 * 1000);\n        return () => {\n            clearInterval(interval);\n        };\n    }, [credentials, api, onCredentialsRefreshed]);\n    return <div></div>;\n}","import React, { FC, useEffect, useState } from 'react';\nimport { AIBrushApi } from \"../client/api\";\n\ninterface HealthcheckerProps {\n    api: AIBrushApi;\n}\n\nexport const Healthchecker: FC<HealthcheckerProps> = ({ api }) => {\n    // automatically check health every 5 seconds\n    const [healthCheck, setHealthCheck] = useState(true);\n    \n    useEffect(() => {\n        const interval = setInterval(() => {\n            api.healthcheck().then(() => setHealthCheck(true)).catch(() => setHealthCheck(false));\n        }, 5000);\n\n        return () => clearInterval(interval);\n    }, [api]);\n\n    // only display bootstrap danger alert if healthcheck failed\n    // \"service is unavailable\"\n    return (\n        <div className=\"alert alert-danger\" role=\"alert\" style={{ display: healthCheck ? 'none' : 'block' }}>\n            <strong>Service is unavailable</strong>\n        </div>\n    );\n}\n\n","import moment from \"moment\";\nimport React, { FC, useState, useEffect } from \"react\";\nimport { Modal } from \"react-bootstrap\";\nimport { AIBrushApi, Boost } from \"../../client\";\n\ninterface Props {\n    api: AIBrushApi;\n}\n\nexport const BoostList: FC<Props> = ({ api }) => {\n    const [boosts, setBoosts] = useState<Boost[]>([]);\n    const [email, setEmail] = useState<string>(\"\");\n    const [amount, setAmount] = useState<number>(0);\n    const [level, setLevel] = useState<number>(1);\n\n    const [showDeposit, setShowDeposit] = useState<boolean>(false);\n\n    function refresh() {\n        api.listBoosts().then((resp) => {\n            const boosts = resp.data.boosts || [];\n            setBoosts(boosts);\n        });\n    }\n\n    useEffect(() => {\n        refresh();\n    }, [api]);\n\n    const onDepositBoost = async () => {\n        await api.depositBoost(email, {\n            amount: amount * level * 1000 * 60 * 60,\n            level: level,\n        });\n        refresh();\n        setShowDeposit(false);\n    };\n\n    return (\n        <>\n            <h1>Active Boosts</h1>\n            <div className=\"row\">\n                <button\n                    className=\"btn btn-primary\"\n                    onClick={() => setShowDeposit(true)}\n                >\n                    <i className=\"fas fa-plus\" />\n                    &nbsp; Deposit Boost\n                </button>\n                &nbsp;\n                <button className=\"btn btn-primary\" onClick={refresh}>\n                    <i className=\"fas fa-sync\" />\n                    &nbsp; Refresh\n                </button>\n            </div>\n            <hr />\n            <div className=\"row\" style={{ marginTop: \"16px\" }}>\n                <table>\n                    <thead>\n                        <tr>\n                            <th>User</th>\n                            <th>Level</th>\n                            <th>Expires</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {boosts.map((boost) => (\n                            <tr key={boost.user_id}>\n                                <td>{boost.user_id}</td>\n                                <td>{boost.level}</td>\n                                <td>\n                                    {!boost.is_active && moment().add(boost.balance, \"milliseconds\").fromNow()}\n                                    {boost.is_active && moment(boost.activated_at + boost.balance).fromNow()}\n                                </td>\n                            </tr>\n                        ))}\n                    </tbody>\n                </table>\n            </div>\n            {showDeposit && (\n                <Modal show={showDeposit} onHide={() => setShowDeposit(false)}>\n                    <Modal.Header closeButton>\n                        <Modal.Title>Deposit Boost</Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body>\n                        {/* deposit controls */}\n                        <div className=\"form-group\">\n                            <label htmlFor=\"email\">Email</label>\n                            <input\n                                type=\"text\"\n                                className=\"form-control\"\n                                id=\"email\"\n                                value={email}\n                                onChange={(e) => setEmail(e.target.value)}\n                            />\n                        </div>\n                        <div className=\"form-group\">\n                            <label htmlFor=\"amount\">Amount</label>\n                            <input\n                                type=\"number\"\n                                className=\"form-control\"\n                                id=\"amount\"\n                                value={amount}\n                                onChange={(e) =>\n                                    setAmount(Number(e.target.value))\n                                }\n                                min={0.1}\n                                max={10}\n                                step={0.1}\n                            />\n                        </div>\n                        {/* level is a dropdown. 1=quick, 2=fast, 4=pro, 8=super */}\n                        <div className=\"form-group\">\n                            <label htmlFor=\"level\">Level</label>\n                            <select\n                                className=\"form-control\"\n                                id=\"level\"\n                                value={level}\n                                onChange={(e) =>\n                                    setLevel(parseInt(e.target.value))\n                                }\n                            >\n                                <option value={1}>Quick</option>\n                                <option value={2}>Fast</option>\n                                <option value={4}>Pro</option>\n                                <option value={8}>Super</option>\n                            </select>\n                        </div>\n                    </Modal.Body>\n                    <Modal.Footer>\n                        {/* cancel button */}\n                        <button\n                            type=\"button\"\n                            className=\"btn btn-secondary\"\n                            onClick={() => setShowDeposit(false)}\n                        >\n                            Cancel\n                        </button>\n                        &nbsp;\n                        <button\n                            type=\"button\"\n                            className=\"btn btn-primary\"\n                            onClick={onDepositBoost}\n                        >\n                            Deposit\n                        </button>\n                    </Modal.Footer>\n                </Modal>\n            )}\n        </>\n    );\n};\n","import { FC, useEffect, useState } from \"react\";\nimport { AIBrushApi } from \"../../client/api\";\nimport { WorkerSettings, WorkerSettingsJson } from \"../../lib/globalSettings\";\n\ninterface Props {\n    api: AIBrushApi;\n}\n\n// global settings all have a \"settings_key\" and \"settings_json\" field. settings_json is any.\n\n// default \"workers\" setting:\n// {\n//     \"minimum_worker_allocations\": {\n//         \"stable_diffusion\": 0,\n//         \"stable_diffusion_inpainting\": 0,\n//         \"swinir\": 0,\n//     }\n// }\n\nexport const GlobalSettings: FC<Props> = ({ api }) => {\n    const [workerSettings, setWorkerSettings] = useState<WorkerSettingsJson>({\n        minimum_worker_allocations: {\n            stable_diffusion: 0,\n            stable_diffusion_inpainting: 0,\n            swinir: 0,\n        },\n    });\n    const [saving, setSaving] = useState<boolean>(false);\n\n    const loadWorkerSettings = async () => {\n        const settings = await api.getGlobalSettings(\"workers\");\n        setWorkerSettings(settings.data.settings_json as any);\n    };\n\n    const saveWorkerSettings = async () => {\n        setSaving(true);\n        try {\n            await api.updateGlobalSettings(\"workers\", {\n                settings_json: workerSettings,\n            });\n        } finally {\n            setSaving(false);\n        }\n    };\n\n    useEffect(() => {\n        loadWorkerSettings();\n    }, []);\n\n    return (\n        <div style={{paddingBottom: \"48px\"}}>\n            {/* Header: Create new image */}\n            <div className=\"row\">\n                <div className=\"col-12\">\n                    <h1>Global Settings</h1>\n                </div>\n            </div>\n            {/* 50px vertical spacer */}\n            <div className=\"row\">\n                <div className=\"col-12\">\n                    <div className=\"spacer\" />\n                </div>\n            </div>\n            {/* slider from 0 to 10 for each model */}\n            <div className=\"row\">\n                <div className=\"col-12\">\n                    <label htmlFor=\"stable_diffusion\">\n                        stable_diffusion: {workerSettings.minimum_worker_allocations.stable_diffusion}\n                    </label>\n                    <input\n                        style={{marginLeft: \"16px\"}}\n                        type=\"range\"\n                        min={0}\n                        max={10}\n                        value={workerSettings.minimum_worker_allocations.stable_diffusion}\n                        className=\"form-range\"\n                        id=\"stable_diffusion\"\n                        onChange={(e) => {\n                            setWorkerSettings({\n                                ...workerSettings,\n                                minimum_worker_allocations: {\n                                    ...workerSettings.minimum_worker_allocations,\n                                    stable_diffusion: parseInt(e.target.value),\n                                },\n                            });\n                        }}\n                    />\n                </div>\n            </div>\n            <div className=\"row\">\n                <div className=\"col-12\">\n                    <label htmlFor=\"stable_diffusion_inpainting\">\n                        stable_diffusion_inpainting: {workerSettings.minimum_worker_allocations.stable_diffusion_inpainting}\n                    </label>\n                    <input\n                        style={{marginLeft: \"16px\"}}\n                        type=\"range\"\n                        min={0}\n                        max={10}\n                        value={workerSettings.minimum_worker_allocations.stable_diffusion_inpainting}\n                        className=\"form-range\"\n                        id=\"stable_diffusion_inpainting\"\n                        onChange={(e) => {\n                            setWorkerSettings({\n                                ...workerSettings,\n                                minimum_worker_allocations: {\n                                    ...workerSettings.minimum_worker_allocations,\n                                    stable_diffusion_inpainting: parseInt(e.target.value),\n                                },\n                            });\n                        }}\n                    />\n                </div>\n            </div>\n            <div className=\"row\">\n                <div className=\"col-12\">\n                    <label htmlFor=\"swinir\">\n                        swinir: {workerSettings.minimum_worker_allocations.swinir}\n                    </label>\n                    <input\n                        style={{marginLeft: \"16px\"}}\n                        type=\"range\"\n                        min={0}\n                        max={10}\n                        value={workerSettings.minimum_worker_allocations.swinir}\n                        className=\"form-range\"\n                        id=\"swinir\"\n                        onChange={(e) => {\n                            setWorkerSettings({\n                                ...workerSettings,\n                                minimum_worker_allocations: {\n                                    ...workerSettings.minimum_worker_allocations,\n                                    swinir: parseInt(e.target.value),\n                                },\n                            });\n                        }}\n                    />\n                </div>\n            </div>\n            \n            \n            {/* bottom row: save button */}\n            <div className=\"row\">\n                <div className=\"col-12\">\n                    <button className=\"btn btn-primary\" onClick={saveWorkerSettings} disabled={saving}>\n                        {saving ? <>\n                            <i className=\"fas fa-spinner fa-spin\" />\n                            &nbsp; Saving...\n                        </> : \"Save\"}\n                    </button>\n                </div>\n            </div>\n        </div>\n    );\n};","import React, { FC, useState, useEffect, useRef } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { AIBrushApi } from \"../../client/api\";\nimport { BoostList } from \"./BoostList\";\nimport { GlobalSettings } from \"./GlobalSettings\";\n\ninterface Props {\n    api: AIBrushApi;\n}\n\nexport const Admin: FC<Props> = ({ api }) => {\n    const [links, setLinks] = useState<string[]>([]);\n\n    const onGenerateLink = async () => {\n        const inviteCode = await api.createInviteCode();\n        setLinks([...links, `/?invite_code=${inviteCode.data.id}`]);\n    };\n\n    return (\n        <div style={{paddingBottom: \"48px\"}}>\n            {/* Header: Create new image */}\n            <div className=\"row\">\n                <div className=\"col-12\">\n                    <h1>Admin features</h1>\n                </div>\n            </div>\n            {/* 50px vertical spacer */}\n            <div className=\"row\">\n                <div className=\"col-12\">\n                    <div className=\"spacer\" />\n                </div>\n            </div>\n            {links.length > 0 && (\n                <div className=\"row\">\n                    <div className=\"col-12\">\n                        <p>Right click to copy invite links</p>\n                    </div>\n                </div>\n            )}\n            <div className=\"row\">\n                <div className=\"offset-lg-3 col-lg-6 col-sm-12\">\n                    {/* show a list of hyperlinks */}\n                    <div className=\"btn-group-vertical\">\n                        {links.map((link, i) => (\n                            <a key={i} href={link} className=\"btn btn-primary\">\n                                <i className=\"fas fa-link\" />\n                                &nbsp; Invite Link\n                            </a>\n                        ))}\n                    </div>\n                </div>\n            </div>\n            <div className=\"row\">\n                <div className=\"col-12\">\n                    <div className=\"spacer\" />\n                </div>\n            </div>\n            <div className=\"row\">\n                <div className=\"col-12\">\n                    {/* button to generate links */}\n                    <button\n                        className=\"btn btn-primary\"\n                        onClick={onGenerateLink}\n                    >\n                        Generate Link\n                    </button>\n                </div>\n            </div>\n            <hr />\n            <BoostList api={api} />\n            <hr />\n            <GlobalSettings api={api} />\n        </div>\n    );\n};\n","import React, { FC, useEffect, useState } from \"react\";\nimport { AIBrushApi, Image } from \"../client\";\nimport moment from \"moment\";\nimport { ImageThumbnail } from \"../components/ImageThumbnail\";\nimport { useHistory } from \"react-router-dom\";\nimport { BusyModal } from \"../components/BusyModal\";\n\ninterface Props {\n    api: AIBrushApi;\n    assetsUrl: string;\n}\n\nexport const DeletedImages: FC<Props> = ({ api, assetsUrl }) => {\n    const [images, setImages] = useState<Image[]>([]);\n    const [deleting, setDeleting] = useState(false);\n\n    const history = useHistory();\n\n    const loadImages = async () => {\n        const cursor = moment().add(-24, \"hours\").valueOf();\n        // TODO: special api call for deleted images?\n        const resp = await api.listImages(cursor, \"\", 100, \"asc\");\n        setImages(\n            (\n                resp.data.images?.filter((image) => !!image.deleted_at) || []\n            ).sort((a, b) => {\n                if (a.deleted_at && b.deleted_at) {\n                    return b.deleted_at - a.deleted_at;\n                }\n                return 0;\n            })\n        );\n    };\n\n    const onDeleteImage = async (image: Image) => {\n        setImages(images.filter((i) => i.id !== image.id));\n        await api.deleteImage(image.id);\n    };\n\n    const onDeleteAllImages = async () => {\n        setDeleting(true);\n        try {\n            await Promise.all(images.map((image) => api.deleteImage(image.id)));\n            setImages([]);\n        } finally {\n            setDeleting(false);\n        }\n    };\n\n    const onRestoreImage = async (image: Image) => {\n        setImages(images.filter((i) => i.id !== image.id));\n        await api.updateImage(image.id, { deleted_at: null });\n    };\n\n    useEffect(() => {\n        loadImages();\n    }, [api]);\n\n    return (\n        <div>\n            <div>\n                <div className=\"row\">\n                    <div className=\"col-12\">\n                        <h1 style={{ fontSize: \"40px\", textAlign: \"left\" }}>\n                            <i\n                                style={{ cursor: \"pointer\" }}\n                                onClick={() => history.goBack()}\n                                className=\"fas fa-chevron-left\"\n                            ></i>\n                            &nbsp; Deleted Images\n                        </h1>\n                        {/* float right \"delete all\" button */}\n                        <button\n                            className=\"btn btn-danger btn-sm image-popup-delete-button\"\n                            onClick={onDeleteAllImages}\n                            style={{\n                                float: \"right\",\n                                marginRight: \"8px\",\n                            }}\n                        >\n                            <i className=\"fa fa-trash\"></i>&nbsp;Delete All\n                        </button>\n                    </div>\n                </div>\n                <div className=\"row\" style={{ marginTop: \"32px\" }}>\n                    <div className=\"col-sm-2 offset-sm-2\">Image</div>\n                    <div className=\"col-sm-8\">Action</div>\n                </div>\n                {images.map((image) => (\n                    <div\n                        className=\"row\"\n                        style={{\n                            marginTop: \"16px\",\n                            borderBottom: \"1px solid #303030\",\n                        }}\n                        key={image.id}\n                    >\n                        <div className=\"col-sm-2 offset-sm-2\">\n                            <ImageThumbnail\n                                assetsUrl={assetsUrl}\n                                image={image}\n                                censorNSFW={true}\n                            />\n                        </div>\n                        <div\n                            className=\"col-sm-8\"\n                            style={{\n                                paddingTop: \"64px\",\n                                paddingBottom: \"64px\",\n                            }}\n                        >\n                            <button\n                                className=\"btn btn-danger btn-sm image-popup-delete-button\"\n                                onClick={() => onDeleteImage(image)}\n                                style={{\n                                    marginRight: \"8px\",\n                                }}\n                            >\n                                <i className=\"fa fa-trash\"></i>&nbsp;Delete\n                            </button>\n                            <button\n                                className=\"btn btn-primary btn-sm image-popup-restore-button\"\n                                onClick={() => onRestoreImage(image)}\n                            >\n                                <i className=\"fa fa-undo\"></i>&nbsp;Restore\n                            </button>\n                        </div>\n                    </div>\n                ))}\n            </div>\n            <BusyModal show={deleting} title=\"Deleting Images\">\n                Please wait while we delete all images...\n            </BusyModal>\n        </div>\n    );\n};\n","import React, { useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { AIBrushApi, LoginResult } from \"../client\";\n\ninterface LoginProps {\n    client: AIBrushApi;\n    onLogin: (loginResult: LoginResult) => void;\n}\n\nexport const DiscordLogin: React.FC<LoginProps> = ({client, onLogin}) => {\n    const history = useHistory();\n    const code = new URLSearchParams(window.location.search).get(\"code\");\n    \n    useEffect(() => {\n        if (code) {\n            console.log(\"logging in with code\", code);\n            client.discordLogin({code}).then((result) => {\n                console.log(\"login result\", result);\n                if (result.data.accessToken) {\n                    onLogin(result.data);\n                }\n                \n                history.push(\"/\");\n            });\n        } else {\n            history.push(\"/\");\n        }\n    }, [])\n\n    return null;\n}","import React, { FC, useEffect, useState } from \"react\";\nimport { AIBrushApi, Image } from \"../client\";\nimport moment from \"moment\";\nimport { ImageThumbnail } from \"../components/ImageThumbnail\";\nimport { useHistory } from \"react-router-dom\";\nimport { LocalImagesStore } from \"../lib/localImagesStore\";\nimport { BusyModal } from \"../components/BusyModal\";\n\ninterface Props {\n    localImages: LocalImagesStore;\n}\n\nexport const LocalDeletedImages: FC<Props> = ({ localImages }) => {\n    const [images, setImages] = useState<Image[]>([]);\n    const [deleting, setDeleting] = useState(false);\n\n    const history = useHistory();\n\n    const loadImages = async () => {\n        const deletedImages = await localImages.getDeletedImages();\n        setImages(deletedImages);\n    };\n\n    const onDeleteImage = async (image: Image) => {\n        setImages(images.filter((i) => i.id !== image.id));\n        await localImages.deleteImage(image.id);\n        if (images.length <= 5) {\n            loadImages();\n        }\n    };\n\n    const onDeleteAllImages = async () => {\n        setDeleting(true);\n        try {\n            await localImages.clearDeletedImages();\n            setImages([]);\n        } finally {\n            setDeleting(false);\n        }\n    };\n\n    const onRestoreImage = async (image: Image) => {\n        setImages(images.filter((i) => i.id !== image.id));\n        await localImages.saveImage({\n            ...image,\n            deleted_at: undefined,\n        });\n    };\n\n    useEffect(() => {\n        loadImages();\n    }, [localImages]);\n\n    return (\n        <div>\n            <div>\n                <div className=\"row\">\n                    <div className=\"col-12\">\n                        <h1 style={{ fontSize: \"40px\", textAlign: \"left\" }}>\n                            <i\n                                style={{ cursor: \"pointer\" }}\n                                onClick={() => history.goBack()}\n                                className=\"fas fa-chevron-left\"\n                            ></i>\n                            &nbsp; Deleted Images\n                        </h1>\n                        <button\n                            className=\"btn btn-danger btn-sm image-popup-delete-button\"\n                            onClick={onDeleteAllImages}\n                            style={{\n                                float: \"right\",\n                                marginRight: \"8px\",\n                            }}\n                        >\n                            <i className=\"fa fa-trash\"></i>&nbsp;Delete All\n                        </button>\n                    </div>\n                </div>\n                <div className=\"row\" style={{ marginTop: \"32px\" }}>\n                    <div className=\"col-sm-2 offset-sm-2\">Image</div>\n                    <div className=\"col-sm-8\">Action</div>\n                </div>\n                {images.map((image) => (\n                    <div\n                        className=\"row\"\n                        style={{\n                            marginTop: \"16px\",\n                            borderBottom: \"1px solid #303030\",\n                        }}\n                        key={image.id}\n                    >\n                        <div className=\"col-sm-2 offset-sm-2\">\n                            <ImageThumbnail\n                                assetsUrl={\"\"}\n                                image={image}\n                                censorNSFW={true}\n                            />\n                        </div>\n                        <div\n                            className=\"col-sm-8\"\n                            style={{\n                                paddingTop: \"64px\",\n                                paddingBottom: \"64px\",\n                            }}\n                        >\n                            <button\n                                className=\"btn btn-danger btn-sm image-popup-delete-button\"\n                                onClick={() => onDeleteImage(image)}\n                                style={{\n                                    marginRight: \"8px\",\n                                }}\n                            >\n                                <i className=\"fa fa-trash\"></i>&nbsp;Delete\n                            </button>\n                            <button\n                                className=\"btn btn-primary btn-sm image-popup-restore-button\"\n                                onClick={() => onRestoreImage(image)}\n                            >\n                                <i className=\"fa fa-undo\"></i>&nbsp;Restore\n                            </button>\n                        </div>\n                    </div>\n                ))}\n            </div>\n            <BusyModal show={deleting} title=\"Deleting Images\">\n                Please wait while we delete all images...\n            </BusyModal>\n        </div>\n    );\n};\n","// V2 page\nimport React, { FC, useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport Dropdown from \"react-bootstrap/Dropdown\";\nimport { useParams, useHistory, Link } from \"react-router-dom\";\nimport moment from \"moment\";\nimport ScrollToTop from \"react-scroll-to-top\";\nimport { AIBrushApi } from \"../client\";\nimport { CreateImageInput, Image, StatusEnum, Boost } from \"../client/api\";\nimport { ImageThumbnail } from \"../components/ImageThumbnail\";\nimport { ImagePrompt, defaultArgs } from \"../components/ImagePrompt\";\nimport { BoostWidget } from \"../components/BoostWidget\";\nimport {\n    createEncodedThumbnail,\n    encodedImageToBlob,\n    uploadBlob,\n} from \"../lib/imageutil\";\n\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport { ImagePopup } from \"../components/ImagePopup\";\nimport { BusyModal } from \"../components/BusyModal\";\nimport { PendingImagesThumbnail } from \"../components/PendingImagesThumbnail\";\nimport { PendingImages } from \"../components/PendingImages\";\nimport {\n    ApiSocket,\n    NOTIFICATION_BOOST_UPDATED,\n    NOTIFICATION_IMAGE_DELETED,\n    NOTIFICATION_IMAGE_UPDATED,\n} from \"../lib/apisocket\";\n\ninterface Props {\n    api: AIBrushApi;\n    apiSocket: ApiSocket;\n    assetsUrl: string;\n}\n\nexport const SavedImagesPage: FC<Props> = ({ api, apiSocket, assetsUrl }) => {\n    const [creating, setCreating] = useState(false);\n    const [selectedImage, setSelectedImage] = useState<Image | null>(null);\n    const [parentImage, setParentImage] = useState<Image | null>(null);\n\n    const [showPendingImages, setShowPendingImages] = useState(false);\n\n    const [images, setImages] = useState<Array<Image>>([]);\n    const [err, setErr] = useState<string | null>(null);\n    const [hasMore, setHasMore] = useState<boolean>(true);\n    const [search, setSearch] = useState<string>(\"\");\n    const [searchDebounce, setSearchDebounce] = useState<string>(\"\");\n\n    const [bulkDeleteSelecting, setBulkDeleteSelecting] = useState(false);\n    const [bulkDeleting, setBulkDeleting] = useState(false);\n    const [bulkDeleteIds, setBulkDeleteIds] = useState<{\n        [key: string]: boolean;\n    }>({});\n\n    const [boost, setBoost] = useState<Boost | null>(null);\n    const [censorNSFW, setCensorNSFW] = useState(true);\n\n    const { id } = useParams<{ id?: string }>();\n    const history = useHistory();\n\n    useEffect(() => {\n        let handle = setTimeout(() => {\n            setSearch(searchDebounce);\n        }, 500);\n        return () => {\n            clearTimeout(handle);\n        };\n    }, [searchDebounce]);\n\n    useEffect(() => {\n        if (id) {\n            // check if the image is already loaded\n            const image = images.find((image) => image.id === id);\n            if (image) {\n                setSelectedImage(image);\n            }\n            // refresh\n            api.getImage(id).then((image) => {\n                setSelectedImage(image.data);\n            });\n        } else {\n            setSelectedImage(null);\n        }\n    }, [id]);\n\n    const onSubmit = async (input: CreateImageInput) => {\n        setCreating(true);\n        setParentImage(null);\n        setErr(null);\n        window.scrollTo(0, 0);\n        try {\n            await api.createImage(input);\n        } catch (e: any) {\n            console.error(e);\n            setErr(\"Error creating image\");\n        } finally {\n            setCreating(false);\n        }\n    };\n\n    const onEditNewImage = async (input: CreateImageInput) => {\n        setCreating(true);\n        setParentImage(null);\n        setErr(null);\n        window.scrollTo(0, 0);\n        try {\n            const encodedImage = input.encoded_image!;\n            const encodedThumbnail = await createEncodedThumbnail(encodedImage);\n            const newImages = await api.createImage({\n                ...input,\n                encoded_image: undefined,\n            });\n            if (newImages.data.images) {\n                const image = newImages.data.images![0];\n                const uploadUrls = await api.getImageUploadUrls(image.id);\n                // convert base64 encoded image to binary to upload as image/png with axios\n                const blob = encodedImageToBlob(encodedImage);\n                const thumbnailBlob = encodedImageToBlob(encodedThumbnail);\n                const imagePromise = uploadBlob(\n                    uploadUrls.data.image_url!,\n                    blob\n                );\n                const thumbnailPromise = uploadBlob(\n                    uploadUrls.data.thumbnail_url!,\n                    thumbnailBlob\n                );\n                await Promise.all([imagePromise, thumbnailPromise]);\n\n                history.push(`/image-editor/${image.id}`);\n            }\n        } catch (e: any) {\n            console.error(e);\n            setErr(\"Error creating image\");\n        } finally {\n            setCreating(false);\n        }\n    };\n\n    const onNSFW = (image: Image, nsfw: boolean) => {\n        api.updateImage(image.id, { nsfw }).then((res) => {\n            setImages((images) => {\n                return images.map((i) => {\n                    if (i.id === image.id) {\n                        return res.data;\n                    }\n                    return i;\n                });\n            });\n            setSelectedImage(res.data);\n        });\n    };\n\n    useEffect(() => {\n        if (!api) {\n            return;\n        }\n        const loadImages = async () => {\n            console.log(\"Initial load images\");\n            // clear error\n            setErr(null);\n            setHasMore(true);\n            try {\n                const cursor = moment().add(1, \"minutes\").valueOf();\n                const resp = await api.listImages(cursor, search, 100, \"desc\");\n                if (resp.data.images) {\n                    console.log(\"Initial load images\", resp.data.images.length);\n                    setImages(\n                        resp.data.images\n                            .filter((image) => !image.deleted_at)\n                            .sort(sortImages)\n                    );\n                }\n                return 0;\n            } catch (err) {\n                setErr(\"Could not load images\");\n                console.error(err);\n            }\n        };\n        loadImages();\n    }, [api, search]);\n\n    useEffect(() => {\n        if (!api) {\n            return;\n        }\n\n        const pollImages = async (images: Array<Image>) => {\n            // clear error\n            setErr(null);\n            // set cursor to max updated_at from images\n            const cursor = images.reduce((max, image) => {\n                return Math.max(max, image.updated_at);\n            }, 0);\n\n            try {\n                const resp = await api.listImages(\n                    cursor + 1,\n                    search,\n                    100,\n                    \"asc\"\n                );\n                if (resp.data.images) {\n                    let latestCursor = cursor;\n                    for (let image of resp.data.images) {\n                        if (image.updated_at > latestCursor) {\n                            latestCursor = image.updated_at;\n                        }\n                    }\n\n                    // split resp.data.images into \"new\" and \"updated\" lists\n                    // image is \"new\" if it's not in images\n                    const newImages = resp.data.images.filter((image) => {\n                        return images.findIndex((i) => i.id === image.id) < 0;\n                    });\n                    const updatedImages = resp.data.images.filter((image) => {\n                        return images.findIndex((i) => i.id === image.id) >= 0;\n                    });\n                    setImages((images) => {\n                        const deletedIds: { [key: string]: boolean } = {};\n                        for (let image of newImages) {\n                            if (image.deleted_at) {\n                                deletedIds[image.id] = true;\n                                console.log(\n                                    `Deleting image ${image.id} from list`\n                                );\n                            }\n                        }\n                        for (let image of updatedImages) {\n                            if (image.deleted_at) {\n                                deletedIds[image.id] = true;\n                                console.log(\n                                    `Deleting image ${image.id} from list`\n                                );\n                            }\n                        }\n                        images = images.filter(\n                            (image) => !deletedIds[image.id]\n                        );\n                        return [\n                            ...images.map((image) => {\n                                const updatedImage = updatedImages.find(\n                                    (i) => i.id === image.id\n                                );\n                                if (updatedImage) {\n                                    return updatedImage;\n                                }\n                                return image;\n                            }),\n                            ...newImages.filter((image) => !image.deleted_at),\n                        ].sort(sortImages);\n                    });\n                }\n                return images;\n            } catch (err) {\n                setErr(\"Could not load images\");\n                console.error(err);\n            }\n        };\n\n        // polling is now a fallback for when the websocket connection fails\n        const timerHandle = setInterval(() => {\n            pollImages(images);\n        }, 60 * 1000);\n        return () => {\n            clearInterval(timerHandle);\n        };\n    }, [api, images, search]);\n\n    useEffect(() => {\n        // de-duplicate images by id\n        // first check if there are any duplicates\n        // I know, I should figure out where the duplicates are coming from,\n        // but I'm lazy.\n        const ids = images.map((image) => image.id);\n        const uniqueIds = new Set(ids);\n        if (ids.length !== uniqueIds.size) {\n            setImages((images) => {\n                // there are duplicates\n                const uniqueImages = images.filter((image, index) => {\n                    return ids.indexOf(image.id) === index;\n                });\n                return uniqueImages.sort(sortImages);\n            });\n        }\n    }, [images]);\n\n    useEffect(() => {\n        apiSocket.onMessage(async (message) => {\n            const payload = JSON.parse(message);\n            if (\n                payload.type === NOTIFICATION_IMAGE_UPDATED ||\n                payload.type === NOTIFICATION_IMAGE_DELETED\n            ) {\n                const updatedImage = await api.getImage(payload.id);\n                if (updatedImage.data.temporary) {\n                    return;\n                }\n                setImages((images) => {\n                    const index = images.findIndex(\n                        (image) => image.id === updatedImage.data.id\n                    );\n                    let updatedImages = images;\n                    if (index >= 0) {\n                        updatedImages = images.map((image) => {\n                            if (image.id === updatedImage.data.id) {\n                                return updatedImage.data;\n                            }\n                            return image;\n                        });\n                    } else {\n                        updatedImages = [...images, updatedImage.data];\n                    }\n                    return updatedImages.sort(sortImages);\n                });\n            } else if (payload.type === NOTIFICATION_BOOST_UPDATED) {\n                const updatedBoost = await api.getBoost();\n                setBoost(updatedBoost.data);\n            }\n        });\n        return () => {\n            apiSocket.onMessage(undefined);\n        };\n    }, [apiSocket]);\n\n    useEffect(() => {\n        const refreshBoost = async () => {\n            const updatedBoost = await api.getBoost();\n            setBoost(updatedBoost.data);\n        };\n        refreshBoost();\n        const interval = setInterval(refreshBoost, 60 * 1000);\n        return () => {\n            clearInterval(interval);\n        };\n    }, [api]);\n\n    const isPendingOrProcessing = (image: Image) => {\n        return (\n            image.status === StatusEnum.Pending ||\n            image.status === StatusEnum.Processing\n        );\n    };\n\n    const sortImages = (a: Image, b: Image) => {\n        // pending and processing images always come first\n        if (isPendingOrProcessing(a) && !isPendingOrProcessing(b)) {\n            return -1;\n        } else if (!isPendingOrProcessing(a) && isPendingOrProcessing(b)) {\n            return 1;\n        }\n        // if the parent is the same, sort by score descending\n        // otherwise, sort by updated_at\n        if (\n            a.parent === b.parent &&\n            a.params.prompt == b.params.prompt &&\n            a.status !== StatusEnum.Pending &&\n            b.status !== StatusEnum.Pending\n        ) {\n            // if the score is the same, sort by updated_at\n            let aScore = a.score;\n            let bScore = b.score;\n            // working around a bug where negative score was assigned\n            // for an empty negative prompt.\n            if (a.params.prompt!.trim() !== \"\") {\n                aScore = aScore - a.negative_score;\n            }\n            if (b.params.prompt!.trim() !== \"\") {\n                bScore = bScore - b.negative_score;\n            }\n            if (aScore == bScore) {\n                return b.updated_at - a.updated_at;\n            }\n            return bScore - aScore;\n        }\n\n        return b.updated_at - a.updated_at;\n    };\n\n    const onLoadMore = async () => {\n        // get the minimum updated_at from images\n        let minUpdatedAt = moment().valueOf();\n        images.forEach((image) => {\n            minUpdatedAt = Math.min(minUpdatedAt, image.updated_at);\n        });\n        // load images in descending order from updated_at\n        const resp = await api.listImages(\n            minUpdatedAt - 1,\n            search,\n            100,\n            \"desc\"\n        );\n        if (resp.data.images && resp.data.images.length > 0) {\n            // combine images with new images and sort by updated_at descending\n            setImages((images) =>\n                [...images, ...(resp.data.images || [])]\n                    .filter((image) => !image.deleted_at)\n                    .sort(sortImages)\n            );\n        } else {\n            setHasMore(false);\n        }\n    };\n\n    const onDelete = async (image: Image) => {\n        try {\n            await api.deleteImage(image.id);\n        } catch (e) {\n            console.error(e);\n            setErr(\"Error deleting image\");\n        }\n    };\n\n    const onFork = async (image: Image) => {\n        history.push({\n            pathname: \"/\",\n            search: `?parent=${image.id}`,\n        });\n    };\n\n    const onEdit = async (image: Image) => {\n        history.push(`/image-editor/${image.id}`);\n    };\n\n    const onThumbnailClicked = (image: Image) => {\n        // setSelectedImage(image);\n        if (bulkDeleteSelecting) {\n            setBulkDeleteIds({\n                ...bulkDeleteIds,\n                [image.id]: !bulkDeleteIds[image.id],\n            });\n        } else {\n            history.push(`/saved/${image.id}`);\n        }\n    };\n\n    const handleCancelFork = () => {\n        setParentImage(null);\n        window.scrollTo(0, 0);\n    };\n\n    const onConfirmBulkDelete = async () => {\n        try {\n            setBulkDeleting(true);\n            // await api.deleteImages(Object.keys(bulkDeleteIds));\n            const promises = Object.keys(bulkDeleteIds).map((id) => {\n                return api.deleteImage(id);\n            });\n            await Promise.all(promises);\n            setImages((images) => {\n                return images.filter((image) => !bulkDeleteIds[image.id]);\n            });\n            setBulkDeleteIds({});\n            setBulkDeleteSelecting(false);\n        } catch (e) {\n            console.error(e);\n            setErr(\"Error deleting images\");\n        } finally {\n            setBulkDeleting(false);\n        }\n    };\n\n    const completedOrSavedImages = images.filter((image) => {\n        return (\n            !image.deleted_at &&\n            (image.status === StatusEnum.Completed ||\n                image.status === StatusEnum.Saved)\n        );\n    });\n\n    const pendingOrProcessingImages = images.filter(\n        (image) =>\n            !image.deleted_at &&\n            (image.status === StatusEnum.Pending ||\n                image.status === StatusEnum.Processing)\n    );\n\n    const pendingImages = pendingOrProcessingImages.filter(\n        (image) => image.status === StatusEnum.Pending\n    );\n\n    const processingImages = pendingOrProcessingImages.filter(\n        (image) => image.status === StatusEnum.Processing\n    );\n\n    return (\n        <>\n            <h1 style={{ fontSize: \"40px\", textAlign: \"left\" }}>\n                Welcome to AiBrush - Saved\n            </h1>\n\n            <div\n                className=\"saved-images\"\n                style={{ marginTop: \"48px\", paddingBottom: \"48px\" }}\n            >\n                <div style={{ textAlign: \"left\" }}>\n                    <div\n                        className=\"input-group\"\n                        style={{ marginBottom: \"16px\" }}\n                    >\n                        <input\n                            style={{}}\n                            value={searchDebounce}\n                            type=\"search\"\n                            className=\"form-control image-search\"\n                            placeholder=\"Search...\"\n                            onChange={(e) => setSearchDebounce(e.target.value)}\n                        />\n\n                        <div\n                            style={{\n                                float: \"right\",\n                            }}\n                        >\n                            {!bulkDeleteSelecting && (\n                                <>\n                                    <button\n                                        style={{ display: \"inline\" }}\n                                        className=\"btn btn-primary image-popup-button\"\n                                        onClick={() =>\n                                            setCensorNSFW(!censorNSFW)\n                                        }\n                                    >\n                                        {!censorNSFW && (\n                                            <i className=\"fas fa-eye\"></i>\n                                        )}\n                                        {censorNSFW && (\n                                            <i className=\"fas fa-eye-slash\"></i>\n                                        )}\n                                    </button>\n                                    <Dropdown style={{ display: \"inline\", marginLeft: \"8px\" }}>\n                                        <Dropdown.Toggle variant=\"danger\">\n                                            <i className=\"fas fa-trash\"></i>\n                                        </Dropdown.Toggle>\n\n                                        <Dropdown.Menu>\n                                            <Dropdown.Item\n                                                onClick={() =>\n                                                    setBulkDeleteSelecting(true)\n                                                }\n                                            >\n                                                Bulk Delete\n                                            </Dropdown.Item>\n                                            <Dropdown.Item\n                                                onClick={() =>\n                                                    history.push(\n                                                        \"/deleted-images\"\n                                                    )\n                                                }\n                                            >\n                                                View Deleted Images\n                                            </Dropdown.Item>\n                                        </Dropdown.Menu>\n                                    </Dropdown>\n                                    \n                                </>\n                            )}\n                            {bulkDeleteSelecting && (\n                                <>\n                                    <button\n                                        className=\"btn btn-primary image-popup-button\"\n                                        onClick={() => {\n                                            setBulkDeleteSelecting(false);\n                                            setBulkDeleteIds({});\n                                        }}\n                                    >\n                                        Cancel\n                                    </button>\n                                    <button\n                                        style={{ marginLeft: \"8px\" }}\n                                        className=\"btn image-popup-delete-button\"\n                                        onClick={() => {\n                                            onConfirmBulkDelete();\n                                        }}\n                                    >\n                                        Delete\n                                    </button>\n                                </>\n                            )}\n                        </div>\n                    </div>\n                </div>\n                <InfiniteScroll\n                    dataLength={images.length}\n                    next={onLoadMore}\n                    hasMore={hasMore}\n                    loader={\n                        <>\n                            <hr />\n                            <h4>Loading...</h4>\n                        </>\n                    }\n                >\n                    {pendingOrProcessingImages.length > 0 && (\n                        <PendingImagesThumbnail\n                            pendingCount={pendingImages.length}\n                            processingCount={processingImages.length}\n                            onClick={() => {\n                                setShowPendingImages(true);\n                            }}\n                        />\n                    )}\n                    {completedOrSavedImages.map((image) => (\n                        <ImageThumbnail\n                            key={image.id}\n                            image={image}\n                            assetsUrl={assetsUrl}\n                            onClick={onThumbnailClicked}\n                            bulkDelete={\n                                bulkDeleteSelecting && bulkDeleteIds[image.id]\n                            }\n                            censorNSFW={censorNSFW}\n                        />\n                    ))}\n                </InfiniteScroll>\n            </div>\n\n            {selectedImage && (\n                <ImagePopup\n                    assetsUrl={assetsUrl}\n                    image={selectedImage}\n                    onClose={() => history.push(\"/saved\")}\n                    onDelete={(image) => {\n                        onDelete(image);\n                        setImages(images.filter((i) => i.id !== image.id));\n                        history.push(\"/saved\");\n                    }}\n                    onFork={(image) => {\n                        onFork(image);\n                    }}\n                    onEdit={(image) => {\n                        onEdit(image);\n                    }}\n                    onNSFW={onNSFW}\n                    censorNSFW={censorNSFW}\n                />\n            )}\n            <ScrollToTop />\n            <BusyModal show={creating} title=\"Creating images\">\n                <p>Please wait while we create your image.</p>\n            </BusyModal>\n            <BusyModal show={bulkDeleting} title=\"Deleting images\">\n                <p>Please wait while we delete your images.</p>\n            </BusyModal>\n            <PendingImages\n                images={pendingOrProcessingImages}\n                onCancel={() => setShowPendingImages(false)}\n                show={showPendingImages}\n                onDeleteImage={(image) => {\n                    onDelete(image);\n                    setImages(images.filter((i) => i.id !== image.id));\n                }}\n            />\n        </>\n    );\n};\n","import { useEffect, useState, FC } from \"react\";\nimport loadImage from \"blueimp-load-image\";\nimport {\n    splitImage,\n    mergeTiles,\n    SplitResult,\n    ImageUtilWorker,\n} from \"../lib/imageutil\";\nimport * as uuid from \"uuid\";\n\nexport const TestPage: FC = () => {\n    const [originalImage, setOriginalImage] = useState<string | undefined>();\n    const [upscaledImage, setUpscaledImage] = useState<string | undefined>();\n    const [imageWorker, setImageWorker] = useState<\n        ImageUtilWorker | undefined\n    >();\n\n    useEffect(() => {\n        const imageWorker = new ImageUtilWorker();\n        setImageWorker(imageWorker);\n        return () => {\n            imageWorker.destroy();\n        };\n    }, []);\n\n    const imageDataToCanvas = (imageData: ImageData): HTMLCanvasElement => {\n        const canvas = document.createElement(\"canvas\");\n        canvas.width = imageData.width;\n        canvas.height = imageData.height;\n        const ctx = canvas.getContext(\"2d\");\n        if (!ctx) {\n            throw new Error(\"Could not get canvas context\");\n        }\n        ctx.putImageData(imageData, 0, 0);\n        return canvas;\n    };\n\n    const upscaleImageData = (imageData: ImageData): HTMLCanvasElement => {\n        console.log(\"upscaling image data\", imageData.width, imageData.height);\n        const canvas = document.createElement(\"canvas\");\n        canvas.width = imageData.width * 2;\n        canvas.height = imageData.height * 2;\n        const ctx = canvas.getContext(\"2d\");\n        if (!ctx) {\n            throw new Error(\"Could not get canvas context\");\n        }\n        const image = imageDataToCanvas(imageData);\n        ctx.drawImage(image, 0, 0, canvas.width, canvas.height);\n        return canvas;\n    };\n\n    const onImageSelected = async (\n        event: React.ChangeEvent<HTMLInputElement>\n    ) => {\n        if (!imageWorker) {\n            throw new Error(\"Image worker not initialized\");\n        }\n        const files = event.target.files;\n        if (files && files.length > 0) {\n            loadImage(\n                files[0],\n                async (img) => {\n                    const c = img as HTMLCanvasElement;\n                    const originalImage = c.toDataURL(\"image/png\");\n                    setOriginalImage(originalImage);\n\n                    const ctx = c.getContext(\"2d\");\n                    if (ctx) {\n                        const originalImageData = ctx.getImageData(\n                            0,\n                            0,\n                            c.width,\n                            c.height\n                        );\n                        const splitResult = splitImage(originalImageData);\n                        if (!splitResult) {\n                            setUpscaledImage(originalImage);\n                            return;\n                        }\n                        console.log(\"splitResult\", {\n                            numTilesX: splitResult.numTilesX,\n                            numTilesY: splitResult.numTilesY,\n                            tileSize: splitResult.tileSize,\n                        });\n                        splitResult.tileSize *= 2;\n                        splitResult.imageWidth *= 2;\n                        splitResult.imageHeight *= 2;\n                        for (let x = 0; x < splitResult.numTilesX; x++) {\n                            for (let y = 0; y < splitResult.numTilesY; y++) {\n                                const tile = splitResult.tiles[x][y];\n                                const upscaledTile = upscaleImageData(tile);\n                                const upscaledImageData = upscaledTile\n                                .getContext(\"2d\")!\n                                .getImageData(\n                                    0,\n                                    0,\n                                    upscaledTile.width,\n                                    upscaledTile.height\n                                );\n                                const id = uuid.v4();\n                                const feathered =\n                                    await imageWorker.processRequest({\n                                        id,\n                                        alpha: false,\n                                        feather: true,\n                                        width: splitResult.imageWidth,\n                                        height: splitResult.imageHeight,\n                                        pixels: upscaledImageData.data,\n                                        selectionOverlay: {\n                                            x:\n                                                x *\n                                                (splitResult.tileSize - 64),\n                                            y:\n                                                y *\n                                                (splitResult.tileSize - 64),\n                                            width: upscaledTile.width,\n                                            height: upscaledTile.height,\n                                        },\n                                        upscale: true,\n                                        featherWidth: 64,\n                                    });\n\n                                splitResult.tiles[x][y] = new ImageData(feathered.pixels, upscaledTile.width, upscaledTile.height)\n                            }\n                        }\n                        const upscaledImageData = mergeTiles(splitResult);\n                        console.log(\n                            \"upscaled image data size\",\n                            upscaledImageData.width,\n                            upscaledImageData.height\n                        );\n                        const upscaledCanvas =\n                            imageDataToCanvas(upscaledImageData);\n                        const upscaledImage =\n                            upscaledCanvas.toDataURL(\"image/png\");\n                        setUpscaledImage(upscaledImage);\n                    }\n                },\n                { canvas: true }\n            );\n        }\n    };\n\n    return (\n        <div>\n            <input type=\"file\" onChange={onImageSelected} />\n            {originalImage && upscaledImage && (\n                <div>\n                    Original:\n                    <br />\n                    <img src={originalImage} />\n                    <br />\n                    Upscaled:\n                    <br />\n                    <img src={upscaledImage} />\n                </div>\n            )}\n        </div>\n    );\n};\n","import React, { useState, useEffect } from \"react\";\nimport * as axios from \"axios\";\nimport { BrowserRouter, Switch, Route, Link } from \"react-router-dom\";\nimport \"./App.css\";\nimport \"./bootstrap.min.css\";\nimport { AIBrushApi, LoginResult, FeatureList } from \"./client/api\";\nimport { LocalImagesStore } from \"./lib/localImagesStore\";\nimport { getConfig } from \"./config\";\nimport { Login } from \"./pages/Login\";\nimport { TokenRefresher } from \"./components/TokenRefresher\";\nimport { Healthchecker } from \"./components/Healthchecker\";\nimport { Admin } from \"./pages/admin/Admin\";\nimport { ImageEditor } from \"./pages/image-editor/ImageEditor\";\nimport { DeletedImages } from \"./pages/DeletedImages\";\n\n// V2 UI\nimport { Homepage } from \"./pages/Homepage\";\nimport { ApiSocket } from \"./lib/apisocket\";\nimport { DiscordLogin } from \"./pages/DiscordLogin\";\nimport { LocalDeletedImages } from \"./pages/LocalDeletedImages\";\nimport { SavedImagesPage } from \"./pages/SavedImagesPage\";\nimport { TestPage } from \"./pages/TestPage\";\n\nconst config = getConfig();\nconst httpClient = axios.default.create();\nconst client = new AIBrushApi(\n    undefined,\n    localStorage.getItem(\"apiUrl\") || config.apiUrl,\n    httpClient\n);\nconst apiSocket: ApiSocket = new ApiSocket();\nconst localImages = new LocalImagesStore();\n\nfunction updateHttpClient(loginResult: LoginResult) {\n    if (loginResult.accessToken) {\n        httpClient.defaults.headers.common[\n            \"Authorization\"\n        ] = `Bearer ${loginResult.accessToken}`;\n    }\n}\n\nfunction App() {\n    const [credentials, setCredentials] = useState<LoginResult | null>(null);\n    const [assetsUrl, setAssetsUrl] = useState<string>(\"/api/images\");\n    const [isAdmin, setIsAdmin] = useState<boolean>(false);\n    const [features, setFeatures] = useState<FeatureList | null>(null);\n\n    const onLogout = () => {\n        setCredentials(null);\n        localStorage.removeItem(\"credentials\");\n        httpClient.defaults.headers.common[\"Authorization\"] = undefined;\n    };\n\n    const init = async () => {\n        console.log(\"App.init\");\n        await localImages.init();\n        client\n            .getAssetsUrl()\n            .then((result) => setAssetsUrl(result.data.assets_url));\n        client.getFeatures().then((result) => setFeatures(result.data));\n        const storedCredentials = localStorage.getItem(\"credentials\");\n        if (storedCredentials) {\n            // attempt to refresh token\n            try {\n                const credentials = JSON.parse(\n                    storedCredentials\n                ) as LoginResult;\n                updateHttpClient(credentials);\n                const result = await client.refresh({\n                    refreshToken: credentials.refreshToken,\n                });\n                setCredentials(result.data);\n\n                // save to storage\n                localStorage.setItem(\n                    \"credentials\",\n                    JSON.stringify(result.data)\n                );\n                updateHttpClient(result.data);\n                const isAdmin = await client.isAdmin();\n                setIsAdmin(!!isAdmin.data.is_admin);\n                apiSocket.updateToken(result.data.accessToken!);\n                apiSocket.connect();\n            } catch (e) {\n                console.log(e);\n                localStorage.removeItem(\"credentials\");\n            }\n        }\n    };\n\n    const onLogin = async (credentials: LoginResult) => {\n        localStorage.setItem(\"credentials\", JSON.stringify(credentials));\n        setCredentials(credentials);\n        updateHttpClient(credentials);\n        apiSocket.updateToken(credentials.accessToken!);\n        apiSocket.connect();\n    };\n\n    const onCredentialsExpired = () => {\n        onLogout();\n    };\n\n    useEffect(() => {\n        init();\n    }, []);\n\n    return (\n        <div className=\"App\">\n            <TokenRefresher\n                api={client}\n                credentials={credentials as LoginResult}\n                onCredentialsRefreshed={onLogin}\n                onCredentialsExpired={onCredentialsExpired}\n            />\n            <Healthchecker api={client} />\n\n            <BrowserRouter>\n                {/* if credentials are not set, show Login component */}\n                {!credentials && (\n                    <Switch>\n                        <Route path=\"/\" exact={true}>\n                            <Login client={client} onLogin={onLogin} />\n                        </Route>\n                        <Route path=\"/discord-login\">\n                            <DiscordLogin client={client} onLogin={onLogin} />\n                        </Route>\n                        {/* fallback route is login page */}\n                        <Route path=\"*\">\n                            <Login client={client} onLogin={onLogin} />\n                        </Route>\n                    </Switch>\n                )}\n                {credentials && (\n                    <div className=\"container\">\n                        <div className=\"row\">\n                            <div className=\"col-lg-12\">\n                                {/* if credentials are set, show a bootstrap logout button a the far top right corner div */}\n                                {credentials && (\n                                    <>\n                                        <button\n                                            className=\"btn btn-primary top-button\"\n                                            onClick={() => onLogout()}\n                                        >\n                                            {/* font awesome logout icon */}\n                                            <i className=\"fas fa-sign-out-alt\"></i>\n                                        </button>\n                                        {/* saved images */}\n                                        <Link\n                                            className=\"btn btn-primary top-button\"\n                                            to=\"/saved\"\n                                        >\n                                            {/* font awesome save icon */}\n                                            <i className=\"fas fa-save\"></i>\n                                        </Link>\n                                        {/* home button */}\n                                        <Link\n                                            className=\"btn btn-primary top-button\"\n                                            to=\"/\"\n                                        >\n                                            {/* font awesome home icon */}\n                                            <i className=\"fas fa-home\"></i>\n                                        </Link>\n                                        {/* Link to discord */}\n                                        <a\n                                            className=\"btn btn-primary top-button\"\n                                            href=\"https://discord.gg/VPYyAJBkhC\"\n                                            target=\"_blank\"\n                                        >\n                                            {/* font awesome discord icon */}\n                                            <i className=\"fab fa-discord\"></i>\n                                        </a>\n                                        <Link\n                                            className=\"btn top-button pulse\"\n                                            to=\"/\"\n                                            style={{\n                                                width: \"47px\",\n                                            }}\n                                            onClick={() =>\n                                                alert(\"Coming soon!\")\n                                            }\n                                        >\n                                            {/* font awesome bolt icon */}\n                                            <i className=\"fas fa-bolt\"></i>\n                                        </Link>\n                                    </>\n                                )}\n                            </div>\n                        </div>\n\n                        {/* if credentials are set, show the rest of the app */}\n\n                        <Switch>\n                            <Route path=\"/\" exact={true}>\n                                {/* <MainMenu isAdmin={isAdmin} /> */}\n                                <Homepage\n                                    api={client}\n                                    apiSocket={apiSocket}\n                                    assetsUrl={assetsUrl}\n                                    localImages={localImages}\n                                />\n                            </Route>\n                            <Route path=\"/images/:id\">\n                                <Homepage\n                                    api={client}\n                                    apiSocket={apiSocket}\n                                    assetsUrl={assetsUrl}\n                                    localImages={localImages}\n                                />\n                            </Route>\n                            <Route path=\"/saved\" exact={true}>\n                                {/* <MainMenu isAdmin={isAdmin} /> */}\n                                <SavedImagesPage\n                                    api={client}\n                                    apiSocket={apiSocket}\n                                    assetsUrl={assetsUrl}\n                                />\n                            </Route>\n                            <Route path=\"/saved/:id\" exact={true}>\n                                {/* <MainMenu isAdmin={isAdmin} /> */}\n                                <SavedImagesPage\n                                    api={client}\n                                    apiSocket={apiSocket}\n                                    assetsUrl={assetsUrl}\n                                />\n                            </Route>\n                            <Route path=\"/image-editor/:id\">\n                                <ImageEditor\n                                    api={client}\n                                    apisocket={apiSocket}\n                                    assetsUrl={assetsUrl}\n                                    localImages={localImages}\n                                />\n                            </Route>\n                            <Route path=\"/deleted-images\">\n                                <DeletedImages\n                                    api={client}\n                                    assetsUrl={assetsUrl}\n                                />\n                            </Route>\n                            <Route path=\"/local-deleted-images\">\n                                <LocalDeletedImages\n                                    localImages={localImages}\n                                />\n                            </Route>\n                            <Route path=\"/testpage\">\n                                <TestPage />\n                            </Route>\n                            {isAdmin && (\n                                <>\n                                    <Route path=\"/admin\">\n                                        <Admin api={client} />\n                                    </Route>\n                                </>\n                            )}\n                        </Switch>\n                        <div\n                            // style={{ marginTop: \"100px\", padding: \"50px\" }}\n\n                            // use position:fixed to make the footer stick to the bottom of the page\n                            style={{\n                                position: \"fixed\",\n                                bottom: \"0\",\n                                left: \"0\",\n                                width: \"100%\",\n                                height: \"50px\",\n                                paddingTop: \"16px\",\n                                backgroundColor: \"#000000\",\n                            }}\n                        >\n                            {/* show external popout pages to terms and privacy policy, if they are present in the features */}\n                            {features && features.privacy_uri && (\n                                <a href={features.privacy_uri} target=\"_blank\">\n                                    Privacy Policy\n                                </a>\n                            )}\n                            {features && features.terms_uri && (\n                                <a\n                                    href={features.terms_uri}\n                                    target=\"_blank\"\n                                    style={{ marginLeft: \"20px\" }}\n                                >\n                                    Terms of Service\n                                </a>\n                            )}\n                            {/* link to mail to admin@aibrush.art */}\n                            <a\n                                href=\"mailto:admin@aibrush.art\"\n                                style={{ marginLeft: \"20px\" }}\n                            >\n                                Contact\n                            </a>\n                            <span style={{ float: \"right\", marginRight: \"50px\" }}>\n                                Powered by the{\" \"}\n                                <a\n                                    href=\"https://stablehorde.net/\"\n                                    target=\"_blank\"\n                                >\n                                    Stable Horde\n                                </a>\n                            </span>\n                        </div>\n                    </div>\n                )}\n            </BrowserRouter>\n        </div>\n    );\n}\n\nexport default App;\n","export interface Config {\n    apiUrl: string;\n}\n\nexport function getConfig(): Config {\n    // if (process.env.REACT_APP_ENV === \"prod\") {\n    //     return {\n    //         apiUrl: \"https://aibrush.ngrok.io\"\n    //     };\n    // } else if (process.env.REACT_APP_ENV === \"alt\") {\n    //     return {\n    //         apiUrl: \"\"\n    //     };\n    // } else {\n    //     return {\n    //         apiUrl: \"http://localhost:3000\"\n    //     };\n    // }\n    return {\n        apiUrl: \"\"\n    };\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","\nexport const NOTIFICATION_IMAGE_UPDATED = \"image_updated\";\nexport const NOTIFICATION_IMAGE_DELETED = \"image_deleted\";\nexport const NOTIFICATION_PENDING_IMAGE = \"pending_image\";\nexport const NOTIFICATION_BOOST_UPDATED = \"boost_updated\";\n\nexport class ApiSocket {\n    private client?: WebSocket;\n    private accessToken?: string\n    private messageListener?: (message: string) => void;\n\n    updateToken(accessToken: string) {\n        this.accessToken = accessToken;\n    }\n\n    onMessage(listener?: (message: string) => void) {\n        this.messageListener = listener;\n    }\n\n    connect() {\n        // if (!this.accessToken) {\n        //     throw new Error(\"unauthenticated\");\n        // }\n        // if (this.client) {\n        //     // will reconnect in one second automatically\n        //     // this is called every time the auth refreshes\n        //     this.client.close();\n        //     return;\n        // }\n        // let host = window.location.host;\n        // let protocol = \"wss\";\n        // if (host.includes(\"localhost\")) {\n        //   host = \"localhost:3000\";\n        //   protocol = \"ws\";\n        // }\n        // this.client = new WebSocket(`${protocol}://${host}`);\n        // this.client.onerror = err => console.error(err);\n        // this.client.onopen = () => {\n        //     console.log(\"websocket connected\");\n        //     this.client!.send(this.accessToken!);\n        // }\n        // this.client.onmessage = evt => {\n        //     console.log(\"server push\", evt.data);\n        //     if (this.messageListener) {\n        //         this.messageListener(evt.data as string);\n        //     }\n        // }\n        // this.client.onclose = () => {\n        //   console.log(\"websocket closed\");\n        //   this.client = undefined;\n        //   setTimeout(() => this.connect(), 1000);\n        // }\n    }\n}\n","import React, { FC, useEffect, useState } from \"react\";\nimport moment from \"moment\";\nimport { Image, StatusEnum } from \"../client/api\";\nimport { LocalImage } from \"../lib/localImagesStore\";\n\ninterface Props {\n    assetsUrl: string;\n    image: LocalImage;\n    censorNSFW: boolean;\n    bulkDelete?: boolean;\n    onClick?: (image: Image) => void;\n}\n\nexport const ImageThumbnail: FC<Props> = ({ assetsUrl, image, censorNSFW, bulkDelete, onClick }) => {\n    const src = `${assetsUrl}/${image.id}.thumbnail.png?updated_at=${image.updated_at}`;\n    const [retry, setRetry] = useState(\"\");\n\n    useEffect(() => {\n        // This is to help deal with eventual consistency from S3.\n        // if image.updated_at (unix timestamp in milliseconds) is less than a minute ago, try to reload the image\n        if (moment().diff(moment(image.updated_at), \"minutes\") < 1) {\n            setRetry(\"\");\n            const t = setTimeout(() => {\n                setRetry(\"&retry\")\n            }, 3000);\n            return () => clearTimeout(t);\n        }\n    }, [image.id, image.updated_at])\n\n    let label = image.label;\n    if (image.label === \"\") {\n        label = image.params.prompt || \"\";\n    }\n    \n    let className = \"image-thumbnail\";\n    if (bulkDelete) {\n        className += \" bulk-delete\";\n    }\n\n    let backgroundImage = `url(${src}${retry}), url(/images/default.png)`;\n    if (image.imageData) {\n        backgroundImage = `url(${image.imageData}), url(/images/default.png)`;\n    }\n\n    return (\n        <div\n            className={className}\n            style={{\n                backgroundImage,\n                backgroundRepeat: \"no-repeat\",\n                backgroundPosition: \"center\",\n                filter: (image.nsfw && censorNSFW) ? \"blur(8px)\" : undefined,\n            }}\n            onClick={() => onClick && onClick(image)}\n        >\n            {!bulkDelete && <div className=\"image-thumbnail-label\">\n                {label}\n            </div>}\n\n            {bulkDelete && <div className=\"image-thumbnail-label\">\n                <input type=\"checkbox\" style={{\n                    width: \"20px\",\n                    height: \"20px\",\n                    marginLeft: \"16px\",\n                    marginTop: \"16px\",\n                }} checked readOnly />\n            </div>}\n\n            {image.status === StatusEnum.Pending && <div className=\"image-thumbnail-pending\">\n                <i style={{marginTop: \"20px\"}} className=\"fa fa-hourglass-half\"></i>\n            </div>}\n            {\n                image.status === StatusEnum.Processing && <div className=\"image-thumbnail-pending\">\n                    <i style={{marginTop: \"20px\"}} className=\"fa fa-cog fa-spin\"></i>\n                </div>\n            }\n        </div>\n    );\n};\n","import { FC, useState, FormEvent } from \"react\";\nimport { Form, FormGroup, FormControl, FormText, FormCheck } from \"react-bootstrap\";\n\ninterface Props {\n    seed: string;\n    setSeed: (seed: string) => void;\n}\n\nexport const SeedInput: FC<Props> = ({seed, setSeed}) => {\n    const [useCustomSeed, setUseCustomSeed] = useState(false);\n\n    const onChangeCustomSeed = () => {\n        setUseCustomSeed(!useCustomSeed);\n        if (useCustomSeed) {\n            setSeed(\"\");\n        } else {\n            // set seed to a random number\n            setSeed(Math.floor(Math.random() * 1000000000).toString());\n        }\n    };\n\n    return (\n        <Form>\n            <FormGroup>\n                <FormCheck \n                    type=\"checkbox\"\n                    label=\"Use Custom Seed\"\n                    checked={useCustomSeed}\n                    onChange={(e) => onChangeCustomSeed()}\n                />\n            </FormGroup>\n\n            {useCustomSeed && (\n                <FormGroup>\n                    <FormControl\n                        type=\"text\"\n                        // value={seed}\n                        // onChange={(e) => setSeed(e.target.value)}\n                        placeholder=\"Enter seed\"\n                        value={seed}\n                        onChange={(e: any) => setSeed(e.target.value)}\n                    />\n                </FormGroup> \n            )}\n        </Form>\n    );\n};\n","import React, { FC, useEffect, useState } from \"react\";\nimport { CreateImageInput, StatusEnum, Image } from \"../client\";\nimport {\n    aspectRatios,\n    DEFAULT_ASPECT_RATIO,\n    getClosestAspectRatio,\n    upscale,\n    compareSize,\n    AspectRatio,\n} from \"../lib/aspecRatios\";\nimport loadImage from \"blueimp-load-image\";\nimport { AspectRatioSelector } from \"./AspectRatioSelector\";\nimport { getUpscaleLevel } from \"../lib/upscale\";\nimport { resizeEncodedImage } from \"../lib/imageutil\";\nimport { LocalImage } from \"../lib/localImagesStore\";\nimport { controlnetTypes, supportedModels } from \"../lib/supportedModels\";\nimport { SeedInput } from \"./SeedInput\";\n\ninterface Props {\n    parent: LocalImage | null;\n    creating: boolean;\n    assetsUrl: string;\n    onSubmit: (input: CreateImageInput) => void;\n    // go straight to editor without variations\n    onEdit: (input: CreateImageInput) => void;\n    onCancel: () => void;\n}\n\nexport function defaultArgs(): CreateImageInput {\n    return {\n        params: {\n            prompt: \"a painting of a happy corgi wearing sunglasses\",\n            negative_prompt: defaultNegativePrompt,\n            width: 512,\n            height: 512,\n            steps: 20,\n            denoising_strength: 0.75,\n        },\n        label: \"\",\n        encoded_image: \"\",\n        encoded_npy: \"\",\n        encoded_mask: \"\",\n        model: \"Epic Diffusion\",\n        count: 4,\n    };\n}\n\nconst defaultNegativePrompt =\n    \"low quality, distorted, deformed, dull, boring, plain, ugly, noise\";\n\nexport const ImagePrompt: FC<Props> = ({\n    parent,\n    creating,\n    assetsUrl,\n    onSubmit,\n    onCancel,\n    onEdit,\n}) => {\n    const [prompt, setPrompt] = useState<string>(\"\");\n    const [negativePrompt, setNegativePrompt] = useState<string>(\n        defaultNegativePrompt\n    );\n    const [count, setCount] = useState<number>(4);\n    const [variationStrength, setVariationStrength] = useState<number>(0.75);\n    const [aspectRatio, setAspectRatio] =\n        useState<number>(DEFAULT_ASPECT_RATIO);\n    const [parentId, setParentId] = useState<string | null>(null);\n    const [advancedView, setAdvancedView] = useState<boolean>(false);\n    const [encodedImage, setEncodedImage] = useState<string>(\"\");\n    const [model, setModel] = useState<string>(\"Epic Diffusion\");\n    const [controlnetType, setControlnetType] = useState<string | undefined>();\n    const [cfgScale, setCfgScale] = useState<number>(7.5);\n    const [seed, setSeed] = useState<string>(\"\");\n    const defaultAspectRatio = aspectRatios[DEFAULT_ASPECT_RATIO];\n\n    const [aspectRatioDetails, setAspectRatioDetails] = useState<AspectRatio>(\n        aspectRatios[DEFAULT_ASPECT_RATIO]\n    );\n    let [originalWidth, setOriginalWidth] = useState<number>(\n        defaultAspectRatio.width\n    );\n    let [originalHeight, setOriginalHeight] = useState<number>(\n        defaultAspectRatio.height\n    );\n\n    // const aspectRatioDetails = aspectRatios[aspectRatio];\n\n    const resetState = () => {\n        setPrompt(\"\");\n        setNegativePrompt(defaultNegativePrompt);\n        setCount(4);\n        setAdvancedView(false);\n        setParentId(null);\n        setVariationStrength(0.75);\n        setAspectRatio(DEFAULT_ASPECT_RATIO);\n        setAspectRatioDetails(aspectRatios[DEFAULT_ASPECT_RATIO]);\n        setEncodedImage(\"\");\n        setCfgScale(7.5);\n        setSeed(\"\");\n    };\n\n    const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\n        e.preventDefault();\n        const args = defaultArgs();\n        args.params.prompt = prompt || \"\";\n        args.params.negative_prompt = negativePrompt || \"\";\n        args.count = seed ? 1 : count;\n        args.parent = parentId || undefined;\n        args.params.denoising_strength = variationStrength;\n        args.nsfw = true;\n        args.model = model;\n        args.temporary = true;\n        args.params.controlnet_type = controlnetType as any;\n        args.params.cfg_scale = cfgScale;\n        args.params.seed = seed || undefined;\n        if (parent) {\n            const bestMatch = getClosestAspectRatio(\n                parent.params.width!,\n                parent.params.height!\n            );\n            args.params.width = bestMatch.width;\n            args.params.height = bestMatch.height;\n        } else {\n            const bestMatch = getClosestAspectRatio(\n                aspectRatioDetails.width,\n                aspectRatioDetails.height\n            );\n            args.params.width = bestMatch.width;\n            args.params.height = bestMatch.height;\n        }\n        if (encodedImage) {\n            args.encoded_image = await resizeEncodedImage(\n                encodedImage,\n                args.params.width,\n                args.params.height\n            );\n        }\n\n        resetState();\n        onSubmit(args);\n    };\n\n    const handleEdit = () => {\n        if (!encodedImage) {\n            console.error(\"Cannot edit without existing image\");\n            return;\n        }\n        const args = defaultArgs();\n        args.params.prompt = prompt || \"\";\n        args.params.negative_prompt = negativePrompt || \"\";\n        args.count = 1;\n        args.parent = parentId || undefined;\n        // args.stable_diffusion_strength = variationStrength;\n        args.params.denoising_strength = variationStrength;\n        args.status = StatusEnum.Completed;\n        args.params.width = originalWidth;\n        args.params.height = originalHeight;\n        args.params.cfg_scale = cfgScale;\n        args.nsfw = true;\n        args.model = model;\n        if (encodedImage) {\n            args.encoded_image = encodedImage;\n        }\n\n        resetState();\n        onEdit(args);\n    };\n\n    const handleCancel = () => {\n        resetState();\n        onCancel();\n    };\n\n    const onImageSelected = async (e: React.ChangeEvent<HTMLInputElement>) => {\n        const file = e.target.files && e.target.files[0];\n        if (!file) {\n            return;\n        }\n        loadImage(\n            file,\n            (img: Event | HTMLImageElement | HTMLCanvasElement) => {\n                if (!(img instanceof HTMLCanvasElement)) {\n                    return;\n                }\n                // try to match width and height to a supported aspect ratio\n                const width = img.width;\n                const height = img.height;\n                let bestMatch = getClosestAspectRatio(width, height);\n                while (compareSize(upscale(bestMatch), width, height) <= 0) {\n                    bestMatch = upscale(bestMatch);\n                    if (\n                        getUpscaleLevel(bestMatch.width, bestMatch.height) >= 2\n                    ) {\n                        break;\n                    }\n                }\n                console.log(\"best match\", bestMatch);\n\n                const canvas = document.createElement(\"canvas\");\n                // canvas.width = bestMatch.width;\n                // canvas.height = bestMatch.height;\n                canvas.width = width;\n                canvas.height = height;\n                const ctx = canvas.getContext(\"2d\");\n                if (!ctx) {\n                    return;\n                }\n                ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n\n                // convert image to base64\n                // const canvas = img as HTMLCanvasElement\n                const dataUrl = canvas.toDataURL(\"image/png\");\n                const base64 = dataUrl.split(\",\")[1];\n                setEncodedImage(base64);\n                // get the index of the best match\n                setAspectRatio(\n                    aspectRatios.findIndex((a) => a.id === bestMatch.id)\n                );\n                setAspectRatioDetails(bestMatch);\n                setOriginalWidth(width);\n                setOriginalHeight(height);\n                // remove canvas\n                canvas.remove();\n            },\n            {\n                maxWidth: 4096,\n                maxHeight: 4096,\n                canvas: true,\n            }\n        );\n    };\n\n    useEffect(() => {\n        if (parent) {\n            const imageData = parent.imageData;\n            if (imageData) {\n                setEncodedImage(imageData.split(\",\")[1]);\n            }\n            setPrompt(parent.params.prompt || \"\");\n            setNegativePrompt(\n                parent.params.negative_prompt || defaultNegativePrompt\n            );\n            setCount(4);\n            setParentId(parent.id);\n            setAdvancedView(true);\n            setVariationStrength(parent.params.denoising_strength || 0.75);\n            setModel(\n                supportedModels.indexOf(parent.model) > -1\n                    ? parent.model\n                    : \"Epic Diffusion\"\n            );\n            setCfgScale(parent.params.cfg_scale || 7.5);\n        } else {\n            resetState();\n        }\n    }, [parent]);\n\n    // unset controlnet when encodedImage is null\n    useEffect(() => {\n        if (!encodedImage) {\n            setControlnetType(undefined);\n        }\n    }, [encodedImage]);\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <div className=\"homepage-prompt\">\n                <div className=\"input-group\">\n                    <input\n                        className=\"form-control\"\n                        placeholder=\"What would you like to create?\"\n                        value={prompt}\n                        onChange={(e) => setPrompt(e.target.value)}\n                    />\n\n                    <div className=\"input-group-append\">\n                        <button\n                            type=\"submit\"\n                            className=\"btn btn-secondary light-button\"\n                            style={{ marginLeft: \"8px\" }}\n                            disabled={!prompt || creating}\n                        >\n                            {/* paintbrush button */}\n                            {!creating && (\n                                <i className=\"fas fa-paint-brush\"></i>\n                            )}\n                            {/* spinner button */}\n                            {creating && (\n                                <i className=\"fas fa-spinner fa-spin\"></i>\n                            )}\n                        </button>\n                    </div>\n                </div>\n                <div\n                    style={{\n                        marginTop: \"24px\",\n                    }}\n                >\n                    <a\n                        href=\"javascript:void(0)\"\n                        onClick={() => setAdvancedView(!advancedView)}\n                        style={{\n                            color: \"white\",\n                            textDecoration: \"underline\",\n                        }}\n                    >\n                        Advanced\n                    </a>\n                    &nbsp;\n                    {advancedView ? (\n                        <i className=\"fas fa-chevron-up\"></i>\n                    ) : (\n                        <i className=\"fas fa-chevron-down\"></i>\n                    )}\n                </div>\n                {advancedView && (\n                    <div className=\"homepage-prompt-advanced\">\n                        {encodedImage && (\n                            <div className=\"form-group\">\n                                <label>Init Image</label>\n                                <img\n                                    style={{\n                                        display: \"block\",\n                                        marginLeft: \"auto\",\n                                        marginRight: \"auto\",\n                                        maxWidth: \"100%\",\n                                    }}\n                                    src={`data:image/png;base64,${encodedImage}`}\n                                />\n                            </div>\n                        )}\n                        {!parent && !encodedImage && (\n                            <AspectRatioSelector\n                                aspectRatio={aspectRatio}\n                                onChange={(aspectRatioId) => {\n                                    setAspectRatio(aspectRatioId);\n                                    setAspectRatioDetails(\n                                        aspectRatios[aspectRatioId]\n                                    );\n                                }}\n                            />\n                        )}\n                        <div className=\"form-group\">\n                            <div\n                                style={{\n                                    display: \"block\",\n                                    maxWidth: encodedImage ? \"350px\" : \"180px\",\n                                    marginTop: \"40px\",\n                                    marginRight: \"auto\",\n                                    marginLeft: \"auto\",\n                                }}\n                            >\n                                <label\n                                    id=\"loadimage-wrapper\"\n                                    className={`btn btn-primary `}\n                                    style={{ display: \"inline\" }}\n                                >\n                                    {/* upload image */}\n                                    <i className=\"fas fa-upload\"></i>&nbsp;\n                                    {encodedImage || parent\n                                        ? \"Replace Image\"\n                                        : \"Upload Image\"}\n                                    <input\n                                        id=\"loadimage\"\n                                        type=\"file\"\n                                        style={{ display: \"none\" }}\n                                        onChange={onImageSelected}\n                                    />\n                                </label>\n                                {encodedImage && (\n                                    <label\n                                        className=\"btn btn-secondary\"\n                                        onClick={() => setEncodedImage(\"\")}\n                                        style={{ display: \"inline\" }}\n                                    >\n                                        {/* remove image */}\n                                        <i className=\"fas fa-trash\"></i>&nbsp;\n                                        Remove Image\n                                    </label>\n                                )}\n                            </div>\n                        </div>\n                        <div className=\"form-group\">\n                            <label htmlFor=\"model\">Model</label>\n                            <select\n                                className=\"form-control\"\n                                id=\"model\"\n                                value={model}\n                                onChange={(e) => setModel(e.target.value)}\n                            >\n                                {supportedModels.map((model) => (\n                                    <option\n                                        value={model}\n                                        key={`model-${model}`}\n                                    >\n                                        {model}\n                                    </option>\n                                ))}\n                            </select>\n                        </div>\n                        <div className=\"form-group\">\n                            {/* negative prompt */}\n                            <label htmlFor=\"negativePrompt\">\n                                Negative Prompt\n                            </label>\n                            <input\n                                type=\"text\"\n                                className=\"form-control\"\n                                id=\"negativePrompt\"\n                                placeholder=\"What would you like to avoid?\"\n                                value={negativePrompt}\n                                onChange={(e) =>\n                                    setNegativePrompt(e.target.value)\n                                }\n                            />\n                            <span className=\"helptext\">\n                                Try descriptive words like \"blurry\" or\n                                \"distorted\"\n                            </span>\n                        </div>\n                        {!seed && <div className=\"form-group\">\n                            <label htmlFor=\"count\">Count: {count}</label>\n                            {/* range slider from 1 to 20 */}\n                            <input\n                                type=\"range\"\n                                className=\"form-control-range\"\n                                id=\"count\"\n                                min=\"1\"\n                                max=\"10\"\n                                value={count}\n                                onChange={(e) =>\n                                    setCount(parseInt(e.target.value))\n                                }\n                            />\n                            <span className=\"helptext\">\n                                This is how many images you want to generate\n                            </span>\n                        </div>}\n                        {(parentId || encodedImage) && (\n                            <div className=\"form-group\">\n                                {/* variation strength */}\n                                <label htmlFor=\"variationStrength\">\n                                    Variation Strength:&nbsp;\n                                    {(variationStrength * 100).toFixed(0)}%\n                                </label>\n                                <input\n                                    type=\"range\"\n                                    className=\"form-control-range\"\n                                    id=\"variationStrength\"\n                                    min=\"0.05\"\n                                    max=\"0.95\"\n                                    step=\"0.05\"\n                                    value={variationStrength}\n                                    onChange={(e) =>\n                                        setVariationStrength(\n                                            parseFloat(e.target.value)\n                                        )\n                                    }\n                                />\n                                <span className=\"helptext\">\n                                    This is how much variation you want to see\n                                    from the parent image\n                                </span>\n                            </div>\n                        )}\n                        {encodedImage && (\n                            // controlnet type - canny, hed, depth, normal, openpose, seg, scribble, fakescribbles, hough\n                            <div className=\"form-group\">\n                                <label htmlFor=\"controlNetType\">\n                                    Control Net Type\n                                </label>\n                                <select\n                                    className=\"form-control\"\n                                    id=\"controlNetType\"\n                                    value={controlnetType}\n                                    onChange={(e) =>\n                                        setControlnetType(e.target.value)\n                                    }\n                                >\n                                    <option value=\"\">None</option>\n                                    {controlnetTypes.map((type) => (\n                                        <option\n                                            value={type}\n                                            key={`type-${type}`}\n                                        >\n                                            {type}\n                                        </option>\n                                    ))}\n                                </select>\n                                <span className=\"helptext\">\n                                    Controlnet is an advanced way of controlling\n                                    the output of image generation. You can read\n                                    more about it{\" \"}\n                                    <a\n                                        target=\"_blank\"\n                                        href=\"https://bootcamp.uxdesign.cc/controlnet-and-stable-diffusion-a-game-changer-for-ai-image-generation-83555cb942fc\"\n                                    >\n                                        here.\n                                    </a>\n                                </span>\n                            </div>\n                        )}\n                        {/* cfg scale. Slider from 1 to 20 in increments of 0.1 */}\n                        <div className=\"form-group\">\n                            <label>\n                                CFG Scale: {cfgScale.toFixed(1)}\n                            </label>\n                            <input\n                                type=\"range\"\n                                className=\"form-control-range\"\n                                min=\"1\"\n                                max=\"20\"\n                                step=\"0.1\"\n                                value={cfgScale}\n                                onChange={(e) =>\n                                    setCfgScale(parseFloat(e.target.value))\n                                }\n                            />\n                            <span className=\"helptext\">\n                                Adjust the CFG scale to control how\n                                much the image looks like the prompt.\n                            </span>\n                        </div>\n                        <SeedInput\n                            seed={seed}\n                            setSeed={setSeed}\n                        />\n\n                        <div\n                            className=\"form-group\"\n                            style={{ minHeight: \"20px\" }}\n                        >\n                            <div className=\"float-right\">\n                                {parent && (\n                                    <button\n                                        type=\"button\"\n                                        className=\"btn btn-secondary light-button\"\n                                        onClick={handleCancel}\n                                    >\n                                        <i className=\"fas fa-times\"></i>\n                                        &nbsp;CANCEL\n                                    </button>\n                                )}\n                                <button\n                                    type=\"submit\"\n                                    className=\"btn btn-primary\"\n                                    style={{ marginLeft: \"8px\" }}\n                                    disabled={!prompt || creating}\n                                >\n                                    {/* paintbrush button */}\n                                    {!creating && (\n                                        <i className=\"fas fa-paint-brush\"></i>\n                                    )}\n                                    {/* spinner button */}\n                                    {creating && (\n                                        <i className=\"fas fa-spinner fa-spin\"></i>\n                                    )}\n                                    &nbsp;PAINT\n                                </button>\n                                {encodedImage && (\n                                    <button\n                                        type=\"button\"\n                                        className=\"btn btn-secondary light-button\"\n                                        onClick={handleEdit}\n                                        style={{ marginLeft: \"8px\" }}\n                                        disabled={!prompt || creating}\n                                    >\n                                        <i className=\"fas fa-edit\"></i>\n                                        &nbsp;EDIT\n                                    </button>\n                                )}\n                            </div>\n                        </div>\n                    </div>\n                )}\n            </div>\n        </form>\n    );\n};\n","import { aspectRatios } from \"./aspecRatios\";\n\nexport function getUpscaleLevel(width: number, height: number): number {\n    for (let i = 0; i < aspectRatios.length; i++) {\n        const aspectRatio = aspectRatios[i];\n        if (width * height <= aspectRatio.width * aspectRatio.height) {\n            return 0;\n        }\n        // if (width === aspectRatio.width && height === aspectRatio.height) {\n        //     return upscaleLevel;\n        // }\n    }\n    width /= 2;\n    height /= 2;\n    for (let i = 0; i < aspectRatios.length; i++) {\n        const aspectRatio = aspectRatios[i];\n        if (width * height <= aspectRatio.width * aspectRatio.height) {\n            return 1;\n        }\n        // if (width === aspectRatio.width && height === aspectRatio.height) {\n        //     return upscaleLevel;\n        // }\n    }\n    return 2;\n}\n","export function sleep(ms: number): Promise<void> {\n    return new Promise(resolve => window.setTimeout(resolve, ms));\n}\n","\nexport const supportedModels = [\n    \"Epic Diffusion\",\n    \"Rev Animated\",\n    \"Anything v3\",\n    \"Hentai Diffusion\",\n    \"Ranma Diffusion\",\n    \"URPM\",\n    \"Deliberate\",\n    \"GTA5 Artwork Diffusion\",\n    \"ChilloutMix\",\n    \"Realism Engine\",\n    \"AIO Pixel Art\",\n    \"Microworlds\",\n    \"Microchars\",\n    \"OrbAI\",\n    \"App Icon Diffusion\",\n];\n\n// canny, hed, depth, normal, openpose, seg, scribble, fakescribbles, hough\nexport const controlnetTypes = [\n    \"canny\",\n    \"hed\",\n    \"depth\",\n    \"normal\",\n    \"openpose\",\n    \"seg\",\n    \"scribble\",\n    \"fakescribbles\",\n    \"hough\",\n]","import React, { FC, useEffect, useState } from 'react';\nimport moment from \"moment\";\n\n// implement an error notification component\n// error message and timestamp are passed in as props\n// but close button can make the error message disappear\n\n// show error when the timestamp or message changes with useEffect hook\n// hide error when the close button is clicked\n\ninterface Props {\n    message: string | null;\n    timestamp: number;\n}\n\ninterface AlertProps {\n    message: string;\n    timestamp: number;\n    alertType: 'success' | 'info' | 'warning' | 'danger';\n}\n\nconst Alert: FC<AlertProps> = ({ message, timestamp, alertType }) => {\n    const [show, setShow] = useState(!!message);\n\n    useEffect(() => {\n        setShow(!!message);\n        // set a timeout of 10 seconds to hide the message if it is currently showing\n        if (message) {\n            const timeout = setTimeout(() => {\n                setShow(false);\n            }, 10000);\n            return () => {\n                clearTimeout(timeout);\n            };\n        }\n    }, [message, timestamp]);\n\n    if (!show) {\n        return null;\n    }\n\n    return (\n        <div className={`alert alert-${alertType} ${show ? 'show' : 'hide'}`}>\n            <button\n                type=\"button\"\n                className=\"close\"\n                onClick={() => setShow(false)}\n            >\n                &times;\n            </button>\n            {message}\n        </div>\n    );\n};\n\nexport const ErrorNotification: FC<Props> = ({ message, timestamp }) => {\n    return (\n        <Alert message={message || ''} timestamp={timestamp} alertType=\"danger\" />\n    );\n};\n\nexport const SuccessNotification: FC<Props> = ({ message, timestamp }) => {\n    return (\n        <Alert message={message || ''} timestamp={timestamp} alertType=\"success\" />\n    );\n};\n","import React, { useState, useEffect } from \"react\";\nimport { Renderer } from \"./renderer\";\nimport { Cursor, Rect } from \"./models\";\nimport { Tool, BaseTool } from \"./tool\";\nimport { AspectRatioSelector } from \"../../components/AspectRatioSelector\";\nimport { getUpscaleLevel } from \"../../lib/upscale\";\nimport {\n    DEFAULT_ASPECT_RATIO,\n    aspectRatios,\n    getClosestAspectRatio,\n} from \"../../lib/aspecRatios\";\nimport { ZoomHelper } from \"./zoomHelper\";\nimport { runInThisContext } from \"vm\";\n\nexport class SelectionTool extends BaseTool implements Tool {\n    private selectionOverlay: Rect | undefined;\n    private selectionOverlayPreview: Rect | undefined;\n    private outpaint?: boolean;\n\n    // private selectionWidth: number = 512;\n    // private selectionHeight: number = 512;\n\n    private panning = false;\n\n    // TODO: size modifier to make the selection overlay smaller\n\n    constructor(renderer: Renderer) {\n        super(renderer, \"select\");\n    }\n\n    updateArgs(args: any) {\n        args = {\n            ...this.getArgs(),\n            ...args,\n        }\n        super.updateArgs(args);\n        this.selectionOverlay = args.selectionOverlay || {\n            x: 0,\n            y: 0,\n            width: 512,\n            height: 512,\n        };\n        this.outpaint = args.outpaint;\n        if (!this.outpaint) {\n            this.selectionOverlay = this.clamp(this.selectionOverlay!);\n        }\n        this.sync();\n    }\n\n    private clamp(rect: Rect): Rect {\n        const imageWidth = this.renderer.getWidth();\n        const imageHeight = this.renderer.getHeight();\n        let x = rect.x;\n        let y = rect.y;\n        let width = rect.width;\n        let height = rect.height;\n        // clamp to the canvas\n        x = Math.max(0, Math.min(x, imageWidth - this.selectionOverlay!.width));\n        y = Math.max(0, Math.min(y, imageHeight - rect.height));\n        x = Math.min(x, imageWidth - rect.width);\n        y = Math.min(y, imageHeight - rect.height);\n        width = Math.min(width, imageWidth);\n        height = Math.min(height, imageHeight);\n        return {\n            x: x,\n            y: y,\n            width: width,\n            height: height,\n        };\n    }\n\n    private sync(): void {\n        this.renderer.setSelectionOverlay(this.selectionOverlay);\n        this.renderer.setSelectionOverlayPreview(this.selectionOverlayPreview);\n    }\n\n    onMouseDown(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        if (event.type == \"touch\") {\n            this.onMouseMove(event);\n        } else if (event.button === 0) {\n            this.selectionOverlay = this.selectionOverlayPreview;\n            this.selectionOverlayPreview = undefined;\n            this.sync();\n            this.updateArgs({\n                selectionOverlay: this.selectionOverlay,\n            });\n        } else if (event.button === 1) {\n            this.panning = true;\n        }\n    }\n\n    onMouseMove(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        const imageWidth = this.renderer.getWidth();\n        const imageHeight = this.renderer.getHeight();\n        if (this.panning) {\n            this.zoomHelper.onPan(event);\n        } else {\n            let { x, y } = this.zoomHelper.translateMouseToCanvasCoordinates(\n                event.nativeEvent.offsetX,\n                event.nativeEvent.offsetY\n            );\n\n            // round to the nearest 16 pixels\n            x = Math.round(x / 16) * 16;\n            y = Math.round(y / 16) * 16;\n            // offset by -256 to center the rect\n            x -= 256;\n            y -= 256;\n\n            this.selectionOverlayPreview = {\n                x: x,\n                y: y,\n                width: this.selectionOverlay!.width,\n                height: this.selectionOverlay!.height,\n            };\n\n            if (!this.outpaint) {\n                this.selectionOverlayPreview = this.clamp(this.selectionOverlayPreview);\n            }\n\n            \n            this.sync();\n        }\n    }\n\n    onMouseUp(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        if (event.button === 0 && event.type == \"touch\") {\n            this.selectionOverlay = this.selectionOverlayPreview;\n            this.selectionOverlayPreview = undefined;\n            this.sync();\n            this.updateArgs({\n                selectionOverlay: this.selectionOverlay,\n            });\n        }\n        this.panning = false;\n    }\n\n    onMouseLeave(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        this.selectionOverlayPreview = undefined;\n        this.panning = false;\n        this.sync();\n    }\n\n    onWheel(event: WheelEvent) {\n        this.zoomHelper.onWheel(event);\n    }\n\n    destroy() {\n        // this.renderer.setSelectionOverlay(undefined);\n        this.renderer.setSelectionOverlayPreview(undefined);\n        return true;\n    }\n}\n\ninterface ControlsProps {\n    renderer: Renderer;\n    tool: Tool;\n    /** Lock aspect ratio for smaller images */\n    lockAspectRatio?: boolean;\n    outpaint?: boolean;\n}\n\nexport const Controls: React.FC<ControlsProps> = ({\n    renderer,\n    tool,\n    lockAspectRatio,\n    outpaint,\n}) => {\n    const upscaleLevel = getUpscaleLevel(\n        renderer.getWidth(),\n        renderer.getHeight()\n    );\n    const [aspectRatio, setAspectRatio] = useState(DEFAULT_ASPECT_RATIO);\n    const [size, setSize] = useState(1);\n\n    useEffect(() => {\n        const upscaleLevel = getUpscaleLevel(\n            renderer.getWidth(),\n            renderer.getHeight()\n        );\n        // lock aspect ratio to image\n        if (upscaleLevel === 0 && lockAspectRatio) {\n            const aspectRatio = getClosestAspectRatio(\n                renderer.getWidth(),\n                renderer.getHeight()\n            );\n            setAspectRatio(aspectRatio.id);\n            tool.updateArgs({\n                selectionOverlay: {\n                    x: 0,\n                    y: 0,\n                    width: aspectRatio.width,\n                    height: aspectRatio.height,\n                },\n                outpaint,\n            });\n        } else {\n            const args = tool.getArgs();\n            if (args.selectionOverlay) {\n                // restore args\n                const aspectRatio = getClosestAspectRatio(\n                    args.selectionOverlay.width,\n                    args.selectionOverlay.height\n                );\n                setAspectRatio(aspectRatio.id);\n                setSize(args.selectionOverlay.width / aspectRatio.width);\n                tool.updateArgs(args);\n            } else {\n                // set default args\n                args.selectionOverlay = {\n                    x: 0,\n                    y: 0,\n                    width: aspectRatios[aspectRatio].width,\n                    height: aspectRatios[aspectRatio].height,\n                };\n                args.outpaint = outpaint;\n                tool.updateArgs(args);\n            }\n        }\n    }, [tool]);\n\n    function onChange(aspectRatioId: number, size: number) {\n        const args = tool.getArgs();\n        const aspectRatio = aspectRatios[aspectRatioId];\n        if (args.selectionOverlay) {\n            const xDiff =\n                args.selectionOverlay.width - aspectRatio.width * size;\n            const yDiff =\n                args.selectionOverlay.height - aspectRatio.height * size;\n            args.selectionOverlay.width = Math.round(aspectRatio.width * size);\n            args.selectionOverlay.height = Math.round(\n                aspectRatio.height * size\n            );\n            args.selectionOverlay.x += xDiff / 2;\n            args.selectionOverlay.y += yDiff / 2;\n            if (!outpaint) {\n                // clamp to canvas\n                args.selectionOverlay.x = Math.round(\n                    Math.max(\n                        0,\n                        Math.min(\n                            args.selectionOverlay.x,\n                            renderer.getWidth() - args.selectionOverlay.width\n                        )\n                    )\n                );\n                args.selectionOverlay.y = Math.round(\n                    Math.max(\n                        0,\n                        Math.min(\n                            args.selectionOverlay.y,\n                            renderer.getHeight() - args.selectionOverlay.height\n                        )\n                    )\n                );\n            }\n        }\n        tool.updateArgs({\n            selectionOverlay: args.selectionOverlay,\n        });\n    }\n\n    return (\n        <>\n            {upscaleLevel > 0 && (\n                <AspectRatioSelector\n                    aspectRatio={aspectRatio}\n                    onChange={(aspectRatioId) => {\n                        onChange(aspectRatioId, size);\n                        setAspectRatio(aspectRatioId);\n                    }}\n                />\n            )}\n            <div className=\"form-group\">\n                <label htmlFor=\"size\" style={{ width: \"100%\" }}>\n                    Size\n                    <small\n                        className=\"form-text text-muted\"\n                        style={{ float: \"right\" }}\n                    >\n                        {Math.round(size * 100)}%\n                    </small>\n                </label>\n                {/* range from 0.1 to 1 */}\n                <input\n                    type=\"range\"\n                    className=\"form-control-range\"\n                    id=\"size\"\n                    min=\"1\"\n                    max=\"2\"\n                    step=\"0.1\"\n                    value={size}\n                    onChange={(event) => {\n                        onChange(aspectRatio, parseFloat(event.target.value));\n                        setSize(parseFloat(event.target.value));\n                    }}\n                />\n            </div>\n        </>\n    );\n};\n","import React, { FC, useEffect, useRef, useState } from \"react\";\n\nimport { aspectRatios, DEFAULT_ASPECT_RATIO, getClosestAspectRatio } from \"../lib/aspecRatios\";\n\ninterface Props {\n    aspectRatio: number;\n    onChange: (aspectRatio: number) => void;\n    disabled?: boolean;\n}\n\nexport const AspectRatioSelector: FC<Props> = ({ aspectRatio, onChange, disabled }) => {\n    const aspectRatioDetails = aspectRatios[aspectRatio];\n    return (\n        <div className=\"form-group\">\n            <div\n                style={{\n                    minHeight: \"140px\",\n                    display: \"flex\",\n                    alignItems: \"center\",\n                }}\n            >\n                {/* aspect ratio slider, goes from 0 -> aspectRatios.length - 1 */}\n                <div\n                    style={{\n                        width: aspectRatioDetails.width / 8,\n                        height: aspectRatioDetails.height / 8,\n                        // dotted line options: dotted, dashed, solid, double, groove, ridge, inset, outset, none, hidden\n                        border: \"1px dashed white\",\n                        margin: \"auto\",\n                    }}\n                ></div>\n            </div>\n            <label style={{width: \"100%\"}}>\n                Aspect Ratio\n                <small className=\"form-text text-muted\" style={{float: \"right\"}}>\n                    {aspectRatioDetails.displayName}\n                </small>\n            </label>\n            <input\n                type=\"range\"\n                disabled={disabled}\n                className=\"form-control-range\"\n                min={0}\n                max={aspectRatios.length - 1}\n                value={aspectRatio}\n                onChange={(e) => {\n                    onChange(parseInt(e.target.value));\n                }}\n            />\n        </div>\n    );\n};\n"],"sourceRoot":""}