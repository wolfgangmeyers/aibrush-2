{"version":3,"sources":["lib/upscale.ts","components/Alerts.tsx","components/AspectRatioSelector.tsx","lib/kvstore.ts","pages/image-editor/PaletteButton.tsx","components/PendingJobsThumbnail.tsx","components/CopyToClipboardIcon.tsx","components/Swipe.tsx","components/ImagePopup.tsx","pages/image-editor/smudge-tool.tsx","pages/image-editor/inpaint-tool.tsx","pages/Homepage.tsx","pages/image-editor/mask-editor-controls.tsx","pages/image-editor/enhance-tool.tsx","client/api.ts","client/base.ts","client/common.ts","lib/aspecRatios.ts","pages/image-editor/ImageEditor.tsx","pages/image-editor/renderer.ts","pages/image-editor/import-export.tsx","pages/image-editor/augment-tool.tsx","components/PendingJobs.tsx","components/OutOfCreditsModal.tsx","components/PaymentStatusModal.tsx","lib/hordeclient.ts","lib/imageutil.ts","lib/recentList.ts","pages/image-editor/zoomHelper.tsx","pages/image-editor/tool.ts","lib/localImagesStore.ts","pages/Login.tsx","components/TokenRefresher.tsx","components/Healthchecker.tsx","lib/apisocket.ts","pages/DiscordLogin.tsx","pages/LocalDeletedImages.tsx","pages/SavedImagesPage.tsx","lib/imagesCache.ts","pages/TestPage.tsx","components/CreditsBalance.tsx","lib/hordegenerator.ts","components/HordeUser.tsx","App.tsx","config.ts","reportWebVitals.ts","index.tsx","components/BusyModal.tsx","lib/recentLoras.ts","components/LoraSelector.tsx","components/CostIndicator.tsx","components/ProgressBar.tsx","lib/sleep.ts","lib/credits.ts","components/SelectedLora.tsx","components/LoraTriggers.tsx","components/ImageThumbnail.tsx","lib/supportedModels.ts","components/SeedInput.tsx","components/TextInputWithHistory.tsx","components/ImagePrompt.tsx","components/ModelList.tsx","lib/localcache.ts","components/ModelSelector.tsx","components/ResetToDefaultIcon.tsx","pages/image-editor/ColorPicker.tsx","pages/image-editor/pencil-tool.tsx","pages/image-editor/selection-tool.tsx"],"names":["getUpscaleLevel","width","height","i","aspectRatios","length","aspectRatio","Alert","message","timestamp","alertType","useState","show","setShow","useEffect","timeout","setTimeout","clearTimeout","className","type","onClick","ErrorNotification","AspectRatioSelector","onChange","disabled","aspectRatioDetails","style","minHeight","display","alignItems","border","margin","float","displayName","min","max","value","e","parseInt","target","KVStore","dbConfig","db","this","Promise","resolve","reject","request","indexedDB","open","dbName","onupgradeneeded","result","createObjectStore","storeName","onsuccess","onerror","error","createDB","key","a","getDB","transaction","objectStore","get","put","delete","getAll","PaletteButton","selectedColor","color","onColorSelected","displayColorPicker","setDisplayColorPicker","tmpColor","setTmpColor","backgroundColor","onDoubleClick","position","zIndex","hex","onChangeComplete","marginRight","marginLeft","PendingJobsThumbnail","pendingCount","processingCount","hover","setHover","icon","marginTop","onMouseEnter","onMouseLeave","backgroundImage","backgroundSize","cursor","background","lineHeight","fontSize","marginBottom","CopyToClipboardIcon","text","copied","setCopied","onCopy","undefined","Swipe","onSwipe","children","touchStart","setTouchStart","touchEnd","setTouchEnd","onTouchStart","targetTouches","clientX","onTouchMove","onTouchEnd","distance","isLeftSwipe","ImagePopup","assetsUrl","image","censorNSFW","onClose","onDelete","onFork","onEdit","onNSFW","onSave","img","useRef","src","id","updated_at","imageData","score","params","negative_prompt","negative_score","showNSFW","setShowNSFW","current","title","label","prompt","indexOf","substring","swipeArrowMargin","window","innerWidth","maxImageHeight","innerHeight","Modal","onHide","size","Header","closeButton","Title","Body","left","top","transform","padding","direction","ref","maxWidth","maxHeight","filter","nsfw","alt","right","status","displayStatus","charAt","toUpperCase","slice","StatusEnum","Pending","Processing","Completed","Saved","Error","statusBadge","model","href","seed","SmudgeTool","renderer","brushSize","brushOpacity","lastX","lastY","panning","smudging","_dirty","dirtyListener","dirty","setCursor","radius","x","y","args","sync","event","zoomHelper","translateMouseToCanvasCoordinates","nativeEvent","offsetX","offsetY","onPan","smudgeLine","onWheel","button","copyEditImageFromBaseImage","listener","saveListener","setEditImage","commitSelection","encodedImage","getEncodedImage","BaseTool","SmudgeControls","tool","setBrushSize","setBrushOpacity","setDirty","onDirty","updateArgs","Math","round","step","parseFloat","visibility","cancel","confirm","InpaintTool","axios","create","selectionTool","negativePrompt","count","loras","worker","idCounter","_state","stateHandler","selectionControlsListener","selectedImageDataIndex","selectedImageData","erasing","progressListener","errorListener","SelectionTool","selectSupported","state","outpaint","getArgs","ImageUtilWorker","handler","destroy","imageWidth","getWidth","imageHeight","getHeight","selectionWidth","selectionOverlay","erasePoint","onMouseDown","render","updateCursor","onMouseMove","onMouseUp","alphaMask","loadImageDataElement","imageElement","canvas","document","createElement","ctx","getContext","drawImage","getImageData","newId","processRequest","alphaMode","alphaPixels","data","feather","pixels","featherWidth","resp","updatedImageData","ImageData","remove","snapshot","undo","clearRedoStack","progress","generator","notifyError","getSelectionOverlay","console","expandToOverlay","updateProgress","encodedMask","getEncodedMask","maskData","input","defaultArgs","encoded_image","encoded_mask","parent","denoising_strength","closestAspectRatio","getClosestAspectRatio","temporary","generateImages","loaded","total","job","newImages","completed","startTime","moment","sleep","checkGenerationJob","images","all","map","loadImageData","diff","client","deleteImageRequest","sort","b","created_at","push","phrases","negative_phrases","selection_overlay","InpaintControls","setCount","setPrompt","setNegativePrompt","setState","setProgress","setError","setoutpaint","setModel","selectingModel","setSelectingModel","selectingLora","setSelectingLora","selectedLoras","setSelectedLoras","selectedLorasFromConfigs","then","selected","onChangeState","onProgress","onError","role","data-dismiss","aria-label","aria-hidden","checked","htmlFor","onAddTrigger","trigger","parts","endsWith","join","lora","onRemove","updated","selectedLora","config","name","onRemoveLora","imagesCost","submit","when","onCancel","onSelectModel","initialSelectedModel","inpainting","onConfirm","onAddLora","anonymousClient","defaults","headers","common","Homepage","api","localImages","paymentStatus","creating","setCreating","selectedImage","setSelectedImage","parentImage","setParentImage","loadingParent","setLoadingParent","savingImage","uploadProgress","setUploadingProgress","showPendingImages","setShowPendingImages","setImages","jobs","setJobs","err","setErr","errTime","setErrTime","hasMore","setHasMore","search","setSearch","searchDebounce","setSearchDebounce","bulkDeleteSelecting","setBulkDeleteSelecting","bulkDeleting","setBulkDeleting","bulkDeleteIds","setBulkDeleteIds","setCensorNSFW","outOfCredits","setOutOfCredits","useParams","history","useHistory","location","useLocation","valueOf","handle","find","getImage","replace","onSubmit","scrollTo","convertPNGToJPG","response","includes","onEditNewImage","createBlankImage","newImage","created_by","steps","uuid","saveImage","updatedImage","loadImages","log","add","listImages","sortImages","lock","pollImages","checkGenerationJobs","updatedJobs","pendingJobs","timerHandle","setInterval","clearInterval","qs","parse","ignoreQueryPrefix","getImageDownloadUrls","downloadUrls","image_url","responseType","binaryImageData","Buffer","from","base64ImageData","toString","loadParent","isPendingOrProcessing","onLoadMore","minUpdatedAt","forEach","imagesById","reduce","acc","deleted_at","nextImage","index","findIndex","deleteImage","onDeleteJob","j","onThumbnailClicked","onConfirmBulkDelete","promises","Object","keys","completedOrSavedImages","processingJobs","textAlign","paddingBottom","placeholder","Toggle","variant","Menu","Item","dataLength","next","loader","bulkDelete","newIndex","colors","MaskEditor","onRevert","brushColor","setBrushColor","flexDirection","flexWrap","invertMask","eraserWidthModifier","EnhanceTool","pencilTool","variationStrength","maskHandler","PencilTool","selectionArgs","baseWidth","eraserRadius","floor","relX","relY","startX","startY","endX","endY","sqrt","pow","alphaPct","alpha","req","isMasked","deleteMask","createMask","ceil","EnhanceControls","setVariationStrength","setIsMasked","onChangeMask","cost","calculateImagesCost","ProgressBar","lockAspectRatio","ResetToDefaultIcon","LoraTriggers","SelectedLora","CostIndicator","erase","mask","ModelSelector","AddMetricItemTypeEnum","HealthcheckStatusEnum","ImageParamsControlnetTypeEnum","ImageParamsAugmentationEnum","UpsertWorkerInputStatusEnum","WorkerStatusEnum","BASE_PATH","BaseAPI","configuration","basePath","globalAxios","RequiredError","field","msg","DUMMY_BASE_URL","assertParamExists","functionName","paramName","paramValue","setSearchParams","url","searchParams","URLSearchParams","objects","object","Array","isArray","item","append","set","serializeDataIfNeeded","requestOptions","nonString","isJsonMime","JSON","stringify","toPathString","pathname","hash","createRequestFunction","axiosArgs","axiosRequestArgs","options","AIBrushApiFp","localVarAxiosParamCreator","addMetrics","addMetricsInput","localVarUrlObj","URL","baseOptions","localVarRequestOptions","method","localVarQueryParameter","localVarHeaderParameter","query","headersFromBaseOptions","batchGetImages","fields","batchGetImagesInput","createDepositCode","createDepositCodeInput","createStripeSession","createStripeSessionInput","localVarPath","encodeURIComponent","String","discordLogin","getAssetsUrl","getCredits","getFeatures","getGlobalSettings","getImageUploadUrls","getModels","healthcheck","isAdmin","limit","login","loginInput","redeemDepositCode","code","refresh","refreshLoginInput","updateGlobalSettings","updateGlobalSettingsRequest","verify","verifyLoginInput","AIBrushApiAxiosParamCreator","localVarAxiosArgs","AIBrushApi","AspectRatio","cfg","newWidth","newHeight","DEFAULT_ASPECT_RATIO","tests","aRatio","bRatio","abs","ImageEditor","showSelectionControls","setShowSelectionControls","tools","iconClass","constructor","r","renderControls","t","onShowSelectionControls","defaultColors","setImage","setRenderer","setTool","toolConfig","setToolConfig","canUndo","setCanUndo","canRedo","setCanRedo","busyMessage","setBusyMessage","canvasRef","onSelectTool","toolconfig","newTool","onSaveImage","saveNewImage","newArgs","preventDefault","localImage","imageSrc","download_urls","Image","onload","createRenderer","setBaseImage","loadImage","onSnapshot","addEventListener","removeEventListener","updateCanvasSize","resetView","buttonClass","renderTool","redo","verticalAlign","touchAction","userSelect","select","Renderer","undoStack","redoStack","currentSnapshot","backgroundLayer","baseImageLayer","editLayer","maskLayer","selectionOverlayPreview","hasSelection","zoom","snapshotListener","initializeBackgroundLayer","allowRedo","pop","clearRect","putImageData","notifySnapshotListener","shift","context","setTransform","globalAlpha","drawOverlay","resetMask","fillStyle","fillRect","pattern","createPattern","createCheckeredPattern","color1","color2","updateSelectionOverlay","setSelectionOverlay","updateZoomAndOffset","lineWidth","strokeStyle","strokeRect","beginPath","arc","PI","stroke","fill","moveTo","lineTo","toDataURL","split","selection","imageDataToEncodedImage","erasure","layer","convertErasureToMask","imageLayer","brushx","brushy","absx","leftEdge","rightEdge","topEdge","bottomEdge","absy","contains","x1","y1","x2","y2","lineCap","unitVector","totalRed","totalGreen","totalBlue","averageRed","averageGreen","averageBlue","pixel","g","rgbToHex","minX","minY","newCanvas","ImportExportControls","backupImage","setBackupImage","files","byteString","atob","buffer","ArrayBuffer","intArray","Uint8Array","charCodeAt","blob","Blob","saveAs","onExport","AugmentControls","activeAugmentation","setActiveAugmentation","imageWorker","setImageWorker","lastError","setLastError","augmentImageData","augmentation","c","imageDataToCanvas","start","augmentImage","processingImage","checkAugmentation","deleteInterrogationRequest","decodeImage","upscaleFactor","newImageData","onAugment","fixImageSize","PendingJobs","imageIcon","pendingDiv","Footer","OutOfCreditsModal","centered","to","PaymentStatusModal","handleClose","baseUrl","HordeClient","apiKey","payload","onUploadProgress","api_key","post","submitReq","submitResults","reqId","chkReq","chkResults","waiting","processing","restarted","finished","done","retrieveReq","resultsJson","faulted","generations","censored","webpImageResponse","forms","form","dataUrl","splitImage","initImage","tile_size","num_tiles_x","num_tiles_y","tiles","x0","y0","tile","numTilesX","numTilesY","tileSize","mergeTiles","splitResult","tileCanvas","resizeImage","numWorkers","workers","callbacks","Worker","process","onMessage","bind","postMessage","terminate","startsWith","resizeEncodedImage","format","base64","RecentList","listSize","modelsJson","localStorage","getItem","models","setItem","removed","recentModels","getRecentItems","modelIndex","splice","unshift","saveRecentItems","recentNegativePrompts","recentLoras","ZoomHelper","startTouches","startZoom","startOffsetX","startOffsetY","originalZoom","getZoom","getOffsetX","getOffsetY","canvasPoint","deltaY","xDiff","yDiff","movementX","movementY","rect","getBoundingClientRect","getCanvas","touches","canvasRect","startTouch1","startTouch2","touch1","touch2","startDistance","clientY","startCenterX","startCenterY","centerX","centerY","startCanvasPoint","xDiff2","yDiff2","mouseX","mouseY","touchHandle","_pinchZooming","_panning","_updateCursor","touch","identifier","pageX","pageY","screenX","screenY","LocalImagesStore","evt","imagesStore","objectStoreNames","keyPath","createIndex","unique","_","legacyImage","stable_diffusion_strength","iterations","store","hydrateImage","cleanupDeletedImages","hardDeleteImage","range","IDBKeyRange","lowerBound","upperBound","openCursor","toLowerCase","continue","imagesRequest","clear","olderThan","getDeletedImages","deletedImages","subtract","Login","props","email","setEmail","emailSubmitted","setEmailSubmitted","setCode","inviteCode","onLogin","match","invite_code","onVerify","fontWeight","aria-describedby","trim","host","protocol","redirectUri","discordLink","TokenRefresher","onCredentialsRefreshed","onCredentialsExpired","credentials","interval","refreshToken","loginResult","catch","Healthchecker","healthCheck","setHealthCheck","ApiSocket","accessToken","messageListeners","l","close","WebSocket","onopen","send","onmessage","onclose","connect","DiscordLogin","LocalDeletedImages","deleting","setDeleting","onDeleteImage","onDeleteAllImages","clearDeletedImages","onRestoreImage","goBack","borderBottom","ImageThumbnail","paddingTop","BusyModal","savedImagesCache","kvstore","order","batchGetIds","deleteItem","savedImage","ids","batchResult","SavedImagesPage","apiSocket","imagesResult","latestCursor","updatedImages","deletedIds","uniqueIds","Set","addMessageListener","removeMessageListener","aScore","bScore","pendingOrProcessingImages","pendingImages","processingImages","Dropdown","TestPage","originalImage","setOriginalImage","upscaledImage","setUpscaledImage","upscaleImageData","onImageSelected","originalImageData","upscaledTile","upscaledImageData","upscale","feathered","upscaledCanvas","CreditsBalance","apisocket","fetchHordeData","hordeStateMap","_triggers","_lastUpdated","initTriggers","modelInfo","addTrigger","triggerList","toLocaleLowerCase","augmentationToForm","face_restore","remove_background","stripWeightsFromPrompt","combinePrompts","separator","maxPromptLength","promptLength","negativePromptLength","halfLength","HordeGenerator","n","karras","sampler_name","cfg_scale","hires_fix","post_processing","control_type","controlnet_type","strength","clip","censor_nsfw","trusted_workers","slow_workers","r2","source_processing","source_image","source_mask","initiateImageGeneration","jobId","checkImageJob","checkResult","fetchImageResults","results","initiateAlchemistImageInterrogation","checkInterrogationStatus","fetchInterrogationResult","HordeUser","user","setUser","setApiKey","showModal","setShowModal","apiKeyInput","setApiKeyInput","storedUser","storedApiKey","updateApiKey","loadUserFromStorage","validateApiKey","accept","apikey","username","Form","Group","controlId","Label","Control","Button","apiUrl","httpClient","hordeClient","updateHttpClient","App","setCredentials","setAssetsUrl","features","setFeatures","onLogout","removeItem","init","assets_url","storedCredentials","updateToken","path","exact","bottom","privacy_uri","terms_uri","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","getElementById","backdrop","keyboard","migrateToIDs","recentList","getItems","migrateRequired","reverse","addItem","recentLoraIDs","loraID","savedLora","loraId","configs","getLora","LoraModal","inputValue","setInputValue","setStrength","recentItems","setRecentItems","busy","setBusy","handleSearch","useCallback","modelId","listRecentLoras","items","fetchRecentLoras","filteredItems","recentItem","as","Row","Col","sm","ListGroup","overflowY","action","column","dangerouslySetInnerHTML","__html","DOMPurify","sanitize","description","allowCommercialUse","creator","tags","tag","modelVersions","version","baseModel","trainedWords","word","idx","addLora","aria-valuenow","aria-valuemin","aria-valuemax","ms","SelectedLoraTag","allTriggers","renderTooltip","placement","overlay","retry","setRetry","backgroundRepeat","backgroundPosition","readOnly","controlnetTypes","SeedInput","setSeed","useCustomSeed","setUseCustomSeed","FormGroup","FormCheck","random","FormControl","TextInputWithHistory","onBlur","onSelect","eventKey","overflow","defaultNegativePrompt","ImagePrompt","setAspectRatio","parentId","setParentId","advancedView","setAdvancedView","setEncodedImage","controlnetType","setControlnetType","cfgScale","setCfgScale","setSize","defaultAspectRatio","setAspectRatioDetails","originalWidth","setOriginalWidth","originalHeight","setOriginalHeight","resetState","handleSubmit","bestMatch","scale","file","HTMLCanvasElement","scaledAspectRatio","textDecoration","aspectRatioId","toFixed","ModelList","selectedModel","setMaxHeight","handleResize","active","cache","storage","ttl","expiry","Date","now","itemStr","initialValue","cachedValue","setValue","useCache","setModels","setSelectedModel","searchTerm","setSearchTerm","filteredModels","setSortedModels","recentModelNames","recentModelIndices","sortedModels","aIndex","bIndex","res","values","showcases","ColorPicker","isDrawing","colorPicking","lastPickedColor","colorPickedListener","drawPoint","getPixel","drawLine","Controls","palette","setPalette","addToPalette","onColorPicked","beginColorpicker","clamp","setSelectionOverlayPreview","upscaleLevel"],"mappings":"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","file":"static/js/main.c0d6305b.chunk.js","sourcesContent":["import { aspectRatios } from \"./aspecRatios\";\n\nexport function getUpscaleLevel(width: number, height: number): number {\n    for (let i = 0; i < aspectRatios.length; i++) {\n        const aspectRatio = aspectRatios[i];\n        if (width * height <= aspectRatio.width * aspectRatio.height) {\n            return 0;\n        }\n        // if (width === aspectRatio.width && height === aspectRatio.height) {\n        //     return upscaleLevel;\n        // }\n    }\n    width /= 2;\n    height /= 2;\n    for (let i = 0; i < aspectRatios.length; i++) {\n        const aspectRatio = aspectRatios[i];\n        if (width * height <= aspectRatio.width * aspectRatio.height) {\n            return 1;\n        }\n        // if (width === aspectRatio.width && height === aspectRatio.height) {\n        //     return upscaleLevel;\n        // }\n    }\n    return 2;\n}\n","import React, { FC, useEffect, useState } from 'react';\nimport moment from \"moment\";\n\n// implement an error notification component\n// error message and timestamp are passed in as props\n// but close button can make the error message disappear\n\n// show error when the timestamp or message changes with useEffect hook\n// hide error when the close button is clicked\n\ninterface Props {\n    message: string | null;\n    timestamp: number;\n}\n\ninterface AlertProps {\n    message: string;\n    timestamp: number;\n    alertType: 'success' | 'info' | 'warning' | 'danger';\n}\n\nconst Alert: FC<AlertProps> = ({ message, timestamp, alertType }) => {\n    const [show, setShow] = useState(!!message);\n\n    useEffect(() => {\n        setShow(!!message);\n        // set a timeout of 10 seconds to hide the message if it is currently showing\n        if (message) {\n            const timeout = setTimeout(() => {\n                setShow(false);\n            }, 10000);\n            return () => {\n                clearTimeout(timeout);\n            };\n        }\n    }, [message, timestamp]);\n\n    if (!show) {\n        return null;\n    }\n\n    return (\n        <div className={`alert alert-${alertType} ${show ? 'show' : 'hide'}`}>\n            <button\n                type=\"button\"\n                className=\"close\"\n                onClick={() => setShow(false)}\n            >\n                &times;\n            </button>\n            {message}\n        </div>\n    );\n};\n\nexport const ErrorNotification: FC<Props> = ({ message, timestamp }) => {\n    return (\n        <Alert message={message || ''} timestamp={timestamp} alertType=\"danger\" />\n    );\n};\n\nexport const SuccessNotification: FC<Props> = ({ message, timestamp }) => {\n    return (\n        <Alert message={message || ''} timestamp={timestamp} alertType=\"success\" />\n    );\n};\n","import React, { FC, useEffect, useRef, useState } from \"react\";\n\nimport { aspectRatios, DEFAULT_ASPECT_RATIO, getClosestAspectRatio } from \"../lib/aspecRatios\";\n\ninterface Props {\n    aspectRatio: number;\n    onChange: (aspectRatio: number) => void;\n    disabled?: boolean;\n}\n\nexport const AspectRatioSelector: FC<Props> = ({ aspectRatio, onChange, disabled }) => {\n    const aspectRatioDetails = aspectRatios[aspectRatio];\n    return (\n        <div className=\"form-group\">\n            <div\n                style={{\n                    minHeight: \"140px\",\n                    display: \"flex\",\n                    alignItems: \"center\",\n                }}\n            >\n                {/* aspect ratio slider, goes from 0 -> aspectRatios.length - 1 */}\n                <div\n                    style={{\n                        width: aspectRatioDetails.width / 8,\n                        height: aspectRatioDetails.height / 8,\n                        // dotted line options: dotted, dashed, solid, double, groove, ridge, inset, outset, none, hidden\n                        border: \"1px dashed white\",\n                        margin: \"auto\",\n                    }}\n                ></div>\n            </div>\n            <label style={{width: \"100%\"}}>\n                Aspect Ratio\n                <small className=\"form-text text-muted\" style={{float: \"right\"}}>\n                    {aspectRatioDetails.displayName}\n                </small>\n            </label>\n            <input\n                type=\"range\"\n                disabled={disabled}\n                className=\"form-control-range\"\n                min={0}\n                max={aspectRatios.length - 1}\n                value={aspectRatio}\n                onChange={(e) => {\n                    onChange(parseInt(e.target.value));\n                }}\n            />\n        </div>\n    );\n};\n","export interface DBConfig {\n    dbName: string;\n    storeName: string;\n};\n\nexport class KVStore<T> {\n    private dbConfig: DBConfig;\n    private db: IDBDatabase | null = null;\n\n    constructor(dbConfig: DBConfig) {\n        this.dbConfig = dbConfig;\n    }\n\n    private async createDB(): Promise<IDBDatabase> {\n        return new Promise((resolve, reject) => {\n            const request = indexedDB.open(this.dbConfig.dbName);\n\n            request.onupgradeneeded = () => {\n                const db = request.result;\n                db.createObjectStore(this.dbConfig.storeName);\n            };\n\n            request.onsuccess = () => {\n                resolve(request.result);\n            };\n\n            request.onerror = () => {\n                reject(request.error);\n            };\n        });\n    }\n\n    private async getDB(): Promise<IDBDatabase> {\n        if (!this.db) {\n            this.db = await this.createDB();\n        }\n        return this.db;\n    }\n\n\n    async getItem(key: string): Promise<T | null> {\n        const db = await this.getDB();\n\n        return new Promise((resolve, reject) => {\n            const transaction = db.transaction(this.dbConfig.storeName);\n            const store = transaction.objectStore(this.dbConfig.storeName);\n            const request = store.get(key);\n\n            request.onsuccess = () => {\n                resolve(request.result);\n            };\n\n            request.onerror = () => {\n                resolve(null);\n            };\n        });\n    }\n\n    async setItem(key: string, value: T): Promise<void> {\n        const db = await this.getDB();\n\n        return new Promise((resolve, reject) => {\n            const transaction = db.transaction(\n                this.dbConfig.storeName,\n                \"readwrite\"\n            );\n            const store = transaction.objectStore(this.dbConfig.storeName);\n            const request = store.put(value, key);\n\n            request.onsuccess = () => {\n                resolve();\n            };\n\n            request.onerror = () => {\n                resolve();\n            };\n        });\n    }\n\n    async deleteItem(key: string): Promise<void> {\n        const db = await this.getDB();\n\n        return new Promise((resolve, reject) => {\n            const transaction = db.transaction(\n                this.dbConfig.storeName,\n                \"readwrite\"\n            );\n            const store = transaction.objectStore(this.dbConfig.storeName);\n            const request = store.delete(key);\n\n            request.onsuccess = () => {\n                resolve();\n            };\n\n            request.onerror = () => {\n                resolve();\n            };\n        });\n    }\n\n    async getAllItems(): Promise<T[]> {\n        const db = await this.getDB();\n\n        return new Promise((resolve, reject) => {\n            const transaction = db.transaction(this.dbConfig.storeName);\n            const store = transaction.objectStore(this.dbConfig.storeName);\n            const request = store.getAll();\n\n            request.onsuccess = () => {\n                resolve(request.result);\n            };\n\n            request.onerror = () => {\n                resolve([]);\n            };\n        });\n    }\n}\n","import React, { FC, useState, useEffect } from \"react\";\nimport { ChromePicker } from \"react-color\";\n\ninterface Props {\n    selectedColor: string;\n    color: string;\n    onClick: (color: string) => void;\n    onColorSelected?: (color: string) => void;\n}\n\nexport const PaletteButton: FC<Props> = ({\n    selectedColor,\n    color,\n    onClick,\n    onColorSelected,\n}) => {\n    const [displayColorPicker, setDisplayColorPicker] = useState(false);\n    const [tmpColor, setTmpColor] = useState(color);\n\n    useEffect(() => {\n        setTmpColor(color);\n    }, [color]);\n\n    const popover: React.CSSProperties = {\n        position: \"absolute\",\n        zIndex: 2,\n    };\n\n    let className = \"palette-button\";\n    if (selectedColor === color) {\n        className += \" selected\";\n    } else if (color == \"#000000\") {\n        className += \" black\";\n    }\n    return (\n        <>\n            <div\n                className={className}\n                style={{ backgroundColor: color }}\n                onClick={() => onClick(color)}\n                onDoubleClick={() => setDisplayColorPicker(!displayColorPicker)}\n            ></div>\n            {onColorSelected && displayColorPicker ? (\n                <div style={popover}>\n                    {/* <div style={cover} onClick={handleClose} /> */}\n                    <ChromePicker\n                        color={tmpColor}\n                        onChange={(color) => setTmpColor(color.hex)}\n                        onChangeComplete={(color) => setTmpColor(color.hex)}\n                    />\n                    <button\n                        className=\"btn btn-primary\"\n                        style={{ marginRight: \"8px\", marginLeft: \"16px\" }}\n                        onClick={() => {\n                            onColorSelected(tmpColor);\n                            setDisplayColorPicker(false);\n                        }}\n                    >\n                        <i className=\"fas fa-check\" />\n                    </button>\n                    <button\n                        className=\"btn btn-primary\"\n                        onClick={() => setDisplayColorPicker(false)}\n                    >\n                        <i className=\"fas fa-times\" />\n                    </button>\n                </div>\n            ) : null}\n        </>\n    );\n};\n","import React, { FC, useEffect, useState } from \"react\";\n\ninterface Props {\n    pendingCount: number;\n    processingCount: number;\n    onClick?: () => void;\n}\n\nexport const PendingJobsThumbnail: FC<Props> = ({\n    pendingCount,\n    processingCount,\n    onClick,\n}) => {\n    const [hover, setHover] = useState(false);\n\n    // on mouse in/out, set hover state\n    const onMouseEnter = () => setHover(true);\n    const onMouseLeave = () => setHover(false);\n    let icon = (\n        <i style={{ marginTop: \"20px\" }} className=\"fa fa-hourglass-half\"></i>\n    );\n\n    if (processingCount > 0) {\n        icon = (\n            <i style={{ marginTop: \"20px\" }} className=\"fa fa-cog fa-spin\"></i>\n        );\n    }\n\n    return (\n        <div\n            onMouseEnter={onMouseEnter}\n            onMouseLeave={onMouseLeave}\n            style={{\n                backgroundImage: `url(/images/default.png)`,\n                backgroundSize: \"contain\",\n                width: \"128px\",\n                height: \"128px\",\n                margin: \"8px\",\n                float: \"left\",\n                cursor: \"pointer\",\n            }}\n            onClick={onClick}\n        >\n            {hover && (\n                <div\n                    style={{\n                        background: \"rgba(255, 255, 255, 0.5)\",\n                        color: \"black\",\n                        width: \"100%\",\n                        height: \"100%\",\n                        lineHeight: \"1\",\n                        fontSize: \"20px\",\n                    }}\n                >\n                    <br/>\n                    {pendingCount > 0 && (\n                        <div style={{ marginBottom: \"24px\" }}>\n                            {pendingCount} pending\n                        </div>\n                    )}\n                    {processingCount > 0 && (\n                        <div>{processingCount} processing</div>\n                    )}\n                </div>\n            )}\n            {!hover && (\n                <div\n                    style={{\n                        background: \"rgba(255, 255, 255, 0.3)\",\n                        color: \"#555\",\n                        width: \"100%\",\n                        height: \"100%\",\n                        fontSize: \"80px\",\n                    }}\n                >\n                    {icon}\n                </div>\n            )}\n        </div>\n    );\n};\n","import React, { useState } from 'react';\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\n\ninterface CopyToClipboardIconProps {\n  text: string;\n}\n\nconst CopyToClipboardIcon: React.FC<CopyToClipboardIconProps> = ({ text }) => {\n  const [copied, setCopied] = useState(false);\n\n  const handleCopy = () => {\n    setCopied(true);\n    setTimeout(() => setCopied(false), 5000); // Reset icon after 5 seconds\n  };\n\n  return (\n    <CopyToClipboard text={text} onCopy={handleCopy}>\n      <span style={{cursor: \"pointer\", marginLeft: \"8px\"}}>\n        {/* <FontAwesomeIcon icon={copied ? faCheck : faCopy} style={{ color: copied ? 'green' : undefined }} /> */}\n        <i className={`fas fa-${copied ? 'check' : 'copy'}`} style={{ color: copied ? 'green' : undefined }} />\n      </span>\n    </CopyToClipboard>\n  );\n};\n\nexport default CopyToClipboardIcon;\n","import { useState, FC, TouchEvent } from \"react\";\n\ninterface Props {\n    onSwipe: (direction: number) => void;\n}\n\nexport const Swipe: FC<Props> = ({ onSwipe, children }) => {\n    const [touchStart, setTouchStart] = useState<number | null>(null)\n    const [touchEnd, setTouchEnd] = useState<number | null>(null);\n\n    // the required distance between touchStart and touchEnd to be detected as a swipe\n    const minSwipeDistance = 50;\n\n    const onTouchStart = (e: TouchEvent<HTMLDivElement>) => {\n        setTouchEnd(null); // otherwise the swipe is fired even with usual touch events\n        setTouchStart(e.targetTouches[0].clientX);\n    };\n\n    const onTouchMove = (e: TouchEvent<HTMLDivElement>) => setTouchEnd(e.targetTouches[0].clientX);\n\n    const onTouchEnd = () => {\n        if (!touchStart || !touchEnd) return;\n        const distance = touchStart - touchEnd;\n        const isLeftSwipe = distance > minSwipeDistance;\n        const isRightSwipe = distance < -minSwipeDistance;\n        if (isLeftSwipe || isRightSwipe) {\n            onSwipe(isLeftSwipe ? 1 : -1);\n        }\n    };\n\n    return (\n        <div\n            onTouchStart={onTouchStart}\n            onTouchMove={onTouchMove}\n            onTouchEnd={onTouchEnd}\n        >\n            {children}\n        </div>\n    );\n};\n","import React, { FC, useEffect, useRef, useState } from \"react\";\nimport { Modal } from \"react-bootstrap\";\nimport { CreateImageInput, Image, StatusEnum } from \"../client/api\";\nimport { LocalImage } from \"../lib/models\";\nimport CopyToClipboard from \"react-copy-to-clipboard\";\nimport CopyToClipboardIcon from \"./CopyToClipboardIcon\";\nimport { Swipe } from \"./Swipe\";\n\ninterface ImagePopupProps {\n    assetsUrl: string;\n    image: LocalImage;\n    censorNSFW: boolean;\n    onClose: () => void;\n    onDelete?: (image: LocalImage) => void;\n    onFork?: (image: LocalImage) => void;\n    onEdit?: (image: LocalImage) => void;\n    onNSFW?: (image: LocalImage, nsfw: boolean) => void;\n    onSave?: (image: LocalImage) => void;\n    onSwipe?: (image: LocalImage, direction: number) => void;\n}\n\nexport const ImagePopup: FC<ImagePopupProps> = ({\n    assetsUrl,\n    image,\n    censorNSFW,\n    onClose,\n    onDelete,\n    onFork,\n    onEdit,\n    onNSFW,\n    onSave,\n    onSwipe,\n}) => {\n    const img = useRef<HTMLImageElement>(null);\n    let src = `${assetsUrl}/${image.id}.image.png?updated_at=${image.updated_at}`;\n    if (image.imageData) {\n        src = image.imageData;\n    }\n    let score = image.score || 0;\n    if (image.params.negative_prompt && image.negative_score != 0) {\n        score -= image.negative_score || 0;\n    }\n    const [showNSFW, setShowNSFW] = useState(false);\n\n    const statusBadge = (status: string) => {\n        const displayStatus = status.charAt(0).toUpperCase() + status.slice(1);\n        let icon = \"fa fa-question-circle\";\n        switch (status) {\n            case StatusEnum.Pending:\n                icon = \"fas fa-hourglass-half\";\n                break;\n            case StatusEnum.Processing:\n                icon = \"fas fa-cog fa-spin\";\n                break;\n            case StatusEnum.Completed:\n                icon = \"fas fa-check\";\n                break;\n            case StatusEnum.Saved:\n                icon = \"fas fa-save\";\n                break;\n            case StatusEnum.Error:\n                icon = \"fas fa-exclamation-circle\";\n                break;\n        }\n        return (\n            <>\n                <span style={{ fontSize: \"24px\" }}>\n                    <i\n                        className={`${icon} status-badge status-badge-${status}`}\n                        style={{\n                            fontSize: \"10px\",\n                            position: \"relative\",\n                            top: \"-1px\",\n                        }}\n                    ></i>\n                    &nbsp;{displayStatus}\n                </span>\n            </>\n        );\n    };\n\n    useEffect(() => {\n        if (!img.current) {\n            return;\n        }\n        img.current.onerror = () => {\n            if (!img.current) {\n                return;\n            }\n            img.current.src = \"/images/default.png\";\n        };\n    }, [img]);\n\n    let title = image.label;\n    if (!title) {\n        title = image.params.prompt!;\n    }\n    if (title.indexOf(\",\") > 0) {\n        title = title.substring(0, title.indexOf(\",\"));\n    }\n\n    let swipeArrowMargin = \"10px\";\n    if (window.innerWidth < 992) {\n        swipeArrowMargin = \"-30px\";\n    }\n    const maxImageHeight = window.innerHeight * 0.6 + \"px\";\n\n    // if open, show modal with image\n    return (\n        <Modal show={true} onHide={onClose} size=\"xl\">\n            <Modal.Header closeButton>\n                <Modal.Title>{title}</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <div style={{ position: \"relative\" }}>\n                    {/* Left button */}\n                    {onSwipe && (\n                        <button\n                            className=\"btn btn-secondary btn-sm image-popup-left-button\"\n                            style={{\n                                position: \"absolute\",\n                                left: swipeArrowMargin,\n                                top: \"50%\",\n                                transform: \"translateY(-50%)\",\n                                zIndex: 1,\n                                padding: \"5px 10px\",\n                            }}\n                            onClick={() => onSwipe(image, -1)}\n                        >\n                            <i className=\"fas fa-chevron-left\"></i>\n                        </button>\n                    )}\n                    <Swipe\n                        onSwipe={(direction) =>\n                            onSwipe && onSwipe(image, direction)\n                        }\n                    >\n                        <img\n                            ref={img}\n                            style={{\n                                maxWidth: \"100%\",\n                                maxHeight: maxImageHeight,\n                                display: \"block\",\n                                marginLeft: \"auto\",\n                                marginRight: \"auto\",\n                                filter:\n                                    image.nsfw && censorNSFW && !showNSFW\n                                        ? \"blur(30px)\"\n                                        : \"\",\n                            }}\n                            id={`image-popup-${image.id}`}\n                            src={src}\n                            alt={image.label}\n                        />\n                    </Swipe>\n                    {/* Right button */}\n                    <button\n                        className=\"btn btn-secondary btn-sm .image-popup-right-button\"\n                        style={{\n                            position: \"absolute\",\n                            right: swipeArrowMargin,\n                            top: \"50%\",\n                            transform: \"translateY(-50%)\",\n                            zIndex: 1,\n                            padding: \"5px 10px\",\n                        }}\n                        onClick={() => onSwipe && onSwipe(image, 1)}\n                    >\n                        <i className=\"fas fa-chevron-right\"></i>\n                    </button>\n                </div>\n                {/* List these fields: status, iterations, phrases */}\n                <div className=\"row\">\n                    <div className=\"col-lg-12\"></div>\n                </div>\n                {/* controls */}\n                <div className=\"row\">\n                    <div className=\"col-lg-12\">\n                        <div\n                            className=\"image-popup-controls\"\n                            style={{ marginTop: \"40px\" }}\n                        >\n                            {statusBadge(image.status)}\n                            <div style={{ float: \"right\" }}>\n                                {onFork &&\n                                    (image.status === StatusEnum.Saved ||\n                                        image.status ===\n                                            StatusEnum.Completed) && (\n                                        <button\n                                            className=\"btn btn-secondary btn-sm image-popup-button\"\n                                            onClick={() => onFork(image)}\n                                            style={{ marginRight: \"5px\" }}\n                                        >\n                                            <i className=\"fas fa-code-branch\"></i>\n                                            &nbsp;VARIATIONS\n                                        </button>\n                                    )}\n                                {onDelete && (\n                                    <button\n                                        className=\"btn btn-danger btn-sm image-popup-delete-button\"\n                                        onClick={() =>\n                                            onDelete && onDelete(image)\n                                        }\n                                        style={{ marginRight: \"5px\" }}\n                                    >\n                                        <i className=\"fas fa-trash-alt\"></i>\n                                        &nbsp;DELETE\n                                    </button>\n                                )}\n                                {onEdit && (\n                                    <button\n                                        className=\"btn btn-primary btn-sm image-popup-button edit-button\"\n                                        onClick={() => onEdit && onEdit(image)}\n                                        style={{ marginRight: \"5px\" }}\n                                    >\n                                        <i className=\"fas fa-edit\"></i>\n                                        &nbsp;EDIT\n                                    </button>\n                                )}\n                                {onSave && (\n                                    <button\n                                        className=\"btn btn-primary btn-sm image-popup-button\"\n                                        onClick={() => onSave && onSave(image)}\n                                        style={{ marginRight: \"5px\" }}\n                                    >\n                                        <i className=\"fas fa-save\"></i>\n                                        &nbsp;SAVE\n                                    </button>\n                                )}\n                                {image.nsfw && censorNSFW && (\n                                    <button\n                                        className=\"btn btn-primary btn-sm image-popup-button\"\n                                        onClick={() => setShowNSFW(!showNSFW)}\n                                        style={{ marginRight: \"5px\" }}\n                                    >\n                                        <i className=\"fas fa-eye\"></i>\n                                        &nbsp;{showNSFW ? \"HIDE\" : \"SHOW\"}\n                                    </button>\n                                )}\n                            </div>\n                        </div>\n                        <div\n                            className=\"image-popup-controls\"\n                            style={{ marginTop: \"28px\", marginBottom: \"85px\" }}\n                        >\n                            {/* Horde interface doesn't support score yet */}\n                            {/* <div>\n                                Similarity to prompt: {(score * 200).toFixed(2)}\n                                %\n                            </div> */}\n                            <div>\n                                Image dimensions: {image.params.width} x{\" \"}\n                                {image.params.height}\n                            </div>\n                            <div>Model: {image.model}</div>\n                            {image.nsfw && (\n                                <>\n                                    <div>\n                                        {/* alert warning icon */}\n                                        <i\n                                            className=\"fas fa-exclamation-triangle\"\n                                            style={{\n                                                color: \"orange\",\n                                                fontSize: \"18px\",\n                                                position: \"relative\",\n                                                top: \"2px\",\n                                            }}\n                                        ></i>\n                                        &nbsp;May contain NSFW content\n                                    </div>\n                                    {onNSFW && (\n                                        <a\n                                            href=\"javascript:void(0)\"\n                                            onClick={() => onNSFW(image, false)}\n                                        >\n                                            Mark as Safe for Work\n                                        </a>\n                                    )}\n                                </>\n                            )}\n                            {image.params.seed && (\n                                <div>Seed: {image.params.seed}</div>\n                            )}\n                            {!image.nsfw && (\n                                <>\n                                    <div>\n                                        {/* green check icon */}\n                                        <i\n                                            className=\"fas fa-check\"\n                                            style={{\n                                                color: \"green\",\n                                                fontSize: \"18px\",\n                                                position: \"relative\",\n                                                top: \"2px\",\n                                            }}\n                                        ></i>\n                                        &nbsp;Safe for Work\n                                    </div>\n                                    {onNSFW && (\n                                        <a\n                                            href=\"javascript:void(0)\"\n                                            onClick={() => onNSFW(image, true)}\n                                        >\n                                            Mark as Not Safe for Work\n                                        </a>\n                                    )}\n                                </>\n                            )}\n                            <div style={{ marginTop: \"8px\" }}>\n                                Prompt: {image.params.prompt}\n                                <CopyToClipboardIcon\n                                    text={image.params.prompt!}\n                                />\n                            </div>\n                            <div style={{ marginTop: \"8px\" }}>\n                                Negative Prompt: {image.params.negative_prompt}\n                                <CopyToClipboardIcon\n                                    text={image.params.negative_prompt!}\n                                />\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </Modal.Body>\n        </Modal>\n    );\n};\n","import React, { FC, useState, useEffect } from \"react\";\nimport { Renderer } from \"./renderer\";\nimport { BaseTool, Tool } from \"./tool\";\nimport { ZoomHelper } from \"./zoomHelper\";\n\nexport class SmudgeTool extends BaseTool implements Tool {\n    private brushSize = 10;\n    private brushOpacity = 0.2;\n\n    private lastX = 0;\n    private lastY = 0;\n    private panning = false;\n    private smudging = false;\n    private _dirty = false;\n\n    set dirty(dirty: boolean) {\n        this._dirty = dirty;\n        if (this.dirtyListener) {\n            this.dirtyListener(dirty);\n        }\n    }\n\n    get dirty() {\n        return this._dirty;\n    }\n\n    private dirtyListener?: (dirty: boolean) => void;\n\n    constructor(renderer: Renderer) {\n        super(renderer, \"smudge\");\n    }\n\n    private sync() {\n        this.renderer.setCursor({\n            type: \"circle\",\n            color: \"white\",\n            radius: this.brushSize / 2,\n            x: this.lastX,\n            y: this.lastY,\n        });\n    }\n\n    updateArgs(args: any) {\n        super.updateArgs(args);\n        this.brushSize = args.brushSize || 10;\n        this.brushOpacity = args.brushOpacity || 0.2;\n        this.sync();\n    }\n\n    onMouseMove(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>): void {\n        let { x, y } = this.zoomHelper.translateMouseToCanvasCoordinates(\n            event.nativeEvent.offsetX,\n            event.nativeEvent.offsetY\n        );\n\n        if (this.panning) {\n            this.zoomHelper.onPan(event);\n        } else if (this.smudging) {\n            this.renderer.smudgeLine(\n                this.lastX,\n                this.lastY,\n                x,\n                y,\n                this.brushSize,\n                this.brushOpacity\n            );\n            this.dirty = true;\n        }\n\n        this.lastX = x;\n        this.lastY = y;\n        this.sync();\n    }\n\n    onWheel(event: WheelEvent) {\n        this.zoomHelper.onWheel(event);\n        this.sync();\n    }\n\n    onMouseDown(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        if (event.button === 0) {\n            this.smudging = true;\n            if (!this.dirty) {\n                this.renderer.copyEditImageFromBaseImage();\n            }\n            this.dirty = true;\n            let { x, y } = this.zoomHelper.translateMouseToCanvasCoordinates(\n                event.nativeEvent.offsetX,\n                event.nativeEvent.offsetY\n            );\n            this.lastX = x;\n            this.lastY = y;\n            this.sync();\n        } else if (event.button === 1) {\n            this.panning = true;\n        }\n        this.sync();\n    }\n\n    onMouseUp(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        this.smudging = false;\n        this.panning = false;\n        this.sync();\n    }\n\n    onSaveImage(listener: (encodedImage: string) => void): void {\n        this.saveListener = listener;\n    }\n\n    onDirty(listener: (dirty: boolean) => void): void {\n        this.dirtyListener = listener;\n    }\n\n    cancel() {\n        // kind of a hack, clears the selection layer\n        this.renderer.setEditImage(null);\n        this.dirty = false;\n    }\n\n    confirm() {\n        this.renderer.commitSelection();\n        const encodedImage = this.renderer.getEncodedImage(null);\n        if (encodedImage && this.saveListener) {\n            this.saveListener(encodedImage);\n        }\n        this.dirty = false;\n    }\n\n    destroy(): boolean {\n        if (this.dirty) {\n            this.renderer.commitSelection();\n        }\n        return true;\n    }\n}\n\ninterface Props {\n    renderer: Renderer;\n    tool: SmudgeTool;\n}\n\nexport const SmudgeControls: FC<Props> = ({ renderer, tool }) => {\n    const [brushSize, setBrushSize] = useState(10);\n    const [brushOpacity, setBrushOpacity] = useState(0.2);\n    const [dirty, setDirty] = useState(false);\n\n    tool.onDirty(setDirty);\n\n    useEffect(() => {\n        tool.updateArgs({\n            brushSize,\n            brushOpacity,\n        });\n    }, [brushSize, brushOpacity]);\n\n    return (\n        <div style={{ marginTop: \"16px\" }}>\n            <div className=\"form-group\">\n                <label style={{ width: \"100%\" }}>\n                    Brush size\n                    <small\n                        className=\"form-text text-muted\"\n                        style={{ float: \"right\" }}\n                    >\n                        {brushSize}px\n                    </small>\n                </label>\n                <input\n                    type=\"range\"\n                    className=\"form-control-range\"\n                    min=\"1\"\n                    max=\"100\"\n                    value={brushSize}\n                    onChange={(e) => setBrushSize(parseInt(e.target.value))}\n                />\n            </div>\n            <div className=\"form-group\">\n                <label style={{ width: \"100%\" }}>\n                    Brush opacity\n                    <small\n                        className=\"form-text text-muted\"\n                        style={{ float: \"right\" }}\n                    >\n                        {Math.round(brushOpacity * 100)}%\n                    </small>\n                </label>\n                <input\n                    type=\"range\"\n                    className=\"form-control-range\"\n                    min=\"0\"\n                    max=\"1\"\n                    step=\"0.01\"\n                    value={brushOpacity}\n                    onChange={(e) =>\n                        setBrushOpacity(parseFloat(e.target.value))\n                    }\n                />\n            </div>\n            <div\n                className=\"form-group\"\n                style={{\n                    marginTop: \"16px\",\n                    visibility: dirty ? \"visible\" : \"hidden\",\n                }}\n            >\n                <button\n                    className=\"btn btn-secondary\"\n                    onClick={() => tool.cancel()}\n                >\n                    Revert\n                </button>\n                <button\n                    className=\"btn btn-primary\"\n                    onClick={() => tool.confirm()}\n                    style={{ marginLeft: \"8px\" }}\n                >\n                    Save\n                </button>\n            </div>\n        </div>\n    );\n};\n","import React, { FC, useState, useEffect, useRef } from \"react\";\nimport axios from \"axios\";\nimport { Prompt } from \"react-router\";\n\nimport { sleep } from \"../../lib/sleep\";\nimport { defaultArgs } from \"../../components/ImagePrompt\";\nimport { Tool, BaseTool } from \"./tool\";\nimport { Renderer } from \"./renderer\";\nimport { SelectionTool } from \"./selection-tool\";\nimport { Cursor, Rect } from \"./models\";\nimport {\n    AIBrushApi,\n    CreateImageInput,\n    Image as APIImage,\n    ImageList,\n    LoraConfig,\n    StatusEnum,\n} from \"../../client\";\nimport { ZoomHelper } from \"./zoomHelper\";\nimport { getClosestAspectRatio } from \"../../lib/aspecRatios\";\nimport { getUpscaleLevel } from \"../../lib/upscale\";\nimport {\n    applyAlphaMask,\n    featherEdges,\n    ImageUtilWorker,\n    loadImageDataElement,\n} from \"../../lib/imageutil\";\nimport { ApiSocket, NOTIFICATION_IMAGE_UPDATED } from \"../../lib/apisocket\";\nimport moment from \"moment\";\nimport { ProgressBar } from \"../../components/ProgressBar\";\nimport { calculateImagesCost } from \"../../lib/credits\";\nimport { CostIndicator } from \"../../components/CostIndicator\";\nimport ModelSelector from \"../../components/ModelSelector\";\nimport { ResetToDefaultIcon } from \"../../components/ResetToDefaultIcon\";\nimport {\n    LoraModal,\n    SelectedLora,\n    selectedLorasFromConfigs,\n} from \"../../components/LoraSelector\";\nimport { LoraTriggers } from \"../../components/LoraTriggers\";\nimport { SelectedLoraTag } from \"../../components/SelectedLora\";\nimport { GenerationJob, LocalImage } from \"../../lib/models\";\nimport { HordeGenerator } from \"../../lib/hordegenerator\";\n\nconst anonymousClient = axios.create();\n\ntype InpaintToolState =\n    | \"select\"\n    | \"erase\"\n    | \"inpaint\"\n    | \"uploading\"\n    | \"processing\"\n    | \"confirm\"\n    | undefined;\n\ninterface ImageWithData extends LocalImage {\n    data?: ImageData;\n}\n\nexport class InpaintTool extends BaseTool implements Tool {\n    private selectionTool: SelectionTool;\n    private prompt: string = \"\";\n    private negativePrompt: string = \"\";\n    private count: number = 4;\n    private brushSize: number = 10;\n    private loras: LoraConfig[] = [];\n    private _dirty = false;\n    private worker: ImageUtilWorker;\n    private idCounter = 0;\n\n    private _state: InpaintToolState;\n    private stateHandler: (state: InpaintToolState) => void = () => {};\n    private selectionControlsListener: (show: boolean) => void = () => {};\n\n    private imageData: Array<ImageData> = [];\n    private selectedImageDataIndex: number = -1;\n    private selectedImageData: ImageData | null = null;\n    private panning = false;\n    private erasing = false;\n    private progressListener?: (progress: number) => void;\n    private errorListener?: (error: string | null) => void;\n    private dirtyListener?: (dirty: boolean) => void;\n\n    set dirty(dirty: boolean) {\n        this._dirty = dirty;\n        if (this.dirtyListener) {\n            this.dirtyListener(dirty);\n        }\n    }\n\n    get dirty() {\n        return this._dirty;\n    }\n\n    private newId(): string {\n        return `${this.idCounter++}`;\n    }\n\n    onError(handler: (error: string | null) => void) {\n        this.errorListener = handler;\n    }\n\n    private notifyError(error: string | null) {\n        if (this.errorListener) {\n            this.errorListener(error);\n        }\n    }\n\n    get state(): InpaintToolState {\n        return this._state;\n    }\n\n    set state(state: InpaintToolState) {\n        if (state != this._state) {\n            if (this._state == \"select\") {\n                this.selectionTool.destroy();\n            }\n            if (this._state === \"erase\") {\n                this.renderer.setCursor(undefined);\n            }\n            this._state = state;\n            this.stateHandler(state);\n\n            if (state == \"confirm\") {\n                this.selectionControlsListener(true);\n            } else {\n                this.selectionControlsListener(false);\n                if (state == \"select\") {\n                    const imageWidth = this.renderer.getWidth();\n                    const imageHeight = this.renderer.getHeight();\n                    const selectionWidth = Math.min(\n                        imageWidth,\n                        imageHeight,\n                        512\n                    );\n                    this.selectionTool.updateArgs({\n                        selectionOverlay: {\n                            x: 0,\n                            y: 0,\n                            width: selectionWidth,\n                            height: selectionWidth,\n                        },\n                    });\n                }\n            }\n        }\n    }\n\n    selectSupported(): boolean {\n        // return !(\n        //     this.renderer.getWidth() == this.renderer.getHeight() &&\n        //     getUpscaleLevel(\n        //         this.renderer.getWidth(),\n        //         this.renderer.getHeight()\n        //     ) === 0\n        // );\n        return true;\n    }\n\n    constructor(renderer: Renderer) {\n        super(renderer, \"inpaint\");\n        this.selectionTool = new SelectionTool(renderer);\n        if (this.selectSupported()) {\n            this.state = \"select\";\n            this.selectionTool.updateArgs({\n                outpaint: this.getArgs().outpaint,\n            });\n        } else {\n            this.state = \"erase\";\n        }\n        this.worker = new ImageUtilWorker();\n    }\n\n    onMouseDown(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        if (this.state == \"select\") {\n            this.selectionTool.onMouseDown(event);\n            return;\n        }\n        let { x, y } = this.zoomHelper.translateMouseToCanvasCoordinates(\n            event.nativeEvent.offsetX,\n            event.nativeEvent.offsetY\n        );\n        if (event.button === 1) {\n            this.panning = true;\n            return;\n        }\n        if (this.state == \"erase\") {\n            this.erasing = true;\n            this.erasePoint(x, y);\n        }\n    }\n\n    private erasePoint(x: number, y: number) {\n        if (!this.dirty) {\n            this.dirty = true;\n        }\n        this.renderer.erasePoint(x, y, this.brushSize);\n        this.renderer.render();\n    }\n\n    private updateCursor(x: number, y: number) {\n        if (this.state == \"erase\") {\n            this.renderer.setCursor({\n                color: \"white\",\n                radius: this.brushSize / 2,\n                type: \"circle\",\n                x,\n                y,\n            });\n        } else {\n            this.renderer.setCursor({\n                color: \"white\",\n                radius: 10,\n                type: \"crosshairs\",\n                x,\n                y,\n            });\n        }\n    }\n\n    onMouseMove(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        let { x, y } = this.zoomHelper.translateMouseToCanvasCoordinates(\n            event.nativeEvent.offsetX,\n            event.nativeEvent.offsetY\n        );\n        this.updateCursor(x, y);\n        if (this.state == \"select\") {\n            this.selectionTool.onMouseMove(event);\n            return;\n        }\n\n        if (this.panning) {\n            this.zoomHelper.onPan(event);\n        }\n\n        if (this.erasing) {\n            this.erasePoint(x, y);\n        }\n    }\n\n    onMouseUp(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        if (this.state == \"select\") {\n            this.selectionTool.onMouseUp(event);\n        }\n        this.panning = false;\n        this.erasing = false;\n    }\n\n    onMouseLeave(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>): void {\n        if (this.state == \"select\") {\n            this.selectionTool.onMouseLeave(event);\n        }\n        this.panning = false;\n        this.erasing = false;\n    }\n\n    onWheel(event: WheelEvent) {\n        this.zoomHelper.onWheel(event);\n        let { x, y } = this.zoomHelper.translateMouseToCanvasCoordinates(\n            event.offsetX,\n            event.offsetY\n        );\n        this.updateCursor(x, y);\n    }\n\n    updateArgs(args: any) {\n        args = {\n            ...this.getArgs(),\n            ...args,\n        };\n        super.updateArgs(args);\n        this.prompt = args.prompt || \"\";\n        this.negativePrompt = args.negativePrompt || \"\";\n        this.count = args.count || 4;\n        this.brushSize = args.brushSize || 10;\n        this.loras = args.loras || [];\n\n        this.updateCursor(\n            this.renderer.getWidth() / 2,\n            this.renderer.getHeight() / 2\n        );\n        this.selectionTool.updateArgs({\n            outpaint: args.outpaint,\n        });\n    }\n\n    onChangeState(handler: (state: InpaintToolState) => void) {\n        this.stateHandler = handler;\n    }\n\n    onShowSelectionControls(listener: (show: boolean) => void): void {\n        this.selectionControlsListener = listener;\n    }\n\n    onProgress(listener: (progress: number) => void): void {\n        this.progressListener = listener;\n    }\n\n    private async loadImageData(\n        image: LocalImage,\n        alphaMask: ImageData,\n        selectionOverlay: Rect\n    ): Promise<ImageData> {\n        const imageElement = await loadImageDataElement(image);\n        const canvas = document.createElement(\"canvas\");\n        canvas.width = selectionOverlay.width;\n        canvas.height = selectionOverlay.height;\n        const ctx = canvas.getContext(\"2d\");\n        if (!ctx) {\n            throw new Error(\"Failed to get canvas context\");\n        }\n        ctx.drawImage(\n            imageElement,\n            0,\n            0,\n            selectionOverlay.width,\n            selectionOverlay.height\n        );\n        const imageData = ctx.getImageData(\n            0,\n            0,\n            selectionOverlay.width,\n            selectionOverlay.height\n        );\n\n        const id = this.newId();\n        const resp = await this.worker.processRequest({\n            id,\n            alphaMode: \"alpha\",\n            alphaPixels: alphaMask.data,\n            feather: true,\n            height: this.renderer.getHeight(),\n            width: this.renderer.getWidth(),\n            pixels: imageData.data,\n            selectionOverlay,\n            featherWidth: 10,\n        });\n        const updatedImageData = new ImageData(\n            resp.pixels,\n            imageData.width,\n            imageData.height\n        );\n        // remove canvas\n        canvas.remove();\n        return updatedImageData;\n    }\n\n    cancel() {\n        if (this.selectSupported()) {\n            this.state = \"select\";\n        } else {\n            this.state = \"erase\";\n        }\n        this.renderer.snapshot();\n        this.renderer.undo();\n        this.renderer.clearRedoStack();\n        this.imageData = [];\n        this.renderer.setEditImage(null);\n        this.dirty = false;\n    }\n\n    private updateProgress(progress: number) {\n        if (this.progressListener) {\n            this.progressListener(progress);\n        }\n    }\n\n    async submit(generator: HordeGenerator, image: LocalImage, model: string) {\n        this.notifyError(null);\n        let selectionOverlay = this.renderer.getSelectionOverlay();\n        if (!selectionOverlay) {\n            console.error(\"No selection\");\n            return;\n        }\n\n        if (this.getArgs().outpaint) {\n            // check if selection overlay is out of renderer bounds (width, height)\n            if (\n                selectionOverlay.x < 0 ||\n                selectionOverlay.y < 0 ||\n                selectionOverlay.x + selectionOverlay.width >\n                    this.renderer.getWidth() ||\n                selectionOverlay.y + selectionOverlay.height >\n                    this.renderer.getHeight()\n            ) {\n                this.renderer.expandToOverlay();\n                selectionOverlay = this.renderer.getSelectionOverlay()!;\n            }\n        }\n\n        this.state = \"uploading\";\n        this.updateProgress(0);\n\n        // get the erased area, then undo the erase to get the original image\n        const encodedMask = this.renderer.getEncodedMask(selectionOverlay);\n        const maskData = this.renderer.getImageData(selectionOverlay);\n        // hack to restore the image\n        this.renderer.snapshot();\n        this.renderer.undo();\n        this.renderer.clearRedoStack();\n\n        const encodedImage = this.renderer.getEncodedImage(selectionOverlay);\n\n        const input: CreateImageInput = defaultArgs();\n        input.label = \"\";\n        // input.encoded_image = encodedImage;\n        // input.encoded_mask = encodedMask;\n        input.encoded_image = encodedImage;\n        input.encoded_mask = encodedMask;\n        input.parent = image.id;\n        input.params.prompt = this.prompt || image.params.prompt;\n        input.params.negative_prompt =\n            this.negativePrompt || image.params.negative_prompt;\n        input.params.denoising_strength = 1;\n        input.count = this.count;\n        input.model = model;\n\n        const closestAspectRatio = getClosestAspectRatio(\n            selectionOverlay!.width,\n            selectionOverlay!.height\n        );\n        input.params.width = closestAspectRatio.width;\n        input.params.height = closestAspectRatio.height;\n        input.params.loras = this.loras;\n        input.temporary = true;\n\n        let job: GenerationJob | undefined;\n\n        try {\n            job = await generator.generateImages(input, (progress) => {\n                this.updateProgress(progress.loaded / progress.total);\n            });\n        } catch (err) {\n            console.error(\"Error creating images\", err);\n            this.notifyError(\"Failed to create image\");\n            this.state = \"select\";\n            return;\n        }\n        this.state = \"processing\";\n        this.updateProgress(0);\n        let newImages: Array<ImageWithData> = [];\n        \n        let completed = false;\n        let startTime = moment();\n        while (!completed) {\n            await sleep(2000);\n            // poll for completion\n            // poll for completion\n            job = await generator.checkGenerationJob(job);\n            this.updateProgress(job.progress);\n            if (job.status === \"completed\") {\n                completed = true;\n                newImages = job.images!.filter(\n                    (img) => img.status === \"completed\"\n                );\n                await Promise.all(\n                    newImages.map(async (img) => {\n                        const imageData = await this.loadImageData(\n                            img,\n                            maskData!,\n                            selectionOverlay!\n                        );\n                        img.data = imageData;\n                    })\n                );\n            }\n\n            if (moment().diff(startTime, \"minutes\") > 2) {\n                completed = true;\n                await generator.client.deleteImageRequest(job.id);\n            }\n        }\n\n        newImages!.sort((a, b) => {\n            return a.created_at - b.created_at;\n        });\n        newImages = newImages!.filter((img) => {\n            return img.status === StatusEnum.Completed;\n        });\n\n        this.imageData = [];\n        for (let i = 0; i < newImages!.length; i++) {\n            if (newImages![i].data) {\n                this.imageData.push(newImages![i].data as ImageData);\n            }\n        }\n        if (this.imageData.length === 0) {\n            this.state = \"select\";\n            this.notifyError(\"No images returned\");\n            return;\n        }\n        this.renderer.setEditImage(this.imageData[0]);\n        this.selectedImageDataIndex = 0;\n        this.selectedImageData = this.imageData[0];\n        this.state = \"confirm\";\n    }\n\n    onDirty(listener: (dirty: boolean) => void): void {\n        this.dirtyListener = listener;\n    }\n\n    select(direction: \"left\" | \"right\") {\n        if (direction == \"left\") {\n            this.selectedImageDataIndex--;\n            if (this.selectedImageDataIndex < -1) {\n                this.selectedImageDataIndex = this.imageData.length - 1;\n            }\n        }\n        if (direction == \"right\") {\n            this.selectedImageDataIndex++;\n            if (this.selectedImageDataIndex >= this.imageData.length) {\n                this.selectedImageDataIndex = -1;\n            }\n        }\n        if (this.selectedImageDataIndex === -1) {\n            this.selectedImageData = null;\n        } else {\n            this.selectedImageData =\n                this.imageData[this.selectedImageDataIndex];\n        }\n        this.renderer.setEditImage(this.selectedImageData);\n    }\n\n    onSaveImage(listener: (encodedImage: string, args?: any) => void): void {\n        this.saveListener = listener;\n    }\n\n    confirm() {\n        this.renderer.commitSelection();\n\n        this.imageData = [];\n        const encodedImage = this.renderer.getEncodedImage(null);\n        if (encodedImage && this.saveListener) {\n            this.saveListener(encodedImage, {\n                phrases: [this.prompt],\n                negative_phrases: [this.negativePrompt],\n                selection_overlay: this.renderer.getSelectionOverlay(),\n            });\n        }\n        this.dirty = false;\n        if (this.selectSupported()) {\n            this.state = \"select\";\n        } else {\n            this.state = \"erase\";\n        }\n    }\n\n    destroy(): boolean {\n        if (this.dirty) {\n            if (!window.confirm(\"Discard changes?\")) {\n                return false;\n            }\n        }\n        this.renderer.setCursor(undefined);\n        this.renderer.setEditImage(null);\n        this.worker.destroy();\n        return true;\n    }\n}\n\ninterface ControlsProps {\n    api: AIBrushApi;\n    generator: HordeGenerator;\n    image: LocalImage;\n    renderer: Renderer;\n    tool: InpaintTool;\n}\n\nexport const InpaintControls: FC<ControlsProps> = ({\n    // TODO: alternative source of horde model reference\n    generator,\n    image,\n    renderer,\n    tool,\n}) => {\n    const [count, setCount] = useState(4);\n    const [prompt, setPrompt] = useState(image.params.prompt || \"\");\n    const [negativePrompt, setNegativePrompt] = useState(\n        image.params.negative_prompt || \"\"\n    );\n    const [state, setState] = useState<InpaintToolState>(tool.state);\n    const [progress, setProgress] = useState(0);\n    const [error, setError] = useState<string | null>(null);\n    const [brushSize, setBrushSize] = useState(10);\n    const [dirty, setDirty] = useState(false);\n    const [outpaint, setoutpaint] = useState<boolean | undefined>(\n        tool.getArgs().outpaint\n    );\n    const [model, setModel] = useState(\"Deliberate Inpainting\");\n    const [selectingModel, setSelectingModel] = useState(false);\n\n    const [selectingLora, setSelectingLora] = useState<boolean>(false);\n    const [selectedLoras, setSelectedLoras] = useState<SelectedLora[]>([]);\n\n    useEffect(() => {\n        tool.updateArgs({\n            brushSize,\n        });\n    }, [brushSize]);\n\n    useEffect(() => {\n        if (image.params.loras && image.params.loras.length > 0) {\n            selectedLorasFromConfigs(image.params.loras).then((selected) => {\n                setSelectedLoras(selected);\n            });\n        } else {\n            setSelectedLoras([]);\n        }\n    }, [image]);\n\n    tool.onChangeState(setState);\n    tool.onProgress(setProgress);\n    tool.onError(setError);\n    tool.onDirty(setDirty);\n\n    const onAddLora = (lora: SelectedLora) => {\n        setSelectedLoras([...selectedLoras, lora]);\n        setSelectingLora(false);\n    };\n\n    const onRemoveLora = (lora: SelectedLora) => {\n        const updated = selectedLoras.filter(\n            (selectedLora) => selectedLora.config.name !== lora.config.name\n        );\n        setSelectedLoras(updated);\n    };\n\n    const onAddTrigger = (trigger: string) => {\n        const parts = [prompt];\n        if (prompt.length > 0 && !prompt.endsWith(\",\")) {\n            parts.push(\", \");\n        }\n        parts.push(trigger);\n        setPrompt(parts.join(\"\"));\n    };\n\n    const onSelectModel = (model: string) => {\n        setModel(model);\n        setSelectingModel(false);\n    };\n\n    if (state === \"uploading\" || state === \"processing\") {\n        return (\n            <div style={{ marginTop: \"16px\" }}>\n                <i className=\"fa fa-spinner fa-spin\"></i>&nbsp;{\" \"}\n                {state === \"uploading\" ? \"Uploading...\" : \"Inpainting...\"}\n                <br />\n                <ProgressBar progress={progress} />\n            </div>\n        );\n    }\n    return (\n        <div\n            style={{\n                marginTop: \"16px\",\n                marginBottom: \"8px\",\n                marginLeft: \"16px\",\n            }}\n        >\n            {error && (\n                <div className=\"alert alert-danger\" role=\"alert\">\n                    {/* dismiss button */}\n                    <button\n                        type=\"button\"\n                        className=\"close\"\n                        data-dismiss=\"alert\"\n                        aria-label=\"Close\"\n                        onClick={() => setError(null)}\n                    >\n                        <span aria-hidden=\"true\">&times;</span>\n                    </button>\n                    {error}\n                </div>\n            )}\n            {state === \"select\" && (\n                <>\n                    <p>\n                        {/* info icon */}\n                        <i className=\"fa fa-info-circle\"></i>&nbsp; Move the\n                        selection rectangle to the area that you want to\n                        inpaint. For outpainting, try zooming out.\n                    </p>\n                    <div className=\"form-group\">\n                        {/* allow outpaint checkbox */}\n                        <div className=\"form-check\">\n                            <input\n                                className=\"form-check-input\"\n                                type=\"checkbox\"\n                                id=\"allowoutpaint\"\n                                checked={!!outpaint}\n                                onChange={(e) => {\n                                    setoutpaint(e.target.checked);\n                                    tool.updateArgs({\n                                        outpaint: e.target.checked,\n                                    });\n                                }}\n                            />\n                            <label\n                                className=\"form-check-label\"\n                                htmlFor=\"allowoutpaint\"\n                            >\n                                Allow outpainting\n                            </label>\n                        </div>\n                    </div>\n                </>\n            )}\n\n            {state === \"erase\" && (\n                <>\n                    <p>\n                        {/* info icon */}\n                        <i className=\"fa fa-info-circle\"></i>&nbsp; Erase the\n                        area that you want to inpaint.\n                    </p>\n                    <div className=\"form-group\">\n                        <label style={{ width: \"100%\" }}>\n                            Brush size\n                            <small\n                                className=\"form-text text-muted\"\n                                style={{ float: \"right\" }}\n                            >\n                                {brushSize}px\n                            </small>\n                        </label>\n                        <input\n                            type=\"range\"\n                            className=\"form-control-range\"\n                            min=\"1\"\n                            max=\"100\"\n                            value={brushSize}\n                            onChange={(e) =>\n                                setBrushSize(parseInt(e.target.value))\n                            }\n                        />\n                    </div>\n                </>\n            )}\n\n            {state === \"inpaint\" && (\n                <>\n                    <p>\n                        {/* info icon */}\n                        <i className=\"fa fa-info-circle\"></i>&nbsp; Confirm the\n                        parameters below and continue\n                    </p>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"prompt\">\n                            Prompt&nbsp;\n                            <ResetToDefaultIcon\n                                onClick={() =>\n                                    setPrompt(image.params.prompt || \"\")\n                                }\n                            />\n                        </label>\n                        <input\n                            type=\"text\"\n                            className=\"form-control\"\n                            id=\"prompt\"\n                            value={prompt}\n                            onChange={(e) => {\n                                setPrompt(e.target.value);\n                            }}\n                        />\n                        <small className=\"form-text text-muted\">\n                            Customize the text prompt here\n                        </small>\n                    </div>\n                    {selectedLoras.length > 0 && (\n                        <LoraTriggers\n                            prompt={prompt}\n                            selectedLoras={selectedLoras}\n                            onAddTrigger={onAddTrigger}\n                        />\n                    )}\n                    {/* negative prompt */}\n                    <div className=\"form-group\">\n                        <label htmlFor=\"negativeprompt\">\n                            Negative prompt&nbsp;\n                            <ResetToDefaultIcon\n                                onClick={() =>\n                                    setNegativePrompt(\n                                        image.params.negative_prompt || \"\"\n                                    )\n                                }\n                            />\n                        </label>\n                        <input\n                            type=\"text\"\n                            className=\"form-control\"\n                            value={negativePrompt}\n                            onChange={(e) => {\n                                setNegativePrompt(e.target.value);\n                            }}\n                        />\n                        <small className=\"form-text text-muted\">\n                            Customize the negative text prompt here\n                        </small>\n                    </div>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"count\">Count: {count}</label>\n                        <input\n                            type=\"range\"\n                            className=\"form-control-range\"\n                            id=\"count\"\n                            min=\"1\"\n                            max=\"10\"\n                            step=\"1\"\n                            value={count}\n                            onChange={(e) => {\n                                setCount(parseInt(e.target.value));\n                            }}\n                        />\n                        <small className=\"form-text text-muted\">\n                            Number of inpaint options\n                        </small>\n                    </div>\n                    {/* select model dropdown */}\n                    {/* options: stable_diffusion_inpainting, \"Epic Diffusion\", \"Deliberate\" */}\n                    <div className=\"form-group\">\n                        <label htmlFor=\"model\">Model</label>\n                        <div>\n                            <button\n                                type=\"button\"\n                                className=\"btn btn-secondary light-button\"\n                                onClick={() => setSelectingModel(true)}\n                            >\n                                {model}&nbsp;\n                                <i className=\"fas fa-caret-down\"></i>\n                            </button>\n                        </div>\n                        <small className=\"form-text text-muted\">\n                            Select the inpaint model\n                        </small>\n                    </div>\n                    <div className=\"form-group\">\n                        {/* loras */}\n                        <label htmlFor=\"loras\">Loras</label>\n                        <div>\n                            {selectedLoras.map((lora) => (\n                                <SelectedLoraTag\n                                    key={lora.lora.name}\n                                    lora={lora}\n                                    onRemove={(lora) => onRemoveLora(lora)}\n                                />\n                            ))}\n                            {/* add lora button */}\n                            {selectedLoras.length < 5 && (\n                                <button\n                                    type=\"button\"\n                                    className=\"btn btn-secondary light-button\"\n                                    style={{ marginLeft: \"8px\" }}\n                                    onClick={() => setSelectingLora(true)}\n                                >\n                                    <i className=\"fas fa-plus\"></i>&nbsp;Add\n                                    Lora\n                                </button>\n                            )}\n                        </div>\n                    </div>\n                    <div className=\"form-group\">\n                        <CostIndicator imagesCost={count} />\n                    </div>\n                </>\n            )}\n\n            {state === \"confirm\" && (\n                <>\n                    <p>\n                        Use the <i className=\"fa fa-arrow-left\"></i> and{\" \"}\n                        <i className=\"fa fa-arrow-right\"></i> buttons to\n                        navigate between the inpaint options\n                    </p>\n                </>\n            )}\n\n            <div className=\"form-group\">\n                {(dirty ||\n                    state === \"confirm\" ||\n                    (state == \"erase\" && tool.selectSupported()) ||\n                    state == \"inpaint\") && (\n                    <button\n                        style={{ marginRight: \"8px\" }}\n                        className=\"btn btn-primary btn-sm\"\n                        onClick={() => {\n                            tool.cancel();\n                        }}\n                    >\n                        {/* cancel icon */}\n                        <i className=\"fa fa-times\"></i>&nbsp; Revert\n                    </button>\n                )}\n\n                {state === \"confirm\" && (\n                    <>\n                        <button\n                            className=\"btn btn-primary btn-sm\"\n                            onClick={() => tool.confirm()}\n                            style={{ marginRight: \"8px\" }}\n                        >\n                            {/* save icon */}\n                            <i className=\"fa fa-save\"></i>&nbsp; Save\n                        </button>\n                    </>\n                )}\n                {state == \"select\" && (\n                    <button\n                        style={{ marginRight: \"8px\" }}\n                        type=\"button\"\n                        className=\"btn btn-primary btn-sm\"\n                        onClick={() => (tool.state = \"erase\")}\n                    >\n                        <i className=\"fa fa-eraser\"></i>&nbsp; Continue\n                    </button>\n                )}\n                {state == \"erase\" && (\n                    <button\n                        style={{ marginRight: \"8px\" }}\n                        type=\"button\"\n                        className=\"btn btn-primary btn-sm\"\n                        onClick={() => (tool.state = \"inpaint\")}\n                    >\n                        <i className=\"fa fa-paint-brush\"></i>&nbsp; Continue\n                    </button>\n                )}\n                {state === \"inpaint\" && (\n                    <button\n                        style={{ marginRight: \"8px\" }}\n                        className=\"btn btn-primary btn-sm\"\n                        onClick={() => {\n                            tool.updateArgs({\n                                count,\n                                prompt,\n                                negativePrompt,\n                            });\n                            tool.submit(generator, image, model);\n                        }}\n                    >\n                        {/* paint icon */}\n                        <i className=\"fa fa-paint-brush\"></i>&nbsp; Inpaint\n                    </button>\n                )}\n            </div>\n            <Prompt\n                when={dirty}\n                message=\"Are you sure you want to leave? Your changes will be lost.\"\n            />\n            {selectingModel && (\n                <ModelSelector\n                    onCancel={() => setSelectingModel(false)}\n                    onSelectModel={onSelectModel}\n                    initialSelectedModel={model}\n                    inpainting={true}\n                />\n            )}\n            {selectingLora && (\n                <LoraModal\n                    onCancel={() => setSelectingLora(false)}\n                    onConfirm={(lora) => onAddLora(lora)}\n                />\n            )}\n        </div>\n    );\n};\n","// V2 page\nimport { FC, useState, useEffect } from \"react\";\nimport * as uuid from \"uuid\";\nimport axios from \"axios\";\nimport qs from \"qs\";\nimport Dropdown from \"react-bootstrap/Dropdown\";\nimport { useParams, useHistory, Link, useLocation } from \"react-router-dom\";\nimport moment from \"moment\";\nimport ScrollToTop from \"react-scroll-to-top\";\nimport { AIBrushApi } from \"../client\";\nimport { CreateImageInput, StatusEnum, TemporaryImage } from \"../client/api\";\nimport { ImageThumbnail } from \"../components/ImageThumbnail\";\nimport { ImagePrompt, defaultArgs } from \"../components/ImagePrompt\";\nimport {\n    convertPNGToJPG,\n    createBlankImage,\n    createEncodedThumbnail,\n    encodedImageToBlob,\n    uploadBlob,\n} from \"../lib/imageutil\";\n\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport { ImagePopup } from \"../components/ImagePopup\";\nimport { BusyModal } from \"../components/BusyModal\";\nimport { PendingJobsThumbnail } from \"../components/PendingJobsThumbnail\";\nimport { PendingJobs } from \"../components/PendingJobs\";\nimport { ApiSocket } from \"../lib/apisocket\";\nimport { LocalImagesStore } from \"../lib/localImagesStore\";\nimport { GenerationJob, LocalImage } from \"../lib/models\";\nimport { ErrorNotification, SuccessNotification } from \"../components/Alerts\";\nimport { sleep } from \"../lib/sleep\";\nimport { ProgressBar } from \"../components/ProgressBar\";\nimport OutOfCreditsModal from \"../components/OutOfCreditsModal\";\nimport PaymentStatusModal from \"../components/PaymentStatusModal\";\nimport { HordeGenerator } from \"../lib/hordegenerator\";\n\nexport const anonymousClient = axios.create();\ndelete anonymousClient.defaults.headers.common[\"Authorization\"];\n\ninterface Props {\n    api: AIBrushApi;\n    apiSocket: ApiSocket;\n    generator: HordeGenerator;\n    assetsUrl: string;\n    localImages: LocalImagesStore;\n    paymentStatus?: \"success\" | \"canceled\";\n}\n\nexport const Homepage: FC<Props> = ({\n    api,\n    generator,\n    assetsUrl,\n    localImages,\n    paymentStatus,\n}) => {\n    const [creating, setCreating] = useState(false);\n    const [selectedImage, setSelectedImage] = useState<LocalImage | null>(null);\n    const [parentImage, setParentImage] = useState<LocalImage | null>(null);\n    const [loadingParent, setLoadingParent] = useState(false);\n    const [savingImage, setSavingImage] = useState(false);\n    const [uploadProgress, setUploadingProgress] = useState(0);\n\n    const [showPendingImages, setShowPendingImages] = useState(false);\n\n    const [images, setImages] = useState<Array<LocalImage>>([]);\n    const [jobs, setJobs] = useState<Array<GenerationJob>>([]);\n\n    const [err, setErr] = useState<string | null>(null);\n    const [errTime, setErrTime] = useState<number>(0);\n\n    const [hasMore, setHasMore] = useState<boolean>(true);\n    const [search, setSearch] = useState<string>(\"\");\n    const [searchDebounce, setSearchDebounce] = useState<string>(\"\");\n\n    const [bulkDeleteSelecting, setBulkDeleteSelecting] = useState(false);\n    const [bulkDeleting, setBulkDeleting] = useState(false);\n    const [bulkDeleteIds, setBulkDeleteIds] = useState<{\n        [key: string]: boolean;\n    }>({});\n\n    const [censorNSFW, setCensorNSFW] = useState(true);\n    const [outOfCredits, setOutOfCredits] = useState(false);\n\n    const { id } = useParams<{ id?: string }>();\n    const history = useHistory();\n    const location = useLocation();\n\n    const onError = (err: string) => {\n        setErr(err);\n        setErrTime(moment().valueOf());\n    };\n\n    useEffect(() => {\n        let handle = setTimeout(() => {\n            setSearch(searchDebounce);\n        }, 500);\n        return () => {\n            clearTimeout(handle);\n        };\n    }, [searchDebounce]);\n\n    useEffect(() => {\n        if (id) {\n            // check if the image is already loaded\n            const image = images.find((image) => image.id === id);\n            if (image) {\n                setSelectedImage(image);\n            }\n            // refresh\n            localImages.getImage(id).then((image) => {\n                setSelectedImage(image);\n                if (!image) {\n                    history.replace(\"/\");\n                }\n            });\n        } else {\n            setSelectedImage(null);\n        }\n    }, [id]);\n\n    const onSubmit = async (input: CreateImageInput) => {\n        setCreating(true);\n        setParentImage(null);\n        setErr(null);\n        window.scrollTo(0, 0);\n        setUploadingProgress(0);\n        try {\n            if (input.encoded_image) {\n                input.encoded_image = await convertPNGToJPG(\n                    input.encoded_image\n                );\n            }\n            const job = await generator.generateImages(input, (progress) => {\n                setUploadingProgress(progress.loaded / progress.total);\n            });\n            setJobs((jobs) => [...jobs, job]);\n        } catch (e: any) {\n            // TODO: deal with insufficient kudos\n            console.error(e);\n            if (e.response?.data?.message?.includes(\"credits\")) {\n                setOutOfCredits(true);\n                return;\n            }\n            onError(\"Error creating images\");\n        } finally {\n            setCreating(false);\n        }\n    };\n\n    const onEditNewImage = async (input: CreateImageInput) => {\n        setCreating(true);\n        setParentImage(null);\n        setErr(null);\n        window.scrollTo(0, 0);\n        try {\n            let encodedImage = input.encoded_image;\n            if (!encodedImage) {\n                encodedImage = createBlankImage(\n                    \"#ffffff\",\n                    input.params.width!,\n                    input.params.height!\n                );\n            }\n            const newImage: LocalImage = {\n                created_at: moment().valueOf(),\n                updated_at: moment().valueOf(),\n                created_by: \"\",\n                params: {\n                    steps: 20,\n                    width: input.params.width,\n                    height: input.params.height,\n                    prompt: input.params.prompt,\n                    negative_prompt: input.params.negative_prompt,\n                    denoising_strength: input.params.denoising_strength,\n                },\n                label: \"\",\n                id: uuid.v4(),\n                model: input.model!,\n                negative_score: 0,\n                nsfw: !!input.nsfw,\n                parent: input.parent!,\n                score: 0,\n                status: StatusEnum.Completed,\n                temporary: false,\n                imageData: `data:image/png;base64,${encodedImage}`,\n            };\n            await localImages.saveImage(newImage);\n\n            history.push(`/image-editor/${newImage.id}`);\n        } catch (e: any) {\n            console.error(e);\n            onError(\"Error creating image\");\n        } finally {\n            setCreating(false);\n        }\n    };\n\n    const onNSFW = async (updatedImage: LocalImage, nsfw: boolean) => {\n        updatedImage = {\n            ...updatedImage,\n            nsfw,\n        };\n        await localImages.saveImage(updatedImage);\n        setImages((images) => {\n            return images.map((image) => {\n                if (updatedImage.id === image.id) {\n                    return {\n                        ...image,\n                        nsfw,\n                    };\n                }\n                return image;\n            });\n        });\n        setSelectedImage(updatedImage);\n    };\n\n    const loadImages = async (search: string) => {\n        console.log(\"Initial load images\");\n        // clear error\n        setErr(null);\n        setHasMore(true);\n        try {\n            const cursor = moment().add(1, \"minutes\").valueOf();\n            const resp = await localImages.listImages(\n                cursor,\n                \"prev\",\n                100,\n                search\n            );\n            setImages(resp.sort(sortImages));\n            return;\n        } catch (err) {\n            onError(\"Could not load images\");\n            console.error(err);\n        }\n    };\n\n    useEffect(() => {\n        loadImages(search);\n    }, [search]);\n\n    useEffect(() => {\n        let lock = false;\n\n        const pollImages = async (images: Array<LocalImage>) => {\n            if (lock) {\n                return;\n            }\n            lock = true;\n\n            try {\n                const updatedJobs = await generator.checkGenerationJobs(jobs);\n                let pendingJobs: GenerationJob[] = [];\n                let newImages: LocalImage[] = [];\n                for (let job of updatedJobs) {\n                    if (job.status === \"pending\" || job.status == \"processing\") {\n                        pendingJobs.push(job);\n                    } else if (job.status === \"completed\" && job.images) {\n                        for (let img of job.images) {\n                            if (img.status == StatusEnum.Error) {\n                                onError(\n                                    img.error ||\n                                        \"Some images failed to generate, please make sure your prompt doesn't violate our terms of service\"\n                                );\n                                continue;\n                            }\n                            newImages.push(img);\n                            localImages.saveImage(img);\n                        }\n                    }\n                }\n                if (newImages.length > 0) {\n                    setImages((images) => [...newImages, ...images]);\n                }\n                setJobs(pendingJobs);\n            } catch (err) {\n                onError(\"Could not load images\");\n                console.error(err);\n            } finally {\n                lock = false;\n            }\n        };\n\n        const timerHandle = setInterval(() => {\n            pollImages(images);\n        }, 2 * 1000);\n        return () => {\n            clearInterval(timerHandle);\n        };\n    }, [generator, jobs, images, search]);\n\n    // load parent image from saved images if an id is on the query string\n    // TODO: restore this once google drive integration is in place\n    useEffect(() => {\n        const loadParent = async () => {\n            const search = qs.parse(location.search, {\n                ignoreQueryPrefix: true,\n            });\n            if (search.parent) {\n                setLoadingParent(true);\n                try {\n                    const parentImage = await api.getImage(\n                        search.parent as string\n                    );\n                    if (parentImage.data) {\n                        const downloadUrls = await api.getImageDownloadUrls(\n                            parentImage.data.id\n                        );\n                        const resp = await anonymousClient.get(\n                            downloadUrls.data.image_url!,\n                            {\n                                responseType: \"arraybuffer\",\n                            }\n                        );\n                        const binaryImageData = Buffer.from(\n                            resp.data,\n                            \"binary\"\n                        );\n                        const base64ImageData =\n                            binaryImageData.toString(\"base64\");\n                        const src = `data:image/png;base64,${base64ImageData}`;\n                        setParentImage({\n                            ...parentImage.data,\n                            imageData: src,\n                        });\n                        history.push(\"/\");\n                    }\n                } finally {\n                    setLoadingParent(false);\n                }\n            }\n        };\n        loadParent();\n    }, [location.search]);\n\n    const isPendingOrProcessing = (image: LocalImage) => {\n        return (\n            image.status === StatusEnum.Pending ||\n            image.status === StatusEnum.Processing\n        );\n    };\n\n    const sortImages = (a: LocalImage, b: LocalImage) => {\n        // pending and processing images always come first\n        if (isPendingOrProcessing(a) && !isPendingOrProcessing(b)) {\n            return -1;\n        } else if (!isPendingOrProcessing(a) && isPendingOrProcessing(b)) {\n            return 1;\n        }\n\n        return b.updated_at - a.updated_at;\n    };\n\n    const onLoadMore = async () => {\n        // get the minimum updated_at from images\n        let minUpdatedAt = moment().valueOf();\n        images.forEach((image) => {\n            minUpdatedAt = Math.min(minUpdatedAt, image.updated_at);\n        });\n        // load images in descending order from updated_at\n        let resp = await localImages.listImages(\n            minUpdatedAt - 1,\n            \"prev\",\n            100,\n            search\n        );\n        if (resp.length > 0) {\n            // combine images with new images and sort by updated_at descending\n            setImages((images) => {\n                // filtering is required due to a race condition\n                const imagesById = images.reduce((acc, image) => {\n                    acc[image.id] = image;\n                    return acc;\n                }, {} as { [key: string]: LocalImage });\n                resp = resp.filter((image) => !imagesById[image.id]);\n                return [...images, ...resp]\n                    .filter((image) => !image.deleted_at)\n                    .sort(sortImages);\n            });\n        } else {\n            setHasMore(false);\n        }\n    };\n\n    const onDelete = async (image: LocalImage) => {\n        try {\n            // await api.deleteImage(image.id);\n            let nextImage = null;\n            if (selectedImage) {\n                const index = images.findIndex(\n                    (i) => i.id === selectedImage.id\n                );\n                if (index > 0) {\n                    nextImage = images[index - 1];\n                } else if (index === 0 && images.length > 1) {\n                    nextImage = images[1];\n                }\n            }\n            await localImages.deleteImage(image.id);\n            setImages((images) => {\n                return images.filter((i) => i.id !== image.id);\n            });\n            if (nextImage) {\n                history.push(`/images/${nextImage.id}`);\n            } else {\n                history.push(\"/\");\n            }\n        } catch (e) {\n            console.error(e);\n            onError(\"Error deleting image\");\n        }\n    };\n\n    const onDeleteJob = async (job: GenerationJob) => {\n        await generator.client.deleteImageRequest(job.id);\n        setJobs((jobs) => jobs.filter((j) => j.id !== job.id));\n    }\n\n    const onFork = async (image: LocalImage) => {\n        setParentImage(image);\n        // setSelectedImage(null);\n        history.push(\"/\");\n        window.scrollTo(0, 0);\n    };\n\n    // TODO: refactor to use google drive\n    // const onSave = async (image: LocalImage) => {\n    //     setSavingImage(true);\n    //     try {\n    //         history.push(\"/\");\n    //         const createInput: CreateImageInput = {\n    //             count: 1,\n    //             params: image.params,\n    //             status: StatusEnum.Saved,\n    //             temporary: false,\n    //             label: \"\",\n    //             model: image.model,\n    //             nsfw: image.nsfw,\n    //         };\n\n    //         const encodedImage = image.imageData!.split(\",\")[1];\n\n    //         // convert base64 to binary\n    //         const binaryImageData = Buffer.from(encodedImage, \"base64\");\n    //         const encodedThumbnail = await createEncodedThumbnail(encodedImage);\n    //         const binaryThumbnailData = Buffer.from(encodedThumbnail, \"base64\");\n\n    //         const createResp = await api.createImage(createInput);\n    //         const imageId = createResp.data.images![0].id;\n    //         const uploadUrls = await api.getImageUploadUrls(imageId);\n    //         await anonymousClient.put(\n    //             uploadUrls.data.thumbnail_url!,\n    //             binaryThumbnailData,\n    //             {\n    //                 headers: {\n    //                     \"Content-Type\": \"image/png\",\n    //                 },\n    //                 onUploadProgress: (progressEvent: any) => {\n    //                     const percentCompleted =\n    //                         progressEvent.loaded / progressEvent.total;\n    //                     setUploadingProgress(percentCompleted / 2);\n    //                 },\n    //             }\n    //         );\n    //         await anonymousClient.put(\n    //             uploadUrls.data.image_url!,\n    //             binaryImageData,\n    //             {\n    //                 headers: {\n    //                     \"Content-Type\": \"image/png\",\n    //                 },\n    //                 onUploadProgress: (progressEvent: any) => {\n    //                     const percentCompleted =\n    //                         progressEvent.loaded / progressEvent.total;\n    //                     setUploadingProgress(percentCompleted / 2 + 0.5);\n    //                 },\n    //             }\n    //         );\n\n    //         await localImages.hardDeleteImage(image.id);\n    //         setImages((images) => {\n    //             return images.filter((i) => i.id !== image.id);\n    //         });\n    //         setSuccess(\"Image saved\");\n    //         setSuccessTime(moment().valueOf());\n    //     } catch (e) {\n    //         console.error(e);\n    //         onError(\"Error saving image\");\n    //     } finally {\n    //         setSavingImage(false);\n    //     }\n    // };\n\n    const onEdit = async (image: LocalImage) => {\n        history.push(`/image-editor/${image.id}`);\n    };\n\n    const onThumbnailClicked = (image: LocalImage) => {\n        // setSelectedImage(image);\n        if (bulkDeleteSelecting) {\n            setBulkDeleteIds({\n                ...bulkDeleteIds,\n                [image.id]: !bulkDeleteIds[image.id],\n            });\n        } else {\n            history.push(`/images/${image.id}`);\n        }\n    };\n\n    const handleCancelFork = () => {\n        setParentImage(null);\n        window.scrollTo(0, 0);\n    };\n\n    const onConfirmBulkDelete = async () => {\n        try {\n            setBulkDeleting(true);\n            const promises = Object.keys(bulkDeleteIds).map((id) => {\n                return localImages.deleteImage(id);\n            });\n            await Promise.all(promises);\n            setImages((images) => {\n                return images.filter((image) => !bulkDeleteIds[image.id]);\n            });\n            setBulkDeleteIds({});\n            setBulkDeleteSelecting(false);\n        } catch (e) {\n            console.error(e);\n            onError(\"Error deleting images\");\n        } finally {\n            setBulkDeleting(false);\n        }\n    };\n\n    const completedOrSavedImages = images.filter((image) => {\n        return (\n            !image.deleted_at &&\n            (image.status === StatusEnum.Completed ||\n                image.status === StatusEnum.Saved)\n        );\n    });\n\n    const onSwipe = (image: LocalImage, direction: number) => {\n        // select the previous or next image from the currently selected one\n        const index = images.findIndex((i) => i.id === image.id);\n        if (index === -1) {\n            return;\n        }\n        const newIndex = index + direction;\n        if (newIndex < 0 || newIndex >= images.length) {\n            return;\n        }\n        const newImage = images[newIndex];\n        onThumbnailClicked(newImage);\n    };\n\n    const pendingJobs = jobs.filter((job) => job.status === \"pending\");\n    const processingJobs = jobs.filter((job) => job.status === \"processing\");\n\n    return (\n        <>\n            <h1 style={{ fontSize: \"40px\", textAlign: \"left\" }}>\n                Welcome to AiBrush - Home\n            </h1>\n\n            <ErrorNotification message={err} timestamp={errTime} />\n\n            <ImagePrompt\n                api={api}\n                assetsUrl={assetsUrl}\n                creating={creating}\n                onSubmit={onSubmit}\n                onEdit={onEditNewImage}\n                parent={parentImage}\n                onCancel={() => handleCancelFork()}\n            />\n            <hr />\n\n            <div\n                className=\"homepage-images\"\n                style={{ marginTop: \"48px\", paddingBottom: \"48px\" }}\n            >\n                <div style={{ textAlign: \"left\" }}>\n                    <div\n                        className=\"input-group\"\n                        style={{ marginBottom: \"16px\" }}\n                    >\n                        <input\n                            style={{}}\n                            value={searchDebounce}\n                            type=\"search\"\n                            className=\"form-control image-search\"\n                            placeholder=\"Search...\"\n                            onChange={(e) => setSearchDebounce(e.target.value)}\n                        />\n\n                        <div\n                            style={{\n                                float: \"right\",\n                            }}\n                        >\n                            {!bulkDeleteSelecting && (\n                                <>\n                                    <button\n                                        style={{ display: \"inline\" }}\n                                        className=\"btn btn-primary image-popup-button\"\n                                        onClick={() =>\n                                            setCensorNSFW(!censorNSFW)\n                                        }\n                                    >\n                                        {!censorNSFW && (\n                                            <i className=\"fas fa-eye\"></i>\n                                        )}\n                                        {censorNSFW && (\n                                            <i className=\"fas fa-eye-slash\"></i>\n                                        )}\n                                    </button>\n                                    <Dropdown\n                                        style={{\n                                            display: \"inline\",\n                                            marginLeft: \"8px\",\n                                        }}\n                                    >\n                                        <Dropdown.Toggle variant=\"danger\">\n                                            <i className=\"fas fa-trash\"></i>\n                                        </Dropdown.Toggle>\n\n                                        <Dropdown.Menu>\n                                            <Dropdown.Item\n                                                onClick={() =>\n                                                    setBulkDeleteSelecting(true)\n                                                }\n                                            >\n                                                Bulk Delete\n                                            </Dropdown.Item>\n                                            <Dropdown.Item\n                                                onClick={() =>\n                                                    history.push(\n                                                        \"/local-deleted-images\"\n                                                    )\n                                                }\n                                            >\n                                                View Deleted Images\n                                            </Dropdown.Item>\n                                        </Dropdown.Menu>\n                                    </Dropdown>\n                                </>\n                            )}\n                            {bulkDeleteSelecting && (\n                                <>\n                                    <button\n                                        className=\"btn btn-primary image-popup-button\"\n                                        onClick={() => {\n                                            setBulkDeleteSelecting(false);\n                                            setBulkDeleteIds({});\n                                        }}\n                                    >\n                                        Cancel\n                                    </button>\n                                    <button\n                                        style={{ marginLeft: \"8px\" }}\n                                        className=\"btn image-popup-delete-button\"\n                                        onClick={() => {\n                                            onConfirmBulkDelete();\n                                        }}\n                                    >\n                                        Delete\n                                    </button>\n                                </>\n                            )}\n                        </div>\n                    </div>\n                </div>\n                <InfiniteScroll\n                    dataLength={images.length}\n                    next={onLoadMore}\n                    hasMore={hasMore}\n                    loader={\n                        <>\n                            <hr />\n                            <h4>Loading...</h4>\n                        </>\n                    }\n                >\n                    {jobs.length > 0 && (\n                        <PendingJobsThumbnail\n                            pendingCount={pendingJobs.length}\n                            processingCount={processingJobs.length}\n                            onClick={() => {\n                                setShowPendingImages(true);\n                            }}\n                        />\n                    )}\n                    {completedOrSavedImages.map((image) => (\n                        <ImageThumbnail\n                            key={image.id}\n                            image={image}\n                            assetsUrl={assetsUrl}\n                            onClick={onThumbnailClicked}\n                            bulkDelete={\n                                bulkDeleteSelecting && bulkDeleteIds[image.id]\n                            }\n                            censorNSFW={censorNSFW}\n                        />\n                    ))}\n                </InfiniteScroll>\n            </div>\n\n            {selectedImage && (\n                <ImagePopup\n                    assetsUrl={assetsUrl}\n                    image={selectedImage}\n                    onClose={() => history.push(\"/\")}\n                    onDelete={(image) => {\n                        onDelete(image);\n                        setImages(images.filter((i) => i.id !== image.id));\n                        history.push(\"/\");\n                    }}\n                    onFork={(image) => {\n                        onFork(image);\n                        history.push(\"/\");\n                    }}\n                    onEdit={(image) => {\n                        onEdit(image);\n                    }}\n                    // onSave={(image) => {\n                    //     onSave(image);\n                    // }}\n                    onNSFW={onNSFW}\n                    censorNSFW={censorNSFW}\n                    onSwipe={onSwipe}\n                />\n            )}\n            <ScrollToTop />\n            <BusyModal show={creating} title=\"Creating images\">\n                <p>Please wait while we create your image.</p>\n                <ProgressBar progress={uploadProgress} />\n            </BusyModal>\n            <BusyModal show={bulkDeleting} title=\"Deleting images\">\n                <p>Please wait while we delete your images.</p>\n            </BusyModal>\n            <BusyModal show={loadingParent} title=\"Loading parent image\">\n                <p>Please wait while we load the parent image.</p>\n            </BusyModal>\n            <BusyModal show={savingImage} title=\"Saving image\">\n                {/* bootstrap progress bar for uploadProgress (0-1 value) */}\n                <ProgressBar progress={uploadProgress} />\n            </BusyModal>\n            <PendingJobs\n                jobs={jobs}\n                onCancel={() => setShowPendingImages(false)}\n                show={showPendingImages}\n                onDeleteJob={(job) => {\n                    onDeleteJob(job);\n                }}\n            />\n            <OutOfCreditsModal\n                show={outOfCredits}\n                onHide={() => setOutOfCredits(false)}\n            />\n            <PaymentStatusModal paymentStatus={paymentStatus} />\n        </>\n    );\n};\n","import { FC, useEffect, useState } from \"react\";\nimport { PaletteButton } from \"./PaletteButton\";\nimport { PencilTool } from \"./pencil-tool\";\nimport { Renderer } from \"./renderer\";\n\ninterface MaskEditorProps {\n    // renderer: Renderer;\n    tool: PencilTool;\n    onConfirm: () => void;\n    onRevert: () => void;\n}\n\nconst colors = [\"#FFFFFF\", \"#000000\"];\n\nexport const MaskEditor: FC<MaskEditorProps> = ({\n    // renderer,\n    tool,\n    onConfirm,\n    onRevert,\n}) => {\n    const [brushSize, setBrushSize] = useState(10);\n    const [brushColor, setBrushColor] = useState(colors[0]);\n\n    useEffect(() => {\n        tool.updateArgs({\n            brushSize,\n            brushColor,\n        });\n    }, [brushSize, brushColor]);\n\n    return (\n        <div style={{ marginTop: \"16px\" }}>\n            <div className=\"form-group\">\n                <label style={{ width: \"100%\" }}>\n                    Brush size\n                    <small\n                        className=\"form-text text-muted\"\n                        style={{ float: \"right\" }}\n                    >\n                        {brushSize}px\n                    </small>\n                </label>\n                <input\n                    type=\"range\"\n                    className=\"form-control-range\"\n                    min=\"1\"\n                    max=\"100\"\n                    value={brushSize}\n                    onChange={(e) => setBrushSize(parseInt(e.target.value))}\n                />\n            </div>\n            <div\n                style={{\n                    display: \"flex\",\n                    flexDirection: \"row\",\n                    flexWrap: \"wrap\",\n                }}\n            >\n                {colors.map((color, i) => (\n                    <PaletteButton\n                        key={i}\n                        selectedColor={brushColor}\n                        color={color}\n                        onClick={(color) => setBrushColor(color)}\n                    />\n                ))}\n            </div>\n            <div className=\"form-group\" style={{ marginTop: \"16px\" }}>\n                <i className=\"fa fa-info-circle\"></i>&nbsp;Masking: areas that\n                are painted white will be changed, areas that are painted black\n                will be left unchanged.\n            </div>\n            <div className=\"form-group\" style={{ marginTop: \"16px\" }}>\n                <button\n                    className=\"btn btn-secondary\"\n                    onClick={() => tool.renderer.invertMask()}\n                >\n                    Invert\n                </button>\n                <button\n                    className=\"btn btn-secondary\"\n                    onClick={onRevert}\n                    style={{ marginLeft: \"8px\" }}\n                >\n                    Cancel\n                </button>\n                <button\n                    className=\"btn btn-primary\"\n                    onClick={onConfirm}\n                    style={{ marginLeft: \"8px\" }}\n                >\n                    Save\n                </button>\n            </div>\n        </div>\n    );\n};\n","import React, { FC, useState, useEffect, useRef } from \"react\";\nimport axios from \"axios\";\nimport { Prompt } from \"react-router\";\nimport { loadImageAsync } from \"../../lib/loadImage\";\n\nimport { sleep } from \"../../lib/sleep\";\nimport { defaultArgs } from \"../../components/ImagePrompt\";\nimport { Tool, BaseTool } from \"./tool\";\nimport { Renderer } from \"./renderer\";\nimport { Cursor, Rect } from \"./models\";\nimport {\n    AIBrushApi,\n    CreateImageInput,\n    Image as APIImage,\n    ImageList,\n    LoraConfig,\n    StatusEnum,\n} from \"../../client\";\nimport { ZoomHelper } from \"./zoomHelper\";\nimport { getClosestAspectRatio } from \"../../lib/aspecRatios\";\nimport {\n    convertPNGToJPG,\n    ImageUtilWorker,\n    ImageWorkerRequest,\n    loadImageDataElement,\n} from \"../../lib/imageutil\";\nimport { SelectionTool, Controls as SelectionControls } from \"./selection-tool\";\nimport { getUpscaleLevel } from \"../../lib/upscale\";\nimport { ApiSocket, NOTIFICATION_IMAGE_UPDATED } from \"../../lib/apisocket\";\nimport moment from \"moment\";\nimport { ProgressBar } from \"../../components/ProgressBar\";\nimport { calculateImagesCost } from \"../../lib/credits\";\nimport { CostIndicator } from \"../../components/CostIndicator\";\nimport ModelSelector from \"../../components/ModelSelector\";\nimport { PencilTool } from \"./pencil-tool\";\nimport { MaskEditor } from \"./mask-editor-controls\";\nimport { ResetToDefaultIcon } from \"../../components/ResetToDefaultIcon\";\nimport {\n    LoraModal,\n    SelectedLora,\n    selectedLorasFromConfigs,\n} from \"../../components/LoraSelector\";\nimport { LoraTriggers } from \"../../components/LoraTriggers\";\nimport { SelectedLoraTag } from \"../../components/SelectedLora\";\nimport { GenerationJob, LocalImage } from \"../../lib/models\";\nimport { HordeGenerator } from \"../../lib/hordegenerator\";\n\nconst anonymousClient = axios.create();\n\ntype EnhanceToolState =\n    | \"select\"\n    | \"default\"\n    | \"uploading\"\n    | \"processing\"\n    | \"confirm\"\n    | \"erase\"\n    | \"mask\";\n\n// eraser width modifier adds a solid core with a feather edge\n// equal to the what is used on enhanced selections\nconst eraserWidthModifier = 1.3;\n\ninterface ImageWithData extends LocalImage {\n    data?: ImageData;\n}\n\nexport class EnhanceTool extends BaseTool implements Tool {\n    readonly selectionTool: SelectionTool;\n    readonly pencilTool: PencilTool;\n\n    private prompt: string = \"\";\n    private negativePrompt: string = \"\";\n    private model: string = \"Epic Diffusion\";\n    private count: number = 4;\n    private variationStrength: number = 0.35;\n    private loras: LoraConfig[] = [];\n    private _dirty = false;\n    private worker: ImageUtilWorker;\n    private idCounter = 0;\n\n    private _state: EnhanceToolState = \"default\";\n    private stateHandler: (state: EnhanceToolState) => void = () => {};\n    private selectionControlsListener: (show: boolean) => void = () => {};\n    private maskHandler: (isMasked: boolean) => void = () => {};\n\n    private imageData: Array<ImageData> = [];\n    private selectedImageDataIndex: number = -1;\n    private selectedImageData: ImageData | null = null;\n    private panning = false;\n    private erasing = false;\n    private progressListener?: (progress: number) => void;\n    private errorListener?: (error: string | null) => void;\n    private dirtyListener?: (dirty: boolean) => void;\n\n    set dirty(dirty: boolean) {\n        this._dirty = dirty;\n        if (this.dirtyListener) {\n            this.dirtyListener(dirty);\n        }\n    }\n\n    get dirty() {\n        return this._dirty;\n    }\n\n    onDirty(listener: (dirty: boolean) => void): void {\n        this.dirtyListener = listener;\n    }\n\n    onError(handler: (error: string | null) => void) {\n        this.errorListener = handler;\n    }\n\n    private notifyError(error: string | null) {\n        if (this.errorListener) {\n            this.errorListener(error);\n        }\n    }\n\n    get state(): EnhanceToolState {\n        return this._state;\n    }\n\n    set state(state: EnhanceToolState) {\n        if (state !== this._state) {\n            this.renderer.setCursor(undefined);\n            if (this._state == \"select\") {\n                this.selectionTool.destroy();\n            }\n            // if (this._state === \"mask\") {\n            //     this.renderer.setCursor(undefined);\n            // }\n            // if (this._state === \"erase\") {\n            //     this.renderer.setCursor(undefined);\n            // }\n            this._state = state;\n            this.stateHandler(state);\n            if (state == \"confirm\") {\n                this.selectionControlsListener(true);\n            } else {\n                this.selectionControlsListener(false);\n                if (state == \"select\") {\n                    this.selectionTool.updateArgs({\n                        ...this.selectionTool.getArgs(),\n                        outpaint: false,\n                    });\n                }\n            }\n        }\n    }\n\n    selectSupported(): boolean {\n        return !(\n            getUpscaleLevel(\n                this.renderer.getWidth(),\n                this.renderer.getHeight()\n            ) === 0 && this.renderer.getWidth()\n        );\n    }\n\n    constructor(renderer: Renderer) {\n        super(renderer, \"enhance\");\n        this.selectionTool = new SelectionTool(renderer);\n        this.pencilTool = new PencilTool(\n            renderer,\n            \"mask\",\n            \"#FFFFFF\",\n            \"mask-editor\"\n        );\n        if (this.selectSupported()) {\n            this.state = \"select\";\n        } else {\n            this.state = \"default\";\n        }\n        let selectionArgs = this.selectionTool.getArgs();\n        if (!this.selectSupported()) {\n            selectionArgs = {\n                ...selectionArgs,\n                selectionOverlay: {\n                    x: 0,\n                    y: 0,\n                    width: this.renderer.getWidth(),\n                    height: this.renderer.getHeight(),\n                },\n            };\n        }\n        this.selectionTool.updateArgs(selectionArgs);\n        this.pencilTool.updateArgs({\n            ...this.pencilTool.getArgs(),\n            brushColor: \"#FFFFFF\",\n        });\n        // unset the cursor from the pencil tool (hack)\n        this.renderer.setCursor(undefined);\n        this.worker = new ImageUtilWorker();\n    }\n\n    onMouseDown(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        if (this.state == \"select\") {\n            this.selectionTool.onMouseDown(event);\n            return;\n        }\n        if (this.state == \"mask\") {\n            this.pencilTool.onMouseDown(event);\n            return;\n        }\n        let { x, y } = this.zoomHelper.translateMouseToCanvasCoordinates(\n            event.nativeEvent.offsetX,\n            event.nativeEvent.offsetY\n        );\n        if (event.button === 1) {\n            this.panning = true;\n            return;\n        }\n        if (this.state == \"erase\" && this.selectedImageData) {\n            this.erasing = true;\n            // clone selected ImageData\n            this.selectedImageData = new ImageData(\n                this.selectedImageData.data.slice(),\n                this.selectedImageData.width,\n                this.selectedImageData.height\n            );\n\n            this.erasePoint(x, y);\n        }\n    }\n\n    // TODO: on erase cancel and on erase confirm\n    // either restore the image data from the array\n    // or overwrite the array with the new image data\n\n    private erasePoint(x: number, y: number) {\n        const selectionOverlay = this.renderer.getSelectionOverlay()!;\n        const baseWidth = Math.min(\n            selectionOverlay.width,\n            selectionOverlay.height\n        );\n        const eraserRadius = Math.floor((baseWidth / 8) * eraserWidthModifier);\n\n        const relX = x - selectionOverlay.x;\n        const relY = y - selectionOverlay.y;\n        const imageData = this.selectedImageData!;\n\n        const startX = Math.max(0, relX - eraserRadius);\n        const startY = Math.max(0, relY - eraserRadius);\n        const endX = Math.min(imageData.width, relX + eraserRadius);\n        const endY = Math.min(imageData.height, relY + eraserRadius);\n\n        // relX=64.28541697636388, relY=64.24464312259761, startX=0.28541697636387653, startY=0.24464312259760845, endX=128.28541697636388, endY=128.2446431225976\n\n        for (let i = startX; i < endX; i++) {\n            for (let j = startY; j < endY; j++) {\n                const index = (j * imageData.width + i) * 4;\n                const distance = Math.sqrt(\n                    Math.pow(i - relX, 2) + Math.pow(j - relY, 2)\n                );\n                if (distance < eraserRadius) {\n                    // set alpha to a linear gradient from the center,\n                    // 100% in the middle and 0% at the edge\n                    const alphaPct =\n                        (distance / eraserRadius) * eraserWidthModifier -\n                        (eraserWidthModifier - 1);\n\n                    const alpha = Math.min(\n                        Math.floor(alphaPct * 255),\n                        imageData.data[index + 3]\n                    );\n                    imageData.data[index + 3] = alpha;\n                }\n            }\n        }\n        this.renderer.setEditImage(imageData);\n    }\n\n    private updateCursor(x: number, y: number) {\n        if (this.state == \"erase\" && this.selectedImageData) {\n            const selectionOverlay = this.renderer.getSelectionOverlay()!;\n            const baseWidth = Math.min(\n                selectionOverlay.width,\n                selectionOverlay.height\n            );\n            const featherWidth = Math.floor(baseWidth / 8);\n            this.renderer.setCursor({\n                color: \"white\",\n                radius: featherWidth * eraserWidthModifier,\n                type: \"circle\",\n                x,\n                y,\n            });\n        } else {\n            this.renderer.setCursor({\n                color: \"white\",\n                radius: 10,\n                type: \"crosshairs\",\n                x,\n                y,\n            });\n        }\n    }\n\n    onMouseMove(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        if (this.state == \"select\") {\n            this.selectionTool.onMouseMove(event);\n            return;\n        }\n        if (this.state == \"mask\") {\n            this.pencilTool.onMouseMove(event);\n            return;\n        }\n        let { x, y } = this.zoomHelper.translateMouseToCanvasCoordinates(\n            event.nativeEvent.offsetX,\n            event.nativeEvent.offsetY\n        );\n        if (this.panning) {\n            this.zoomHelper.onPan(event);\n        }\n\n        this.updateCursor(x, y);\n        if (this.erasing) {\n            this.erasePoint(x, y);\n        }\n    }\n\n    onMouseUp(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        if (this.state == \"select\") {\n            this.selectionTool.onMouseUp(event);\n        }\n        if (this.state == \"mask\") {\n            this.pencilTool.onMouseUp(event);\n        }\n        this.panning = false;\n        this.erasing = false;\n    }\n\n    onMouseLeave(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>): void {\n        if (this.state == \"select\") {\n            this.selectionTool.onMouseLeave(event);\n        }\n        if (this.state == \"mask\") {\n            this.pencilTool.onMouseLeave(event);\n        }\n        this.panning = false;\n        this.erasing = false;\n    }\n\n    onWheel(event: WheelEvent) {\n        this.zoomHelper.onWheel(event);\n        let { x, y } = this.zoomHelper.translateMouseToCanvasCoordinates(\n            event.offsetX,\n            event.offsetY\n        );\n        this.updateCursor(x, y);\n    }\n\n    updateArgs(args: any) {\n        args = {\n            ...this.getArgs(),\n            ...args,\n        };\n        this.prompt = args.prompt || \"\";\n        this.negativePrompt = args.negativePrompt || \"\";\n        this.model = args.model || \"Epic Diffusion\";\n        this.count = args.count || 4;\n        this.variationStrength = args.variationStrength || 0.75;\n        this.loras = args.loras || [];\n        console.log(\"updateArgs\", args);\n    }\n\n    onChangeState(handler: (state: EnhanceToolState) => void) {\n        this.stateHandler = handler;\n    }\n\n    onChangeMask(handler: (isMasked: boolean) => void) {\n        this.maskHandler = handler;\n    }\n\n    onShowSelectionControls(listener: (show: boolean) => void): void {\n        this.selectionControlsListener = listener;\n    }\n\n    onProgress(listener: (progress: number) => void): void {\n        this.progressListener = listener;\n    }\n\n    private newId(): string {\n        return `${this.idCounter++}`;\n    }\n\n    private async loadImageData(\n        image: LocalImage,\n        maskData: ImageData | undefined,\n        selectionOverlay: Rect\n    ): Promise<ImageData> {\n        const imageElement = await loadImageDataElement(image);\n        const canvas = document.createElement(\"canvas\");\n        canvas.width = selectionOverlay.width;\n        canvas.height = selectionOverlay.height;\n        const ctx = canvas.getContext(\"2d\");\n        if (!ctx) {\n            throw new Error(\"Failed to get canvas context\");\n        }\n        ctx.drawImage(\n            imageElement,\n            0,\n            0,\n            selectionOverlay.width,\n            selectionOverlay.height\n        );\n        const imageData = ctx.getImageData(\n            0,\n            0,\n            selectionOverlay.width,\n            selectionOverlay.height\n        );\n        const id = this.newId();\n        const req: ImageWorkerRequest = {\n            id,\n            alphaMode: \"none\",\n            feather: true,\n            height: this.renderer.getHeight(),\n            width: this.renderer.getWidth(),\n            pixels: imageData.data,\n            selectionOverlay,\n        };\n        if (maskData) {\n            req.alphaMode = \"mask\";\n            req.alphaPixels = maskData.data;\n        }\n        const resp = await this.worker.processRequest(req);\n        const updatedImageData = new ImageData(\n            resp.pixels,\n            imageData.width,\n            imageData.height\n        );\n        // remove canvas\n        canvas.remove();\n        return updatedImageData;\n    }\n\n    cancel() {\n        if (this.state == \"erase\") {\n            this.state = \"confirm\";\n            this.selectedImageData =\n                this.imageData[this.selectedImageDataIndex];\n            this.renderer.setEditImage(this.selectedImageData);\n        } else {\n            if (this.selectSupported()) {\n                this.state = \"select\";\n            } else {\n                this.state = \"default\";\n            }\n            this.imageData = [];\n            this.renderer.setEditImage(null);\n            this.dirty = false;\n        }\n    }\n\n    erase() {\n        this.state = \"erase\";\n    }\n\n    mask() {\n        if (this.renderer.isMasked()) {\n            this.renderer.deleteMask();\n        }\n        this.renderer.createMask();\n        this.state = \"mask\";\n        this.maskHandler(true);\n    }\n\n    deleteMask() {\n        this.renderer.deleteMask();\n        if (this.state == \"mask\") {\n            this.state = \"default\";\n        }\n        this.maskHandler(false);\n    }\n\n    private updateProgress(progress: number) {\n        if (this.progressListener) {\n            this.progressListener(progress);\n        }\n    }\n\n    async submit(generator: HordeGenerator, image: LocalImage) {\n        this.dirty = true;\n        this.notifyError(null);\n        const selectionOverlay = this.renderer.getSelectionOverlay();\n        let encodedImage = this.renderer.getEncodedImage(selectionOverlay!);\n        if (!encodedImage) {\n            console.error(\"No selection\");\n            return;\n        }\n        encodedImage = await convertPNGToJPG(encodedImage);\n        let encodedMask: string | undefined;\n        let maskData: ImageData | undefined;\n        if (this.renderer.isMasked()) {\n            encodedMask = this.renderer.getEncodedMask(\n                selectionOverlay!,\n                \"mask\"\n            );\n            maskData = this.renderer.getImageData(selectionOverlay!, \"mask\");\n        }\n\n        const input: CreateImageInput = defaultArgs();\n        input.encoded_image = encodedImage;\n\n        if (encodedMask) {\n            input.encoded_mask = encodedMask;\n        }\n\n        input.label = \"\";\n        input.parent = image.id;\n        input.params.prompt = this.prompt || image.params.prompt;\n        input.params.negative_prompt =\n            this.negativePrompt || image.params.negative_prompt;\n        input.params.denoising_strength = this.variationStrength;\n        input.count = this.count;\n        input.model = this.model;\n        input.nsfw = image.nsfw;\n\n        input.params.width = selectionOverlay!.width;\n        input.params.height = selectionOverlay!.height;\n        // round width and height up to the nearest multiple of 64\n        input.params.width = Math.ceil(input.params.width / 64) * 64;\n        input.params.height = Math.ceil(input.params.height / 64) * 64;\n        input.params.loras = this.loras;\n        input.temporary = true;\n\n        let job: GenerationJob | undefined;\n        this.state = \"uploading\";\n\n        try {\n            job = await generator.generateImages(input, (progress) => {\n                this.updateProgress(progress.loaded / progress.total);\n            });\n        } catch (err) {\n            console.error(\"Error creating images\", err);\n            this.notifyError(\"Failed to create image\");\n            this.state = \"default\";\n            return;\n        }\n        this.state = \"processing\";\n        this.updateProgress(0);\n        let completed = false;\n\n        let startTime = moment();\n        let newImages: Array<ImageWithData> = [];\n\n        while (!completed) {\n            await sleep(2000);\n            // poll for completion\n            job = await generator.checkGenerationJob(job);\n            this.updateProgress(job.progress);\n            if (job.status === \"completed\") {\n                completed = true;\n                newImages = job.images!.filter(\n                    (img) => img.status === \"completed\"\n                );\n                await Promise.all(\n                    newImages.map(async (img) => {\n                        const imageData = await this.loadImageData(\n                            img,\n                            maskData,\n                            selectionOverlay!\n                        );\n                        img.data = imageData;\n                    })\n                );\n            }\n            // timeout of 2 minutes\n            if (moment().diff(startTime, \"minutes\") > 2) {\n                completed = true;\n                await generator.client.deleteImageRequest(job.id);\n            }\n        }\n\n        newImages!.sort((a, b) => {\n            return a.created_at - b.created_at;\n        });\n        newImages = newImages!.filter((img) => {\n            return img.status === StatusEnum.Completed;\n        });\n\n        this.imageData = [];\n        for (let i = 0; i < newImages!.length; i++) {\n            if (newImages![i].data) {\n                this.imageData.push(newImages![i].data as ImageData);\n            }\n        }\n        if (this.imageData.length === 0) {\n            this.state = \"default\";\n            this.notifyError(\"No images returned\");\n            return;\n        }\n        this.renderer.setEditImage(this.imageData[0]);\n        this.selectedImageDataIndex = 0;\n        this.selectedImageData = this.imageData[0];\n        this.state = \"confirm\";\n        this.deleteMask();\n    }\n\n    select(direction: \"left\" | \"right\") {\n        if (direction == \"left\") {\n            this.selectedImageDataIndex--;\n            if (this.selectedImageDataIndex < -1) {\n                this.selectedImageDataIndex = this.imageData.length - 1;\n            }\n        }\n        if (direction == \"right\") {\n            this.selectedImageDataIndex++;\n            if (this.selectedImageDataIndex >= this.imageData.length) {\n                this.selectedImageDataIndex = -1;\n            }\n        }\n        if (this.selectedImageDataIndex === -1) {\n            this.selectedImageData = null;\n        } else {\n            this.selectedImageData =\n                this.imageData[this.selectedImageDataIndex];\n        }\n        this.renderer.setEditImage(this.selectedImageData);\n    }\n\n    onSaveImage(listener: (encodedImage: string, args?: any) => void): void {\n        this.saveListener = listener;\n    }\n\n    confirm() {\n        this.renderer.commitSelection();\n        if (this.selectSupported()) {\n            this.state = \"select\";\n        } else {\n            this.state = \"default\";\n        }\n        this.imageData = [];\n        const encodedImage = this.renderer.getEncodedImage(null);\n        if (encodedImage && this.saveListener) {\n            this.saveListener(encodedImage, {\n                phrases: [this.prompt],\n                negative_phrases: [this.negativePrompt],\n                model: this.model,\n            });\n        }\n        this.dirty = false;\n    }\n\n    destroy(): boolean {\n        if (this.renderer.isMasked()) {\n            this.renderer.deleteMask();\n        }\n        this.renderer.setCursor(undefined);\n        this.worker.destroy();\n        return true;\n    }\n}\n\ninterface ControlsProps {\n    generator: HordeGenerator;\n    image: LocalImage;\n    renderer: Renderer;\n    tool: EnhanceTool;\n}\n\nexport const EnhanceControls: FC<ControlsProps> = ({\n    generator,\n    image,\n    renderer,\n    tool,\n}) => {\n    const [count, setCount] = useState(4);\n    const [dirty, setDirty] = useState(false);\n    const [variationStrength, setVariationStrength] = useState(0.35);\n    const [prompt, setPrompt] = useState(image.params.prompt || \"\");\n    const [negativePrompt, setNegativePrompt] = useState(\n        image.params.negative_prompt || \"\"\n    );\n    const [model, setModel] = useState(\n        image.model == \"swinir\" || image.model == \"stable_diffusion\"\n            ? \"Epic Diffusion\"\n            : image.model\n    );\n    const [selectingModel, setSelectingModel] = useState<boolean>(false);\n    const [state, setState] = useState<EnhanceToolState>(tool.state);\n    const [isMasked, setIsMasked] = useState<boolean>(tool.renderer.isMasked());\n    const [progress, setProgress] = useState(0);\n    const [error, setError] = useState<string | null>(null);\n\n    const [selectingLora, setSelectingLora] = useState<boolean>(false);\n    const [selectedLoras, setSelectedLoras] = useState<SelectedLora[]>([]);\n\n    tool.onChangeState(setState);\n    tool.onChangeMask(setIsMasked);\n    tool.onProgress(setProgress);\n    tool.onError(setError);\n    tool.onDirty(setDirty);\n\n    useEffect(() => {\n        if (image.params.loras && image.params.loras.length > 0) {\n            selectedLorasFromConfigs(image.params.loras).then((selected) => {\n                setSelectedLoras(selected);\n            });\n        } else {\n            setSelectedLoras([]);\n        }\n    }, [image]);\n\n    const onAddLora = (lora: SelectedLora) => {\n        setSelectedLoras([...selectedLoras, lora]);\n        setSelectingLora(false);\n    };\n\n    const onRemoveLora = (lora: SelectedLora) => {\n        const updated = selectedLoras.filter(\n            (selectedLora) => selectedLora.config.name !== lora.config.name\n        );\n        setSelectedLoras(updated);\n    };\n\n    const onAddTrigger = (trigger: string) => {\n        const parts = [prompt];\n        if (prompt.length > 0 && !prompt.endsWith(\",\")) {\n            parts.push(\", \");\n        }\n        parts.push(trigger);\n        setPrompt(parts.join(\"\"));\n    };\n\n    const selectionOverlay: Rect =\n        tool.selectionTool.getArgs().selectionOverlay;\n    let cost = count;\n    if (selectionOverlay) {\n        cost = calculateImagesCost(\n            count,\n            selectionOverlay.width,\n            selectionOverlay.height\n        );\n    }\n\n    if (state == \"processing\" || state == \"uploading\") {\n        return (\n            <div style={{ marginTop: \"16px\" }}>\n                <i className=\"fa fa-spinner fa-spin\"></i>&nbsp;{\" \"}\n                {state === \"processing\" ? \"Enhancing...\" : \"Uploading...\"}\n                <br />\n                <ProgressBar progress={progress} />\n            </div>\n        );\n    }\n\n    return (\n        <div\n            style={{\n                marginTop: \"16px\",\n                marginBottom: \"8px\",\n                marginLeft: \"16px\",\n            }}\n        >\n            {error && (\n                <div className=\"alert alert-danger\" role=\"alert\">\n                    {/* dismiss button */}\n                    <button\n                        type=\"button\"\n                        className=\"close\"\n                        data-dismiss=\"alert\"\n                        aria-label=\"Close\"\n                        onClick={() => setError(null)}\n                    >\n                        <span aria-hidden=\"true\">&times;</span>\n                    </button>\n                    {error}\n                </div>\n            )}\n            {state === \"select\" && (\n                <>\n                    <p>\n                        {/* info icon */}\n                        <i className=\"fa fa-info-circle\"></i>&nbsp; Move the\n                        selection rectangle to the area that you want to enhance\n                    </p>\n                    <SelectionControls\n                        renderer={renderer}\n                        tool={tool.selectionTool}\n                        lockAspectRatio={true}\n                    />\n                </>\n            )}\n            {state === \"default\" && (\n                <>\n                    <p>\n                        {/* info icon */}\n                        <i className=\"fa fa-info-circle\"></i>&nbsp; Confirm the\n                        parameters below and continue\n                    </p>\n                    {/* prompt */}\n                    <div className=\"form-group\">\n                        <label htmlFor=\"prompt\">\n                            Prompt&nbsp;\n                            <ResetToDefaultIcon\n                                onClick={() =>\n                                    setPrompt(image.params.prompt || \"\")\n                                }\n                            />\n                        </label>\n                        {/* refresh icon */}\n\n                        <input\n                            type=\"text\"\n                            className=\"form-control\"\n                            id=\"prompt\"\n                            value={prompt}\n                            onChange={(e) => {\n                                setPrompt(e.target.value);\n                            }}\n                        />\n\n                        <small className=\"form-text text-muted\">\n                            Customize the text prompt here\n                        </small>\n                    </div>\n                    {selectedLoras.length > 0 && (\n                        <LoraTriggers\n                            prompt={prompt}\n                            selectedLoras={selectedLoras}\n                            onAddTrigger={onAddTrigger}\n                        />\n                    )}\n                    {/* negative prompt */}\n                    <div className=\"form-group\">\n                        <label htmlFor=\"negative-prompt\">\n                            Negative Prompt&nbsp;\n                            <ResetToDefaultIcon\n                                onClick={() =>\n                                    setNegativePrompt(\n                                        image.params.negative_prompt || \"\"\n                                    )\n                                }\n                            />\n                        </label>\n                        <input\n                            type=\"text\"\n                            className=\"form-control\"\n                            id=\"negative-prompt\"\n                            value={negativePrompt}\n                            onChange={(e) => {\n                                setNegativePrompt(e.target.value);\n                            }}\n                        />\n                        <small className=\"form-text text-muted\">\n                            Customize the negative text prompt here\n                        </small>\n                    </div>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"count\">Count: {count}</label>\n                        <input\n                            type=\"range\"\n                            className=\"form-control-range\"\n                            id=\"count\"\n                            min=\"1\"\n                            max=\"10\"\n                            step=\"1\"\n                            value={count}\n                            onChange={(e) => {\n                                setCount(parseInt(e.target.value));\n                            }}\n                        />\n                        <small className=\"form-text text-muted\">\n                            Number of enhancement options\n                        </small>\n                    </div>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"variation-strength\">\n                            Variation Strength:{\" \"}\n                            {Math.round(variationStrength * 100)}%\n                        </label>\n                        <input\n                            type=\"range\"\n                            className=\"form-control-range\"\n                            id=\"variation-strength\"\n                            min=\"0\"\n                            max=\"1\"\n                            step=\"0.05\"\n                            value={variationStrength}\n                            onChange={(e) => {\n                                setVariationStrength(\n                                    parseFloat(e.target.value)\n                                );\n                            }}\n                        />\n                        <small className=\"form-text text-muted\">\n                            How much variation to use\n                        </small>\n                    </div>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"model\">Model</label>\n                        <div>\n                            <button\n                                type=\"button\"\n                                className=\"btn btn-secondary light-button\"\n                                onClick={() => setSelectingModel(true)}\n                            >\n                                {model}&nbsp;\n                                <i className=\"fas fa-caret-down\"></i>\n                            </button>\n                        </div>\n                        <small className=\"form-text text-muted\">\n                            Select the model to use\n                        </small>\n                    </div>\n                    <div className=\"form-group\">\n                        {/* loras */}\n                        <label htmlFor=\"loras\">Loras</label>\n                        <div>\n                            {selectedLoras.map((lora) => (\n                                <SelectedLoraTag\n                                    key={lora.lora.name}\n                                    lora={lora}\n                                    onRemove={(lora) => onRemoveLora(lora)}\n                                />\n                            ))}\n                            {/* add lora button */}\n                            {selectedLoras.length < 5 && (\n                                <button\n                                    type=\"button\"\n                                    className=\"btn btn-secondary light-button\"\n                                    style={{ marginLeft: \"8px\" }}\n                                    onClick={() => setSelectingLora(true)}\n                                >\n                                    <i className=\"fas fa-plus\"></i>&nbsp;Add\n                                    Lora\n                                </button>\n                            )}\n                        </div>\n                    </div>\n                    <div className=\"form-group\">\n                        <CostIndicator imagesCost={cost} />\n                    </div>\n                </>\n            )}\n            {state === \"erase\" && (\n                <p>\n                    {/* info icon */}\n                    <i className=\"fa fa-info-circle\"></i>&nbsp; Erase any\n                    undesired sections before saving\n                </p>\n            )}\n            {state === \"mask\" && (\n                <MaskEditor\n                    onConfirm={() => (tool.state = \"default\")}\n                    onRevert={() => {\n                        tool.deleteMask();\n                    }}\n                    tool={tool.pencilTool}\n                />\n            )}\n\n            <div className=\"form-group\">\n                {state === \"select\" && (\n                    <button\n                        type=\"button\"\n                        className=\"btn btn-primary btn-sm\"\n                        onClick={() => {\n                            tool.state = \"default\";\n                        }}\n                        style={{ marginRight: \"8px\" }}\n                    >\n                        {/* magic icon */}\n                        <i className=\"fa fa-magic\"></i>&nbsp; Continue\n                    </button>\n                )}\n                {((state === \"default\" && tool.selectSupported()) ||\n                    state === \"confirm\" ||\n                    state === \"erase\") && (\n                    <button\n                        className=\"btn btn-primary btn-sm\"\n                        onClick={() => {\n                            tool.cancel();\n                        }}\n                        style={{ marginRight: \"8px\" }}\n                    >\n                        {/* cancel icon */}\n                        <i className=\"fa fa-times\"></i>&nbsp; Revert\n                    </button>\n                )}\n                {(state === \"confirm\" || state === \"erase\") && (\n                    <button\n                        className=\"btn btn-primary btn-sm\"\n                        onClick={() => tool.confirm()}\n                        style={{ marginRight: \"8px\" }}\n                    >\n                        <i className=\"fa fa-save\"></i>&nbsp; Save\n                    </button>\n                )}\n                {state === \"confirm\" && (\n                    <>\n                        <button\n                            className=\"btn btn-primary btn-sm\"\n                            onClick={() => tool.erase()}\n                            style={{ marginRight: \"8px\" }}\n                        >\n                            <i className=\"fa fa-eraser\"></i>&nbsp; Erase\n                        </button>\n                    </>\n                )}\n                {state === \"default\" && (\n                    <>\n                        <button\n                            className=\"btn btn-primary btn-sm\"\n                            onClick={() => {\n                                tool.updateArgs({\n                                    count,\n                                    variationStrength,\n                                    prompt,\n                                    negativePrompt,\n                                    model,\n                                    loras: selectedLoras.map(\n                                        (lora) => lora.config\n                                    ),\n                                });\n                                tool.submit(generator, image);\n                            }}\n                            style={{ marginRight: \"8px\" }}\n                        >\n                            <i className=\"fa fa-magic\"></i>&nbsp; Enhance\n                        </button>\n                        <button\n                            className=\"btn btn-primary btn-sm\"\n                            onClick={() => tool.mask()}\n                            style={{ marginRight: \"8px\" }}\n                        >\n                            <i className=\"fa fa-cut\"></i>&nbsp; Mask\n                        </button>\n                        {isMasked && (\n                            <button\n                                className=\"btn btn-danger btn-sm\"\n                                onClick={() => tool.deleteMask()}\n                                style={{ marginRight: \"8px\" }}\n                            >\n                                <i className=\"fa fa-cut\"></i>&nbsp; Unmask\n                            </button>\n                        )}\n                    </>\n                )}\n            </div>\n            <Prompt\n                when={dirty}\n                message=\"Are you sure you want to leave? Your changes will be lost.\"\n            />\n            {selectingModel && (\n                <ModelSelector\n                    onCancel={() => setSelectingModel(false)}\n                    onSelectModel={(model) => {\n                        setModel(model);\n                        setSelectingModel(false);\n                    }}\n                    initialSelectedModel={model}\n                    inpainting={false}\n                />\n            )}\n            {selectingLora && (\n                <LoraModal\n                    onCancel={() => setSelectingLora(false)}\n                    onConfirm={(lora) => onAddLora(lora)}\n                />\n            )}\n        </div>\n    );\n};\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * AIBrush API\n * Orchestration backend for AI Brush\n *\n * The version of the OpenAPI document: 1.0.0\n * Contact: admin@aibrush.art\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport { Configuration } from './configuration';\nimport globalAxios, { AxiosPromise, AxiosInstance } from 'axios';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';\n\n/**\n * \n * @export\n * @interface AddMetricItem\n */\nexport interface AddMetricItem {\n    /**\n     * \n     * @type {string}\n     * @memberof AddMetricItem\n     */\n    name: string;\n    /**\n     * \n     * @type {number}\n     * @memberof AddMetricItem\n     */\n    value: number;\n    /**\n     * \n     * @type {string}\n     * @memberof AddMetricItem\n     */\n    type: AddMetricItemTypeEnum;\n    /**\n     * \n     * @type {Array<MetricAttribute>}\n     * @memberof AddMetricItem\n     */\n    attributes: Array<MetricAttribute>;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum AddMetricItemTypeEnum {\n    Gauge = 'gauge',\n    Count = 'count'\n}\n\n/**\n * \n * @export\n * @interface AddMetricsInput\n */\nexport interface AddMetricsInput {\n    /**\n     * \n     * @type {Array<AddMetricItem>}\n     * @memberof AddMetricsInput\n     */\n    metrics: Array<AddMetricItem>;\n}\n/**\n * \n * @export\n * @interface AssetsUrl\n */\nexport interface AssetsUrl {\n    /**\n     * \n     * @type {string}\n     * @memberof AssetsUrl\n     */\n    assets_url: string;\n}\n/**\n * \n * @export\n * @interface BatchGetImagesInput\n */\nexport interface BatchGetImagesInput {\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof BatchGetImagesInput\n     */\n    ids: Array<string>;\n}\n/**\n * \n * @export\n * @interface CreateDepositCodeInput\n */\nexport interface CreateDepositCodeInput {\n    /**\n     * \n     * @type {number}\n     * @memberof CreateDepositCodeInput\n     */\n    amount: number;\n}\n/**\n * \n * @export\n * @interface CreateImageInput\n */\nexport interface CreateImageInput {\n    /**\n     * \n     * @type {StatusEnum}\n     * @memberof CreateImageInput\n     */\n    status?: StatusEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateImageInput\n     */\n    label?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateImageInput\n     */\n    parent?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateImageInput\n     */\n    encoded_image?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateImageInput\n     */\n    encoded_mask?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateImageInput\n     */\n    tmp_image_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateImageInput\n     */\n    tmp_jpg_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateImageInput\n     */\n    tmp_mask_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateImageInput\n     */\n    tmp_thumbnail_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateImageInput\n     */\n    model: string;\n    /**\n     * \n     * @type {ImageParams}\n     * @memberof CreateImageInput\n     */\n    params: ImageParams;\n    /**\n     * \n     * @type {number}\n     * @memberof CreateImageInput\n     */\n    count: number;\n    /**\n     * \n     * @type {boolean}\n     * @memberof CreateImageInput\n     */\n    nsfw?: boolean;\n    /**\n     * \n     * @type {boolean}\n     * @memberof CreateImageInput\n     */\n    temporary?: boolean;\n}\n/**\n * \n * @export\n * @interface CreateStripeSessionInput\n */\nexport interface CreateStripeSessionInput {\n    /**\n     * \n     * @type {string}\n     * @memberof CreateStripeSessionInput\n     */\n    product_id: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateStripeSessionInput\n     */\n    success_url: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateStripeSessionInput\n     */\n    cancel_url: string;\n}\n/**\n * \n * @export\n * @interface Credits\n */\nexport interface Credits {\n    /**\n     * \n     * @type {number}\n     * @memberof Credits\n     */\n    free_credits: number;\n    /**\n     * \n     * @type {number}\n     * @memberof Credits\n     */\n    paid_credits: number;\n}\n/**\n * \n * @export\n * @interface DepositCode\n */\nexport interface DepositCode {\n    /**\n     * \n     * @type {string}\n     * @memberof DepositCode\n     */\n    code: string;\n    /**\n     * \n     * @type {number}\n     * @memberof DepositCode\n     */\n    amount: number;\n}\n/**\n * \n * @export\n * @interface DepositRequest\n */\nexport interface DepositRequest {\n    /**\n     * Amount in credits\n     * @type {number}\n     * @memberof DepositRequest\n     */\n    amount: number;\n}\n/**\n * \n * @export\n * @interface DiscordLogin\n */\nexport interface DiscordLogin {\n    /**\n     * \n     * @type {string}\n     * @memberof DiscordLogin\n     */\n    code: string;\n}\n/**\n * \n * @export\n * @interface FeatureList\n */\nexport interface FeatureList {\n    /**\n     * \n     * @type {string}\n     * @memberof FeatureList\n     */\n    terms_uri?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof FeatureList\n     */\n    privacy_uri?: string;\n}\n/**\n * \n * @export\n * @interface GlobalSettings\n */\nexport interface GlobalSettings {\n    /**\n     * \n     * @type {string}\n     * @memberof GlobalSettings\n     */\n    settings_key: string;\n    /**\n     * \n     * @type {object}\n     * @memberof GlobalSettings\n     */\n    settings_json: object;\n}\n/**\n * \n * @export\n * @interface Healthcheck\n */\nexport interface Healthcheck {\n    /**\n     * \n     * @type {string}\n     * @memberof Healthcheck\n     */\n    status?: HealthcheckStatusEnum;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum HealthcheckStatusEnum {\n    Ok = 'ok'\n}\n\n/**\n * \n * @export\n * @interface Image\n */\nexport interface Image {\n    /**\n     * \n     * @type {string}\n     * @memberof Image\n     */\n    id: string;\n    /**\n     * \n     * @type {number}\n     * @memberof Image\n     */\n    created_at: number;\n    /**\n     * \n     * @type {string}\n     * @memberof Image\n     */\n    created_by: string;\n    /**\n     * \n     * @type {number}\n     * @memberof Image\n     */\n    updated_at: number;\n    /**\n     * \n     * @type {ImageParams}\n     * @memberof Image\n     */\n    params: ImageParams;\n    /**\n     * \n     * @type {string}\n     * @memberof Image\n     */\n    label: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Image\n     */\n    parent: string;\n    /**\n     * \n     * @type {number}\n     * @memberof Image\n     */\n    score: number;\n    /**\n     * \n     * @type {number}\n     * @memberof Image\n     */\n    negative_score: number;\n    /**\n     * \n     * @type {StatusEnum}\n     * @memberof Image\n     */\n    status: StatusEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof Image\n     */\n    model: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof Image\n     */\n    nsfw: boolean;\n    /**\n     * \n     * @type {boolean}\n     * @memberof Image\n     */\n    temporary: boolean;\n    /**\n     * \n     * @type {number}\n     * @memberof Image\n     */\n    deleted_at?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof Image\n     */\n    error?: string;\n}\n/**\n * \n * @export\n * @interface ImageList\n */\nexport interface ImageList {\n    /**\n     * \n     * @type {Array<Image>}\n     * @memberof ImageList\n     */\n    images?: Array<Image>;\n}\n/**\n * \n * @export\n * @interface ImageParams\n */\nexport interface ImageParams {\n    /**\n     * \n     * @type {string}\n     * @memberof ImageParams\n     */\n    prompt?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof ImageParams\n     */\n    steps?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof ImageParams\n     */\n    negative_prompt?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof ImageParams\n     */\n    width?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof ImageParams\n     */\n    height?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof ImageParams\n     */\n    denoising_strength?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof ImageParams\n     */\n    cfg_scale?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof ImageParams\n     */\n    seed?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ImageParams\n     */\n    controlnet_type?: ImageParamsControlnetTypeEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof ImageParams\n     */\n    augmentation?: ImageParamsAugmentationEnum;\n    /**\n     * \n     * @type {Array<LoraConfig>}\n     * @memberof ImageParams\n     */\n    loras?: Array<LoraConfig>;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum ImageParamsControlnetTypeEnum {\n    Canny = 'canny',\n    Hed = 'hed',\n    Depth = 'depth',\n    Normal = 'normal',\n    Openpose = 'openpose',\n    Seg = 'seg',\n    Scribble = 'scribble',\n    Fakescribbles = 'fakescribbles',\n    Hough = 'hough'\n}\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum ImageParamsAugmentationEnum {\n    FaceRestore = 'face_restore',\n    RemoveBackground = 'remove_background',\n    Upscale = 'upscale'\n}\n\n/**\n * \n * @export\n * @interface ImageUrls\n */\nexport interface ImageUrls {\n    /**\n     * \n     * @type {string}\n     * @memberof ImageUrls\n     */\n    init_image_url?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ImageUrls\n     */\n    image_url?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ImageUrls\n     */\n    mask_url?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ImageUrls\n     */\n    thumbnail_url?: string;\n}\n/**\n * \n * @export\n * @interface InviteCode\n */\nexport interface InviteCode {\n    /**\n     * \n     * @type {string}\n     * @memberof InviteCode\n     */\n    id?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof InviteCode\n     */\n    created_at?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof InviteCode\n     */\n    created_by?: string;\n}\n/**\n * \n * @export\n * @interface IsAdminResponse\n */\nexport interface IsAdminResponse {\n    /**\n     * \n     * @type {boolean}\n     * @memberof IsAdminResponse\n     */\n    is_admin?: boolean;\n}\n/**\n * \n * @export\n * @interface LoginInput\n */\nexport interface LoginInput {\n    /**\n     * \n     * @type {string}\n     * @memberof LoginInput\n     */\n    email?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof LoginInput\n     */\n    invite_code?: string;\n}\n/**\n * \n * @export\n * @interface LoginResult\n */\nexport interface LoginResult {\n    /**\n     * \n     * @type {string}\n     * @memberof LoginResult\n     */\n    accessToken?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof LoginResult\n     */\n    refreshToken?: string;\n}\n/**\n * \n * @export\n * @interface LoraConfig\n */\nexport interface LoraConfig {\n    /**\n     * \n     * @type {string}\n     * @memberof LoraConfig\n     */\n    name: string;\n    /**\n     * \n     * @type {number}\n     * @memberof LoraConfig\n     */\n    strength: number;\n}\n/**\n * \n * @export\n * @interface MetricAttribute\n */\nexport interface MetricAttribute {\n    /**\n     * \n     * @type {string}\n     * @memberof MetricAttribute\n     */\n    name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof MetricAttribute\n     */\n    value?: string;\n}\n/**\n * \n * @export\n * @interface Order\n */\nexport interface Order {\n    /**\n     * \n     * @type {string}\n     * @memberof Order\n     */\n    id: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Order\n     */\n    created_by: string;\n    /**\n     * \n     * @type {number}\n     * @memberof Order\n     */\n    created_at: number;\n    /**\n     * \n     * @type {number}\n     * @memberof Order\n     */\n    ends_at: number;\n    /**\n     * \n     * @type {boolean}\n     * @memberof Order\n     */\n    is_active: boolean;\n    /**\n     * \n     * @type {number}\n     * @memberof Order\n     */\n    gpu_count: number;\n    /**\n     * \n     * @type {number}\n     * @memberof Order\n     */\n    amount_paid_cents: number;\n}\n/**\n * \n * @export\n * @interface RefreshLoginInput\n */\nexport interface RefreshLoginInput {\n    /**\n     * \n     * @type {string}\n     * @memberof RefreshLoginInput\n     */\n    refreshToken?: string;\n}\n/**\n * \n * @export\n * @interface StableDiffusionModel\n */\nexport interface StableDiffusionModel {\n    /**\n     * The name of the model\n     * @type {string}\n     * @memberof StableDiffusionModel\n     */\n    name: string;\n    /**\n     * The baseline model used\n     * @type {string}\n     * @memberof StableDiffusionModel\n     */\n    baseline: string;\n    /**\n     * The type of the model (e.g., ckpt)\n     * @type {string}\n     * @memberof StableDiffusionModel\n     */\n    type: string;\n    /**\n     * A short description of the model\n     * @type {string}\n     * @memberof StableDiffusionModel\n     */\n    description: string;\n    /**\n     * Tags associated with the model\n     * @type {Array<string>}\n     * @memberof StableDiffusionModel\n     */\n    tags: Array<string>;\n    /**\n     * A list of URIs for showcase images\n     * @type {Array<string>}\n     * @memberof StableDiffusionModel\n     */\n    showcases: Array<string>;\n    /**\n     * The version of the model\n     * @type {string}\n     * @memberof StableDiffusionModel\n     */\n    version: string;\n    /**\n     * The style of the model (e.g., anime, furry)\n     * @type {string}\n     * @memberof StableDiffusionModel\n     */\n    style: string;\n    /**\n     * Whether the model is Not Safe For Work (NSFW)\n     * @type {boolean}\n     * @memberof StableDiffusionModel\n     */\n    nsfw: boolean;\n    /**\n     * Whether to download all model files\n     * @type {boolean}\n     * @memberof StableDiffusionModel\n     */\n    download_all: boolean;\n    /**\n     * Configuration information for the model\n     * @type {object}\n     * @memberof StableDiffusionModel\n     */\n    config: object;\n    /**\n     * Whether the model is available for use\n     * @type {boolean}\n     * @memberof StableDiffusionModel\n     */\n    available: boolean;\n    /**\n     * Whether the model is an inpainting model\n     * @type {boolean}\n     * @memberof StableDiffusionModel\n     */\n    inpainting: boolean;\n}\n/**\n * \n * @export\n * @enum {string}\n */\n\nexport enum StatusEnum {\n    Pending = 'pending',\n    Processing = 'processing',\n    Completed = 'completed',\n    Saved = 'saved',\n    Error = 'error',\n    Deleted = 'deleted'\n}\n\n/**\n * \n * @export\n * @interface StripeSession\n */\nexport interface StripeSession {\n    /**\n     * \n     * @type {string}\n     * @memberof StripeSession\n     */\n    session_id: string;\n}\n/**\n * \n * @export\n * @interface TemporaryImage\n */\nexport interface TemporaryImage {\n    /**\n     * \n     * @type {string}\n     * @memberof TemporaryImage\n     */\n    id: string;\n    /**\n     * \n     * @type {string}\n     * @memberof TemporaryImage\n     */\n    upload_url: string;\n}\n/**\n * \n * @export\n * @interface UpdateGlobalSettingsRequest\n */\nexport interface UpdateGlobalSettingsRequest {\n    /**\n     * \n     * @type {object}\n     * @memberof UpdateGlobalSettingsRequest\n     */\n    settings_json: object;\n}\n/**\n * \n * @export\n * @interface UpdateImageInput\n */\nexport interface UpdateImageInput {\n    /**\n     * \n     * @type {string}\n     * @memberof UpdateImageInput\n     */\n    label?: string;\n    /**\n     * \n     * @type {StatusEnum}\n     * @memberof UpdateImageInput\n     */\n    status?: StatusEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof UpdateImageInput\n     */\n    encoded_image?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof UpdateImageInput\n     */\n    encoded_npy?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof UpdateImageInput\n     */\n    score?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof UpdateImageInput\n     */\n    negative_score?: number;\n    /**\n     * \n     * @type {boolean}\n     * @memberof UpdateImageInput\n     */\n    nsfw?: boolean;\n    /**\n     * \n     * @type {number}\n     * @memberof UpdateImageInput\n     */\n    deleted_at?: number | null;\n    /**\n     * \n     * @type {string}\n     * @memberof UpdateImageInput\n     */\n    error?: string;\n}\n/**\n * \n * @export\n * @interface UpsertWorkerConfigInput\n */\nexport interface UpsertWorkerConfigInput {\n    /**\n     * \n     * @type {Array<WorkerGpuConfig>}\n     * @memberof UpsertWorkerConfigInput\n     */\n    gpu_configs?: Array<WorkerGpuConfig>;\n}\n/**\n * \n * @export\n * @interface UpsertWorkerInput\n */\nexport interface UpsertWorkerInput {\n    /**\n     * \n     * @type {string}\n     * @memberof UpsertWorkerInput\n     */\n    display_name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof UpsertWorkerInput\n     */\n    status?: UpsertWorkerInputStatusEnum;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum UpsertWorkerInputStatusEnum {\n    Idle = 'idle',\n    Active = 'active'\n}\n\n/**\n * \n * @export\n * @interface User\n */\nexport interface User {\n    /**\n     * \n     * @type {string}\n     * @memberof User\n     */\n    id?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof User\n     */\n    active?: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof User\n     */\n    customer_id?: string;\n}\n/**\n * \n * @export\n * @interface VerifyLoginInput\n */\nexport interface VerifyLoginInput {\n    /**\n     * \n     * @type {string}\n     * @memberof VerifyLoginInput\n     */\n    email?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof VerifyLoginInput\n     */\n    code?: string;\n}\n/**\n * \n * @export\n * @interface Worker\n */\nexport interface Worker {\n    /**\n     * \n     * @type {string}\n     * @memberof Worker\n     */\n    id: string;\n    /**\n     * \n     * @type {number}\n     * @memberof Worker\n     */\n    created_at: number;\n    /**\n     * \n     * @type {string}\n     * @memberof Worker\n     */\n    display_name: string;\n    /**\n     * \n     * @type {number}\n     * @memberof Worker\n     */\n    last_ping?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof Worker\n     */\n    status?: WorkerStatusEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof Worker\n     */\n    login_code?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Worker\n     */\n    engine?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof Worker\n     */\n    num_gpus?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof Worker\n     */\n    cloud_instance_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Worker\n     */\n    gpu_type?: string;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum WorkerStatusEnum {\n    Idle = 'idle',\n    Active = 'active'\n}\n\n/**\n * \n * @export\n * @interface WorkerConfig\n */\nexport interface WorkerConfig {\n    /**\n     * \n     * @type {string}\n     * @memberof WorkerConfig\n     */\n    worker_id: string;\n    /**\n     * \n     * @type {Array<WorkerGpuConfig>}\n     * @memberof WorkerConfig\n     */\n    gpu_configs?: Array<WorkerGpuConfig>;\n}\n/**\n * \n * @export\n * @interface WorkerGpuConfig\n */\nexport interface WorkerGpuConfig {\n    /**\n     * \n     * @type {number}\n     * @memberof WorkerGpuConfig\n     */\n    gpu_num: number;\n    /**\n     * \n     * @type {string}\n     * @memberof WorkerGpuConfig\n     */\n    model: string;\n}\n/**\n * \n * @export\n * @interface WorkerList\n */\nexport interface WorkerList {\n    /**\n     * \n     * @type {Array<Worker>}\n     * @memberof WorkerList\n     */\n    workers?: Array<Worker>;\n}\n/**\n * \n * @export\n * @interface WorkerLoginCode\n */\nexport interface WorkerLoginCode {\n    /**\n     * \n     * @type {string}\n     * @memberof WorkerLoginCode\n     */\n    login_code: string;\n}\n\n/**\n * AIBrushApi - axios parameter creator\n * @export\n */\nexport const AIBrushApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * Add Metrics\n         * @param {AddMetricsInput} [addMetricsInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        addMetrics: async (addMetricsInput?: AddMetricsInput, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/metrics`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(addMetricsInput, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get a list of saved images by id\n         * @param {string} [fields] Comma-separated list of fields to include in the response images. For example: \\&quot;id,params,created_at\\&quot; \n         * @param {BatchGetImagesInput} [batchGetImagesInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        batchGetImages: async (fields?: string, batchGetImagesInput?: BatchGetImagesInput, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/batch-get-images`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (fields !== undefined) {\n                localVarQueryParameter['fields'] = fields;\n            }\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(batchGetImagesInput, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Create a new deposit code\n         * @param {CreateDepositCodeInput} [createDepositCodeInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createDepositCode: async (createDepositCodeInput?: CreateDepositCodeInput, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/deposit-codes`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(createDepositCodeInput, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Create a new Stripe session\n         * @param {CreateStripeSessionInput} [createStripeSessionInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createStripeSession: async (createStripeSessionInput?: CreateStripeSessionInput, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/stripe-sessions`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(createStripeSessionInput, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Delete a saved image\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteImage: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('deleteImage', 'id', id)\n            const localVarPath = `/api/images/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Log in with Discord\n         * @param {DiscordLogin} [discordLogin] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        discordLogin: async (discordLogin?: DiscordLogin, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/discord-login`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(discordLogin, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get the assets url\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getAssetsUrl: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/assets-url`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get the user\\'s credit balance\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getCredits: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/credits`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get the features\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getFeatures: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/features`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get the global settings\n         * @param {string} key \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getGlobalSettings: async (key: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'key' is not null or undefined\n            assertParamExists('getGlobalSettings', 'key', key)\n            const localVarPath = `/api/global-settings/{key}`\n                .replace(`{${\"key\"}}`, encodeURIComponent(String(key)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get a saved image by id\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getImage: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('getImage', 'id', id)\n            const localVarPath = `/api/images/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get download urls for image assets\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getImageDownloadUrls: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('getImageDownloadUrls', 'id', id)\n            const localVarPath = `/api/images/{id}/download-urls`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get upload urls for image assets\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getImageUploadUrls: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('getImageUploadUrls', 'id', id)\n            const localVarPath = `/api/images/{id}/upload-urls`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Get available models\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getModels: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/stable-diffusion-models`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Healthcheck\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        healthcheck: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/healthcheck`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Check if the user is admin\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        isAdmin: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/is-admin`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get a list of saved images\n         * @param {number} [cursor] \n         * @param {string} [filter] \n         * @param {number} [limit] \n         * @param {'asc' | 'desc'} [direction] \n         * @param {string} [fields] Comma-separated list of fields to include in the response images. For example: \\&quot;id,params,created_at\\&quot; \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listImages: async (cursor?: number, filter?: string, limit?: number, direction?: 'asc' | 'desc', fields?: string, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/images`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (cursor !== undefined) {\n                localVarQueryParameter['cursor'] = cursor;\n            }\n\n            if (filter !== undefined) {\n                localVarQueryParameter['filter'] = filter;\n            }\n\n            if (limit !== undefined) {\n                localVarQueryParameter['limit'] = limit;\n            }\n\n            if (direction !== undefined) {\n                localVarQueryParameter['direction'] = direction;\n            }\n\n            if (fields !== undefined) {\n                localVarQueryParameter['fields'] = fields;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Login by email\n         * @param {LoginInput} [loginInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        login: async (loginInput?: LoginInput, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/auth/login`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(loginInput, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Redeem a deposit code\n         * @param {string} code \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        redeemDepositCode: async (code: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'code' is not null or undefined\n            assertParamExists('redeemDepositCode', 'code', code)\n            const localVarPath = `/api/deposit-codes/{code}`\n                .replace(`{${\"code\"}}`, encodeURIComponent(String(code)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Refresh Login code\n         * @param {RefreshLoginInput} [refreshLoginInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        refresh: async (refreshLoginInput?: RefreshLoginInput, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/auth/refresh`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(refreshLoginInput, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Update the global settings\n         * @param {string} key \n         * @param {UpdateGlobalSettingsRequest} [updateGlobalSettingsRequest] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateGlobalSettings: async (key: string, updateGlobalSettingsRequest?: UpdateGlobalSettingsRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'key' is not null or undefined\n            assertParamExists('updateGlobalSettings', 'key', key)\n            const localVarPath = `/api/global-settings/{key}`\n                .replace(`{${\"key\"}}`, encodeURIComponent(String(key)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(updateGlobalSettingsRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Verify Login code\n         * @param {VerifyLoginInput} [verifyLoginInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        verify: async (verifyLoginInput?: VerifyLoginInput, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/auth/verify`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(verifyLoginInput, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * AIBrushApi - functional programming interface\n * @export\n */\nexport const AIBrushApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = AIBrushApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * Add Metrics\n         * @param {AddMetricsInput} [addMetricsInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async addMetrics(addMetricsInput?: AddMetricsInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.addMetrics(addMetricsInput, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get a list of saved images by id\n         * @param {string} [fields] Comma-separated list of fields to include in the response images. For example: \\&quot;id,params,created_at\\&quot; \n         * @param {BatchGetImagesInput} [batchGetImagesInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async batchGetImages(fields?: string, batchGetImagesInput?: BatchGetImagesInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImageList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.batchGetImages(fields, batchGetImagesInput, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Create a new deposit code\n         * @param {CreateDepositCodeInput} [createDepositCodeInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createDepositCode(createDepositCodeInput?: CreateDepositCodeInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DepositCode>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.createDepositCode(createDepositCodeInput, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Create a new Stripe session\n         * @param {CreateStripeSessionInput} [createStripeSessionInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createStripeSession(createStripeSessionInput?: CreateStripeSessionInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StripeSession>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.createStripeSession(createStripeSessionInput, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Delete a saved image\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async deleteImage(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteImage(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Log in with Discord\n         * @param {DiscordLogin} [discordLogin] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async discordLogin(discordLogin?: DiscordLogin, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginResult>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.discordLogin(discordLogin, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get the assets url\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getAssetsUrl(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssetsUrl>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getAssetsUrl(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get the user\\'s credit balance\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getCredits(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Credits>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getCredits(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get the features\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getFeatures(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeatureList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getFeatures(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get the global settings\n         * @param {string} key \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getGlobalSettings(key: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GlobalSettings>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getGlobalSettings(key, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get a saved image by id\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getImage(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Image>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getImage(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get download urls for image assets\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getImageDownloadUrls(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImageUrls>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getImageDownloadUrls(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get upload urls for image assets\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getImageUploadUrls(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImageUrls>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getImageUploadUrls(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Get available models\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getModels(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: StableDiffusionModel; }>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getModels(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Healthcheck\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async healthcheck(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Healthcheck>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.healthcheck(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Check if the user is admin\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async isAdmin(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IsAdminResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.isAdmin(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get a list of saved images\n         * @param {number} [cursor] \n         * @param {string} [filter] \n         * @param {number} [limit] \n         * @param {'asc' | 'desc'} [direction] \n         * @param {string} [fields] Comma-separated list of fields to include in the response images. For example: \\&quot;id,params,created_at\\&quot; \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listImages(cursor?: number, filter?: string, limit?: number, direction?: 'asc' | 'desc', fields?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImageList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.listImages(cursor, filter, limit, direction, fields, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Login by email\n         * @param {LoginInput} [loginInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async login(loginInput?: LoginInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.login(loginInput, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Redeem a deposit code\n         * @param {string} code \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async redeemDepositCode(code: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.redeemDepositCode(code, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Refresh Login code\n         * @param {RefreshLoginInput} [refreshLoginInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async refresh(refreshLoginInput?: RefreshLoginInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginResult>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.refresh(refreshLoginInput, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Update the global settings\n         * @param {string} key \n         * @param {UpdateGlobalSettingsRequest} [updateGlobalSettingsRequest] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async updateGlobalSettings(key: string, updateGlobalSettingsRequest?: UpdateGlobalSettingsRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GlobalSettings>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.updateGlobalSettings(key, updateGlobalSettingsRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Verify Login code\n         * @param {VerifyLoginInput} [verifyLoginInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async verify(verifyLoginInput?: VerifyLoginInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginResult>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.verify(verifyLoginInput, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n    }\n};\n\n/**\n * AIBrushApi - factory interface\n * @export\n */\nexport const AIBrushApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = AIBrushApiFp(configuration)\n    return {\n        /**\n         * Add Metrics\n         * @param {AddMetricsInput} [addMetricsInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        addMetrics(addMetricsInput?: AddMetricsInput, options?: any): AxiosPromise<void> {\n            return localVarFp.addMetrics(addMetricsInput, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get a list of saved images by id\n         * @param {string} [fields] Comma-separated list of fields to include in the response images. For example: \\&quot;id,params,created_at\\&quot; \n         * @param {BatchGetImagesInput} [batchGetImagesInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        batchGetImages(fields?: string, batchGetImagesInput?: BatchGetImagesInput, options?: any): AxiosPromise<ImageList> {\n            return localVarFp.batchGetImages(fields, batchGetImagesInput, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Create a new deposit code\n         * @param {CreateDepositCodeInput} [createDepositCodeInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createDepositCode(createDepositCodeInput?: CreateDepositCodeInput, options?: any): AxiosPromise<DepositCode> {\n            return localVarFp.createDepositCode(createDepositCodeInput, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Create a new Stripe session\n         * @param {CreateStripeSessionInput} [createStripeSessionInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createStripeSession(createStripeSessionInput?: CreateStripeSessionInput, options?: any): AxiosPromise<StripeSession> {\n            return localVarFp.createStripeSession(createStripeSessionInput, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Delete a saved image\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteImage(id: string, options?: any): AxiosPromise<void> {\n            return localVarFp.deleteImage(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Log in with Discord\n         * @param {DiscordLogin} [discordLogin] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        discordLogin(discordLogin?: DiscordLogin, options?: any): AxiosPromise<LoginResult> {\n            return localVarFp.discordLogin(discordLogin, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get the assets url\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getAssetsUrl(options?: any): AxiosPromise<AssetsUrl> {\n            return localVarFp.getAssetsUrl(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get the user\\'s credit balance\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getCredits(options?: any): AxiosPromise<Credits> {\n            return localVarFp.getCredits(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get the features\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getFeatures(options?: any): AxiosPromise<FeatureList> {\n            return localVarFp.getFeatures(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get the global settings\n         * @param {string} key \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getGlobalSettings(key: string, options?: any): AxiosPromise<GlobalSettings> {\n            return localVarFp.getGlobalSettings(key, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get a saved image by id\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getImage(id: string, options?: any): AxiosPromise<Image> {\n            return localVarFp.getImage(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get download urls for image assets\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getImageDownloadUrls(id: string, options?: any): AxiosPromise<ImageUrls> {\n            return localVarFp.getImageDownloadUrls(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get upload urls for image assets\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getImageUploadUrls(id: string, options?: any): AxiosPromise<ImageUrls> {\n            return localVarFp.getImageUploadUrls(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Get available models\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getModels(options?: any): AxiosPromise<{ [key: string]: StableDiffusionModel; }> {\n            return localVarFp.getModels(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Healthcheck\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        healthcheck(options?: any): AxiosPromise<Healthcheck> {\n            return localVarFp.healthcheck(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Check if the user is admin\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        isAdmin(options?: any): AxiosPromise<IsAdminResponse> {\n            return localVarFp.isAdmin(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get a list of saved images\n         * @param {number} [cursor] \n         * @param {string} [filter] \n         * @param {number} [limit] \n         * @param {'asc' | 'desc'} [direction] \n         * @param {string} [fields] Comma-separated list of fields to include in the response images. For example: \\&quot;id,params,created_at\\&quot; \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listImages(cursor?: number, filter?: string, limit?: number, direction?: 'asc' | 'desc', fields?: string, options?: any): AxiosPromise<ImageList> {\n            return localVarFp.listImages(cursor, filter, limit, direction, fields, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Login by email\n         * @param {LoginInput} [loginInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        login(loginInput?: LoginInput, options?: any): AxiosPromise<void> {\n            return localVarFp.login(loginInput, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Redeem a deposit code\n         * @param {string} code \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        redeemDepositCode(code: string, options?: any): AxiosPromise<void> {\n            return localVarFp.redeemDepositCode(code, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Refresh Login code\n         * @param {RefreshLoginInput} [refreshLoginInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        refresh(refreshLoginInput?: RefreshLoginInput, options?: any): AxiosPromise<LoginResult> {\n            return localVarFp.refresh(refreshLoginInput, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Update the global settings\n         * @param {string} key \n         * @param {UpdateGlobalSettingsRequest} [updateGlobalSettingsRequest] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateGlobalSettings(key: string, updateGlobalSettingsRequest?: UpdateGlobalSettingsRequest, options?: any): AxiosPromise<GlobalSettings> {\n            return localVarFp.updateGlobalSettings(key, updateGlobalSettingsRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Verify Login code\n         * @param {VerifyLoginInput} [verifyLoginInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        verify(verifyLoginInput?: VerifyLoginInput, options?: any): AxiosPromise<LoginResult> {\n            return localVarFp.verify(verifyLoginInput, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * AIBrushApi - object-oriented interface\n * @export\n * @class AIBrushApi\n * @extends {BaseAPI}\n */\nexport class AIBrushApi extends BaseAPI {\n    /**\n     * Add Metrics\n     * @param {AddMetricsInput} [addMetricsInput] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public addMetrics(addMetricsInput?: AddMetricsInput, options?: any) {\n        return AIBrushApiFp(this.configuration).addMetrics(addMetricsInput, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get a list of saved images by id\n     * @param {string} [fields] Comma-separated list of fields to include in the response images. For example: \\&quot;id,params,created_at\\&quot; \n     * @param {BatchGetImagesInput} [batchGetImagesInput] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public batchGetImages(fields?: string, batchGetImagesInput?: BatchGetImagesInput, options?: any) {\n        return AIBrushApiFp(this.configuration).batchGetImages(fields, batchGetImagesInput, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Create a new deposit code\n     * @param {CreateDepositCodeInput} [createDepositCodeInput] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public createDepositCode(createDepositCodeInput?: CreateDepositCodeInput, options?: any) {\n        return AIBrushApiFp(this.configuration).createDepositCode(createDepositCodeInput, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Create a new Stripe session\n     * @param {CreateStripeSessionInput} [createStripeSessionInput] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public createStripeSession(createStripeSessionInput?: CreateStripeSessionInput, options?: any) {\n        return AIBrushApiFp(this.configuration).createStripeSession(createStripeSessionInput, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Delete a saved image\n     * @param {string} id \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public deleteImage(id: string, options?: any) {\n        return AIBrushApiFp(this.configuration).deleteImage(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Log in with Discord\n     * @param {DiscordLogin} [discordLogin] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public discordLogin(discordLogin?: DiscordLogin, options?: any) {\n        return AIBrushApiFp(this.configuration).discordLogin(discordLogin, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get the assets url\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public getAssetsUrl(options?: any) {\n        return AIBrushApiFp(this.configuration).getAssetsUrl(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get the user\\'s credit balance\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public getCredits(options?: any) {\n        return AIBrushApiFp(this.configuration).getCredits(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get the features\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public getFeatures(options?: any) {\n        return AIBrushApiFp(this.configuration).getFeatures(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get the global settings\n     * @param {string} key \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public getGlobalSettings(key: string, options?: any) {\n        return AIBrushApiFp(this.configuration).getGlobalSettings(key, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get a saved image by id\n     * @param {string} id \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public getImage(id: string, options?: any) {\n        return AIBrushApiFp(this.configuration).getImage(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get download urls for image assets\n     * @param {string} id \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public getImageDownloadUrls(id: string, options?: any) {\n        return AIBrushApiFp(this.configuration).getImageDownloadUrls(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get upload urls for image assets\n     * @param {string} id \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public getImageUploadUrls(id: string, options?: any) {\n        return AIBrushApiFp(this.configuration).getImageUploadUrls(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Get available models\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public getModels(options?: any) {\n        return AIBrushApiFp(this.configuration).getModels(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Healthcheck\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public healthcheck(options?: any) {\n        return AIBrushApiFp(this.configuration).healthcheck(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Check if the user is admin\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public isAdmin(options?: any) {\n        return AIBrushApiFp(this.configuration).isAdmin(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get a list of saved images\n     * @param {number} [cursor] \n     * @param {string} [filter] \n     * @param {number} [limit] \n     * @param {'asc' | 'desc'} [direction] \n     * @param {string} [fields] Comma-separated list of fields to include in the response images. For example: \\&quot;id,params,created_at\\&quot; \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public listImages(cursor?: number, filter?: string, limit?: number, direction?: 'asc' | 'desc', fields?: string, options?: any) {\n        return AIBrushApiFp(this.configuration).listImages(cursor, filter, limit, direction, fields, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Login by email\n     * @param {LoginInput} [loginInput] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public login(loginInput?: LoginInput, options?: any) {\n        return AIBrushApiFp(this.configuration).login(loginInput, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Redeem a deposit code\n     * @param {string} code \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public redeemDepositCode(code: string, options?: any) {\n        return AIBrushApiFp(this.configuration).redeemDepositCode(code, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Refresh Login code\n     * @param {RefreshLoginInput} [refreshLoginInput] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public refresh(refreshLoginInput?: RefreshLoginInput, options?: any) {\n        return AIBrushApiFp(this.configuration).refresh(refreshLoginInput, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Update the global settings\n     * @param {string} key \n     * @param {UpdateGlobalSettingsRequest} [updateGlobalSettingsRequest] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public updateGlobalSettings(key: string, updateGlobalSettingsRequest?: UpdateGlobalSettingsRequest, options?: any) {\n        return AIBrushApiFp(this.configuration).updateGlobalSettings(key, updateGlobalSettingsRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Verify Login code\n     * @param {VerifyLoginInput} [verifyLoginInput] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public verify(verifyLoginInput?: VerifyLoginInput, options?: any) {\n        return AIBrushApiFp(this.configuration).verify(verifyLoginInput, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n\n\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * AIBrush API\n * Orchestration backend for AI Brush\n *\n * The version of the OpenAPI document: 1.0.0\n * Contact: admin@aibrush.art\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport { Configuration } from \"./configuration\";\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport globalAxios, { AxiosPromise, AxiosInstance } from 'axios';\n\nexport const BASE_PATH = \"https://www.aibrush.art\".replace(/\\/+$/, \"\");\n\n/**\n *\n * @export\n */\nexport const COLLECTION_FORMATS = {\n    csv: \",\",\n    ssv: \" \",\n    tsv: \"\\t\",\n    pipes: \"|\",\n};\n\n/**\n *\n * @export\n * @interface RequestArgs\n */\nexport interface RequestArgs {\n    url: string;\n    options: any;\n}\n\n/**\n *\n * @export\n * @class BaseAPI\n */\nexport class BaseAPI {\n    protected configuration: Configuration | undefined;\n\n    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected axios: AxiosInstance = globalAxios) {\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = configuration.basePath || this.basePath;\n        }\n    }\n};\n\n/**\n *\n * @export\n * @class RequiredError\n * @extends {Error}\n */\nexport class RequiredError extends Error {\n    name: \"RequiredError\" = \"RequiredError\";\n    constructor(public field: string, msg?: string) {\n        super(msg);\n    }\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * AIBrush API\n * Orchestration backend for AI Brush\n *\n * The version of the OpenAPI document: 1.0.0\n * Contact: admin@aibrush.art\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport { Configuration } from \"./configuration\";\nimport { RequiredError,　RequestArgs } from \"./base\";\nimport { AxiosInstance } from 'axios';\n\n/**\n *\n * @export\n */\nexport const DUMMY_BASE_URL = 'https://example.com'\n\n/**\n *\n * @throws {RequiredError}\n * @export\n */\nexport const assertParamExists = function (functionName: string, paramName: string, paramValue: unknown) {\n    if (paramValue === null || paramValue === undefined) {\n        throw new RequiredError(paramName, `Required parameter ${paramName} was null or undefined when calling ${functionName}.`);\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setApiKeyToObject = async function (object: any, keyParamName: string, configuration?: Configuration) {\n    if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n            ? await configuration.apiKey(keyParamName)\n            : await configuration.apiKey;\n        object[keyParamName] = localVarApiKeyValue;\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setBasicAuthToObject = function (object: any, configuration?: Configuration) {\n    if (configuration && (configuration.username || configuration.password)) {\n        object[\"auth\"] = { username: configuration.username, password: configuration.password };\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setBearerAuthToObject = async function (object: any, configuration?: Configuration) {\n    if (configuration && configuration.accessToken) {\n        const accessToken = typeof configuration.accessToken === 'function'\n            ? await configuration.accessToken()\n            : await configuration.accessToken;\n        object[\"Authorization\"] = \"Bearer \" + accessToken;\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setOAuthToObject = async function (object: any, name: string, scopes: string[], configuration?: Configuration) {\n    if (configuration && configuration.accessToken) {\n        const localVarAccessTokenValue = typeof configuration.accessToken === 'function'\n            ? await configuration.accessToken(name, scopes)\n            : await configuration.accessToken;\n        object[\"Authorization\"] = \"Bearer \" + localVarAccessTokenValue;\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setSearchParams = function (url: URL, ...objects: any[]) {\n    const searchParams = new URLSearchParams(url.search);\n    for (const object of objects) {\n        for (const key in object) {\n            if (Array.isArray(object[key])) {\n                searchParams.delete(key);\n                for (const item of object[key]) {\n                    searchParams.append(key, item);\n                }\n            } else {\n                searchParams.set(key, object[key]);\n            }\n        }\n    }\n    url.search = searchParams.toString();\n}\n\n/**\n *\n * @export\n */\nexport const serializeDataIfNeeded = function (value: any, requestOptions: any, configuration?: Configuration) {\n    const nonString = typeof value !== 'string';\n    const needsSerialization = nonString && configuration && configuration.isJsonMime\n        ? configuration.isJsonMime(requestOptions.headers['Content-Type'])\n        : nonString;\n    return needsSerialization\n        ? JSON.stringify(value !== undefined ? value : {})\n        : (value || \"\");\n}\n\n/**\n *\n * @export\n */\nexport const toPathString = function (url: URL) {\n    return url.pathname + url.search + url.hash\n}\n\n/**\n *\n * @export\n */\nexport const createRequestFunction = function (axiosArgs: RequestArgs, globalAxios: AxiosInstance, BASE_PATH: string, configuration?: Configuration) {\n    return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n        const axiosRequestArgs = {...axiosArgs.options, url: (configuration?.basePath || basePath) + axiosArgs.url};\n        return axios.request(axiosRequestArgs);\n    };\n}\n","// export interface AspectRatio {\n//     displayName: string;\n//     width: number;\n//     height: number;\n//     id: number;\n\n//     scale: (size: number) => AspectRatio;\n// }\n\nexport class AspectRatio implements AspectRatio {\n    readonly displayName: string;\n    readonly width: number;\n    readonly height: number;\n    readonly id: number;\n\n    constructor(cfg: any) {\n        this.displayName = cfg.displayName;\n        this.width = cfg.width;\n        this.height = cfg.height;\n        this.id = cfg.id;\n    }\n\n    scale(size: number): AspectRatio {\n        const newWidth = this.width * size;\n        const newHeight = this.height * size;\n\n        return new AspectRatio({\n            id: this.id,\n            displayName: this.displayName,\n            // round width and height up to the nearest multiple of 64\n            width: Math.ceil(newWidth / 64) * 64,\n            height: Math.ceil(newHeight / 64) * 64,\n        });\n    }\n}\n\nexport const DEFAULT_ASPECT_RATIO = 5;\n\nexport const aspectRatios: AspectRatio[] = [\n    {\n        displayName: \"4:1\",\n        width: 1024,\n        height: 256,\n        id: 0,\n    },\n    {\n        displayName: \"3:1\",\n        width: 768,\n        height: 256,\n        id: 1,\n    },\n    {\n        displayName: \"2:1\",\n        width: 640,\n        height: 320,\n        id: 2,\n    },\n    {\n        displayName: \"3:2\",\n        width: 576,\n        height: 384,\n        id: 3,\n    },\n    {\n        displayName: \"5:4\",\n        width: 640,\n        height: 512,\n        id: 4,\n    },\n    {\n        displayName: \"1:1\",\n        width: 512,\n        height: 512,\n        id: 5,\n    },\n    {\n        displayName: \"4:5\",\n        width: 512,\n        height: 640,\n        id: 6,\n    },\n    {\n        displayName: \"2:3\",\n        width: 384,\n        height: 576,\n        id: 7,\n    },\n    {\n        displayName: \"1:2\",\n        width: 320,\n        height: 640,\n        id: 8,\n    },\n    {\n        displayName: \"1:3\",\n        width: 256,\n        height: 768,\n        id: 9,\n    },\n    {\n        displayName: \"1:4\",\n        width: 256,\n        height: 1024,\n        id: 10,\n    }\n].map((cfg) => new AspectRatio(cfg));\n\nexport function getClosestAspectRatio(width: number, height: number): AspectRatio {\n    const aspectRatio = width / height;\n\n    const tests = [...aspectRatios];\n    tests.sort((a, b) => {\n        const aRatio = a.width / a.height;\n        const bRatio = b.width / b.height;\n        return (\n            Math.abs(aRatio - aspectRatio) -\n            Math.abs(bRatio - aspectRatio)\n        );\n    });\n    const bestMatch = tests[0];\n    return bestMatch;\n}\n\n\n","import React, { useState, useEffect, useRef } from \"react\";\nimport { useParams, useHistory } from \"react-router-dom\";\nimport axios, { AxiosInstance } from \"axios\";\nimport * as uuid from \"uuid\";\n\nimport { AIBrushApi } from \"../../client\";\nimport { getUpscaleLevel } from \"../../lib/upscale\";\nimport \"./ImageEditor.css\";\nimport { createRenderer, Renderer } from \"./renderer\";\nimport { Tool, BaseTool } from \"./tool\";\nimport { SelectionTool, Controls as SelectionControls } from \"./selection-tool\";\nimport { EnhanceTool, EnhanceControls } from \"./enhance-tool\";\nimport {\n    PencilTool,\n    Controls as PencilControls,\n    defaultColors,\n} from \"./pencil-tool\";\nimport { SmudgeTool, SmudgeControls } from \"./smudge-tool\";\nimport { ImportExportControls } from \"./import-export\";\nimport { InpaintControls, InpaintTool } from \"./inpaint-tool\";\nimport { AugmentControls } from \"./augment-tool\";\nimport { defaultArgs } from \"../../components/ImagePrompt\";\nimport { ApiSocket } from \"../../lib/apisocket\";\nimport { BusyModal } from \"../../components/BusyModal\";\nimport { LocalImagesStore } from \"../../lib/localImagesStore\";\nimport { LocalImage } from \"../../lib/models\";\nimport { render } from \"@testing-library/react\";\nimport { HordeGenerator } from \"../../lib/hordegenerator\";\n\ninterface CanPreventDefault {\n    preventDefault: () => void;\n}\n\ninterface Props {\n    api: AIBrushApi;\n    generator: HordeGenerator;\n    assetsUrl: string;\n    localImages: LocalImagesStore;\n}\n\ninterface ToolConfig {\n    name: string;\n    iconClass: string;\n    constructor: (r: Renderer) => Tool;\n    renderControls: (t: Tool, renderer: Renderer) => JSX.Element;\n    defaultArgs: any;\n}\n\nexport const anonymousClient = axios.create();\ndelete anonymousClient.defaults.headers.common[\"Authorization\"];\n\nexport const ImageEditor: React.FC<Props> = ({\n    api,\n    generator,\n    localImages,\n}) => {\n    const [showSelectionControls, setShowSelectionControls] = useState(false);\n    const tools: Array<ToolConfig> = [\n        {\n            name: \"inpaint\",\n            iconClass: \"fas fa-paint-brush\",\n            constructor: (r: Renderer) => new InpaintTool(r),\n            defaultArgs: {},\n            renderControls: (t: Tool, renderer: Renderer) => {\n                t.onShowSelectionControls(setShowSelectionControls);\n                return (\n                    <InpaintControls\n                        tool={t as InpaintTool}\n                        renderer={renderer}\n                        api={api}\n                        generator={generator}\n                        image={image!}\n                    />\n                );\n            },\n        },\n        {\n            name: \"enhance\",\n            iconClass: \"fas fa-magic\",\n            constructor: (r: Renderer) => new EnhanceTool(r),\n            defaultArgs: {\n                variationStrength: 0.75,\n            },\n            renderControls: (t: Tool, renderer: Renderer) => {\n                t.onShowSelectionControls(setShowSelectionControls);\n                return (\n                    <EnhanceControls\n                        tool={t as EnhanceTool}\n                        renderer={renderer}\n                        image={image!}\n                        generator={generator}\n                    />\n                );\n            },\n        },\n        {\n            name: \"pencil\",\n            iconClass: \"fas fa-pencil-alt\",\n            constructor: (r: Renderer) => new PencilTool(r, \"base\"),\n            defaultArgs: {},\n            renderControls: (t: Tool, renderer: Renderer) => {\n                return (\n                    <PencilControls\n                        tool={t as PencilTool}\n                        renderer={renderer}\n                        colors={defaultColors}\n                    />\n                );\n            },\n        },\n        {\n            name: \"smudge\",\n            // finger icon\n            iconClass: \"fas fa-hand-pointer\",\n            constructor: (r: Renderer) => new SmudgeTool(r),\n            defaultArgs: {},\n            renderControls: (t: Tool, renderer: Renderer) => {\n                return (\n                    <SmudgeControls\n                        tool={t as SmudgeTool}\n                        renderer={renderer}\n                    />\n                );\n            },\n        },\n        {\n            name: \"import-export\",\n            iconClass: \"fas fa-file-import\",\n            constructor: (r: Renderer) => new BaseTool(r, \"import-export\"),\n            defaultArgs: {},\n            renderControls: (t: Tool, renderer: Renderer) => {\n                return (\n                    <ImportExportControls\n                        renderer={renderer}\n                        tool={t as BaseTool}\n                    />\n                );\n            },\n        },\n        {\n            name: \"augment\",\n            iconClass: \"fas fa-image\",\n            constructor: (r: Renderer) => new BaseTool(r, \"augment\"),\n            defaultArgs: {},\n            renderControls: (t: Tool, renderer: Renderer) => {\n                return (\n                    <AugmentControls\n                        renderer={renderer}\n                        tool={t as BaseTool}\n                        generator={generator}\n                        image={image!}\n                    />\n                );\n            },\n        },\n    ];\n\n    const [image, setImage] = useState<LocalImage | null>(null);\n    const [renderer, setRenderer] = useState<Renderer | null>(null);\n    const [tool, setTool] = useState<Tool | null>(null);\n    const [toolConfig, setToolConfig] = useState<ToolConfig | null>(null);\n    const [canUndo, setCanUndo] = useState(false);\n    const [canRedo, setCanRedo] = useState(false);\n    const [busyMessage, setBusyMessage] = useState<string | null>(null);\n\n    const { id } = useParams<{ id: string }>();\n    const history = useHistory();\n\n    const canvasRef = useRef<HTMLCanvasElement>(null);\n\n    const onSelectTool = (toolconfig: ToolConfig) => {\n        if (renderer) {\n            if (tool) {\n                if (!tool.destroy()) {\n                    return;\n                }\n            }\n            const newTool = toolconfig.constructor(renderer);\n            setTool(newTool);\n            setToolConfig(toolconfig);\n            newTool.onSaveImage((encodedImage, args = {}) => {\n                console.log(\"Saving image...\");\n                saveNewImage(encodedImage, args);\n            });\n        }\n    };\n\n    /**\n     * Saves a new image to the server\n     *\n     * @param encodedImage base64 encoded image\n     * @param newArgs may contain new phrases and negative phrases\n     */\n    const saveNewImage = async (encodedImage: string, newArgs: any) => {\n        if (!image || !encodedImage) {\n            throw new Error(\"Cannot save new image without existing image\");\n        }\n        if (!renderer) {\n            throw new Error(\"Cannot save new image without renderer\");\n        }\n        setBusyMessage(\"Saving image...\");\n        try {\n            const newImage: LocalImage = {\n                ...image,\n                params: {\n                    ...image.params,\n                    width: renderer!.getWidth() as any,\n                    height: renderer!.getHeight() as any,\n                },\n                id: uuid.v4(),\n                imageData: `data:image/png;base64,${encodedImage}`,\n            };\n            await localImages.saveImage(newImage);\n\n            // switch url and state to new image\n            setImage(newImage);\n            history.replace(`/image-editor/${newImage.id}`);\n        } finally {\n            setBusyMessage(null);\n        }\n    };\n\n    useEffect(() => {\n        if (image) {\n            return;\n        }\n\n        async function loadImage() {\n            // TODO: replace with google drive / legacy load\n            const localImage = await localImages.getImage(id);\n            let imageSrc = \"\";\n            if (localImage) {\n                setImage(localImage);\n                imageSrc = localImage.imageData!;\n            } else {\n                const image = (await api.getImage(id)).data;\n                setImage(image);\n                const download_urls = await api.getImageDownloadUrls(id);\n                // Loading up data as binary, base64 encoding into image url\n                // bypasses browser security nonsense about cross-domain images\n                const resp = await anonymousClient.get(\n                    download_urls.data.image_url!,\n                    {\n                        responseType: \"arraybuffer\",\n                    }\n                );\n                const binaryImageData = Buffer.from(resp.data, \"binary\");\n                const base64ImageData = binaryImageData.toString(\"base64\");\n                imageSrc = `data:image/png;base64,${base64ImageData}`;\n            }\n\n            const imageElement = new Image();\n            imageElement.src = imageSrc;\n            imageElement.onload = () => {\n                if (!canvasRef.current) {\n                    console.error(\"Failed to get canvas\");\n                    return;\n                }\n                const renderer = createRenderer(canvasRef.current);\n                renderer.setBaseImage(imageElement);\n                setRenderer(renderer);\n            };\n        }\n        loadImage();\n    }, [image, id]);\n\n    // this covers the case that an image is upscaled to max, the upscale tool needs to\n    // be hidden and deselected.\n    useEffect(() => {\n        if (\n            image &&\n            tool &&\n            tool.name == \"upscale\" &&\n            image.params.width! * image.params.height! >= 2048 * 2048\n        ) {\n            onSelectTool(tools[0]);\n        }\n    }, [image, tool]);\n\n    useEffect(() => {\n        if (renderer) {\n            onSelectTool(tools[0]);\n            renderer.onSnapshot(() => {\n                setCanUndo(renderer.canUndo());\n                setCanRedo(renderer.canRedo());\n            });\n        }\n    }, [renderer]);\n\n    useEffect(() => {\n        if (canvasRef.current) {\n            const listener = (e: WheelEvent) => {\n                if (tool) {\n                    e.preventDefault();\n                    tool.onWheel(e);\n                }\n            };\n            canvasRef.current.addEventListener(\"wheel\", listener);\n            return () => {\n                canvasRef.current?.removeEventListener(\"wheel\", listener);\n            };\n        }\n    }, [tool, canvasRef.current]);\n\n    // implement a useEffect hook that resizes the canvas (renderer.updateCanvasSize(width, height)) when the window is resized, and also on initial load\n    // the canvas size should be set based on the current screen size\n    useEffect(() => {\n        if (renderer) {\n            const listener = () => {\n                let width = window.innerWidth * 0.85;\n                let height = window.innerHeight;\n                if (window.innerWidth <= 992) {\n                    width = window.innerWidth;\n                    height = window.innerHeight * 0.85;\n                }\n                renderer.updateCanvasSize(width, height);\n                // renderer.resetView();\n            };\n            window.addEventListener(\"resize\", listener);\n            listener();\n            renderer.resetView();\n            return () => {\n                window.removeEventListener(\"resize\", listener);\n            };\n            \n        }\n    }, [renderer]);\n\n    function renderTool(t: ToolConfig) {\n        if (!image) {\n            return null;\n        }\n        let buttonClass = `btn btn-secondary light-button image-editor-tool-button`;\n        const isSelected = tool && tool.name == t.name;\n        if (isSelected) {\n            buttonClass = `btn btn-primary image-editor-tool-button`;\n        }\n        return (\n            <>\n                <button\n                    style={{ margin: \"4px\" }}\n                    className={buttonClass}\n                    onClick={() => onSelectTool(t)}\n                >\n                    <i className={t.iconClass}></i>\n                </button>\n                {/* capitalize tool name */}\n                {/* <label>\n                    {t.name.charAt(0).toUpperCase() + t.name.slice(1)}\n                </label>\n                {isSelected && t.renderControls(tool!, renderer!)} */}\n            </>\n        );\n    }\n\n    function preventDefault(e: CanPreventDefault): boolean {\n        e.preventDefault();\n        return true;\n    }\n\n    return (\n        <>\n            <div className=\"row\">\n                <div className=\"col-12\">\n                    <h1 style={{ fontSize: \"40px\", textAlign: \"left\" }}>\n                        <i\n                            style={{ cursor: \"pointer\" }}\n                            onClick={() => history.push(`/images/${id}`)}\n                            className=\"fas fa-chevron-left\"\n                        ></i>\n                        &nbsp; AI Edit\n                    </h1>\n                </div>\n            </div>\n            <div\n                className=\"row\"\n                style={{ marginTop: \"32px\", paddingBottom: \"120px\" }}\n            >\n                <div\n                    className=\"col-lg-3\"\n                    style={{ textAlign: \"left\", marginBottom: \"8px\" }}\n                >\n                    {renderer && (\n                        <>\n                            <div style={{marginBottom: \"16px\"}}>{tools.map((t) => renderTool(t))}</div>\n                            {tool && toolConfig && (\n                                <>\n                                    {/* capitalize tool name */}\n                                    <h4 style={{marginLeft: \"16px\"}}>\n                                        {tool.name.charAt(0).toUpperCase() +\n                                            tool.name.slice(1)}\n                                    </h4>\n                                    {toolConfig.renderControls(\n                                        tool!,\n                                        renderer!\n                                    )}\n                                </>\n                            )}\n                            {(canRedo || canUndo) && (\n                                <div className=\"form-group\">\n                                    <div className=\"btn-group\">\n                                        <button\n                                            className=\"btn btn-primary image-popup-button\"\n                                            disabled={!renderer || !canUndo}\n                                            onClick={() =>\n                                                renderer && renderer.undo()\n                                            }\n                                        >\n                                            {/* undo */}\n                                            <i className=\"fas fa-undo\"></i>\n                                        </button>\n                                        <button\n                                            className=\"btn btn-primary image-popup-button\"\n                                            disabled={!renderer || !canRedo}\n                                            onClick={() =>\n                                                renderer && renderer.redo()\n                                            }\n                                        >\n                                            <i className=\"fas fa-redo\"></i>\n                                        </button>\n                                    </div>\n                                </div>\n                            )}\n                        </>\n                    )}\n                </div>\n                <div className=\"col-lg-9\">\n                    <div style={{ verticalAlign: \"middle\" }}>\n                        <div>\n                            <canvas\n                                style={{\n                                    cursor: \"none\",\n                                    touchAction: \"none\",\n                                    userSelect: \"none\",\n                                }}\n                                width={768}\n                                height={512}\n                                ref={canvasRef}\n                                className=\"image-editor-canvas\"\n                                onMouseDown={(e) =>\n                                    preventDefault(e) &&\n                                    tool &&\n                                    tool.onMouseDown(e)\n                                }\n                                onMouseMove={(e) =>\n                                    preventDefault(e) &&\n                                    tool &&\n                                    tool.onMouseMove(e)\n                                }\n                                onMouseUp={(e) =>\n                                    preventDefault(e) &&\n                                    tool &&\n                                    tool.onMouseUp(e)\n                                }\n                                onMouseLeave={(e) =>\n                                    preventDefault(e) &&\n                                    tool &&\n                                    tool.onMouseLeave(e)\n                                }\n                                onTouchStart={(e) =>\n                                    preventDefault(e) &&\n                                    tool &&\n                                    tool.onTouchStart(e)\n                                }\n                                onTouchMove={(e) =>\n                                    preventDefault(e) &&\n                                    tool &&\n                                    tool.onTouchMove(e)\n                                }\n                                onTouchEnd={(e) =>\n                                    preventDefault(e) &&\n                                    tool &&\n                                    tool.onTouchEnd(e)\n                                }\n                            ></canvas>\n                            {showSelectionControls && (\n                                <>\n                                    <button\n                                        className=\"btn btn-secondary canvas-select-left\"\n                                        onClick={() => tool!.select(\"left\")}\n                                    >\n                                        <i className=\"fas fa-chevron-left\"></i>\n                                    </button>\n                                    <button\n                                        className=\"btn btn-secondary canvas-select-right\"\n                                        onClick={() => tool!.select(\"right\")}\n                                    >\n                                        <i className=\"fas fa-chevron-right\"></i>\n                                    </button>\n                                </>\n                            )}\n                        </div>\n                    </div>\n                    <div className=\"row\">\n                        <button\n                            className=\"btn btn-primary\"\n                            // center horizontally\n                            style={{\n                                position: \"absolute\",\n                                left: \"50%\",\n                                transform: \"translate(-50%, 0)\",\n                            }}\n                            onClick={() => {\n                                if (renderer) {\n                                    renderer.resetView();\n                                }\n                            }}\n                        >\n                            {/* reset zoom */}\n                            <i className=\"fas fa-search-plus\"></i>&nbsp; Reset\n                            View\n                        </button>\n                        {/* redo */}\n                    </div>\n                    {/* vertically center button within the div */}\n                </div>\n            </div>\n            {busyMessage && (\n                <BusyModal show={true} title=\"Please Wait\">\n                    {busyMessage}\n                </BusyModal>\n            )}\n        </>\n    );\n};\n","import { Cursor, Rect } from \"./models\";\n\nconst maxSnapshots = 10;\n\nexport class Renderer {\n    private undoStack: ImageData[] = [];\n    private redoStack: ImageData[] = [];\n    private currentSnapshot: ImageData | undefined;\n\n    private backgroundLayer: HTMLCanvasElement;\n    private baseImageLayer: HTMLCanvasElement;\n    private editLayer: HTMLCanvasElement;\n    private maskLayer: HTMLCanvasElement | undefined;\n    // private overlayLayer: HTMLCanvasElement;\n\n    private selectionOverlay: Rect | undefined;\n    private selectionOverlayPreview: Rect | undefined;\n    private hasSelection: boolean = false;\n    private cursor: Cursor | undefined;\n\n    private zoom: number;\n    private offsetX: number;\n    private offsetY: number;\n    private width = 0;\n    private height = 0;\n\n    private snapshotListener: (() => void) | null = null;\n\n    constructor(private readonly canvas: HTMLCanvasElement) {\n        // invisible canvas elements\n        this.backgroundLayer = document.createElement(\"canvas\");\n        this.backgroundLayer.width = canvas.width;\n        this.backgroundLayer.height = canvas.height;\n        this.baseImageLayer = document.createElement(\"canvas\");\n        this.editLayer = document.createElement(\"canvas\");\n        // this.overlayLayer = document.createElement(\"canvas\");\n\n        this.zoom = 1;\n        this.offsetX = 0;\n        this.offsetY = 0;\n    }\n\n    updateCanvasSize(width: number, height: number) {\n        this.canvas.width = width;\n        this.canvas.height = height;\n        this.backgroundLayer.width = width;\n        this.backgroundLayer.height = height;\n        this.initializeBackgroundLayer();\n        this.render();\n    }\n\n    undo(allowRedo: boolean = true) {\n        if (this.undoStack.length > 0 && this.currentSnapshot) {\n            const imageData = this.undoStack.pop()!;\n            if (allowRedo) {\n                this.redoStack.push(this.currentSnapshot);\n            }\n            this.currentSnapshot = imageData;\n            // set as base image\n            const ctx = this.baseImageLayer.getContext(\"2d\");\n            if (ctx) {\n                ctx.clearRect(\n                    0,\n                    0,\n                    this.baseImageLayer.width,\n                    this.baseImageLayer.height\n                );\n                ctx.putImageData(imageData, 0, 0);\n                this.render();\n            }\n            this.notifySnapshotListener();\n        }\n    }\n\n    redo() {\n        if (this.redoStack.length > 0 && this.currentSnapshot) {\n            this.undoStack.push(this.currentSnapshot);\n            const imageData = this.redoStack.pop()!;\n            this.currentSnapshot = imageData;\n\n            // set as base image\n            const ctx = this.baseImageLayer.getContext(\"2d\");\n            if (ctx) {\n                ctx.putImageData(imageData, 0, 0);\n                this.render();\n            }\n            this.notifySnapshotListener();\n        }\n    }\n\n    clearRedoStack() {\n        this.redoStack = [];\n        this.notifySnapshotListener();\n    }\n\n    canUndo(): boolean {\n        return !this.hasSelection && this.undoStack.length > 0;\n    }\n\n    canRedo(): boolean {\n        return !this.hasSelection && this.redoStack.length > 0;\n    }\n\n    onSnapshot(listener: () => void) {\n        this.snapshotListener = listener;\n    }\n\n    snapshot() {\n        const ctx = this.baseImageLayer.getContext(\"2d\");\n        if (ctx) {\n            const snapshot = ctx.getImageData(\n                0,\n                0,\n                this.baseImageLayer.width,\n                this.baseImageLayer.height\n            );\n            if (this.currentSnapshot) {\n                this.undoStack.push(this.currentSnapshot);\n                this.currentSnapshot = snapshot;\n                if (this.redoStack.length > 0) {\n                    this.redoStack = [];\n                }\n                if (this.undoStack.length > maxSnapshots) {\n                    this.undoStack.shift();\n                }\n            } else {\n                this.currentSnapshot = snapshot;\n            }\n\n            this.notifySnapshotListener();\n        }\n    }\n\n    private notifySnapshotListener() {\n        if (this.snapshotListener) {\n            this.snapshotListener();\n        }\n    }\n\n    render() {\n        const context = this.canvas.getContext(\"2d\");\n        if (context) {\n            context.clearRect(0, 0, this.width, this.height);\n            context.drawImage(this.backgroundLayer, 0, 0);\n            // apply zoom and offset\n            context.setTransform(\n                this.zoom,\n                0,\n                0,\n                this.zoom,\n                this.offsetX * this.zoom,\n                this.offsetY * this.zoom\n            );\n            // context.drawImage(this.backgroundLayer, 0, 0);\n            context.drawImage(this.baseImageLayer, 0, 0);\n            context.drawImage(this.editLayer, 0, 0);\n            // draw this.maskLayer at 0.3 opacity\n            if (this.maskLayer) {\n                context.globalAlpha = 0.3;\n                context.drawImage(this.maskLayer, 0, 0);\n                context.globalAlpha = 1;\n            }\n\n            // context.drawImage(this.overlayLayer, 0, 0);\n            this.drawOverlay(context, this.width, this.height);\n            context.setTransform(1, 0, 0, 1, 0, 0);\n        }\n    }\n\n    createMask() {\n        this.maskLayer = document.createElement(\"canvas\");\n        this.maskLayer.width = this.width;\n        this.maskLayer.height = this.height;\n        this.resetMask();\n    }\n\n    resetMask() {\n        if (this.maskLayer) {\n            const ctx = this.maskLayer.getContext(\"2d\");\n            if (ctx) {\n                ctx.fillStyle = \"#000000\";\n                ctx.fillRect(0, 0, this.width, this.height);\n            }\n            this.render();\n        }\n    }\n\n    invertMask() {\n        if (this.maskLayer) {\n            const ctx = this.maskLayer.getContext(\"2d\");\n            if (ctx) {\n                // change black to white, white to black\n                const imageData = ctx.getImageData(\n                    0,\n                    0,\n                    this.width,\n                    this.height\n                );\n                for (let i = 0; i < imageData.data.length; i += 4) {\n                    imageData.data[i] = 255 - imageData.data[i];\n                    imageData.data[i + 1] = 255 - imageData.data[i + 1];\n                    imageData.data[i + 2] = 255 - imageData.data[i + 2];\n                }\n                ctx.putImageData(imageData, 0, 0);\n            }\n            this.render();\n        }\n    }\n\n    deleteMask() {\n        this.maskLayer = undefined;\n        this.render();\n    }\n\n    isMasked() {\n        return this.maskLayer !== undefined;\n    }\n\n    getCanvas(): HTMLCanvasElement {\n        return this.canvas;\n    }\n\n    private initializeBackgroundLayer() {\n        // checkered background\n        // #DEDEDE\n        // #FFFFFF\n        // 10x10 pixel squares\n        const ctx = this.backgroundLayer.getContext(\"2d\");\n        if (ctx) {\n            const pattern = ctx.createPattern(\n                this.createCheckeredPattern(20, 20, \"#808080\", \"#AAAAAA\"),\n                \"repeat\"\n            );\n            if (pattern) {\n                ctx.fillStyle = pattern;\n                ctx.fillRect(\n                    0,\n                    0,\n                    this.backgroundLayer.width,\n                    this.backgroundLayer.height\n                );\n            }\n        }\n    }\n\n    private createCheckeredPattern(\n        width: number,\n        height: number,\n        color1: string,\n        color2: string\n    ): HTMLCanvasElement {\n        const canvas = document.createElement(\"canvas\");\n        canvas.width = width;\n        canvas.height = height;\n        const ctx = canvas.getContext(\"2d\");\n        if (ctx) {\n            ctx.fillStyle = color1;\n            ctx.fillRect(0, 0, width, height);\n            ctx.fillStyle = color2;\n            ctx.fillRect(0, 0, width / 2, height / 2);\n            ctx.fillRect(width / 2, height / 2, width / 2, height / 2);\n        }\n        return canvas;\n    }\n\n    setBaseImage(\n        image: HTMLImageElement | HTMLCanvasElement,\n        updateSelectionOverlay = true\n    ) {\n        const context = this.baseImageLayer.getContext(\"2d\");\n        if (context) {\n            // set size of all layers\n            // TODO: adapt for an always-square canvas\n            this.initializeBackgroundLayer();\n\n            this.baseImageLayer.width = image.width;\n            this.baseImageLayer.height = image.height;\n            this.editLayer.width = image.width;\n            this.editLayer.height = image.height;\n            this.maskLayer = undefined;\n            // set image size\n            this.width = image.width;\n            this.height = image.height;\n            // this.canvas.width = image.width;\n            // this.canvas.height = image.height;\n            context.drawImage(image, 0, 0);\n\n            if (updateSelectionOverlay) {\n                // set 512x512 selection overlay at the center of the image\n                this.setSelectionOverlay({\n                    x: (image.width - 512) / 2,\n                    y: (image.height - 512) / 2,\n                    width: 512,\n                    height: 512,\n                });\n            }\n            this.resetView();\n            // this.render(); // already called by updateZoomAndOffset\n            this.snapshot();\n        }\n    }\n\n    resetView() {\n        // Determine the aspect ratios of the image and canvas\n        const imageAspectRatio = this.width / this.height;\n        const canvasAspectRatio = this.canvas.width / this.canvas.height;\n    \n        let zoom, offsetX, offsetY;\n    \n        if (imageAspectRatio > canvasAspectRatio) {\n            // The image is wider than the canvas, so we should fit the image to the width of the canvas\n            zoom = this.canvas.width / this.width;\n            offsetX = 0;\n            // Calculate the amount of empty space in the height (in image coordinate space), and divide by 2 to center\n            offsetY = (this.height - (this.canvas.height / zoom)) / -2;\n        } else {\n            // The image is taller or equal aspect ratio to the canvas, so we should fit the image to the height of the canvas\n            zoom = this.canvas.height / this.height;\n            offsetY = 0;\n            // Calculate the amount of empty space in the width (in image coordinate space), and divide by 2 to center\n            offsetX = (this.width - (this.canvas.width / zoom)) / -2;\n        }\n    \n        this.updateZoomAndOffset(zoom, offsetX, offsetY);\n    }\n    \n    \n\n    setEditImage(imageData: ImageData | null) {\n        this.hasSelection = !!imageData;\n        const context = this.editLayer.getContext(\"2d\");\n        if (context && this.selectionOverlay) {\n            context.clearRect(\n                0,\n                0,\n                this.editLayer.width,\n                this.editLayer.height\n            );\n            if (imageData) {\n                context.putImageData(\n                    imageData,\n                    this.selectionOverlay.x,\n                    this.selectionOverlay.y\n                );\n            }\n            // edit image makes the selection rect and preview disappear\n            // so redraw the overlay\n            this.hasSelection = !!imageData;\n            this.render();\n        }\n        this.notifySnapshotListener();\n    }\n\n    private drawOverlay(\n        context: CanvasRenderingContext2D,\n        width: number,\n        height: number\n    ) {\n        const lineWidth = Math.max(this.width / 512, this.height / 512);\n        if (context) {\n            context.strokeStyle = \"white\";\n            context.lineWidth = lineWidth;\n            context.strokeRect(0, 0, width, height);\n\n            if (!this.hasSelection && this.selectionOverlay) {\n                context.strokeStyle = \"white\";\n                context.lineWidth = lineWidth;\n                context.strokeRect(\n                    this.selectionOverlay.x,\n                    this.selectionOverlay.y,\n                    this.selectionOverlay.width,\n                    this.selectionOverlay.height\n                );\n            }\n            if (!this.hasSelection && this.selectionOverlayPreview) {\n                context.strokeStyle = \"cyan\";\n                context.lineWidth = lineWidth;\n                context.strokeRect(\n                    this.selectionOverlayPreview.x,\n                    this.selectionOverlayPreview.y,\n                    this.selectionOverlayPreview.width,\n                    this.selectionOverlayPreview.height\n                );\n            }\n            if (this.cursor) {\n                if (this.cursor.type === \"circle\") {\n                    context.lineWidth = lineWidth;\n                    context.strokeStyle = this.cursor.color;\n                    // context.globalAlpha = 0.5;\n                    context.beginPath();\n                    context.arc(\n                        this.cursor.x,\n                        this.cursor.y,\n                        this.cursor.radius,\n                        0,\n                        2 * Math.PI\n                    );\n                    context.stroke();\n                } else if (this.cursor.type === \"circle-fill\") {\n                    context.fillStyle = this.cursor.color;\n                    context.strokeStyle = this.cursor.color;\n                    // context.lineWidth = lineWidth;\n                    // context.globalAlpha = 0.5;\n                    context.beginPath();\n                    context.arc(\n                        this.cursor.x,\n                        this.cursor.y,\n                        this.cursor.radius,\n                        0,\n                        2 * Math.PI\n                    );\n                    context.stroke();\n                    // set alpha to 0.5 and fill\n                    context.globalAlpha = 0.5;\n                    context.beginPath();\n                    context.arc(\n                        this.cursor.x,\n                        this.cursor.y,\n                        this.cursor.radius,\n                        0,\n                        2 * Math.PI\n                    );\n                    context.fill();\n                    context.globalAlpha = 1;\n                } else if (this.cursor.type == \"crosshairs\") {\n                    // draw crosshairs based on cursor radius\n                    context.strokeStyle = this.cursor.color;\n                    context.lineWidth = lineWidth;\n                    context.beginPath();\n                    context.moveTo(\n                        this.cursor.x - this.cursor.radius,\n                        this.cursor.y\n                    );\n                    context.lineTo(\n                        this.cursor.x + this.cursor.radius,\n                        this.cursor.y\n                    );\n                    context.moveTo(\n                        this.cursor.x,\n                        this.cursor.y - this.cursor.radius\n                    );\n                    context.lineTo(\n                        this.cursor.x,\n                        this.cursor.y + this.cursor.radius\n                    );\n                    context.stroke();\n                } else if (this.cursor.type === \"colorpicker\") {\n                    // TODO: add croshairs\n                    context.lineWidth = this.cursor.radius * 0.75;\n                    context.strokeStyle = this.cursor.color;\n                    // context.globalAlpha = 0.5;\n                    context.beginPath();\n                    context.arc(\n                        this.cursor.x,\n                        this.cursor.y,\n                        this.cursor.radius,\n                        0,\n                        2 * Math.PI\n                    );\n                    context.stroke();\n\n                    // draw crosshairs (black)\n                    context.lineWidth = lineWidth;\n                    context.strokeStyle = \"black\";\n                    context.beginPath();\n                    context.moveTo(\n                        this.cursor.x - this.cursor.radius,\n                        this.cursor.y\n                    );\n                    context.lineTo(\n                        this.cursor.x + this.cursor.radius,\n                        this.cursor.y\n                    );\n                    context.moveTo(\n                        this.cursor.x,\n                        this.cursor.y - this.cursor.radius\n                    );\n                    context.lineTo(\n                        this.cursor.x,\n                        this.cursor.y + this.cursor.radius\n                    );\n                    context.stroke();\n                }\n            }\n        }\n    }\n\n    setSelectionOverlay(selectionOverlay: Rect | undefined) {\n        this.selectionOverlay = selectionOverlay;\n        this.render();\n    }\n\n    setSelectionOverlayPreview(selectionOverlayPreview: Rect | undefined) {\n        this.selectionOverlayPreview = selectionOverlayPreview;\n        this.render();\n    }\n\n    setCursor(cursor: Cursor | undefined) {\n        this.cursor = cursor;\n        this.render();\n    }\n\n    getSelectionOverlay(): Rect | undefined {\n        return this.selectionOverlay;\n    }\n\n    getZoom(): number {\n        return this.zoom;\n    }\n\n    getOffsetX(): number {\n        return this.offsetX;\n    }\n\n    getOffsetY(): number {\n        return this.offsetY;\n    }\n\n    updateZoomAndOffset(zoom: number, offsetX: number, offsetY: number) {\n        // console.log(`zoom: ${zoom}, offset: ${offsetX}, ${offsetY}`)\n        this.zoom = zoom;\n        this.offsetX = offsetX;\n        this.offsetY = offsetY;\n        this.render();\n    }\n\n    getWidth(): number {\n        return this.width;\n    }\n\n    getHeight(): number {\n        return this.height;\n    }\n\n    private imageDataToEncodedImage(imageData: ImageData): string | undefined {\n        // create a canvas and draw the image data on it\n        const canvas = document.createElement(\"canvas\");\n        canvas.width = imageData.width;\n        canvas.height = imageData.height;\n        const context = canvas.getContext(\"2d\");\n        if (context) {\n            context.putImageData(imageData, 0, 0);\n            // return the data url of the canvas\n            const result = canvas.toDataURL(\"image/png\");\n            // cleanup the canvas\n            canvas.remove();\n            // extract base64 data from data url\n            return result.split(\",\")[1];\n        }\n    }\n\n    getEncodedImage(selection: Rect | null): string | undefined {\n        const imageData = this.getImageData(selection);\n        if (imageData) {\n            return this.imageDataToEncodedImage(imageData);\n        }\n    }\n\n    private convertErasureToMask(erasure: ImageData): ImageData {\n        // for each pixel, if alpha < 255, set to white, otherwise set to black\n        const mask = erasure;\n        for (let i = 0; i < erasure.data.length; i += 4) {\n            let white = erasure.data[i + 3] < 255;\n            if (white) {\n                mask.data[i] = 255;\n                mask.data[i + 1] = 255;\n                mask.data[i + 2] = 255;\n                mask.data[i + 3] = 255;\n            } else {\n                mask.data[i] = 0;\n                mask.data[i + 1] = 0;\n                mask.data[i + 2] = 0;\n                mask.data[i + 3] = 255;\n            }\n        }\n        return mask;\n    }\n\n    getEncodedMask(\n        selection: Rect | null,\n        layer: \"base\" | \"mask\" = \"base\"\n    ): string | undefined {\n        const imageData = this.getImageData(selection, layer)!;\n        if (!imageData) {\n            return;\n        }\n        if (layer === \"base\") {\n            const mask = this.convertErasureToMask(imageData);\n            return this.imageDataToEncodedImage(mask);\n        } else {\n            return this.imageDataToEncodedImage(imageData);\n        }\n    }\n\n    getImageData(\n        selection: Rect | null,\n        layer: \"base\" | \"mask\" = \"base\"\n    ): ImageData | undefined {\n        if (!selection) {\n            selection = {\n                x: 0,\n                y: 0,\n                width: this.width,\n                height: this.height,\n            };\n        }\n        // get image data of the selection\n        const imageLayer =\n            layer === \"base\" ? this.baseImageLayer : this.maskLayer;\n        if (!imageLayer) {\n            return;\n        }\n        let context = imageLayer.getContext(\"2d\");\n        if (context) {\n            const imageData = context.getImageData(\n                selection.x,\n                selection.y,\n                selection.width,\n                selection.height\n            );\n            return imageData;\n        }\n    }\n\n    commitSelection() {\n        // draw the selection overlay on the base image layer\n        const context = this.baseImageLayer.getContext(\"2d\");\n        if (context) {\n            context.drawImage(this.editLayer, 0, 0);\n            this.setEditImage(null);\n            this.snapshot();\n        }\n    }\n\n    drawPoint(\n        x: number,\n        y: number,\n        brushSize: number,\n        color: string,\n        layer: \"base\" | \"mask\" = \"base\"\n    ): void {\n        // draw on selection layer\n        const imageLayer = layer === \"base\" ? this.editLayer : this.maskLayer;\n        if (!imageLayer) {\n            return;\n        }\n        const context = imageLayer.getContext(\"2d\");\n        if (context) {\n            context.fillStyle = color;\n            context.beginPath();\n            context.arc(x, y, brushSize / 2, 0, 2 * Math.PI);\n            context.fill();\n        }\n        this.render();\n    }\n\n    erasePoint(brushx: number, brushy: number, brushSize: number): void {\n        if (!this.selectionOverlay) {\n            throw new Error(\"No selection overlay\");\n        }\n        // get image data centered on x, y with brushSize width and height\n        const context = this.baseImageLayer.getContext(\"2d\");\n        if (context) {\n            const imageData = context.getImageData(\n                brushx - brushSize / 2,\n                brushy - brushSize / 2,\n                brushSize,\n                brushSize\n            );\n            // set alpha to 0 in a circle centered on x, y with radius brushSize / 2\n            for (let i = 0; i < imageData.data.length; i += 4) {\n                const x = (i / 4) % brushSize;\n                const y = Math.floor(i / 4 / brushSize);\n\n                const absx = x - brushSize / 2 + brushx;\n                // three pixel barrier on each edge UNLESS the selection overlay borders that edge\n                let leftEdge = this.selectionOverlay.x;\n                if (leftEdge > 0) {\n                    leftEdge += 10;\n                }\n                let rightEdge =\n                    this.selectionOverlay.x + this.selectionOverlay.width;\n                if (rightEdge < this.width) {\n                    rightEdge -= 10;\n                }\n                let topEdge = this.selectionOverlay.y;\n                if (topEdge > 0) {\n                    topEdge += 10;\n                }\n                let bottomEdge =\n                    this.selectionOverlay.y + this.selectionOverlay.height;\n                if (bottomEdge < this.canvas.height) {\n                    bottomEdge -= 10;\n                }\n\n                const containsx = absx > leftEdge && absx < rightEdge;\n                const absy = y - brushSize / 2 + brushy;\n                const containsy = absy > topEdge && absy < bottomEdge;\n                const contains = containsx && containsy;\n\n                // check if x, y is within the selection overlay\n                if (this.selectionOverlay && !contains) {\n                    continue;\n                }\n\n                const distance = Math.sqrt(\n                    Math.pow(x - brushSize / 2, 2) +\n                        Math.pow(y - brushSize / 2, 2)\n                );\n                if (distance < brushSize / 2) {\n                    imageData.data[i + 3] = 0;\n                }\n            }\n            // draw the image data on the selection layer\n            context.putImageData(\n                imageData,\n                brushx - brushSize / 2,\n                brushy - brushSize / 2\n            );\n        }\n    }\n\n    drawLine(\n        x1: number,\n        y1: number,\n        x2: number,\n        y2: number,\n        brushSize: number,\n        color: string,\n        layer: \"base\" | \"mask\" = \"base\"\n    ): void {\n        const imageLayer = layer === \"base\" ? this.editLayer : this.maskLayer;\n        if (!imageLayer) {\n            return;\n        }\n        // draw on selection layer\n        const context = imageLayer.getContext(\"2d\");\n        if (context) {\n            context.strokeStyle = color;\n            context.lineWidth = brushSize;\n            context.lineCap = \"round\";\n            context.beginPath();\n            context.moveTo(x1, y1);\n            context.lineTo(x2, y2);\n            context.stroke();\n        }\n        this.render();\n    }\n\n    smudgeLine(\n        x1: number,\n        y1: number,\n        x2: number,\n        y2: number,\n        brushSize: number,\n        brushOpacity: number\n    ): void {\n        const unitVector = {\n            x: x2 - x1,\n            y: y2 - y1,\n        };\n        const length = Math.sqrt(\n            unitVector.x * unitVector.x + unitVector.y * unitVector.y\n        );\n        unitVector.x /= length;\n        unitVector.y /= length;\n\n        // for each point on the line, get image data (brushSize x brushSize) from edit layer\n        // average pixel values that are within the brush circle.\n        // update the image data with the averaged pixel values in the\n        // brush circle, then put the image data back on the edit layer\n        // at the point on the line\n\n        const context = this.editLayer.getContext(\"2d\");\n        if (context) {\n            for (let i = 0; i < length; i++) {\n                const x = x1 + i * unitVector.x;\n                const y = y1 + i * unitVector.y;\n\n                const imageData = context.getImageData(\n                    x - brushSize / 2,\n                    y - brushSize / 2,\n                    brushSize,\n                    brushSize\n                );\n\n                let totalRed = 0;\n                let totalGreen = 0;\n                let totalBlue = 0;\n                let count = 0.0;\n\n                // average pixel values\n                for (let y = 0; y < imageData.height; y++) {\n                    for (let x = 0; x < imageData.width; x++) {\n                        const index = (y * imageData.width + x) * 4;\n                        const distance = Math.sqrt(\n                            (x - brushSize / 2) * (x - brushSize / 2) +\n                                (y - brushSize / 2) * (y - brushSize / 2)\n                        );\n                        if (distance <= brushSize / 2) {\n                            // get the pixel value from the image data\n                            const r = imageData.data[index];\n                            const g = imageData.data[index + 1];\n                            const b = imageData.data[index + 2];\n\n                            totalRed += r;\n                            totalGreen += g;\n                            totalBlue += b;\n                            count++;\n                        }\n                    }\n                }\n\n                // update the image data with the averaged pixel values\n                // these need to be weighted by the brush opacity\n                const averageRed = totalRed / count;\n                const averageGreen = totalGreen / count;\n                const averageBlue = totalBlue / count;\n                for (let y = 0; y < imageData.height; y++) {\n                    for (let x = 0; x < imageData.width; x++) {\n                        const index = (y * imageData.width + x) * 4;\n                        const distance = Math.sqrt(\n                            (x - brushSize / 2) * (x - brushSize / 2) +\n                                (y - brushSize / 2) * (y - brushSize / 2)\n                        );\n                        if (distance <= brushSize / 2) {\n                            imageData.data[index] =\n                                averageRed * brushOpacity +\n                                imageData.data[index] * (1 - brushOpacity);\n                            imageData.data[index + 1] =\n                                averageGreen * brushOpacity +\n                                imageData.data[index + 1] * (1 - brushOpacity);\n                            imageData.data[index + 2] =\n                                averageBlue * brushOpacity +\n                                imageData.data[index + 2] * (1 - brushOpacity);\n                        }\n                    }\n                }\n\n                // put the image data back on the edit layer\n                context.putImageData(\n                    imageData,\n                    x - brushSize / 2,\n                    y - brushSize / 2\n                );\n            }\n        }\n        this.render();\n    }\n\n    getPixel(x: number, y: number): string {\n        const context = this.baseImageLayer.getContext(\"2d\");\n        // get pixel as hex string\n        if (context) {\n            const pixel = context.getImageData(x, y, 1, 1).data;\n            return (\n                \"#\" +\n                (\"000000\" + rgbToHex(pixel[0], pixel[1], pixel[2])).slice(-6)\n            );\n        }\n        return \"#000000\";\n    }\n\n    copyEditImageFromBaseImage(): void {\n        // copy the base image to the edit layer\n        const context = this.editLayer.getContext(\"2d\");\n        if (context) {\n            context.drawImage(this.baseImageLayer, 0, 0);\n        }\n        this.render();\n        this.hasSelection = true;\n        this.notifySnapshotListener();\n    }\n\n    expandToOverlay() {\n        if (!this.selectionOverlay) {\n            throw new Error(\"No selection overlay\");\n        }\n        const minX = Math.min(0, this.selectionOverlay.x);\n        const minY = Math.min(0, this.selectionOverlay.y);\n        const maxX = Math.max(\n            this.selectionOverlay.x + this.selectionOverlay.width,\n            this.baseImageLayer.width\n        );\n        const maxY = Math.max(\n            this.selectionOverlay.y + this.selectionOverlay.height,\n            this.baseImageLayer.height\n        );\n        const width = maxX - minX;\n        const height = maxY - minY;\n\n        // create a new canvas with the expanded size\n        const newCanvas = document.createElement(\"canvas\");\n        newCanvas.width = width;\n        newCanvas.height = height;\n        // draw the base image on the new canvas.\n        // if overlay.x is negative, image.x is overlay.x * -1\n        // if overlay.x is 0 or positive, image.x is 0\n        // if overlay.y is negative, image.y is overlay.y * -1\n        // if overlay.y is 0 or positive, image.y is 0\n        const context = newCanvas.getContext(\"2d\");\n        if (context) {\n            context.drawImage(\n                this.baseImageLayer,\n                Math.max(0, this.selectionOverlay.x * -1),\n                Math.max(0, this.selectionOverlay.y * -1)\n            );\n        }\n        if (this.selectionOverlay.x < 0) {\n            this.selectionOverlay.x = 0;\n        }\n        if (this.selectionOverlay.y < 0) {\n            this.selectionOverlay.y = 0;\n        }\n        console.log(`new Canvas size: ${width} x ${height}`);\n        this.setBaseImage(newCanvas, false);\n    }\n}\n\nfunction rgbToHex(r: number, g: number, b: number) {\n    if (r > 255 || g > 255 || b > 255) throw \"Invalid color component\";\n    return ((r << 16) | (g << 8) | b).toString(16);\n}\n\nexport function createRenderer(canvas: HTMLCanvasElement): Renderer {\n    return new Renderer(canvas);\n}\n","import React, { FC, useState, useEffect } from \"react\";\nimport loadImage from \"blueimp-load-image\";\nimport saveAs from \"file-saver\";\n\nimport { AIBrushApi } from \"../../client\";\nimport { Renderer } from \"./renderer\";\nimport { BaseTool, Tool } from \"./tool\";\n\ninterface Props {\n    renderer: Renderer;\n    tool: BaseTool;\n}\n\nexport const ImportExportControls: FC<Props> = ({ renderer, tool }) => {\n\n    const [backupImage, setBackupImage] = useState<string | undefined>();\n\n    const onImageSelected = (event: React.ChangeEvent<HTMLInputElement>) => {\n        const files = event.target.files;\n        if (files && files.length > 0) {\n            loadImage(\n                files[0],\n                (img) => {\n                    const backupImage = renderer.getEncodedImage(null);\n                    setBackupImage(backupImage);\n                    renderer.setBaseImage(img as HTMLImageElement);\n                },\n                { canvas: false }\n            );\n        }\n    };\n\n    const onExport = () => {\n        const encodedImage = renderer.getEncodedImage(null);\n        if (encodedImage) {\n            // base64 decode\n            const byteString = atob(encodedImage);\n            // save as file\n            const buffer = new ArrayBuffer(byteString.length);\n            const intArray = new Uint8Array(buffer);\n            for (let i = 0; i < byteString.length; i++) {\n                intArray[i] = byteString.charCodeAt(i);\n            }\n            const blob = new Blob([intArray], { type: \"image/png\" });\n            saveAs(blob, \"image.png\");\n        }\n    };\n\n    if (backupImage) {\n        return (\n            <div className=\"form-group\" style={{marginTop: \"16px\"}}>\n                <button\n                    className=\"btn btn-primary\"\n                    onClick={() => {\n                        setBackupImage(undefined);\n                        const img = new Image();\n                        // set src as data uri\n                        const src = \"data:image/png;base64,\" + backupImage;\n                        img.src = src;\n                        img.onload = () => {\n                            renderer.setBaseImage(img);\n                        };\n                    }}\n                >\n                    {/* cancel icon */}\n                    <i className=\"fas fa-times\"></i>&nbsp;\n                    Revert\n                </button>\n                <button\n                    className=\"btn btn-primary\"\n                    onClick={() => {\n                        setBackupImage(undefined);\n                        if (tool.saveListener) {\n                            const encodedImage = renderer.getEncodedImage(null);\n                            if (encodedImage) {\n                                tool.saveListener(encodedImage);\n                            }\n                        }\n                    }}\n                    style={{marginLeft: \"8px\"}}\n                >\n                    {/* save icon */}\n                    <i className=\"fas fa-save\"></i>&nbsp;\n                    Save\n                </button>\n            </div>\n        );\n    }\n\n    // Show buttons for import and export and \"save a copy\"\n    return (\n        <>\n            <div className=\"form-group\" style={{marginTop: \"16px\"}}>\n                <label\n                    id=\"loadimage-wrapper\"\n                    className={`btn btn-primary `}\n                    style={{ display: \"inline\" }}\n                >\n                    {/* upload image */}\n                    <i className=\"fas fa-upload\"></i>&nbsp; Import Image\n                    <input\n                        id=\"loadimage\"\n                        type=\"file\"\n                        style={{ display: \"none\" }}\n                        onChange={onImageSelected}\n                    />\n                </label>\n            </div>\n            <div className=\"form-group\">\n                <button\n                    className=\"btn btn-primary\"\n                    onClick={() => {\n                        onExport();\n                    }}\n                    style={{ marginLeft: \"8px\"}}\n                >\n                    <i className=\"fas fa-download\"></i>&nbsp; Export Image\n                </button>\n            </div>\n        </>\n    );\n};\n","import React, { FC, useState, useEffect } from \"react\";\nimport loadImage from \"blueimp-load-image\";\nimport saveAs from \"file-saver\";\nimport axios from \"axios\";\nimport * as uuid from \"uuid\";\n\nimport { sleep } from \"../../lib/sleep\";\n\nimport {\n    StatusEnum,\n} from \"../../client\";\nimport { Renderer } from \"./renderer\";\nimport { BaseTool, Tool } from \"./tool\";\nimport {\n    ImageUtilWorker,\n    imageDataToCanvas,\n    fixImageSize,\n    decodeImage,\n} from \"../../lib/imageutil\";\nimport { ErrorNotification } from \"../../components/Alerts\";\nimport moment from \"moment\";\nimport { calculateImagesCost } from \"../../lib/credits\";\nimport { CostIndicator } from \"../../components/CostIndicator\";\nimport { LocalImage } from \"../../lib/models\";\nimport { HordeGenerator } from \"../../lib/hordegenerator\";\n\nexport const anonymousClient = axios.create();\n\ninterface Props {\n    renderer: Renderer;\n    tool: BaseTool;\n    generator: HordeGenerator;\n    image: LocalImage;\n}\n\nexport const AugmentControls: FC<Props> = ({ renderer, tool, generator, image }) => {\n    const [backupImage, setBackupImage] = useState<string | undefined>();\n    const [activeAugmentation, setActiveAugmentation] = useState<\n        \"upscale\" | \"face_restore\" | null\n    >(null);\n    const [imageWorker, setImageWorker] = useState<\n        ImageUtilWorker | undefined\n    >();\n    const [error, setError] = useState<string | null>(null);\n    const [lastError, setLastError] = useState<number>(0);\n\n    useEffect(() => {\n        const imageWorker = new ImageUtilWorker();\n        setImageWorker(imageWorker);\n        return () => {\n            imageWorker.destroy();\n        };\n    }, []);\n\n    const augmentImageData = async (\n        imageData: ImageData,\n        augmentation: \"upscale\" | \"face_restore\"\n    ): Promise<ImageData> => {\n        if (!imageWorker) {\n            throw new Error(\"Image worker not initialized\");\n        }\n        let c = imageDataToCanvas(imageData);\n        let encodedImage = c.toDataURL(\"image/png\").split(\",\")[1];\n        c.remove();\n\n        // TODO: use progress indicator\n        const start = moment().valueOf();\n        let processingImage = await generator.augmentImage({\n            augmentation: augmentation,\n            image: {\n                imageData: encodedImage,\n            }\n        });\n        while (processingImage.status !== StatusEnum.Completed) {\n            await sleep(2000);\n            processingImage = await generator.checkAugmentation(processingImage);\n            if (processingImage.status === StatusEnum.Error) {\n                throw new Error(\"Augmentation failed\");\n            }\n            if (moment().valueOf() - start > 60000) {\n                await generator.client.deleteInterrogationRequest(processingImage.id);\n                throw new Error(\"Augmentation timed out\");\n            }\n        }\n        encodedImage = processingImage.imageData!;\n        const img = await decodeImage(encodedImage);\n        c = document.createElement(\"canvas\");\n        const upscaleFactor = augmentation === \"upscale\" ? 2 : 1;\n        c.width = imageData.width * upscaleFactor;\n        c.height = imageData.height * upscaleFactor;\n        const ctx = c.getContext(\"2d\")!;\n        ctx.drawImage(img, 0, 0, c.width, c.height);\n        const newImageData = ctx.getImageData(0, 0, c.width, c.height);\n        c.remove();\n        return newImageData;\n    };\n\n    const onAugment = async (augmentation: \"upscale\" | \"face_restore\") => {\n        setActiveAugmentation(augmentation);\n        setError(null);\n        try {\n            const backupImage = renderer.getEncodedImage(null);\n            setBackupImage(backupImage);\n            let imageData = renderer.getImageData(null);\n            if (!imageData) {\n                return;\n            }\n            // ensure width and height are multiples of 64\n            if ((imageData.width % 64) + (imageData.height % 64) !== 0) {\n                const c = fixImageSize(imageDataToCanvas(imageData));\n                imageData = c\n                    .getContext(\"2d\")!\n                    .getImageData(0, 0, c.width, c.height);\n            }\n\n            const newImageData = await augmentImageData(\n                imageData,\n                augmentation\n            );\n            const newCanvas = imageDataToCanvas(newImageData);\n            renderer.setBaseImage(newCanvas);\n            newCanvas.remove();\n        } catch (err: any) {\n            setError(err.message || \"Augmentation failed\");\n            setLastError(moment().valueOf());\n        } finally {\n            setActiveAugmentation(null);\n        }\n    };\n\n    if (activeAugmentation) {\n        return (\n            <div className=\"form-group\" style={{ marginTop: \"16px\" }}>\n                <i className=\"fas fa-spinner fa-spin\"></i>&nbsp;{\" \"}\n                {activeAugmentation === \"upscale\"\n                    ? \"Upscaling...\"\n                    : \"Restoring faces...\"}\n            </div>\n        );\n    }\n\n    if (backupImage) {\n        return (\n            <div className=\"form-group\" style={{ marginTop: \"16px\" }}>\n                <ErrorNotification message={error} timestamp={lastError} />\n                <button\n                    className=\"btn btn-primary\"\n                    onClick={() => {\n                        setBackupImage(undefined);\n                        const img = new Image();\n                        // set src as data uri\n                        const src = \"data:image/png;base64,\" + backupImage;\n                        img.src = src;\n                        img.onload = () => {\n                            renderer.setBaseImage(img);\n                        };\n                    }}\n                >\n                    {/* cancel icon */}\n                    <i className=\"fas fa-times\"></i>&nbsp; Revert\n                </button>\n                <button\n                    className=\"btn btn-primary\"\n                    onClick={() => {\n                        setBackupImage(undefined);\n                        if (tool.saveListener) {\n                            const encodedImage = renderer.getEncodedImage(null);\n                            if (encodedImage) {\n                                tool.saveListener(encodedImage);\n                            }\n                        }\n                    }}\n                    style={{ marginLeft: \"8px\" }}\n                >\n                    {/* save icon */}\n                    <i className=\"fas fa-save\"></i>&nbsp; Save\n                </button>\n            </div>\n        );\n    }\n\n    const maxSize = 2048 * 2048;\n    if (renderer.getWidth() * renderer.getHeight() > maxSize) {\n        return (\n            <div style={{ marginTop: \"16px\" }}>\n                This image is too large to augment.\n            </div>\n        );\n    }\n\n    const cost = calculateImagesCost(1, image.params.width!, image.params.height!);\n\n    // Show buttons for import and export and \"save a copy\"\n    return (\n        <>\n            <ErrorNotification message={error} timestamp={lastError} />\n            <div className=\"form-group\" style={{ marginTop: \"16px\" }}>\n                <button\n                    className=\"btn btn-primary\"\n                    onClick={() => {\n                        onAugment(\"upscale\");\n                    }}\n                    style={{ marginLeft: \"8px\" }}\n                >\n                    {/* upscale icon */}\n                    <i className=\"fas fa-arrows-alt\"></i>&nbsp; Upscale Image 2x\n                </button>\n            </div>\n            <div className=\"form-group\" style={{ marginTop: \"16px\" }}>\n                <button\n                    className=\"btn btn-primary\"\n                    onClick={() => {\n                        onAugment(\"face_restore\");\n                    }}\n                    style={{ marginLeft: \"8px\" }}\n                >\n                    {/* face restore icon */}\n                    <i className=\"fas fa-smile\"></i>&nbsp; Restore Faces\n                </button>\n            </div>\n            <div className=\"form-group\" style={{ marginTop: \"16px\" }}>\n                <CostIndicator imagesCost={cost} />\n            </div>\n        </>\n    );\n};\n","import React, {FC, useEffect, useState} from \"react\";\nimport { Modal } from \"react-bootstrap\";\nimport { GenerationJob } from \"../lib/models\";\n\n// TODO: refactor to generation job\ninterface Props {\n    jobs: GenerationJob[];\n    onDeleteJob: (job: GenerationJob) => void;\n    onCancel: () => void;\n    show: boolean;\n}\n\nexport const PendingJobs: FC<Props> = ({\n    jobs,\n    onDeleteJob,\n    onCancel,\n    show,\n}) => {\n\n    function imageIcon(job: GenerationJob) {\n        if (job.status === \"pending\") {\n            return <i className=\"fa fa-hourglass-half\"></i>;\n        } else if (job.status === \"processing\") {\n            return <i className=\"fa fa-cog fa-spin\"></i>;\n        }\n    }\n\n    const truncate = (phrases: string) => {\n        if (phrases.length > 35) {\n            return phrases.substring(0, 35) + \"...\";\n        }\n        return phrases;\n    }\n\n    // refactor from table to div layout\n    const pendingDiv = (\n        <div>\n            <div style={{marginBottom: \"8px\"}}>\n                <div style={{display: \"inline-block\", width: \"100px\"}}>\n                    Status\n                </div>\n                <div style={{display: \"inline-block\", width: \"200px\"}}>\n                    Prompt\n                </div>\n                <div style={{display: \"inline-block\", width: \"50px\"}}>\n                    Count\n                </div>\n                <div style={{display: \"inline-block\", width: \"100px\"}}>\n                    Action\n                </div>\n            </div>\n            {jobs.map((job) => (\n                <div key={job.id} style={{marginBottom: \"8px\"}}>\n                    <div style={{display: \"inline-block\", width: \"100px\"}}>\n                        {imageIcon(job)}&nbsp;{job.status}\n                    </div>\n                    <div style={{display: \"inline-block\", width: \"200px\"}}>\n                        {/* if more than 30 chars, truncate with ellipsis*/}\n                        {truncate(job.params.prompt || \"\")}\n                    </div>\n                    <div style={{display: \"inline-block\", width: \"50px\"}}>\n                        {job.count}\n                    </div>\n                    <div style={{display: \"inline-block\", width: \"100px\"}}>\n                        <button\n                            className=\"btn btn-danger btn-sm image-popup-delete-button\"\n                            onClick={() => onDeleteJob(job)}\n                        >\n                            <i className=\"fa fa-trash\"></i>&nbsp;Delete\n                        </button>\n                    </div>\n                </div>\n            ))}\n        </div>\n    );\n\n    return (\n        <Modal show={show} onHide={onCancel}>\n            <Modal.Header closeButton>\n                <Modal.Title>Pending Jobs</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                {pendingDiv}\n            </Modal.Body>\n            <Modal.Footer>\n                <button className=\"btn btn-secondary\" onClick={onCancel}>\n                    Close\n                </button>\n            </Modal.Footer>\n        </Modal>\n    );\n};","import React from \"react\";\nimport { Modal, Button } from \"react-bootstrap\";\nimport { Link, useHistory } from \"react-router-dom\";\n\ninterface OutOfCreditsModalProps {\n    show: boolean;\n    onHide: () => void;\n}\n\nconst OutOfCreditsModal: React.FC<OutOfCreditsModalProps> = ({\n    show,\n    onHide,\n}) => {\n    const history = useHistory();\n\n    const redirectToPricing = () => {\n        onHide();\n        history.push(\"/pricing\");\n    };\n\n    return (\n        <Modal show={show} onHide={onHide} centered>\n            <Modal.Header closeButton>\n                <Modal.Title>Out of Credits</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                Oops! It looks like you've run out of credits for today. But\n                don't worry, you'll receive 100 free credits tomorrow to\n                continue creating amazing images. Can't wait? Check out our\n                affordable <Link to=\"/pricing\">pricing options</Link> to get instant access to more credits\n                and unleash your creativity without limits!\n            </Modal.Body>\n            <Modal.Footer>\n                <Button variant=\"secondary\" onClick={onHide}>\n                    Close\n                </Button>\n                <Button variant=\"primary\" onClick={redirectToPricing}>\n                    Visit Pricing Page\n                </Button>\n            </Modal.Footer>\n        </Modal>\n    );\n};\n\nexport default OutOfCreditsModal;\n","import React, { useEffect, useState } from \"react\";\nimport { Modal, Button } from \"react-bootstrap\";\nimport { useHistory } from \"react-router-dom\";\n\ninterface PaymentStatusModalProps {\n    paymentStatus?: \"success\" | \"canceled\";\n}\n\nconst PaymentStatusModal: React.FC<PaymentStatusModalProps> = ({\n    paymentStatus,\n}) => {\n    const [show, setShow] = useState(false);\n    const history = useHistory();\n\n    useEffect(() => {\n        if (paymentStatus) {\n            setShow(true);\n        }\n    }, [paymentStatus]);\n\n    const handleClose = () => {\n        setShow(false);\n        history.push(\"/\");\n    };\n\n    return (\n        <Modal show={show} onHide={handleClose}>\n            <Modal.Header closeButton>\n                <Modal.Title>Payment Status</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                {paymentStatus === \"success\"\n                    ? \"Payment succeeded!\"\n                    : \"Payment canceled.\"}\n            </Modal.Body>\n            <Modal.Footer>\n                <Button variant=\"secondary\" onClick={handleClose}>\n                    Close\n                </Button>\n            </Modal.Footer>\n        </Modal>\n    );\n};\n\nexport default PaymentStatusModal;\n","import axios from \"axios\";\nimport moment from \"moment\";\nimport { CheckResult, GenerationResult, StatusEnum } from \"./models\";\n\nconst baseUrl = \"https://stablehorde.net/api\";\n\nexport interface RequestStatusCheck {\n    /** The amount of finished jobs in this request. */\n    finished: number;\n    processing: number;\n    waiting: number;\n    restarted: number;\n    done: boolean;\n    faulted: boolean;\n    wait_time: number;\n    queue_position: number;\n    kudos: number;\n    is_possible: boolean;\n}\n\nexport interface HordeRequestPayload {\n    params: {\n        n: number;\n        width: number;\n        height: number;\n        steps: number;\n        sampler_name: string;\n        cfg_scale: number;\n        denoising_strength: number;\n        karras: boolean;\n        hires_fix: boolean;\n        post_processing: string[];\n        control_type?: string;\n        seed?: string;\n        loras?: HordeLoraConfig[];\n    };\n    prompt: string;\n    api_key?: string;\n    nsfw: boolean;\n    censor_nsfw: boolean;\n    trusted_workers: boolean;\n    slow_workers: boolean;\n    r2: boolean;\n    models: string[];\n    source_processing: string;\n    source_image?: string;\n    source_mask?: string;\n    workers?: string[];\n}\n\nexport interface HordeLoraConfig {\n    name: string;\n    model: number;\n    clip: number;\n    inject_trigger?: string;\n}\n\nexport interface AlchemistForm {\n    name: string;\n}\n\nexport interface AlchemistPayload {\n    source_image: string;\n    forms: AlchemistForm[];\n    slow_workers: boolean;\n    trusted_workers: boolean;\n}\n\nexport class HordeClient {\n    constructor(private apiKey: string) {}\n\n    updateApiKey(apiKey: string) {\n        this.apiKey = apiKey;\n    }\n\n    // TODO: pass in onProgress callback\n    // onUploadProgress: (progressEvent: any) => {\n    //     const percentCompleted =\n    //         progressEvent.loaded / progressEvent.total;\n    //     setUploadingProgress(percentCompleted);\n    // },\n\n    async initiateImageGeneration(\n        payload: HordeRequestPayload,\n        onUploadProgress?: (progressEvent: any) => void,\n    ): Promise<string | null> {\n        payload.api_key = this.apiKey;\n        const submitReq = await axios.post(\n            `${baseUrl}/v2/generate/async`,\n            payload,\n            {\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                    apiKey: this.apiKey,\n                },\n                onUploadProgress,\n            }\n        );\n        const submitResults = submitReq.data;\n        const reqId = submitResults.id;\n\n        return reqId;\n    }\n\n    async checkImageJob(reqId: string): Promise<CheckResult> {\n        const chkReq = await axios.get(\n            `${baseUrl}/v2/generate/check/${reqId}`,\n            {\n                headers: {\n                    apiKey: this.apiKey,\n                },\n            }\n        );\n        const chkResults = (await chkReq.data) as RequestStatusCheck;\n        console.log(JSON.stringify(chkResults));\n        const total = chkResults.waiting + chkResults.processing + chkResults.restarted + chkResults.finished;\n        let status: string;\n        if (chkResults.processing > 0) {\n            status = \"processing\";\n        } else if (chkResults.done) {\n            status = \"completed\";\n        } else {\n            status = \"pending\";\n        }\n        \n        const progress = chkResults.finished / total;\n        return {\n            status: status as StatusEnum,\n            progress,\n        };\n    }\n\n    // TODO: optimization - optional NSFW check\n    async fetchImageResults(reqId: string): Promise<GenerationResult[]> {\n        const retrieveReq = await axios.get(\n            `${baseUrl}/v2/generate/status/${reqId}`,\n            {\n                headers: {\n                    apiKey: this.apiKey,\n                },\n            }\n        );\n        const resultsJson = await retrieveReq.data;\n        if (resultsJson.faulted) {\n            throw new Error(\"Something went wrong when generating the request\");\n        }\n        const promises: Promise<GenerationResult>[] =\n            resultsJson.generations.map(async (result: any) => {\n                if (result.censored) {\n                    return {\n                        censored: true,\n                    };\n                }\n                const webpImageResponse = await axios.get(result.img, {\n                    responseType: \"arraybuffer\",\n                });\n                return {\n                    imageData: Buffer.from(webpImageResponse.data),\n                    censored: false,\n                    seed: result.seed,\n                };\n            });\n        return Promise.all(promises);\n    }\n\n    async deleteImageRequest(reqId: string): Promise<void> {\n        await axios.delete(`${baseUrl}/v2/generate/status/${reqId}`, {\n            headers: {\n                apiKey: this.apiKey,\n            },\n        });\n        console.log(`Request with ID: ${reqId} has been deleted.`);\n    }\n\n    async initiateAlchemistImageInterrogation(\n        payload: AlchemistPayload\n    ): Promise<string> {\n        const submitReq = await axios.post(\n            `${baseUrl}/v2/interrogate/async`,\n            payload,\n            {\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                    apiKey: this.apiKey,\n                },\n            }\n        );\n        const submitResults = submitReq.data;\n        const reqId = submitResults.id;\n\n        return reqId;\n    }\n\n    async checkInterrogationStatus(reqId: string): Promise<string> {\n        const retrieveReq = await axios.get(\n            `${baseUrl}/v2/interrogate/status/${reqId}`,\n            {\n                headers: {\n                    apiKey: this.apiKey,\n                },\n            }\n        );\n        const resultsJson = await retrieveReq.data;\n        console.log(JSON.stringify(resultsJson));\n\n        return resultsJson.state;\n    }\n\n    async fetchInterrogationResult(reqId: string): Promise<any> {\n        const retrieveReq = await axios.get(\n            `${baseUrl}/v2/interrogate/status/${reqId}`,\n            {\n                headers: {\n                    apiKey: this.apiKey,\n                },\n            }\n        );\n        const resultsJson = await retrieveReq.data;\n        console.log(\"alchemy results: \" + JSON.stringify(resultsJson));\n        if (resultsJson.forms[0].result.nsfw !== undefined) {\n            return resultsJson.forms[0].result.nsfw;\n        }\n        const webpImageResponse = await axios.get(\n            resultsJson.forms[0].result[resultsJson.forms[0].form],\n            {\n                responseType: \"arraybuffer\",\n            }\n        );\n        return Buffer.from(webpImageResponse.data);\n    }\n\n    async deleteInterrogationRequest(reqId: string): Promise<void> {\n        await axios.delete(`${baseUrl}/v2/interrogate/status/${reqId}`, {\n            headers: {\n                apiKey: this.apiKey,\n            },\n        });\n        console.log(`Request with ID: ${reqId} has been deleted.`);\n    }\n}\n","import axios from \"axios\";\nimport { AIBrushApi } from \"../client\";\nimport { Rect } from \"../pages/image-editor/models\";\nimport { LocalImage } from \"./models\";\n\nconst anonymousClient = axios.create();\n\nexport interface SplitResult {\n    numTilesX: number;\n    numTilesY: number;\n    tileSize: number;\n    imageWidth: number;\n    imageHeight: number;\n    tiles: ImageData[][]; // [x][y]\n}\n\nexport function convertPNGToJPG(encodedImage: string): Promise<string> {\n    return new Promise((resolve, reject) => {\n        const image = new Image();\n        image.onload = () => {\n            const canvas = document.createElement(\"canvas\");\n            try {\n                canvas.width = image.width;\n                canvas.height = image.height;\n                const ctx = canvas.getContext(\"2d\");\n                if (!ctx) {\n                    throw new Error(\"Could not get canvas context\");\n                }\n                ctx.drawImage(image, 0, 0);\n                const dataUrl = canvas.toDataURL(\"image/jpeg\");\n                resolve(dataUrl.split(\",\")[1]);\n            } finally {\n                canvas.remove();\n            }\n        };\n        image.src = `data:image/png;base64,${encodedImage}`;\n    });\n}\n\nexport function loadImageDataElement(\n    image: LocalImage,\n): Promise<HTMLImageElement> {\n    return new Promise((resolve, reject) => {\n        const src = image.imageData!;\n        const imageElement = new Image();\n        imageElement.src = src;\n        imageElement.onload = () => {\n            resolve(imageElement);\n        };\n                    \n    });\n}\n\n// split image for individual upscales\nexport function splitImage(initImage: ImageData) {\n    // Check if the image area is larger than 512x512\n    if (initImage.width * initImage.height > 512 * 512) {\n        // use a temporary canvas to split the image\n        const canvas = document.createElement(\"canvas\");\n        try {\n            canvas.width = initImage.width;\n            canvas.height = initImage.height;\n            const ctx = canvas.getContext(\"2d\");\n            if (!ctx) {\n                throw new Error(\"Could not get canvas context\");\n            }\n            ctx.putImageData(initImage, 0, 0);\n            const tile_size = Math.min(initImage.width, initImage.height, 512);\n            // split the image into 512x512 tiles\n            // they need to overlap by at least 32 pixels\n            // so that the edges can be merged\n\n            // calculate the number of tiles in each dimension\n            const num_tiles_x = Math.ceil(initImage.width / (tile_size - 32));\n            const num_tiles_y = Math.ceil(initImage.height / (tile_size - 32));\n\n            const tiles: ImageData[][] = [];\n            for (let x = 0; x < num_tiles_x; x++) {\n                tiles.push([]);\n                for (let y = 0; y < num_tiles_y; y++) {\n                    // calculate the bounding box of the tile\n                    const x0 = x * (tile_size - 32);\n                    const y0 = y * (tile_size - 32);\n                    const x1 = Math.min(x0 + tile_size, initImage.width);\n                    const y1 = Math.min(y0 + tile_size, initImage.height);\n                    // crop the tile\n                    const tile = ctx.getImageData(x0, y0, x1 - x0, y1 - y0);\n                    tiles[x].push(tile);\n                }\n            }\n            return {\n                numTilesX: num_tiles_x,\n                numTilesY: num_tiles_y,\n                tileSize: tile_size,\n                imageWidth: initImage.width,\n                imageHeight: initImage.height,\n                tiles,\n            };\n        } finally {\n            canvas.remove();\n        }\n    } else {\n        return null;\n    }\n}\n\n// merge the tiles back into a single image\n// tiles should be 2x original size\nexport function mergeTiles(splitResult: SplitResult): ImageData {\n    // create a new image\n    const canvas = document.createElement(\"canvas\");\n    try {\n        canvas.width = splitResult.imageWidth;\n        canvas.height = splitResult.imageHeight;\n        const ctx = canvas.getContext(\"2d\");\n        if (!ctx) {\n            throw new Error(\"Could not get canvas context\");\n        }\n        for (let x = 0; x < splitResult.numTilesX; x++) {\n            for (let y = 0; y < splitResult.numTilesY; y++) {\n                // load the tile\n                const tile = splitResult.tiles[x][y];\n                const tileCanvas = imageDataToCanvas(tile);\n\n                // paste the tile into the new image\n                ctx.drawImage(\n                    tileCanvas,\n                    x * (splitResult.tileSize - 64),\n                    y * (splitResult.tileSize - 64)\n                );\n            }\n        }\n        return ctx.getImageData(\n            0,\n            0,\n            splitResult.imageWidth,\n            splitResult.imageHeight\n        );\n    } finally {\n        canvas.remove();\n    }\n}\n\nexport function imageDataToCanvas(imageData: ImageData): HTMLCanvasElement {\n    const canvas = document.createElement(\"canvas\");\n    canvas.width = imageData.width;\n    canvas.height = imageData.height;\n    const ctx = canvas.getContext(\"2d\");\n    if (!ctx) {\n        throw new Error(\"Could not get canvas context\");\n    }\n    ctx.putImageData(imageData, 0, 0);\n    return canvas;\n}\n\n// extract resizing logic from above function into a reusable resizeImage function\nexport function resizeImage(\n    image: HTMLCanvasElement,\n    width: number,\n    height: number\n): HTMLCanvasElement {\n    const canvas = document.createElement(\"canvas\");\n    try {\n        canvas.width = width;\n        canvas.height = height;\n        const ctx = canvas.getContext(\"2d\");\n        if (!ctx) {\n            throw new Error(\"Could not get canvas context\");\n        }\n        ctx.drawImage(image, 0, 0, width, height);\n        return canvas;\n    } finally {\n        image.remove();\n    }\n}\n\n// re-implement fixImageSize using resizeImage\nexport function fixImageSize(image: HTMLCanvasElement): HTMLCanvasElement {\n    // if the width and the height are divisible by 64, return the image data\n    // otherwise, resize up to the next multiple of 64\n    const width = Math.ceil(image.width / 64) * 64;\n    const height = Math.ceil(image.height / 64) * 64;\n    if (width == image.width && height == image.height) {\n        return image;\n    }\n    return resizeImage(image, width, height);\n}\n\nexport function featherEdges(\n    selectionOverlay: Rect,\n    imageWidth: number,\n    imageHeight: number,\n    imageData: ImageData,\n    featherWidth?: number\n) {\n    const featherLeftEdge = selectionOverlay.x != 0;\n    const featherRightEdge =\n        selectionOverlay.x + selectionOverlay.width != imageWidth;\n    const featherTopEdge = selectionOverlay.y != 0;\n    const featherBottomEdge =\n        selectionOverlay.y + selectionOverlay.height != imageHeight;\n\n    const baseWidth = Math.min(selectionOverlay.width, selectionOverlay.height);\n    if (!featherWidth) {\n        featherWidth = Math.floor(baseWidth / 8);\n    }\n\n    if (featherTopEdge) {\n        for (let y = 0; y < featherWidth; y++) {\n            for (let x = 0; x < selectionOverlay.width; x++) {\n                const pixelIndex = (y * selectionOverlay.width + x) * 4;\n                const alpha = (y / featherWidth) * 255;\n                const existingAlpha = imageData.data[pixelIndex + 3];\n                imageData.data[pixelIndex + 3] = Math.min(alpha, existingAlpha);\n            }\n        }\n    }\n    if (featherBottomEdge) {\n        for (\n            let y = selectionOverlay.height - featherWidth;\n            y < selectionOverlay.height;\n            y++\n        ) {\n            for (let x = 0; x < selectionOverlay.width; x++) {\n                const pixelIndex = (y * selectionOverlay.width + x) * 4;\n                const alpha =\n                    ((selectionOverlay.height - y) / featherWidth) * 255;\n                const existingAlpha = imageData.data[pixelIndex + 3];\n                imageData.data[pixelIndex + 3] = Math.min(alpha, existingAlpha);\n            }\n        }\n    }\n    if (featherLeftEdge) {\n        for (let x = 0; x < featherWidth; x++) {\n            for (let y = 0; y < selectionOverlay.height; y++) {\n                const pixelIndex = (y * selectionOverlay.width + x) * 4;\n                const alpha = (x / featherWidth) * 255;\n                const existingAlpha = imageData.data[pixelIndex + 3];\n                imageData.data[pixelIndex + 3] = Math.min(alpha, existingAlpha);\n            }\n        }\n    }\n    if (featherRightEdge) {\n        for (\n            let x = selectionOverlay.width - featherWidth;\n            x < selectionOverlay.width;\n            x++\n        ) {\n            for (let y = 0; y < selectionOverlay.height; y++) {\n                const pixelIndex = (y * selectionOverlay.width + x) * 4;\n                const alpha =\n                    ((selectionOverlay.width - x) / featherWidth) * 255;\n                const existingAlpha = imageData.data[pixelIndex + 3];\n                imageData.data[pixelIndex + 3] = Math.min(alpha, existingAlpha);\n            }\n        }\n    }\n}\n\nexport function applyAlphaMask(imageData: ImageData, alphaMask: ImageData) {\n    if (\n        imageData.width != alphaMask.width ||\n        imageData.height != alphaMask.height\n    ) {\n        throw new Error(\"imageData and alphaMask are not the same size\");\n    }\n    const spread = 10;\n    for (let x = 0; x < imageData.width; x++) {\n        for (let y = 0; y < imageData.height; y++) {\n            // r, g, b, a\n            // if transparency within 10 pixels, set alpha to 1, otherwise to zero.\n            // binary alpha inversion with spread\n            let alpha = false;\n            for (\n                let x2 = Math.max(0, x - spread);\n                x2 < Math.min(imageData.width, x + spread);\n                x2++\n            ) {\n                for (\n                    let y2 = Math.max(0, y - spread);\n                    y2 < Math.min(imageData.height, y + spread);\n                    y2++\n                ) {\n                    const alphaValue =\n                        alphaMask.data[y2 * alphaMask.width * 4 + x2 * 4 + 3];\n                    if (alphaValue < 255) {\n                        alpha = true;\n                    }\n                }\n            }\n            const alphaIndex = y * imageData.width * 4 + x * 4 + 3;\n            if (alpha) {\n                imageData.data[alphaIndex] = 255;\n            } else {\n                imageData.data[alphaIndex] = 0;\n            }\n        }\n    }\n}\n\nexport function createBlankImage(\n    color: string,\n    width: number,\n    height: number\n): string {\n    const canvas = document.createElement(\"canvas\");\n    try {\n        canvas.width = width;\n        canvas.height = height;\n        const context = canvas.getContext(\"2d\")!;\n        context.fillStyle = color;\n        context.fillRect(0, 0, width, height);\n        return canvas.toDataURL().split(\",\")[1];\n    } finally {\n        canvas.remove();\n    }\n}\n\nexport interface ImageWorkerRequest {\n    id: string;\n    feather: boolean;\n    upscale?: boolean;\n    alphaMode: \"none\" | \"mask\" | \"alpha\";\n    pixels: Uint8ClampedArray;\n    alphaPixels?: Uint8ClampedArray;\n    width: number;\n    height: number;\n    featherWidth?: number;\n    selectionOverlay: Rect;\n}\n\nexport interface ImageWorkerResponse {\n    id: string;\n    pixels: Uint8ClampedArray;\n}\n\nexport class ImageUtilWorker {\n    private workers: Array<Worker> = [];\n    private callbacks: { [key: string]: (event: MessageEvent) => void } = {};\n    private cursor = 0;\n\n    constructor(numWorkers = 3) {\n        for (let i = 0; i < numWorkers; i++) {\n            this.workers[i] = new Worker(\n                `${process.env.PUBLIC_URL}/workers/imageutil.js`\n            );\n            this.workers[i].addEventListener(\n                \"message\",\n                this.onMessage.bind(this)\n            );\n        }\n    }\n\n    onMessage(event: MessageEvent) {\n        const resp = event.data as ImageWorkerResponse;\n        this.callbacks[resp.id](event);\n        delete this.callbacks[resp.id];\n    }\n\n    async processRequest(\n        request: ImageWorkerRequest\n    ): Promise<ImageWorkerResponse> {\n        return new Promise((resolve, reject) => {\n            this.callbacks[request.id] = (event) => {\n                resolve(event.data);\n            };\n            this.workers[this.cursor].postMessage({\n                ...request,\n            });\n            this.cursor = (this.cursor + 1) % this.workers.length;\n        });\n    }\n\n    destroy() {\n        for (let key in this.workers) {\n            this.workers[key].terminate();\n        }\n    }\n}\n\nexport function createEncodedThumbnail(encodedImage: string): Promise<string> {\n    return new Promise((resolve, reject) => {\n        // use html5 canvas\n        // crop to square aspect ratio on 128x128 canvas\n        const canvas = document.createElement(\"canvas\");\n        const thumbSize = 128;\n        canvas.width = thumbSize;\n        canvas.height = thumbSize;\n\n        const image = new Image();\n        image.src = `data:image/png;base64,${encodedImage}`;\n        image.onload = () => {\n            const context = canvas.getContext(\"2d\");\n            if (!context) {\n                reject(new Error(\"Could not create canvas context\"));\n                return;\n            }\n\n            let cropX, cropY, cropDimension;\n            if (image.width > image.height) {\n                cropDimension = image.height;\n                cropX = (image.width - image.height) / 2;\n                cropY = 0;\n            } else {\n                cropDimension = image.width;\n                cropX = 0;\n                cropY = (image.height - image.width) / 2;\n            }\n\n            // Draw the image onto the canvas\n            context.drawImage(\n                image,           // Source image\n                cropX,           // Source x\n                cropY,           // Source y\n                cropDimension,   // Source width\n                cropDimension,   // Source height\n                0,               // Destination x\n                0,               // Destination y\n                thumbSize,       // Destination width\n                thumbSize        // Destination height\n            );\n\n            // Save to png\n            const imageUrl = canvas.toDataURL(\"image/png\");\n            const base64 = imageUrl.split(\",\")[1];\n            resolve(base64);\n        };\n\n        image.onerror = (error) => {\n            reject(error);\n        };\n    });\n}\n\n\nexport function decodeImage(encodedImage: string): Promise<HTMLImageElement> {\n    return new Promise((resolve, reject) => {\n        const image = new Image();\n        if (!encodedImage.startsWith(\"data:image\")) {\n            encodedImage = `data:image/png;base64,${encodedImage}`;\n        }\n        image.src = encodedImage;\n        image.onload = () => {\n            resolve(image);\n        };\n    });\n}\n\nexport function binaryImageToDataBase64(binaryImage: any): string {\n    const buf = Buffer.from(binaryImage, \"binary\");\n    return buf.toString(\"base64\");\n}\n\nexport function resizeEncodedImage(\n    encodedImage: string,\n    width: number,\n    height: number,\n    format: \"png\" | \"jpeg\"\n): Promise<string> {\n    return new Promise((resolve, reject) => {\n        // use html5 canvas\n        // crop to square aspect ratio on 128x128 canvas\n        const canvas = document.createElement(\"canvas\");\n        canvas.width = width;\n        canvas.height = height;\n\n        const image = new Image();\n        image.src = `data:image/${format};base64,${encodedImage}`;\n        image.onload = () => {\n            const context = canvas.getContext(\"2d\");\n            if (!context) {\n                throw new Error(\"Could not create canvas context\");\n            }\n            canvas.width = width;\n            canvas.height = height;\n\n            context.drawImage(\n                image,\n                0,\n                0,\n                image.width,\n                image.height,\n                0,\n                0,\n                width,\n                height\n            );\n\n            // save to png\n            const imageUrl = canvas.toDataURL(\"image/${format}\");\n            const base64 = imageUrl.split(\",\")[1];\n            resolve(base64);\n        };\n    });\n}\n\nexport function encodedImageToBlob(encodedImage: string): Blob {\n    const binaryString = atob(encodedImage);\n    const arr = [];\n    for (let i = 0; i < binaryString.length; i++) {\n        arr.push(binaryString.charCodeAt(i));\n    }\n    return new Blob([new Uint8Array(arr)], {\n        type: \"image/png\",\n    });\n}\n\n// This function is made to work with S3 presigned urls.\n// Solution found at https://stackoverflow.com/questions/22531114/how-to-upload-to-aws-s3-directly-from-browser-using-a-pre-signed-url-instead-of\nexport function uploadBlob(signedUrl: string, blob: Blob): Promise<void> {\n    return new Promise((resolve, reject) => {\n        var xhr = new XMLHttpRequest();\n        xhr.open(\"PUT\", signedUrl, true);\n        xhr.setRequestHeader(\"Content-Type\", \"image/png\");\n        xhr.onload = () => {\n            if (xhr.status < 400) {\n                // success!\n                resolve();\n            }\n        };\n        xhr.onerror = (err) => {\n            // error...\n            reject(err);\n        };\n        xhr.send(blob); // `file` is a File object here\n    });\n}\n","export class RecentList {\n\n    private key: string;\n    private listSize: number;\n\n    constructor(key: string, listSize: number) {\n        this.key = key;\n        this.listSize = listSize;\n    }\n\n    private getRecentItems(): string[] {\n        const modelsJson = localStorage.getItem(this.key);\n        return modelsJson ? JSON.parse(modelsJson) : [];\n    }\n\n    private saveRecentItems(models: string[]): void {\n        localStorage.setItem(this.key, JSON.stringify(models));\n    }\n\n    addItem(model: string): (string | undefined) {\n        const recentModels = this.getRecentItems();\n        const modelIndex = recentModels.indexOf(model);\n\n        if (modelIndex !== -1) {\n            recentModels.splice(modelIndex, 1);\n        }\n\n        recentModels.unshift(model);\n\n        let removed: string | undefined;\n        if (recentModels.length > this.listSize) {\n            removed = recentModels.pop();\n        }\n\n        this.saveRecentItems(recentModels);\n        return removed;\n    }\n\n    getItems(): string[] {\n        return this.getRecentItems();\n    }\n\n    clear() {\n        this.saveRecentItems([]);\n    }\n}\n\nexport const recentModels = new RecentList(\"recent-models\", 20);\nexport const recentNegativePrompts = new RecentList(\"recent-negative-prompts\", 20);\nexport const recentPrompts = new RecentList(\"recent-positive-prompts\", 20);\nexport const recentLoras = new RecentList(\"recent-loras\", 200);","import { Renderer } from \"./renderer\";\n\nexport class ZoomHelper {\n\n    private startTouches: React.TouchList | null;\n    private startZoom = 1;\n    private startOffsetX = 0;\n    private startOffsetY = 0;\n\n    constructor(private renderer: Renderer) {\n        this.startTouches = null;\n    }\n\n    onWheel(event: WheelEvent) {\n        const originalZoom = this.renderer.getZoom();\n        let zoom = this.renderer.getZoom();\n        let offsetX = this.renderer.getOffsetX();\n        let offsetY = this.renderer.getOffsetY();\n\n        let canvasPoint = this.translateMouseToCanvasCoordinates(\n            event.offsetX,\n            event.offsetY\n        );\n        // console.log(\"x: \" + x + \", y: \" + y);\n        \n        if (event.deltaY < 0) {\n            zoom += 0.1 * zoom;\n        } else {\n            zoom -= 0.1 * zoom;\n        }\n        zoom = Math.max(0.1, Math.min(zoom, 8.0));\n\n        let xDiff = canvasPoint.x - -offsetX;\n        let yDiff = canvasPoint.y - -offsetY;\n\n        // offsetX = canvasPoint.x - xDiff * (zoom / originalZoom);\n        // offsetY = canvasPoint.y - yDiff * (zoom / originalZoom);\n        offsetX -= xDiff * (zoom / originalZoom) - xDiff;\n        offsetY -= yDiff * (zoom / originalZoom) - yDiff;\n\n        this.renderer.updateZoomAndOffset(zoom, offsetX, offsetY);\n    }\n\n    onPan(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        let movementX = event.movementX;\n        let movementY = event.movementY;\n        // translate offset to canvas coordinates\n        let rect = (\n            event.target as HTMLCanvasElement\n        ).getBoundingClientRect();\n        movementX = (movementX / rect.width) * this.renderer.getCanvas().width;\n        movementY = (movementY / rect.height) * this.renderer.getCanvas().height;\n\n        let zoom = this.renderer.getZoom();\n        let offsetX = this.renderer.getOffsetX();\n        let offsetY = this.renderer.getOffsetY();\n\n        offsetX += movementX / zoom;\n        offsetY += movementY / zoom;\n\n        this.renderer.updateZoomAndOffset(zoom, offsetX, offsetY);\n    }\n\n    onTouchStart(event: React.TouchEvent<HTMLCanvasElement>) {\n        if (event.touches.length === 2) {\n            this.startTouches = event.touches;\n            this.startZoom = this.renderer.getZoom();\n            this.startOffsetX = this.renderer.getOffsetX();\n            this.startOffsetY = this.renderer.getOffsetY();\n        }\n    }\n\n    onTouchMove(event: React.TouchEvent<HTMLCanvasElement>) {\n        if (this.startTouches) {\n            const canvasRect = this.renderer.getCanvas().getBoundingClientRect();\n            const startTouch1 = this.startTouches[0];\n            const startTouch2 = this.startTouches[1];\n            const touch1 = event.touches[0];\n            const touch2 = event.touches[1];\n\n            const startDistance = Math.sqrt(\n                Math.pow(startTouch1.clientX - startTouch2.clientX, 2) +\n                Math.pow(startTouch1.clientY - startTouch2.clientY, 2)\n            );\n            const distance = Math.sqrt(\n                Math.pow(touch1.clientX - touch2.clientX, 2) +\n                Math.pow(touch1.clientY - touch2.clientY, 2)\n            );\n            const zoom = this.startZoom * (distance / startDistance);\n\n            const startCenterX = (startTouch1.clientX + startTouch2.clientX) / 2;\n            const startCenterY = (startTouch1.clientY + startTouch2.clientY) / 2;\n            const centerX = (touch1.clientX + touch2.clientX) / 2;\n            const centerY = (touch1.clientY + touch2.clientY) / 2;\n\n            const startCanvasPoint = this.translateMouseToCanvasCoordinates(\n                startCenterX - canvasRect.left,\n                startCenterY - canvasRect.top\n            );\n            const canvasPoint = this.translateMouseToCanvasCoordinates(\n                centerX - canvasRect.left,\n                centerY - canvasRect.top\n            );\n\n            let offsetX = this.startOffsetX;\n            let offsetY = this.startOffsetY;\n\n            let xDiff = canvasPoint.x - startCanvasPoint.x;\n            let yDiff = canvasPoint.y - startCanvasPoint.y;\n\n            let xDiff2 = canvasPoint.x - -this.renderer.getOffsetX();\n            let yDiff2 = canvasPoint.y - -this.renderer.getOffsetY();\n\n            offsetX -= xDiff2 * (zoom / this.startZoom) - xDiff2 - (xDiff * (distance / startDistance));\n            offsetY -= yDiff2 * (zoom / this.startZoom) - yDiff2 - (yDiff * (distance / startDistance));\n\n            this.renderer.updateZoomAndOffset(zoom, offsetX, offsetY);\n        }\n    }\n\n    onTouchEnd(event: React.TouchEvent<HTMLCanvasElement>) {\n        this.startTouches = null;\n    }\n\n\n    translateMouseToCanvasCoordinates(mouseX: number, mouseY: number, zoom?: number, offsetX?: number, offsetY?: number) {\n        let x = mouseX;\n        let y = mouseY;\n        // adjust for zoom\n        zoom = zoom || this.renderer.getZoom();\n        offsetX = offsetX || this.renderer.getOffsetX();\n        offsetY = offsetY || this.renderer.getOffsetY();\n        x = x / zoom;\n        y = y / zoom;\n\n        // translate offset to canvas coordinates\n        let rect = this.renderer.getCanvas().getBoundingClientRect();\n\n        // x = (x / rect.width) * this.renderer.getWidth();\n        // y = (y / rect.height) * this.renderer.getHeight();\n\n        x = (x / rect.width) * this.renderer.getCanvas().width;\n        y = (y / rect.height) * this.renderer.getCanvas().height;\n\n        x = Math.round(x - offsetX);\n        y = Math.round(y - offsetY);\n\n        return { x: x, y: y };\n    }\n\n    translateCanvasToMouseCoordinates(x: number, y: number, zoom?: number, offsetX?: number, offsetY?: number) {\n        zoom = zoom || this.renderer.getZoom();\n        offsetX = offsetX || this.renderer.getOffsetX();\n        offsetY = offsetY || this.renderer.getOffsetY();\n        x = x + offsetX;\n        y = y + offsetY;\n        x = x * zoom;\n        y = y * zoom;\n\n        // translate offset to canvas coordinates\n        let rect = this.renderer.getCanvas().getBoundingClientRect();\n        x = Math.round((x / this.renderer.getWidth()) * rect.width);\n        y = Math.round((y / this.renderer.getHeight()) * rect.height);\n\n        return { x: x, y: y };\n    }\n}","import React from \"react\";\nimport { Renderer } from \"./renderer\";\nimport { ZoomHelper } from \"./zoomHelper\";\n\nexport interface Tool {\n    name: string;\n    getArgs(): any;\n    updateArgs(args: any): void;\n    onMouseDown(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>): void;\n    onMouseMove(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>): void;\n    onMouseUp(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>): void;\n    onMouseLeave(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>): void;\n\n    onTouchStart(event: React.TouchEvent<HTMLCanvasElement>): void;\n    onTouchMove(event: React.TouchEvent<HTMLCanvasElement>): void;\n    onTouchEnd(event: React.TouchEvent<HTMLCanvasElement>): void;\n\n    onKeyDown(event: KeyboardEvent): void;\n    onKeyUp(event: KeyboardEvent): void;\n    onWheel(event: WheelEvent): void;\n    destroy(): boolean;\n    onShowSelectionControls(listener: (show: boolean) => void): void;\n    select(direction: \"left\" | \"right\"): void;\n    onSaveImage(listener: (encodedImage: string) => void): void;\n}\n\nexport class BaseTool implements Tool {\n    saveListener?: (encodedImage: string, args?: any) => void = () => {};\n\n    private touchHandle: number | undefined;\n\n    readonly zoomHelper: ZoomHelper;\n\n    private _pinchZooming = false;\n    private _panning = false;\n\n    constructor(readonly renderer: Renderer, readonly name: string) {\n        this.zoomHelper = new ZoomHelper(renderer);\n    }\n\n    getArgs(): any {\n        return JSON.parse(\n            localStorage.getItem(`tool_args_${this.name}`) || \"{}\"\n        );\n    }\n    updateArgs(args: any) {\n        localStorage.setItem(`tool_args_${this.name}`, JSON.stringify(args));\n    }\n    onMouseDown(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        if (event.button === 1) {\n            this._panning = true;\n        }\n    }\n    onMouseMove(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        if (this._panning) {\n            this.zoomHelper.onPan(event);\n        }\n        let { x, y } = this.zoomHelper.translateMouseToCanvasCoordinates(\n            event.nativeEvent.offsetX,\n            event.nativeEvent.offsetY\n        );\n        this._updateCursor(x, y);\n    }\n\n    private _updateCursor(x: number, y: number) {\n        this.renderer.setCursor({\n            color: \"white\",\n            radius: 10,\n            type: \"crosshairs\",\n            x,\n            y,\n        });\n    }\n\n    onMouseUp(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        if (this._panning) {\n            this._panning = false;\n        }\n    }\n    onMouseLeave(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {}\n\n    onTouchStart(event: React.TouchEvent<HTMLCanvasElement>) {\n        if (this.touchHandle) {\n            window.clearTimeout(this.touchHandle);\n        }\n        const touches: React.Touch[] = [];\n        // make a deep copy so that the values live past the delay\n        for (let i = 0; i < event.touches.length; i++) {\n            const touch = event.touches[i];\n            touches.push({\n                identifier: touch.identifier,\n                clientX: touch.clientX,\n                clientY: touch.clientY,\n                pageX: touch.pageX,\n                pageY: touch.pageY,\n                screenX: touch.screenX,\n                screenY: touch.screenY,\n                target: null,\n            } as any);\n        }\n        event = {\n            touches,\n        } as any;\n        this.touchHandle = window.setTimeout(() => {\n            this.touchHandle = undefined;\n            if (event.touches.length === 2) {\n                this._pinchZooming = true;\n                this.zoomHelper.onTouchStart(event);\n            } else {\n                const rect = this.renderer.getCanvas().getBoundingClientRect();\n                const touch = event.touches[0];\n                if (touch) {\n                    this.onMouseDown({\n                        type: \"touch\",\n                        button: 0,\n                        nativeEvent: {\n                            offsetX: touch.clientX - rect.left,\n                            offsetY: touch.clientY - rect.top,\n                        },\n                    } as any);\n                }\n            }\n        }, 200);\n    }\n    onTouchMove(event: React.TouchEvent<HTMLCanvasElement>) {\n        if (event.touches.length === 2) {\n            this.zoomHelper.onTouchMove(event);\n        } else {\n            const rect = this.renderer.getCanvas().getBoundingClientRect();\n            const touch = event.touches[0];\n            if (touch) {\n                this.onMouseMove({\n                    type: \"touch\",\n                    button: 0,\n                    nativeEvent: {\n                        offsetX: touch.clientX - rect.left,\n                        offsetY: touch.clientY - rect.top,\n                    },\n                } as any);\n            }\n        }\n    }\n    onTouchEnd(event: React.TouchEvent<HTMLCanvasElement>) {\n        if (this._pinchZooming) {\n            this._pinchZooming = false;\n            this.zoomHelper.onTouchEnd(event);\n        } else {\n            this.onMouseUp({\n                button: 0,\n                type: \"touch\",\n            } as any);\n        }\n    }\n\n    onKeyDown(event: KeyboardEvent) {}\n    onKeyUp(event: KeyboardEvent) {}\n    onWheel(event: WheelEvent) {\n        this.zoomHelper.onWheel(event);\n    }\n    destroy(): boolean {\n        return true;\n    }\n    onShowSelectionControls(listener: (show: boolean) => void) {}\n    select(direction: \"left\" | \"right\") {}\n    onSaveImage(listener: (encodedImage: string) => void) {\n        this.saveListener = listener;\n    }\n}\n","import moment from \"moment\";\n\nimport { LocalImage } from \"./models\";\n\n/**\n * This class uses indexedDB to store images locally.\n */\nexport class LocalImagesStore {\n    private db: IDBDatabase | null = null;\n\n    init(): Promise<void> {\n        return new Promise((resolve, reject) => {\n            const request = indexedDB.open(\"aibrush\", 4);\n            request.onupgradeneeded = (evt) => {\n                const db = request.result;\n                // create object store if it doesn't exist\n                // const imagesStore = db.createObjectStore(\"images\", { keyPath: \"id\" });\n                let imagesStore: IDBObjectStore;\n                if (!db.objectStoreNames.contains(\"images\")) {\n                    imagesStore = db.createObjectStore(\"images\", {\n                        keyPath: \"id\",\n                    });\n                } else {\n                    imagesStore = request.transaction?.objectStore(\n                        \"images\"\n                    ) as IDBObjectStore;\n                }\n                imagesStore.createIndex(\"updated_at\", \"updated_at\", {\n                    unique: false,\n                });\n                imagesStore.createIndex(\"deleted_at\", \"deleted_at\", {\n                    unique: false,\n                });\n                console.log(\"Local images store updated\");\n            };\n            request.onsuccess = (_) => {\n                this.db = request.result;\n                console.log(\"Local images store initialized\");\n                resolve();\n            };\n            request.onerror = (evt) => {\n                console.error(\"error opening indexeddb\", evt);\n                reject(evt);\n            };\n        });\n    }\n\n    // migrate old images to new format\n    private hydrateImage(image: LocalImage): LocalImage {\n        if (!image) {\n            return image;\n        }\n        if (!image.params) {\n            const legacyImage = image as any;\n            image.params = {\n                prompt: legacyImage.phrases.join(\", \"),\n                negative_prompt: legacyImage.negative_phrases.join(\", \"),\n                width: legacyImage.width,\n                height: legacyImage.height,\n                denoising_strength: legacyImage.stable_diffusion_strength,\n                steps: legacyImage.iterations,\n            }\n        }\n        return image;\n    }\n\n    async getImage(id: string): Promise<LocalImage | null> {\n        if (!this.db) {\n            throw new Error(\"not initialized\");\n        }\n        const transaction = this.db.transaction([\"images\"]);\n        const store = transaction.objectStore(\"images\");\n        const request = store.get(id);\n        return new Promise((resolve, reject) => {\n            request.onsuccess = (evt) => {\n                resolve(this.hydrateImage(request.result));\n            };\n            request.onerror = (evt) => {\n                console.error(\"error getting image\", evt);\n                reject(evt);\n            };\n        });\n    }\n\n    async saveImage(image: LocalImage): Promise<void> {\n        if (!this.db) {\n            throw new Error(\"not initialized\");\n        }\n        await this.cleanupDeletedImages();\n        const transaction = this.db.transaction([\"images\"], \"readwrite\");\n        const store = transaction.objectStore(\"images\");\n        const request = store.put({\n            ...image,\n            updated_at: moment().valueOf(),\n        });\n        return new Promise((resolve, reject) => {\n            request.onsuccess = (evt) => {\n                resolve();\n            };\n            request.onerror = (evt) => {\n                console.error(\"error saving image\", evt);\n                reject(evt);\n            };\n        });\n    }\n\n    async hardDeleteImage(id: string): Promise<void> {\n        if (!this.db) {\n            throw new Error(\"not initialized\");\n        }\n        const transaction = this.db.transaction([\"images\"], \"readwrite\");\n        const store = transaction.objectStore(\"images\");\n        const request = store.delete(id);\n        return new Promise((resolve, reject) => {\n            request.onsuccess = (evt) => {\n                console.log(`image ${id} permanently deleted`);\n                resolve();\n            };\n            request.onerror = (evt) => {\n                console.error(\"error deleting image\", evt);\n                reject(evt);\n            };\n        });\n    }\n\n    async deleteImage(id: string): Promise<void> {\n        if (!this.db) {\n            throw new Error(\"not initialized\");\n        }\n        // fetch the image first. If it has a deletedAt timestamp already, or if it's not\n        // in \"completed\" state, hard delete it. Otherwise, set the deletedAt timestamp.\n        const image = await this.getImage(id);\n        if (!image) {\n            console.error(\"image not found\", id);\n            return;\n        }\n        if (image.deleted_at || image.status !== \"completed\") {\n            return this.hardDeleteImage(id);\n        }\n        const transaction = this.db.transaction([\"images\"], \"readwrite\");\n        const store = transaction.objectStore(\"images\");\n        const request = store.put({\n            ...image,\n            deleted_at: moment().valueOf(),\n        });\n        return new Promise((resolve, reject) => {\n            request.onsuccess = (evt) => {\n                resolve();\n            };\n            request.onerror = (evt) => {\n                console.error(\"error deleting image\", evt);\n                reject(evt);\n            };\n        });\n    }\n\n    async listImages(\n        updated_at: number,\n        direction: IDBCursorDirection,\n        count: number,\n        search: string\n    ): Promise<LocalImage[]> {\n        // use updated_at index\n        if (!this.db) {\n            throw new Error(\"not initialized\");\n        }\n        const transaction = this.db.transaction([\"images\"]);\n        const store = transaction.objectStore(\"images\");\n        const index = store.index(\"updated_at\");\n        const range =\n            direction == \"next\"\n                ? IDBKeyRange.lowerBound(updated_at)\n                : IDBKeyRange.upperBound(updated_at);\n        const request = index.openCursor(range, direction);\n        return new Promise((resolve, reject) => {\n            const images: LocalImage[] = [];\n            request.onsuccess = (evt) => {\n                const cursor = request.result;\n                if (cursor) {\n                    const image: LocalImage = this.hydrateImage(cursor.value);\n                    const prompt = (image.params.prompt || \"\").toLowerCase();\n                    if (\n                        !image.deleted_at &&\n                        (!search || prompt.includes(search.toLowerCase()))\n                    ) {\n                        images.push(image);\n                    }\n                    if (images.length < count) {\n                        cursor.continue();\n                    } else {\n                        resolve(images);\n                    }\n                } else {\n                    resolve(images);\n                }\n            };\n            request.onerror = (evt) => {\n                console.error(\"error listing images\", evt);\n                reject(evt);\n            };\n        });\n    }\n\n    async clearImages(): Promise<void> {\n        // clear from both indexes\n        if (!this.db) {\n            throw new Error(\"not initialized\");\n        }\n        const transaction = this.db.transaction([\"images\"], \"readwrite\");\n        const imagesStore = transaction.objectStore(\"images\");\n        const imagesRequest = imagesStore.clear();\n        return new Promise((resolve, reject) => {\n            imagesRequest.onsuccess = (evt) => {\n                resolve();\n            };\n            imagesRequest.onerror = (evt) => {\n                console.error(\"error clearing images\", evt);\n                reject(evt);\n            };\n        });\n    }\n\n    async getDeletedImages(olderThan?: number): Promise<LocalImage[]> {\n        if (!this.db) {\n            throw new Error(\"not initialized\");\n        }\n        // refactor to use deleted_at index\n        const transaction = this.db.transaction([\"images\"]);\n        const store = transaction.objectStore(\"images\");\n        const index = store.index(\"deleted_at\");\n        // const request = index.openCursor();\n        // get cursor for all deleted_at values\n        const request = index.openCursor(\n            olderThan\n                ? IDBKeyRange.upperBound(olderThan)\n                : IDBKeyRange.lowerBound(1),\n            olderThan ? \"prev\" : \"next\"\n        );\n        return new Promise((resolve, reject) => {\n            const images: LocalImage[] = [];\n            request.onsuccess = (evt) => {\n                const cursor = request.result;\n                if (cursor) {\n                    const image: LocalImage = cursor.value;\n                    if (images.length < 50 && image.deleted_at) {\n                        images.push(cursor.value);\n                    }\n                    cursor.continue();\n                } else {\n                    resolve(images);\n                }\n            };\n            request.onerror = (evt) => {\n                console.error(\"error listing images\", evt);\n                reject(evt);\n            };\n        });\n    }\n\n    async clearDeletedImages(): Promise<void> {\n        if (!this.db) {\n            throw new Error(\"not initialized\");\n        }\n        let deletedImages = await this.getDeletedImages();\n        while (deletedImages.length > 0) {\n            // hard delete all deleted images\n            const promises = deletedImages.map((image) => {\n                return this.hardDeleteImage(image.id);\n            });\n            await Promise.all(promises);\n            deletedImages = await this.getDeletedImages();\n        }\n    }\n\n    async cleanupDeletedImages(): Promise<void> {\n        // delete images that are more than 1 day old\n        let deletedImages = await this.getDeletedImages(\n            moment().subtract(1, \"hours\").valueOf()\n        );\n        while (deletedImages.length > 0) {\n            // hard delete all deleted images\n            const promises = deletedImages.map((image) => {\n                return this.hardDeleteImage(image.id);\n            });\n            await Promise.all(promises);\n            deletedImages = await this.getDeletedImages(\n                moment().subtract(1, \"hours\").valueOf()\n            );\n        }\n    }\n}\n","// Login react component with hooks\nimport React, { useState, FC } from \"react\";\nimport * as axios from \"axios\";\nimport qs from \"qs\";\nimport { AIBrushApi, LoginResult } from \"../client/api\";\n\nconsole.log(process.env)\nconst DISCORD_CLIENT_ID = \"1043951225944678490\";\n\ninterface LoginProps {\n    client: AIBrushApi;\n    onLogin: (loginResult: LoginResult) => void;\n}\n\nexport const Login: FC<LoginProps> = (props) => {\n    // login form accepts email only\n    const [email, setEmail] = useState(\"\");\n    const [emailSubmitted, setEmailSubmitted] = useState(false);\n    const [code, setCode] = useState(\"\");\n    const [err, setErr] = useState(\"\");\n\n    // check query string for invite_code\n    const query = window.location.search;\n    const queryParams = qs.parse(query.substring(1));\n    const inviteCode = queryParams[\"invite_code\"];\n\n    const onLogin = async () => {\n        // clear error\n        setErr(\"\");\n        // validate valid email\n        if (!email.match(/^[^@]+@[^@]+\\.[^@]+$/)) {\n            setErr(\"Invalid email address\");\n            return;\n        }\n\n        try {\n            await props.client.login({\n                email: email,\n                invite_code: inviteCode as string,\n            });\n            setEmailSubmitted(true);\n        } catch (err) {\n            console.error(err);\n            setErr(\"Could not login\");\n        }\n    };\n\n    const discordLink = () => {\n        // localhost url:\n        // https://discord.com/api/oauth2/authorize?client_id=1043951225944678490&redirect_uri=http%3A%2F%2Flocalhost%3A3001%2Fdiscord-login&response_type=code&scope=identify%20email\n        // prod url:\n        // https://discord.com/api/oauth2/authorize?client_id=1043951225944678490&redirect_uri=https%3A%2F%2Fwww.aibrush.art%2Fdiscord-login&response_type=code&scope=identify%20email\n        const host = window.location.host;\n        const protocol = window.location.protocol;\n        const redirectUri = `${protocol}//${host}/discord-login`;\n        const url = `https://discord.com/api/oauth2/authorize?client_id=${DISCORD_CLIENT_ID}&redirect_uri=${redirectUri}&response_type=code&scope=identify%20email`;\n        return url;\n    };\n\n    const onVerify = async () => {\n        // clear error\n        setErr(\"\");\n        // attempt to verify code\n        try {\n            const result = await props.client.verify({\n                email,\n                code,\n            });\n            props.onLogin(result.data);\n        } catch (err) {\n            console.error(err);\n            setErr(\"Failed to verify code\");\n        }\n    };\n\n    // bootstrap login form\n    return (\n        <>\n            <div\n                className=\"row\"\n                style={{\n                    height: \"100vh\",\n                    marginLeft: \"0px\",\n                    marginRight: \"0px\",\n                }}\n            >\n                <div className=\"col-md-6 login-splash\">\n                    {/* <div className=\"center-cropped\" style={{backgroundImage: \"url(/images/scifi-dreamland.png)\"}}></div> */}\n                    <img\n                        className=\"center-cropped\"\n                        src=\"/images/scifi-dreamland.png\"\n                    />\n                </div>\n                <div className=\"col-md-6\">\n                    <div\n                        style={{\n                            fontWeight: 500,\n                            fontSize: \"48px\",\n                            marginTop: \"200px\",\n                        }}\n                    >\n                        AiBrush\n                    </div>\n\n                    <div\n                        style={{\n                            marginLeft: \"10%\",\n                            marginRight: \"10%\",\n                            marginTop: \"88px\",\n                            marginBottom: \"24px\",\n                        }}\n                    >\n                        Login With Email\n                    </div>\n                    {/* Display error if one is set */}\n                    {/* Use <p class=\"text-danger\" */}\n                    {err && <p className=\"text-danger\">{err}</p>}\n                    {err && (\n                        <p className=\"text-info\">\n                            If you don't have an account yet, request one by\n                            sending an email to{\" \"}\n                            <a href=\"mailto:admin@aibrush.art\">\n                                admin@aibrush.art\n                            </a>\n                        </p>\n                    )}\n                    <div\n                        style={{\n                            marginLeft: \"10%\",\n                            marginRight: \"10%\",\n                            marginTop: \"24px\",\n                            textAlign: \"left\",\n                        }}\n                    >\n                        {/* If email submitted, show verify code form*/}\n                        {emailSubmitted && (\n                            <>\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"verifyCode\">\n                                        Verify Code\n                                    </label>\n                                    <input\n                                        type=\"text\"\n                                        className=\"form-control\"\n                                        id=\"verifyCode\"\n                                        placeholder=\"Verification Code\"\n                                        value={code}\n                                        onChange={(e) =>\n                                            setCode(e.target.value)\n                                        }\n                                    />\n                                </div>\n                                {/* Cancel verification and go back to email */}\n                                <button\n                                    className=\"btn btn-secondary\"\n                                    onClick={() => setEmailSubmitted(false)}\n                                >\n                                    Cancel\n                                </button>\n                                &nbsp;\n                                {/* Verify code */}\n                                <button\n                                    type=\"button\"\n                                    className=\"btn btn-primary\"\n                                    onClick={(e) => {\n                                        e.preventDefault();\n                                        onVerify();\n                                    }}\n                                >\n                                    Verify\n                                </button>\n                            </>\n                        )}\n                        {/* Else, show login form */}\n                        {!emailSubmitted && (\n                            <>\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"email\">Email address</label>\n                                    <input\n                                        type=\"email\"\n                                        className=\"form-control\"\n                                        id=\"email\"\n                                        aria-describedby=\"emailHelp\"\n                                        placeholder=\"Enter email\"\n                                        value={email}\n                                        onChange={(e) =>\n                                            setEmail(e.target.value.trim())\n                                        }\n                                    />\n                                </div>\n                                <button\n                                    type=\"button\"\n                                    className=\"btn btn-primary\"\n                                    style={{ float: \"right\" }}\n                                    onClick={(e) => {\n                                        e.preventDefault();\n                                        onLogin();\n                                    }}\n                                >\n                                    Login\n                                </button>\n                            </>\n                        )}\n                    </div>\n                    <div\n                        style={{\n                            marginLeft: \"10%\",\n                            marginRight: \"10%\",\n                            marginTop: \"88px\",\n                            marginBottom: \"24px\",\n                        }}\n                    >\n                        <hr/>\n                        OR\n                    </div>\n                    <div\n                        style={{\n                            marginLeft: \"10%\",\n                            marginRight: \"10%\",\n                            marginTop: \"24px\",\n                        }}\n                    >\n                        <a href={discordLink()} className=\"btn btn-primary\">\n                            <i className=\"fab fa-discord\"></i> Login With Discord\n                        </a>\n                    </div>\n                </div>\n            </div>\n        </>\n    );\n};\n","// Given a set of credentials, this component will refresh them\n// every 5 minutes and invoke the onCredentialsRefreshed callback\n\nimport React, { useEffect, FC } from \"react\"\nimport { LoginResult, AIBrushApi } from \"../client/api\";\n\ninterface TokenRefresherProps {\n    onCredentialsRefreshed: (loginResult: LoginResult) => void;\n    onCredentialsExpired: () => void;\n    api: AIBrushApi;\n    credentials: LoginResult;\n}\n\nexport const TokenRefresher : FC<TokenRefresherProps> = ({ onCredentialsRefreshed, onCredentialsExpired, api, credentials }) => {\n    useEffect(() => {\n        const interval = setInterval(() => {\n            if (credentials && credentials.refreshToken) {\n                api.refresh({refreshToken: credentials.refreshToken}).then(loginResult => {\n                    onCredentialsRefreshed(loginResult.data);\n                }).catch(() => {\n                    onCredentialsExpired();\n                });\n            }\n\n        }, 5 * 60 * 1000);\n        return () => {\n            clearInterval(interval);\n        };\n    }, [credentials, api, onCredentialsRefreshed]);\n    return <div></div>;\n}","import React, { FC, useEffect, useState } from 'react';\nimport { AIBrushApi } from \"../client/api\";\n\ninterface HealthcheckerProps {\n    api: AIBrushApi;\n}\n\nexport const Healthchecker: FC<HealthcheckerProps> = ({ api }) => {\n    // automatically check health every 5 seconds\n    const [healthCheck, setHealthCheck] = useState(true);\n    \n    useEffect(() => {\n        const interval = setInterval(() => {\n            api.healthcheck().then(() => setHealthCheck(true)).catch(() => setHealthCheck(false));\n        }, 5000);\n\n        return () => clearInterval(interval);\n    }, [api]);\n\n    // only display bootstrap danger alert if healthcheck failed\n    // \"service is unavailable\"\n    return (\n        <div className=\"alert alert-danger\" role=\"alert\" style={{ display: healthCheck ? 'none' : 'block' }}>\n            <strong>Looks like we're having some trouble reaching the server.</strong>\n        </div>\n    );\n}\n\n","\nexport const NOTIFICATION_IMAGE_UPDATED = \"image_updated\";\nexport const NOTIFICATION_IMAGE_DELETED = \"image_deleted\";\nexport const NOTIFICATION_PENDING_IMAGE = \"pending_image\";\nexport const NOTIFICATION_CREDITS_UPDATED = \"credits_updated\";\n\ntype MessageListener = (message: string) => void;\n\nexport class ApiSocket {\n    private client?: WebSocket;\n    private accessToken?: string\n    // private messageListener?: (message: string) => void;\n    private messageListeners: MessageListener[] = [];\n\n    updateToken(accessToken: string) {\n        this.accessToken = accessToken;\n    }\n\n    // onMessage(listener?: (message: string) => void) {\n    //     this.messageListener = listener;\n    // }\n\n    addMessageListener(listener: MessageListener) {\n        this.messageListeners.push(listener);\n    }\n\n    removeMessageListener(listener: MessageListener) {\n        this.messageListeners = this.messageListeners.filter(l => l !== listener);\n    }\n\n    connect() {\n        if (!this.accessToken) {\n            throw new Error(\"unauthenticated\");\n        }\n        if (this.client) {\n            // will reconnect in one second automatically\n            // this is called every time the auth refreshes\n            this.client.close();\n            return;\n        }\n        // let host = window.location.host;\n        let host = \"www.aibrush.art\";\n        let protocol = \"wss\";\n        // if (host.includes(\"localhost\")) {\n        //   host = \"localhost:3000\";\n        //   protocol = \"ws\";\n        // }\n        this.client = new WebSocket(`${protocol}://${host}`);\n        this.client.onerror = err => console.error(err);\n        this.client.onopen = () => {\n            console.log(\"websocket connected\");\n            this.client!.send(this.accessToken!);\n        }\n        this.client.onmessage = evt => {\n            console.log(\"server push\", evt.data);\n            for (const listener of this.messageListeners) {\n                listener(evt.data as string);\n            }\n        }\n        this.client.onclose = () => {\n          console.log(\"websocket closed\");\n          this.client = undefined;\n          setTimeout(() => this.connect(), 500);\n        }\n    }\n}\n","import React, { useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { AIBrushApi, LoginResult } from \"../client\";\n\ninterface LoginProps {\n    client: AIBrushApi;\n    onLogin: (loginResult: LoginResult) => void;\n}\n\nexport const DiscordLogin: React.FC<LoginProps> = ({client, onLogin}) => {\n    const history = useHistory();\n    const code = new URLSearchParams(window.location.search).get(\"code\");\n    \n    useEffect(() => {\n        if (code) {\n            console.log(\"logging in with code\", code);\n            client.discordLogin({code}).then((result) => {\n                console.log(\"login result\", result);\n                if (result.data.accessToken) {\n                    onLogin(result.data);\n                }\n                \n                history.push(\"/\");\n            });\n        } else {\n            history.push(\"/\");\n        }\n    }, [])\n\n    return null;\n}","import React, { FC, useEffect, useState } from \"react\";\nimport moment from \"moment\";\nimport { ImageThumbnail } from \"../components/ImageThumbnail\";\nimport { useHistory } from \"react-router-dom\";\nimport { LocalImagesStore } from \"../lib/localImagesStore\";\nimport { LocalImage } from \"../lib/models\";\nimport { BusyModal } from \"../components/BusyModal\";\n\ninterface Props {\n    localImages: LocalImagesStore;\n}\n\nexport const LocalDeletedImages: FC<Props> = ({ localImages }) => {\n    const [images, setImages] = useState<LocalImage[]>([]);\n    const [deleting, setDeleting] = useState(false);\n\n    const history = useHistory();\n\n    const loadImages = async () => {\n        const deletedImages = await localImages.getDeletedImages();\n        setImages(deletedImages);\n    };\n\n    const onDeleteImage = async (image: LocalImage) => {\n        setImages(images.filter((i) => i.id !== image.id));\n        await localImages.deleteImage(image.id);\n        if (images.length <= 5) {\n            loadImages();\n        }\n    };\n\n    const onDeleteAllImages = async () => {\n        setDeleting(true);\n        try {\n            await localImages.clearDeletedImages();\n            setImages([]);\n        } finally {\n            setDeleting(false);\n        }\n    };\n\n    const onRestoreImage = async (image: LocalImage) => {\n        setImages(images.filter((i) => i.id !== image.id));\n        await localImages.saveImage({\n            ...image,\n            deleted_at: undefined,\n        });\n    };\n\n    useEffect(() => {\n        loadImages();\n    }, [localImages]);\n\n    return (\n        <div>\n            <div>\n                <div className=\"row\">\n                    <div className=\"col-12\">\n                        <h1 style={{ fontSize: \"40px\", textAlign: \"left\" }}>\n                            <i\n                                style={{ cursor: \"pointer\" }}\n                                onClick={() => history.goBack()}\n                                className=\"fas fa-chevron-left\"\n                            ></i>\n                            &nbsp; Deleted Images\n                        </h1>\n                        <button\n                            className=\"btn btn-danger btn-sm image-popup-delete-button\"\n                            onClick={onDeleteAllImages}\n                            style={{\n                                float: \"right\",\n                                marginRight: \"8px\",\n                            }}\n                        >\n                            <i className=\"fa fa-trash\"></i>&nbsp;Delete All\n                        </button>\n                    </div>\n                </div>\n                <div className=\"row\" style={{ marginTop: \"32px\" }}>\n                    <div className=\"col-sm-2 offset-sm-2\">Image</div>\n                    <div className=\"col-sm-8\">Action</div>\n                </div>\n                {images.map((image) => (\n                    <div\n                        className=\"row\"\n                        style={{\n                            marginTop: \"16px\",\n                            borderBottom: \"1px solid #303030\",\n                        }}\n                        key={image.id}\n                    >\n                        <div className=\"col-sm-2 offset-sm-2\">\n                            <ImageThumbnail\n                                assetsUrl={\"\"}\n                                image={image}\n                                censorNSFW={true}\n                            />\n                        </div>\n                        <div\n                            className=\"col-sm-8\"\n                            style={{\n                                paddingTop: \"64px\",\n                                paddingBottom: \"64px\",\n                            }}\n                        >\n                            <button\n                                className=\"btn btn-danger btn-sm image-popup-delete-button\"\n                                onClick={() => onDeleteImage(image)}\n                                style={{\n                                    marginRight: \"8px\",\n                                }}\n                            >\n                                <i className=\"fa fa-trash\"></i>&nbsp;Delete\n                            </button>\n                            <button\n                                className=\"btn btn-primary btn-sm image-popup-restore-button\"\n                                onClick={() => onRestoreImage(image)}\n                            >\n                                <i className=\"fa fa-undo\"></i>&nbsp;Restore\n                            </button>\n                        </div>\n                    </div>\n                ))}\n            </div>\n            <BusyModal show={deleting} title=\"Deleting Images\">\n                Please wait while we delete all images...\n            </BusyModal>\n        </div>\n    );\n};\n","// V2 page\nimport React, { FC, useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport Dropdown from \"react-bootstrap/Dropdown\";\nimport { useParams, useHistory, Link } from \"react-router-dom\";\nimport moment from \"moment\";\nimport ScrollToTop from \"react-scroll-to-top\";\nimport { AIBrushApi } from \"../client\";\nimport { CreateImageInput, Image, StatusEnum } from \"../client/api\";\nimport { ImageThumbnail } from \"../components/ImageThumbnail\";\nimport { ImagePrompt, defaultArgs } from \"../components/ImagePrompt\";\nimport {\n    createEncodedThumbnail,\n    encodedImageToBlob,\n    uploadBlob,\n} from \"../lib/imageutil\";\n\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport { ImagePopup } from \"../components/ImagePopup\";\nimport { BusyModal } from \"../components/BusyModal\";\nimport { PendingJobsThumbnail } from \"../components/PendingJobsThumbnail\";\nimport { PendingJobs } from \"../components/PendingJobs\";\nimport {\n    ApiSocket,\n    NOTIFICATION_IMAGE_DELETED,\n    NOTIFICATION_IMAGE_UPDATED,\n} from \"../lib/apisocket\";\nimport { ImagesCache } from \"../lib/imagesCache\";\n\ninterface Props {\n    api: AIBrushApi;\n    apiSocket: ApiSocket;\n    assetsUrl: string;\n}\n\nconst savedImagesCache = new ImagesCache();\n\nexport const SavedImagesPage: FC<Props> = ({ api, apiSocket, assetsUrl }) => {\n    const [creating, setCreating] = useState(false);\n    const [selectedImage, setSelectedImage] = useState<Image | null>(null);\n    const [parentImage, setParentImage] = useState<Image | null>(null);\n\n    const [showPendingImages, setShowPendingImages] = useState(false);\n\n    const [images, setImages] = useState<Array<Image>>([]);\n    const [err, setErr] = useState<string | null>(null);\n    const [hasMore, setHasMore] = useState<boolean>(true);\n    const [search, setSearch] = useState<string>(\"\");\n    const [searchDebounce, setSearchDebounce] = useState<string>(\"\");\n\n    const [bulkDeleteSelecting, setBulkDeleteSelecting] = useState(false);\n    const [bulkDeleting, setBulkDeleting] = useState(false);\n    const [bulkDeleteIds, setBulkDeleteIds] = useState<{\n        [key: string]: boolean;\n    }>({});\n\n    const [censorNSFW, setCensorNSFW] = useState(true);\n\n    const { id } = useParams<{ id?: string }>();\n    const history = useHistory();\n\n    useEffect(() => {\n        let handle = setTimeout(() => {\n            setSearch(searchDebounce);\n        }, 500);\n        return () => {\n            clearTimeout(handle);\n        };\n    }, [searchDebounce]);\n\n    useEffect(() => {\n        if (id) {\n            // check if the image is already loaded\n            const image = images.find((image) => image.id === id);\n            if (image) {\n                setSelectedImage(image);\n            }\n            // refresh\n            api.getImage(id).then((image) => {\n                setSelectedImage(image.data);\n            });\n        } else {\n            setSelectedImage(null);\n        }\n    }, [id]);\n\n    useEffect(() => {\n        if (!api) {\n            return;\n        }\n        const loadImages = async () => {\n            console.log(\"Initial load images\");\n            // clear error\n            setErr(null);\n            setHasMore(true);\n            try {\n                const cursor = moment().add(1, \"minutes\").valueOf();\n                // const resp = await api.listImages(cursor, search, 100, \"desc\");\n                const imagesResult = await savedImagesCache.listImages(\n                    api,\n                    cursor,\n                    search,\n                    100,\n                    \"desc\"\n                );\n                if (imagesResult) {\n                    console.log(\"Initial load images\", imagesResult.length);\n                    setImages(imagesResult.sort(sortImages));\n                }\n                return 0;\n            } catch (err) {\n                setErr(\"Could not load images\");\n                console.error(err);\n            }\n        };\n        loadImages();\n    }, [api, search]);\n\n    useEffect(() => {\n        if (!api) {\n            return;\n        }\n\n        const pollImages = async (images: Array<Image>) => {\n            // clear error\n            setErr(null);\n            // set cursor to max updated_at from images\n            const cursor = images.reduce((max, image) => {\n                return Math.max(max, image.updated_at);\n            }, 0);\n\n            try {\n                const imagesResult = await savedImagesCache.listImages(\n                    api,\n                    cursor + 1,\n                    search,\n                    100,\n                    \"asc\"\n                );\n                if (imagesResult) {\n                    let latestCursor = cursor;\n                    for (let image of imagesResult) {\n                        if (image.updated_at > latestCursor) {\n                            latestCursor = image.updated_at;\n                        }\n                    }\n\n                    // split resp.data.images into \"new\" and \"updated\" lists\n                    // image is \"new\" if it's not in images\n                    const newImages = imagesResult.filter((image) => {\n                        return images.findIndex((i) => i.id === image.id) < 0;\n                    });\n                    const updatedImages = imagesResult.filter((image) => {\n                        return images.findIndex((i) => i.id === image.id) >= 0;\n                    });\n                    setImages((images) => {\n                        const deletedIds: { [key: string]: boolean } = {};\n                        for (let image of newImages) {\n                            if (image.deleted_at) {\n                                deletedIds[image.id] = true;\n                                console.log(\n                                    `Deleting image ${image.id} from list`\n                                );\n                            }\n                        }\n                        for (let image of updatedImages) {\n                            if (image.deleted_at) {\n                                deletedIds[image.id] = true;\n                                console.log(\n                                    `Deleting image ${image.id} from list`\n                                );\n                            }\n                        }\n                        images = images.filter(\n                            (image) => !deletedIds[image.id]\n                        );\n                        return [\n                            ...images.map((image) => {\n                                const updatedImage = updatedImages.find(\n                                    (i) => i.id === image.id\n                                );\n                                if (updatedImage) {\n                                    return updatedImage;\n                                }\n                                return image;\n                            }),\n                            ...newImages.filter((image) => !image.deleted_at),\n                        ].sort(sortImages);\n                    });\n                }\n                return images;\n            } catch (err) {\n                setErr(\"Could not load images\");\n                console.error(err);\n            }\n        };\n\n        // polling is now a fallback for when the websocket connection fails\n        const timerHandle = setInterval(() => {\n            pollImages(images);\n        }, 60 * 1000);\n        return () => {\n            clearInterval(timerHandle);\n        };\n    }, [api, images, search]);\n\n    useEffect(() => {\n        // de-duplicate images by id\n        // first check if there are any duplicates\n        // I know, I should figure out where the duplicates are coming from,\n        // but I'm lazy.\n        const ids = images.map((image) => image.id);\n        const uniqueIds = new Set(ids);\n        if (ids.length !== uniqueIds.size) {\n            setImages((images) => {\n                // there are duplicates\n                const uniqueImages = images.filter((image, index) => {\n                    return ids.indexOf(image.id) === index;\n                });\n                return uniqueImages.sort(sortImages);\n            });\n        }\n    }, [images]);\n\n    useEffect(() => {\n        const onMessage = async (message: string) => {\n            const payload = JSON.parse(message);\n            if (\n                payload.type === NOTIFICATION_IMAGE_UPDATED ||\n                payload.type === NOTIFICATION_IMAGE_DELETED\n            ) {\n                const updatedImage = await api.getImage(payload.id);\n                if (updatedImage.data.temporary) {\n                    return;\n                }\n                setImages((images) => {\n                    const index = images.findIndex(\n                        (image) => image.id === updatedImage.data.id\n                    );\n                    let updatedImages = images;\n                    if (index >= 0) {\n                        updatedImages = images.map((image) => {\n                            if (image.id === updatedImage.data.id) {\n                                return updatedImage.data;\n                            }\n                            return image;\n                        });\n                    } else {\n                        updatedImages = [...images, updatedImage.data];\n                    }\n                    return updatedImages.sort(sortImages);\n                });\n            }\n        };\n        apiSocket.addMessageListener(onMessage);\n        return () => {\n            apiSocket.removeMessageListener(onMessage);\n        };\n    }, [apiSocket]);\n\n    const isPendingOrProcessing = (image: Image) => {\n        return (\n            image.status === StatusEnum.Pending ||\n            image.status === StatusEnum.Processing\n        );\n    };\n\n    const sortImages = (a: Image, b: Image) => {\n        // pending and processing images always come first\n        if (isPendingOrProcessing(a) && !isPendingOrProcessing(b)) {\n            return -1;\n        } else if (!isPendingOrProcessing(a) && isPendingOrProcessing(b)) {\n            return 1;\n        }\n        // if the parent is the same, sort by score descending\n        // otherwise, sort by updated_at\n        if (\n            a.parent === b.parent &&\n            a.params.prompt == b.params.prompt &&\n            a.status !== StatusEnum.Pending &&\n            b.status !== StatusEnum.Pending\n        ) {\n            // if the score is the same, sort by updated_at\n            let aScore = a.score;\n            let bScore = b.score;\n            // working around a bug where negative score was assigned\n            // for an empty negative prompt.\n            if (a.params.prompt!.trim() !== \"\") {\n                aScore = aScore - a.negative_score;\n            }\n            if (b.params.prompt!.trim() !== \"\") {\n                bScore = bScore - b.negative_score;\n            }\n            if (aScore == bScore) {\n                return b.updated_at - a.updated_at;\n            }\n            return bScore - aScore;\n        }\n\n        return b.updated_at - a.updated_at;\n    };\n\n    const onLoadMore = async () => {\n        // get the minimum updated_at from images\n        let minUpdatedAt = moment().valueOf();\n        images.forEach((image) => {\n            minUpdatedAt = Math.min(minUpdatedAt, image.updated_at);\n        });\n        // load images in descending order from updated_at\n        let imagesResult = await savedImagesCache.listImages(\n            api,\n            minUpdatedAt - 1,\n            search,\n            100,\n            \"desc\"\n        );\n        if (imagesResult && imagesResult.length > 0) {\n            // combine images with new images and sort by updated_at descending\n            setImages((images) => {\n                const imagesById = images.reduce((acc, image) => {\n                    acc[image.id] = image;\n                    return acc;\n                }, {} as { [key: string]: Image });\n                imagesResult = (imagesResult || []).filter(\n                    (image) => !imagesById[image.id]\n                );\n                return [...images, ...(imagesResult || [])].sort(sortImages);\n            });\n        } else {\n            setHasMore(false);\n        }\n    };\n\n    const onDelete = async (image: Image) => {\n        try {\n            await api.deleteImage(image.id);\n        } catch (e) {\n            console.error(e);\n            setErr(\"Error deleting image\");\n        }\n    };\n\n    const onFork = async (image: Image) => {\n        history.push({\n            pathname: \"/\",\n            search: `?parent=${image.id}`,\n        });\n    };\n\n    const onEdit = async (image: Image) => {\n        history.push(`/image-editor/${image.id}`);\n    };\n\n    const onThumbnailClicked = (image: Image) => {\n        // setSelectedImage(image);\n        if (bulkDeleteSelecting) {\n            setBulkDeleteIds({\n                ...bulkDeleteIds,\n                [image.id]: !bulkDeleteIds[image.id],\n            });\n        } else {\n            history.push(`/saved/${image.id}`);\n        }\n    };\n\n    const handleCancelFork = () => {\n        setParentImage(null);\n        window.scrollTo(0, 0);\n    };\n\n    const onConfirmBulkDelete = async () => {\n        try {\n            setBulkDeleting(true);\n            // await api.deleteImages(Object.keys(bulkDeleteIds));\n            const promises = Object.keys(bulkDeleteIds).map((id) => {\n                return api.deleteImage(id);\n            });\n            await Promise.all(promises);\n            setImages((images) => {\n                return images.filter((image) => !bulkDeleteIds[image.id]);\n            });\n            setBulkDeleteIds({});\n            setBulkDeleteSelecting(false);\n        } catch (e) {\n            console.error(e);\n            setErr(\"Error deleting images\");\n        } finally {\n            setBulkDeleting(false);\n        }\n    };\n\n    const completedOrSavedImages = images.filter((image) => {\n        return (\n            !image.deleted_at &&\n            (image.status === StatusEnum.Completed ||\n                image.status === StatusEnum.Saved)\n        );\n    });\n\n    const pendingOrProcessingImages = images.filter(\n        (image) =>\n            !image.deleted_at &&\n            (image.status === StatusEnum.Pending ||\n                image.status === StatusEnum.Processing)\n    );\n\n    const pendingImages = pendingOrProcessingImages.filter(\n        (image) => image.status === StatusEnum.Pending\n    );\n\n    const processingImages = pendingOrProcessingImages.filter(\n        (image) => image.status === StatusEnum.Processing\n    );\n\n    const onSwipe = (image: Image, direction: number) => {\n        // select the previous or next image from the currently selected one\n        const index = images.findIndex((i) => i.id === image.id);\n        if (index === -1) {\n            return;\n        }\n        const newIndex = index + direction;\n        if (newIndex < 0 || newIndex >= images.length) {\n            return;\n        }\n        const newImage = images[newIndex];\n        onThumbnailClicked(newImage);\n    }\n\n    return (\n        <>\n            <h1 style={{ fontSize: \"40px\", textAlign: \"left\" }}>\n                Welcome to AiBrush - Saved\n            </h1>\n\n            <div\n                className=\"saved-images\"\n                style={{ marginTop: \"48px\", paddingBottom: \"48px\" }}\n            >\n                <div style={{ textAlign: \"left\" }}>\n                    <div\n                        className=\"input-group\"\n                        style={{ marginBottom: \"16px\" }}\n                    >\n                        <input\n                            style={{}}\n                            value={searchDebounce}\n                            type=\"search\"\n                            className=\"form-control image-search\"\n                            placeholder=\"Search...\"\n                            onChange={(e) => setSearchDebounce(e.target.value)}\n                        />\n\n                        <div\n                            style={{\n                                float: \"right\",\n                            }}\n                        >\n                            {!bulkDeleteSelecting && (\n                                <>\n                                    <button\n                                        style={{ display: \"inline\" }}\n                                        className=\"btn btn-primary image-popup-button\"\n                                        onClick={() =>\n                                            setCensorNSFW(!censorNSFW)\n                                        }\n                                    >\n                                        {!censorNSFW && (\n                                            <i className=\"fas fa-eye\"></i>\n                                        )}\n                                        {censorNSFW && (\n                                            <i className=\"fas fa-eye-slash\"></i>\n                                        )}\n                                    </button>\n                                    <Dropdown\n                                        style={{\n                                            display: \"inline\",\n                                            marginLeft: \"8px\",\n                                        }}\n                                    >\n                                        <Dropdown.Toggle variant=\"danger\">\n                                            <i className=\"fas fa-trash\"></i>\n                                        </Dropdown.Toggle>\n\n                                        <Dropdown.Menu>\n                                            <Dropdown.Item\n                                                onClick={() =>\n                                                    setBulkDeleteSelecting(true)\n                                                }\n                                            >\n                                                Bulk Delete\n                                            </Dropdown.Item>\n                                            <Dropdown.Item\n                                                onClick={() =>\n                                                    history.push(\n                                                        \"/deleted-images\"\n                                                    )\n                                                }\n                                            >\n                                                View Deleted Images\n                                            </Dropdown.Item>\n                                        </Dropdown.Menu>\n                                    </Dropdown>\n                                </>\n                            )}\n                            {bulkDeleteSelecting && (\n                                <>\n                                    <button\n                                        className=\"btn btn-primary image-popup-button\"\n                                        onClick={() => {\n                                            setBulkDeleteSelecting(false);\n                                            setBulkDeleteIds({});\n                                        }}\n                                    >\n                                        Cancel\n                                    </button>\n                                    <button\n                                        style={{ marginLeft: \"8px\" }}\n                                        className=\"btn image-popup-delete-button\"\n                                        onClick={() => {\n                                            onConfirmBulkDelete();\n                                        }}\n                                    >\n                                        Delete\n                                    </button>\n                                </>\n                            )}\n                        </div>\n                    </div>\n                </div>\n                <InfiniteScroll\n                    dataLength={images.length}\n                    next={onLoadMore}\n                    hasMore={hasMore}\n                    loader={\n                        <>\n                            <hr />\n                            <h4>Loading...</h4>\n                        </>\n                    }\n                >\n                    {pendingOrProcessingImages.length > 0 && (\n                        <PendingJobsThumbnail\n                            pendingCount={pendingImages.length}\n                            processingCount={processingImages.length}\n                            onClick={() => {\n                                setShowPendingImages(true);\n                            }}\n                        />\n                    )}\n                    {completedOrSavedImages.map((image) => (\n                        <ImageThumbnail\n                            key={image.id}\n                            image={image}\n                            assetsUrl={assetsUrl}\n                            onClick={img => onThumbnailClicked(img as Image)}\n                            bulkDelete={\n                                bulkDeleteSelecting && bulkDeleteIds[image.id]\n                            }\n                            censorNSFW={censorNSFW}\n                        />\n                    ))}\n                </InfiniteScroll>\n            </div>\n\n            {selectedImage && (\n                <ImagePopup\n                    assetsUrl={assetsUrl}\n                    image={selectedImage}\n                    onClose={() => history.push(\"/saved\")}\n                    onFork={(image) => {\n                        onFork(image as Image);\n                    }}\n                    censorNSFW={censorNSFW}\n                />\n            )}\n            <ScrollToTop />\n            <BusyModal show={creating} title=\"Creating images\">\n                <p>Please wait while we create your image.</p>\n            </BusyModal>\n            <BusyModal show={bulkDeleting} title=\"Deleting images\">\n                <p>Please wait while we delete your images.</p>\n            </BusyModal>\n        </>\n    );\n};\n","\nimport { AIBrushApi, Image } from \"../client\";\nimport { KVStore } from \"./kvstore\";\n\nexport class ImagesCache {\n\n    private kvstore: KVStore<Image>;\n\n    constructor() {\n        this.kvstore = new KVStore<Image>({\n            dbName: \"saved-images\",\n            storeName: \"images\",\n        });\n    }\n\n    async listImages(api: AIBrushApi, cursor: number, search: string, limit: number, order: \"asc\" | \"desc\"): Promise<Image[] | undefined> {\n        const resp = await api.listImages(cursor, search, limit, order, \"id,updated_at,deleted_at\");\n        if (!resp.data.images) {\n            return undefined;\n        }\n\n        const result: Image[] = [];\n        const batchGetIds: string[] = [];\n        for (const image of resp.data.images) {\n            if (image.deleted_at) {\n                await this.kvstore.deleteItem(image.id);\n            } else {\n                const savedImage = await this.kvstore.getItem(image.id);\n                if (savedImage && savedImage.updated_at === image.updated_at) {\n                    result.push(savedImage);\n                } else {\n                    batchGetIds.push(image.id);\n                }\n            }\n        }\n        if (batchGetIds.length > 0) {\n            const batchResult = await api.batchGetImages(undefined, {\n                ids: batchGetIds,\n            });\n            if (batchResult.data.images) {\n                for (const image of batchResult.data.images) {\n                    await this.kvstore.setItem(image.id, image);\n                    result.push(image);\n                }\n            }\n        }\n        return result;\n    }\n}","import { useEffect, useState, FC } from \"react\";\nimport loadImage from \"blueimp-load-image\";\nimport {\n    splitImage,\n    mergeTiles,\n    SplitResult,\n    ImageUtilWorker,\n} from \"../lib/imageutil\";\nimport * as uuid from \"uuid\";\n\nexport const TestPage: FC = () => {\n    const [originalImage, setOriginalImage] = useState<string | undefined>();\n    const [upscaledImage, setUpscaledImage] = useState<string | undefined>();\n    const [imageWorker, setImageWorker] = useState<\n        ImageUtilWorker | undefined\n    >();\n\n    useEffect(() => {\n        const imageWorker = new ImageUtilWorker();\n        setImageWorker(imageWorker);\n        return () => {\n            imageWorker.destroy();\n        };\n    }, []);\n\n    const imageDataToCanvas = (imageData: ImageData): HTMLCanvasElement => {\n        const canvas = document.createElement(\"canvas\");\n        canvas.width = imageData.width;\n        canvas.height = imageData.height;\n        const ctx = canvas.getContext(\"2d\");\n        if (!ctx) {\n            throw new Error(\"Could not get canvas context\");\n        }\n        ctx.putImageData(imageData, 0, 0);\n        return canvas;\n    };\n\n    const upscaleImageData = (imageData: ImageData): HTMLCanvasElement => {\n        console.log(\"upscaling image data\", imageData.width, imageData.height);\n        const canvas = document.createElement(\"canvas\");\n        canvas.width = imageData.width * 2;\n        canvas.height = imageData.height * 2;\n        const ctx = canvas.getContext(\"2d\");\n        if (!ctx) {\n            throw new Error(\"Could not get canvas context\");\n        }\n        const image = imageDataToCanvas(imageData);\n        ctx.drawImage(image, 0, 0, canvas.width, canvas.height);\n        return canvas;\n    };\n\n    const onImageSelected = async (\n        event: React.ChangeEvent<HTMLInputElement>\n    ) => {\n        if (!imageWorker) {\n            throw new Error(\"Image worker not initialized\");\n        }\n        const files = event.target.files;\n        if (files && files.length > 0) {\n            loadImage(\n                files[0],\n                async (img) => {\n                    const c = img as HTMLCanvasElement;\n                    const originalImage = c.toDataURL(\"image/png\");\n                    setOriginalImage(originalImage);\n\n                    const ctx = c.getContext(\"2d\");\n                    if (ctx) {\n                        const originalImageData = ctx.getImageData(\n                            0,\n                            0,\n                            c.width,\n                            c.height\n                        );\n                        const splitResult = splitImage(originalImageData);\n                        if (!splitResult) {\n                            setUpscaledImage(originalImage);\n                            return;\n                        }\n                        console.log(\"splitResult\", {\n                            numTilesX: splitResult.numTilesX,\n                            numTilesY: splitResult.numTilesY,\n                            tileSize: splitResult.tileSize,\n                        });\n                        splitResult.tileSize *= 2;\n                        splitResult.imageWidth *= 2;\n                        splitResult.imageHeight *= 2;\n                        for (let x = 0; x < splitResult.numTilesX; x++) {\n                            for (let y = 0; y < splitResult.numTilesY; y++) {\n                                const tile = splitResult.tiles[x][y];\n                                const upscaledTile = upscaleImageData(tile);\n                                const upscaledImageData = upscaledTile\n                                .getContext(\"2d\")!\n                                .getImageData(\n                                    0,\n                                    0,\n                                    upscaledTile.width,\n                                    upscaledTile.height\n                                );\n                                const id = uuid.v4();\n                                const feathered =\n                                    await imageWorker.processRequest({\n                                        id,\n                                        alphaMode: \"none\",\n                                        feather: true,\n                                        width: splitResult.imageWidth,\n                                        height: splitResult.imageHeight,\n                                        pixels: upscaledImageData.data,\n                                        selectionOverlay: {\n                                            x:\n                                                x *\n                                                (splitResult.tileSize - 64),\n                                            y:\n                                                y *\n                                                (splitResult.tileSize - 64),\n                                            width: upscaledTile.width,\n                                            height: upscaledTile.height,\n                                        },\n                                        upscale: true,\n                                        featherWidth: 64,\n                                    });\n\n                                splitResult.tiles[x][y] = new ImageData(feathered.pixels, upscaledTile.width, upscaledTile.height)\n                            }\n                        }\n                        const upscaledImageData = mergeTiles(splitResult);\n                        console.log(\n                            \"upscaled image data size\",\n                            upscaledImageData.width,\n                            upscaledImageData.height\n                        );\n                        const upscaledCanvas =\n                            imageDataToCanvas(upscaledImageData);\n                        const upscaledImage =\n                            upscaledCanvas.toDataURL(\"image/png\");\n                        setUpscaledImage(upscaledImage);\n                    }\n                },\n                { canvas: true }\n            );\n        }\n    };\n\n    return (\n        <div>\n            <input type=\"file\" onChange={onImageSelected} />\n            {originalImage && upscaledImage && (\n                <div>\n                    Original:\n                    <br />\n                    <img src={originalImage} />\n                    <br />\n                    Upscaled:\n                    <br />\n                    <img src={upscaledImage} />\n                </div>\n            )}\n        </div>\n    );\n};\n","import {FC, useEffect, useState} from \"react\";\nimport { AIBrushApi } from \"../client\";\nimport { ApiSocket, NOTIFICATION_CREDITS_UPDATED } from \"../lib/apisocket\";\n\ninterface Props {\n    api: AIBrushApi;\n    apisocket: ApiSocket;\n}\n\n// TODO: restore when refactoring to kudos\n// this component should fetch the credits balance {free_credits, paid_credits} from the server on mount.\n// it should also subscribe to the apisocket to receive updates to the credits balance (NOTIFICATION_CREDITS_UPDATED).\n// display paid credits above, free credits below.\n\nexport const CreditsBalance: FC<Props> = ({api, apisocket}) => {\n    // const [credits, setCredits] = useState({free_credits: 0, paid_credits: 0});\n\n    // useEffect(() => {\n    //     const fetchCredits = async () => {\n    //         const credits = await api.getCredits();\n    //         setCredits(credits.data);\n    //     };\n    //     fetchCredits();\n    //     const pollHandle = setInterval(fetchCredits, 60000);\n\n    //     const onMessage = (message: string) => {\n    //         const data = JSON.parse(message);\n    //         if (data.type === NOTIFICATION_CREDITS_UPDATED) {\n    //             fetchCredits();\n    //         }\n    //     }\n    //     apisocket.addMessageListener(onMessage);\n\n    //     return () => {\n    //         clearInterval(pollHandle);\n    //         apisocket.removeMessageListener(onMessage);\n    //     }\n    // }, [api, apisocket]);\n\n    // return (\n    //     <div>\n    //         <div style={{color: \"#00f0f0\"}}>\n    //             <span>Paid credits: </span>\n    //             <span>{credits.paid_credits}</span>\n    //         </div>\n    //         <div>\n    //             <span>Free credits: </span>\n    //             <span>{credits.free_credits}</span>\n    //         </div>\n    //     </div>\n    // );\n    return <></>;\n};","import axios from \"axios\";\nimport moment from \"moment\";\nimport {\n    AlchemistPayload,\n    HordeClient,\n    HordeRequestPayload,\n} from \"./hordeclient\";\nimport { GenerationJob, LocalImage } from \"./models\";\nimport { AugmentImageInput, GenerateImageInput } from \"./models\";\nimport * as uuid from \"uuid\";\n\nconst fetchHordeData = async () => {\n    const { data } = await axios.get(\n        \"https://raw.githubusercontent.com/db0/AI-Horde-image-model-reference/main/stable_diffusion.json\"\n    );\n    return data;\n};\n\nconst hordeStateMap: { [key: string]: string } = {\n    waiting: \"pending\",\n    processing: \"processing\",\n    done: \"completed\",\n};\n\nlet _triggers: { [key: string]: string[] } | null = null;\nlet _lastUpdated: moment.Moment | null = null;\n\nasync function initTriggers() {\n    const data = await fetchHordeData();\n    _triggers = {};\n    Object.keys(data).forEach((key) => {\n        const modelInfo = data[key];\n        if (modelInfo.trigger) {\n            _triggers![key] = modelInfo.trigger;\n        }\n    });\n}\n\nexport async function addTrigger(\n    prompt: string,\n    model: string\n): Promise<string> {\n    // check last updated\n    if (_lastUpdated === null || moment().diff(_lastUpdated, \"minutes\") > 60) {\n        await initTriggers();\n        _lastUpdated = moment();\n    }\n    if (_triggers![model]) {\n        const triggerList = _triggers![model];\n        for (let trigger of triggerList) {\n            if (\n                prompt.toLocaleLowerCase().includes(trigger.toLocaleLowerCase())\n            ) {\n                return prompt;\n            }\n        }\n        return `${triggerList[0]}, ${prompt}`;\n    }\n    return prompt;\n}\n\nconst augmentationToForm: { [key: string]: string } = {\n    upscale: \"RealESRGAN_x4plus\",\n    face_restore: \"GFPGAN\",\n    remove_background: \"strip_background\",\n};\n\nfunction stripWeightsFromPrompt(prompt: string): string {\n    if (!prompt) {\n        return prompt;\n    }\n    // Use a regular expression to match and remove the weights and parentheses\n    const strippedPrompt = prompt.replace(/[:()\\d]+(\\.\\d+)?/g, \"\");\n    return strippedPrompt;\n}\n\nfunction combinePrompts(prompt: string, negativePrompt: string): string {\n    const separator = \"###\";\n    const maxChars = 1000;\n    const maxPromptLength = maxChars - separator.length;\n\n    // If there's no negative prompt, simply truncate the prompt and return it.\n    if (!negativePrompt) {\n        return prompt.substring(0, maxChars);\n    }\n\n    let promptLength = prompt.length;\n    let negativePromptLength = negativePrompt.length;\n\n    if (promptLength + negativePromptLength <= maxPromptLength) {\n        // If the combined length is less than maxPromptLength, no need to truncate\n        return `${prompt}${separator}${negativePrompt}`;\n    }\n\n    // Determine how many characters to take from each prompt\n    let halfLength = Math.floor(maxPromptLength / 2);\n    if (promptLength <= halfLength) {\n        // If the prompt is shorter than half length, take all of it and truncate the negative prompt\n        negativePromptLength = maxPromptLength - promptLength;\n    } else if (negativePromptLength <= halfLength) {\n        // If the negative prompt is shorter than half length, take all of it and truncate the prompt\n        promptLength = maxPromptLength - negativePromptLength;\n    } else {\n        // If both prompts are longer than half length, truncate both\n        promptLength = negativePromptLength = halfLength;\n    }\n\n    // Truncate prompts and combine\n    prompt = prompt.substring(0, promptLength);\n    negativePrompt = negativePrompt.substring(0, negativePromptLength);\n    return `${prompt}${separator}${negativePrompt}`;\n}\n\nexport class HordeGenerator {\n    constructor(readonly client: HordeClient) {}\n\n    // TODO: pass in onProgress callback\n    // onUploadProgress: (progressEvent: any) => {\n    //     const percentCompleted =\n    //         progressEvent.loaded / progressEvent.total;\n    //     setUploadingProgress(percentCompleted);\n    // },\n\n    // TODO: optimize with n > 1\n    async generateImages(\n        input: GenerateImageInput,\n        onUploadProgress?: (progressEvent: any) => void\n    ): Promise<GenerationJob> {\n        let prompt = await addTrigger(input.params.prompt || \"\", input.model);\n        prompt = prompt.trim();\n        let negativePrompt = stripWeightsFromPrompt(\n            input.params.negative_prompt || \"\"\n        );\n        negativePrompt = negativePrompt.trim();\n        prompt = combinePrompts(prompt, negativePrompt);\n        const promises: Promise<LocalImage | null>[] = [];\n        const payload: HordeRequestPayload = {\n            params: {\n                n: input.count,\n                width: input.params.width || 512,\n                height: input.params.height || 512,\n                steps: input.params.steps || 20,\n                karras: true,\n                sampler_name: \"k_euler\",\n                cfg_scale: input.params.cfg_scale || 7.5,\n                denoising_strength: input.params.denoising_strength || 0.75,\n                hires_fix: false,\n                post_processing: [],\n                control_type: input.params.controlnet_type || undefined,\n                seed:\n                    input.params.seed || undefined,\n                loras:\n                    input.params.loras &&\n                    input.params.loras.map((lora) => ({\n                        name: lora.name,\n                        model: lora.strength,\n                        clip: lora.strength,\n                    })),\n            },\n            prompt,\n            nsfw: true,\n            censor_nsfw: false,\n            trusted_workers: false,\n            slow_workers: false,\n            r2: true,\n            models: [input.model],\n            source_processing: \"img2img\",\n        };\n        if (input.encoded_image) {\n            payload.source_image = input.encoded_image;\n        }\n        if (input.encoded_mask) {\n            payload.source_mask = input.encoded_mask;\n            if (input.model.toLocaleLowerCase().indexOf(\"inpainting\") !== -1) {\n                payload.source_processing = \"inpainting\";\n                payload.params.karras = false;\n                payload.params.steps = 50;\n            }\n        }\n        const jobId = await this.client.initiateImageGeneration(payload, onUploadProgress);\n        if (!jobId) {\n            throw new Error(\"Failed to initiate image generation\");\n        }\n        return {\n            id: jobId,\n            model: input.model,\n            params: input.params,\n            status: \"pending\",\n            created_at: moment().valueOf(),\n            progress: 0,\n            count: input.count,\n        };\n    }\n\n    // TODO: optional efficient nsfw check\n    async checkGenerationJob(job: GenerationJob): Promise<GenerationJob> {\n        job = JSON.parse(JSON.stringify(job)) as GenerationJob;\n        const checkResult = await this.client.checkImageJob(job.id);\n        job.status = checkResult.status;\n        job.progress = checkResult.progress;\n        if (job.status === \"completed\") {\n            console.log(\"job is completed\")\n            job.images = [];\n            const results = await this.client.fetchImageResults(job.id);\n            console.log(\"fetch image results\", results.length);\n            for (const result of results) {\n                const image: LocalImage = {\n                    id: uuid.v4(),\n                    status: result.censored ? \"error\" : \"completed\",\n                    error: result.censored ? \"Image was censored\" : undefined,\n                    imageData: `data:image/webp;base64,${result.imageData.toString(\"base64\")}`,\n                    nsfw: false, // TODO: nsfw check\n                    model: job.model,\n                    params: {\n                        ...job.params,\n                        seed: result.seed,\n                    },\n                    created_at: moment().valueOf(),\n                    updated_at: moment().valueOf(),\n                };\n                job.images.push(image);\n            }\n        }\n        console.log(\"checkGenerationJob: job status\", job.status)\n        return job;\n    }\n\n    async checkGenerationJobs(jobs: GenerationJob[]): Promise<GenerationJob[]> {\n        jobs = JSON.parse(JSON.stringify(jobs)) as GenerationJob[];\n        const promises = jobs.map((job) => this.checkGenerationJob(job));\n        return Promise.all(promises);\n    }\n\n    // TODO: change to not need LocalImage\n    async augmentImage(input: AugmentImageInput): Promise<LocalImage> {\n        // copy over image and update id to augmentation request\n        const image = JSON.parse(JSON.stringify(input.image)) as LocalImage;\n        image.status = \"pending\";\n        const payload: AlchemistPayload = {\n            forms: [{ name: augmentationToForm[input.augmentation] }],\n            source_image: input.image.imageData!,\n            slow_workers: false,\n            trusted_workers: false,\n        };\n        console.log(\"alchemist payload\", payload);\n        try {\n            const id = await this.client.initiateAlchemistImageInterrogation(\n                payload\n            );\n            if (!id) {\n                console.error(\n                    \"Failed to initiate alchemist image interrogation\"\n                );\n                image.status = \"error\";\n                image.error =\n                    \"Failed to initiate alchemist image interrogation\";\n                return image;\n            }\n            image.id = id;\n        } catch (e: any) {\n            console.error(\"Failed to augment image\", e);\n            image.status = \"error\";\n            image.error = e.message;\n        }\n        return image;\n    }\n\n    async checkAugmentation(image: LocalImage): Promise<LocalImage> {\n        image = JSON.parse(JSON.stringify(image)) as LocalImage;\n        try {\n            const status = await this.client.checkInterrogationStatus(image.id);\n            image.status = (hordeStateMap[status] || status) as any;\n            if (image.status === \"completed\") {\n                const result = await this.client.fetchInterrogationResult(\n                    image.id\n                );\n                if (typeof result === \"boolean\") {\n                    image.nsfw = result;\n                } else if (typeof result === \"object\") {\n                    const imageData = result as Buffer;\n                    const base64ImageData = imageData.toString(\"base64\");\n                    const src = `data:image/webp;base64,${base64ImageData}`;\n                    image.imageData = src;\n                }\n            }\n        } catch (e: any) {\n            console.error(\"image failed\", e);\n            image.status = \"error\";\n            image.error = e.message;\n        }\n        return image;\n    }\n}\n","import React, { useEffect, useState } from \"react\";\nimport { Navbar, Modal, Form, Button } from \"react-bootstrap\";\nimport axios from \"axios\";\nimport { HordeClient } from \"../lib/hordeclient\";\n\ninterface Props {\n  client: HordeClient;\n}\n\ninterface User {\n    username: string;\n    id: number;\n}\n\nconst HordeUser = ({client}: Props) => {\n    const [user, setUser] = useState<User | null>(null);\n    const [_, setApiKey] = useState<string | null>(null);\n    const [showModal, setShowModal] = useState(false);\n    const [apiKeyInput, setApiKeyInput] = useState(\"\");\n    const [error, setError] = useState<string | null>(null);\n\n    const loadUserFromStorage = () => {\n        const storedUser = localStorage.getItem(\"user\");\n        const storedApiKey = localStorage.getItem(\"apiKey\");\n\n        if (storedUser && storedApiKey) {\n            setUser(JSON.parse(storedUser));\n            setApiKey(storedApiKey);\n            setApiKeyInput(storedApiKey);\n            client.updateApiKey(storedApiKey);\n        }\n    };\n\n    useEffect(() => {\n        loadUserFromStorage();\n    }, []);\n\n    const validateApiKey = async () => {\n        try {\n            const response = await axios.get(\n                \"https://stablehorde.net/api/v2/find_user\",\n                {\n                    headers: {\n                        accept: \"application/json\",\n                        \"Client-Agent\": \"unknown:0:unknown\",\n                        apikey: apiKeyInput,\n                    },\n                }\n            );\n\n            const user: User = response.data;\n            setUser(user);\n            setApiKey(apiKeyInput);\n            localStorage.setItem(\"user\", JSON.stringify(user));\n            localStorage.setItem(\"apiKey\", apiKeyInput);\n            client.updateApiKey(apiKeyInput);\n            setShowModal(false);\n            setError(null);\n        } catch (err) {\n            setError(\"Invalid API key\");\n        }\n    };\n\n    return (\n        <>\n            <span\n                style={{ cursor: \"pointer\", color: \"#00f0f0\" }}\n                className=\"top-button\"\n                onClick={() => setShowModal(true)}\n            >\n                <i className=\"fas fa-user\"></i>&nbsp;\n                {user ? `${user.username}` : \"Anonymous\"}\n            </span>\n\n            <Modal show={showModal} onHide={() => setShowModal(false)}>\n                <Modal.Header closeButton>\n                    <Modal.Title>Enter API Key</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    {/* info about how users can register for an api key at https://aihorde.net/register. Blue info icon */}\n                    <p>\n                        <i className=\"fas fa-info-circle\"></i>&nbsp; You can register to get\n                        an API key at&nbsp;<a target=\"_blank\" href=\"https://aihorde.net/register\">https://aihorde.net/register</a>\n                    </p>\n                    <Form>\n                        <Form.Group controlId=\"formApiKey\">\n                            <Form.Label>API Key</Form.Label>\n                            <Form.Control\n                                type=\"text\"\n                                placeholder=\"Enter API Key\"\n                                value={apiKeyInput}\n                                onChange={(e) => setApiKeyInput(e.target.value)}\n                            />\n                        </Form.Group>\n                        {error && <p style={{ color: \"red\" }}>{error}</p>}\n                    </Form>\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button\n                        variant=\"secondary\"\n                        onClick={() => setShowModal(false)}\n                    >\n                        Cancel\n                    </Button>\n                    <Button variant=\"primary\" onClick={validateApiKey}>\n                        Save\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n        </>\n    );\n};\n\nexport default HordeUser;\n","import React, { useState, useEffect } from \"react\";\nimport * as axios from \"axios\";\nimport { BrowserRouter, Switch, Route, Link } from \"react-router-dom\";\nimport \"./App.css\";\nimport \"./bootstrap.min.css\";\nimport { AIBrushApi, LoginResult, FeatureList } from \"./client/api\";\nimport { LocalImagesStore } from \"./lib/localImagesStore\";\nimport { getConfig } from \"./config\";\nimport { Login } from \"./pages/Login\";\nimport { TokenRefresher } from \"./components/TokenRefresher\";\nimport { Healthchecker } from \"./components/Healthchecker\";\nimport { ImageEditor } from \"./pages/image-editor/ImageEditor\";\n\n// V2 UI\nimport { Homepage } from \"./pages/Homepage\";\nimport { ApiSocket } from \"./lib/apisocket\";\nimport { DiscordLogin } from \"./pages/DiscordLogin\";\nimport { LocalDeletedImages } from \"./pages/LocalDeletedImages\";\nimport { SavedImagesPage } from \"./pages/SavedImagesPage\";\nimport { TestPage } from \"./pages/TestPage\";\nimport { CreditsBalance } from \"./components/CreditsBalance\";\nimport { HordeGenerator } from \"./lib/hordegenerator\";\nimport { HordeClient } from \"./lib/hordeclient\";\nimport HordeUser from \"./components/HordeUser\";\n\nconst config = getConfig();\nconst httpClient = axios.default.create();\nconst client = new AIBrushApi(\n    undefined,\n    localStorage.getItem(\"apiUrl\") || config.apiUrl,\n    httpClient\n);\nconst apiSocket: ApiSocket = new ApiSocket();\nconst localImages = new LocalImagesStore();\nconst hordeClient = new HordeClient(\"0000000000\");\nconst generator = new HordeGenerator(hordeClient);\n\nfunction updateHttpClient(loginResult: LoginResult) {\n    if (loginResult.accessToken) {\n        httpClient.defaults.headers.common[\n            \"Authorization\"\n        ] = `Bearer ${loginResult.accessToken}`;\n    }\n}\n\nfunction App() {\n    const [credentials, setCredentials] = useState<LoginResult | null>(null);\n    const [assetsUrl, setAssetsUrl] = useState<string>(\"/api/images\");\n    const [features, setFeatures] = useState<FeatureList | null>(null);\n\n    const onLogout = () => {\n        setCredentials(null);\n        localStorage.removeItem(\"credentials\");\n        httpClient.defaults.headers.common[\"Authorization\"] = undefined;\n    };\n\n    const init = async () => {\n        console.log(\"App.init\");\n        await localImages.init();\n        client\n            .getAssetsUrl()\n            .then((result) => setAssetsUrl(result.data.assets_url));\n        client.getFeatures().then((result) => setFeatures(result.data));\n        const storedCredentials = localStorage.getItem(\"credentials\");\n        if (storedCredentials) {\n            // attempt to refresh token\n            try {\n                const credentials = JSON.parse(\n                    storedCredentials\n                ) as LoginResult;\n                updateHttpClient(credentials);\n                const result = await client.refresh({\n                    refreshToken: credentials.refreshToken,\n                });\n                setCredentials(result.data);\n\n                // save to storage\n                localStorage.setItem(\n                    \"credentials\",\n                    JSON.stringify(result.data)\n                );\n                updateHttpClient(result.data);\n                apiSocket.updateToken(result.data.accessToken!);\n                apiSocket.connect();\n            } catch (e: any) {\n                console.log(e);\n                // if this is a 401, then the refresh token is expired\n                if (e.response && e.response.status === 401) {\n                    localStorage.removeItem(\"credentials\");\n                }\n            }\n        }\n    };\n\n    const onLogin = async (credentials: LoginResult) => {\n        localStorage.setItem(\"credentials\", JSON.stringify(credentials));\n        setCredentials(credentials);\n        updateHttpClient(credentials);\n        apiSocket.updateToken(credentials.accessToken!);\n        apiSocket.connect();\n    };\n\n    const onCredentialsExpired = () => {\n        onLogout();\n    };\n\n    useEffect(() => {\n        init();\n    }, []);\n\n    return (\n        <div className=\"App\">\n            <TokenRefresher\n                api={client}\n                credentials={credentials as LoginResult}\n                onCredentialsRefreshed={onLogin}\n                onCredentialsExpired={onCredentialsExpired}\n            />\n            <Healthchecker api={client} />\n\n            <BrowserRouter>\n                {/* if credentials are not set, show Login component */}\n                {!credentials && (\n                    <Switch>\n                        <Route path=\"/\" exact={true}>\n                            <Login client={client} onLogin={onLogin} />\n                        </Route>\n                        <Route path=\"/discord-login\">\n                            <DiscordLogin client={client} onLogin={onLogin} />\n                        </Route>\n                        {/* fallback route is login page */}\n                        <Route path=\"*\">\n                            <Login client={client} onLogin={onLogin} />\n                        </Route>\n                    </Switch>\n                )}\n                {credentials && (\n                    <div className=\"container\">\n                        <div className=\"row\">\n                            <div className=\"col-lg-12\">\n                                {/* if credentials are set, show a bootstrap logout button a the far top right corner div */}\n                                {credentials && (\n                                    <>\n                                        <button\n                                            className=\"btn btn-primary top-button\"\n                                            onClick={() => onLogout()}\n                                        >\n                                            {/* font awesome logout icon */}\n                                            <i className=\"fas fa-sign-out-alt\"></i>\n                                        </button>\n                                        {/* saved images */}\n                                        <Link\n                                            className=\"btn btn-primary top-button\"\n                                            to=\"/saved\"\n                                        >\n                                            {/* font awesome save icon */}\n                                            <i className=\"fas fa-save\"></i>\n                                        </Link>\n                                        {/* home button */}\n                                        <Link\n                                            className=\"btn btn-primary top-button\"\n                                            to=\"/\"\n                                        >\n                                            {/* font awesome home icon */}\n                                            <i className=\"fas fa-home\"></i>\n                                        </Link>\n                                        {/* Link to discord */}\n                                        <a\n                                            className=\"btn btn-primary top-button\"\n                                            href=\"https://discord.gg/HYcFpDeqKJ\"\n                                            target=\"_blank\"\n                                        >\n                                            {/* font awesome discord icon */}\n                                            <i className=\"fab fa-discord\"></i>\n                                        </a>\n                                        {/* link to github */}\n                                        <a\n                                            className=\"btn btn-primary top-button\"\n                                            href=\"https://github.com/wolfgangmeyers/aibrush-2\"\n                                            target=\"_blank\"\n                                        >\n                                            {/* font awesome github icon */}\n                                            <i className=\"fab fa-github\"></i>\n                                        </a>\n                                        <HordeUser client={hordeClient} />\n                                    </>\n                                )}\n                            </div>\n                            <div\n                                className=\"col-lg-12\"\n                                style={{ textAlign: \"right\" }}\n                            >\n                                <CreditsBalance\n                                    api={client}\n                                    apisocket={apiSocket}\n                                />\n                            </div>\n                        </div>\n\n                        {/* if credentials are set, show the rest of the app */}\n\n                        <Switch>\n                            <Route path=\"/\" exact={true}>\n                                {/* <MainMenu isAdmin={isAdmin} /> */}\n                                <Homepage\n                                    api={client}\n                                    apiSocket={apiSocket}\n                                    assetsUrl={assetsUrl}\n                                    localImages={localImages}\n                                    generator={generator}\n                                />\n                            </Route>\n                            <Route path=\"/images/:id\">\n                                <Homepage\n                                    api={client}\n                                    apiSocket={apiSocket}\n                                    assetsUrl={assetsUrl}\n                                    localImages={localImages}\n                                    generator={generator}\n                                />\n                            </Route>\n                            <Route path=\"/saved\" exact={true}>\n                                {/* <MainMenu isAdmin={isAdmin} /> */}\n                                <SavedImagesPage\n                                    api={client}\n                                    apiSocket={apiSocket}\n                                    assetsUrl={assetsUrl}\n                                />\n                            </Route>\n                            <Route path=\"/saved/:id\" exact={true}>\n                                {/* <MainMenu isAdmin={isAdmin} /> */}\n                                <SavedImagesPage\n                                    api={client}\n                                    apiSocket={apiSocket}\n                                    assetsUrl={assetsUrl}\n                                />\n                            </Route>\n                            <Route path=\"/image-editor/:id\">\n                                <ImageEditor\n                                    api={client}\n                                    generator={generator}\n                                    assetsUrl={assetsUrl}\n                                    localImages={localImages}\n                                />\n                            </Route>\n                            <Route path=\"/local-deleted-images\">\n                                <LocalDeletedImages localImages={localImages} />\n                            </Route>\n                            <Route path=\"/testpage\">\n                                <TestPage />\n                            </Route>\n                        </Switch>\n                        <div\n                            // style={{ marginTop: \"100px\", padding: \"50px\" }}\n\n                            // use position:fixed to make the footer stick to the bottom of the page\n                            style={{\n                                position: \"fixed\",\n                                bottom: \"0\",\n                                left: \"0\",\n                                width: \"100%\",\n                                height: \"50px\",\n                                paddingTop: \"16px\",\n                                backgroundColor: \"#000000\",\n                            }}\n                        >\n                            {/* show external popout pages to terms and privacy policy, if they are present in the features */}\n                            {features && features.privacy_uri && (\n                                <a href={features.privacy_uri} target=\"_blank\">\n                                    Privacy Policy\n                                </a>\n                            )}\n                            {features && features.terms_uri && (\n                                <a\n                                    href={features.terms_uri}\n                                    target=\"_blank\"\n                                    style={{ marginLeft: \"20px\" }}\n                                >\n                                    Terms of Service\n                                </a>\n                            )}\n                            {/* link to mail to admin@aibrush.art */}\n                            <a\n                                href=\"mailto:admin@aibrush.art\"\n                                style={{ marginLeft: \"20px\" }}\n                            >\n                                Contact\n                            </a>\n                            <span\n                                style={{ float: \"right\", marginRight: \"50px\" }}\n                            >\n                                Powered by the{\" \"}\n                                <a\n                                    href=\"https://stablehorde.net/\"\n                                    target=\"_blank\"\n                                >\n                                    Stable Horde\n                                </a>\n                            </span>\n                        </div>\n                    </div>\n                )}\n            </BrowserRouter>\n        </div>\n    );\n}\n\nexport default App;\n","export interface Config {\n    apiUrl: string;\n}\n\nexport function getConfig(): Config {\n    // if (process.env.REACT_APP_ENV === \"prod\") {\n    //     return {\n    //         apiUrl: \"https://aibrush.ngrok.io\"\n    //     };\n    // } else if (process.env.REACT_APP_ENV === \"alt\") {\n    //     return {\n    //         apiUrl: \"\"\n    //     };\n    // } else {\n    //     return {\n    //         apiUrl: \"http://localhost:3000\"\n    //     };\n    // }\n    return {\n        apiUrl: \"\"\n    };\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import React, { FC, useEffect, useRef, useState } from \"react\";\nimport { Modal } from \"react-bootstrap\";\nimport { propTypes } from \"react-bootstrap/esm/Image\";\n\ninterface Props {\n    show: boolean;\n    title?: string;\n}\n\n// Show modal with child contents\nexport const BusyModal: FC<Props> = ({ show, title, children }) => {\n    return (\n        <Modal show={show} backdrop=\"static\" keyboard={false}>\n            <Modal.Header closeButton>\n                <Modal.Title>{title || \"Processing\"}</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                {children || (\n                    <div className=\"d-flex justify-content-center\">\n                        <div className=\"spinner-border\" role=\"status\">\n                            <span className=\"sr-only\">Please Wait...</span>\n                        </div>\n                    </div>\n                )}\n            </Modal.Body>\n        </Modal>\n    );\n};\n","import { Item } from \"./civit_loras\";\nimport { KVStore } from \"./kvstore\";\nimport { recentLoras as recentList } from \"./recentList\";\n\nexport class RecentLoras {\n    private kvstore: KVStore<Item>;\n\n    constructor() {\n        this.kvstore = new KVStore<Item>({\n            dbName: \"saved-loras\",\n            storeName: \"loras\",\n        });\n        this.migrateToIDs();\n    }\n\n    async migrateToIDs(): Promise<void> {\n        console.log(\"migrateToIDs\");\n        const recentLoras = recentList.getItems();\n        let migrateRequired = false;\n        for (let id of recentLoras) {\n            console.log(\"id\", id);\n            // is id formatted as an integer?\n            if (!id.match(/^\\d+$/)) {\n                migrateRequired = true;\n                break;\n            }\n        }\n        if (migrateRequired) {\n            console.log(\"one-time migration of recent loras to int keys\");\n            recentList.clear();\n            recentLoras.reverse();\n            for (const name of recentLoras) {\n                const lora = await this.kvstore.getItem(name);\n                if (lora) {\n                    recentList.addItem(lora.id.toString());\n                    await this.kvstore.deleteItem(name);\n                    await this.kvstore.setItem(lora.id.toString(), lora);\n                }\n            }\n        }\n    }\n\n    async listRecentLoras(): Promise<Item[]> {\n        const recentLoraIDs = recentList.getItems();\n        const result: Item[] = [];\n        for (const loraID of recentLoraIDs) {\n            const savedLora = await this.kvstore.getItem(loraID);\n            if (savedLora) {\n                result.push(savedLora);\n            }\n        }\n        return result;\n    }\n\n    async getLora(loraID: string): Promise<Item | null> {\n        console.log(\"getLora\", loraID);\n        return await this.kvstore.getItem(loraID);\n    }\n\n    async addLora(lora: Item): Promise<void> {\n        const loraId = lora.id.toString();\n        await this.kvstore.setItem(loraId, lora);\n        const removed = recentList.addItem(loraId);\n        if (removed) {\n            await this.kvstore.deleteItem(removed);\n        }\n    }\n}\n\nexport const recentLoras = new RecentLoras();","import React, { FC, useEffect, useState, useCallback } from \"react\";\nimport axios from \"axios\";\nimport Modal from \"react-bootstrap/Modal\";\nimport Button from \"react-bootstrap/Button\";\nimport Form from \"react-bootstrap/Form\";\nimport Alert from \"react-bootstrap/Alert\";\nimport DOMPurify from \"dompurify\";\nimport ReactInfiniteScroll from \"react-infinite-scroll-component\";\n\nimport { Item } from \"../lib/civit_loras\";\nimport { Col, ListGroup, Row } from \"react-bootstrap\";\nimport { LoraConfig } from \"../client\";\nimport { recentLoras } from \"../lib/recentLoras\";\n\n// https://chat.openai.com/share/34a593c7-a8e5-4490-9cc7-8a1d019b8b82\n\nexport interface SelectedLora {\n    config: LoraConfig;\n    lora: Item;\n}\n\ninterface LoraModalProps {\n    onConfirm: (lora: SelectedLora) => void;\n    onCancel: () => void;\n}\n\nexport async function selectedLorasFromConfigs(configs: LoraConfig[]): Promise<SelectedLora[]> {\n    const loras = await Promise.all(configs.map(config => recentLoras.getLora(config.name)));\n    const selectedLoras: SelectedLora[] = [];\n    for (let i = 0; i < loras.length; i++) {\n        if (loras[i]) {\n            const config = configs[i];\n            selectedLoras.push({\n                config,\n                lora: loras[i]!\n            });\n        }\n    }\n    return selectedLoras;\n}\n\nexport const LoraModal: FC<LoraModalProps> = ({ onConfirm, onCancel }) => {\n    const [inputValue, setInputValue] = useState(\"\");\n    const [strength, setStrength] = useState(1);\n    const [item, setItem] = useState<Item | null>(null);\n    const [recentItems, setRecentItems] = useState<Item[]>([]);\n    const [error, setError] = useState<string | null>(null);\n    const [busy, setBusy] = useState(false);\n\n    const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setInputValue(event.target.value);\n    };\n\n    const handleSearch = useCallback(async () => {\n        const modelId = inputValue.match(/(\\d+)/)?.[0] || inputValue;\n\n        if (!modelId) {\n            setError(\"Invalid input\");\n            return;\n        }\n\n        setBusy(true);\n        try {\n            const response = await axios.get(\n                `https://civitai.com/api/v1/models/${modelId}`\n            );\n            setItem(response.data);\n            setError(null);\n        } catch (error) {\n            setError(\"Failed to fetch data\");\n        } finally {\n            setBusy(false);\n        }\n    }, [inputValue]);\n\n    const handleConfirm = () => {\n        recentLoras.addLora(item!);\n        onConfirm({\n            config: {\n                name: `${item!.id}`,\n                strength,\n            },\n            lora: item!,\n        })\n    }\n\n    useEffect(() => {\n        // Fetch recent Loras when component mounts\n        const fetchRecentLoras = async () => {\n            const items = await recentLoras.listRecentLoras();\n            setRecentItems(items);\n        };\n        fetchRecentLoras();\n    }, []);\n\n    const renderContent = () => {\n        if (error) {\n            return <Alert variant=\"danger\">{error}</Alert>;\n        }\n\n        if (item) {\n            return (\n                <div>\n                    <h5>{item.name}</h5>\n                    <div\n                        dangerouslySetInnerHTML={{\n                            __html: DOMPurify.sanitize(item.description),\n                        }}\n                    />\n\n                    <p>Allow Commercial Use: {item.allowCommercialUse}</p>\n                    <p>Creator: {item.creator.username}</p>\n\n                    <h6>Tags:</h6>\n                    <div style={{ marginBottom: \"16px\" }}>\n                        {item.tags.map((tag, index) => (\n                            // <li key={index}>{tag}</li>\n                            // comma separated instead\n                            <span key={index}>\n                                {tag}\n                                {index < item.tags.length - 1 && \", \"}\n                            </span>\n                        ))}\n                    </div>\n\n                    <h6>Model Versions:</h6>\n                    {/* TODO: support multiple model versions in the horde */}\n                    {item.modelVersions.slice(0, 1).map((version, index) => (\n                        <div key={index}>\n                            <strong>{version.name}</strong>\n                            <p>Base Model: {version.baseModel}</p>\n\n                            <strong>Trained Words:</strong>\n                            <ul>\n                                {version.trainedWords.map((word, idx) => (\n                                    <li key={idx}>{word}</li>\n                                ))}\n                            </ul>\n\n                            <strong>Images:</strong>\n                            <div className=\"row\">\n                                {version.images.map((image, idx) => (\n                                    <div\n                                        key={idx}\n                                        className=\"col-sm-4 col-md-3\"\n                                    >\n                                        <div className=\"thumbnail\">\n                                            <img\n                                                src={image.url}\n                                                alt=\"\"\n                                                style={{\n                                                    maxWidth: \"100%\",\n                                                    height: \"auto\",\n                                                    marginBottom: \"16px\",\n                                                }}\n                                            />\n                                        </div>\n                                    </div>\n                                ))}\n                            </div>\n                        </div>\n                    ))}\n                </div>\n            );\n        }\n\n        return null;\n    };\n\n    const filteredItems = recentItems.filter((recentItem) =>\n        recentItem.name.toLowerCase().includes(inputValue.toLowerCase()) || recentItem.id.toString() === inputValue\n    );\n\n    return (\n        <Modal show onHide={onCancel} size=\"xl\">\n            <Modal.Header closeButton>\n                <Modal.Title>Enter LORA URL or Model Number</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                {!item && (\n                    <>\n                        <Form\n                            onSubmit={(e) => {\n                                e.preventDefault();\n                                handleSearch();\n                            }}\n                        >\n                            <Form.Group as={Row}>\n                                <Col sm={10}>\n                                    <Form.Control\n                                        type=\"text\"\n                                        placeholder=\"Enter LORA URL or Model Number\"\n                                        value={inputValue}\n                                        onChange={handleInputChange}\n                                    />\n                                </Col>\n                                <Col sm={2}>\n                                    <Button\n                                        variant=\"primary\"\n                                        onClick={handleSearch}\n                                        disabled={busy || !inputValue}\n                                    >\n                                        {busy ? \"Loading...\" : \"Search\"}\n                                    </Button>\n                                </Col>\n                            </Form.Group>\n                        </Form>\n                        <h5 className=\"mt-3\">Recently Used Loras:</h5>\n                        <ListGroup style={{maxHeight: \"500px\", overflowY: \"auto\"}}>\n                            {filteredItems.map((recentItem, index) => (\n                                <ListGroup.Item key={index} action onClick={() => setItem(recentItem)}>\n                                    {recentItem.name}\n                                </ListGroup.Item>\n                            ))}\n                        </ListGroup>\n                    </>\n                )}\n                {/* show a strength slider only if an item has been loaded */}\n                {item && (\n                    <Form.Group as={Row}>\n                        <Form.Label column sm={2}>\n                            Strength: {strength}\n                        </Form.Label>\n                        <Col sm={10}>\n                            <Form.Control\n                                type=\"range\"\n                                min={0}\n                                max={5}\n                                step={0.1}\n                                value={strength}\n                                onChange={(e) =>\n                                    setStrength(parseFloat(e.target.value))\n                                }\n                            />\n                        </Col>\n                    </Form.Group>\n                )}\n                {renderContent()}\n            </Modal.Body>\n            <Modal.Footer>\n                <Button variant=\"secondary\" onClick={onCancel}>\n                    Cancel\n                </Button>\n                <Button\n                    variant=\"primary\"\n                    disabled={!item}\n                    onClick={() => handleConfirm()}\n                >\n                    OK\n                </Button>\n            </Modal.Footer>\n        </Modal>\n    );\n};\n","import { FC } from \"react\";\n\ninterface Props {\n    imagesCost: number;\n}\n\n//TODO: restore when doing kudos cost calculation\nexport const CostIndicator: FC<Props> = ({ imagesCost }) => {\n    return (\n        // <div style={{ textAlign: \"left\" }}>\n        //     <span className=\"helptext\" style={{ color: \"#00f0f0\" }}>\n        //         Cost: {imagesCost} credit{imagesCost > 1 ? \"s\" : \"\"}&nbsp;\n        //         <i\n        //             className=\"fas fa-info-circle\"\n        //             style={{ cursor: \"pointer\" }}\n        //             onClick={() =>\n        //                 alert(\n        //                     \"The cost is based on the image count and the size of each image. A single 512x512 image costs 1 credit.\"\n        //                 )\n        //             }\n        //         ></i>\n        //     </span>\n        // </div>\n        <></>\n    );\n};\n","import { FC } from \"react\";\n\ninterface Props {\n    progress: number;\n}\n\nexport const ProgressBar: FC<Props> = ({ progress }) => {\n    return (\n        <div className=\"progress\" style={{ height: \"20px\", marginTop: \"16px\" }}>\n            <div\n                className=\"progress-bar\"\n                role=\"progressbar\"\n                style={{ width: `${progress * 100}%` }}\n                aria-valuenow={progress * 100}\n                aria-valuemin={0}\n                aria-valuemax={100}\n            >\n                {Math.round(progress * 100)}%\n            </div>\n        </div>\n    );\n};\n","export function sleep(ms: number): Promise<void> {\n    return new Promise(resolve => window.setTimeout(resolve, ms));\n}\n","const BASE_IMAGE_SIZE = 512 * 512;\n\nexport function calculateImagesCost(count: number, width: number, height: number): number {\n    // 512x512 = 1 credit\n    // floor(count * width * height / 512 / 512)\n    return Math.max(count * Math.floor(width * height / BASE_IMAGE_SIZE), 1);\n}","import { FC } from \"react\";\nimport { LoraConfig } from \"../client\";\nimport { SelectedLora } from \"./LoraSelector\";\n\ninterface Props {\n    onRemove: (lora: SelectedLora) => void;\n    lora: SelectedLora;\n}\n\n// style the button like this:\n// <button\n//     type=\"button\"\n//     className=\"btn btn-secondary light-button\"\n//     style={{ marginLeft: \"8px\" }}\n//     onClick={() => setSelectingLora(true)}\n// >\n//     <i className=\"fas fa-plus\"></i>&nbsp;Add Lora\n// </button>\n\n// the button should have an \"X\" icon, and when you click the icon the onRemove function should be called\n// show the name of the lora and the strength\nexport const SelectedLoraTag: FC<Props> = ({ onRemove, lora }) => {\n    return <button\n        type=\"button\"\n        className=\"btn btn-secondary light-button\"\n        style={{ marginLeft: \"8px\", cursor: \"default\" }}\n    >\n        {lora.lora.name}\n        &nbsp;\n        <i className=\"fas fa-times\" style={{cursor: \"pointer\"}} onClick={() => onRemove(lora)}></i>\n    </button>;\n};","import { FC } from \"react\";\nimport { OverlayTrigger, Tooltip } from \"react-bootstrap\";\nimport { SelectedLora } from \"./LoraSelector\";\n\ninterface Props {\n    prompt: string;\n    selectedLoras: SelectedLora[];\n    onAddTrigger: (trigger: string) => void;\n}\n\nexport const LoraTriggers: FC<Props> = ({\n    prompt,\n    selectedLoras,\n    onAddTrigger,\n}) => {\n    const allTriggers = [];\n    for (const lora of selectedLoras) {\n        for (let trigger of lora.lora.modelVersions[0].trainedWords) {\n            if (\n                prompt.toLowerCase().indexOf(trigger.toLowerCase()) === -1 &&\n                allTriggers.indexOf(trigger) === -1\n            ) {\n                allTriggers.push(trigger);\n            }\n        }\n    }\n\n    const renderTooltip = (trigger: string) => (\n        <Tooltip id=\"button-tooltip\">{trigger}</Tooltip>\n    );\n\n    return (\n        <div style={{textAlign: \"left\", padding: \"8px\"}}>\n            <h5>Available Triggers</h5>\n            {allTriggers.map((trigger, index) => (\n                <OverlayTrigger\n                    key={index}\n                    placement=\"top\"\n                    overlay={renderTooltip(trigger)}\n                >\n                    <span\n                        className=\"badge bg-secondary me-2\"\n                        style={{ cursor: \"pointer\", marginRight: \"8px\" }}\n                        onClick={() => onAddTrigger(trigger)}\n                    >\n                        <i className=\"fas fa-plus ms-2\"></i>&nbsp;\n                        {trigger.length > 20 ? trigger.slice(0, 20) + \"...\" : trigger}\n                    </span>\n                </OverlayTrigger>\n            ))}\n        </div>\n    );\n};\n","import React, { FC, useEffect, useState } from \"react\";\nimport moment from \"moment\";\nimport { Image, StatusEnum } from \"../client/api\";\nimport { LocalImage } from \"../lib/models\";\n\ninterface Props {\n    assetsUrl: string;\n    image: LocalImage;\n    censorNSFW: boolean;\n    bulkDelete?: boolean;\n    onClick?: (image: LocalImage) => void;\n}\n\nexport const ImageThumbnail: FC<Props> = ({ assetsUrl, image, censorNSFW, bulkDelete, onClick }) => {\n    const src = `${assetsUrl}/${image.id}.thumbnail.png?updated_at=${image.updated_at}`;\n    const [retry, setRetry] = useState(\"\");\n\n    useEffect(() => {\n        // This is to help deal with eventual consistency from S3.\n        // if image.updated_at (unix timestamp in milliseconds) is less than a minute ago, try to reload the image\n        if (moment().diff(moment(image.updated_at), \"minutes\") < 1) {\n            setRetry(\"\");\n            const t = setTimeout(() => {\n                setRetry(\"&retry\")\n            }, 3000);\n            return () => clearTimeout(t);\n        }\n    }, [image.id, image.updated_at])\n\n    let label = image.label || \"\";\n    if (image.label === \"\") {\n        label = image.params.prompt || \"\";\n    }\n    if (label.indexOf(\",\") !== -1) {\n        label = label.substring(0, label.indexOf(\",\"));\n    }\n    \n    let className = \"image-thumbnail\";\n    if (bulkDelete) {\n        className += \" bulk-delete\";\n    }\n\n    let backgroundImage = `url(${src}${retry}), url(/images/default.png)`;\n    if (image.imageData) {\n        backgroundImage = `url(${image.imageData}), url(/images/default.png)`;\n    }\n\n    return (\n        <div\n            className={className}\n            style={{\n                backgroundImage,\n                backgroundRepeat: \"no-repeat\",\n                backgroundPosition: \"center\",\n                filter: (image.nsfw && censorNSFW) ? \"blur(8px)\" : undefined,\n            }}\n            onClick={() => onClick && onClick(image)}\n        >\n            {!bulkDelete && <div className=\"image-thumbnail-label\">\n                {label}\n            </div>}\n\n            {bulkDelete && <div className=\"image-thumbnail-label\">\n                <input type=\"checkbox\" style={{\n                    width: \"20px\",\n                    height: \"20px\",\n                    marginLeft: \"16px\",\n                    marginTop: \"16px\",\n                }} checked readOnly />\n            </div>}\n\n            {image.status === StatusEnum.Pending && <div className=\"image-thumbnail-pending\">\n                <i style={{marginTop: \"20px\"}} className=\"fa fa-hourglass-half\"></i>\n            </div>}\n            {\n                image.status === StatusEnum.Processing && <div className=\"image-thumbnail-pending\">\n                    <i style={{marginTop: \"20px\"}} className=\"fa fa-cog fa-spin\"></i>\n                </div>\n            }\n        </div>\n    );\n};\n","\n// canny, hed, depth, normal, openpose, seg, scribble, fakescribbles, hough\nexport const controlnetTypes = [\n    \"canny\",\n    \"hed\",\n    \"depth\",\n    \"normal\",\n    \"openpose\",\n    \"seg\",\n    \"scribble\",\n    \"fakescribbles\",\n    \"hough\",\n]","import { FC, useState, FormEvent } from \"react\";\nimport { Form, FormGroup, FormControl, FormText, FormCheck } from \"react-bootstrap\";\n\ninterface Props {\n    seed: string;\n    setSeed: (seed: string) => void;\n}\n\nexport const SeedInput: FC<Props> = ({seed, setSeed}) => {\n    const [useCustomSeed, setUseCustomSeed] = useState(false);\n\n    const onChangeCustomSeed = () => {\n        setUseCustomSeed(!useCustomSeed);\n        if (useCustomSeed) {\n            setSeed(\"\");\n        } else {\n            // set seed to a random number\n            setSeed(Math.floor(Math.random() * 1000000000).toString());\n        }\n    };\n\n    return (\n        <Form>\n            <FormGroup>\n                <FormCheck \n                    type=\"checkbox\"\n                    label=\"Use Custom Seed\"\n                    checked={useCustomSeed}\n                    onChange={(e) => onChangeCustomSeed()}\n                />\n            </FormGroup>\n\n            {useCustomSeed && (\n                <FormGroup>\n                    <FormControl\n                        type=\"text\"\n                        // value={seed}\n                        // onChange={(e) => setSeed(e.target.value)}\n                        placeholder=\"Enter seed\"\n                        value={seed}\n                        onChange={(e: any) => setSeed(e.target.value)}\n                    />\n                </FormGroup> \n            )}\n        </Form>\n    );\n};\n","import React, { useState } from \"react\";\nimport { InputGroup, FormControl, Dropdown } from \"react-bootstrap\";\n\ninterface TextInputWithHistoryProps {\n    value: string;\n    onChange: (newValue: string) => void;\n    history: string[];\n}\n\nconst TextInputWithHistory: React.FC<TextInputWithHistoryProps> = ({\n    value,\n    onChange,\n    history,\n}) => {\n    const [show, setShow] = useState(false);\n\n    const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        onChange(event.target.value);\n    };\n\n    const handleDropdownSelect = (eventKey: string | null) => {\n        if (eventKey) {\n            onChange(eventKey);\n        }\n        setShow(false);\n    };\n\n    const handleInputClick = () => {\n        setShow(!show);\n    };\n\n    return (\n        <div>\n            <FormControl\n                value={value}\n                onChange={handleInputChange}\n                onClick={handleInputClick}\n                onBlur={() => {\n                    setTimeout(() => setShow(false), 200);\n                }}\n            />\n            <Dropdown show={show} onSelect={handleDropdownSelect}>\n                <Dropdown.Toggle\n                    variant=\"success\"\n                    id=\"dropdown-basic\"\n                    style={{ height: \"0px\", padding: \"0px\", visibility: \"hidden\", position: \"absolute\" }}\n                />\n                <Dropdown.Menu style={{width: \"100%\", overflow: \"hidden\"}}>\n                    {history.map((item, index) => (\n                        <Dropdown.Item eventKey={item} key={index}>\n                            {item}\n                        </Dropdown.Item>\n                    ))}\n                </Dropdown.Menu>\n            </Dropdown>\n        </div>\n    );\n};\n\nexport default TextInputWithHistory;\n","import React, { FC, useEffect, useState } from \"react\";\nimport {\n    CreateImageInput,\n    StatusEnum,\n    Image,\n    AIBrushApi,\n    LoraConfig,\n} from \"../client\";\nimport {\n    aspectRatios,\n    DEFAULT_ASPECT_RATIO,\n    getClosestAspectRatio,\n    AspectRatio,\n} from \"../lib/aspecRatios\";\nimport loadImage from \"blueimp-load-image\";\nimport { AspectRatioSelector } from \"./AspectRatioSelector\";\nimport { getUpscaleLevel } from \"../lib/upscale\";\nimport { resizeEncodedImage } from \"../lib/imageutil\";\nimport { LocalImage } from \"../lib/models\";\nimport { controlnetTypes } from \"../lib/supportedModels\";\nimport { SeedInput } from \"./SeedInput\";\nimport ModelSelector from \"./ModelSelector\";\nimport { calculateImagesCost } from \"../lib/credits\";\nimport { CostIndicator } from \"./CostIndicator\";\nimport { recentPrompts, recentNegativePrompts } from \"../lib/recentList\";\nimport TextInputWithHistory from \"./TextInputWithHistory\";\nimport {\n    LoraModal,\n    SelectedLora,\n    selectedLorasFromConfigs,\n} from \"./LoraSelector\";\nimport { SelectedLoraTag } from \"./SelectedLora\";\nimport { LoraTriggers } from \"./LoraTriggers\";\nimport { recentLoras } from \"../lib/recentLoras\";\nimport { Item } from \"../lib/civit_loras\";\n\ninterface Props {\n    api: AIBrushApi;\n    parent: LocalImage | null;\n    creating: boolean;\n    assetsUrl: string;\n    onSubmit: (input: CreateImageInput) => void;\n    // go straight to editor without variations\n    onEdit: (input: CreateImageInput) => void;\n    onCancel: () => void;\n}\n\nexport function defaultArgs(): CreateImageInput {\n    return {\n        params: {\n            prompt: \"\",\n            negative_prompt: defaultNegativePrompt(),\n            width: 512,\n            height: 512,\n            steps: 20,\n            denoising_strength: 0.75,\n        },\n        label: \"\",\n        encoded_image: \"\",\n        encoded_mask: \"\",\n        model: \"Epic Diffusion\",\n        count: 4,\n    };\n}\n\nfunction defaultNegativePrompt(): string {\n    return (\n        recentNegativePrompts.getItems()[0] ||\n        \"low quality, distorted, deformed, dull, boring, plain, ugly, noise\"\n    );\n}\n\nexport const ImagePrompt: FC<Props> = ({\n    api,\n    parent,\n    creating,\n    assetsUrl,\n    onSubmit,\n    onCancel,\n    onEdit,\n}) => {\n    const [prompt, setPrompt] = useState<string>(\"\");\n    const [negativePrompt, setNegativePrompt] = useState<string>(\n        defaultNegativePrompt()\n    );\n    const [count, setCount] = useState<number>(4);\n    const [variationStrength, setVariationStrength] = useState<number>(0.75);\n    const [aspectRatio, setAspectRatio] =\n        useState<number>(DEFAULT_ASPECT_RATIO);\n    const [parentId, setParentId] = useState<string | null>(null);\n    const [advancedView, setAdvancedView] = useState<boolean>(false);\n    const [encodedImage, setEncodedImage] = useState<string>(\"\");\n    const [model, setModel] = useState<string>(\"Epic Diffusion\");\n\n    const [selectingModel, setSelectingModel] = useState<boolean>(false);\n\n    const [controlnetType, setControlnetType] = useState<string | undefined>();\n    const [cfgScale, setCfgScale] = useState<number>(7.5);\n    const [seed, setSeed] = useState<string>(\"\");\n    const [size, setSize] = useState<number>(1);\n\n    const [selectingLora, setSelectingLora] = useState<boolean>(false);\n    const [selectedLoras, setSelectedLoras] = useState<SelectedLora[]>([]);\n\n    const defaultAspectRatio = aspectRatios[DEFAULT_ASPECT_RATIO];\n\n    const [aspectRatioDetails, setAspectRatioDetails] = useState<AspectRatio>(\n        aspectRatios[DEFAULT_ASPECT_RATIO]\n    );\n    let [originalWidth, setOriginalWidth] = useState<number>(\n        defaultAspectRatio.width\n    );\n    let [originalHeight, setOriginalHeight] = useState<number>(\n        defaultAspectRatio.height\n    );\n\n    // const aspectRatioDetails = aspectRatios[aspectRatio];\n\n    const resetState = () => {\n        setPrompt(\"\");\n        setNegativePrompt(\n            recentNegativePrompts.getItems()[0] || defaultNegativePrompt\n        );\n        // setCount(4);\n        setAdvancedView(false);\n        setParentId(null);\n        // setVariationStrength(0.75);\n        setAspectRatio(DEFAULT_ASPECT_RATIO);\n        setAspectRatioDetails(aspectRatios[DEFAULT_ASPECT_RATIO]);\n        setEncodedImage(\"\");\n        // setCfgScale(7.5);\n        setSeed(\"\");\n    };\n\n    const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\n        if (negativePrompt) {\n            recentNegativePrompts.addItem(negativePrompt);\n        }\n        e.preventDefault();\n        const args = defaultArgs();\n        args.params.prompt = prompt || \"\";\n        args.params.negative_prompt = negativePrompt || \"\";\n        args.count = seed ? 1 : count;\n        args.parent = parentId || undefined;\n        args.params.denoising_strength = variationStrength;\n        args.nsfw = true;\n        args.model = model;\n        args.temporary = true;\n        args.params.controlnet_type = controlnetType as any;\n        args.params.cfg_scale = cfgScale;\n        args.params.seed = seed || undefined;\n        args.params.loras = selectedLoras.map((l) => l.config);\n        if (parent) {\n            const bestMatch = getClosestAspectRatio(\n                parent.params.width!,\n                parent.params.height!\n            ).scale(size);\n            args.params.width = bestMatch.width;\n            args.params.height = bestMatch.height;\n        } else {\n            const bestMatch = getClosestAspectRatio(\n                aspectRatioDetails.width,\n                aspectRatioDetails.height\n            ).scale(size);\n            args.params.width = bestMatch.width;\n            args.params.height = bestMatch.height;\n        }\n        if (encodedImage) {\n            args.encoded_image = await resizeEncodedImage(\n                encodedImage,\n                args.params.width,\n                args.params.height,\n                \"png\"\n            );\n        }\n\n        resetState();\n        onSubmit(args);\n    };\n\n    const handleEdit = () => {\n        if (negativePrompt) {\n            recentNegativePrompts.addItem(negativePrompt);\n        }\n        const args = defaultArgs();\n        args.params.prompt = prompt || \"\";\n        args.params.negative_prompt = negativePrompt || \"\";\n        args.count = 1;\n        args.parent = parentId || undefined;\n        // args.stable_diffusion_strength = variationStrength;\n        args.params.denoising_strength = variationStrength;\n        args.status = StatusEnum.Completed;\n        args.params.width = originalWidth;\n        args.params.height = originalHeight;\n        args.params.cfg_scale = cfgScale;\n        args.nsfw = false;\n        args.model = model;\n        if (encodedImage) {\n            args.encoded_image = encodedImage;\n        }\n\n        resetState();\n        onEdit(args);\n    };\n\n    const handleCancel = () => {\n        resetState();\n        onCancel();\n    };\n\n    const onSelectModel = (model: string) => {\n        setModel(model);\n        setSelectingModel(false);\n    };\n\n    const onImageSelected = async (e: React.ChangeEvent<HTMLInputElement>) => {\n        const file = e.target.files && e.target.files[0];\n        if (!file) {\n            return;\n        }\n        loadImage(\n            file,\n            (img: Event | HTMLImageElement | HTMLCanvasElement) => {\n                if (!(img instanceof HTMLCanvasElement)) {\n                    return;\n                }\n                // try to match width and height to a supported aspect ratio\n                const width = img.width;\n                const height = img.height;\n                let bestMatch = getClosestAspectRatio(width, height);\n\n                const canvas = document.createElement(\"canvas\");\n                // canvas.width = bestMatch.width;\n                // canvas.height = bestMatch.height;\n                canvas.width = width;\n                canvas.height = height;\n                const ctx = canvas.getContext(\"2d\");\n                if (!ctx) {\n                    return;\n                }\n                ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n\n                // convert image to base64\n                // const canvas = img as HTMLCanvasElement\n                const dataUrl = canvas.toDataURL(\"image/png\");\n                const base64 = dataUrl.split(\",\")[1];\n                setEncodedImage(base64);\n                // get the index of the best match\n                setAspectRatio(\n                    aspectRatios.findIndex((a) => a.id === bestMatch.id)\n                );\n                setAspectRatioDetails(bestMatch);\n                setOriginalWidth(width);\n                setOriginalHeight(height);\n                // remove canvas\n                canvas.remove();\n            },\n            {\n                maxWidth: 4096,\n                maxHeight: 4096,\n                canvas: true,\n            }\n        );\n    };\n\n    useEffect(() => {\n        if (parent) {\n            const imageData = parent.imageData;\n            if (imageData) {\n                setEncodedImage(imageData.split(\",\")[1]);\n            }\n            setPrompt(parent.params.prompt || \"\");\n            setNegativePrompt(\n                parent.params.negative_prompt || defaultNegativePrompt()\n            );\n            setCount(4);\n            setParentId(parent.id);\n            setAdvancedView(true);\n            setVariationStrength(parent.params.denoising_strength || 0.75);\n            setModel(parent.model);\n            setCfgScale(parent.params.cfg_scale || 7.5);\n            if (parent.params.loras && parent.params.loras.length > 0) {\n                selectedLorasFromConfigs(parent.params.loras).then((loras) => {\n                    setSelectedLoras(loras);\n                });\n            } else if (selectedLoras.length > 0) {\n                setSelectedLoras([]);\n            }\n        } else {\n            resetState();\n        }\n    }, [parent]);\n\n    // unset controlnet when encodedImage is null\n    useEffect(() => {\n        if (!encodedImage) {\n            setControlnetType(undefined);\n        }\n    }, [encodedImage]);\n\n    const scaledAspectRatio = aspectRatioDetails.scale(size);\n    const imagesCost = calculateImagesCost(\n        count,\n        scaledAspectRatio.width,\n        scaledAspectRatio.height\n    );\n\n    const onAddLora = (lora: SelectedLora) => {\n        setSelectedLoras([...selectedLoras, lora]);\n        setSelectingLora(false);\n    };\n\n    const onRemoveLora = (lora: SelectedLora) => {\n        setSelectedLoras(\n            selectedLoras.filter(\n                (selectedLora) => selectedLora.config.name !== lora.config.name\n            )\n        );\n    };\n\n    const onAddTrigger = (trigger: string) => {\n        const parts = [prompt];\n        if (prompt.length > 0 && !prompt.endsWith(\",\")) {\n            parts.push(\", \");\n        }\n        parts.push(trigger);\n        setPrompt(parts.join(\"\"));\n    };\n\n    return (\n        <>\n            <form onSubmit={handleSubmit}>\n                <div className=\"homepage-prompt\">\n                    <div className=\"input-group\">\n                        <input\n                            className=\"form-control prompt\"\n                            placeholder=\"What would you like to create?\"\n                            value={prompt}\n                            onChange={(e) => setPrompt(e.target.value)}\n                        />\n\n                        <div className=\"input-group-append\">\n                            <button\n                                type=\"submit\"\n                                className=\"btn btn-secondary light-button\"\n                                style={{ marginLeft: \"8px\" }}\n                                disabled={!prompt || creating}\n                            >\n                                {/* paintbrush button */}\n                                {!creating && (\n                                    <i className=\"fas fa-paint-brush\"></i>\n                                )}\n                                {/* spinner button */}\n                                {creating && (\n                                    <i className=\"fas fa-spinner fa-spin\"></i>\n                                )}\n                            </button>\n                        </div>\n                    </div>\n                    {selectedLoras.length > 0 && (\n                        <LoraTriggers\n                            prompt={prompt}\n                            selectedLoras={selectedLoras}\n                            onAddTrigger={onAddTrigger}\n                        />\n                    )}\n                    {!seed && (\n                        <div className=\"form-group\" style={{marginTop: \"8px\"}}>\n                            <label htmlFor=\"count\">Count: {count}</label>\n                            {/* range slider from 1 to 20 */}\n                            <input\n                                type=\"range\"\n                                className=\"form-control-range\"\n                                id=\"count\"\n                                min=\"1\"\n                                max=\"20\"\n                                value={count}\n                                onChange={(e) =>\n                                    setCount(parseInt(e.target.value))\n                                }\n                            />\n                            <span className=\"helptext\">\n                                This is how many images you want to generate\n                            </span>\n                        </div>\n                    )}\n                    <CostIndicator imagesCost={imagesCost} />\n                    <div\n                        style={{\n                            marginTop: \"24px\",\n                        }}\n                    >\n                        <a\n                            href=\"javascript:void(0)\"\n                            onClick={() => setAdvancedView(!advancedView)}\n                            style={{\n                                color: \"white\",\n                                textDecoration: \"underline\",\n                            }}\n                        >\n                            Advanced\n                        </a>\n                        &nbsp;\n                        {advancedView ? (\n                            <i className=\"fas fa-chevron-up\"></i>\n                        ) : (\n                            <i className=\"fas fa-chevron-down\"></i>\n                        )}\n                    </div>\n                    {advancedView && (\n                        <div className=\"homepage-prompt-advanced\">\n                            {encodedImage && (\n                                <div className=\"form-group\">\n                                    <label>Init Image</label>\n                                    <img\n                                        style={{\n                                            display: \"block\",\n                                            marginLeft: \"auto\",\n                                            marginRight: \"auto\",\n                                            maxWidth: \"100%\",\n                                        }}\n                                        src={`data:image/png;base64,${encodedImage}`}\n                                    />\n                                </div>\n                            )}\n                            {!parent && !encodedImage && (\n                                <AspectRatioSelector\n                                    aspectRatio={aspectRatio}\n                                    onChange={(aspectRatioId) => {\n                                        setAspectRatio(aspectRatioId);\n                                        setAspectRatioDetails(\n                                            aspectRatios[aspectRatioId]\n                                        );\n                                    }}\n                                />\n                            )}\n                            <div className=\"form-group\">\n                                <div\n                                    style={{\n                                        display: \"block\",\n                                        maxWidth: encodedImage\n                                            ? \"350px\"\n                                            : \"180px\",\n                                        marginTop: \"40px\",\n                                        marginRight: \"auto\",\n                                        marginLeft: \"auto\",\n                                    }}\n                                >\n                                    <label\n                                        id=\"loadimage-wrapper\"\n                                        className={`btn btn-primary `}\n                                        style={{ display: \"inline\" }}\n                                    >\n                                        {/* upload image */}\n                                        <i className=\"fas fa-upload\"></i>&nbsp;\n                                        {encodedImage || parent\n                                            ? \"Replace\"\n                                            : \"Upload\"}\n                                        <input\n                                            id=\"loadimage\"\n                                            type=\"file\"\n                                            style={{ display: \"none\" }}\n                                            onChange={onImageSelected}\n                                        />\n                                    </label>\n                                    {encodedImage && (\n                                        <label\n                                            className=\"btn btn-secondary\"\n                                            onClick={() => setEncodedImage(\"\")}\n                                            style={{ display: \"inline\" }}\n                                        >\n                                            {/* remove image */}\n                                            <i className=\"fas fa-trash\"></i>\n                                            &nbsp; Remove\n                                        </label>\n                                    )}\n                                </div>\n                            </div>\n                            <div className=\"form-group\">\n                                <label htmlFor=\"model\">Model</label>\n                                <div>\n                                    <button\n                                        type=\"button\"\n                                        className=\"btn btn-secondary light-button\"\n                                        onClick={() => setSelectingModel(true)}\n                                    >\n                                        {model}&nbsp;\n                                        <i className=\"fas fa-caret-down\"></i>\n                                    </button>\n                                </div>\n                            </div>\n                            <div className=\"form-group\">\n                                {/* loras */}\n                                <label htmlFor=\"loras\">Loras</label>\n                                <div>\n                                    {selectedLoras.map((lora) => (\n                                        <SelectedLoraTag\n                                            key={lora.lora.name}\n                                            lora={lora}\n                                            onRemove={(lora) =>\n                                                onRemoveLora(lora)\n                                            }\n                                        />\n                                    ))}\n                                    {/* add lora button */}\n                                    {selectedLoras.length < 5 && (\n                                        <button\n                                            type=\"button\"\n                                            className=\"btn btn-secondary light-button\"\n                                            style={{ marginLeft: \"8px\" }}\n                                            onClick={() =>\n                                                setSelectingLora(true)\n                                            }\n                                        >\n                                            <i className=\"fas fa-plus\"></i>\n                                            &nbsp;Add Lora\n                                        </button>\n                                    )}\n                                </div>\n                            </div>\n                            <div className=\"form-group\">\n                                {/* negative prompt */}\n                                <label htmlFor=\"negativePrompt\">\n                                    Negative Prompt\n                                </label>\n                                {/* <input\n                                type=\"text\"\n                                className=\"form-control\"\n                                id=\"negativePrompt\"\n                                placeholder=\"What would you like to avoid?\"\n                                value={negativePrompt}\n                                onChange={(e) =>\n                                    setNegativePrompt(e.target.value)\n                                }\n                            /> */}\n                                <TextInputWithHistory\n                                    history={recentNegativePrompts.getItems()}\n                                    value={negativePrompt}\n                                    onChange={setNegativePrompt}\n                                />\n                                <span className=\"helptext\">\n                                    Try descriptive words like \"blurry\" or\n                                    \"distorted\"\n                                </span>\n                            </div>\n                            {/* size slider */}\n                            <div className=\"form-group\">\n                                <label htmlFor=\"size\">\n                                    Size: {scaledAspectRatio.width} x{\" \"}\n                                    {scaledAspectRatio.height}\n                                </label>\n                                {/* range slider from 1 to 2 in increments of 0.1 */}\n                                <input\n                                    type=\"range\"\n                                    className=\"form-control-range\"\n                                    id=\"size\"\n                                    min=\"1\"\n                                    max=\"2\"\n                                    step=\"0.1\"\n                                    value={size}\n                                    onChange={(e) =>\n                                        setSize(parseFloat(e.target.value))\n                                    }\n                                />\n                                <span className=\"helptext\">\n                                    This allows you to adjust the size of your\n                                    images. Larger images cost more credits.\n                                </span>\n                            </div>\n\n                            {(parentId || encodedImage) && (\n                                <div className=\"form-group\">\n                                    {/* variation strength */}\n                                    <label htmlFor=\"variationStrength\">\n                                        Variation Strength:&nbsp;\n                                        {(variationStrength * 100).toFixed(0)}%\n                                    </label>\n                                    <input\n                                        type=\"range\"\n                                        className=\"form-control-range\"\n                                        id=\"variationStrength\"\n                                        min=\"0.05\"\n                                        max=\"0.95\"\n                                        step=\"0.05\"\n                                        value={variationStrength}\n                                        onChange={(e) =>\n                                            setVariationStrength(\n                                                parseFloat(e.target.value)\n                                            )\n                                        }\n                                    />\n                                    <span className=\"helptext\">\n                                        This is how much variation you want to\n                                        see from the parent image\n                                    </span>\n                                </div>\n                            )}\n                            {encodedImage && (\n                                // controlnet type - canny, hed, depth, normal, openpose, seg, scribble, fakescribbles, hough\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"controlNetType\">\n                                        Control Net Type\n                                    </label>\n                                    <select\n                                        className=\"form-control\"\n                                        id=\"controlNetType\"\n                                        value={controlnetType}\n                                        onChange={(e) =>\n                                            setControlnetType(e.target.value)\n                                        }\n                                    >\n                                        <option value=\"\">None</option>\n                                        {controlnetTypes.map((type) => (\n                                            <option\n                                                value={type}\n                                                key={`type-${type}`}\n                                            >\n                                                {type}\n                                            </option>\n                                        ))}\n                                    </select>\n                                    <span className=\"helptext\">\n                                        Controlnet is an advanced way of\n                                        controlling the output of image\n                                        generation. You can read more about it{\" \"}\n                                        <a\n                                            target=\"_blank\"\n                                            href=\"https://bootcamp.uxdesign.cc/controlnet-and-stable-diffusion-a-game-changer-for-ai-image-generation-83555cb942fc\"\n                                        >\n                                            here.\n                                        </a>\n                                    </span>\n                                </div>\n                            )}\n                            {/* cfg scale. Slider from 1 to 20 in increments of 0.1 */}\n                            <div className=\"form-group\">\n                                <label>CFG Scale: {cfgScale.toFixed(1)}</label>\n                                <input\n                                    type=\"range\"\n                                    className=\"form-control-range\"\n                                    min=\"1\"\n                                    max=\"20\"\n                                    step=\"0.5\"\n                                    value={cfgScale}\n                                    onChange={(e) =>\n                                        setCfgScale(parseFloat(e.target.value))\n                                    }\n                                />\n                                <span className=\"helptext\">\n                                    Adjust the CFG scale to control how much the\n                                    image looks like the prompt.\n                                </span>\n                            </div>\n                            <SeedInput seed={seed} setSeed={setSeed} />\n\n                            <div\n                                className=\"form-group\"\n                                style={{ minHeight: \"20px\" }}\n                            >\n                                <div className=\"float-right\">\n                                    {parent && (\n                                        <button\n                                            type=\"button\"\n                                            className=\"btn btn-secondary light-button\"\n                                            onClick={handleCancel}\n                                        >\n                                            <i className=\"fas fa-times\"></i>\n                                            &nbsp;CANCEL\n                                        </button>\n                                    )}\n                                    <button\n                                        type=\"submit\"\n                                        className=\"btn btn-primary\"\n                                        style={{ marginLeft: \"8px\" }}\n                                        disabled={!prompt || creating}\n                                    >\n                                        {/* paintbrush button */}\n                                        {!creating && (\n                                            <i className=\"fas fa-paint-brush\"></i>\n                                        )}\n                                        {/* spinner button */}\n                                        {creating && (\n                                            <i className=\"fas fa-spinner fa-spin\"></i>\n                                        )}\n                                        &nbsp;PAINT\n                                    </button>\n\n                                    <button\n                                        type=\"button\"\n                                        className=\"btn btn-secondary light-button\"\n                                        onClick={handleEdit}\n                                        style={{ marginLeft: \"8px\" }}\n                                        disabled={!prompt || creating}\n                                    >\n                                        <i className=\"fas fa-edit\"></i>\n                                        &nbsp;EDIT\n                                    </button>\n                                </div>\n                            </div>\n                        </div>\n                    )}\n                </div>\n            </form>\n            {selectingModel && (\n                <ModelSelector\n                    onCancel={() => setSelectingModel(false)}\n                    onSelectModel={onSelectModel}\n                    initialSelectedModel={model}\n                    inpainting={false}\n                />\n            )}\n            {selectingLora && (\n                <LoraModal\n                    onCancel={() => setSelectingLora(false)}\n                    onConfirm={(lora) => onAddLora(lora)}\n                />\n            )}\n        </>\n    );\n};\n","import { FC, useEffect, useState } from \"react\";\nimport { ListGroup } from \"react-bootstrap\";\nimport { StableDiffusionModel } from \"../client\";\n\ninterface Props {\n    models: StableDiffusionModel[];\n    onSelectModel: (model: StableDiffusionModel) => void;\n    selectedModel: string;\n}\n\nconst MOBILE_HEIGHT_PERCENT = 0.3;\n\nexport const ModelList: FC<Props> = ({ models, onSelectModel, selectedModel }) => {\n    const [maxHeight, setMaxHeight] = useState(window.innerWidth < 576 ? window.innerHeight * MOBILE_HEIGHT_PERCENT : window.innerHeight * 0.7); // Set maxHeight to 80% of the viewport height\n\n    useEffect(() => {\n        const handleResize = () => {\n            let maxHeight = window.innerHeight * 0.7;\n            if (window.innerWidth < 576) {\n                maxHeight = window.innerHeight * MOBILE_HEIGHT_PERCENT;\n            }\n            setMaxHeight(maxHeight); // Update maxHeight based on the current viewport height\n        };\n\n        window.addEventListener(\"resize\", handleResize);\n        return () => {\n            window.removeEventListener(\"resize\", handleResize);\n        };\n    }, []);\n\n    return (\n        <ListGroup\n            style={{\n                maxHeight: `${maxHeight}px`,\n                overflowY: \"auto\",\n                border: \"1px solid #808080\",\n                marginBottom: \"8px\",\n            }}\n        >\n            {models.map((model) => (\n                <ListGroup.Item\n                    key={model.name}\n                    active={selectedModel === model.name}\n                    onClick={() => onSelectModel(model)}\n                    style={{\n                        cursor: \"pointer\",\n                    }}\n                >\n                    {model.name}\n                </ListGroup.Item>\n            ))}\n        </ListGroup>\n    );\n};\n","import { useState, useEffect } from \"react\";\n\nexport class SimpleCache {\n    private storage: Storage;\n\n    constructor() {\n        this.storage = window.localStorage;\n    }\n\n    setItem(key: string, value: any, ttl = 60 * 60) {\n        const item: {\n            value: any;\n            expiry: number;\n        } = {\n            value,\n            expiry: Date.now() + ttl * 1000,\n        };\n        this.storage.setItem(key, JSON.stringify(item));\n    }\n\n    getItem(key: string): any {\n        try {\n            const itemStr = this.storage.getItem(key);\n            if (!itemStr) {\n                return null;\n            }\n    \n            const item: {\n                value: any;\n                expiry: number;\n            } = JSON.parse(itemStr);\n            if (Date.now() > item.expiry) {\n                this.storage.removeItem(key);\n                return null;\n            }\n            return item.value;\n        } catch (error) {\n            console.error(error);\n            return null;\n        }\n    }\n\n    removeItem(key: string) {\n        this.storage.removeItem(key);\n    }\n\n    clear() {\n        this.storage.clear();\n    }\n}\n\nconst cache = new SimpleCache();\n\nexport function useCache<T>(key: string, initialValue: T): [T, React.Dispatch<React.SetStateAction<T>>] {\n  const [value, setValue] = useState<T>(() => {\n    const cachedValue = cache.getItem(key);\n    return cachedValue !== null ? cachedValue : initialValue;\n  });\n\n  useEffect(() => {\n    cache.setItem(key, value);\n  }, [key, value]);\n\n  return [value, setValue];\n}\n","import React, { useEffect, useState } from \"react\";\nimport { Button, Modal, Form, ListGroup, Row, Col } from \"react-bootstrap\";\nimport axios from \"axios\";\nimport { AIBrushApi, StableDiffusionModel } from \"../client\";\nimport { ModelList } from \"./ModelList\";\nimport { useCache } from \"../lib/localcache\";\nimport { recentModels } from \"../lib/recentList\";\n\nconst httpclient = axios.create();\n\ninterface ModelSelectorProps {\n    initialSelectedModel: string;\n    onSelectModel: (model: string) => void;\n    onCancel: () => void;\n    inpainting: boolean;\n}\n\n\n\nconst ModelSelector: React.FC<ModelSelectorProps> = ({\n    initialSelectedModel,\n    onSelectModel,\n    onCancel,\n    inpainting,\n}) => {\n    const [models, setModels] = useCache<StableDiffusionModel[]>(\"models\", []);\n    const [selectedModel, setSelectedModel] =\n        useState<StableDiffusionModel | null>(null);\n    const [searchTerm, setSearchTerm] = useState(\"\");\n\n    const filteredModels = models.filter((model) =>\n        model.inpainting === inpainting && model.name.toLowerCase().includes(searchTerm.toLowerCase())\n    );\n\n    const handleSelect = () => {\n        console.log(\"Selected model:\", selectedModel);\n        if (selectedModel) {\n            onSelectModel(selectedModel.name);\n        }\n    };\n\n    const handleSearch = (e: React.ChangeEvent<HTMLInputElement>) => {\n        setSearchTerm(e.target.value);\n    };\n\n    const handleModelClick = (model: StableDiffusionModel) => {\n        setSelectedModel(model);\n    };\n\n    useEffect(() => {\n        const setSortedModels = (\n            selectedModel: StableDiffusionModel,\n            models: StableDiffusionModel[]\n        ) => {\n            recentModels.addItem(selectedModel.name);\n\n            const recentModelNames = recentModels.getItems();\n            // map from model name to index\n            const recentModelIndices: { [key: string]: number } = {};\n            recentModelNames.forEach((name, index) => {\n                recentModelIndices[name] = index;\n            });\n            // sort models by recentness\n            const sortedModels = models.sort((a, b) => {\n                const aIndex = recentModelIndices[a.name];\n                const bIndex = recentModelIndices[b.name];\n                if (aIndex === undefined && bIndex === undefined) {\n                    return 0;\n                } else if (aIndex === undefined) {\n                    return 1;\n                } else if (bIndex === undefined) {\n                    return -1;\n                } else {\n                    return aIndex - bIndex;\n                }\n            });\n\n            setModels(sortedModels);\n        };\n\n        if (!models || models.length === 0) {\n            // api.getModels().then((res) => {\n            //     console.log(res);\n            //     const selectedModel =\n            //         res.data[initialSelectedModel] ||\n            //         Object.values(res.data)[0];\n            //     console.log(\"Selected model:\", selectedModel);\n            //     setSelectedModel(selectedModel);\n            //     setSortedModels(selectedModel, Object.values(res.data));\n            // });\n            axios.get(\"https://raw.githubusercontent.com/Haidra-Org/AI-Horde-image-model-reference/main/stable_diffusion.json\").then((res) => {\n                const data = res.data as {[key: string]: StableDiffusionModel};\n                const selectedModel =\n                    data[initialSelectedModel] ||\n                    Object.values(data)[0];\n                setSelectedModel(selectedModel);\n                setSortedModels(selectedModel, Object.values(data));\n            });\n        } else {\n            const selectedModel =\n                models.find((model) => model.name === initialSelectedModel) ||\n                models[0];\n            setSelectedModel(selectedModel);\n            setSortedModels(selectedModel, models);\n        }\n    }, [models]);\n\n    useEffect(() => {\n        if (initialSelectedModel) {\n            recentModels.addItem(initialSelectedModel);\n        }\n    }, [initialSelectedModel]);\n\n    return (\n        <>\n            <Modal show={true} onHide={onCancel} size=\"xl\">\n                <Modal.Header closeButton>\n                    <Modal.Title>Select Model</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <Form.Control\n                        type=\"text\"\n                        placeholder=\"Search\"\n                        value={searchTerm}\n                        onChange={handleSearch}\n                    />\n                    <Row className=\"mt-3\">\n                        <Col sm={4}>\n                            <ModelList\n                                models={filteredModels}\n                                onSelectModel={handleModelClick}\n                                selectedModel={selectedModel?.name || \"\"}\n                            />\n                        </Col>\n                        <Col sm={8}>\n                            {selectedModel && (\n                                <>\n                                    <h5>{selectedModel.name}</h5>\n                                    <p>{selectedModel.description}</p>\n                                    {selectedModel.showcases &&\n                                        selectedModel.showcases.length > 0 && (\n                                            <img\n                                                src={selectedModel.showcases[0]}\n                                                alt=\"Showcase\"\n                                                style={{\n                                                    width: \"70%\",\n                                                }}\n                                            />\n                                        )}\n                                </>\n                            )}\n                        </Col>\n                    </Row>\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button variant=\"secondary\" onClick={onCancel}>\n                        Cancel\n                    </Button>\n                    <Button\n                        variant=\"primary\"\n                        onClick={handleSelect}\n                        disabled={!selectedModel}\n                    >\n                        Select\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n        </>\n    );\n};\n\nexport default ModelSelector;\n","import { OverlayTrigger, Tooltip } from \"react-bootstrap\";\n\ninterface Props {\n    onClick: () => void;\n}\n\nexport const ResetToDefaultIcon = ({ onClick }: Props) => {\n    return (\n        <OverlayTrigger\n            placement=\"top\"\n            overlay={<Tooltip id=\"reset-tooltip\">Reset to Default</Tooltip>}\n        >\n            <i className=\"fa fa-sync\" style={{\n                cursor: \"pointer\",\n            }} onClick={onClick}></i>\n        </OverlayTrigger>\n    );\n};\n","import React, { FC, useState, useEffect } from \"react\";\nimport { ChromePicker } from \"react-color\";\n\nimport \"./ColorPicker.css\"\n\ninterface Props {\n    color: string;\n    onColorSelected: (color: string) => void;\n}\n\nexport const ColorPicker: FC<Props> = ({ color, onColorSelected }) => {\n    const [displayColorPicker, setDisplayColorPicker] = useState(false);\n    const [tmpColor, setTmpColor] = useState(color);\n\n    const handleClick = () => {\n        setDisplayColorPicker(!displayColorPicker);\n        if (displayColorPicker) {\n            onColorSelected(tmpColor);\n        }\n    };\n\n    const handleClose = () => {\n        setDisplayColorPicker(false);\n        if (displayColorPicker) {\n            onColorSelected(tmpColor);\n        }\n    };\n\n    const popover: React.CSSProperties = {\n        position: \"absolute\",\n        zIndex: 2,\n    };\n    const cover: React.CSSProperties = {\n        position: \"fixed\",\n        top: \"0px\",\n        right: \"0px\",\n        bottom: \"0px\",\n        left: \"0px\",\n    };\n\n    return (\n        <>\n            <button className=\"color-picker\" onClick={handleClick}>\n                <i className=\"fas fa-plus\" />\n            </button>\n            {displayColorPicker ? (\n                <div style={popover}>\n                    <div style={cover} onClick={handleClose} />\n                    <ChromePicker\n                        color={tmpColor}\n                        onChange={(color) => setTmpColor(color.hex)}\n                        onChangeComplete={(color) => setTmpColor(color.hex)}\n                    />\n                </div>\n            ) : null}\n        </>\n    );\n};\n","import React, { FC, useEffect, useState } from \"react\";\nimport { ChromePicker } from \"react-color\";\n\nimport { Renderer } from \"./renderer\";\nimport { BaseTool, Tool } from \"./tool\";\nimport { ZoomHelper } from \"./zoomHelper\";\nimport { PaletteButton } from \"./PaletteButton\";\nimport { ColorPicker } from \"./ColorPicker\";\n\nexport const defaultColors = [\n    \"#FFFFFF\",\n    \"#5A2C02\",\n    \"#386EB6\",\n    \"#6B31A1\",\n    \"#CB2C26\",\n    \"#000000\",\n    \"#888888\",\n    \"#50B050\",\n    \"#FBDB37\",\n    \"#E88D2D\",\n];\n\nexport class PencilTool extends BaseTool implements Tool {\n    private brushSize = 10;\n\n    private panning = false;\n    private isDrawing = false;\n    private lastX = 0;\n    private lastY = 0;\n    private colorPicking = false;\n    private lastPickedColor = \"#000000\";\n    private _dirty = false;\n\n    set dirty(dirty: boolean) {\n        this._dirty = dirty;\n        if (this.dirtyListener) {\n            this.dirtyListener(dirty);\n        }\n    }\n\n    get dirty() {\n        return this._dirty;\n    }\n\n    private dirtyListener?: (dirty: boolean) => void;\n    private colorPickedListener?: (color: string) => void;\n\n    constructor(\n        renderer: Renderer,\n        private layer: \"base\" | \"mask\",\n        private brushColor = defaultColors[0],\n        name = \"pencil\"\n    ) {\n        super(renderer, name);\n    }\n\n    private sync() {\n        if (this.colorPicking) {\n            this.renderer.setCursor({\n                x: this.lastX,\n                y: this.lastY,\n                radius: this.renderer.getWidth() / 20,\n                color: this.lastPickedColor,\n                type: \"colorpicker\",\n            });\n        } else {\n            this.renderer.setCursor({\n                x: this.lastX,\n                y: this.lastY,\n                radius: this.brushSize / 2,\n                color: this.brushColor,\n                type: \"circle-fill\",\n            });\n        }\n    }\n\n    updateArgs(args: any) {\n        super.updateArgs(args);\n        this.brushSize = args.brushSize || 10;\n        this.brushColor = args.brushColor || defaultColors[0];\n        this.sync();\n    }\n\n    onMouseDown(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        if (this.colorPicking) {\n            return;\n        }\n        if (event.button === 0) {\n            let { x, y } = this.zoomHelper.translateMouseToCanvasCoordinates(\n                event.nativeEvent.offsetX,\n                event.nativeEvent.offsetY\n            );\n            this.renderer.drawPoint(\n                x,\n                y,\n                this.brushSize,\n                this.brushColor,\n                this.layer\n            );\n            this.isDrawing = true;\n            this.lastX = x;\n            this.lastY = y;\n            this.dirty = true;\n        } else if (event.button === 1) {\n            this.panning = true;\n        }\n        this.sync();\n    }\n\n    onMouseMove(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>): void {\n        let { x, y } = this.zoomHelper.translateMouseToCanvasCoordinates(\n            event.nativeEvent.offsetX,\n            event.nativeEvent.offsetY\n        );\n        if (this.colorPicking) {\n            this.lastPickedColor = this.renderer.getPixel(x, y);\n        } else if (this.panning) {\n            this.zoomHelper.onPan(event);\n        } else {\n            if (this.isDrawing) {\n                this.renderer.drawLine(\n                    this.lastX,\n                    this.lastY,\n                    x,\n                    y,\n                    this.brushSize,\n                    this.brushColor,\n                    this.layer\n                );\n                this.dirty = true;\n            }\n        }\n        this.lastX = x;\n        this.lastY = y;\n        this.sync();\n    }\n\n    onMouseUp(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>): void {\n        if (event.button === 0) {\n            this.isDrawing = false;\n            if (this.colorPicking) {\n                this.colorPicking = false;\n                this.brushColor = this.lastPickedColor;\n                if (this.colorPickedListener) {\n                    this.colorPickedListener(this.lastPickedColor);\n                }\n            }\n        } else if (event.button === 1) {\n            this.panning = false;\n        }\n        this.sync();\n    }\n\n    onWheel(event: WheelEvent) {\n        this.zoomHelper.onWheel(event);\n        this.sync();\n    }\n\n    cancel() {\n        // kind of a hack, clears the selection layer\n        this.renderer.setEditImage(null);\n        this.dirty = false;\n    }\n\n    confirm() {\n        this.renderer.commitSelection();\n        const encodedImage = this.renderer.getEncodedImage(null);\n        if (encodedImage && this.saveListener) {\n            this.saveListener(encodedImage);\n        }\n        this.dirty = false;\n    }\n\n    onSaveImage(listener: (encodedImage: string) => void): void {\n        this.saveListener = listener;\n    }\n\n    onDirty(listener: (dirty: boolean) => void): void {\n        this.dirtyListener = listener;\n    }\n\n    destroy(): boolean {\n        if (this.dirty) {\n            this.renderer.commitSelection();\n        }\n        return true;\n    }\n\n    beginColorpicker(): void {\n        this.colorPicking = true;\n        this.sync();\n    }\n\n    onColorPicked(listener: (color: string) => void): void {\n        this.colorPickedListener = listener;\n    }\n}\n\ninterface ControlsProps {\n    renderer: Renderer;\n    tool: PencilTool;\n    colors: string[];\n}\n\nconst MAX_PALETTE_SIZE = 30;\n\nfunction addToPalette(palette: string[], color: string): string[] {\n    if (palette.indexOf(color) === -1) {\n        // insert at the beginning\n        palette = [color, ...palette];\n    }\n    if (palette.length > MAX_PALETTE_SIZE) {\n        palette = palette.slice(0, MAX_PALETTE_SIZE);\n    }\n    return palette;\n}\n\nexport const Controls: FC<ControlsProps> = ({ renderer, tool, colors }) => {\n    const [brushSize, setBrushSize] = useState(10);\n    const [brushColor, setBrushColor] = useState(colors[0]);\n    const [palette, setPalette] = useState(colors);\n    const [dirty, setDirty] = useState(false);\n\n    tool.onDirty(setDirty);\n\n    useEffect(() => {\n        tool.updateArgs({\n            brushSize,\n            brushColor,\n            palette,\n        });\n    }, [brushSize, brushColor, palette]);\n\n    const onColorSelected = (color: string) => {\n        setBrushColor(color);\n        setPalette(addToPalette(palette, color));\n    };\n\n    tool.onColorPicked(onColorSelected);\n\n    return (\n        <div style={{ marginTop: \"16px\" }}>\n            <div className=\"form-group\">\n                <label style={{ width: \"100%\" }}>\n                    Brush size\n                    <small\n                        className=\"form-text text-muted\"\n                        style={{ float: \"right\" }}\n                    >\n                        {brushSize}px\n                    </small>\n                </label>\n                <input\n                    type=\"range\"\n                    className=\"form-control-range\"\n                    min=\"1\"\n                    max=\"100\"\n                    value={brushSize}\n                    onChange={(e) => setBrushSize(parseInt(e.target.value))}\n                />\n            </div>\n            <div\n                style={{\n                    display: \"flex\",\n                    flexDirection: \"row\",\n                    flexWrap: \"wrap\",\n                }}\n            >\n                {palette.map((color, i) => (\n                    <PaletteButton\n                        key={i}\n                        selectedColor={brushColor}\n                        color={color}\n                        onClick={(color) => setBrushColor(color)}\n                        onColorSelected={(color) => onColorSelected(color)}\n                    />\n                ))}\n                {/* <div\n                    className=\"color-picker\"\n                    style={{ textAlign: \"center\", backgroundColor: \"#ccc\" }}\n                >\n                    <i className=\"fas fa-eye-dropper\" />\n                </div> */}\n                <button\n                    className=\"color-picker\"\n                    onClick={() => tool.beginColorpicker()}\n                >\n                    <i className=\"fas fa-eye-dropper\" />\n                </button>\n                <ColorPicker\n                    color={brushColor}\n                    onColorSelected={(color) => onColorSelected(color)}\n                />\n            </div>\n            <div\n                className=\"form-group\"\n                style={{\n                    marginTop: \"16px\",\n                    visibility: dirty ? \"visible\" : \"hidden\",\n                }}\n            >\n                <button\n                    className=\"btn btn-secondary\"\n                    onClick={() => tool.cancel()}\n                >\n                    Revert\n                </button>\n                <button\n                    className=\"btn btn-primary\"\n                    onClick={() => tool.confirm()}\n                    style={{ marginLeft: \"8px\" }}\n                >\n                    Save\n                </button>\n            </div>\n        </div>\n    );\n};\n","import React, { useState, useEffect } from \"react\";\nimport { Renderer } from \"./renderer\";\nimport { Cursor, Rect } from \"./models\";\nimport { Tool, BaseTool } from \"./tool\";\nimport { AspectRatioSelector } from \"../../components/AspectRatioSelector\";\nimport { getUpscaleLevel } from \"../../lib/upscale\";\nimport {\n    DEFAULT_ASPECT_RATIO,\n    aspectRatios,\n    getClosestAspectRatio,\n} from \"../../lib/aspecRatios\";\nimport { ZoomHelper } from \"./zoomHelper\";\nimport { runInThisContext } from \"vm\";\n\nexport class SelectionTool extends BaseTool implements Tool {\n    private selectionOverlay: Rect | undefined;\n    private selectionOverlayPreview: Rect | undefined;\n    private outpaint?: boolean;\n\n    // private selectionWidth: number = 512;\n    // private selectionHeight: number = 512;\n\n    private panning = false;\n\n    // TODO: size modifier to make the selection overlay smaller\n\n    constructor(renderer: Renderer) {\n        super(renderer, \"select\");\n    }\n\n    updateArgs(args: any) {\n        args = {\n            ...this.getArgs(),\n            ...args,\n        }\n        super.updateArgs(args);\n        this.selectionOverlay = args.selectionOverlay || {\n            x: 0,\n            y: 0,\n            width: 512,\n            height: 512,\n        };\n        this.outpaint = args.outpaint;\n        if (!this.outpaint) {\n            this.selectionOverlay = this.clamp(this.selectionOverlay!);\n        }\n        this.sync();\n    }\n\n    private clamp(rect: Rect): Rect {\n        const imageWidth = this.renderer.getWidth();\n        const imageHeight = this.renderer.getHeight();\n        let x = rect.x;\n        let y = rect.y;\n        let width = rect.width;\n        let height = rect.height;\n        // clamp to the canvas\n        x = Math.max(0, Math.min(x, imageWidth - this.selectionOverlay!.width));\n        y = Math.max(0, Math.min(y, imageHeight - rect.height));\n        x = Math.min(x, imageWidth - rect.width);\n        y = Math.min(y, imageHeight - rect.height);\n        width = Math.min(width, imageWidth);\n        height = Math.min(height, imageHeight);\n        return {\n            x: x,\n            y: y,\n            width: width,\n            height: height,\n        };\n    }\n\n    private sync(): void {\n        this.renderer.setSelectionOverlay(this.selectionOverlay);\n        this.renderer.setSelectionOverlayPreview(this.selectionOverlayPreview);\n    }\n\n    onMouseDown(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        if (event.type == \"touch\") {\n            this.onMouseMove(event);\n        } else if (event.button === 0) {\n            this.selectionOverlay = this.selectionOverlayPreview;\n            this.selectionOverlayPreview = undefined;\n            this.sync();\n            this.updateArgs({\n                selectionOverlay: this.selectionOverlay,\n            });\n        } else if (event.button === 1) {\n            this.panning = true;\n        }\n    }\n\n    onMouseMove(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        const imageWidth = this.renderer.getWidth();\n        const imageHeight = this.renderer.getHeight();\n        if (this.panning) {\n            this.zoomHelper.onPan(event);\n        } else {\n            let { x, y } = this.zoomHelper.translateMouseToCanvasCoordinates(\n                event.nativeEvent.offsetX,\n                event.nativeEvent.offsetY\n            );\n\n            // round to the nearest 16 pixels\n            x = Math.round(x / 16) * 16;\n            y = Math.round(y / 16) * 16;\n            // offset by -256 to center the rect\n            x -= 256;\n            y -= 256;\n\n            this.selectionOverlayPreview = {\n                x: x,\n                y: y,\n                width: this.selectionOverlay!.width,\n                height: this.selectionOverlay!.height,\n            };\n\n            if (!this.outpaint) {\n                this.selectionOverlayPreview = this.clamp(this.selectionOverlayPreview);\n            }\n\n            \n            this.sync();\n        }\n    }\n\n    onMouseUp(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        if (event.button === 0 && event.type == \"touch\") {\n            this.selectionOverlay = this.selectionOverlayPreview;\n            this.selectionOverlayPreview = undefined;\n            this.sync();\n            this.updateArgs({\n                selectionOverlay: this.selectionOverlay,\n            });\n        }\n        this.panning = false;\n    }\n\n    onMouseLeave(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        this.selectionOverlayPreview = undefined;\n        this.panning = false;\n        this.sync();\n    }\n\n    onWheel(event: WheelEvent) {\n        this.zoomHelper.onWheel(event);\n    }\n\n    destroy() {\n        // this.renderer.setSelectionOverlay(undefined);\n        this.renderer.setSelectionOverlayPreview(undefined);\n        return true;\n    }\n}\n\ninterface ControlsProps {\n    renderer: Renderer;\n    tool: Tool;\n    /** Lock aspect ratio for smaller images */\n    lockAspectRatio?: boolean;\n    outpaint?: boolean;\n}\n\nexport const Controls: React.FC<ControlsProps> = ({\n    renderer,\n    tool,\n    lockAspectRatio,\n    outpaint,\n}) => {\n    const upscaleLevel = getUpscaleLevel(\n        renderer.getWidth(),\n        renderer.getHeight()\n    );\n    const [aspectRatio, setAspectRatio] = useState(DEFAULT_ASPECT_RATIO);\n    const [size, setSize] = useState(1);\n\n    useEffect(() => {\n        const upscaleLevel = getUpscaleLevel(\n            renderer.getWidth(),\n            renderer.getHeight()\n        );\n        // lock aspect ratio to image\n        if (upscaleLevel === 0 && lockAspectRatio) {\n            const aspectRatio = getClosestAspectRatio(\n                renderer.getWidth(),\n                renderer.getHeight()\n            );\n            setAspectRatio(aspectRatio.id);\n            tool.updateArgs({\n                selectionOverlay: {\n                    x: 0,\n                    y: 0,\n                    width: aspectRatio.width,\n                    height: aspectRatio.height,\n                },\n                outpaint,\n            });\n        } else {\n            const args = tool.getArgs();\n            if (args.selectionOverlay) {\n                // restore args\n                const aspectRatio = getClosestAspectRatio(\n                    args.selectionOverlay.width,\n                    args.selectionOverlay.height\n                );\n                setAspectRatio(aspectRatio.id);\n                setSize(args.selectionOverlay.width / aspectRatio.width);\n                tool.updateArgs(args);\n            } else {\n                // set default args\n                args.selectionOverlay = {\n                    x: 0,\n                    y: 0,\n                    width: aspectRatios[aspectRatio].width,\n                    height: aspectRatios[aspectRatio].height,\n                };\n                args.outpaint = outpaint;\n                tool.updateArgs(args);\n            }\n        }\n    }, [tool]);\n\n    function onChange(aspectRatioId: number, size: number) {\n        const args = tool.getArgs();\n        const aspectRatio = aspectRatios[aspectRatioId];\n        if (args.selectionOverlay) {\n            const xDiff =\n                args.selectionOverlay.width - aspectRatio.width * size;\n            const yDiff =\n                args.selectionOverlay.height - aspectRatio.height * size;\n            args.selectionOverlay.width = Math.round(aspectRatio.width * size);\n            args.selectionOverlay.height = Math.round(\n                aspectRatio.height * size\n            );\n            args.selectionOverlay.x += xDiff / 2;\n            args.selectionOverlay.y += yDiff / 2;\n            if (!outpaint) {\n                // clamp to canvas\n                args.selectionOverlay.x = Math.round(\n                    Math.max(\n                        0,\n                        Math.min(\n                            args.selectionOverlay.x,\n                            renderer.getWidth() - args.selectionOverlay.width\n                        )\n                    )\n                );\n                args.selectionOverlay.y = Math.round(\n                    Math.max(\n                        0,\n                        Math.min(\n                            args.selectionOverlay.y,\n                            renderer.getHeight() - args.selectionOverlay.height\n                        )\n                    )\n                );\n            }\n        }\n        tool.updateArgs({\n            selectionOverlay: args.selectionOverlay,\n        });\n    }\n\n    return (\n        <>\n            {upscaleLevel > 0 && (\n                <AspectRatioSelector\n                    aspectRatio={aspectRatio}\n                    onChange={(aspectRatioId) => {\n                        onChange(aspectRatioId, size);\n                        setAspectRatio(aspectRatioId);\n                    }}\n                />\n            )}\n            <div className=\"form-group\">\n                <label htmlFor=\"size\" style={{ width: \"100%\" }}>\n                    Size\n                    <small\n                        className=\"form-text text-muted\"\n                        style={{ float: \"right\" }}\n                    >\n                        {Math.round(size * 100)}%\n                    </small>\n                </label>\n                {/* range from 0.1 to 1 */}\n                <input\n                    type=\"range\"\n                    className=\"form-control-range\"\n                    id=\"size\"\n                    min=\"1\"\n                    max=\"2\"\n                    step=\"0.1\"\n                    value={size}\n                    onChange={(event) => {\n                        onChange(aspectRatio, parseFloat(event.target.value));\n                        setSize(parseFloat(event.target.value));\n                    }}\n                />\n            </div>\n        </>\n    );\n};\n"],"sourceRoot":""}