{"version":3,"sources":["components/AspectRatioSelector.tsx","components/ImagePopup.tsx","components/PendingImagesThumbnail.tsx","components/PendingImages.tsx","pages/image-editor/enhance-tool.tsx","pages/image-editor/smudge-tool.tsx","pages/image-editor/inpaint-tool.tsx","pages/Homepage.tsx","pages/image-editor/PaletteButton.tsx","pages/image-editor/ColorPicker.tsx","pages/image-editor/pencil-tool.tsx","client/api.ts","client/base.ts","client/common.ts","lib/aspecRatios.ts","pages/image-editor/ImageEditor.tsx","pages/image-editor/renderer.ts","pages/image-editor/import-export.tsx","pages/image-editor/augment-tool.tsx","lib/imageutil.ts","components/BusyModal.tsx","pages/image-editor/zoomHelper.tsx","pages/image-editor/tool.ts","lib/localImagesStore.ts","pages/Login.tsx","components/TokenRefresher.tsx","components/Healthchecker.tsx","pages/admin/BoostList.tsx","pages/admin/GlobalSettings.tsx","pages/admin/Admin.tsx","pages/DeletedImages.tsx","pages/DiscordLogin.tsx","pages/LocalDeletedImages.tsx","lib/kvstore.ts","pages/SavedImagesPage.tsx","lib/imagesCache.ts","pages/TestPage.tsx","App.tsx","config.ts","reportWebVitals.ts","index.tsx","lib/apisocket.ts","components/ImageThumbnail.tsx","components/SeedInput.tsx","components/ModelList.tsx","lib/localcache.ts","components/ModelSelector.tsx","components/ImagePrompt.tsx","lib/upscale.ts","components/ProgressBar.tsx","lib/sleep.ts","components/Alerts.tsx","lib/supportedModels.ts","pages/image-editor/selection-tool.tsx"],"names":["AspectRatioSelector","aspectRatio","onChange","disabled","aspectRatioDetails","aspectRatios","className","style","minHeight","display","alignItems","width","height","border","margin","float","displayName","type","min","max","length","value","e","parseInt","target","ImagePopup","assetsUrl","image","censorNSFW","onClose","onDelete","onFork","onEdit","onNSFW","onSave","img","useRef","src","id","updated_at","imageData","score","params","negative_prompt","negative_score","useState","showNSFW","setShowNSFW","useEffect","current","onerror","title","label","prompt","show","onHide","size","Header","closeButton","Title","Body","ref","maxWidth","maxHeight","marginLeft","marginRight","filter","nsfw","alt","marginTop","status","displayStatus","charAt","toUpperCase","slice","icon","StatusEnum","Pending","Processing","Completed","Saved","Error","fontSize","position","top","statusBadge","onClick","marginBottom","model","color","href","seed","PendingImagesThumbnail","pendingCount","processingCount","hover","setHover","onMouseEnter","onMouseLeave","backgroundImage","backgroundSize","cursor","background","lineHeight","PendingImages","images","onDeleteImage","onCancel","imageIcon","pendingDiv","map","phrases","substring","Footer","anonymousClient","axios","create","eraserWidthModifier","EnhanceTool","renderer","selectionTool","negativePrompt","count","variationStrength","_dirty","worker","idCounter","_state","stateHandler","selectionControlsListener","selectedImageDataIndex","selectedImageData","panning","erasing","progressListener","errorListener","dirtyListener","SelectionTool","selectSupported","state","selectionArgs","getArgs","selectionOverlay","x","y","getWidth","getHeight","updateArgs","ImageUtilWorker","this","dirty","listener","handler","error","destroy","setCursor","undefined","outpaint","getUpscaleLevel","event","zoomHelper","translateMouseToCanvasCoordinates","nativeEvent","offsetX","offsetY","button","ImageData","data","erasePoint","onMouseDown","getSelectionOverlay","baseWidth","Math","eraserRadius","floor","relX","relY","startX","startY","endX","endY","i","j","index","distance","sqrt","pow","alphaPct","alpha","setEditImage","featherWidth","radius","onPan","updateCursor","onMouseMove","onMouseUp","onWheel","args","console","log","api","imageId","loadImageDataElement","imageElement","canvas","document","createElement","ctx","getContext","drawImage","getImageData","newId","processRequest","feather","pixels","resp","updatedImageData","remove","progress","apisocket","a","notifyError","encodedImage","getEncodedImage","input","defaultArgs","createTemporaryImage","tmpInitImage","binaryImageData","Buffer","from","updateProgress","put","upload_url","headers","onUploadProgress","progressEvent","percentCompleted","loaded","total","tmp_image_id","parent","denoising_strength","ceil","temporary","createImage","newImages","completed","lastUpdate","moment","onMessage","msg","JSON","parse","NOTIFICATION_IMAGE_UPDATED","loadImageData","startTime","lastCheck","completeCount","sleep","diff","pendingIds","batchGetImages","ids","updatedImagesResult","updatedImages","byId","reduce","acc","updated","isAfter","sort","b","push","direction","saveListener","commitSelection","negative_phrases","BaseTool","EnhanceControls","tool","setCount","setDirty","setVariationStrength","setPrompt","setNegativePrompt","setModel","setState","setProgress","setError","onChangeState","onProgress","onError","onDirty","role","data-dismiss","aria-label","aria-hidden","lockAspectRatio","htmlFor","step","round","parseFloat","supportedModels","cancel","confirm","erase","submit","when","message","SmudgeTool","brushSize","brushOpacity","lastX","lastY","smudging","sync","smudgeLine","copyEditImageFromBaseImage","SmudgeControls","setBrushSize","setBrushOpacity","visibility","InpaintTool","imageWidth","imageHeight","selectionWidth","render","alphaMask","alphaPixels","snapshot","undo","clearRedoStack","expandToOverlay","encodedMask","getEncodedMask","maskData","tmpImagePromises","Promise","all","tmpImages","binaryImages","uploadPromises","tmpImage","binaryImage","tmp_mask_id","closestAspectRatio","getClosestAspectRatio","selection_overlay","window","InpaintControls","setoutpaint","checked","defaults","common","Homepage","apiSocket","localImages","creating","setCreating","selectedImage","setSelectedImage","parentImage","setParentImage","loadingParent","setLoadingParent","savingImage","setSavingImage","uploadProgress","setUploadingProgress","showPendingImages","setShowPendingImages","setImages","err","setErr","errTime","setErrTime","success","setSuccess","successTime","setSuccessTime","hasMore","setHasMore","search","setSearch","searchDebounce","setSearchDebounce","bulkDeleteSelecting","setBulkDeleteSelecting","bulkDeleting","setBulkDeleting","bulkDeleteIds","setBulkDeleteIds","setBoost","setCensorNSFW","useParams","history","useHistory","location","useLocation","valueOf","handle","setTimeout","clearTimeout","find","getImage","then","replace","onSubmit","scrollTo","encoded_image","saveImage","sortImages","onEditNewImage","newImage","created_at","created_by","steps","uuid","updatedImage","loadImages","add","listImages","lock","pollImages","pendingOrProcessingImages","pendingById","statusChange","deleteImage","getImageDownloadUrls","downloadUrls","get","image_url","responseType","base64ImageData","toString","timerHandle","setInterval","clearInterval","refreshBoost","getBoost","updatedBoost","interval","qs","ignoreQueryPrefix","loadParent","isPendingOrProcessing","aScore","bScore","trim","onLoadMore","minUpdatedAt","forEach","deleted_at","createInput","split","createEncodedThumbnail","encodedThumbnail","binaryThumbnailData","createResp","getImageUploadUrls","uploadUrls","thumbnail_url","hardDeleteImage","onThumbnailClicked","onConfirmBulkDelete","promises","Object","keys","completedOrSavedImages","pendingImages","processingImages","textAlign","timestamp","paddingBottom","placeholder","Toggle","variant","Menu","Item","dataLength","next","loader","bulkDelete","PaletteButton","selectedColor","backgroundColor","ColorPicker","onColorSelected","displayColorPicker","setDisplayColorPicker","tmpColor","setTmpColor","zIndex","right","bottom","left","hex","onChangeComplete","defaultColors","PencilTool","brushColor","palette","isDrawing","colorPicking","lastPickedColor","colorPickedListener","drawPoint","getPixel","drawLine","Controls","setBrushColor","setPalette","indexOf","addToPalette","onColorPicked","flexDirection","flexWrap","beginColorpicker","AddMetricItemTypeEnum","HealthcheckStatusEnum","ImageParamsControlnetTypeEnum","ImageParamsAugmentationEnum","UpsertWorkerInputStatusEnum","WorkerStatusEnum","BASE_PATH","BaseAPI","configuration","basePath","globalAxios","RequiredError","field","name","DUMMY_BASE_URL","assertParamExists","functionName","paramName","paramValue","setSearchParams","url","searchParams","URLSearchParams","objects","object","key","Array","isArray","delete","item","append","set","serializeDataIfNeeded","requestOptions","nonString","isJsonMime","stringify","toPathString","pathname","hash","createRequestFunction","axiosArgs","axiosRequestArgs","options","request","AIBrushApiFp","localVarAxiosParamCreator","addMetrics","addMetricsInput","localVarUrlObj","URL","baseOptions","localVarRequestOptions","method","localVarQueryParameter","localVarHeaderParameter","query","headersFromBaseOptions","fields","batchGetImagesInput","createImageInput","createInviteCode","localVarPath","encodeURIComponent","String","depositBoost","userId","depositRequest","discordLogin","getAssetsUrl","getBoostForUser","getFeatures","getGlobalSettings","getMaskData","getModels","getThumbnailData","healthcheck","isAdmin","listBoosts","limit","login","loginInput","refresh","refreshLoginInput","updateBoost","updateBoostRequest","updateGlobalSettings","updateGlobalSettingsRequest","updateImage","updateImageInput","uploadImageData","body","uploadThumbnailData","verify","verifyLoginInput","AIBrushApiAxiosParamCreator","localVarAxiosArgs","AIBrushApi","DEFAULT_ASPECT_RATIO","tests","aRatio","bRatio","abs","compareSize","upscale","ImageEditor","showSelectionControls","setShowSelectionControls","tools","iconClass","constructor","r","renderControls","t","onShowSelectionControls","setImage","setRenderer","setTool","canUndo","setCanUndo","canRedo","setCanRedo","busyMessage","setBusyMessage","canvasRef","onSelectTool","toolconfig","newTool","onSaveImage","saveNewImage","newArgs","renderTool","buttonClass","isSelected","preventDefault","localImage","imageSrc","download_urls","Image","onload","createRenderer","setBaseImage","loadImage","onSnapshot","addEventListener","removeEventListener","redo","verticalAlign","touchAction","userSelect","onTouchStart","onTouchMove","onTouchEnd","select","transform","resetView","Renderer","undoStack","redoStack","currentSnapshot","backgroundLayer","baseImageLayer","editLayer","selectionOverlayPreview","hasSelection","zoom","snapshotListener","allowRedo","pop","clearRect","putImageData","notifySnapshotListener","shift","context","setTransform","drawOverlay","pattern","createPattern","createCheckeredPattern","fillStyle","fillRect","color1","color2","updateSelectionOverlay","initializeBackgroundLayer","setSelectionOverlay","updateZoomAndOffset","lineWidth","strokeStyle","strokeRect","beginPath","arc","PI","stroke","globalAlpha","fill","moveTo","lineTo","result","toDataURL","selection","imageDataToEncodedImage","erasure","mask","convertErasureToMask","brushx","brushy","absx","leftEdge","rightEdge","topEdge","bottomEdge","absy","contains","x1","y1","x2","y2","lineCap","unitVector","totalRed","totalGreen","totalBlue","averageRed","averageGreen","averageBlue","pixel","g","rgbToHex","minX","minY","newCanvas","ImportExportControls","backupImage","setBackupImage","files","byteString","atob","buffer","ArrayBuffer","intArray","Uint8Array","charCodeAt","blob","Blob","saveAs","onExport","AugmentControls","activeAugmentation","setActiveAugmentation","imageWorker","setImageWorker","lastError","setLastError","augmentImageData","augmentation","c","imageDataToCanvas","Upscale","FaceRestore","processingImage","checkResp","imageDataResp","binaryImageToDataBase64","decodeImage","upscaleFactor","newImageData","onAugment","fixImageSize","resolve","reject","urls","catch","splitImage","initImage","tile_size","num_tiles_x","num_tiles_y","tiles","x0","y0","tile","numTilesX","numTilesY","tileSize","mergeTiles","splitResult","tileCanvas","resizeImage","numWorkers","workers","callbacks","Worker","process","bind","postMessage","terminate","cropWidth","cropHeight","cropX","cropY","base64","resizeEncodedImage","encodedImageToBlob","binaryString","arr","uploadBlob","signedUrl","xhr","XMLHttpRequest","open","setRequestHeader","send","BusyModal","children","backdrop","keyboard","ZoomHelper","startTouches","startZoom","startOffsetX","startOffsetY","originalZoom","getZoom","getOffsetX","getOffsetY","canvasPoint","deltaY","xDiff","yDiff","movementX","movementY","rect","getBoundingClientRect","touches","canvasRect","getCanvas","startTouch1","startTouch2","touch1","touch2","startDistance","clientX","clientY","startCenterX","startCenterY","centerX","centerY","startCanvasPoint","xDiff2","yDiff2","mouseX","mouseY","touchHandle","_pinchZooming","_panning","localStorage","getItem","setItem","_updateCursor","touch","identifier","pageX","pageY","screenX","screenY","LocalImagesStore","db","indexedDB","onupgradeneeded","evt","imagesStore","objectStoreNames","transaction","objectStore","createObjectStore","keyPath","createIndex","unique","onsuccess","_","legacyImage","join","stable_diffusion_strength","iterations","store","hydrateImage","cleanupDeletedImages","range","IDBKeyRange","lowerBound","upperBound","openCursor","toLowerCase","includes","continue","imagesRequest","clear","olderThan","getDeletedImages","deletedImages","subtract","Login","props","email","setEmail","emailSubmitted","setEmailSubmitted","code","setCode","inviteCode","onLogin","match","client","invite_code","onVerify","fontWeight","aria-describedby","host","protocol","redirectUri","discordLink","TokenRefresher","onCredentialsRefreshed","onCredentialsExpired","credentials","refreshToken","loginResult","Healthchecker","healthCheck","setHealthCheck","BoostList","boosts","setBoosts","amount","setAmount","level","setLevel","showDeposit","setShowDeposit","onDepositBoost","boost","user_id","is_active","balance","fromNow","activated_at","Modal","Number","GlobalSettings","minimum_worker_allocations","stable_diffusion","stable_diffusion_inpainting","swinir","workerSettings","setWorkerSettings","saving","setSaving","loadWorkerSettings","settings","settings_json","saveWorkerSettings","Admin","links","setLinks","onGenerateLink","link","DeletedImages","deleting","setDeleting","onDeleteAllImages","onRestoreImage","goBack","borderBottom","ImageThumbnail","paddingTop","DiscordLogin","accessToken","LocalDeletedImages","clearDeletedImages","KVStore","dbConfig","dbName","storeName","createDB","getDB","savedImagesCache","kvstore","order","batchGetIds","deleteItem","savedImage","batchResult","SavedImagesPage","imagesResult","latestCursor","findIndex","deletedIds","uniqueIds","Set","payload","NOTIFICATION_IMAGE_DELETED","Dropdown","res","TestPage","originalImage","setOriginalImage","upscaledImage","setUpscaledImage","upscaleImageData","onImageSelected","originalImageData","upscaledTile","upscaledImageData","feathered","upscaledCanvas","config","apiUrl","httpClient","ApiSocket","updateHttpClient","App","setCredentials","setAssetsUrl","setIsAdmin","features","setFeatures","onLogout","removeItem","init","assets_url","storedCredentials","is_admin","updateToken","connect","path","exact","to","alert","privacy_uri","terms_uri","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","getElementById","messageListener","retry","setRetry","backgroundRepeat","backgroundPosition","readOnly","SeedInput","setSeed","useCustomSeed","setUseCustomSeed","Form","FormGroup","FormCheck","random","FormControl","ModelList","models","onSelectModel","selectedModel","innerWidth","innerHeight","setMaxHeight","handleResize","ListGroup","overflowY","active","cache","storage","ttl","expiry","Date","now","itemStr","ModelSelector","initialSelectedModel","initialValue","cachedValue","setValue","useCache","setModels","setSelectedModel","searchTerm","setSearchTerm","filteredModels","values","Control","Row","Col","sm","description","showcases","Button","defaultNegativePrompt","encoded_mask","ImagePrompt","setAspectRatio","parentId","setParentId","advancedView","setAdvancedView","setEncodedImage","selectingModel","setSelectingModel","controlnetType","setControlnetType","cfgScale","setCfgScale","defaultAspectRatio","setAspectRatioDetails","originalWidth","setOriginalWidth","originalHeight","setOriginalHeight","resetState","handleSubmit","controlnet_type","cfg_scale","bestMatch","file","HTMLCanvasElement","textDecoration","aspectRatioId","toFixed","controlnetTypes","ProgressBar","aria-valuenow","aria-valuemin","aria-valuemax","ms","Alert","alertType","setShow","timeout","ErrorNotification","SuccessNotification","clamp","setSelectionOverlayPreview","upscaleLevel","setSize"],"mappings":"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","file":"static/js/main.ce9d6801.chunk.js","sourcesContent":["import React, { FC, useEffect, useRef, useState } from \"react\";\n\nimport { aspectRatios, DEFAULT_ASPECT_RATIO, getClosestAspectRatio } from \"../lib/aspecRatios\";\n\ninterface Props {\n    aspectRatio: number;\n    onChange: (aspectRatio: number) => void;\n    disabled?: boolean;\n}\n\nexport const AspectRatioSelector: FC<Props> = ({ aspectRatio, onChange, disabled }) => {\n    const aspectRatioDetails = aspectRatios[aspectRatio];\n    return (\n        <div className=\"form-group\">\n            <div\n                style={{\n                    minHeight: \"140px\",\n                    display: \"flex\",\n                    alignItems: \"center\",\n                }}\n            >\n                {/* aspect ratio slider, goes from 0 -> aspectRatios.length - 1 */}\n                <div\n                    style={{\n                        width: aspectRatioDetails.width / 8,\n                        height: aspectRatioDetails.height / 8,\n                        // dotted line options: dotted, dashed, solid, double, groove, ridge, inset, outset, none, hidden\n                        border: \"1px dashed white\",\n                        margin: \"auto\",\n                    }}\n                ></div>\n            </div>\n            <label style={{width: \"100%\"}}>\n                Aspect Ratio\n                <small className=\"form-text text-muted\" style={{float: \"right\"}}>\n                    {aspectRatioDetails.displayName}\n                </small>\n            </label>\n            <input\n                type=\"range\"\n                disabled={disabled}\n                className=\"form-control-range\"\n                min={0}\n                max={aspectRatios.length - 1}\n                value={aspectRatio}\n                onChange={(e) => {\n                    onChange(parseInt(e.target.value));\n                }}\n            />\n        </div>\n    );\n};\n","import React, { FC, useEffect, useRef, useState } from \"react\";\nimport { Modal } from \"react-bootstrap\";\nimport { CreateImageInput, Image, StatusEnum } from \"../client/api\";\nimport { LocalImage } from \"../lib/localImagesStore\";\nimport { getUpscaleLevel } from \"../lib/upscale\";\n\ninterface ImagePopupProps {\n    assetsUrl: string;\n    image: LocalImage;\n    censorNSFW: boolean;\n    onClose: () => void;\n    onDelete?: (image: LocalImage) => void;\n    onFork?: (image: LocalImage) => void;\n    onEdit?: (image: LocalImage) => void;\n    onNSFW?: (image: LocalImage, nsfw: boolean) => void;\n    onSave?: (image: LocalImage) => void;\n}\n\nexport const ImagePopup: FC<ImagePopupProps> = ({\n    assetsUrl,\n    image,\n    censorNSFW,\n    onClose,\n    onDelete,\n    onFork,\n    onEdit,\n    onNSFW,\n    onSave,\n}) => {\n    const img = useRef<HTMLImageElement>(null);\n    let src = `${assetsUrl}/${image.id}.image.png?updated_at=${image.updated_at}`;\n    if (image.imageData) {\n        src = image.imageData;\n    }\n    let score = image.score;\n    if (\n        image.params.negative_prompt &&\n        image.negative_score != 0\n    ) {\n        score -= image.negative_score;\n    }\n    const [showNSFW, setShowNSFW] = useState(false);\n\n    const statusBadge = (status: string) => {\n        const displayStatus = status.charAt(0).toUpperCase() + status.slice(1);\n        let icon = \"fa fa-question-circle\";\n        switch (status) {\n            case StatusEnum.Pending:\n                icon = \"fas fa-hourglass-half\";\n                break;\n            case StatusEnum.Processing:\n                icon = \"fas fa-cog fa-spin\";\n                break;\n            case StatusEnum.Completed:\n                icon = \"fas fa-check\";\n                break;\n            case StatusEnum.Saved:\n                icon = \"fas fa-save\";\n                break;\n            case StatusEnum.Error:\n                icon = \"fas fa-exclamation-circle\";\n                break;\n        }\n        return (\n            <>\n                <span style={{ fontSize: \"24px\" }}>\n                    <i\n                        className={`${icon} status-badge status-badge-${status}`}\n                        style={{\n                            fontSize: \"10px\",\n                            position: \"relative\",\n                            top: \"-1px\",\n                        }}\n                    ></i>\n                    &nbsp;{displayStatus}\n                </span>\n            </>\n        );\n    };\n\n    useEffect(() => {\n        if (!img.current) {\n            return;\n        }\n        img.current.onerror = () => {\n            if (!img.current) {\n                return;\n            }\n            img.current.src = \"/images/default.png\";\n        };\n    }, [img]);\n\n    let title = image.label;\n    if (!title) {\n        title = image.params.prompt!;\n    }\n\n    // if open, show modal with image\n    return (\n        <Modal show={true} onHide={onClose} size=\"xl\">\n            <Modal.Header closeButton>\n                <Modal.Title>{title}</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <img\n                    ref={img}\n                    style={{\n                        maxWidth: \"100%\",\n                        maxHeight: \"1024px\",\n                        display: \"block\",\n                        marginLeft: \"auto\",\n                        marginRight: \"auto\",\n                        filter: (image.nsfw && censorNSFW) && !showNSFW ? \"blur(30px)\" : \"\",\n                    }}\n                    id={`image-popup-${image.id}`}\n                    src={src}\n                    alt={image.label}\n                />\n                {/* List these fields: status, iterations, phrases */}\n                <div className=\"row\">\n                    <div className=\"col-lg-12\"></div>\n                </div>\n                {/* controls */}\n                <div className=\"row\">\n                    <div className=\"col-lg-12\">\n                        <div\n                            className=\"image-popup-controls\"\n                            style={{ marginTop: \"40px\" }}\n                        >\n                            {statusBadge(image.status)}\n                            <div style={{ float: \"right\" }}>\n                                {onFork &&\n                                    (image.status === StatusEnum.Saved ||\n                                        image.status ===\n                                            StatusEnum.Completed) && (\n                                        <button\n                                            className=\"btn btn-secondary btn-sm image-popup-button\"\n                                            onClick={() => onFork(image)}\n                                            style={{ marginRight: \"5px\" }}\n                                        >\n                                            <i className=\"fas fa-code-branch\"></i>\n                                            &nbsp;VARIATIONS\n                                        </button>\n                                    )}\n                                {onDelete && (\n                                    <button\n                                        className=\"btn btn-danger btn-sm image-popup-delete-button\"\n                                        onClick={() =>\n                                            onDelete && onDelete(image)\n                                        }\n                                        style={{ marginRight: \"5px\" }}\n                                    >\n                                        <i className=\"fas fa-trash-alt\"></i>\n                                        &nbsp;DELETE\n                                    </button>\n                                )}\n                                {onEdit && (\n                                    <button\n                                        className=\"btn btn-primary btn-sm image-popup-button edit-button\"\n                                        onClick={() => onEdit && onEdit(image)}\n                                        style={{ marginRight: \"5px\" }}\n                                    >\n                                        <i className=\"fas fa-edit\"></i>\n                                        &nbsp;EDIT\n                                    </button>\n                                )}\n                                {onSave && (\n                                    <button\n                                        className=\"btn btn-primary btn-sm image-popup-button\"\n                                        onClick={() => onSave && onSave(image)}\n                                        style={{ marginRight: \"5px\" }}\n                                    >\n                                        <i className=\"fas fa-save\"></i>\n                                        &nbsp;SAVE\n                                    </button>\n                                )}\n                                {(image.nsfw && censorNSFW) && (\n                                    <button\n                                        className=\"btn btn-primary btn-sm image-popup-button\"\n                                        onClick={() => setShowNSFW(!showNSFW)}\n                                        style={{ marginRight: \"5px\" }}\n                                    >\n                                        <i className=\"fas fa-eye\"></i>\n                                        &nbsp;{showNSFW ? \"HIDE\" : \"SHOW\"}\n                                    </button>\n                                )}\n                            </div>\n                        </div>\n                        <div\n                            className=\"image-popup-controls\"\n                            style={{ marginTop: \"28px\", marginBottom: \"85px\" }}\n                        >\n                            {/* Horde interface doesn't support score yet */}\n                            {/* <div>\n                                Similarity to prompt: {(score * 200).toFixed(2)}\n                                %\n                            </div> */}\n                            <div>\n                                Image dimensions: {image.params.width} x {image.params.height}\n                            </div>\n                            <div>\n                                Model: {image.model}\n                            </div>\n                            {image.nsfw && (\n                                <>\n                                    <div>\n                                        {/* alert warning icon */}\n                                        <i\n                                            className=\"fas fa-exclamation-triangle\"\n                                            style={{\n                                                color: \"orange\",\n                                                fontSize: \"18px\",\n                                                position: \"relative\",\n                                                top: \"2px\",\n                                            }}\n                                        ></i>\n                                        &nbsp;May contain NSFW content\n                                    </div>\n                                    {onNSFW && (\n                                        <a\n                                            href=\"javascript:void(0)\"\n                                            onClick={() =>\n                                                onNSFW(image, false)\n                                            }\n                                        >\n                                            Mark as Safe for Work\n                                        </a>\n                                    )}\n                                </>\n                            )}\n                            {image.params.seed && (\n                                <div>\n                                    Seed: {image.params.seed}\n                                </div>\n                            )}\n                            {!image.nsfw && (\n                                <>\n                                    <div>\n                                        {/* green check icon */}\n                                        <i\n                                            className=\"fas fa-check\"\n                                            style={{\n                                                color: \"green\",\n                                                fontSize: \"18px\",\n                                                position: \"relative\",\n                                                top: \"2px\",\n                                            }}\n                                        ></i>\n                                        &nbsp;Safe for Work\n                                    </div>\n                                    {onNSFW && (\n                                        <a\n                                            href=\"javascript:void(0)\"\n                                            onClick={() =>\n                                                onNSFW(image, true)\n                                            }\n                                        >\n                                            Mark as Not Safe for Work\n                                        </a>\n                                    )}\n                                </>\n                            )}\n                        </div>\n                    </div>\n                </div>\n            </Modal.Body>\n        </Modal>\n    );\n};\n","import React, { FC, useEffect, useState } from \"react\";\n\ninterface Props {\n    pendingCount: number;\n    processingCount: number;\n    onClick?: () => void;\n}\n\nexport const PendingImagesThumbnail: FC<Props> = ({\n    pendingCount,\n    processingCount,\n    onClick,\n}) => {\n    const [hover, setHover] = useState(false);\n\n    // on mouse in/out, set hover state\n    const onMouseEnter = () => setHover(true);\n    const onMouseLeave = () => setHover(false);\n    let icon = (\n        <i style={{ marginTop: \"20px\" }} className=\"fa fa-hourglass-half\"></i>\n    );\n\n    if (processingCount > 0) {\n        icon = (\n            <i style={{ marginTop: \"20px\" }} className=\"fa fa-cog fa-spin\"></i>\n        );\n    }\n\n    return (\n        <div\n            onMouseEnter={onMouseEnter}\n            onMouseLeave={onMouseLeave}\n            style={{\n                backgroundImage: `url(/images/default.png)`,\n                backgroundSize: \"contain\",\n                width: \"128px\",\n                height: \"128px\",\n                margin: \"8px\",\n                float: \"left\",\n                cursor: \"pointer\",\n            }}\n            onClick={onClick}\n        >\n            {hover && (\n                <div\n                    style={{\n                        background: \"rgba(255, 255, 255, 0.5)\",\n                        color: \"black\",\n                        width: \"100%\",\n                        height: \"100%\",\n                        lineHeight: \"1\",\n                        fontSize: \"20px\",\n                    }}\n                >\n                    <br/>\n                    {pendingCount > 0 && (\n                        <div style={{ marginBottom: \"24px\" }}>\n                            {pendingCount} pending\n                        </div>\n                    )}\n                    {processingCount > 0 && (\n                        <div>{processingCount} processing</div>\n                    )}\n                </div>\n            )}\n            {!hover && (\n                <div\n                    style={{\n                        background: \"rgba(255, 255, 255, 0.3)\",\n                        color: \"#555\",\n                        width: \"100%\",\n                        height: \"100%\",\n                        fontSize: \"80px\",\n                    }}\n                >\n                    {icon}\n                </div>\n            )}\n        </div>\n    );\n};\n","import React, {FC, useEffect, useState} from \"react\";\nimport { Modal } from \"react-bootstrap\";\nimport { Image } from \"../client/api\";\n\ninterface Props {\n    images: Image[];\n    onDeleteImage: (image: Image) => void;\n    onCancel: () => void;\n    show: boolean;\n}\n\nexport const PendingImages: FC<Props> = ({\n    images,\n    onDeleteImage,\n    onCancel,\n    show,\n}) => {\n\n    function imageIcon(image: Image) {\n        if (image.status === \"pending\") {\n            return <i className=\"fa fa-hourglass-half\"></i>;\n        } else if (image.status === \"processing\") {\n            return <i className=\"fa fa-cog fa-spin\"></i>;\n        }\n    }\n\n    const truncate = (phrases: string) => {\n        if (phrases.length > 35) {\n            return phrases.substring(0, 35) + \"...\";\n        }\n        return phrases;\n    }\n\n    // refactor from table to div layout\n    const pendingDiv = (\n        <div>\n            <div style={{marginBottom: \"8px\"}}>\n                <div style={{display: \"inline-block\", width: \"100px\"}}>\n                    Status\n                </div>\n                <div style={{display: \"inline-block\", width: \"250px\"}}>\n                    Phrases\n                </div>\n                <div style={{display: \"inline-block\", width: \"100px\"}}>\n                    Action\n                </div>\n            </div>\n            {images.map((image) => (\n                <div key={image.id} style={{marginBottom: \"8px\"}}>\n                    <div style={{display: \"inline-block\", width: \"100px\"}}>\n                        {imageIcon(image)}&nbsp;{image.status}\n                    </div>\n                    <div style={{display: \"inline-block\", width: \"250px\"}}>\n                        {/* if more than 30 chars, truncate with ellipsis*/}\n                        {truncate(image.params.prompt || \"\")}\n                    </div>\n                    <div style={{display: \"inline-block\", width: \"100px\"}}>\n                        <button\n                            className=\"btn btn-danger btn-sm image-popup-delete-button\"\n                            onClick={() => onDeleteImage(image)}\n                        >\n                            <i className=\"fa fa-trash\"></i>&nbsp;Delete\n                        </button>\n                    </div>\n                </div>\n            ))}\n        </div>\n    );\n\n    return (\n        <Modal show={show} onHide={onCancel}>\n            <Modal.Header closeButton>\n                <Modal.Title>Pending Images</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                {pendingDiv}\n            </Modal.Body>\n            <Modal.Footer>\n                <button className=\"btn btn-secondary\" onClick={onCancel}>\n                    Close\n                </button>\n            </Modal.Footer>\n        </Modal>\n    );\n};","import React, { FC, useState, useEffect, useRef } from \"react\";\nimport axios from \"axios\";\nimport { Prompt } from \"react-router\";\nimport { loadImageAsync } from \"../../lib/loadImage\";\n\nimport { sleep } from \"../../lib/sleep\";\nimport { defaultArgs } from \"../../components/ImagePrompt\";\nimport { Tool, BaseTool } from \"./tool\";\nimport { Renderer } from \"./renderer\";\nimport { Cursor, Rect } from \"./models\";\nimport {\n    AIBrushApi,\n    CreateImageInput,\n    Image as APIImage,\n    ImageList,\n    StatusEnum,\n} from \"../../client\";\nimport { ZoomHelper } from \"./zoomHelper\";\nimport { getClosestAspectRatio } from \"../../lib/aspecRatios\";\nimport { ImageUtilWorker, loadImageDataElement } from \"../../lib/imageutil\";\nimport { SelectionTool, Controls as SelectionControls } from \"./selection-tool\";\nimport { getUpscaleLevel } from \"../../lib/upscale\";\nimport { ApiSocket, NOTIFICATION_IMAGE_UPDATED } from \"../../lib/apisocket\";\nimport moment from \"moment\";\nimport { supportedModels } from \"../../lib/supportedModels\";\nimport { ProgressBar } from \"../../components/ProgressBar\";\n\nconst anonymousClient = axios.create();\n\ntype EnhanceToolState =\n    | \"select\"\n    | \"default\"\n    | \"uploading\"\n    | \"processing\"\n    | \"confirm\"\n    | \"erase\";\n\n// eraser width modifier adds a solid core with a feather edge\n// equal to the what is used on enhanced selections\nconst eraserWidthModifier = 1.3;\n\ninterface ImageWithData extends APIImage {\n    data?: ImageData;\n}\n\nexport class EnhanceTool extends BaseTool implements Tool {\n    readonly selectionTool: SelectionTool;\n    private prompt: string = \"\";\n    private negativePrompt: string = \"\";\n    private model: string = \"Epic Diffusion\";\n    private count: number = 4;\n    private variationStrength: number = 0.35;\n    private _dirty = false;\n    private worker: ImageUtilWorker;\n    private idCounter = 0;\n\n    private _state: EnhanceToolState = \"default\";\n    private stateHandler: (state: EnhanceToolState) => void = () => {};\n    private selectionControlsListener: (show: boolean) => void = () => {};\n\n    private imageData: Array<ImageData> = [];\n    private selectedImageDataIndex: number = -1;\n    private selectedImageData: ImageData | null = null;\n    private panning = false;\n    private erasing = false;\n    private progressListener?: (progress: number) => void;\n    private errorListener?: (error: string | null) => void;\n    private dirtyListener?: (dirty: boolean) => void;\n\n    set dirty(dirty: boolean) {\n        this._dirty = dirty;\n        if (this.dirtyListener) {\n            this.dirtyListener(dirty);\n        }\n    }\n\n    get dirty() {\n        return this._dirty;\n    }\n\n    onDirty(listener: (dirty: boolean) => void): void {\n        this.dirtyListener = listener;\n    }\n\n    onError(handler: (error: string | null) => void) {\n        this.errorListener = handler;\n    }\n\n    private notifyError(error: string | null) {\n        if (this.errorListener) {\n            this.errorListener(error);\n        }\n    }\n\n    get state(): EnhanceToolState {\n        return this._state;\n    }\n\n    set state(state: EnhanceToolState) {\n        if (state !== this._state) {\n            if (this._state == \"select\") {\n                this.selectionTool.destroy();\n            }\n            if (this._state === \"erase\") {\n                this.renderer.setCursor(undefined);\n            }\n            this._state = state;\n            this.stateHandler(state);\n            if (state == \"confirm\") {\n                this.selectionControlsListener(true);\n            } else {\n                this.selectionControlsListener(false);\n                if (state == \"select\") {\n                    this.selectionTool.updateArgs({\n                        ...this.selectionTool.getArgs(),\n                        outpaint: false,\n                    });\n                }\n            }\n        }\n    }\n\n    selectSupported(): boolean {\n        return !(\n            getUpscaleLevel(\n                this.renderer.getWidth(),\n                this.renderer.getHeight()\n            ) === 0 && this.renderer.getWidth()\n        );\n    }\n\n    constructor(renderer: Renderer) {\n        super(renderer, \"enhance\");\n        this.selectionTool = new SelectionTool(renderer);\n        if (this.selectSupported()) {\n            this.state = \"select\";\n        } else {\n            this.state = \"default\";\n        }\n        let selectionArgs = this.selectionTool.getArgs();\n        if (!this.selectSupported()) {\n            selectionArgs = {\n                ...selectionArgs,\n                selectionOverlay: {\n                    x: 0,\n                    y: 0,\n                    width: this.renderer.getWidth(),\n                    height: this.renderer.getHeight(),\n                },\n            };\n        }\n        this.selectionTool.updateArgs(selectionArgs);\n        this.worker = new ImageUtilWorker();\n    }\n\n    onMouseDown(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        if (this.state == \"select\") {\n            this.selectionTool.onMouseDown(event);\n            return;\n        }\n        let { x, y } = this.zoomHelper.translateMouseToCanvasCoordinates(\n            event.nativeEvent.offsetX,\n            event.nativeEvent.offsetY\n        );\n        if (event.button === 1) {\n            this.panning = true;\n            return;\n        }\n        if (this.state == \"erase\" && this.selectedImageData) {\n            this.erasing = true;\n            // clone selected ImageData\n            this.selectedImageData = new ImageData(\n                this.selectedImageData.data.slice(),\n                this.selectedImageData.width,\n                this.selectedImageData.height\n            );\n\n            this.erasePoint(x, y);\n        }\n    }\n\n    // TODO: on erase cancel and on erase confirm\n    // either restore the image data from the array\n    // or overwrite the array with the new image data\n\n    private erasePoint(x: number, y: number) {\n        const selectionOverlay = this.renderer.getSelectionOverlay()!;\n        const baseWidth = Math.min(\n            selectionOverlay.width,\n            selectionOverlay.height\n        );\n        const eraserRadius = Math.floor((baseWidth / 8) * eraserWidthModifier);\n\n        const relX = x - selectionOverlay.x;\n        const relY = y - selectionOverlay.y;\n        const imageData = this.selectedImageData!;\n\n        const startX = Math.max(0, relX - eraserRadius);\n        const startY = Math.max(0, relY - eraserRadius);\n        const endX = Math.min(imageData.width, relX + eraserRadius);\n        const endY = Math.min(imageData.height, relY + eraserRadius);\n\n        // relX=64.28541697636388, relY=64.24464312259761, startX=0.28541697636387653, startY=0.24464312259760845, endX=128.28541697636388, endY=128.2446431225976\n\n        for (let i = startX; i < endX; i++) {\n            for (let j = startY; j < endY; j++) {\n                const index = (j * imageData.width + i) * 4;\n                const distance = Math.sqrt(\n                    Math.pow(i - relX, 2) + Math.pow(j - relY, 2)\n                );\n                if (distance < eraserRadius) {\n                    // set alpha to a linear gradient from the center,\n                    // 100% in the middle and 0% at the edge\n                    const alphaPct =\n                        (distance / eraserRadius) * eraserWidthModifier -\n                        (eraserWidthModifier - 1);\n\n                    const alpha = Math.min(\n                        Math.floor(alphaPct * 255),\n                        imageData.data[index + 3]\n                    );\n                    imageData.data[index + 3] = alpha;\n                }\n            }\n        }\n        this.renderer.setEditImage(imageData);\n    }\n\n    private updateCursor(x: number, y: number) {\n        if (this.state == \"erase\" && this.selectedImageData) {\n            const selectionOverlay = this.renderer.getSelectionOverlay()!;\n            const baseWidth = Math.min(\n                selectionOverlay.width,\n                selectionOverlay.height\n            );\n            const featherWidth = Math.floor(baseWidth / 8);\n            this.renderer.setCursor({\n                color: \"white\",\n                radius: featherWidth * eraserWidthModifier,\n                type: \"circle\",\n                x,\n                y,\n            });\n        } else {\n            this.renderer.setCursor({\n                color: \"white\",\n                radius: 10,\n                type: \"crosshairs\",\n                x,\n                y,\n            });\n        }\n    }\n\n    onMouseMove(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        if (this.state == \"select\") {\n            this.selectionTool.onMouseMove(event);\n            return;\n        }\n        let { x, y } = this.zoomHelper.translateMouseToCanvasCoordinates(\n            event.nativeEvent.offsetX,\n            event.nativeEvent.offsetY\n        );\n        if (this.panning) {\n            this.zoomHelper.onPan(event);\n        }\n\n        this.updateCursor(x, y);\n        if (this.erasing) {\n            this.erasePoint(x, y);\n        }\n    }\n\n    onMouseUp(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        if (this.state == \"select\") {\n            this.selectionTool.onMouseUp(event);\n        }\n        this.panning = false;\n        this.erasing = false;\n    }\n\n    onMouseLeave(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>): void {\n        if (this.state == \"select\") {\n            this.selectionTool.onMouseLeave(event);\n        }\n        this.panning = false;\n        this.erasing = false;\n    }\n\n    onWheel(event: WheelEvent) {\n        this.zoomHelper.onWheel(event);\n        let { x, y } = this.zoomHelper.translateMouseToCanvasCoordinates(\n            event.offsetX,\n            event.offsetY\n        );\n        this.updateCursor(x, y);\n    }\n\n    updateArgs(args: any) {\n        args = {\n            ...this.getArgs(),\n            ...args,\n        };\n        this.prompt = args.prompt || \"\";\n        this.negativePrompt = args.negativePrompt || \"\";\n        this.model = args.model || \"Epic Diffusion\";\n        this.count = args.count || 4;\n        this.variationStrength = args.variationStrength || 0.75;\n        console.log(\"updateArgs\", args);\n    }\n\n    onChangeState(handler: (state: EnhanceToolState) => void) {\n        this.stateHandler = handler;\n    }\n\n    onShowSelectionControls(listener: (show: boolean) => void): void {\n        this.selectionControlsListener = listener;\n    }\n\n    onProgress(listener: (progress: number) => void): void {\n        this.progressListener = listener;\n    }\n\n    private newId(): string {\n        return `${this.idCounter++}`;\n    }\n\n    private async loadImageData(\n        api: AIBrushApi,\n        imageId: string,\n        selectionOverlay: Rect\n    ): Promise<ImageData> {\n        const imageElement = await loadImageDataElement(api, imageId);\n        const canvas = document.createElement(\"canvas\");\n        canvas.width = selectionOverlay.width;\n        canvas.height = selectionOverlay.height;\n        const ctx = canvas.getContext(\"2d\");\n        if (!ctx) {\n            throw new Error(\"Failed to get canvas context\");\n        }\n        ctx.drawImage(\n            imageElement,\n            0,\n            0,\n            selectionOverlay.width,\n            selectionOverlay.height\n        );\n        const imageData = ctx.getImageData(\n            0,\n            0,\n            selectionOverlay.width,\n            selectionOverlay.height\n        );\n        const id = this.newId();\n        const resp = await this.worker.processRequest({\n            id,\n            alpha: false,\n            feather: true,\n            height: this.renderer.getHeight(),\n            width: this.renderer.getWidth(),\n            pixels: imageData.data,\n            selectionOverlay,\n        });\n        const updatedImageData = new ImageData(\n            resp.pixels,\n            imageData.width,\n            imageData.height\n        );\n        // remove canvas\n        canvas.remove();\n        return updatedImageData;\n    }\n\n    cancel() {\n        if (this.state == \"erase\") {\n            this.state = \"confirm\";\n            this.selectedImageData =\n                this.imageData[this.selectedImageDataIndex];\n            this.renderer.setEditImage(this.selectedImageData);\n        } else {\n            if (this.selectSupported()) {\n                this.state = \"select\";\n            } else {\n                this.state = \"default\";\n            }\n            this.imageData = [];\n            this.renderer.setEditImage(null);\n            this.dirty = false;\n        }\n    }\n\n    erase() {\n        this.state = \"erase\";\n    }\n\n    private updateProgress(progress: number) {\n        if (this.progressListener) {\n            this.progressListener(progress);\n        }\n    }\n\n    async submit(api: AIBrushApi, apisocket: ApiSocket, image: APIImage) {\n        this.dirty = true;\n        this.notifyError(null);\n        const selectionOverlay = this.renderer.getSelectionOverlay();\n        const encodedImage = this.renderer.getEncodedImage(selectionOverlay!);\n        if (!encodedImage) {\n            console.error(\"No selection\");\n            return;\n        }\n\n        const baseImageData = this.renderer.getImageData(selectionOverlay!)!;\n        const input: CreateImageInput = defaultArgs();\n\n        const tmpInitImage = await api.createTemporaryImage();\n        // convert base64 to binary\n        const binaryImageData = Buffer.from(encodedImage, \"base64\");\n        this.state = \"uploading\";\n        this.updateProgress(0);\n        await anonymousClient.put(\n            tmpInitImage.data.upload_url,\n            binaryImageData,\n            {\n                headers: {\n                    \"Content-Type\": \"image/png\",\n                },\n                onUploadProgress: (progressEvent: any) => {\n                    const percentCompleted =\n                        progressEvent.loaded / progressEvent.total;\n                    this.updateProgress(percentCompleted);\n                },\n            }\n        );\n        input.tmp_image_id = tmpInitImage.data.id;\n\n        input.label = \"\";\n        input.parent = image.id;\n        input.params.prompt = this.prompt || image.params.prompt;\n        input.params.negative_prompt =\n            this.negativePrompt || image.params.negative_prompt;\n        input.params.denoising_strength = this.variationStrength;\n        input.count = this.count;\n        input.model = this.model;\n        input.nsfw = image.nsfw;\n\n        input.params.width = selectionOverlay!.width;\n        input.params.height = selectionOverlay!.height;\n        // round width and height up to the nearest multiple of 64\n        input.params.width = Math.ceil(input.params.width / 64) * 64;\n        input.params.height = Math.ceil(input.params.height / 64) * 64;\n        input.temporary = true;\n\n        let resp: ImageList | null = null;\n\n        try {\n            resp = (await api.createImage(input)).data;\n        } catch (err) {\n            console.error(\"Error creating images\", err);\n            this.notifyError(\"Failed to create image\");\n            this.state = \"default\";\n            return;\n        }\n        this.state = \"processing\";\n        let newImages: Array<ImageWithData> | undefined = resp.images;\n        if (!newImages || newImages.length === 0) {\n            this.state = \"default\";\n            throw new Error(\"No images returned\");\n        }\n        let completed = false;\n\n        let lastUpdate = moment();\n\n        apisocket.onMessage(async (msg: string) => {\n            const img = JSON.parse(msg) as any;\n            if (\n                img.type === NOTIFICATION_IMAGE_UPDATED &&\n                img.status === StatusEnum.Completed\n            ) {\n                lastUpdate = moment();\n                for (let i = 0; i < newImages!.length; i++) {\n                    if (newImages![i].id === img.id) {\n                        const imageData = await this.loadImageData(\n                            api,\n                            newImages![i].id,\n                            selectionOverlay!\n                        );\n                        newImages![i].data = imageData;\n                        newImages![i].status = StatusEnum.Completed;\n                    }\n                }\n            } else if (img.status == StatusEnum.Error) {\n                for (let i = 0; i < newImages!.length; i++) {\n                    if (newImages![i].id === img.id) {\n                        newImages![i].status = StatusEnum.Error;\n                    }\n                }\n            }\n        });\n        try {\n            let startTime = moment();\n            let lastCheck = moment();\n\n            while (!completed) {\n                let completeCount = 0;\n                await sleep(1000);\n                // poll for completion\n                for (let i = 0; i < newImages!.length; i++) {\n                    if (\n                        newImages![i].status === StatusEnum.Completed ||\n                        newImages![i].status === StatusEnum.Error\n                    ) {\n                        completeCount++;\n                        continue;\n                    }\n                }\n                this.updateProgress(completeCount / newImages!.length);\n                if (completeCount === newImages!.length) {\n                    completed = true;\n                }\n\n                // fallback if sockets don't catch one\n                if (moment().diff(lastCheck, \"seconds\") > 10) {\n                    // get list of ids that aren't completed and batch get them.\n                    const pendingIds = newImages\n                        .filter(\n                            (img) =>\n                                img.status === StatusEnum.Pending ||\n                                img.status === StatusEnum.Processing\n                        )\n                        .map((img) => img.id);\n                    console.log(\"Checking pending images\", pendingIds);\n                    const updatedImagesResult = await api.batchGetImages(undefined, {\n                        ids: pendingIds,\n                    });\n                    const updatedImages = updatedImagesResult.data.images;\n                    const byId = updatedImages!.reduce((acc, img) => {\n                        acc[img.id] = img;\n                        return acc;\n                    }, {} as Record<string, APIImage>);\n                    for (let i = 0; i < newImages!.length; i++) {\n                        if (\n                            newImages![i].status === StatusEnum.Pending ||\n                            newImages![i].status === StatusEnum.Processing\n                        ) {\n                            const updated = byId[newImages![i].id];\n                            if (updated) {\n                                newImages![i].status = updated.status;\n                                if (updated.status === StatusEnum.Completed) {\n                                    lastUpdate = moment();\n                                    const imageData = await this.loadImageData(\n                                        api,\n                                        newImages![i].id,\n                                        selectionOverlay!\n                                    );\n                                    newImages![i].data = imageData;\n                                }\n                            }\n                        }\n                    }\n                    lastCheck = moment();\n                }\n                // timeout of 2 minutes\n                if (\n                    (lastUpdate.isAfter(startTime) &&\n                        moment().diff(lastUpdate, \"seconds\") > 30) ||\n                    moment().diff(startTime, \"minutes\") > 2\n                ) {\n                    completed = true;\n                }\n            }\n        } finally {\n            apisocket.onMessage(undefined);\n        }\n\n        // sort images by score descending\n        newImages!.sort((a, b) => {\n            return b.score - a.score;\n        });\n        newImages = newImages!.filter((img) => {\n            return img.status === StatusEnum.Completed;\n        });\n\n        this.imageData = [];\n        for (let i = 0; i < newImages!.length; i++) {\n            if (newImages![i].data) {\n                this.imageData.push(newImages![i].data as ImageData);\n            }\n        }\n        if (this.imageData.length === 0) {\n            this.state = \"default\";\n            this.notifyError(\"No images returned\");\n            return;\n        }\n        this.renderer.setEditImage(this.imageData[0]);\n        this.selectedImageDataIndex = 0;\n        this.selectedImageData = this.imageData[0];\n        this.state = \"confirm\";\n    }\n\n    select(direction: \"left\" | \"right\") {\n        if (direction == \"left\") {\n            this.selectedImageDataIndex--;\n            if (this.selectedImageDataIndex < -1) {\n                this.selectedImageDataIndex = this.imageData.length - 1;\n            }\n        }\n        if (direction == \"right\") {\n            this.selectedImageDataIndex++;\n            if (this.selectedImageDataIndex >= this.imageData.length) {\n                this.selectedImageDataIndex = -1;\n            }\n        }\n        if (this.selectedImageDataIndex === -1) {\n            this.selectedImageData = null;\n        } else {\n            this.selectedImageData =\n                this.imageData[this.selectedImageDataIndex];\n        }\n        this.renderer.setEditImage(this.selectedImageData);\n    }\n\n    onSaveImage(listener: (encodedImage: string, args?: any) => void): void {\n        this.saveListener = listener;\n    }\n\n    confirm() {\n        this.renderer.commitSelection();\n        if (this.selectSupported()) {\n            this.state = \"select\";\n        } else {\n            this.state = \"default\";\n        }\n        this.imageData = [];\n        const encodedImage = this.renderer.getEncodedImage(null);\n        if (encodedImage && this.saveListener) {\n            this.saveListener(encodedImage, {\n                phrases: [this.prompt],\n                negative_phrases: [this.negativePrompt],\n                model: this.model,\n            });\n        }\n        this.dirty = false;\n    }\n\n    destroy(): boolean {\n        this.renderer.setCursor(undefined);\n        this.worker.destroy();\n        return true;\n    }\n}\n\ninterface ControlsProps {\n    api: AIBrushApi;\n    apisocket: ApiSocket;\n    image: APIImage;\n    renderer: Renderer;\n    tool: EnhanceTool;\n}\n\nexport const EnhanceControls: FC<ControlsProps> = ({\n    api,\n    apisocket,\n    image,\n    renderer,\n    tool,\n}) => {\n    const [count, setCount] = useState(4);\n    const [dirty, setDirty] = useState(false);\n    const [variationStrength, setVariationStrength] = useState(0.35);\n    const [prompt, setPrompt] = useState(image.params.prompt || \"\");\n    const [negativePrompt, setNegativePrompt] = useState(\n        image.params.negative_prompt || \"\"\n    );\n    const [model, setModel] = useState(\n        image.model == \"swinir\" || image.model == \"stable_diffusion\"\n            ? \"Epic Diffusion\"\n            : image.model\n    );\n    const [state, setState] = useState<EnhanceToolState>(tool.state);\n    const [progress, setProgress] = useState(0);\n    const [error, setError] = useState<string | null>(null);\n\n    tool.onChangeState(setState);\n    tool.onProgress(setProgress);\n    tool.onError(setError);\n    tool.onDirty(setDirty);\n\n    if (state == \"processing\" || state == \"uploading\") {\n        return (\n            <div style={{ marginTop: \"16px\" }}>\n                <i className=\"fa fa-spinner fa-spin\"></i>&nbsp;{\" \"}\n                {state === \"processing\" ? \"Enhancing...\" : \"Uploading...\"}\n                <br />\n                <ProgressBar progress={progress} />\n            </div>\n        );\n    }\n\n    return (\n        <div\n            style={{\n                marginTop: \"16px\",\n                marginBottom: \"8px\",\n                marginLeft: \"16px\",\n            }}\n        >\n            {error && (\n                <div className=\"alert alert-danger\" role=\"alert\">\n                    {/* dismiss button */}\n                    <button\n                        type=\"button\"\n                        className=\"close\"\n                        data-dismiss=\"alert\"\n                        aria-label=\"Close\"\n                        onClick={() => setError(null)}\n                    >\n                        <span aria-hidden=\"true\">&times;</span>\n                    </button>\n                    {error}\n                </div>\n            )}\n            {state === \"select\" && (\n                <>\n                    <p>\n                        {/* info icon */}\n                        <i className=\"fa fa-info-circle\"></i>&nbsp; Move the\n                        selection rectangle to the area that you want to enhance\n                    </p>\n                    <SelectionControls\n                        renderer={renderer}\n                        tool={tool.selectionTool}\n                        lockAspectRatio={true}\n                    />\n                </>\n            )}\n            {state === \"default\" && (\n                <>\n                    <p>\n                        {/* info icon */}\n                        <i className=\"fa fa-info-circle\"></i>&nbsp; Confirm the\n                        parameters below and continue\n                    </p>\n                    {/* prompt */}\n                    <div className=\"form-group\">\n                        <label htmlFor=\"prompt\">Prompt</label>\n                        <input\n                            type=\"text\"\n                            className=\"form-control\"\n                            id=\"prompt\"\n                            value={prompt}\n                            onChange={(e) => {\n                                setPrompt(e.target.value);\n                            }}\n                        />\n                        <small className=\"form-text text-muted\">\n                            Customize the text prompt here\n                        </small>\n                    </div>\n                    {/* negative prompt */}\n                    <div className=\"form-group\">\n                        <label htmlFor=\"negative-prompt\">Negative Prompt</label>\n                        <input\n                            type=\"text\"\n                            className=\"form-control\"\n                            id=\"negative-prompt\"\n                            value={negativePrompt}\n                            onChange={(e) => {\n                                setNegativePrompt(e.target.value);\n                            }}\n                        />\n                        <small className=\"form-text text-muted\">\n                            Customize the negative text prompt here\n                        </small>\n                    </div>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"count\">Count: {count}</label>\n                        <input\n                            type=\"range\"\n                            className=\"form-control-range\"\n                            id=\"count\"\n                            min=\"1\"\n                            max=\"10\"\n                            step=\"1\"\n                            value={count}\n                            onChange={(e) => {\n                                setCount(parseInt(e.target.value));\n                            }}\n                        />\n                        <small className=\"form-text text-muted\">\n                            Number of enhancement options\n                        </small>\n                    </div>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"variation-strength\">\n                            Variation Strength:{\" \"}\n                            {Math.round(variationStrength * 100)}%\n                        </label>\n                        <input\n                            type=\"range\"\n                            className=\"form-control-range\"\n                            id=\"variation-strength\"\n                            min=\"0\"\n                            max=\"1\"\n                            step=\"0.05\"\n                            value={variationStrength}\n                            onChange={(e) => {\n                                setVariationStrength(\n                                    parseFloat(e.target.value)\n                                );\n                            }}\n                        />\n                        <small className=\"form-text text-muted\">\n                            How much variation to use\n                        </small>\n                    </div>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"model\">Model</label>\n                        <select\n                            className=\"form-control\"\n                            id=\"model\"\n                            value={model}\n                            onChange={(e) => setModel(e.target.value)}\n                        >\n                            {supportedModels.map((model) => (\n                                <option value={model} key={`model-${model}`}>\n                                    {model}\n                                </option>\n                            ))}\n                        </select>\n                        <small className=\"form-text text-muted\">\n                            Select the model to use\n                        </small>\n                    </div>\n                </>\n            )}\n            {state === \"erase\" && (\n                <p>\n                    {/* info icon */}\n                    <i className=\"fa fa-info-circle\"></i>&nbsp; Erase any\n                    undesired sections before saving\n                </p>\n            )}\n\n            <div className=\"form-group\">\n                {state === \"select\" && (\n                    <button\n                        type=\"button\"\n                        className=\"btn btn-primary btn-sm\"\n                        onClick={() => {\n                            tool.state = \"default\";\n                        }}\n                        style={{ marginRight: \"8px\" }}\n                    >\n                        {/* magic icon */}\n                        <i className=\"fa fa-magic\"></i>&nbsp; Continue\n                    </button>\n                )}\n                {((state === \"default\" && tool.selectSupported()) ||\n                    state === \"confirm\" ||\n                    state === \"erase\") && (\n                    <button\n                        className=\"btn btn-primary btn-sm\"\n                        onClick={() => {\n                            tool.cancel();\n                        }}\n                        style={{ marginRight: \"8px\" }}\n                    >\n                        {/* cancel icon */}\n                        <i className=\"fa fa-times\"></i>&nbsp; Revert\n                    </button>\n                )}\n                {(state === \"confirm\" || state === \"erase\") && (\n                    <button\n                        className=\"btn btn-primary btn-sm\"\n                        onClick={() => tool.confirm()}\n                        style={{ marginRight: \"8px\" }}\n                    >\n                        <i className=\"fa fa-save\"></i>&nbsp; Save\n                    </button>\n                )}\n                {state === \"confirm\" && (\n                    <>\n                        <button\n                            className=\"btn btn-primary btn-sm\"\n                            onClick={() => tool.erase()}\n                            style={{ marginRight: \"8px\" }}\n                        >\n                            <i className=\"fa fa-eraser\"></i>&nbsp; Erase\n                        </button>\n                    </>\n                )}\n                {state === \"default\" && (\n                    <button\n                        className=\"btn btn-primary btn-sm\"\n                        onClick={() => {\n                            tool.updateArgs({\n                                count,\n                                variationStrength,\n                                prompt,\n                                negativePrompt,\n                                model,\n                            });\n                            tool.submit(api, apisocket, image);\n                        }}\n                        style={{ marginRight: \"8px\" }}\n                    >\n                        <i className=\"fa fa-magic\"></i>&nbsp; Enhance\n                    </button>\n                )}\n            </div>\n            <Prompt\n                when={dirty}\n                message=\"Are you sure you want to leave? Your changes will be lost.\"\n            />\n        </div>\n    );\n};\n","import React, { FC, useState, useEffect } from \"react\";\nimport { Renderer } from \"./renderer\";\nimport { BaseTool, Tool } from \"./tool\";\nimport { ZoomHelper } from \"./zoomHelper\";\n\nexport class SmudgeTool extends BaseTool implements Tool {\n    private brushSize = 10;\n    private brushOpacity = 0.2;\n\n    private lastX = 0;\n    private lastY = 0;\n    private panning = false;\n    private smudging = false;\n    private _dirty = false;\n\n    set dirty(dirty: boolean) {\n        this._dirty = dirty;\n        if (this.dirtyListener) {\n            this.dirtyListener(dirty);\n        }\n    }\n\n    get dirty() {\n        return this._dirty;\n    }\n\n    private dirtyListener?: (dirty: boolean) => void;\n\n    constructor(renderer: Renderer) {\n        super(renderer, \"smudge\");\n    }\n\n    private sync() {\n        this.renderer.setCursor({\n            type: \"circle\",\n            color: \"white\",\n            radius: this.brushSize / 2,\n            x: this.lastX,\n            y: this.lastY,\n        });\n    }\n\n    updateArgs(args: any) {\n        super.updateArgs(args);\n        this.brushSize = args.brushSize || 10;\n        this.brushOpacity = args.brushOpacity || 0.2;\n        this.sync();\n    }\n\n    onMouseMove(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>): void {\n        let { x, y } = this.zoomHelper.translateMouseToCanvasCoordinates(\n            event.nativeEvent.offsetX,\n            event.nativeEvent.offsetY\n        );\n\n        if (this.panning) {\n            this.zoomHelper.onPan(event);\n        } else if (this.smudging) {\n            this.renderer.smudgeLine(\n                this.lastX,\n                this.lastY,\n                x,\n                y,\n                this.brushSize,\n                this.brushOpacity\n            );\n            this.dirty = true;\n        }\n\n        this.lastX = x;\n        this.lastY = y;\n        this.sync();\n    }\n\n    onWheel(event: WheelEvent) {\n        this.zoomHelper.onWheel(event);\n        this.sync();\n    }\n\n    onMouseDown(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        if (event.button === 0) {\n            this.smudging = true;\n            if (!this.dirty) {\n                this.renderer.copyEditImageFromBaseImage();\n            }\n            this.dirty = true;\n            let { x, y } = this.zoomHelper.translateMouseToCanvasCoordinates(\n                event.nativeEvent.offsetX,\n                event.nativeEvent.offsetY\n            );\n            this.lastX = x;\n            this.lastY = y;\n            this.sync();\n        } else if (event.button === 1) {\n            this.panning = true;\n        }\n        this.sync();\n    }\n\n    onMouseUp(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        this.smudging = false;\n        this.panning = false;\n        this.sync();\n    }\n\n    onSaveImage(listener: (encodedImage: string) => void): void {\n        this.saveListener = listener;\n    }\n\n    onDirty(listener: (dirty: boolean) => void): void {\n        this.dirtyListener = listener;\n    }\n\n    cancel() {\n        // kind of a hack, clears the selection layer\n        this.renderer.setEditImage(null);\n        this.dirty = false;\n    }\n\n    confirm() {\n        this.renderer.commitSelection();\n        const encodedImage = this.renderer.getEncodedImage(null);\n        if (encodedImage && this.saveListener) {\n            this.saveListener(encodedImage);\n        }\n        this.dirty = false;\n    }\n\n    destroy(): boolean {\n        if (this.dirty) {\n            this.renderer.commitSelection();\n        }\n        return true;\n    }\n}\n\ninterface Props {\n    renderer: Renderer;\n    tool: SmudgeTool;\n}\n\nexport const SmudgeControls: FC<Props> = ({ renderer, tool }) => {\n    const [brushSize, setBrushSize] = useState(10);\n    const [brushOpacity, setBrushOpacity] = useState(0.2);\n    const [dirty, setDirty] = useState(false);\n\n    tool.onDirty(setDirty);\n\n    useEffect(() => {\n        tool.updateArgs({\n            brushSize,\n            brushOpacity,\n        });\n    }, [brushSize, brushOpacity]);\n\n    return (\n        <div style={{ marginTop: \"16px\" }}>\n            <div className=\"form-group\">\n                <label style={{ width: \"100%\" }}>\n                    Brush size\n                    <small\n                        className=\"form-text text-muted\"\n                        style={{ float: \"right\" }}\n                    >\n                        {brushSize}px\n                    </small>\n                </label>\n                <input\n                    type=\"range\"\n                    className=\"form-control-range\"\n                    min=\"1\"\n                    max=\"100\"\n                    value={brushSize}\n                    onChange={(e) => setBrushSize(parseInt(e.target.value))}\n                />\n            </div>\n            <div className=\"form-group\">\n                <label style={{ width: \"100%\" }}>\n                    Brush opacity\n                    <small\n                        className=\"form-text text-muted\"\n                        style={{ float: \"right\" }}\n                    >\n                        {Math.round(brushOpacity * 100)}%\n                    </small>\n                </label>\n                <input\n                    type=\"range\"\n                    className=\"form-control-range\"\n                    min=\"0\"\n                    max=\"1\"\n                    step=\"0.01\"\n                    value={brushOpacity}\n                    onChange={(e) =>\n                        setBrushOpacity(parseFloat(e.target.value))\n                    }\n                />\n            </div>\n            <div\n                className=\"form-group\"\n                style={{\n                    marginTop: \"16px\",\n                    visibility: dirty ? \"visible\" : \"hidden\",\n                }}\n            >\n                <button\n                    className=\"btn btn-secondary\"\n                    onClick={() => tool.cancel()}\n                >\n                    Revert\n                </button>\n                <button\n                    className=\"btn btn-primary\"\n                    onClick={() => tool.confirm()}\n                    style={{ marginLeft: \"8px\" }}\n                >\n                    Save\n                </button>\n            </div>\n        </div>\n    );\n};\n","import React, { FC, useState, useEffect, useRef } from \"react\";\nimport axios from \"axios\";\nimport { Prompt } from \"react-router\";\n\nimport { sleep } from \"../../lib/sleep\";\nimport { defaultArgs } from \"../../components/ImagePrompt\";\nimport { Tool, BaseTool } from \"./tool\";\nimport { Renderer } from \"./renderer\";\nimport { SelectionTool } from \"./selection-tool\";\nimport { Cursor, Rect } from \"./models\";\nimport {\n    AIBrushApi,\n    CreateImageInput,\n    Image as APIImage,\n    ImageList,\n    StatusEnum,\n} from \"../../client\";\nimport { ZoomHelper } from \"./zoomHelper\";\nimport { getClosestAspectRatio } from \"../../lib/aspecRatios\";\nimport { getUpscaleLevel } from \"../../lib/upscale\";\nimport {\n    applyAlphaMask,\n    featherEdges,\n    ImageUtilWorker,\n    loadImageDataElement,\n} from \"../../lib/imageutil\";\nimport { ApiSocket, NOTIFICATION_IMAGE_UPDATED } from \"../../lib/apisocket\";\nimport moment from \"moment\";\nimport { ProgressBar } from \"../../components/ProgressBar\";\n\nconst anonymousClient = axios.create();\n\ntype InpaintToolState =\n    | \"select\"\n    | \"erase\"\n    | \"inpaint\"\n    | \"uploading\"\n    | \"processing\"\n    | \"confirm\"\n    | undefined;\n\ninterface ImageWithData extends APIImage {\n    data?: ImageData;\n}\n\nexport class InpaintTool extends BaseTool implements Tool {\n    private selectionTool: SelectionTool;\n    private prompt: string = \"\";\n    private negativePrompt: string = \"\";\n    private count: number = 4;\n    private variationStrength: number = 0.35;\n    private brushSize: number = 10;\n    private _dirty = false;\n    private worker: ImageUtilWorker;\n    private idCounter = 0;\n\n    private _state: InpaintToolState;\n    private stateHandler: (state: InpaintToolState) => void = () => {};\n    private selectionControlsListener: (show: boolean) => void = () => {};\n\n    private imageData: Array<ImageData> = [];\n    private selectedImageDataIndex: number = -1;\n    private selectedImageData: ImageData | null = null;\n    private panning = false;\n    private erasing = false;\n    private progressListener?: (progress: number) => void;\n    private errorListener?: (error: string | null) => void;\n    private dirtyListener?: (dirty: boolean) => void;\n\n    set dirty(dirty: boolean) {\n        this._dirty = dirty;\n        if (this.dirtyListener) {\n            this.dirtyListener(dirty);\n        }\n    }\n\n    get dirty() {\n        return this._dirty;\n    }\n\n    private newId(): string {\n        return `${this.idCounter++}`;\n    }\n\n    onError(handler: (error: string | null) => void) {\n        this.errorListener = handler;\n    }\n\n    private notifyError(error: string | null) {\n        if (this.errorListener) {\n            this.errorListener(error);\n        }\n    }\n\n    get state(): InpaintToolState {\n        return this._state;\n    }\n\n    set state(state: InpaintToolState) {\n        if (state != this._state) {\n            if (this._state == \"select\") {\n                this.selectionTool.destroy();\n            }\n            if (this._state === \"erase\") {\n                this.renderer.setCursor(undefined);\n            }\n            this._state = state;\n            this.stateHandler(state);\n\n            if (state == \"confirm\") {\n                this.selectionControlsListener(true);\n            } else {\n                this.selectionControlsListener(false);\n                if (state == \"select\") {\n                    const imageWidth = this.renderer.getWidth();\n                    const imageHeight = this.renderer.getHeight();\n                    const selectionWidth = Math.min(\n                        imageWidth,\n                        imageHeight,\n                        512\n                    );\n                    this.selectionTool.updateArgs({\n                        selectionOverlay: {\n                            x: 0,\n                            y: 0,\n                            width: selectionWidth,\n                            height: selectionWidth,\n                        },\n                    });\n                }\n            }\n        }\n    }\n\n    selectSupported(): boolean {\n        // return !(\n        //     this.renderer.getWidth() == this.renderer.getHeight() &&\n        //     getUpscaleLevel(\n        //         this.renderer.getWidth(),\n        //         this.renderer.getHeight()\n        //     ) === 0\n        // );\n        return true;\n    }\n\n    constructor(renderer: Renderer) {\n        super(renderer, \"inpaint\");\n        this.selectionTool = new SelectionTool(renderer);\n        if (this.selectSupported()) {\n            this.state = \"select\";\n            this.selectionTool.updateArgs({\n                outpaint: this.getArgs().outpaint,\n            });\n        } else {\n            this.state = \"erase\";\n        }\n        this.worker = new ImageUtilWorker();\n    }\n\n    onMouseDown(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        if (this.state == \"select\") {\n            this.selectionTool.onMouseDown(event);\n            return;\n        }\n        let { x, y } = this.zoomHelper.translateMouseToCanvasCoordinates(\n            event.nativeEvent.offsetX,\n            event.nativeEvent.offsetY\n        );\n        if (event.button === 1) {\n            this.panning = true;\n            return;\n        }\n        if (this.state == \"erase\") {\n            this.erasing = true;\n            this.erasePoint(x, y);\n        }\n    }\n\n    private erasePoint(x: number, y: number) {\n        if (!this.dirty) {\n            this.dirty = true;\n        }\n        this.renderer.erasePoint(x, y, this.brushSize);\n        this.renderer.render();\n    }\n\n    private updateCursor(x: number, y: number) {\n        if (this.state == \"erase\") {\n            this.renderer.setCursor({\n                color: \"white\",\n                radius: this.brushSize / 2,\n                type: \"circle\",\n                x,\n                y,\n            });\n        } else {\n            this.renderer.setCursor({\n                color: \"white\",\n                radius: 10,\n                type: \"crosshairs\",\n                x,\n                y,\n            });\n        }\n    }\n\n    onMouseMove(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        let { x, y } = this.zoomHelper.translateMouseToCanvasCoordinates(\n            event.nativeEvent.offsetX,\n            event.nativeEvent.offsetY\n        );\n        this.updateCursor(x, y);\n        if (this.state == \"select\") {\n            this.selectionTool.onMouseMove(event);\n            return;\n        }\n\n        if (this.panning) {\n            this.zoomHelper.onPan(event);\n        }\n\n        if (this.erasing) {\n            this.erasePoint(x, y);\n        }\n    }\n\n    onMouseUp(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        if (this.state == \"select\") {\n            this.selectionTool.onMouseUp(event);\n        }\n        this.panning = false;\n        this.erasing = false;\n    }\n\n    onMouseLeave(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>): void {\n        if (this.state == \"select\") {\n            this.selectionTool.onMouseLeave(event);\n        }\n        this.panning = false;\n        this.erasing = false;\n    }\n\n    onWheel(event: WheelEvent) {\n        this.zoomHelper.onWheel(event);\n        let { x, y } = this.zoomHelper.translateMouseToCanvasCoordinates(\n            event.offsetX,\n            event.offsetY\n        );\n        this.updateCursor(x, y);\n    }\n\n    updateArgs(args: any) {\n        args = {\n            ...this.getArgs(),\n            ...args,\n        };\n        super.updateArgs(args);\n        this.prompt = args.prompt || \"\";\n        this.negativePrompt = args.negativePrompt || \"\";\n        this.count = args.count || 4;\n        this.variationStrength = args.variationStrength || 0.75;\n        this.brushSize = args.brushSize || 10;\n\n        this.updateCursor(\n            this.renderer.getWidth() / 2,\n            this.renderer.getHeight() / 2\n        );\n        this.selectionTool.updateArgs({\n            outpaint: args.outpaint,\n        });\n    }\n\n    onChangeState(handler: (state: InpaintToolState) => void) {\n        this.stateHandler = handler;\n    }\n\n    onShowSelectionControls(listener: (show: boolean) => void): void {\n        this.selectionControlsListener = listener;\n    }\n\n    onProgress(listener: (progress: number) => void): void {\n        this.progressListener = listener;\n    }\n\n    private async loadImageData(\n        api: AIBrushApi,\n        imageId: string,\n        alphaMask: ImageData,\n        selectionOverlay: Rect\n    ): Promise<ImageData> {\n        const imageElement = await loadImageDataElement(api, imageId);\n        const canvas = document.createElement(\"canvas\");\n        canvas.width = selectionOverlay.width;\n        canvas.height = selectionOverlay.height;\n        const ctx = canvas.getContext(\"2d\");\n        if (!ctx) {\n            throw new Error(\"Failed to get canvas context\");\n        }\n        ctx.drawImage(\n            imageElement,\n            0,\n            0,\n            selectionOverlay.width,\n            selectionOverlay.height\n        );\n        const imageData = ctx.getImageData(\n            0,\n            0,\n            selectionOverlay.width,\n            selectionOverlay.height\n        );\n\n        const id = this.newId();\n        const resp = await this.worker.processRequest({\n            id,\n            alpha: true,\n            alphaPixels: alphaMask.data,\n            feather: true,\n            height: this.renderer.getHeight(),\n            width: this.renderer.getWidth(),\n            pixels: imageData.data,\n            selectionOverlay,\n            featherWidth: 10,\n        });\n        const updatedImageData = new ImageData(\n            resp.pixels,\n            imageData.width,\n            imageData.height\n        );\n        // remove canvas\n        canvas.remove();\n        return updatedImageData;\n    }\n\n    cancel() {\n        if (this.selectSupported()) {\n            this.state = \"select\";\n        } else {\n            this.state = \"erase\";\n        }\n        this.renderer.snapshot();\n        this.renderer.undo();\n        this.renderer.clearRedoStack();\n        this.imageData = [];\n        this.renderer.setEditImage(null);\n        this.dirty = false;\n    }\n\n    private updateProgress(progress: number) {\n        if (this.progressListener) {\n            this.progressListener(progress);\n        }\n    }\n\n    async submit(\n        api: AIBrushApi,\n        apisocket: ApiSocket,\n        image: APIImage,\n        model: string\n    ) {\n        this.notifyError(null);\n        let selectionOverlay = this.renderer.getSelectionOverlay();\n        if (!selectionOverlay) {\n            console.error(\"No selection\");\n            return;\n        }\n\n        if (this.getArgs().outpaint) {\n            // check if selection overlay is out of renderer bounds (width, height)\n            if (\n                selectionOverlay.x < 0 ||\n                selectionOverlay.y < 0 ||\n                selectionOverlay.x + selectionOverlay.width >\n                    this.renderer.getWidth() ||\n                selectionOverlay.y + selectionOverlay.height >\n                    this.renderer.getHeight()\n            ) {\n                this.renderer.expandToOverlay();\n                selectionOverlay = this.renderer.getSelectionOverlay()!;\n            }\n        }\n\n        this.state = \"uploading\";\n        this.updateProgress(0);\n\n        // get the erased area, then undo the erase to get the original image\n        const encodedMask = this.renderer.getEncodedMask(selectionOverlay);\n        const maskData = this.renderer.getImageData(selectionOverlay);\n        // hack to restore the image\n        this.renderer.snapshot();\n        this.renderer.undo();\n        this.renderer.clearRedoStack();\n\n        const encodedImage = this.renderer.getEncodedImage(selectionOverlay);\n\n        // upload temporary images in parallel\n        const tmpImagePromises = [\n            api.createTemporaryImage(),\n            api.createTemporaryImage(),\n        ];\n        const tmpImages = await Promise.all(tmpImagePromises);\n        const binaryImages = [\n            Buffer.from(encodedImage!, \"base64\"),\n            Buffer.from(encodedMask!, \"base64\"),\n        ];\n        const progress = [0, 0];\n        const uploadPromises: Array<Promise<any>> = [];\n        for (let i = 0; i < tmpImages.length; i++) {\n            const tmpImage = tmpImages[i].data;\n            const binaryImage = binaryImages[i];\n            uploadPromises.push(\n                anonymousClient.put(tmpImage.upload_url, binaryImage, {\n                    headers: {\n                        \"Content-Type\": \"image/png\",\n                    },\n                    onUploadProgress: (e) => {\n                        progress[i] = e.loaded / e.total;\n                        this.updateProgress((progress[0] + progress[1]) / 2);\n                    },\n                })\n            );\n        }\n        await Promise.all(uploadPromises);\n\n        const input: CreateImageInput = defaultArgs();\n        input.label = \"\";\n        // input.encoded_image = encodedImage;\n        // input.encoded_mask = encodedMask;\n        input.tmp_image_id = tmpImages[0].data.id;\n        input.tmp_mask_id = tmpImages[1].data.id;\n        input.parent = image.id;\n        input.params.prompt = this.prompt || image.params.prompt;\n        input.params.negative_prompt =\n            this.negativePrompt || image.params.negative_prompt;\n        input.params.denoising_strength = this.variationStrength;\n        input.count = this.count;\n        input.model = model;\n\n        const closestAspectRatio = getClosestAspectRatio(\n            selectionOverlay!.width,\n            selectionOverlay!.height\n        );\n        input.params.width = closestAspectRatio.width;\n        input.params.height = closestAspectRatio.height;\n        input.temporary = true;\n\n        let resp: ImageList | null = null;\n\n        try {\n            resp = (await api.createImage(input)).data;\n        } catch (err) {\n            console.error(\"Error creating images\", err);\n            this.notifyError(\"Failed to create image\");\n            this.state = \"select\";\n            return;\n        }\n        this.state = \"processing\";\n        this.updateProgress(0);\n        let newImages: Array<ImageWithData> | undefined = resp.images;\n        if (!newImages || newImages.length === 0) {\n            this.state = \"select\";\n            throw new Error(\"No images returned\");\n        }\n        let completed = false;\n        let lastUpdate = moment();\n\n        apisocket.onMessage(async (msg: string) => {\n            console.log(\"inpaint onMessage\", msg);\n            const img = JSON.parse(msg) as any;\n            if (\n                img.type === NOTIFICATION_IMAGE_UPDATED &&\n                img.status === StatusEnum.Completed\n            ) {\n                lastUpdate = moment();\n                for (let i = 0; i < newImages!.length; i++) {\n                    if (newImages![i].id === img.id) {\n                        const imageData = await this.loadImageData(\n                            api,\n                            newImages![i].id,\n                            maskData!,\n                            selectionOverlay!\n                        );\n                        newImages![i].data = imageData;\n                        newImages![i].status = StatusEnum.Completed;\n                    }\n                }\n            } else if (img.status === StatusEnum.Error) {\n                for (let i = 0; i < newImages!.length; i++) {\n                    if (newImages![i].id === img.id) {\n                        newImages![i].status = StatusEnum.Error;\n                    }\n                }\n            }\n        });\n        try {\n            let startTime = moment();\n            let lastCheck = moment();\n            while (!completed) {\n                let completeCount = 0;\n                await sleep(100);\n                // poll for completion\n                for (let i = 0; i < newImages!.length; i++) {\n                    if (\n                        newImages![i].status === StatusEnum.Completed ||\n                        newImages![i].status === StatusEnum.Error\n                    ) {\n                        completeCount++;\n                        continue;\n                    }\n                }\n                this.updateProgress(completeCount / newImages!.length);\n                if (completeCount === newImages!.length) {\n                    completed = true;\n                    continue;\n                }\n\n                // fallback if sockets don't catch one\n                if (moment().diff(lastCheck, \"seconds\") > 10) {\n                    // get list of ids that aren't completed and batch get them.\n                    const pendingIds = newImages\n                        .filter(\n                            (img) =>\n                                img.status === StatusEnum.Pending ||\n                                img.status === StatusEnum.Processing\n                        )\n                        .map((img) => img.id);\n                    console.log(\"Checking pending images\", pendingIds);\n                    const updatedImagesResult = await api.batchGetImages(undefined, {\n                        ids: pendingIds,\n                    });\n                    const updatedImages = updatedImagesResult.data.images;\n                    const byId = updatedImages!.reduce((acc, img) => {\n                        acc[img.id] = img;\n                        return acc;\n                    }, {} as Record<string, APIImage>);\n                    for (let i = 0; i < newImages!.length; i++) {\n                        if (\n                            newImages![i].status === StatusEnum.Pending ||\n                            newImages![i].status === StatusEnum.Processing\n                        ) {\n                            const updated = byId[newImages![i].id];\n                            if (updated) {\n                                newImages![i].status = updated.status;\n                                if (updated.status === StatusEnum.Completed) {\n                                    lastUpdate = moment();\n                                    const imageData = await this.loadImageData(\n                                        api,\n                                        newImages![i].id,\n                                        maskData!,\n                                        selectionOverlay!\n                                    );\n                                    newImages![i].data = imageData;\n                                }\n                            }\n                        }\n                    }\n                    lastCheck = moment();\n                }\n                // timeout of 2 minutes\n                if (\n                    (lastUpdate.isAfter(startTime) &&\n                        moment().diff(lastUpdate, \"seconds\") > 30) ||\n                    moment().diff(startTime, \"minutes\") > 2\n                ) {\n                    completed = true;\n                }\n            }\n        } finally {\n            apisocket.onMessage(undefined);\n        }\n\n        // sort images by score descending\n        newImages!.sort((a, b) => {\n            return b.score - a.score;\n        });\n        newImages = newImages!.filter((img) => {\n            return img.status === StatusEnum.Completed;\n        });\n\n        this.imageData = [];\n        for (let i = 0; i < newImages!.length; i++) {\n            if (newImages![i].data) {\n                this.imageData.push(newImages![i].data as ImageData);\n            }\n        }\n        if (this.imageData.length === 0) {\n            this.state = \"select\";\n            this.notifyError(\"No images returned\");\n            return;\n        }\n        this.renderer.setEditImage(this.imageData[0]);\n        this.selectedImageDataIndex = 0;\n        this.selectedImageData = this.imageData[0];\n        this.state = \"confirm\";\n    }\n\n    onDirty(listener: (dirty: boolean) => void): void {\n        this.dirtyListener = listener;\n    }\n\n    select(direction: \"left\" | \"right\") {\n        if (direction == \"left\") {\n            this.selectedImageDataIndex--;\n            if (this.selectedImageDataIndex < -1) {\n                this.selectedImageDataIndex = this.imageData.length - 1;\n            }\n        }\n        if (direction == \"right\") {\n            this.selectedImageDataIndex++;\n            if (this.selectedImageDataIndex >= this.imageData.length) {\n                this.selectedImageDataIndex = -1;\n            }\n        }\n        if (this.selectedImageDataIndex === -1) {\n            this.selectedImageData = null;\n        } else {\n            this.selectedImageData =\n                this.imageData[this.selectedImageDataIndex];\n        }\n        this.renderer.setEditImage(this.selectedImageData);\n    }\n\n    onSaveImage(listener: (encodedImage: string, args?: any) => void): void {\n        this.saveListener = listener;\n    }\n\n    confirm() {\n        this.renderer.commitSelection();\n\n        this.imageData = [];\n        const encodedImage = this.renderer.getEncodedImage(null);\n        if (encodedImage && this.saveListener) {\n            this.saveListener(encodedImage, {\n                phrases: [this.prompt],\n                negative_phrases: [this.negativePrompt],\n                selection_overlay: this.renderer.getSelectionOverlay(),\n            });\n        }\n        this.dirty = false;\n        if (this.selectSupported()) {\n            this.state = \"select\";\n        } else {\n            this.state = \"erase\";\n        }\n    }\n\n    destroy(): boolean {\n        if (this.dirty) {\n            if (!window.confirm(\"Discard changes?\")) {\n                return false;\n            }\n        }\n        this.renderer.setCursor(undefined);\n        this.renderer.setEditImage(null);\n        this.worker.destroy();\n        return true;\n    }\n}\n\ninterface ControlsProps {\n    api: AIBrushApi;\n    apisocket: ApiSocket;\n    image: APIImage;\n    renderer: Renderer;\n    tool: InpaintTool;\n}\n\nexport const InpaintControls: FC<ControlsProps> = ({\n    api,\n    apisocket,\n    image,\n    renderer,\n    tool,\n}) => {\n    const [count, setCount] = useState(4);\n    const [prompt, setPrompt] = useState(image.params.prompt || \"\");\n    const [negativePrompt, setNegativePrompt] = useState(\n        image.params.negative_prompt || \"\"\n    );\n    const [state, setState] = useState<InpaintToolState>(tool.state);\n    const [progress, setProgress] = useState(0);\n    const [error, setError] = useState<string | null>(null);\n    const [brushSize, setBrushSize] = useState(10);\n    const [dirty, setDirty] = useState(false);\n    const [outpaint, setoutpaint] = useState<boolean | undefined>(\n        tool.getArgs().outpaint\n    );\n    const [model, setModel] = useState(\"stable_diffusion_inpainting\");\n\n    useEffect(() => {\n        tool.updateArgs({\n            brushSize,\n        });\n    }, [brushSize]);\n\n    tool.onChangeState(setState);\n    tool.onProgress(setProgress);\n    tool.onError(setError);\n    tool.onDirty(setDirty);\n\n    if (state === \"uploading\" || state === \"processing\") {\n        return (\n            <div style={{ marginTop: \"16px\" }}>\n                <i className=\"fa fa-spinner fa-spin\"></i>&nbsp;{\" \"}\n                {state === \"uploading\" ? \"Uploading...\" : \"Inpainting...\"}\n                <br />\n                <ProgressBar progress={progress} />\n            </div>\n        );\n    }\n    return (\n        <div\n            style={{\n                marginTop: \"16px\",\n                marginBottom: \"8px\",\n                marginLeft: \"16px\",\n            }}\n        >\n            {error && (\n                <div className=\"alert alert-danger\" role=\"alert\">\n                    {/* dismiss button */}\n                    <button\n                        type=\"button\"\n                        className=\"close\"\n                        data-dismiss=\"alert\"\n                        aria-label=\"Close\"\n                        onClick={() => setError(null)}\n                    >\n                        <span aria-hidden=\"true\">&times;</span>\n                    </button>\n                    {error}\n                </div>\n            )}\n            {state === \"select\" && (\n                <>\n                    <p>\n                        {/* info icon */}\n                        <i className=\"fa fa-info-circle\"></i>&nbsp; Move the\n                        selection rectangle to the area that you want to\n                        inpaint. For outpainting, try zooming out.\n                    </p>\n                    <div className=\"form-group\">\n                        {/* allow outpaint checkbox */}\n                        <div className=\"form-check\">\n                            <input\n                                className=\"form-check-input\"\n                                type=\"checkbox\"\n                                id=\"allowoutpaint\"\n                                checked={!!outpaint}\n                                onChange={(e) => {\n                                    setoutpaint(e.target.checked);\n                                    tool.updateArgs({\n                                        outpaint: e.target.checked,\n                                    });\n                                }}\n                            />\n                            <label\n                                className=\"form-check-label\"\n                                htmlFor=\"allowoutpaint\"\n                            >\n                                Allow outpainting\n                            </label>\n                        </div>\n                    </div>\n                </>\n            )}\n\n            {state === \"erase\" && (\n                <>\n                    <p>\n                        {/* info icon */}\n                        <i className=\"fa fa-info-circle\"></i>&nbsp; Erase the\n                        area that you want to inpaint.\n                    </p>\n                    <div className=\"form-group\">\n                        <label style={{ width: \"100%\" }}>\n                            Brush size\n                            <small\n                                className=\"form-text text-muted\"\n                                style={{ float: \"right\" }}\n                            >\n                                {brushSize}px\n                            </small>\n                        </label>\n                        <input\n                            type=\"range\"\n                            className=\"form-control-range\"\n                            min=\"1\"\n                            max=\"100\"\n                            value={brushSize}\n                            onChange={(e) =>\n                                setBrushSize(parseInt(e.target.value))\n                            }\n                        />\n                    </div>\n                </>\n            )}\n\n            {state === \"inpaint\" && (\n                <>\n                    <p>\n                        {/* info icon */}\n                        <i className=\"fa fa-info-circle\"></i>&nbsp; Confirm the\n                        parameters below and continue\n                    </p>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"prompt\">Prompt</label>\n                        <input\n                            type=\"text\"\n                            className=\"form-control\"\n                            id=\"prompt\"\n                            value={prompt}\n                            onChange={(e) => {\n                                setPrompt(e.target.value);\n                            }}\n                        />\n                        <small className=\"form-text text-muted\">\n                            Customize the text prompt here\n                        </small>\n                    </div>\n                    {/* negative prompt */}\n                    <div className=\"form-group\">\n                        <label htmlFor=\"negativeprompt\">Negative prompt</label>\n                        <input\n                            type=\"text\"\n                            className=\"form-control\"\n                            value={negativePrompt}\n                            onChange={(e) => {\n                                setNegativePrompt(e.target.value);\n                            }}\n                        />\n                        <small className=\"form-text text-muted\">\n                            Customize the negative text prompt here\n                        </small>\n                    </div>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"count\">Count: {count}</label>\n                        <input\n                            type=\"range\"\n                            className=\"form-control-range\"\n                            id=\"count\"\n                            min=\"1\"\n                            max=\"10\"\n                            step=\"1\"\n                            value={count}\n                            onChange={(e) => {\n                                setCount(parseInt(e.target.value));\n                            }}\n                        />\n                        <small className=\"form-text text-muted\">\n                            Number of inpaint options\n                        </small>\n                    </div>\n                    {/* select model dropdown */}\n                    {/* options: stable_diffusion_inpainting, \"Epic Diffusion\", \"Deliberate\" */}\n                    <div className=\"form-group\">\n                        <label htmlFor=\"model\">Model</label>\n                        <select\n                            className=\"form-control\"\n                            id=\"model\"\n                            value={model}\n                            onChange={(e) => {\n                                setModel(e.target.value);\n                            }}\n                        >\n                            <option value=\"stable_diffusion_inpainting\">\n                                Stable Diffusion\n                            </option>\n\n                            <option value=\"stable_diffusion_2_inpainting\">\n                                Stable Diffusion 2\n                            </option>\n                            <option value=\"dreamlike_diffusion_inpainting\">\n                                Dreamlike Diffusion\n                            </option>\n                            <option value=\"anything_v4_inpainting\">\n                                Anything v4\n                            </option>\n                            <option value=\"Epic Diffusion Inpainting\">\n                                Epic Diffusion\n                            </option>\n                            <option value=\"Deliberate Inpainting\">\n                                Deliberate\n                            </option>\n                        </select>\n                        <small className=\"form-text text-muted\">\n                            Select the inpaint model\n                        </small>\n                    </div>\n                </>\n            )}\n\n            {state === \"confirm\" && (\n                <>\n                    <p>\n                        Use the <i className=\"fa fa-arrow-left\"></i> and{\" \"}\n                        <i className=\"fa fa-arrow-right\"></i> buttons to\n                        navigate between the inpaint options\n                    </p>\n                </>\n            )}\n\n            <div className=\"form-group\">\n                {(dirty ||\n                    state === \"confirm\" ||\n                    (state == \"erase\" && tool.selectSupported()) ||\n                    state == \"inpaint\") && (\n                    <button\n                        style={{ marginRight: \"8px\" }}\n                        className=\"btn btn-primary btn-sm\"\n                        onClick={() => {\n                            tool.cancel();\n                        }}\n                    >\n                        {/* cancel icon */}\n                        <i className=\"fa fa-times\"></i>&nbsp; Revert\n                    </button>\n                )}\n\n                {state === \"confirm\" && (\n                    <>\n                        <button\n                            className=\"btn btn-primary btn-sm\"\n                            onClick={() => tool.confirm()}\n                            style={{ marginRight: \"8px\" }}\n                        >\n                            {/* save icon */}\n                            <i className=\"fa fa-save\"></i>&nbsp; Save\n                        </button>\n                    </>\n                )}\n                {state == \"select\" && (\n                    <button\n                        style={{ marginRight: \"8px\" }}\n                        type=\"button\"\n                        className=\"btn btn-primary btn-sm\"\n                        onClick={() => (tool.state = \"erase\")}\n                    >\n                        <i className=\"fa fa-eraser\"></i>&nbsp; Continue\n                    </button>\n                )}\n                {state == \"erase\" && (\n                    <button\n                        style={{ marginRight: \"8px\" }}\n                        type=\"button\"\n                        className=\"btn btn-primary btn-sm\"\n                        onClick={() => (tool.state = \"inpaint\")}\n                    >\n                        <i className=\"fa fa-paint-brush\"></i>&nbsp; Continue\n                    </button>\n                )}\n                {state === \"inpaint\" && (\n                    <button\n                        style={{ marginRight: \"8px\" }}\n                        className=\"btn btn-primary btn-sm\"\n                        onClick={() => {\n                            tool.updateArgs({\n                                count,\n                                prompt,\n                                negativePrompt,\n                            });\n                            tool.submit(api, apisocket, image, model);\n                        }}\n                    >\n                        {/* paint icon */}\n                        <i className=\"fa fa-paint-brush\"></i>&nbsp; Inpaint\n                    </button>\n                )}\n            </div>\n            <Prompt\n                when={dirty}\n                message=\"Are you sure you want to leave? Your changes will be lost.\"\n            />\n        </div>\n    );\n};\n","// V2 page\nimport { FC, useState, useEffect } from \"react\";\nimport * as uuid from \"uuid\";\nimport axios from \"axios\";\nimport qs from \"qs\";\nimport Dropdown from \"react-bootstrap/Dropdown\";\nimport { useParams, useHistory, Link, useLocation } from \"react-router-dom\";\nimport moment from \"moment\";\nimport ScrollToTop from \"react-scroll-to-top\";\nimport { AIBrushApi } from \"../client\";\nimport {\n    CreateImageInput,\n    StatusEnum,\n    Boost,\n    TemporaryImage,\n} from \"../client/api\";\nimport { ImageThumbnail } from \"../components/ImageThumbnail\";\nimport { ImagePrompt, defaultArgs } from \"../components/ImagePrompt\";\nimport {\n    createEncodedThumbnail,\n    encodedImageToBlob,\n    uploadBlob,\n} from \"../lib/imageutil\";\n\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport { ImagePopup } from \"../components/ImagePopup\";\nimport { BusyModal } from \"../components/BusyModal\";\nimport { PendingImagesThumbnail } from \"../components/PendingImagesThumbnail\";\nimport { PendingImages } from \"../components/PendingImages\";\nimport {\n    ApiSocket,\n} from \"../lib/apisocket\";\nimport { LocalImagesStore, LocalImage } from \"../lib/localImagesStore\";\nimport { ErrorNotification, SuccessNotification } from \"../components/Alerts\";\nimport { sleep } from \"../lib/sleep\";\nimport { ProgressBar } from \"../components/ProgressBar\";\n\nexport const anonymousClient = axios.create();\ndelete anonymousClient.defaults.headers.common[\"Authorization\"];\n\ninterface Props {\n    api: AIBrushApi;\n    apiSocket: ApiSocket;\n    assetsUrl: string;\n    localImages: LocalImagesStore;\n}\n\nexport const Homepage: FC<Props> = ({\n    api,\n    apiSocket,\n    assetsUrl,\n    localImages,\n}) => {\n    const [creating, setCreating] = useState(false);\n    const [selectedImage, setSelectedImage] = useState<LocalImage | null>(null);\n    const [parentImage, setParentImage] = useState<LocalImage | null>(null);\n    const [loadingParent, setLoadingParent] = useState(false);\n    const [savingImage, setSavingImage] = useState(false);\n    const [uploadProgress, setUploadingProgress] = useState(0);\n\n    const [showPendingImages, setShowPendingImages] = useState(false);\n\n    const [images, setImages] = useState<Array<LocalImage>>([]);\n    const [err, setErr] = useState<string | null>(null);\n    const [errTime, setErrTime] = useState<number>(0);\n    const [success, setSuccess] = useState<string | null>(null);\n    const [successTime, setSuccessTime] = useState<number>(0);\n\n    const [hasMore, setHasMore] = useState<boolean>(true);\n    const [search, setSearch] = useState<string>(\"\");\n    const [searchDebounce, setSearchDebounce] = useState<string>(\"\");\n\n    const [bulkDeleteSelecting, setBulkDeleteSelecting] = useState(false);\n    const [bulkDeleting, setBulkDeleting] = useState(false);\n    const [bulkDeleteIds, setBulkDeleteIds] = useState<{\n        [key: string]: boolean;\n    }>({});\n\n    const [boost, setBoost] = useState<Boost | null>(null);\n    const [censorNSFW, setCensorNSFW] = useState(true);\n\n    const { id } = useParams<{ id?: string }>();\n    const history = useHistory();\n    const location = useLocation();\n\n    const onError = (err: string) => {\n        setErr(err);\n        setErrTime(moment().valueOf());\n    };\n\n    useEffect(() => {\n        let handle = setTimeout(() => {\n            setSearch(searchDebounce);\n        }, 500);\n        return () => {\n            clearTimeout(handle);\n        };\n    }, [searchDebounce]);\n\n    useEffect(() => {\n        if (id) {\n            // check if the image is already loaded\n            const image = images.find((image) => image.id === id);\n            if (image) {\n                setSelectedImage(image);\n            }\n            // refresh\n            localImages.getImage(id).then((image) => {\n                setSelectedImage(image);\n                if (!image) {\n                    history.replace(\"/\");\n                }\n            });\n        } else {\n            setSelectedImage(null);\n        }\n    }, [id]);\n\n    const onSubmit = async (input: CreateImageInput) => {\n        setCreating(true);\n        setParentImage(null);\n        setErr(null);\n        window.scrollTo(0, 0);\n        setUploadingProgress(0);\n        try {\n            if (input.encoded_image) {\n                const tmpInitImage = await api.createTemporaryImage();\n                // convert base64 to binary\n                const binaryImageData = Buffer.from(\n                    input.encoded_image,\n                    \"base64\"\n                );\n                await anonymousClient.put(\n                    tmpInitImage.data.upload_url,\n                    binaryImageData,\n                    {\n                        headers: {\n                            \"Content-Type\": \"image/png\",\n                        },\n                        onUploadProgress: (progressEvent: any) => {\n                            const percentCompleted =\n                                progressEvent.loaded / progressEvent.total;\n                            setUploadingProgress(percentCompleted);\n                        },\n                    }\n                );\n                input.encoded_image = undefined;\n                input.tmp_image_id = tmpInitImage.data.id;\n            }\n\n            const newImages = await api.createImage(input);\n            if (newImages.data.images) {\n                for (let image of newImages.data.images || []) {\n                    localImages.saveImage(image);\n                }\n                setImages((images) => {\n                    return [...newImages.data.images!, ...images].sort(\n                        sortImages\n                    );\n                });\n            } else {\n                onError(\"Could not create images\");\n            }\n        } catch (e: any) {\n            console.error(e);\n            onError(\"Error creating images\");\n        } finally {\n            setCreating(false);\n        }\n    };\n\n    const onEditNewImage = async (input: CreateImageInput) => {\n        setCreating(true);\n        setParentImage(null);\n        setErr(null);\n        window.scrollTo(0, 0);\n        try {\n            const encodedImage = input.encoded_image!;\n            const newImage: LocalImage = {\n                created_at: moment().valueOf(),\n                updated_at: moment().valueOf(),\n                created_by: \"\",\n                params: {\n                    steps: 20,\n                    width: input.params.width,\n                    height: input.params.height,\n                    prompt: input.params.prompt,\n                    negative_prompt: input.params.negative_prompt,\n                    denoising_strength: input.params.denoising_strength,\n                },\n                label: \"\",\n                id: uuid.v4(),\n                model: input.model!,\n                negative_score: 0,\n                nsfw: !!input.nsfw,\n                parent: input.parent!,\n                score: 0,\n                status: StatusEnum.Completed,\n                temporary: false,\n                imageData: `data:image/png;base64,${encodedImage}`,\n            };\n            await localImages.saveImage(newImage);\n\n            history.push(`/image-editor/${newImage.id}`);\n        } catch (e: any) {\n            console.error(e);\n            onError(\"Error creating image\");\n        } finally {\n            setCreating(false);\n        }\n    };\n\n    const onNSFW = async (updatedImage: LocalImage, nsfw: boolean) => {\n        await localImages.saveImage({\n            ...updatedImage,\n            nsfw,\n        });\n        setImages((images) => {\n            return images.map((image) => {\n                if (updatedImage.id === image.id) {\n                    return {\n                        ...image,\n                        nsfw,\n                    };\n                }\n                return image;\n            });\n        });\n    };\n\n    const loadImages = async (search: string) => {\n        console.log(\"Initial load images\");\n        // clear error\n        setErr(null);\n        setHasMore(true);\n        try {\n            const cursor = moment().add(1, \"minutes\").valueOf();\n            const resp = await localImages.listImages(\n                cursor,\n                \"prev\",\n                100,\n                search\n            );\n            setImages(resp.sort(sortImages));\n            return;\n        } catch (err) {\n            onError(\"Could not load images\");\n            console.error(err);\n        }\n    };\n\n    useEffect(() => {\n        loadImages(search);\n    }, [search]);\n\n    useEffect(() => {\n        if (!api) {\n            return;\n        }\n        let lock = false;\n\n        const pollImages = async (images: Array<LocalImage>) => {\n            if (lock) {\n                return;\n            }\n            lock = true;\n\n            const pendingOrProcessingImages = images.filter((image) => {\n                return (\n                    image.status === \"pending\" || image.status === \"processing\"\n                );\n            });\n            if (pendingOrProcessingImages.length === 0) {\n                return;\n            }\n\n            const pendingById = pendingOrProcessingImages.reduce(\n                (acc, image) => {\n                    acc[image.id] = image;\n                    return acc;\n                },\n                {} as Record<string, LocalImage>\n            );\n\n            try {\n                const resp = await api.batchGetImages(\"id,status\", {\n                    ids: pendingOrProcessingImages.map((image) => image.id),\n                });\n\n                if (resp.data.images) {\n                    const updatedImages: Array<LocalImage> =\n                        resp.data.images || [];\n                    let statusChange = false;\n                    for (let i = 0; i < updatedImages.length; i++) {\n                        let img = updatedImages[i];\n                        if (pendingById[img.id].status !== img.status) {\n                            statusChange = true;\n                        }\n                        img = {\n                            ...pendingById[img.id],\n                            ...img,\n                        }\n                        updatedImages[i] = img;\n\n                        if (img.status == StatusEnum.Error) {\n                            onError(\n                                img.error ||\n                                    \"Some images failed to generate, please make sure your prompt doesn't violate our terms of service\"\n                            );\n                            await api.deleteImage(img.id);\n                            await localImages.deleteImage(img.id);\n                            continue;\n                        }\n\n                        if (img.status === StatusEnum.Completed) {\n                            const downloadUrls = await api.getImageDownloadUrls(\n                                img.id\n                            );\n                            const resp = await anonymousClient.get(\n                                downloadUrls.data.image_url!,\n                                {\n                                    responseType: \"arraybuffer\",\n                                }\n                            );\n                            const binaryImageData = Buffer.from(\n                                resp.data,\n                                \"binary\"\n                            );\n                            const base64ImageData =\n                                binaryImageData.toString(\"base64\");\n                            const src = `data:image/png;base64,${base64ImageData}`;\n                            img.imageData = src;\n                        }\n                        await localImages.saveImage(img);\n                    }\n                    if (statusChange) {\n                        setImages((images) => {\n                            return [\n                                ...images.map((image) => {\n                                    const updatedImage = updatedImages.find(\n                                        (i) => i.id === image.id\n                                    );\n                                    if (updatedImage) {\n                                        return updatedImage;\n                                    }\n                                    return image;\n                                }),\n                            ].sort(sortImages);\n                        });\n                    }\n                }\n            } catch (err) {\n                onError(\"Could not load images\");\n                console.error(err);\n            } finally {\n                lock = false;\n            }\n        };\n\n        const timerHandle = setInterval(() => {\n            pollImages(images);\n        }, 2 * 1000);\n        return () => {\n            clearInterval(timerHandle);\n        };\n    }, [api, images, search]);\n\n    useEffect(() => {\n        const refreshBoost = async () => {\n            const updatedBoost = await api.getBoost();\n            setBoost(updatedBoost.data);\n        };\n        refreshBoost();\n        const interval = setInterval(refreshBoost, 60 * 1000);\n        return () => {\n            clearInterval(interval);\n        };\n    }, [api]);\n\n    // load parent image from saved images if an id is on the query string\n    useEffect(() => {\n        const loadParent = async () => {\n            const search = qs.parse(location.search, {\n                ignoreQueryPrefix: true,\n            });\n            if (search.parent) {\n                setLoadingParent(true);\n                try {\n                    const parentImage = await api.getImage(\n                        search.parent as string\n                    );\n                    if (parentImage.data) {\n                        const downloadUrls = await api.getImageDownloadUrls(\n                            parentImage.data.id\n                        );\n                        const resp = await anonymousClient.get(\n                            downloadUrls.data.image_url!,\n                            {\n                                responseType: \"arraybuffer\",\n                            }\n                        );\n                        const binaryImageData = Buffer.from(\n                            resp.data,\n                            \"binary\"\n                        );\n                        const base64ImageData =\n                            binaryImageData.toString(\"base64\");\n                        const src = `data:image/png;base64,${base64ImageData}`;\n                        setParentImage({\n                            ...parentImage.data,\n                            imageData: src,\n                        });\n                        history.push(\"/\");\n                    }\n                } finally {\n                    setLoadingParent(false);\n                }\n            }\n        };\n        loadParent();\n    }, [location.search]);\n\n    const isPendingOrProcessing = (image: LocalImage) => {\n        return (\n            image.status === StatusEnum.Pending ||\n            image.status === StatusEnum.Processing\n        );\n    };\n\n    const sortImages = (a: LocalImage, b: LocalImage) => {\n        // pending and processing images always come first\n        if (isPendingOrProcessing(a) && !isPendingOrProcessing(b)) {\n            return -1;\n        } else if (!isPendingOrProcessing(a) && isPendingOrProcessing(b)) {\n            return 1;\n        }\n        // if the parent is the same, sort by score descending\n        // otherwise, sort by updated_at\n        if (\n            a.parent === b.parent &&\n            a.params.prompt == b.params.prompt &&\n            a.status !== StatusEnum.Pending &&\n            b.status !== StatusEnum.Pending\n        ) {\n            // if the score is the same, sort by updated_at\n            let aScore = a.score;\n            let bScore = b.score;\n            // working around a bug where negative score was assigned\n            // for an empty negative prompt.\n            if (a.params.prompt!.trim() !== \"\") {\n                aScore = aScore - a.negative_score;\n            }\n            if (b.params.prompt!.trim() !== \"\") {\n                bScore = bScore - b.negative_score;\n            }\n            if (aScore == bScore) {\n                return b.updated_at - a.updated_at;\n            }\n            return bScore - aScore;\n        }\n\n        return b.updated_at - a.updated_at;\n    };\n\n    const onLoadMore = async () => {\n        // get the minimum updated_at from images\n        let minUpdatedAt = moment().valueOf();\n        images.forEach((image) => {\n            minUpdatedAt = Math.min(minUpdatedAt, image.updated_at);\n        });\n        // load images in descending order from updated_at\n        const resp = await localImages.listImages(\n            minUpdatedAt - 1,\n            \"prev\",\n            100,\n            search\n        );\n        if (resp.length > 0) {\n            // combine images with new images and sort by updated_at descending\n            setImages((images) =>\n                [...images, ...resp]\n                    .filter((image) => !image.deleted_at)\n                    .sort(sortImages)\n            );\n        } else {\n            setHasMore(false);\n        }\n    };\n\n    const onDelete = async (image: LocalImage) => {\n        try {\n            // await api.deleteImage(image.id);\n            await localImages.deleteImage(image.id);\n            setImages((images) => {\n                return images.filter((i) => i.id !== image.id);\n            });\n            history.push(\"/\");\n        } catch (e) {\n            console.error(e);\n            onError(\"Error deleting image\");\n        }\n    };\n\n    const onFork = async (image: LocalImage) => {\n        setParentImage(image);\n        // setSelectedImage(null);\n        history.push(\"/\");\n        window.scrollTo(0, 0);\n    };\n\n    const onSave = async (image: LocalImage) => {\n        setSavingImage(true);\n        try {\n            history.push(\"/\");\n            const createInput: CreateImageInput = {\n                count: 1,\n                // encoded_image: image.imageData!.split(\",\")[1],\n                params: image.params,\n                status: StatusEnum.Saved,\n                temporary: false,\n                label: \"\",\n                model: image.model,\n            };\n\n            const encodedImage = image.imageData!.split(\",\")[1];\n\n            // convert base64 to binary\n            const binaryImageData = Buffer.from(encodedImage, \"base64\");\n            const encodedThumbnail = await createEncodedThumbnail(encodedImage);\n            const binaryThumbnailData = Buffer.from(encodedThumbnail, \"base64\");\n\n            const createResp = await api.createImage(createInput);\n            const imageId = createResp.data.images![0].id;\n            const uploadUrls = await api.getImageUploadUrls(imageId);\n            await anonymousClient.put(\n                uploadUrls.data.thumbnail_url!,\n                binaryThumbnailData,\n                {\n                    headers: {\n                        \"Content-Type\": \"image/png\",\n                    },\n                    onUploadProgress: (progressEvent: any) => {\n                        const percentCompleted =\n                            progressEvent.loaded / progressEvent.total;\n                        setUploadingProgress(percentCompleted / 2);\n                    },\n                }\n            );\n            await anonymousClient.put(\n                uploadUrls.data.image_url!,\n                binaryImageData,\n                {\n                    headers: {\n                        \"Content-Type\": \"image/png\",\n                    },\n                    onUploadProgress: (progressEvent: any) => {\n                        const percentCompleted =\n                            progressEvent.loaded / progressEvent.total;\n                        setUploadingProgress(percentCompleted / 2 + 0.5);\n                    },\n                }\n            );\n\n            await localImages.hardDeleteImage(image.id);\n            setImages((images) => {\n                return images.filter((i) => i.id !== image.id);\n            });\n            setSuccess(\"Image saved\");\n            setSuccessTime(moment().valueOf());\n        } catch (e) {\n            console.error(e);\n            onError(\"Error saving image\");\n        } finally {\n            setSavingImage(false);\n        }\n    };\n\n    const onEdit = async (image: LocalImage) => {\n        history.push(`/image-editor/${image.id}`);\n    };\n\n    const onThumbnailClicked = (image: LocalImage) => {\n        // setSelectedImage(image);\n        if (bulkDeleteSelecting) {\n            setBulkDeleteIds({\n                ...bulkDeleteIds,\n                [image.id]: !bulkDeleteIds[image.id],\n            });\n        } else {\n            history.push(`/images/${image.id}`);\n        }\n    };\n\n    const handleCancelFork = () => {\n        setParentImage(null);\n        window.scrollTo(0, 0);\n    };\n\n    const onConfirmBulkDelete = async () => {\n        try {\n            setBulkDeleting(true);\n            const promises = Object.keys(bulkDeleteIds).map((id) => {\n                return localImages.deleteImage(id);\n            });\n            await Promise.all(promises);\n            setImages((images) => {\n                return images.filter((image) => !bulkDeleteIds[image.id]);\n            });\n            setBulkDeleteIds({});\n            setBulkDeleteSelecting(false);\n        } catch (e) {\n            console.error(e);\n            onError(\"Error deleting images\");\n        } finally {\n            setBulkDeleting(false);\n        }\n    };\n\n    const completedOrSavedImages = images.filter((image) => {\n        return (\n            !image.deleted_at &&\n            (image.status === StatusEnum.Completed ||\n                image.status === StatusEnum.Saved)\n        );\n    });\n\n    const pendingOrProcessingImages = images.filter(\n        (image) =>\n            !image.deleted_at &&\n            (image.status === StatusEnum.Pending ||\n                image.status === StatusEnum.Processing)\n    );\n\n    const pendingImages = pendingOrProcessingImages.filter(\n        (image) => image.status === StatusEnum.Pending\n    );\n\n    const processingImages = pendingOrProcessingImages.filter(\n        (image) => image.status === StatusEnum.Processing\n    );\n\n    return (\n        <>\n            <h1 style={{ fontSize: \"40px\", textAlign: \"left\" }}>\n                Welcome to AiBrush - Home\n            </h1>\n\n            <ErrorNotification message={err} timestamp={errTime} />\n            <SuccessNotification message={success} timestamp={successTime} />\n\n            <ImagePrompt\n                api={api}\n                assetsUrl={assetsUrl}\n                creating={creating}\n                onSubmit={onSubmit}\n                onEdit={onEditNewImage}\n                parent={parentImage}\n                onCancel={() => handleCancelFork()}\n            />\n            <hr />\n\n            <div\n                className=\"homepage-images\"\n                style={{ marginTop: \"48px\", paddingBottom: \"48px\" }}\n            >\n                <div style={{ textAlign: \"left\" }}>\n                    <div\n                        className=\"input-group\"\n                        style={{ marginBottom: \"16px\" }}\n                    >\n                        <input\n                            style={{}}\n                            value={searchDebounce}\n                            type=\"search\"\n                            className=\"form-control image-search\"\n                            placeholder=\"Search...\"\n                            onChange={(e) => setSearchDebounce(e.target.value)}\n                        />\n\n                        <div\n                            style={{\n                                float: \"right\",\n                            }}\n                        >\n                            {!bulkDeleteSelecting && (\n                                <>\n                                    <button\n                                        style={{ display: \"inline\" }}\n                                        className=\"btn btn-primary image-popup-button\"\n                                        onClick={() =>\n                                            setCensorNSFW(!censorNSFW)\n                                        }\n                                    >\n                                        {!censorNSFW && (\n                                            <i className=\"fas fa-eye\"></i>\n                                        )}\n                                        {censorNSFW && (\n                                            <i className=\"fas fa-eye-slash\"></i>\n                                        )}\n                                    </button>\n                                    <Dropdown\n                                        style={{\n                                            display: \"inline\",\n                                            marginLeft: \"8px\",\n                                        }}\n                                    >\n                                        <Dropdown.Toggle variant=\"danger\">\n                                            <i className=\"fas fa-trash\"></i>\n                                        </Dropdown.Toggle>\n\n                                        <Dropdown.Menu>\n                                            <Dropdown.Item\n                                                onClick={() =>\n                                                    setBulkDeleteSelecting(true)\n                                                }\n                                            >\n                                                Bulk Delete\n                                            </Dropdown.Item>\n                                            <Dropdown.Item\n                                                onClick={() =>\n                                                    history.push(\n                                                        \"/local-deleted-images\"\n                                                    )\n                                                }\n                                            >\n                                                View Deleted Images\n                                            </Dropdown.Item>\n                                        </Dropdown.Menu>\n                                    </Dropdown>\n                                </>\n                            )}\n                            {bulkDeleteSelecting && (\n                                <>\n                                    <button\n                                        className=\"btn btn-primary image-popup-button\"\n                                        onClick={() => {\n                                            setBulkDeleteSelecting(false);\n                                            setBulkDeleteIds({});\n                                        }}\n                                    >\n                                        Cancel\n                                    </button>\n                                    <button\n                                        style={{ marginLeft: \"8px\" }}\n                                        className=\"btn image-popup-delete-button\"\n                                        onClick={() => {\n                                            onConfirmBulkDelete();\n                                        }}\n                                    >\n                                        Delete\n                                    </button>\n                                </>\n                            )}\n                        </div>\n                    </div>\n                </div>\n                <InfiniteScroll\n                    dataLength={images.length}\n                    next={onLoadMore}\n                    hasMore={hasMore}\n                    loader={\n                        <>\n                            <hr />\n                            <h4>Loading...</h4>\n                        </>\n                    }\n                >\n                    {pendingOrProcessingImages.length > 0 && (\n                        <PendingImagesThumbnail\n                            pendingCount={pendingImages.length}\n                            processingCount={processingImages.length}\n                            onClick={() => {\n                                setShowPendingImages(true);\n                            }}\n                        />\n                    )}\n                    {completedOrSavedImages.map((image) => (\n                        <ImageThumbnail\n                            key={image.id}\n                            image={image}\n                            assetsUrl={assetsUrl}\n                            onClick={onThumbnailClicked}\n                            bulkDelete={\n                                bulkDeleteSelecting && bulkDeleteIds[image.id]\n                            }\n                            censorNSFW={censorNSFW}\n                        />\n                    ))}\n                </InfiniteScroll>\n            </div>\n\n            {selectedImage && (\n                <ImagePopup\n                    assetsUrl={assetsUrl}\n                    image={selectedImage}\n                    onClose={() => history.push(\"/\")}\n                    onDelete={(image) => {\n                        onDelete(image);\n                        setImages(images.filter((i) => i.id !== image.id));\n                        history.push(\"/\");\n                    }}\n                    onFork={(image) => {\n                        onFork(image);\n                        history.push(\"/\");\n                    }}\n                    onEdit={(image) => {\n                        onEdit(image);\n                    }}\n                    onSave={(image) => {\n                        onSave(image);\n                    }}\n                    onNSFW={onNSFW}\n                    censorNSFW={censorNSFW}\n                />\n            )}\n            <ScrollToTop />\n            <BusyModal show={creating} title=\"Creating images\">\n                <p>Please wait while we create your image.</p>\n                <ProgressBar progress={uploadProgress} />\n            </BusyModal>\n            <BusyModal show={bulkDeleting} title=\"Deleting images\">\n                <p>Please wait while we delete your images.</p>\n            </BusyModal>\n            <BusyModal show={loadingParent} title=\"Loading parent image\">\n                <p>Please wait while we load the parent image.</p>\n            </BusyModal>\n            <BusyModal show={savingImage} title=\"Saving image\">\n                {/* bootstrap progress bar for uploadProgress (0-1 value) */}\n                <ProgressBar progress={uploadProgress} />\n            </BusyModal>\n            <PendingImages\n                images={pendingOrProcessingImages}\n                onCancel={() => setShowPendingImages(false)}\n                show={showPendingImages}\n                onDeleteImage={(image) => {\n                    onDelete(image);\n                    setImages(images.filter((i) => i.id !== image.id));\n                }}\n            />\n        </>\n    );\n};\n","import React, { FC, useState, useEffect } from \"react\";\n\ninterface Props {\n    selectedColor: string;\n    color: string;\n    onClick: (color: string) => void;\n}\n\nexport const PaletteButton: FC<Props> = ({ selectedColor, color, onClick }) => {\n    let className = \"palette-button\";\n    if (selectedColor === color) {\n        className += \" selected\";\n    } else if (color == \"#000000\") {\n        className += \" black\";\n    }\n    return (\n        <div\n            className={className}\n            style={{ backgroundColor: color }}\n            onClick={() => onClick(color)}\n        ></div>\n    );\n};\n","import React, { FC, useState, useEffect } from \"react\";\nimport { ChromePicker } from \"react-color\";\n\n// class ButtonExample extends React.Component {\n//   state = {\n//     displayColorPicker: false,\n//   };\n\n//   handleClick = () => {\n//     this.setState({ displayColorPicker: !this.state.displayColorPicker })\n//   };\n\n//   handleClose = () => {\n//     this.setState({ displayColorPicker: false })\n//   };\n\n//   render() {\n//     const popover = {\n//       position: 'absolute',\n//       zIndex: '2',\n//     }\n//     const cover = {\n//       position: 'fixed',\n//       top: '0px',\n//       right: '0px',\n//       bottom: '0px',\n//       left: '0px',\n//     }\n//     return (\n//       <div>\n//         <button onClick={ this.handleClick }>Pick Color</button>\n//         { this.state.displayColorPicker ? <div style={ popover }>\n//           <div style={ cover } onClick={ this.handleClose }/>\n//           <ChromePicker />\n//         </div> : null }\n//       </div>\n//     )\n//   }\n// }\n\ninterface Props {\n    color: string;\n    onColorSelected: (color: string) => void;\n}\n\nexport const ColorPicker: FC<Props> = ({ color, onColorSelected }) => {\n    const [displayColorPicker, setDisplayColorPicker] = useState(false);\n    const [tmpColor, setTmpColor] = useState(color);\n\n    const handleClick = () => {\n        setDisplayColorPicker(!displayColorPicker);\n        if (displayColorPicker) {\n            onColorSelected(tmpColor);\n        }\n    };\n\n    const handleClose = () => {\n        setDisplayColorPicker(false);\n        if (displayColorPicker) {\n            onColorSelected(tmpColor);\n        }\n    };\n\n    const popover: React.CSSProperties = {\n        position: \"absolute\",\n        zIndex: 2,\n    };\n    const cover: React.CSSProperties = {\n        position: \"fixed\",\n        top: \"0px\",\n        right: \"0px\",\n        bottom: \"0px\",\n        left: \"0px\",\n    };\n\n    return (\n        <>\n            <button className=\"color-picker\" onClick={handleClick}>\n                <i className=\"fas fa-plus\" />\n            </button>\n            {displayColorPicker ? (\n                <div style={popover}>\n                    <div style={cover} onClick={handleClose} />\n                    <ChromePicker\n                        color={tmpColor}\n                        onChange={(color) => setTmpColor(color.hex)}\n                        onChangeComplete={(color) => setTmpColor(color.hex)}\n                    />\n                </div>\n            ) : null}\n        </>\n    );\n};\n","import React, { FC, useEffect, useState } from \"react\";\nimport { ChromePicker } from \"react-color\";\n\nimport { Renderer } from \"./renderer\";\nimport { BaseTool, Tool } from \"./tool\";\nimport { ZoomHelper } from \"./zoomHelper\";\nimport { PaletteButton } from \"./PaletteButton\";\nimport { ColorPicker } from \"./ColorPicker\";\n\nconst defaultColors = [\n    \"#FFFFFF\",\n    \"#5A2C02\",\n    \"#386EB6\",\n    \"#6B31A1\",\n    \"#CB2C26\",\n    \"#000000\",\n    \"#888888\",\n    \"#50B050\",\n    \"#FBDB37\",\n    \"#E88D2D\",\n];\n\nexport class PencilTool extends BaseTool implements Tool {\n    private brushSize = 10;\n    private brushColor = defaultColors[0];\n    private palette: string[] = [...defaultColors];\n\n    private panning = false;\n    private isDrawing = false;\n    private lastX = 0;\n    private lastY = 0;\n    private colorPicking = false;\n    private lastPickedColor = \"#000000\";\n    private _dirty = false;\n\n    set dirty(dirty: boolean) {\n        this._dirty = dirty;\n        if (this.dirtyListener) {\n            this.dirtyListener(dirty);\n        }\n    }\n\n    get dirty() {\n        return this._dirty;\n    }\n\n\n    private dirtyListener?: (dirty: boolean) => void;\n    private colorPickedListener?: (color: string) => void;\n\n    constructor(renderer: Renderer) {\n        super(renderer, \"pencil\");\n    }\n\n    private sync() {\n        if (this.colorPicking) {\n            this.renderer.setCursor({\n                x: this.lastX,\n                y: this.lastY,\n                radius: this.renderer.getWidth() / 20,\n                color: this.lastPickedColor,\n                type: \"colorpicker\",\n            })\n        } else {\n            this.renderer.setCursor({\n                x: this.lastX,\n                y: this.lastY,\n                radius: this.brushSize / 2,\n                color: this.brushColor,\n                type: \"circle-fill\",\n            });\n        }\n        \n    }\n\n    updateArgs(args: any) {\n        super.updateArgs(args);\n        this.brushSize = args.brushSize || 10;\n        this.brushColor = args.brushColor || defaultColors[0];\n        this.palette = args.palette || [...defaultColors];\n        this.sync();\n    }\n\n    onMouseDown(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        if (this.colorPicking) {\n            return;\n        }\n        if (event.button === 0) {\n            let { x, y } = this.zoomHelper.translateMouseToCanvasCoordinates(\n                event.nativeEvent.offsetX,\n                event.nativeEvent.offsetY\n            );\n            this.renderer.drawPoint(x, y, this.brushSize, this.brushColor);\n            this.isDrawing = true;\n            this.lastX = x;\n            this.lastY = y;\n            this.dirty = true;\n        } else if (event.button === 1) {\n            this.panning = true;\n        }\n        this.sync();\n    }\n\n    onMouseMove(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>): void {\n        let { x, y } = this.zoomHelper.translateMouseToCanvasCoordinates(\n            event.nativeEvent.offsetX,\n            event.nativeEvent.offsetY\n        );\n        if (this.colorPicking) {\n            this.lastPickedColor = this.renderer.getPixel(x, y);\n        } else if (this.panning) {\n            this.zoomHelper.onPan(event);\n        } else {\n            if (this.isDrawing) {\n                this.renderer.drawLine(\n                    this.lastX,\n                    this.lastY,\n                    x,\n                    y,\n                    this.brushSize,\n                    this.brushColor\n                );\n                this.dirty = true;\n            }\n        }\n        this.lastX = x;\n        this.lastY = y;\n        this.sync();\n    }\n\n    onMouseUp(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>): void {\n        if (event.button === 0) {\n            this.isDrawing = false;\n            if (this.colorPicking) {\n                this.colorPicking = false;\n                this.brushColor = this.lastPickedColor;\n                if (this.colorPickedListener) {\n                    this.colorPickedListener(this.lastPickedColor);\n                }\n            }\n        } else if (event.button === 1) {\n            this.panning = false;\n        }\n        this.sync();\n    }\n\n    onWheel(event: WheelEvent) {\n        this.zoomHelper.onWheel(event);\n        this.sync();\n    }\n\n    cancel() {\n        // kind of a hack, clears the selection layer\n        this.renderer.setEditImage(null);\n        this.dirty = false;\n    }\n\n    confirm() {\n        this.renderer.commitSelection();\n        const encodedImage = this.renderer.getEncodedImage(null);\n        if (encodedImage && this.saveListener) {\n            this.saveListener(encodedImage);\n        }\n        this.dirty = false;\n    }\n\n    onSaveImage(listener: (encodedImage: string) => void): void {\n        this.saveListener = listener;\n    }\n\n    onDirty(listener: (dirty: boolean) => void): void {\n        this.dirtyListener = listener;\n    }\n\n    destroy(): boolean {\n        if (this.dirty) {\n            this.renderer.commitSelection();\n        }\n        return true;\n    }\n\n    beginColorpicker(): void {\n        this.colorPicking = true;\n        this.sync();\n    }\n\n    onColorPicked(listener: (color: string) => void): void {\n        this.colorPickedListener = listener;\n    }\n}\n\ninterface ControlsProps {\n    renderer: Renderer;\n    tool: PencilTool;\n}\n\nconst MAX_PALETTE_SIZE = 30;\n\nfunction addToPalette(palette: string[], color: string): string[] {\n    if (palette.indexOf(color) === -1) {\n        // insert at the beginning\n        palette = [color, ...palette];\n    }\n    if (palette.length > MAX_PALETTE_SIZE) {\n        palette = palette.slice(0, MAX_PALETTE_SIZE);\n    }\n    return palette;\n}\n\nexport const Controls: FC<ControlsProps> = ({ renderer, tool }) => {\n    const [brushSize, setBrushSize] = useState(10);\n    const [brushColor, setBrushColor] = useState(defaultColors[0]);\n    const [palette, setPalette] = useState(defaultColors);\n    const [dirty, setDirty] = useState(false);\n\n    tool.onDirty(setDirty);\n\n    useEffect(() => {\n        tool.updateArgs({\n            brushSize,\n            brushColor,\n            palette,\n        });\n    }, [brushSize, brushColor, palette]);\n\n    const onColorSelected = (color: string) => {\n        setBrushColor(color);\n        setPalette(addToPalette(palette, color));\n    };\n\n    tool.onColorPicked(onColorSelected);\n\n    return (\n        <div style={{ marginTop: \"16px\" }}>\n            <div className=\"form-group\">\n                <label style={{width: \"100%\"}}>\n                    Brush size\n                    <small className=\"form-text text-muted\" style={{float: \"right\"}}>\n                        {brushSize}px\n                    </small>\n                </label>\n                <input\n                    type=\"range\"\n                    className=\"form-control-range\"\n                    min=\"1\"\n                    max=\"100\"\n                    value={brushSize}\n                    onChange={(e) => setBrushSize(parseInt(e.target.value))}\n                />\n            </div>\n            <div\n                style={{\n                    display: \"flex\",\n                    flexDirection: \"row\",\n                    flexWrap: \"wrap\",\n                }}\n            >\n                {palette.map((color, i) => (\n                    <PaletteButton\n                        key={i}\n                        selectedColor={brushColor}\n                        color={color}\n                        onClick={(color) => setBrushColor(color)}\n                    />\n                ))}\n                {/* <div\n                    className=\"color-picker\"\n                    style={{ textAlign: \"center\", backgroundColor: \"#ccc\" }}\n                >\n                    <i className=\"fas fa-eye-dropper\" />\n                </div> */}\n                <button\n                    className=\"color-picker\"\n                    onClick={() => tool.beginColorpicker()}\n                >\n                    <i className=\"fas fa-eye-dropper\" />\n                </button>\n                <ColorPicker\n                    color={brushColor}\n                    onColorSelected={(color) => onColorSelected(color)}\n                />\n            </div>\n            <div className=\"form-group\" style={{\n                marginTop: \"16px\",\n                visibility: dirty ? \"visible\" : \"hidden\",\n            }}>\n                <button\n                    className=\"btn btn-secondary\"\n                    onClick={() => tool.cancel()}\n                >\n                    Revert\n                </button>\n                <button\n                    className=\"btn btn-primary\"\n                    onClick={() => tool.confirm()}\n                    style={{ marginLeft: \"8px\" }}\n                >\n                    Save\n                </button>\n            </div>\n        </div>\n    );\n};\n\n// TODO list:\n// reset to initial colors\n// color picker\n// eyedropper\n// color history\n\n// zoom/pan\n// actual drawing\n// undo/redo\n// save\n// revert\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * AIBrush API\n * Orchestration backend for AI Brush\n *\n * The version of the OpenAPI document: 1.0.0\n * Contact: admin@aibrush.art\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport { Configuration } from './configuration';\nimport globalAxios, { AxiosPromise, AxiosInstance } from 'axios';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';\n\n/**\n * \n * @export\n * @interface AddMetricItem\n */\nexport interface AddMetricItem {\n    /**\n     * \n     * @type {string}\n     * @memberof AddMetricItem\n     */\n    name: string;\n    /**\n     * \n     * @type {number}\n     * @memberof AddMetricItem\n     */\n    value: number;\n    /**\n     * \n     * @type {string}\n     * @memberof AddMetricItem\n     */\n    type: AddMetricItemTypeEnum;\n    /**\n     * \n     * @type {Array<MetricAttribute>}\n     * @memberof AddMetricItem\n     */\n    attributes: Array<MetricAttribute>;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum AddMetricItemTypeEnum {\n    Gauge = 'gauge',\n    Count = 'count'\n}\n\n/**\n * \n * @export\n * @interface AddMetricsInput\n */\nexport interface AddMetricsInput {\n    /**\n     * \n     * @type {Array<AddMetricItem>}\n     * @memberof AddMetricsInput\n     */\n    metrics: Array<AddMetricItem>;\n}\n/**\n * \n * @export\n * @interface AssetsUrl\n */\nexport interface AssetsUrl {\n    /**\n     * \n     * @type {string}\n     * @memberof AssetsUrl\n     */\n    assets_url: string;\n}\n/**\n * \n * @export\n * @interface BatchGetImagesInput\n */\nexport interface BatchGetImagesInput {\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof BatchGetImagesInput\n     */\n    ids: Array<string>;\n}\n/**\n * \n * @export\n * @interface Boost\n */\nexport interface Boost {\n    /**\n     * \n     * @type {string}\n     * @memberof Boost\n     */\n    user_id: string;\n    /**\n     * \n     * @type {number}\n     * @memberof Boost\n     */\n    activated_at: number;\n    /**\n     * Balance in 1/2 gpu milliseconds (.1 cents)\n     * @type {number}\n     * @memberof Boost\n     */\n    balance: number;\n    /**\n     * \n     * @type {number}\n     * @memberof Boost\n     */\n    level: number;\n    /**\n     * Whether the boost is active\n     * @type {boolean}\n     * @memberof Boost\n     */\n    is_active?: boolean;\n}\n/**\n * \n * @export\n * @interface BoostList\n */\nexport interface BoostList {\n    /**\n     * \n     * @type {Array<Boost>}\n     * @memberof BoostList\n     */\n    boosts: Array<Boost>;\n}\n/**\n * \n * @export\n * @interface CreateImageInput\n */\nexport interface CreateImageInput {\n    /**\n     * \n     * @type {StatusEnum}\n     * @memberof CreateImageInput\n     */\n    status?: StatusEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateImageInput\n     */\n    label?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateImageInput\n     */\n    parent?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateImageInput\n     */\n    encoded_image?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateImageInput\n     */\n    encoded_mask?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateImageInput\n     */\n    tmp_image_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateImageInput\n     */\n    tmp_mask_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateImageInput\n     */\n    tmp_thumbnail_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateImageInput\n     */\n    model: string;\n    /**\n     * \n     * @type {ImageParams}\n     * @memberof CreateImageInput\n     */\n    params: ImageParams;\n    /**\n     * \n     * @type {number}\n     * @memberof CreateImageInput\n     */\n    count: number;\n    /**\n     * \n     * @type {boolean}\n     * @memberof CreateImageInput\n     */\n    nsfw?: boolean;\n    /**\n     * \n     * @type {boolean}\n     * @memberof CreateImageInput\n     */\n    temporary?: boolean;\n}\n/**\n * \n * @export\n * @interface DepositRequest\n */\nexport interface DepositRequest {\n    /**\n     * Amount in 1/2 gpu milliseconds (.1 cents)\n     * @type {number}\n     * @memberof DepositRequest\n     */\n    amount: number;\n    /**\n     * Boost level to activate after deposit\n     * @type {number}\n     * @memberof DepositRequest\n     */\n    level: number;\n}\n/**\n * \n * @export\n * @interface DiscordLogin\n */\nexport interface DiscordLogin {\n    /**\n     * \n     * @type {string}\n     * @memberof DiscordLogin\n     */\n    code: string;\n}\n/**\n * \n * @export\n * @interface FeatureList\n */\nexport interface FeatureList {\n    /**\n     * \n     * @type {string}\n     * @memberof FeatureList\n     */\n    terms_uri?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof FeatureList\n     */\n    privacy_uri?: string;\n}\n/**\n * \n * @export\n * @interface GlobalSettings\n */\nexport interface GlobalSettings {\n    /**\n     * \n     * @type {string}\n     * @memberof GlobalSettings\n     */\n    settings_key: string;\n    /**\n     * \n     * @type {object}\n     * @memberof GlobalSettings\n     */\n    settings_json: object;\n}\n/**\n * \n * @export\n * @interface Healthcheck\n */\nexport interface Healthcheck {\n    /**\n     * \n     * @type {string}\n     * @memberof Healthcheck\n     */\n    status?: HealthcheckStatusEnum;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum HealthcheckStatusEnum {\n    Ok = 'ok'\n}\n\n/**\n * \n * @export\n * @interface Image\n */\nexport interface Image {\n    /**\n     * \n     * @type {string}\n     * @memberof Image\n     */\n    id: string;\n    /**\n     * \n     * @type {number}\n     * @memberof Image\n     */\n    created_at: number;\n    /**\n     * \n     * @type {string}\n     * @memberof Image\n     */\n    created_by: string;\n    /**\n     * \n     * @type {number}\n     * @memberof Image\n     */\n    updated_at: number;\n    /**\n     * \n     * @type {ImageParams}\n     * @memberof Image\n     */\n    params: ImageParams;\n    /**\n     * \n     * @type {string}\n     * @memberof Image\n     */\n    label: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Image\n     */\n    parent: string;\n    /**\n     * \n     * @type {number}\n     * @memberof Image\n     */\n    score: number;\n    /**\n     * \n     * @type {number}\n     * @memberof Image\n     */\n    negative_score: number;\n    /**\n     * \n     * @type {StatusEnum}\n     * @memberof Image\n     */\n    status: StatusEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof Image\n     */\n    model: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof Image\n     */\n    nsfw: boolean;\n    /**\n     * \n     * @type {boolean}\n     * @memberof Image\n     */\n    temporary: boolean;\n    /**\n     * \n     * @type {number}\n     * @memberof Image\n     */\n    deleted_at?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof Image\n     */\n    error?: string;\n}\n/**\n * \n * @export\n * @interface ImageList\n */\nexport interface ImageList {\n    /**\n     * \n     * @type {Array<Image>}\n     * @memberof ImageList\n     */\n    images?: Array<Image>;\n}\n/**\n * \n * @export\n * @interface ImageParams\n */\nexport interface ImageParams {\n    /**\n     * \n     * @type {string}\n     * @memberof ImageParams\n     */\n    prompt?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof ImageParams\n     */\n    steps?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof ImageParams\n     */\n    negative_prompt?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof ImageParams\n     */\n    width?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof ImageParams\n     */\n    height?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof ImageParams\n     */\n    denoising_strength?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof ImageParams\n     */\n    cfg_scale?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof ImageParams\n     */\n    seed?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ImageParams\n     */\n    controlnet_type?: ImageParamsControlnetTypeEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof ImageParams\n     */\n    augmentation?: ImageParamsAugmentationEnum;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum ImageParamsControlnetTypeEnum {\n    Canny = 'canny',\n    Hed = 'hed',\n    Depth = 'depth',\n    Normal = 'normal',\n    Openpose = 'openpose',\n    Seg = 'seg',\n    Scribble = 'scribble',\n    Fakescribbles = 'fakescribbles',\n    Hough = 'hough'\n}\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum ImageParamsAugmentationEnum {\n    FaceRestore = 'face_restore',\n    RemoveBackground = 'remove_background',\n    Upscale = 'upscale'\n}\n\n/**\n * \n * @export\n * @interface ImageUrls\n */\nexport interface ImageUrls {\n    /**\n     * \n     * @type {string}\n     * @memberof ImageUrls\n     */\n    init_image_url?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ImageUrls\n     */\n    image_url?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ImageUrls\n     */\n    mask_url?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ImageUrls\n     */\n    thumbnail_url?: string;\n}\n/**\n * \n * @export\n * @interface InviteCode\n */\nexport interface InviteCode {\n    /**\n     * \n     * @type {string}\n     * @memberof InviteCode\n     */\n    id?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof InviteCode\n     */\n    created_at?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof InviteCode\n     */\n    created_by?: string;\n}\n/**\n * \n * @export\n * @interface IsAdminResponse\n */\nexport interface IsAdminResponse {\n    /**\n     * \n     * @type {boolean}\n     * @memberof IsAdminResponse\n     */\n    is_admin?: boolean;\n}\n/**\n * \n * @export\n * @interface LoginInput\n */\nexport interface LoginInput {\n    /**\n     * \n     * @type {string}\n     * @memberof LoginInput\n     */\n    email?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof LoginInput\n     */\n    invite_code?: string;\n}\n/**\n * \n * @export\n * @interface LoginResult\n */\nexport interface LoginResult {\n    /**\n     * \n     * @type {string}\n     * @memberof LoginResult\n     */\n    accessToken?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof LoginResult\n     */\n    refreshToken?: string;\n}\n/**\n * \n * @export\n * @interface MetricAttribute\n */\nexport interface MetricAttribute {\n    /**\n     * \n     * @type {string}\n     * @memberof MetricAttribute\n     */\n    name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof MetricAttribute\n     */\n    value?: string;\n}\n/**\n * \n * @export\n * @interface Order\n */\nexport interface Order {\n    /**\n     * \n     * @type {string}\n     * @memberof Order\n     */\n    id: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Order\n     */\n    created_by: string;\n    /**\n     * \n     * @type {number}\n     * @memberof Order\n     */\n    created_at: number;\n    /**\n     * \n     * @type {number}\n     * @memberof Order\n     */\n    ends_at: number;\n    /**\n     * \n     * @type {boolean}\n     * @memberof Order\n     */\n    is_active: boolean;\n    /**\n     * \n     * @type {number}\n     * @memberof Order\n     */\n    gpu_count: number;\n    /**\n     * \n     * @type {number}\n     * @memberof Order\n     */\n    amount_paid_cents: number;\n}\n/**\n * \n * @export\n * @interface RefreshLoginInput\n */\nexport interface RefreshLoginInput {\n    /**\n     * \n     * @type {string}\n     * @memberof RefreshLoginInput\n     */\n    refreshToken?: string;\n}\n/**\n * \n * @export\n * @interface StableDiffusionModel\n */\nexport interface StableDiffusionModel {\n    /**\n     * The name of the model\n     * @type {string}\n     * @memberof StableDiffusionModel\n     */\n    name: string;\n    /**\n     * The baseline model used\n     * @type {string}\n     * @memberof StableDiffusionModel\n     */\n    baseline: string;\n    /**\n     * The type of the model (e.g., ckpt)\n     * @type {string}\n     * @memberof StableDiffusionModel\n     */\n    type: string;\n    /**\n     * A short description of the model\n     * @type {string}\n     * @memberof StableDiffusionModel\n     */\n    description: string;\n    /**\n     * Tags associated with the model\n     * @type {Array<string>}\n     * @memberof StableDiffusionModel\n     */\n    tags: Array<string>;\n    /**\n     * A list of URIs for showcase images\n     * @type {Array<string>}\n     * @memberof StableDiffusionModel\n     */\n    showcases: Array<string>;\n    /**\n     * The version of the model\n     * @type {string}\n     * @memberof StableDiffusionModel\n     */\n    version: string;\n    /**\n     * The style of the model (e.g., anime, furry)\n     * @type {string}\n     * @memberof StableDiffusionModel\n     */\n    style: string;\n    /**\n     * Whether the model is Not Safe For Work (NSFW)\n     * @type {boolean}\n     * @memberof StableDiffusionModel\n     */\n    nsfw: boolean;\n    /**\n     * Whether to download all model files\n     * @type {boolean}\n     * @memberof StableDiffusionModel\n     */\n    download_all: boolean;\n    /**\n     * Configuration information for the model\n     * @type {object}\n     * @memberof StableDiffusionModel\n     */\n    config: object;\n    /**\n     * Whether the model is available for use\n     * @type {boolean}\n     * @memberof StableDiffusionModel\n     */\n    available: boolean;\n}\n/**\n * \n * @export\n * @enum {string}\n */\n\nexport enum StatusEnum {\n    Pending = 'pending',\n    Processing = 'processing',\n    Completed = 'completed',\n    Saved = 'saved',\n    Error = 'error',\n    Deleted = 'deleted'\n}\n\n/**\n * \n * @export\n * @interface TemporaryImage\n */\nexport interface TemporaryImage {\n    /**\n     * \n     * @type {string}\n     * @memberof TemporaryImage\n     */\n    id: string;\n    /**\n     * \n     * @type {string}\n     * @memberof TemporaryImage\n     */\n    upload_url: string;\n}\n/**\n * \n * @export\n * @interface UpdateBoostRequest\n */\nexport interface UpdateBoostRequest {\n    /**\n     * Boost level to set for current user\n     * @type {number}\n     * @memberof UpdateBoostRequest\n     */\n    level?: number;\n    /**\n     * Whether to activate or deactivate the boost\n     * @type {boolean}\n     * @memberof UpdateBoostRequest\n     */\n    is_active?: boolean;\n}\n/**\n * \n * @export\n * @interface UpdateBoostResponse\n */\nexport interface UpdateBoostResponse {\n    /**\n     * \n     * @type {number}\n     * @memberof UpdateBoostResponse\n     */\n    level?: number;\n    /**\n     * Balance in 1/2 gpu milliseconds (.1 cents)\n     * @type {number}\n     * @memberof UpdateBoostResponse\n     */\n    balance?: number;\n    /**\n     * Whether the boost is active\n     * @type {boolean}\n     * @memberof UpdateBoostResponse\n     */\n    is_active?: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof UpdateBoostResponse\n     */\n    error?: string;\n}\n/**\n * \n * @export\n * @interface UpdateGlobalSettingsRequest\n */\nexport interface UpdateGlobalSettingsRequest {\n    /**\n     * \n     * @type {object}\n     * @memberof UpdateGlobalSettingsRequest\n     */\n    settings_json: object;\n}\n/**\n * \n * @export\n * @interface UpdateImageInput\n */\nexport interface UpdateImageInput {\n    /**\n     * \n     * @type {string}\n     * @memberof UpdateImageInput\n     */\n    label?: string;\n    /**\n     * \n     * @type {StatusEnum}\n     * @memberof UpdateImageInput\n     */\n    status?: StatusEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof UpdateImageInput\n     */\n    encoded_image?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof UpdateImageInput\n     */\n    encoded_npy?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof UpdateImageInput\n     */\n    score?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof UpdateImageInput\n     */\n    negative_score?: number;\n    /**\n     * \n     * @type {boolean}\n     * @memberof UpdateImageInput\n     */\n    nsfw?: boolean;\n    /**\n     * \n     * @type {number}\n     * @memberof UpdateImageInput\n     */\n    deleted_at?: number | null;\n    /**\n     * \n     * @type {string}\n     * @memberof UpdateImageInput\n     */\n    error?: string;\n}\n/**\n * \n * @export\n * @interface UpsertWorkerConfigInput\n */\nexport interface UpsertWorkerConfigInput {\n    /**\n     * \n     * @type {Array<WorkerGpuConfig>}\n     * @memberof UpsertWorkerConfigInput\n     */\n    gpu_configs?: Array<WorkerGpuConfig>;\n}\n/**\n * \n * @export\n * @interface UpsertWorkerInput\n */\nexport interface UpsertWorkerInput {\n    /**\n     * \n     * @type {string}\n     * @memberof UpsertWorkerInput\n     */\n    display_name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof UpsertWorkerInput\n     */\n    status?: UpsertWorkerInputStatusEnum;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum UpsertWorkerInputStatusEnum {\n    Idle = 'idle',\n    Active = 'active'\n}\n\n/**\n * \n * @export\n * @interface User\n */\nexport interface User {\n    /**\n     * \n     * @type {string}\n     * @memberof User\n     */\n    id?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof User\n     */\n    active?: boolean;\n}\n/**\n * \n * @export\n * @interface VerifyLoginInput\n */\nexport interface VerifyLoginInput {\n    /**\n     * \n     * @type {string}\n     * @memberof VerifyLoginInput\n     */\n    email?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof VerifyLoginInput\n     */\n    code?: string;\n}\n/**\n * \n * @export\n * @interface Worker\n */\nexport interface Worker {\n    /**\n     * \n     * @type {string}\n     * @memberof Worker\n     */\n    id: string;\n    /**\n     * \n     * @type {number}\n     * @memberof Worker\n     */\n    created_at: number;\n    /**\n     * \n     * @type {string}\n     * @memberof Worker\n     */\n    display_name: string;\n    /**\n     * \n     * @type {number}\n     * @memberof Worker\n     */\n    last_ping?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof Worker\n     */\n    status?: WorkerStatusEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof Worker\n     */\n    login_code?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Worker\n     */\n    engine?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof Worker\n     */\n    num_gpus?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof Worker\n     */\n    cloud_instance_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Worker\n     */\n    gpu_type?: string;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum WorkerStatusEnum {\n    Idle = 'idle',\n    Active = 'active'\n}\n\n/**\n * \n * @export\n * @interface WorkerConfig\n */\nexport interface WorkerConfig {\n    /**\n     * \n     * @type {string}\n     * @memberof WorkerConfig\n     */\n    worker_id: string;\n    /**\n     * \n     * @type {Array<WorkerGpuConfig>}\n     * @memberof WorkerConfig\n     */\n    gpu_configs?: Array<WorkerGpuConfig>;\n}\n/**\n * \n * @export\n * @interface WorkerGpuConfig\n */\nexport interface WorkerGpuConfig {\n    /**\n     * \n     * @type {number}\n     * @memberof WorkerGpuConfig\n     */\n    gpu_num: number;\n    /**\n     * \n     * @type {string}\n     * @memberof WorkerGpuConfig\n     */\n    model: string;\n}\n/**\n * \n * @export\n * @interface WorkerList\n */\nexport interface WorkerList {\n    /**\n     * \n     * @type {Array<Worker>}\n     * @memberof WorkerList\n     */\n    workers?: Array<Worker>;\n}\n/**\n * \n * @export\n * @interface WorkerLoginCode\n */\nexport interface WorkerLoginCode {\n    /**\n     * \n     * @type {string}\n     * @memberof WorkerLoginCode\n     */\n    login_code: string;\n}\n\n/**\n * AIBrushApi - axios parameter creator\n * @export\n */\nexport const AIBrushApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * Add Metrics\n         * @param {AddMetricsInput} [addMetricsInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        addMetrics: async (addMetricsInput?: AddMetricsInput, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/metrics`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(addMetricsInput, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get a list of saved images by id\n         * @param {string} [fields] Comma-separated list of fields to include in the response images. For example: \\&quot;id,params,created_at\\&quot; \n         * @param {BatchGetImagesInput} [batchGetImagesInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        batchGetImages: async (fields?: string, batchGetImagesInput?: BatchGetImagesInput, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/batch-get-images`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (fields !== undefined) {\n                localVarQueryParameter['fields'] = fields;\n            }\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(batchGetImagesInput, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Create a new image\n         * @param {CreateImageInput} [createImageInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createImage: async (createImageInput?: CreateImageInput, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/images`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(createImageInput, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Create a new invite code\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createInviteCode: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/invite-codes`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Create a new temporary image\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createTemporaryImage: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/temporary-images`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Delete a saved image\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteImage: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('deleteImage', 'id', id)\n            const localVarPath = `/api/images/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Deposit to a user\\'s boost\n         * @param {string} userId \n         * @param {DepositRequest} [depositRequest] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        depositBoost: async (userId: string, depositRequest?: DepositRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'userId' is not null or undefined\n            assertParamExists('depositBoost', 'userId', userId)\n            const localVarPath = `/api/boost/{user_id}/deposit`\n                .replace(`{${\"user_id\"}}`, encodeURIComponent(String(userId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(depositRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Log in with Discord\n         * @param {DiscordLogin} [discordLogin] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        discordLogin: async (discordLogin?: DiscordLogin, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/discord-login`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(discordLogin, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get the assets url\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getAssetsUrl: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/assets-url`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get the boost for the current user\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getBoost: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/boost`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get the boost for a user\n         * @param {string} userId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getBoostForUser: async (userId: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'userId' is not null or undefined\n            assertParamExists('getBoostForUser', 'userId', userId)\n            const localVarPath = `/api/boost/{user_id}`\n                .replace(`{${\"user_id\"}}`, encodeURIComponent(String(userId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get the features\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getFeatures: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/features`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get the global settings\n         * @param {string} key \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getGlobalSettings: async (key: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'key' is not null or undefined\n            assertParamExists('getGlobalSettings', 'key', key)\n            const localVarPath = `/api/global-settings/{key}`\n                .replace(`{${\"key\"}}`, encodeURIComponent(String(key)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get a saved image by id\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getImage: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('getImage', 'id', id)\n            const localVarPath = `/api/images/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get the binary image data\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getImageData: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('getImageData', 'id', id)\n            const localVarPath = `/api/images/{id}.image.png`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get download urls for image assets\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getImageDownloadUrls: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('getImageDownloadUrls', 'id', id)\n            const localVarPath = `/api/images/{id}/download-urls`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get upload urls for image assets\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getImageUploadUrls: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('getImageUploadUrls', 'id', id)\n            const localVarPath = `/api/images/{id}/upload-urls`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get the binary mask data\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getMaskData: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('getMaskData', 'id', id)\n            const localVarPath = `/api/images/{id}.mask.png`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Get available models\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getModels: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/stable-diffusion-models`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get the binary thumbnail data\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getThumbnailData: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('getThumbnailData', 'id', id)\n            const localVarPath = `/api/images/{id}.thumbnail.png`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Healthcheck\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        healthcheck: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/healthcheck`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Check if the user is admin\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        isAdmin: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/is-admin`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get the boost for all users\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listBoosts: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/boosts`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get a list of saved images\n         * @param {number} [cursor] \n         * @param {string} [filter] \n         * @param {number} [limit] \n         * @param {'asc' | 'desc'} [direction] \n         * @param {string} [fields] Comma-separated list of fields to include in the response images. For example: \\&quot;id,params,created_at\\&quot; \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listImages: async (cursor?: number, filter?: string, limit?: number, direction?: 'asc' | 'desc', fields?: string, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/images`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (cursor !== undefined) {\n                localVarQueryParameter['cursor'] = cursor;\n            }\n\n            if (filter !== undefined) {\n                localVarQueryParameter['filter'] = filter;\n            }\n\n            if (limit !== undefined) {\n                localVarQueryParameter['limit'] = limit;\n            }\n\n            if (direction !== undefined) {\n                localVarQueryParameter['direction'] = direction;\n            }\n\n            if (fields !== undefined) {\n                localVarQueryParameter['fields'] = fields;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Login by email\n         * @param {LoginInput} [loginInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        login: async (loginInput?: LoginInput, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/auth/login`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(loginInput, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Refresh Login code\n         * @param {RefreshLoginInput} [refreshLoginInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        refresh: async (refreshLoginInput?: RefreshLoginInput, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/auth/refresh`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(refreshLoginInput, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Update the boost level for the current user\n         * @param {UpdateBoostRequest} [updateBoostRequest] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateBoost: async (updateBoostRequest?: UpdateBoostRequest, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/boost`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(updateBoostRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Update the global settings\n         * @param {string} key \n         * @param {UpdateGlobalSettingsRequest} [updateGlobalSettingsRequest] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateGlobalSettings: async (key: string, updateGlobalSettingsRequest?: UpdateGlobalSettingsRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'key' is not null or undefined\n            assertParamExists('updateGlobalSettings', 'key', key)\n            const localVarPath = `/api/global-settings/{key}`\n                .replace(`{${\"key\"}}`, encodeURIComponent(String(key)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(updateGlobalSettingsRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Update a saved image\n         * @param {string} id \n         * @param {UpdateImageInput} [updateImageInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateImage: async (id: string, updateImageInput?: UpdateImageInput, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('updateImage', 'id', id)\n            const localVarPath = `/api/images/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(updateImageInput, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Upload the binary image data\n         * @param {string} id \n         * @param {any} [body] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        uploadImageData: async (id: string, body?: any, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('uploadImageData', 'id', id)\n            const localVarPath = `/api/images/{id}.image.png`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'image/png';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Upload the binary thumbnail data\n         * @param {string} id \n         * @param {any} [body] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        uploadThumbnailData: async (id: string, body?: any, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('uploadThumbnailData', 'id', id)\n            const localVarPath = `/api/images/{id}.thumbnail.png`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'image/png';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Verify Login code\n         * @param {VerifyLoginInput} [verifyLoginInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        verify: async (verifyLoginInput?: VerifyLoginInput, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/auth/verify`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(verifyLoginInput, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * AIBrushApi - functional programming interface\n * @export\n */\nexport const AIBrushApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = AIBrushApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * Add Metrics\n         * @param {AddMetricsInput} [addMetricsInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async addMetrics(addMetricsInput?: AddMetricsInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.addMetrics(addMetricsInput, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get a list of saved images by id\n         * @param {string} [fields] Comma-separated list of fields to include in the response images. For example: \\&quot;id,params,created_at\\&quot; \n         * @param {BatchGetImagesInput} [batchGetImagesInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async batchGetImages(fields?: string, batchGetImagesInput?: BatchGetImagesInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImageList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.batchGetImages(fields, batchGetImagesInput, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Create a new image\n         * @param {CreateImageInput} [createImageInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createImage(createImageInput?: CreateImageInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImageList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.createImage(createImageInput, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Create a new invite code\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createInviteCode(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InviteCode>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.createInviteCode(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Create a new temporary image\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createTemporaryImage(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TemporaryImage>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.createTemporaryImage(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Delete a saved image\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async deleteImage(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteImage(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Deposit to a user\\'s boost\n         * @param {string} userId \n         * @param {DepositRequest} [depositRequest] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async depositBoost(userId: string, depositRequest?: DepositRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Boost>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.depositBoost(userId, depositRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Log in with Discord\n         * @param {DiscordLogin} [discordLogin] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async discordLogin(discordLogin?: DiscordLogin, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginResult>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.discordLogin(discordLogin, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get the assets url\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getAssetsUrl(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssetsUrl>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getAssetsUrl(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get the boost for the current user\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getBoost(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Boost>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getBoost(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get the boost for a user\n         * @param {string} userId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getBoostForUser(userId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Boost>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getBoostForUser(userId, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get the features\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getFeatures(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeatureList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getFeatures(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get the global settings\n         * @param {string} key \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getGlobalSettings(key: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GlobalSettings>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getGlobalSettings(key, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get a saved image by id\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getImage(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Image>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getImage(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get the binary image data\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getImageData(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getImageData(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get download urls for image assets\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getImageDownloadUrls(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImageUrls>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getImageDownloadUrls(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get upload urls for image assets\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getImageUploadUrls(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImageUrls>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getImageUploadUrls(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get the binary mask data\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getMaskData(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getMaskData(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Get available models\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getModels(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: StableDiffusionModel; }>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getModels(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get the binary thumbnail data\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getThumbnailData(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getThumbnailData(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Healthcheck\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async healthcheck(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Healthcheck>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.healthcheck(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Check if the user is admin\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async isAdmin(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IsAdminResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.isAdmin(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get the boost for all users\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listBoosts(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BoostList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.listBoosts(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get a list of saved images\n         * @param {number} [cursor] \n         * @param {string} [filter] \n         * @param {number} [limit] \n         * @param {'asc' | 'desc'} [direction] \n         * @param {string} [fields] Comma-separated list of fields to include in the response images. For example: \\&quot;id,params,created_at\\&quot; \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listImages(cursor?: number, filter?: string, limit?: number, direction?: 'asc' | 'desc', fields?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImageList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.listImages(cursor, filter, limit, direction, fields, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Login by email\n         * @param {LoginInput} [loginInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async login(loginInput?: LoginInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.login(loginInput, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Refresh Login code\n         * @param {RefreshLoginInput} [refreshLoginInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async refresh(refreshLoginInput?: RefreshLoginInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginResult>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.refresh(refreshLoginInput, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Update the boost level for the current user\n         * @param {UpdateBoostRequest} [updateBoostRequest] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async updateBoost(updateBoostRequest?: UpdateBoostRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateBoostResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.updateBoost(updateBoostRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Update the global settings\n         * @param {string} key \n         * @param {UpdateGlobalSettingsRequest} [updateGlobalSettingsRequest] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async updateGlobalSettings(key: string, updateGlobalSettingsRequest?: UpdateGlobalSettingsRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GlobalSettings>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.updateGlobalSettings(key, updateGlobalSettingsRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Update a saved image\n         * @param {string} id \n         * @param {UpdateImageInput} [updateImageInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async updateImage(id: string, updateImageInput?: UpdateImageInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Image>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.updateImage(id, updateImageInput, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Upload the binary image data\n         * @param {string} id \n         * @param {any} [body] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async uploadImageData(id: string, body?: any, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadImageData(id, body, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Upload the binary thumbnail data\n         * @param {string} id \n         * @param {any} [body] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async uploadThumbnailData(id: string, body?: any, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadThumbnailData(id, body, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Verify Login code\n         * @param {VerifyLoginInput} [verifyLoginInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async verify(verifyLoginInput?: VerifyLoginInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginResult>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.verify(verifyLoginInput, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n    }\n};\n\n/**\n * AIBrushApi - factory interface\n * @export\n */\nexport const AIBrushApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = AIBrushApiFp(configuration)\n    return {\n        /**\n         * Add Metrics\n         * @param {AddMetricsInput} [addMetricsInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        addMetrics(addMetricsInput?: AddMetricsInput, options?: any): AxiosPromise<void> {\n            return localVarFp.addMetrics(addMetricsInput, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get a list of saved images by id\n         * @param {string} [fields] Comma-separated list of fields to include in the response images. For example: \\&quot;id,params,created_at\\&quot; \n         * @param {BatchGetImagesInput} [batchGetImagesInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        batchGetImages(fields?: string, batchGetImagesInput?: BatchGetImagesInput, options?: any): AxiosPromise<ImageList> {\n            return localVarFp.batchGetImages(fields, batchGetImagesInput, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Create a new image\n         * @param {CreateImageInput} [createImageInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createImage(createImageInput?: CreateImageInput, options?: any): AxiosPromise<ImageList> {\n            return localVarFp.createImage(createImageInput, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Create a new invite code\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createInviteCode(options?: any): AxiosPromise<InviteCode> {\n            return localVarFp.createInviteCode(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Create a new temporary image\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createTemporaryImage(options?: any): AxiosPromise<TemporaryImage> {\n            return localVarFp.createTemporaryImage(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Delete a saved image\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteImage(id: string, options?: any): AxiosPromise<void> {\n            return localVarFp.deleteImage(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Deposit to a user\\'s boost\n         * @param {string} userId \n         * @param {DepositRequest} [depositRequest] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        depositBoost(userId: string, depositRequest?: DepositRequest, options?: any): AxiosPromise<Boost> {\n            return localVarFp.depositBoost(userId, depositRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Log in with Discord\n         * @param {DiscordLogin} [discordLogin] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        discordLogin(discordLogin?: DiscordLogin, options?: any): AxiosPromise<LoginResult> {\n            return localVarFp.discordLogin(discordLogin, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get the assets url\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getAssetsUrl(options?: any): AxiosPromise<AssetsUrl> {\n            return localVarFp.getAssetsUrl(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get the boost for the current user\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getBoost(options?: any): AxiosPromise<Boost> {\n            return localVarFp.getBoost(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get the boost for a user\n         * @param {string} userId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getBoostForUser(userId: string, options?: any): AxiosPromise<Boost> {\n            return localVarFp.getBoostForUser(userId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get the features\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getFeatures(options?: any): AxiosPromise<FeatureList> {\n            return localVarFp.getFeatures(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get the global settings\n         * @param {string} key \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getGlobalSettings(key: string, options?: any): AxiosPromise<GlobalSettings> {\n            return localVarFp.getGlobalSettings(key, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get a saved image by id\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getImage(id: string, options?: any): AxiosPromise<Image> {\n            return localVarFp.getImage(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get the binary image data\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getImageData(id: string, options?: any): AxiosPromise<any> {\n            return localVarFp.getImageData(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get download urls for image assets\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getImageDownloadUrls(id: string, options?: any): AxiosPromise<ImageUrls> {\n            return localVarFp.getImageDownloadUrls(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get upload urls for image assets\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getImageUploadUrls(id: string, options?: any): AxiosPromise<ImageUrls> {\n            return localVarFp.getImageUploadUrls(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get the binary mask data\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getMaskData(id: string, options?: any): AxiosPromise<any> {\n            return localVarFp.getMaskData(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Get available models\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getModels(options?: any): AxiosPromise<{ [key: string]: StableDiffusionModel; }> {\n            return localVarFp.getModels(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get the binary thumbnail data\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getThumbnailData(id: string, options?: any): AxiosPromise<any> {\n            return localVarFp.getThumbnailData(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Healthcheck\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        healthcheck(options?: any): AxiosPromise<Healthcheck> {\n            return localVarFp.healthcheck(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Check if the user is admin\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        isAdmin(options?: any): AxiosPromise<IsAdminResponse> {\n            return localVarFp.isAdmin(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get the boost for all users\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listBoosts(options?: any): AxiosPromise<BoostList> {\n            return localVarFp.listBoosts(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get a list of saved images\n         * @param {number} [cursor] \n         * @param {string} [filter] \n         * @param {number} [limit] \n         * @param {'asc' | 'desc'} [direction] \n         * @param {string} [fields] Comma-separated list of fields to include in the response images. For example: \\&quot;id,params,created_at\\&quot; \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listImages(cursor?: number, filter?: string, limit?: number, direction?: 'asc' | 'desc', fields?: string, options?: any): AxiosPromise<ImageList> {\n            return localVarFp.listImages(cursor, filter, limit, direction, fields, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Login by email\n         * @param {LoginInput} [loginInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        login(loginInput?: LoginInput, options?: any): AxiosPromise<void> {\n            return localVarFp.login(loginInput, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Refresh Login code\n         * @param {RefreshLoginInput} [refreshLoginInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        refresh(refreshLoginInput?: RefreshLoginInput, options?: any): AxiosPromise<LoginResult> {\n            return localVarFp.refresh(refreshLoginInput, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Update the boost level for the current user\n         * @param {UpdateBoostRequest} [updateBoostRequest] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateBoost(updateBoostRequest?: UpdateBoostRequest, options?: any): AxiosPromise<UpdateBoostResponse> {\n            return localVarFp.updateBoost(updateBoostRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Update the global settings\n         * @param {string} key \n         * @param {UpdateGlobalSettingsRequest} [updateGlobalSettingsRequest] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateGlobalSettings(key: string, updateGlobalSettingsRequest?: UpdateGlobalSettingsRequest, options?: any): AxiosPromise<GlobalSettings> {\n            return localVarFp.updateGlobalSettings(key, updateGlobalSettingsRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Update a saved image\n         * @param {string} id \n         * @param {UpdateImageInput} [updateImageInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateImage(id: string, updateImageInput?: UpdateImageInput, options?: any): AxiosPromise<Image> {\n            return localVarFp.updateImage(id, updateImageInput, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Upload the binary image data\n         * @param {string} id \n         * @param {any} [body] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        uploadImageData(id: string, body?: any, options?: any): AxiosPromise<void> {\n            return localVarFp.uploadImageData(id, body, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Upload the binary thumbnail data\n         * @param {string} id \n         * @param {any} [body] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        uploadThumbnailData(id: string, body?: any, options?: any): AxiosPromise<void> {\n            return localVarFp.uploadThumbnailData(id, body, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Verify Login code\n         * @param {VerifyLoginInput} [verifyLoginInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        verify(verifyLoginInput?: VerifyLoginInput, options?: any): AxiosPromise<LoginResult> {\n            return localVarFp.verify(verifyLoginInput, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * AIBrushApi - object-oriented interface\n * @export\n * @class AIBrushApi\n * @extends {BaseAPI}\n */\nexport class AIBrushApi extends BaseAPI {\n    /**\n     * Add Metrics\n     * @param {AddMetricsInput} [addMetricsInput] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public addMetrics(addMetricsInput?: AddMetricsInput, options?: any) {\n        return AIBrushApiFp(this.configuration).addMetrics(addMetricsInput, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get a list of saved images by id\n     * @param {string} [fields] Comma-separated list of fields to include in the response images. For example: \\&quot;id,params,created_at\\&quot; \n     * @param {BatchGetImagesInput} [batchGetImagesInput] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public batchGetImages(fields?: string, batchGetImagesInput?: BatchGetImagesInput, options?: any) {\n        return AIBrushApiFp(this.configuration).batchGetImages(fields, batchGetImagesInput, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Create a new image\n     * @param {CreateImageInput} [createImageInput] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public createImage(createImageInput?: CreateImageInput, options?: any) {\n        return AIBrushApiFp(this.configuration).createImage(createImageInput, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Create a new invite code\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public createInviteCode(options?: any) {\n        return AIBrushApiFp(this.configuration).createInviteCode(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Create a new temporary image\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public createTemporaryImage(options?: any) {\n        return AIBrushApiFp(this.configuration).createTemporaryImage(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Delete a saved image\n     * @param {string} id \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public deleteImage(id: string, options?: any) {\n        return AIBrushApiFp(this.configuration).deleteImage(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Deposit to a user\\'s boost\n     * @param {string} userId \n     * @param {DepositRequest} [depositRequest] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public depositBoost(userId: string, depositRequest?: DepositRequest, options?: any) {\n        return AIBrushApiFp(this.configuration).depositBoost(userId, depositRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Log in with Discord\n     * @param {DiscordLogin} [discordLogin] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public discordLogin(discordLogin?: DiscordLogin, options?: any) {\n        return AIBrushApiFp(this.configuration).discordLogin(discordLogin, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get the assets url\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public getAssetsUrl(options?: any) {\n        return AIBrushApiFp(this.configuration).getAssetsUrl(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get the boost for the current user\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public getBoost(options?: any) {\n        return AIBrushApiFp(this.configuration).getBoost(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get the boost for a user\n     * @param {string} userId \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public getBoostForUser(userId: string, options?: any) {\n        return AIBrushApiFp(this.configuration).getBoostForUser(userId, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get the features\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public getFeatures(options?: any) {\n        return AIBrushApiFp(this.configuration).getFeatures(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get the global settings\n     * @param {string} key \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public getGlobalSettings(key: string, options?: any) {\n        return AIBrushApiFp(this.configuration).getGlobalSettings(key, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get a saved image by id\n     * @param {string} id \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public getImage(id: string, options?: any) {\n        return AIBrushApiFp(this.configuration).getImage(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get the binary image data\n     * @param {string} id \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public getImageData(id: string, options?: any) {\n        return AIBrushApiFp(this.configuration).getImageData(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get download urls for image assets\n     * @param {string} id \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public getImageDownloadUrls(id: string, options?: any) {\n        return AIBrushApiFp(this.configuration).getImageDownloadUrls(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get upload urls for image assets\n     * @param {string} id \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public getImageUploadUrls(id: string, options?: any) {\n        return AIBrushApiFp(this.configuration).getImageUploadUrls(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get the binary mask data\n     * @param {string} id \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public getMaskData(id: string, options?: any) {\n        return AIBrushApiFp(this.configuration).getMaskData(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Get available models\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public getModels(options?: any) {\n        return AIBrushApiFp(this.configuration).getModels(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get the binary thumbnail data\n     * @param {string} id \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public getThumbnailData(id: string, options?: any) {\n        return AIBrushApiFp(this.configuration).getThumbnailData(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Healthcheck\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public healthcheck(options?: any) {\n        return AIBrushApiFp(this.configuration).healthcheck(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Check if the user is admin\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public isAdmin(options?: any) {\n        return AIBrushApiFp(this.configuration).isAdmin(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get the boost for all users\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public listBoosts(options?: any) {\n        return AIBrushApiFp(this.configuration).listBoosts(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get a list of saved images\n     * @param {number} [cursor] \n     * @param {string} [filter] \n     * @param {number} [limit] \n     * @param {'asc' | 'desc'} [direction] \n     * @param {string} [fields] Comma-separated list of fields to include in the response images. For example: \\&quot;id,params,created_at\\&quot; \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public listImages(cursor?: number, filter?: string, limit?: number, direction?: 'asc' | 'desc', fields?: string, options?: any) {\n        return AIBrushApiFp(this.configuration).listImages(cursor, filter, limit, direction, fields, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Login by email\n     * @param {LoginInput} [loginInput] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public login(loginInput?: LoginInput, options?: any) {\n        return AIBrushApiFp(this.configuration).login(loginInput, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Refresh Login code\n     * @param {RefreshLoginInput} [refreshLoginInput] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public refresh(refreshLoginInput?: RefreshLoginInput, options?: any) {\n        return AIBrushApiFp(this.configuration).refresh(refreshLoginInput, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Update the boost level for the current user\n     * @param {UpdateBoostRequest} [updateBoostRequest] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public updateBoost(updateBoostRequest?: UpdateBoostRequest, options?: any) {\n        return AIBrushApiFp(this.configuration).updateBoost(updateBoostRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Update the global settings\n     * @param {string} key \n     * @param {UpdateGlobalSettingsRequest} [updateGlobalSettingsRequest] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public updateGlobalSettings(key: string, updateGlobalSettingsRequest?: UpdateGlobalSettingsRequest, options?: any) {\n        return AIBrushApiFp(this.configuration).updateGlobalSettings(key, updateGlobalSettingsRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Update a saved image\n     * @param {string} id \n     * @param {UpdateImageInput} [updateImageInput] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public updateImage(id: string, updateImageInput?: UpdateImageInput, options?: any) {\n        return AIBrushApiFp(this.configuration).updateImage(id, updateImageInput, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Upload the binary image data\n     * @param {string} id \n     * @param {any} [body] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public uploadImageData(id: string, body?: any, options?: any) {\n        return AIBrushApiFp(this.configuration).uploadImageData(id, body, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Upload the binary thumbnail data\n     * @param {string} id \n     * @param {any} [body] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public uploadThumbnailData(id: string, body?: any, options?: any) {\n        return AIBrushApiFp(this.configuration).uploadThumbnailData(id, body, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Verify Login code\n     * @param {VerifyLoginInput} [verifyLoginInput] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public verify(verifyLoginInput?: VerifyLoginInput, options?: any) {\n        return AIBrushApiFp(this.configuration).verify(verifyLoginInput, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n\n\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * AIBrush API\n * Orchestration backend for AI Brush\n *\n * The version of the OpenAPI document: 1.0.0\n * Contact: admin@aibrush.art\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport { Configuration } from \"./configuration\";\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport globalAxios, { AxiosPromise, AxiosInstance } from 'axios';\n\nexport const BASE_PATH = \"https://www.aibrush.art\".replace(/\\/+$/, \"\");\n\n/**\n *\n * @export\n */\nexport const COLLECTION_FORMATS = {\n    csv: \",\",\n    ssv: \" \",\n    tsv: \"\\t\",\n    pipes: \"|\",\n};\n\n/**\n *\n * @export\n * @interface RequestArgs\n */\nexport interface RequestArgs {\n    url: string;\n    options: any;\n}\n\n/**\n *\n * @export\n * @class BaseAPI\n */\nexport class BaseAPI {\n    protected configuration: Configuration | undefined;\n\n    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected axios: AxiosInstance = globalAxios) {\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = configuration.basePath || this.basePath;\n        }\n    }\n};\n\n/**\n *\n * @export\n * @class RequiredError\n * @extends {Error}\n */\nexport class RequiredError extends Error {\n    name: \"RequiredError\" = \"RequiredError\";\n    constructor(public field: string, msg?: string) {\n        super(msg);\n    }\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * AIBrush API\n * Orchestration backend for AI Brush\n *\n * The version of the OpenAPI document: 1.0.0\n * Contact: admin@aibrush.art\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport { Configuration } from \"./configuration\";\nimport { RequiredError,　RequestArgs } from \"./base\";\nimport { AxiosInstance } from 'axios';\n\n/**\n *\n * @export\n */\nexport const DUMMY_BASE_URL = 'https://example.com'\n\n/**\n *\n * @throws {RequiredError}\n * @export\n */\nexport const assertParamExists = function (functionName: string, paramName: string, paramValue: unknown) {\n    if (paramValue === null || paramValue === undefined) {\n        throw new RequiredError(paramName, `Required parameter ${paramName} was null or undefined when calling ${functionName}.`);\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setApiKeyToObject = async function (object: any, keyParamName: string, configuration?: Configuration) {\n    if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n            ? await configuration.apiKey(keyParamName)\n            : await configuration.apiKey;\n        object[keyParamName] = localVarApiKeyValue;\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setBasicAuthToObject = function (object: any, configuration?: Configuration) {\n    if (configuration && (configuration.username || configuration.password)) {\n        object[\"auth\"] = { username: configuration.username, password: configuration.password };\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setBearerAuthToObject = async function (object: any, configuration?: Configuration) {\n    if (configuration && configuration.accessToken) {\n        const accessToken = typeof configuration.accessToken === 'function'\n            ? await configuration.accessToken()\n            : await configuration.accessToken;\n        object[\"Authorization\"] = \"Bearer \" + accessToken;\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setOAuthToObject = async function (object: any, name: string, scopes: string[], configuration?: Configuration) {\n    if (configuration && configuration.accessToken) {\n        const localVarAccessTokenValue = typeof configuration.accessToken === 'function'\n            ? await configuration.accessToken(name, scopes)\n            : await configuration.accessToken;\n        object[\"Authorization\"] = \"Bearer \" + localVarAccessTokenValue;\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setSearchParams = function (url: URL, ...objects: any[]) {\n    const searchParams = new URLSearchParams(url.search);\n    for (const object of objects) {\n        for (const key in object) {\n            if (Array.isArray(object[key])) {\n                searchParams.delete(key);\n                for (const item of object[key]) {\n                    searchParams.append(key, item);\n                }\n            } else {\n                searchParams.set(key, object[key]);\n            }\n        }\n    }\n    url.search = searchParams.toString();\n}\n\n/**\n *\n * @export\n */\nexport const serializeDataIfNeeded = function (value: any, requestOptions: any, configuration?: Configuration) {\n    const nonString = typeof value !== 'string';\n    const needsSerialization = nonString && configuration && configuration.isJsonMime\n        ? configuration.isJsonMime(requestOptions.headers['Content-Type'])\n        : nonString;\n    return needsSerialization\n        ? JSON.stringify(value !== undefined ? value : {})\n        : (value || \"\");\n}\n\n/**\n *\n * @export\n */\nexport const toPathString = function (url: URL) {\n    return url.pathname + url.search + url.hash\n}\n\n/**\n *\n * @export\n */\nexport const createRequestFunction = function (axiosArgs: RequestArgs, globalAxios: AxiosInstance, BASE_PATH: string, configuration?: Configuration) {\n    return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n        const axiosRequestArgs = {...axiosArgs.options, url: (configuration?.basePath || basePath) + axiosArgs.url};\n        return axios.request(axiosRequestArgs);\n    };\n}\n","export interface AspectRatio {\n    displayName: string;\n    width: number;\n    height: number;\n    id: number;\n}\n\nexport const DEFAULT_ASPECT_RATIO = 5;\n\nexport const aspectRatios: AspectRatio[] = [\n    {\n        displayName: \"4:1\",\n        width: 1024,\n        height: 256,\n        id: 0,\n    },\n    {\n        displayName: \"3:1\",\n        width: 768,\n        height: 256,\n        id: 1,\n    },\n    {\n        displayName: \"2:1\",\n        width: 640,\n        height: 320,\n        id: 2,\n    },\n    {\n        displayName: \"3:2\",\n        width: 576,\n        height: 384,\n        id: 3,\n    },\n    {\n        displayName: \"5:4\",\n        width: 640,\n        height: 512,\n        id: 4,\n    },\n    {\n        displayName: \"1:1\",\n        width: 512,\n        height: 512,\n        id: 5,\n    },\n    {\n        displayName: \"4:5\",\n        width: 512,\n        height: 640,\n        id: 6,\n    },\n    {\n        displayName: \"2:3\",\n        width: 384,\n        height: 576,\n        id: 7,\n    },\n    {\n        displayName: \"1:2\",\n        width: 320,\n        height: 640,\n        id: 8,\n    },\n    {\n        displayName: \"1:3\",\n        width: 256,\n        height: 768,\n        id: 9,\n    },\n    {\n        displayName: \"1:4\",\n        width: 256,\n        height: 1024,\n        id: 10,\n    }\n];\n\nexport function getClosestAspectRatio(width: number, height: number): AspectRatio {\n    const aspectRatio = width / height;\n\n    const tests = [...aspectRatios];\n    tests.sort((a, b) => {\n        const aRatio = a.width / a.height;\n        const bRatio = b.width / b.height;\n        return (\n            Math.abs(aRatio - aspectRatio) -\n            Math.abs(bRatio - aspectRatio)\n        );\n    });\n    const bestMatch = tests[0];\n    return bestMatch;\n}\n\nexport function compareSize(a: AspectRatio, width: number, height: number): number {\n    const area1 = a.width * a.height;\n    const area2 = width * height;\n    return area1 - area2;\n}\n\nexport function upscale(aspectRatio: AspectRatio): AspectRatio {\n    return {\n        displayName: aspectRatio.displayName,\n        width: aspectRatio.width * 2,\n        height: aspectRatio.height * 2,\n        id: aspectRatio.id,\n    }\n}\n\nexport function downscale(aspectRatio: AspectRatio): AspectRatio {\n    return {\n        displayName: aspectRatio.displayName,\n        width: aspectRatio.width / 2,\n        height: aspectRatio.height / 2,\n        id: aspectRatio.id,\n    }\n}\n","import React, { useState, useEffect, useRef } from \"react\";\nimport { useParams, useHistory } from \"react-router-dom\";\nimport axios, { AxiosInstance } from \"axios\";\nimport * as uuid from \"uuid\";\n\nimport { AIBrushApi } from \"../../client\";\nimport { getUpscaleLevel } from \"../../lib/upscale\";\nimport \"./ImageEditor.css\";\nimport { createRenderer, Renderer } from \"./renderer\";\nimport { Tool, BaseTool } from \"./tool\";\nimport { SelectionTool, Controls as SelectionControls } from \"./selection-tool\";\nimport { EnhanceTool, EnhanceControls } from \"./enhance-tool\";\nimport { PencilTool, Controls as PencilControls } from \"./pencil-tool\";\nimport { SmudgeTool, SmudgeControls } from \"./smudge-tool\";\nimport { ImportExportControls } from \"./import-export\";\nimport { InpaintControls, InpaintTool } from \"./inpaint-tool\";\nimport { AugmentControls } from \"./augment-tool\";\nimport { defaultArgs } from \"../../components/ImagePrompt\";\nimport { ApiSocket } from \"../../lib/apisocket\";\nimport {\n    createEncodedThumbnail,\n    encodedImageToBlob,\n    uploadBlob,\n} from \"../../lib/imageutil\";\nimport { BusyModal } from \"../../components/BusyModal\";\nimport { LocalImage, LocalImagesStore } from \"../../lib/localImagesStore\";\nimport { render } from \"@testing-library/react\";\n\ninterface CanPreventDefault {\n    preventDefault: () => void;\n}\n\ninterface Props {\n    api: AIBrushApi;\n    apisocket: ApiSocket;\n    assetsUrl: string;\n    localImages: LocalImagesStore;\n}\n\ninterface ToolConfig {\n    name: string;\n    iconClass: string;\n    constructor: (r: Renderer) => Tool;\n    renderControls: (t: Tool, renderer: Renderer) => JSX.Element;\n    defaultArgs: any;\n}\n\nexport const anonymousClient = axios.create();\ndelete anonymousClient.defaults.headers.common[\"Authorization\"];\n\nexport const ImageEditor: React.FC<Props> = ({\n    api,\n    apisocket,\n    localImages,\n}) => {\n    const [showSelectionControls, setShowSelectionControls] = useState(false);\n    const tools: Array<ToolConfig> = [\n        {\n            name: \"inpaint\",\n            iconClass: \"fas fa-paint-brush\",\n            constructor: (r: Renderer) => new InpaintTool(r),\n            defaultArgs: {},\n            renderControls: (t: Tool, renderer: Renderer) => {\n                t.onShowSelectionControls(setShowSelectionControls);\n                return (\n                    <InpaintControls\n                        tool={t as InpaintTool}\n                        renderer={renderer}\n                        api={api}\n                        apisocket={apisocket}\n                        image={image!}\n                    />\n                );\n            },\n        },\n        {\n            name: \"enhance\",\n            iconClass: \"fas fa-magic\",\n            constructor: (r: Renderer) => new EnhanceTool(r),\n            defaultArgs: {\n                variationStrength: 0.75,\n            },\n            renderControls: (t: Tool, renderer: Renderer) => {\n                t.onShowSelectionControls(setShowSelectionControls);\n                return (\n                    <EnhanceControls\n                        tool={t as EnhanceTool}\n                        renderer={renderer}\n                        api={api}\n                        apisocket={apisocket}\n                        image={image!}\n                    />\n                );\n            },\n        },\n        {\n            name: \"pencil\",\n            iconClass: \"fas fa-pencil-alt\",\n            constructor: (r: Renderer) => new PencilTool(r),\n            defaultArgs: {},\n            renderControls: (t: Tool, renderer: Renderer) => {\n                return (\n                    <PencilControls\n                        tool={t as PencilTool}\n                        renderer={renderer}\n                    />\n                );\n            },\n        },\n        {\n            name: \"smudge\",\n            // finger icon\n            iconClass: \"fas fa-hand-pointer\",\n            constructor: (r: Renderer) => new SmudgeTool(r),\n            defaultArgs: {},\n            renderControls: (t: Tool, renderer: Renderer) => {\n                return (\n                    <SmudgeControls\n                        tool={t as SmudgeTool}\n                        renderer={renderer}\n                    />\n                );\n            },\n        },\n        {\n            name: \"import-export\",\n            iconClass: \"fas fa-file-import\",\n            constructor: (r: Renderer) => new BaseTool(r, \"import-export\"),\n            defaultArgs: {},\n            renderControls: (t: Tool, renderer: Renderer) => {\n                return (\n                    <ImportExportControls\n                        renderer={renderer}\n                        tool={t as BaseTool}\n                        api={api}\n                    />\n                );\n            },\n        },\n        {\n            name: \"augment\",\n            iconClass: \"fas fa-image\",\n            constructor: (r: Renderer) => new BaseTool(r, \"augment\"),\n            defaultArgs: {},\n            renderControls: (t: Tool, renderer: Renderer) => {\n                return (\n                    <AugmentControls\n                        renderer={renderer}\n                        tool={t as BaseTool}\n                        api={api}\n                        image={image!}\n                    />\n                );\n            },\n        },\n    ];\n\n    const [image, setImage] = useState<LocalImage | null>(null);\n    const [renderer, setRenderer] = useState<Renderer | null>(null);\n    const [tool, setTool] = useState<Tool | null>(null);\n    const [canUndo, setCanUndo] = useState(false);\n    const [canRedo, setCanRedo] = useState(false);\n    const [busyMessage, setBusyMessage] = useState<string | null>(null);\n\n    const { id } = useParams<{ id: string }>();\n    const history = useHistory();\n\n    const canvasRef = useRef<HTMLCanvasElement>(null);\n\n    const onSelectTool = (toolconfig: ToolConfig) => {\n        if (renderer) {\n            if (tool) {\n                if (!tool.destroy()) {\n                    return;\n                }\n            }\n            const newTool = toolconfig.constructor(renderer);\n            setTool(newTool);\n            newTool.onSaveImage((encodedImage, args = {}) => {\n                console.log(\"Saving image...\");\n                saveNewImage(encodedImage, args);\n            });\n        }\n    };\n\n    /**\n     * Saves a new image to the server\n     *\n     * @param encodedImage base64 encoded image\n     * @param newArgs may contain new phrases and negative phrases\n     */\n    const saveNewImage = async (encodedImage: string, newArgs: any) => {\n        if (!image || !encodedImage) {\n            throw new Error(\"Cannot save new image without existing image\");\n        }\n        if (!renderer) {\n            throw new Error(\"Cannot save new image without renderer\");\n        }\n        setBusyMessage(\"Saving image...\");\n        try {\n            const newImage: LocalImage = {\n                ...image,\n                params: {\n                    ...image.params,\n                    width: renderer!.getWidth() as any,\n                    height: renderer!.getHeight() as any,\n                },\n                id: uuid.v4(),\n                imageData: `data:image/png;base64,${encodedImage}`,\n            };\n            await localImages.saveImage(newImage);\n\n            // switch url and state to new image\n            setImage(newImage);\n            history.replace(`/image-editor/${newImage.id}`);\n        } finally {\n            setBusyMessage(null);\n        }\n    };\n\n    useEffect(() => {\n        if (image) {\n            return;\n        }\n\n        async function loadImage() {\n            const localImage = await localImages.getImage(id);\n            let imageSrc = \"\";\n            if (localImage) {\n                setImage(localImage);\n                imageSrc = localImage.imageData!;\n            } else {\n                const image = (await api.getImage(id)).data;\n                setImage(image);\n                const download_urls = await api.getImageDownloadUrls(id);\n                // Loading up data as binary, base64 encoding into image url\n                // bypasses browser security nonsense about cross-domain images\n                const resp = await anonymousClient.get(\n                    download_urls.data.image_url!,\n                    {\n                        responseType: \"arraybuffer\",\n                    }\n                );\n                const binaryImageData = Buffer.from(resp.data, \"binary\");\n                const base64ImageData = binaryImageData.toString(\"base64\");\n                imageSrc = `data:image/png;base64,${base64ImageData}`;\n            }\n\n            const imageElement = new Image();\n            imageElement.src = imageSrc;\n            imageElement.onload = () => {\n                if (!canvasRef.current) {\n                    console.error(\"Failed to get canvas\");\n                    return;\n                }\n                const renderer = createRenderer(canvasRef.current);\n                renderer.setBaseImage(imageElement);\n                setRenderer(renderer);\n            };\n        }\n        loadImage();\n    }, [image, id]);\n\n    // this covers the case that an image is upscaled to max, the upscale tool needs to\n    // be hidden and deselected.\n    useEffect(() => {\n        if (\n            image &&\n            tool &&\n            tool.name == \"upscale\" &&\n            image.params.width! * image.params.height! >= 2048 * 2048\n        ) {\n            onSelectTool(tools[0]);\n        }\n    }, [image, tool]);\n\n    useEffect(() => {\n        if (renderer) {\n            onSelectTool(tools[0]);\n            renderer.onSnapshot(() => {\n                setCanUndo(renderer.canUndo());\n                setCanRedo(renderer.canRedo());\n            });\n        }\n    }, [renderer]);\n\n    useEffect(() => {\n        if (canvasRef.current) {\n            const listener = (e: WheelEvent) => {\n                if (tool) {\n                    e.preventDefault();\n                    tool.onWheel(e);\n                }\n            };\n            canvasRef.current.addEventListener(\"wheel\", listener);\n            return () => {\n                canvasRef.current?.removeEventListener(\"wheel\", listener);\n            };\n        }\n    }, [tool, canvasRef.current]);\n\n    function renderTool(t: ToolConfig) {\n        if (!image) {\n            return null;\n        }\n        if (\n            t.name == \"upscale\" &&\n            image.params.width! * image.params.height! >= 2048 * 2048\n        ) {\n            return null;\n        }\n        let buttonClass = `btn btn-secondary light-button image-editor-tool-button`;\n        const isSelected = tool && tool.name == t.name;\n        if (isSelected) {\n            buttonClass = `btn btn-primary image-editor-tool-button`;\n        }\n        return (\n            <div className=\"form-group\" key={t.name}>\n                <button className={buttonClass} onClick={() => onSelectTool(t)}>\n                    <i className={t.iconClass}></i>\n                </button>\n                {/* capitalize tool name */}\n                <label>\n                    {t.name.charAt(0).toUpperCase() + t.name.slice(1)}\n                </label>\n                {isSelected && t.renderControls(tool!, renderer!)}\n            </div>\n        );\n    }\n\n    function preventDefault(e: CanPreventDefault): boolean {\n        e.preventDefault();\n        return true;\n    }\n\n    return (\n        <>\n            <div className=\"row\">\n                <div className=\"col-12\">\n                    <h1 style={{ fontSize: \"40px\", textAlign: \"left\" }}>\n                        <i\n                            style={{ cursor: \"pointer\" }}\n                            onClick={() => history.push(`/images/${id}`)}\n                            className=\"fas fa-chevron-left\"\n                        ></i>\n                        &nbsp; AI Edit\n                    </h1>\n                </div>\n            </div>\n            <div\n                className=\"row\"\n                style={{ marginTop: \"32px\", paddingBottom: \"120px\" }}\n            >\n                <div className=\"col-lg-3\">\n                    {renderer && (\n                        <>\n                            {tools.map((tool) => renderTool(tool))}\n                            {(canRedo || canUndo) && (\n                                <div className=\"form-group\">\n                                    <div className=\"btn-group\">\n                                        <button\n                                            className=\"btn btn-primary image-popup-button\"\n                                            disabled={!renderer || !canUndo}\n                                            onClick={() =>\n                                                renderer && renderer.undo()\n                                            }\n                                        >\n                                            {/* undo */}\n                                            <i className=\"fas fa-undo\"></i>\n                                        </button>\n                                        <button\n                                            className=\"btn btn-primary image-popup-button\"\n                                            disabled={!renderer || !canRedo}\n                                            onClick={() =>\n                                                renderer && renderer.redo()\n                                            }\n                                        >\n                                            <i className=\"fas fa-redo\"></i>\n                                        </button>\n                                    </div>\n                                </div>\n                            )}\n                        </>\n                    )}\n                </div>\n                <div className=\"col-lg-9\">\n                    <div style={{ verticalAlign: \"middle\" }}>\n                        <div>\n                            <canvas\n                                style={{\n                                    cursor: \"none\",\n                                    touchAction: \"none\",\n                                    userSelect: \"none\",\n                                }}\n                                ref={canvasRef}\n                                className=\"image-editor-canvas\"\n                                onMouseDown={(e) =>\n                                    preventDefault(e) &&\n                                    tool &&\n                                    tool.onMouseDown(e)\n                                }\n                                onMouseMove={(e) =>\n                                    preventDefault(e) &&\n                                    tool &&\n                                    tool.onMouseMove(e)\n                                }\n                                onMouseUp={(e) =>\n                                    preventDefault(e) &&\n                                    tool &&\n                                    tool.onMouseUp(e)\n                                }\n                                onMouseLeave={(e) =>\n                                    preventDefault(e) &&\n                                    tool &&\n                                    tool.onMouseLeave(e)\n                                }\n                                onTouchStart={(e) =>\n                                    preventDefault(e) &&\n                                    tool &&\n                                    tool.onTouchStart(e)\n                                }\n                                onTouchMove={(e) =>\n                                    preventDefault(e) &&\n                                    tool &&\n                                    tool.onTouchMove(e)\n                                }\n                                onTouchEnd={(e) =>\n                                    preventDefault(e) &&\n                                    tool &&\n                                    tool.onTouchEnd(e)\n                                }\n                            ></canvas>\n                            {showSelectionControls && (\n                                <>\n                                    <button\n                                        className=\"btn btn-secondary canvas-select-left\"\n                                        onClick={() => tool!.select(\"left\")}\n                                    >\n                                        <i className=\"fas fa-chevron-left\"></i>\n                                    </button>\n                                    <button\n                                        className=\"btn btn-secondary canvas-select-right\"\n                                        onClick={() => tool!.select(\"right\")}\n                                    >\n                                        <i className=\"fas fa-chevron-right\"></i>\n                                    </button>\n                                </>\n                            )}\n                        </div>\n                    </div>\n                    <div className=\"row\">\n                        <button\n                            className=\"btn btn-primary\"\n                            // center horizontally\n                            style={{\n                                position: \"absolute\",\n                                left: \"50%\",\n                                transform: \"translate(-50%, 0)\",\n                            }}\n                            onClick={() => {\n                                if (renderer) {\n                                    renderer.resetView();\n                                }\n                            }}\n                        >\n                            {/* reset zoom */}\n                            <i className=\"fas fa-search-plus\"></i>&nbsp; Reset\n                            View\n                        </button>\n                        {/* redo */}\n                    </div>\n                    {/* vertically center button within the div */}\n                </div>\n            </div>\n            {busyMessage && (\n                <BusyModal show={true} title=\"Please Wait\">\n                    {busyMessage}\n                </BusyModal>\n            )}\n        </>\n    );\n};\n","import { Cursor, Rect } from \"./models\";\n\nconst maxSnapshots = 10;\n\nexport class Renderer {\n    private undoStack: ImageData[] = [];\n    private redoStack: ImageData[] = [];\n    private currentSnapshot: ImageData | undefined;\n\n    private backgroundLayer: HTMLCanvasElement;\n    private baseImageLayer: HTMLCanvasElement;\n    private editLayer: HTMLCanvasElement;\n    // private overlayLayer: HTMLCanvasElement;\n\n    private selectionOverlay: Rect | undefined;\n    private selectionOverlayPreview: Rect | undefined;\n    private hasSelection: boolean = false;\n    private cursor: Cursor | undefined;\n\n    private zoom: number;\n    private offsetX: number;\n    private offsetY: number;\n    private width = 0;\n    private height = 0;\n\n    private snapshotListener: (() => void) | null = null;\n\n    constructor(private readonly canvas: HTMLCanvasElement) {\n        canvas.width = 512;\n        canvas.height = 512;\n        // invisible canvas elements\n        this.backgroundLayer = document.createElement(\"canvas\");\n        this.backgroundLayer.width = 512;\n        this.backgroundLayer.height = 512;\n        this.baseImageLayer = document.createElement(\"canvas\");\n        this.editLayer = document.createElement(\"canvas\");\n        // this.overlayLayer = document.createElement(\"canvas\");\n\n        this.zoom = 1;\n        this.offsetX = 0;\n        this.offsetY = 0;\n    }\n\n    undo(allowRedo: boolean = true) {\n        if (this.undoStack.length > 0 && this.currentSnapshot) {\n            const imageData = this.undoStack.pop()!;\n            if (allowRedo) {\n                this.redoStack.push(this.currentSnapshot);\n            }\n            this.currentSnapshot = imageData;\n            // set as base image\n            const ctx = this.baseImageLayer.getContext(\"2d\");\n            if (ctx) {\n                ctx.clearRect(\n                    0,\n                    0,\n                    this.baseImageLayer.width,\n                    this.baseImageLayer.height\n                );\n                ctx.putImageData(imageData, 0, 0);\n                this.render();\n            }\n            this.notifySnapshotListener();\n        }\n    }\n\n    redo() {\n        if (this.redoStack.length > 0 && this.currentSnapshot) {\n            this.undoStack.push(this.currentSnapshot);\n            const imageData = this.redoStack.pop()!;\n            this.currentSnapshot = imageData;\n\n            // set as base image\n            const ctx = this.baseImageLayer.getContext(\"2d\");\n            if (ctx) {\n                ctx.putImageData(imageData, 0, 0);\n                this.render();\n            }\n            this.notifySnapshotListener();\n        }\n    }\n\n    clearRedoStack() {\n        this.redoStack = [];\n        this.notifySnapshotListener();\n    }\n\n    canUndo(): boolean {\n        return !this.hasSelection && this.undoStack.length > 0;\n    }\n\n    canRedo(): boolean {\n        return !this.hasSelection && this.redoStack.length > 0;\n    }\n\n    onSnapshot(listener: () => void) {\n        this.snapshotListener = listener;\n    }\n\n    snapshot() {\n        const ctx = this.baseImageLayer.getContext(\"2d\");\n        if (ctx) {\n            const snapshot = ctx.getImageData(\n                0,\n                0,\n                this.baseImageLayer.width,\n                this.baseImageLayer.height\n            );\n            if (this.currentSnapshot) {\n                this.undoStack.push(this.currentSnapshot);\n                this.currentSnapshot = snapshot;\n                if (this.redoStack.length > 0) {\n                    this.redoStack = [];\n                }\n                if (this.undoStack.length > maxSnapshots) {\n                    this.undoStack.shift();\n                }\n            } else {\n                this.currentSnapshot = snapshot;\n            }\n\n            this.notifySnapshotListener();\n        }\n    }\n\n    private notifySnapshotListener() {\n        if (this.snapshotListener) {\n            this.snapshotListener();\n        }\n    }\n\n    render() {\n        const context = this.canvas.getContext(\"2d\");\n        if (context) {\n            context.clearRect(0, 0, this.width, this.height);\n            context.drawImage(this.backgroundLayer, 0, 0);\n            // apply zoom and offset\n            context.setTransform(\n                this.zoom,\n                0,\n                0,\n                this.zoom,\n                this.offsetX * this.zoom,\n                this.offsetY * this.zoom\n            );\n            // context.drawImage(this.backgroundLayer, 0, 0);\n            context.drawImage(this.baseImageLayer, 0, 0);\n            context.drawImage(this.editLayer, 0, 0);\n            // context.drawImage(this.overlayLayer, 0, 0);\n            this.drawOverlay(context, this.width, this.height);\n            context.setTransform(1, 0, 0, 1, 0, 0);\n        }\n    }\n\n    getCanvas(): HTMLCanvasElement {\n        return this.canvas;\n    }\n\n    private initializeBackgroundLayer() {\n        // checkered background\n        // #DEDEDE\n        // #FFFFFF\n        // 10x10 pixel squares\n        const ctx = this.backgroundLayer.getContext(\"2d\");\n        if (ctx) {\n            const pattern = ctx.createPattern(\n                this.createCheckeredPattern(20, 20, \"#808080\", \"#AAAAAA\"),\n                \"repeat\"\n            );\n            if (pattern) {\n                ctx.fillStyle = pattern;\n                ctx.fillRect(\n                    0,\n                    0,\n                    this.backgroundLayer.width,\n                    this.backgroundLayer.height\n                );\n            }\n        }\n    }\n\n    private createCheckeredPattern(\n        width: number,\n        height: number,\n        color1: string,\n        color2: string\n    ): HTMLCanvasElement {\n        const canvas = document.createElement(\"canvas\");\n        canvas.width = width;\n        canvas.height = height;\n        const ctx = canvas.getContext(\"2d\");\n        if (ctx) {\n            ctx.fillStyle = color1;\n            ctx.fillRect(0, 0, width, height);\n            ctx.fillStyle = color2;\n            ctx.fillRect(0, 0, width / 2, height / 2);\n            ctx.fillRect(width / 2, height / 2, width / 2, height / 2);\n        }\n        return canvas;\n    }\n\n    setBaseImage(\n        image: HTMLImageElement | HTMLCanvasElement,\n        updateSelectionOverlay = true\n    ) {\n        const context = this.baseImageLayer.getContext(\"2d\");\n        if (context) {\n            // set size of all layers\n            // TODO: adapt for an always-square canvas\n            this.initializeBackgroundLayer();\n\n            this.baseImageLayer.width = image.width;\n            this.baseImageLayer.height = image.height;\n            this.editLayer.width = image.width;\n            this.editLayer.height = image.height;\n            // set image size\n            this.width = image.width;\n            this.height = image.height;\n            // this.canvas.width = image.width;\n            // this.canvas.height = image.height;\n            context.drawImage(image, 0, 0);\n\n            if (updateSelectionOverlay) {\n                // set 512x512 selection overlay at the center of the image\n                this.setSelectionOverlay({\n                    x: (image.width - 512) / 2,\n                    y: (image.height - 512) / 2,\n                    width: 512,\n                    height: 512,\n                });\n            }\n            this.resetView();\n            // this.render(); // already called by updateZoomAndOffset\n            this.snapshot();\n        }\n    }\n\n    resetView() {\n        // determine zoom based on image difference from canvas size\n        const maxWidth = Math.max(this.width, this.height);\n        const zoom = this.canvas.width / maxWidth;\n\n        let offsetX = 0;\n        let offsetY = 0;\n\n        if (this.width > this.height) {\n            offsetY = (this.width - this.height) / 2;\n        } else if (this.height > this.width) {\n            offsetX = (this.height - this.width) / 2;\n        }\n\n        this.updateZoomAndOffset(zoom, offsetX, offsetY);\n    }\n\n    setEditImage(imageData: ImageData | null) {\n        this.hasSelection = !!imageData;\n        const context = this.editLayer.getContext(\"2d\");\n        if (context && this.selectionOverlay) {\n            context.clearRect(\n                0,\n                0,\n                this.editLayer.width,\n                this.editLayer.height\n            );\n            if (imageData) {\n                context.putImageData(\n                    imageData,\n                    this.selectionOverlay.x,\n                    this.selectionOverlay.y\n                );\n            }\n            // edit image makes the selection rect and preview disappear\n            // so redraw the overlay\n            this.hasSelection = !!imageData;\n            this.render();\n        }\n        this.notifySnapshotListener();\n    }\n\n    private drawOverlay(\n        context: CanvasRenderingContext2D,\n        width: number,\n        height: number\n    ) {\n        const lineWidth = Math.max(this.width / 512, this.height / 512);\n        if (context) {\n            context.strokeStyle = \"white\";\n            context.lineWidth = lineWidth;\n            context.strokeRect(0, 0, width, height);\n\n            if (!this.hasSelection && this.selectionOverlay) {\n                context.strokeStyle = \"white\";\n                context.lineWidth = lineWidth;\n                context.strokeRect(\n                    this.selectionOverlay.x,\n                    this.selectionOverlay.y,\n                    this.selectionOverlay.width,\n                    this.selectionOverlay.height\n                );\n            }\n            if (!this.hasSelection && this.selectionOverlayPreview) {\n                context.strokeStyle = \"cyan\";\n                context.lineWidth = lineWidth;\n                context.strokeRect(\n                    this.selectionOverlayPreview.x,\n                    this.selectionOverlayPreview.y,\n                    this.selectionOverlayPreview.width,\n                    this.selectionOverlayPreview.height\n                );\n            }\n            if (this.cursor) {\n                if (this.cursor.type === \"circle\") {\n                    context.lineWidth = lineWidth;\n                    context.strokeStyle = this.cursor.color;\n                    // context.globalAlpha = 0.5;\n                    context.beginPath();\n                    context.arc(\n                        this.cursor.x,\n                        this.cursor.y,\n                        this.cursor.radius,\n                        0,\n                        2 * Math.PI\n                    );\n                    context.stroke();\n                } else if (this.cursor.type === \"circle-fill\") {\n                    context.fillStyle = this.cursor.color;\n                    context.strokeStyle = this.cursor.color;\n                    // context.lineWidth = lineWidth;\n                    // context.globalAlpha = 0.5;\n                    context.beginPath();\n                    context.arc(\n                        this.cursor.x,\n                        this.cursor.y,\n                        this.cursor.radius,\n                        0,\n                        2 * Math.PI\n                    );\n                    context.stroke();\n                    // set alpha to 0.5 and fill\n                    context.globalAlpha = 0.5;\n                    context.beginPath();\n                    context.arc(\n                        this.cursor.x,\n                        this.cursor.y,\n                        this.cursor.radius,\n                        0,\n                        2 * Math.PI\n                    );\n                    context.fill();\n                    context.globalAlpha = 1;\n                } else if (this.cursor.type == \"crosshairs\") {\n                    // draw crosshairs based on cursor radius\n                    context.strokeStyle = this.cursor.color;\n                    context.lineWidth = lineWidth;\n                    context.beginPath();\n                    context.moveTo(\n                        this.cursor.x - this.cursor.radius,\n                        this.cursor.y\n                    );\n                    context.lineTo(\n                        this.cursor.x + this.cursor.radius,\n                        this.cursor.y\n                    );\n                    context.moveTo(\n                        this.cursor.x,\n                        this.cursor.y - this.cursor.radius\n                    );\n                    context.lineTo(\n                        this.cursor.x,\n                        this.cursor.y + this.cursor.radius\n                    );\n                    context.stroke();\n                } else if (this.cursor.type === \"colorpicker\") {\n                    // TODO: add croshairs\n                    context.lineWidth = this.cursor.radius * 0.75;\n                    context.strokeStyle = this.cursor.color;\n                    // context.globalAlpha = 0.5;\n                    context.beginPath();\n                    context.arc(\n                        this.cursor.x,\n                        this.cursor.y,\n                        this.cursor.radius,\n                        0,\n                        2 * Math.PI\n                    );\n                    context.stroke();\n\n                    // draw crosshairs (black)\n                    context.lineWidth = lineWidth;\n                    context.strokeStyle = \"black\";\n                    context.beginPath();\n                    context.moveTo(\n                        this.cursor.x - this.cursor.radius,\n                        this.cursor.y\n                    );\n                    context.lineTo(\n                        this.cursor.x + this.cursor.radius,\n                        this.cursor.y\n                    );\n                    context.moveTo(\n                        this.cursor.x,\n                        this.cursor.y - this.cursor.radius\n                    );\n                    context.lineTo(\n                        this.cursor.x,\n                        this.cursor.y + this.cursor.radius\n                    );\n                    context.stroke();\n                }\n            }\n        }\n    }\n\n    setSelectionOverlay(selectionOverlay: Rect | undefined) {\n        this.selectionOverlay = selectionOverlay;\n        this.render();\n    }\n\n    setSelectionOverlayPreview(selectionOverlayPreview: Rect | undefined) {\n        this.selectionOverlayPreview = selectionOverlayPreview;\n        this.render();\n    }\n\n    setCursor(cursor: Cursor | undefined) {\n        this.cursor = cursor;\n        this.render();\n    }\n\n    getSelectionOverlay(): Rect | undefined {\n        return this.selectionOverlay;\n    }\n\n    getZoom(): number {\n        return this.zoom;\n    }\n\n    getOffsetX(): number {\n        return this.offsetX;\n    }\n\n    getOffsetY(): number {\n        return this.offsetY;\n    }\n\n    updateZoomAndOffset(zoom: number, offsetX: number, offsetY: number) {\n        // console.log(`zoom: ${zoom}, offset: ${offsetX}, ${offsetY}`)\n        this.zoom = zoom;\n        this.offsetX = offsetX;\n        this.offsetY = offsetY;\n        this.render();\n    }\n\n    getWidth(): number {\n        return this.width;\n    }\n\n    getHeight(): number {\n        return this.height;\n    }\n\n    private imageDataToEncodedImage(imageData: ImageData): string | undefined {\n        // create a canvas and draw the image data on it\n        const canvas = document.createElement(\"canvas\");\n        canvas.width = imageData.width;\n        canvas.height = imageData.height;\n        const context = canvas.getContext(\"2d\");\n        if (context) {\n            context.putImageData(imageData, 0, 0);\n            // return the data url of the canvas\n            const result = canvas.toDataURL(\"image/png\");\n            // cleanup the canvas\n            canvas.remove();\n            // extract base64 data from data url\n            return result.split(\",\")[1];\n        }\n    }\n\n    getEncodedImage(selection: Rect | null): string | undefined {\n        const imageData = this.getImageData(selection);\n        if (imageData) {\n            return this.imageDataToEncodedImage(imageData);\n        }\n    }\n\n    private convertErasureToMask(erasure: ImageData): ImageData {\n        // for each pixel, if alpha < 255, set to white, otherwise set to black\n        const mask = erasure;\n        for (let i = 0; i < erasure.data.length; i += 4) {\n            if (erasure.data[i + 3] < 255) {\n                mask.data[i] = 255;\n                mask.data[i + 1] = 255;\n                mask.data[i + 2] = 255;\n                mask.data[i + 3] = 255;\n            } else {\n                mask.data[i] = 0;\n                mask.data[i + 1] = 0;\n                mask.data[i + 2] = 0;\n                mask.data[i + 3] = 255;\n            }\n        }\n        return mask;\n    }\n\n    getEncodedMask(selection: Rect | null): string | undefined {\n        const imageData = this.getImageData(selection)!;\n        const mask = this.convertErasureToMask(imageData);\n        return this.imageDataToEncodedImage(mask);\n    }\n\n    getImageData(selection: Rect | null): ImageData | undefined {\n        if (!selection) {\n            selection = {\n                x: 0,\n                y: 0,\n                width: this.width,\n                height: this.height,\n            };\n        }\n        // get image data of the selection\n        let context = this.baseImageLayer.getContext(\"2d\");\n        if (context) {\n            const imageData = context.getImageData(\n                selection.x,\n                selection.y,\n                selection.width,\n                selection.height\n            );\n            return imageData;\n        }\n    }\n\n    commitSelection() {\n        // draw the selection overlay on the base image layer\n        const context = this.baseImageLayer.getContext(\"2d\");\n        if (context) {\n            context.drawImage(this.editLayer, 0, 0);\n            this.setEditImage(null);\n            this.snapshot();\n        }\n    }\n\n    drawPoint(x: number, y: number, brushSize: number, color: string): void {\n        // draw on selection layer\n        const context = this.editLayer.getContext(\"2d\");\n        if (context) {\n            context.fillStyle = color;\n            context.beginPath();\n            context.arc(x, y, brushSize / 2, 0, 2 * Math.PI);\n            context.fill();\n        }\n        this.render();\n    }\n\n    erasePoint(brushx: number, brushy: number, brushSize: number): void {\n        if (!this.selectionOverlay) {\n            throw new Error(\"No selection overlay\");\n        }\n        // get image data centered on x, y with brushSize width and height\n        const context = this.baseImageLayer.getContext(\"2d\");\n        if (context) {\n            const imageData = context.getImageData(\n                brushx - brushSize / 2,\n                brushy - brushSize / 2,\n                brushSize,\n                brushSize\n            );\n            // set alpha to 0 in a circle centered on x, y with radius brushSize / 2\n            for (let i = 0; i < imageData.data.length; i += 4) {\n                const x = (i / 4) % brushSize;\n                const y = Math.floor(i / 4 / brushSize);\n\n                const absx = x - brushSize / 2 + brushx;\n                // three pixel barrier on each edge UNLESS the selection overlay borders that edge\n                let leftEdge = this.selectionOverlay.x;\n                if (leftEdge > 0) {\n                    leftEdge += 10;\n                }\n                let rightEdge =\n                    this.selectionOverlay.x + this.selectionOverlay.width;\n                if (rightEdge < this.width) {\n                    rightEdge -= 10;\n                }\n                let topEdge = this.selectionOverlay.y;\n                if (topEdge > 0) {\n                    topEdge += 10;\n                }\n                let bottomEdge =\n                    this.selectionOverlay.y + this.selectionOverlay.height;\n                if (bottomEdge < this.canvas.height) {\n                    bottomEdge -= 10;\n                }\n\n                const containsx = absx > leftEdge && absx < rightEdge;\n                const absy = y - brushSize / 2 + brushy;\n                const containsy = absy > topEdge && absy < bottomEdge;\n                const contains = containsx && containsy;\n\n                // check if x, y is within the selection overlay\n                if (this.selectionOverlay && !contains) {\n                    continue;\n                }\n\n                const distance = Math.sqrt(\n                    Math.pow(x - brushSize / 2, 2) +\n                        Math.pow(y - brushSize / 2, 2)\n                );\n                if (distance < brushSize / 2) {\n                    imageData.data[i + 3] = 0;\n                }\n            }\n            // draw the image data on the selection layer\n            context.putImageData(\n                imageData,\n                brushx - brushSize / 2,\n                brushy - brushSize / 2\n            );\n        }\n    }\n\n    drawLine(\n        x1: number,\n        y1: number,\n        x2: number,\n        y2: number,\n        brushSize: number,\n        color: string\n    ): void {\n        // draw on selection layer\n        const context = this.editLayer.getContext(\"2d\");\n        if (context) {\n            context.strokeStyle = color;\n            context.lineWidth = brushSize;\n            context.lineCap = \"round\";\n            context.beginPath();\n            context.moveTo(x1, y1);\n            context.lineTo(x2, y2);\n            context.stroke();\n        }\n        this.render();\n    }\n\n    smudgeLine(\n        x1: number,\n        y1: number,\n        x2: number,\n        y2: number,\n        brushSize: number,\n        brushOpacity: number\n    ): void {\n        const unitVector = {\n            x: x2 - x1,\n            y: y2 - y1,\n        };\n        const length = Math.sqrt(\n            unitVector.x * unitVector.x + unitVector.y * unitVector.y\n        );\n        unitVector.x /= length;\n        unitVector.y /= length;\n\n        // for each point on the line, get image data (brushSize x brushSize) from edit layer\n        // average pixel values that are within the brush circle.\n        // update the image data with the averaged pixel values in the\n        // brush circle, then put the image data back on the edit layer\n        // at the point on the line\n\n        const context = this.editLayer.getContext(\"2d\");\n        if (context) {\n            for (let i = 0; i < length; i++) {\n                const x = x1 + i * unitVector.x;\n                const y = y1 + i * unitVector.y;\n\n                const imageData = context.getImageData(\n                    x - brushSize / 2,\n                    y - brushSize / 2,\n                    brushSize,\n                    brushSize\n                );\n\n                let totalRed = 0;\n                let totalGreen = 0;\n                let totalBlue = 0;\n                let count = 0.0;\n\n                // average pixel values\n                for (let y = 0; y < imageData.height; y++) {\n                    for (let x = 0; x < imageData.width; x++) {\n                        const index = (y * imageData.width + x) * 4;\n                        const distance = Math.sqrt(\n                            (x - brushSize / 2) * (x - brushSize / 2) +\n                                (y - brushSize / 2) * (y - brushSize / 2)\n                        );\n                        if (distance <= brushSize / 2) {\n                            // get the pixel value from the image data\n                            const r = imageData.data[index];\n                            const g = imageData.data[index + 1];\n                            const b = imageData.data[index + 2];\n\n                            totalRed += r;\n                            totalGreen += g;\n                            totalBlue += b;\n                            count++;\n                        }\n                    }\n                }\n\n                // update the image data with the averaged pixel values\n                // these need to be weighted by the brush opacity\n                const averageRed = totalRed / count;\n                const averageGreen = totalGreen / count;\n                const averageBlue = totalBlue / count;\n                for (let y = 0; y < imageData.height; y++) {\n                    for (let x = 0; x < imageData.width; x++) {\n                        const index = (y * imageData.width + x) * 4;\n                        const distance = Math.sqrt(\n                            (x - brushSize / 2) * (x - brushSize / 2) +\n                                (y - brushSize / 2) * (y - brushSize / 2)\n                        );\n                        if (distance <= brushSize / 2) {\n                            imageData.data[index] =\n                                averageRed * brushOpacity +\n                                imageData.data[index] * (1 - brushOpacity);\n                            imageData.data[index + 1] =\n                                averageGreen * brushOpacity +\n                                imageData.data[index + 1] * (1 - brushOpacity);\n                            imageData.data[index + 2] =\n                                averageBlue * brushOpacity +\n                                imageData.data[index + 2] * (1 - brushOpacity);\n                        }\n                    }\n                }\n\n                // put the image data back on the edit layer\n                context.putImageData(\n                    imageData,\n                    x - brushSize / 2,\n                    y - brushSize / 2\n                );\n            }\n        }\n        this.render();\n    }\n\n    getPixel(x: number, y: number): string {\n        const context = this.baseImageLayer.getContext(\"2d\");\n        // get pixel as hex string\n        if (context) {\n            const pixel = context.getImageData(x, y, 1, 1).data;\n            return (\n                \"#\" +\n                (\"000000\" + rgbToHex(pixel[0], pixel[1], pixel[2])).slice(-6)\n            );\n        }\n        return \"#000000\";\n    }\n\n    copyEditImageFromBaseImage(): void {\n        // copy the base image to the edit layer\n        const context = this.editLayer.getContext(\"2d\");\n        if (context) {\n            context.drawImage(this.baseImageLayer, 0, 0);\n        }\n        this.render();\n        this.hasSelection = true;\n        this.notifySnapshotListener();\n    }\n\n    expandToOverlay() {\n        if (!this.selectionOverlay) {\n            throw new Error(\"No selection overlay\");\n        }\n        const minX = Math.min(0, this.selectionOverlay.x);\n        const minY = Math.min(0, this.selectionOverlay.y);\n        const maxX = Math.max(\n            this.selectionOverlay.x + this.selectionOverlay.width,\n            this.baseImageLayer.width\n        );\n        const maxY = Math.max(\n            this.selectionOverlay.y + this.selectionOverlay.height,\n            this.baseImageLayer.height\n        );\n        const width = maxX - minX;\n        const height = maxY - minY;\n\n        // create a new canvas with the expanded size\n        const newCanvas = document.createElement(\"canvas\");\n        newCanvas.width = width;\n        newCanvas.height = height;\n        // draw the base image on the new canvas.\n        // if overlay.x is negative, image.x is overlay.x * -1\n        // if overlay.x is 0 or positive, image.x is 0\n        // if overlay.y is negative, image.y is overlay.y * -1\n        // if overlay.y is 0 or positive, image.y is 0\n        const context = newCanvas.getContext(\"2d\");\n        if (context) {\n            context.drawImage(\n                this.baseImageLayer,\n                Math.max(0, this.selectionOverlay.x * -1),\n                Math.max(0, this.selectionOverlay.y * -1)\n            );\n        }\n        if (this.selectionOverlay.x < 0) {\n            this.selectionOverlay.x = 0;\n        }\n        if (this.selectionOverlay.y < 0) {\n            this.selectionOverlay.y = 0;\n        }\n        console.log(`new Canvas size: ${width} x ${height}`);\n        this.setBaseImage(newCanvas, false);\n    }\n}\n\nfunction rgbToHex(r: number, g: number, b: number) {\n    if (r > 255 || g > 255 || b > 255) throw \"Invalid color component\";\n    return ((r << 16) | (g << 8) | b).toString(16);\n}\n\nexport function createRenderer(canvas: HTMLCanvasElement): Renderer {\n    return new Renderer(canvas);\n}\n","import React, { FC, useState, useEffect } from \"react\";\nimport loadImage from \"blueimp-load-image\";\nimport saveAs from \"file-saver\";\n\nimport { AIBrushApi } from \"../../client\";\nimport { Renderer } from \"./renderer\";\nimport { BaseTool, Tool } from \"./tool\";\n\ninterface Props {\n    renderer: Renderer;\n    tool: BaseTool;\n    api: AIBrushApi;\n}\n\nexport const ImportExportControls: FC<Props> = ({ renderer, tool }) => {\n\n    const [backupImage, setBackupImage] = useState<string | undefined>();\n\n    const onImageSelected = (event: React.ChangeEvent<HTMLInputElement>) => {\n        const files = event.target.files;\n        if (files && files.length > 0) {\n            loadImage(\n                files[0],\n                (img) => {\n                    const backupImage = renderer.getEncodedImage(null);\n                    setBackupImage(backupImage);\n                    renderer.setBaseImage(img as HTMLImageElement);\n                },\n                { canvas: false }\n            );\n        }\n    };\n\n    const onExport = () => {\n        const encodedImage = renderer.getEncodedImage(null);\n        if (encodedImage) {\n            // base64 decode\n            const byteString = atob(encodedImage);\n            // save as file\n            const buffer = new ArrayBuffer(byteString.length);\n            const intArray = new Uint8Array(buffer);\n            for (let i = 0; i < byteString.length; i++) {\n                intArray[i] = byteString.charCodeAt(i);\n            }\n            const blob = new Blob([intArray], { type: \"image/png\" });\n            saveAs(blob, \"image.png\");\n        }\n    };\n\n    if (backupImage) {\n        return (\n            <div className=\"form-group\" style={{marginTop: \"16px\"}}>\n                <button\n                    className=\"btn btn-primary\"\n                    onClick={() => {\n                        setBackupImage(undefined);\n                        const img = new Image();\n                        // set src as data uri\n                        const src = \"data:image/png;base64,\" + backupImage;\n                        img.src = src;\n                        img.onload = () => {\n                            renderer.setBaseImage(img);\n                        };\n                    }}\n                >\n                    {/* cancel icon */}\n                    <i className=\"fas fa-times\"></i>&nbsp;\n                    Revert\n                </button>\n                <button\n                    className=\"btn btn-primary\"\n                    onClick={() => {\n                        setBackupImage(undefined);\n                        if (tool.saveListener) {\n                            const encodedImage = renderer.getEncodedImage(null);\n                            if (encodedImage) {\n                                tool.saveListener(encodedImage);\n                            }\n                        }\n                    }}\n                    style={{marginLeft: \"8px\"}}\n                >\n                    {/* save icon */}\n                    <i className=\"fas fa-save\"></i>&nbsp;\n                    Save\n                </button>\n            </div>\n        );\n    }\n\n    // Show buttons for import and export and \"save a copy\"\n    return (\n        <>\n            <div className=\"form-group\" style={{marginTop: \"16px\"}}>\n                <label\n                    id=\"loadimage-wrapper\"\n                    className={`btn btn-primary `}\n                    style={{ display: \"inline\" }}\n                >\n                    {/* upload image */}\n                    <i className=\"fas fa-upload\"></i>&nbsp; Import Image\n                    <input\n                        id=\"loadimage\"\n                        type=\"file\"\n                        style={{ display: \"none\" }}\n                        onChange={onImageSelected}\n                    />\n                </label>\n            </div>\n            <div className=\"form-group\">\n                <button\n                    className=\"btn btn-primary\"\n                    onClick={() => {\n                        onExport();\n                    }}\n                    style={{ marginLeft: \"8px\"}}\n                >\n                    <i className=\"fas fa-download\"></i>&nbsp; Export Image\n                </button>\n            </div>\n        </>\n    );\n};\n","import React, { FC, useState, useEffect } from \"react\";\nimport loadImage from \"blueimp-load-image\";\nimport saveAs from \"file-saver\";\nimport axios from \"axios\";\nimport * as uuid from \"uuid\";\n\nimport { sleep } from \"../../lib/sleep\";\n\nimport {\n    AIBrushApi,\n    CreateImageInput,\n    ImageParamsAugmentationEnum,\n    Image as APIImage,\n    StatusEnum,\n} from \"../../client\";\nimport { Renderer } from \"./renderer\";\nimport { BaseTool, Tool } from \"./tool\";\nimport {\n    splitImage,\n    mergeTiles,\n    ImageUtilWorker,\n    imageDataToCanvas,\n    fixImageSize,\n    decodeImage,\n    binaryImageToDataBase64,\n    SplitResult,\n} from \"../../lib/imageutil\";\nimport { defaultArgs } from \"../../components/ImagePrompt\";\nimport { ErrorNotification } from \"../../components/Alerts\";\nimport moment from \"moment\";\n\nexport const anonymousClient = axios.create();\n\ninterface Props {\n    renderer: Renderer;\n    tool: BaseTool;\n    api: AIBrushApi;\n    image: APIImage;\n}\n\nexport const AugmentControls: FC<Props> = ({ renderer, tool, api, image }) => {\n    const [backupImage, setBackupImage] = useState<string | undefined>();\n    const [activeAugmentation, setActiveAugmentation] = useState<\n        \"upscale\" | \"face_restore\" | null\n    >(null);\n    const [imageWorker, setImageWorker] = useState<\n        ImageUtilWorker | undefined\n    >();\n    const [error, setError] = useState<string | null>(null);\n    const [lastError, setLastError] = useState<number>(0);\n\n    useEffect(() => {\n        const imageWorker = new ImageUtilWorker();\n        setImageWorker(imageWorker);\n        return () => {\n            imageWorker.destroy();\n        };\n    }, []);\n\n    const augmentImageData = async (\n        imageData: ImageData,\n        augmentation: \"upscale\" | \"face_restore\"\n    ): Promise<ImageData> => {\n        if (!imageWorker) {\n            throw new Error(\"Image worker not initialized\");\n        }\n        let c = imageDataToCanvas(imageData);\n        let encodedImage = c.toDataURL(\"image/png\").split(\",\")[1];\n        c.remove();\n        const input: CreateImageInput = defaultArgs();\n        input.label = \"\";\n        // input.encoded_image = encodedImage;\n\n        const tmpInitImage = await api.createTemporaryImage();\n        const binaryImageData = Buffer.from(encodedImage, \"base64\");\n        await anonymousClient.put(\n            tmpInitImage.data.upload_url!,\n            binaryImageData,\n            {\n                headers: {\n                    \"Content-Type\": \"image/png\",\n                },\n            }\n        );\n\n        input.tmp_image_id = tmpInitImage.data.id;\n        input.params.prompt = image.params.prompt;\n        input.params.negative_prompt = image.params.negative_prompt;\n        input.params.denoising_strength = 0.05;\n        input.count = 1;\n        input.model = \"stable_diffusion\";\n        input.nsfw = true;\n        input.temporary = true;\n        input.params.width = imageData.width;\n        input.params.height = imageData.height;\n        input.params.augmentation =\n            augmentation === \"upscale\"\n                ? ImageParamsAugmentationEnum.Upscale\n                : ImageParamsAugmentationEnum.FaceRestore;\n\n        const createResp = await api.createImage(input);\n        let processingImage = createResp.data.images![0];\n        while (processingImage.status !== StatusEnum.Completed) {\n            await sleep(2000);\n            const checkResp = await api.getImage(processingImage.id);\n            processingImage = checkResp.data;\n            if (processingImage.status === StatusEnum.Error) {\n                throw new Error(\"Augmentation failed\");\n            }\n        }\n        const downloadUrls = await api.getImageDownloadUrls(processingImage.id);\n\n        // download image data, convert to canvas and resize to 2x original,\n        // convert back to image data and return.\n        const imageDataResp = await anonymousClient.get(\n            downloadUrls.data.image_url!,\n            {\n                responseType: \"arraybuffer\",\n            }\n        );\n        encodedImage = binaryImageToDataBase64(imageDataResp.data);\n        const img = await decodeImage(encodedImage);\n        c = document.createElement(\"canvas\");\n        const upscaleFactor = augmentation === \"upscale\" ? 2 : 1;\n        c.width = imageData.width * upscaleFactor;\n        c.height = imageData.height * upscaleFactor;\n        const ctx = c.getContext(\"2d\")!;\n        ctx.drawImage(img, 0, 0, c.width, c.height);\n        const newImageData = ctx.getImageData(0, 0, c.width, c.height);\n        c.remove();\n        return newImageData;\n    };\n\n    const onAugment = async (augmentation: \"upscale\" | \"face_restore\") => {\n        setActiveAugmentation(augmentation);\n        setError(null);\n        try {\n            const backupImage = renderer.getEncodedImage(null);\n            setBackupImage(backupImage);\n            let imageData = renderer.getImageData(null);\n            if (!imageData) {\n                return;\n            }\n            // ensure width and height are multiples of 64\n            if ((imageData.width % 64) + (imageData.height % 64) !== 0) {\n                const c = fixImageSize(imageDataToCanvas(imageData));\n                imageData = c\n                    .getContext(\"2d\")!\n                    .getImageData(0, 0, c.width, c.height);\n            }\n\n            const newImageData = await augmentImageData(\n                imageData,\n                augmentation\n            );\n            const newCanvas = imageDataToCanvas(newImageData);\n            renderer.setBaseImage(newCanvas);\n            newCanvas.remove();\n        } catch (err: any) {\n            setError(err.message || \"Augmentation failed\");\n            setLastError(moment().valueOf());\n        } finally {\n            setActiveAugmentation(null);\n        }\n    };\n\n    if (activeAugmentation) {\n        return (\n            <div className=\"form-group\" style={{ marginTop: \"16px\" }}>\n                <i className=\"fas fa-spinner fa-spin\"></i>&nbsp;{\" \"}\n                {activeAugmentation === \"upscale\"\n                    ? \"Upscaling...\"\n                    : \"Restoring faces...\"}\n            </div>\n        );\n    }\n\n    if (backupImage) {\n        return (\n            <div className=\"form-group\" style={{ marginTop: \"16px\" }}>\n                <ErrorNotification message={error} timestamp={lastError} />\n                <button\n                    className=\"btn btn-primary\"\n                    onClick={() => {\n                        setBackupImage(undefined);\n                        const img = new Image();\n                        // set src as data uri\n                        const src = \"data:image/png;base64,\" + backupImage;\n                        img.src = src;\n                        img.onload = () => {\n                            renderer.setBaseImage(img);\n                        };\n                    }}\n                >\n                    {/* cancel icon */}\n                    <i className=\"fas fa-times\"></i>&nbsp; Revert\n                </button>\n                <button\n                    className=\"btn btn-primary\"\n                    onClick={() => {\n                        setBackupImage(undefined);\n                        if (tool.saveListener) {\n                            const encodedImage = renderer.getEncodedImage(null);\n                            if (encodedImage) {\n                                tool.saveListener(encodedImage);\n                            }\n                        }\n                    }}\n                    style={{ marginLeft: \"8px\" }}\n                >\n                    {/* save icon */}\n                    <i className=\"fas fa-save\"></i>&nbsp; Save\n                </button>\n            </div>\n        );\n    }\n\n    const maxSize = 2048 * 2048;\n    if (renderer.getWidth() * renderer.getHeight() > maxSize) {\n        return (\n            <div style={{ marginTop: \"16px\" }}>\n                This image is too large to augment.\n            </div>\n        );\n    }\n\n    // Show buttons for import and export and \"save a copy\"\n    return (\n        <>\n            <ErrorNotification message={error} timestamp={lastError} />\n            <div className=\"form-group\" style={{ marginTop: \"16px\" }}>\n                <button\n                    className=\"btn btn-primary\"\n                    onClick={() => {\n                        onAugment(\"upscale\");\n                    }}\n                    style={{ marginLeft: \"8px\" }}\n                >\n                    {/* upscale icon */}\n                    <i className=\"fas fa-arrows-alt\"></i>&nbsp; Upscale Image 2x\n                </button>\n            </div>\n            <div className=\"form-group\" style={{ marginTop: \"16px\" }}>\n                <button\n                    className=\"btn btn-primary\"\n                    onClick={() => {\n                        onAugment(\"face_restore\");\n                    }}\n                    style={{ marginLeft: \"8px\" }}\n                >\n                    {/* face restore icon */}\n                    <i className=\"fas fa-smile\"></i>&nbsp; Restore Faces\n                </button>\n            </div>\n        </>\n    );\n};\n","import axios from \"axios\";\nimport { AIBrushApi } from \"../client\";\nimport { Rect } from \"../pages/image-editor/models\";\n\nconst anonymousClient = axios.create();\n\nexport interface SplitResult {\n    numTilesX: number;\n    numTilesY: number;\n    tileSize: number;\n    imageWidth: number;\n    imageHeight: number;\n    tiles: ImageData[][]; // [x][y]\n}\n\nexport function loadImageDataElement(\n    api: AIBrushApi,\n    imageId: string\n): Promise<HTMLImageElement> {\n    return new Promise((resolve, reject) => {\n        api.getImageDownloadUrls(imageId)\n            .then((urls) => {\n                anonymousClient\n                    .get(urls.data.image_url!, {\n                        responseType: \"arraybuffer\",\n                    })\n                    .then((resp) => {\n                        const binaryImageData = Buffer.from(\n                            resp.data,\n                            \"binary\"\n                        );\n                        const base64ImageData =\n                            binaryImageData.toString(\"base64\");\n                        const src = `data:image/png;base64,${base64ImageData}`;\n                        const imageElement = new Image();\n                        imageElement.src = src;\n                        imageElement.onload = () => {\n                            resolve(imageElement);\n                        };\n                    })\n                    .catch((err) => reject(err));\n            })\n            .catch((err) => reject(err));\n    });\n}\n\n// split image for individual upscales\nexport function splitImage(initImage: ImageData) {\n    // Check if the image area is larger than 512x512\n    if (initImage.width * initImage.height > 512 * 512) {\n        // use a temporary canvas to split the image\n        const canvas = document.createElement(\"canvas\");\n        try {\n            canvas.width = initImage.width;\n            canvas.height = initImage.height;\n            const ctx = canvas.getContext(\"2d\");\n            if (!ctx) {\n                throw new Error(\"Could not get canvas context\");\n            }\n            ctx.putImageData(initImage, 0, 0);\n            const tile_size = Math.min(initImage.width, initImage.height, 512);\n            // split the image into 512x512 tiles\n            // they need to overlap by at least 32 pixels\n            // so that the edges can be merged\n\n            // calculate the number of tiles in each dimension\n            const num_tiles_x = Math.ceil(initImage.width / (tile_size - 32));\n            const num_tiles_y = Math.ceil(initImage.height / (tile_size - 32));\n\n            const tiles: ImageData[][] = [];\n            for (let x = 0; x < num_tiles_x; x++) {\n                tiles.push([]);\n                for (let y = 0; y < num_tiles_y; y++) {\n                    // calculate the bounding box of the tile\n                    const x0 = x * (tile_size - 32);\n                    const y0 = y * (tile_size - 32);\n                    const x1 = Math.min(x0 + tile_size, initImage.width);\n                    const y1 = Math.min(y0 + tile_size, initImage.height);\n                    // crop the tile\n                    const tile = ctx.getImageData(x0, y0, x1 - x0, y1 - y0);\n                    tiles[x].push(tile);\n                }\n            }\n            return {\n                numTilesX: num_tiles_x,\n                numTilesY: num_tiles_y,\n                tileSize: tile_size,\n                imageWidth: initImage.width,\n                imageHeight: initImage.height,\n                tiles,\n            };\n        } finally {\n            canvas.remove();\n        }\n    } else {\n        return null;\n    }\n}\n\n// merge the tiles back into a single image\n// tiles should be 2x original size\nexport function mergeTiles(splitResult: SplitResult): ImageData {\n    // create a new image\n    const canvas = document.createElement(\"canvas\");\n    try {\n        canvas.width = splitResult.imageWidth;\n        canvas.height = splitResult.imageHeight;\n        const ctx = canvas.getContext(\"2d\");\n        if (!ctx) {\n            throw new Error(\"Could not get canvas context\");\n        }\n        for (let x = 0; x < splitResult.numTilesX; x++) {\n            for (let y = 0; y < splitResult.numTilesY; y++) {\n                // load the tile\n                const tile = splitResult.tiles[x][y];\n                const tileCanvas = imageDataToCanvas(tile);\n\n                // paste the tile into the new image\n                ctx.drawImage(\n                    tileCanvas,\n                    x * (splitResult.tileSize - 64),\n                    y * (splitResult.tileSize - 64)\n                );\n            }\n        }\n        return ctx.getImageData(\n            0,\n            0,\n            splitResult.imageWidth,\n            splitResult.imageHeight\n        );\n    } finally {\n        canvas.remove();\n    }\n}\n\nexport function imageDataToCanvas(imageData: ImageData): HTMLCanvasElement {\n    const canvas = document.createElement(\"canvas\");\n    canvas.width = imageData.width;\n    canvas.height = imageData.height;\n    const ctx = canvas.getContext(\"2d\");\n    if (!ctx) {\n        throw new Error(\"Could not get canvas context\");\n    }\n    ctx.putImageData(imageData, 0, 0);\n    return canvas;\n}\n\n// extract resizing logic from above function into a reusable resizeImage function\nexport function resizeImage(\n    image: HTMLCanvasElement,\n    width: number,\n    height: number\n): HTMLCanvasElement {\n    const canvas = document.createElement(\"canvas\");\n    try {\n        canvas.width = width;\n        canvas.height = height;\n        const ctx = canvas.getContext(\"2d\");\n        if (!ctx) {\n            throw new Error(\"Could not get canvas context\");\n        }\n        ctx.drawImage(image, 0, 0, width, height);\n        return canvas;\n    } finally {\n        image.remove();\n    }\n}\n\n// re-implement fixImageSize using resizeImage\nexport function fixImageSize(image: HTMLCanvasElement): HTMLCanvasElement {\n    // if the width and the height are divisible by 64, return the image data\n    // otherwise, resize up to the next multiple of 64\n    const width = Math.ceil(image.width / 64) * 64;\n    const height = Math.ceil(image.height / 64) * 64;\n    if (width == image.width && height == image.height) {\n        return image;\n    }\n    return resizeImage(image, width, height);\n}\n\nexport function featherEdges(\n    selectionOverlay: Rect,\n    imageWidth: number,\n    imageHeight: number,\n    imageData: ImageData,\n    featherWidth?: number\n) {\n    const featherLeftEdge = selectionOverlay.x != 0;\n    const featherRightEdge =\n        selectionOverlay.x + selectionOverlay.width != imageWidth;\n    const featherTopEdge = selectionOverlay.y != 0;\n    const featherBottomEdge =\n        selectionOverlay.y + selectionOverlay.height != imageHeight;\n\n    const baseWidth = Math.min(selectionOverlay.width, selectionOverlay.height);\n    if (!featherWidth) {\n        featherWidth = Math.floor(baseWidth / 8);\n    }\n\n    if (featherTopEdge) {\n        for (let y = 0; y < featherWidth; y++) {\n            for (let x = 0; x < selectionOverlay.width; x++) {\n                const pixelIndex = (y * selectionOverlay.width + x) * 4;\n                const alpha = (y / featherWidth) * 255;\n                const existingAlpha = imageData.data[pixelIndex + 3];\n                imageData.data[pixelIndex + 3] = Math.min(alpha, existingAlpha);\n            }\n        }\n    }\n    if (featherBottomEdge) {\n        for (\n            let y = selectionOverlay.height - featherWidth;\n            y < selectionOverlay.height;\n            y++\n        ) {\n            for (let x = 0; x < selectionOverlay.width; x++) {\n                const pixelIndex = (y * selectionOverlay.width + x) * 4;\n                const alpha =\n                    ((selectionOverlay.height - y) / featherWidth) * 255;\n                const existingAlpha = imageData.data[pixelIndex + 3];\n                imageData.data[pixelIndex + 3] = Math.min(alpha, existingAlpha);\n            }\n        }\n    }\n    if (featherLeftEdge) {\n        for (let x = 0; x < featherWidth; x++) {\n            for (let y = 0; y < selectionOverlay.height; y++) {\n                const pixelIndex = (y * selectionOverlay.width + x) * 4;\n                const alpha = (x / featherWidth) * 255;\n                const existingAlpha = imageData.data[pixelIndex + 3];\n                imageData.data[pixelIndex + 3] = Math.min(alpha, existingAlpha);\n            }\n        }\n    }\n    if (featherRightEdge) {\n        for (\n            let x = selectionOverlay.width - featherWidth;\n            x < selectionOverlay.width;\n            x++\n        ) {\n            for (let y = 0; y < selectionOverlay.height; y++) {\n                const pixelIndex = (y * selectionOverlay.width + x) * 4;\n                const alpha =\n                    ((selectionOverlay.width - x) / featherWidth) * 255;\n                const existingAlpha = imageData.data[pixelIndex + 3];\n                imageData.data[pixelIndex + 3] = Math.min(alpha, existingAlpha);\n            }\n        }\n    }\n}\n\nexport function applyAlphaMask(imageData: ImageData, alphaMask: ImageData) {\n    if (\n        imageData.width != alphaMask.width ||\n        imageData.height != alphaMask.height\n    ) {\n        throw new Error(\"imageData and alphaMask are not the same size\");\n    }\n    const spread = 10;\n    for (let x = 0; x < imageData.width; x++) {\n        for (let y = 0; y < imageData.height; y++) {\n            // r, g, b, a\n            // if transparency within 10 pixels, set alpha to 1, otherwise to zero.\n            // binary alpha inversion with spread\n            let alpha = false;\n            for (\n                let x2 = Math.max(0, x - spread);\n                x2 < Math.min(imageData.width, x + spread);\n                x2++\n            ) {\n                for (\n                    let y2 = Math.max(0, y - spread);\n                    y2 < Math.min(imageData.height, y + spread);\n                    y2++\n                ) {\n                    const alphaValue =\n                        alphaMask.data[y2 * alphaMask.width * 4 + x2 * 4 + 3];\n                    if (alphaValue < 255) {\n                        alpha = true;\n                    }\n                }\n            }\n            const alphaIndex = y * imageData.width * 4 + x * 4 + 3;\n            if (alpha) {\n                imageData.data[alphaIndex] = 255;\n            } else {\n                imageData.data[alphaIndex] = 0;\n            }\n        }\n    }\n}\n\nexport interface ImageWorkerRequest {\n    id: string;\n    feather: boolean;\n    upscale?: boolean;\n    alpha: boolean;\n    pixels: Uint8ClampedArray;\n    alphaPixels?: Uint8ClampedArray;\n    width: number;\n    height: number;\n    featherWidth?: number;\n    selectionOverlay: Rect;\n}\n\nexport interface ImageWorkerResponse {\n    id: string;\n    pixels: Uint8ClampedArray;\n}\n\nexport class ImageUtilWorker {\n    private workers: Array<Worker> = [];\n    private callbacks: { [key: string]: (event: MessageEvent) => void } = {};\n    private cursor = 0;\n\n    constructor(numWorkers = 3) {\n        for (let i = 0; i < numWorkers; i++) {\n            this.workers[i] = new Worker(\n                `${process.env.PUBLIC_URL}/workers/imageutil.js`\n            );\n            this.workers[i].addEventListener(\n                \"message\",\n                this.onMessage.bind(this)\n            );\n        }\n    }\n\n    onMessage(event: MessageEvent) {\n        const resp = event.data as ImageWorkerResponse;\n        this.callbacks[resp.id](event);\n        delete this.callbacks[resp.id];\n    }\n\n    async processRequest(\n        request: ImageWorkerRequest\n    ): Promise<ImageWorkerResponse> {\n        return new Promise((resolve, reject) => {\n            this.callbacks[request.id] = (event) => {\n                resolve(event.data);\n            };\n            this.workers[this.cursor].postMessage({\n                ...request,\n            });\n            this.cursor = (this.cursor + 1) % this.workers.length;\n        });\n    }\n\n    destroy() {\n        for (let key in this.workers) {\n            this.workers[key].terminate();\n        }\n    }\n}\n\nexport function createEncodedThumbnail(encodedImage: string): Promise<string> {\n    return new Promise((resolve, reject) => {\n        // use html5 canvas\n        // crop to square aspect ratio on 128x128 canvas\n        const canvas = document.createElement(\"canvas\");\n        canvas.width = 128;\n        canvas.height = 128;\n\n        const image = new Image();\n        image.src = `data:image/png;base64,${encodedImage}`;\n        image.onload = () => {\n            const context = canvas.getContext(\"2d\");\n            if (!context) {\n                throw new Error(\"Could not create canvas context\");\n            }\n            const width = 128;\n            const height = 128;\n            canvas.width = width;\n            canvas.height = height;\n\n            const aspectRatio = image.width / image.height;\n            const cropWidth =\n                aspectRatio > 1 ? image.width : image.height * aspectRatio;\n            const cropHeight =\n                aspectRatio > 1 ? image.width / aspectRatio : image.height;\n            const cropX = (image.width - cropWidth) / 2;\n            const cropY = (image.height - cropHeight) / 2;\n            context.drawImage(\n                image,\n                cropX,\n                cropY,\n                cropWidth,\n                cropHeight,\n                0,\n                0,\n                width,\n                height\n            );\n\n            // save to png\n            const imageUrl = canvas.toDataURL(\"image/png\");\n            const base64 = imageUrl.split(\",\")[1];\n            resolve(base64);\n        };\n    });\n}\n\nexport function decodeImage(encodedImage: string): Promise<HTMLImageElement> {\n    return new Promise((resolve, reject) => {\n        const image = new Image();\n        image.src = `data:image/png;base64,${encodedImage}`;\n        image.onload = () => {\n            resolve(image);\n        };\n    });\n}\n\nexport function binaryImageToDataBase64(binaryImage: any): string {\n    const buf = Buffer.from(binaryImage, \"binary\");\n    return buf.toString(\"base64\");\n}\n\nexport function resizeEncodedImage(\n    encodedImage: string,\n    width: number,\n    height: number\n): Promise<string> {\n    return new Promise((resolve, reject) => {\n        // use html5 canvas\n        // crop to square aspect ratio on 128x128 canvas\n        const canvas = document.createElement(\"canvas\");\n        canvas.width = width;\n        canvas.height = height;\n\n        const image = new Image();\n        image.src = `data:image/png;base64,${encodedImage}`;\n        image.onload = () => {\n            const context = canvas.getContext(\"2d\");\n            if (!context) {\n                throw new Error(\"Could not create canvas context\");\n            }\n            canvas.width = width;\n            canvas.height = height;\n\n            context.drawImage(\n                image,\n                0,\n                0,\n                image.width,\n                image.height,\n                0,\n                0,\n                width,\n                height\n            );\n\n            // save to png\n            const imageUrl = canvas.toDataURL(\"image/png\");\n            const base64 = imageUrl.split(\",\")[1];\n            resolve(base64);\n        };\n    });\n}\n\nexport function encodedImageToBlob(encodedImage: string): Blob {\n    const binaryString = atob(encodedImage);\n    const arr = [];\n    for (let i = 0; i < binaryString.length; i++) {\n        arr.push(binaryString.charCodeAt(i));\n    }\n    return new Blob([new Uint8Array(arr)], {\n        type: \"image/png\",\n    });\n}\n\n// This function is made to work with S3 presigned urls.\n// Solution found at https://stackoverflow.com/questions/22531114/how-to-upload-to-aws-s3-directly-from-browser-using-a-pre-signed-url-instead-of\nexport function uploadBlob(signedUrl: string, blob: Blob): Promise<void> {\n    return new Promise((resolve, reject) => {\n        var xhr = new XMLHttpRequest();\n        xhr.open(\"PUT\", signedUrl, true);\n        xhr.setRequestHeader(\"Content-Type\", \"image/png\");\n        xhr.onload = () => {\n            if (xhr.status < 400) {\n                // success!\n                resolve();\n            }\n        };\n        xhr.onerror = (err) => {\n            // error...\n            reject(err);\n        };\n        xhr.send(blob); // `file` is a File object here\n    });\n}\n","import React, { FC, useEffect, useRef, useState } from \"react\";\nimport { Modal } from \"react-bootstrap\";\nimport { propTypes } from \"react-bootstrap/esm/Image\";\n\ninterface Props {\n    show: boolean;\n    title?: string;\n}\n\n// Show modal with child contents\nexport const BusyModal: FC<Props> = ({ show, title, children }) => {\n    return (\n        <Modal show={show} backdrop=\"static\" keyboard={false}>\n            <Modal.Header closeButton>\n                <Modal.Title>{title || \"Processing\"}</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                {children || (\n                    <div className=\"d-flex justify-content-center\">\n                        <div className=\"spinner-border\" role=\"status\">\n                            <span className=\"sr-only\">Please Wait...</span>\n                        </div>\n                    </div>\n                )}\n            </Modal.Body>\n        </Modal>\n    );\n};\n","import { Renderer } from \"./renderer\";\n\nexport class ZoomHelper {\n\n    private startTouches: React.TouchList | null;\n    private startZoom = 1;\n    private startOffsetX = 0;\n    private startOffsetY = 0;\n\n    constructor(private renderer: Renderer) {\n        this.startTouches = null;\n    }\n\n    onWheel(event: WheelEvent) {\n        const originalZoom = this.renderer.getZoom();\n        let zoom = this.renderer.getZoom();\n        let offsetX = this.renderer.getOffsetX();\n        let offsetY = this.renderer.getOffsetY();\n\n        let canvasPoint = this.translateMouseToCanvasCoordinates(\n            event.offsetX,\n            event.offsetY\n        );\n        // console.log(\"x: \" + x + \", y: \" + y);\n        \n        if (event.deltaY < 0) {\n            zoom += 0.1 * zoom;\n        } else {\n            zoom -= 0.1 * zoom;\n        }\n        zoom = Math.max(0.1, Math.min(zoom, 8.0));\n\n        let xDiff = canvasPoint.x - -offsetX;\n        let yDiff = canvasPoint.y - -offsetY;\n\n        // offsetX = canvasPoint.x - xDiff * (zoom / originalZoom);\n        // offsetY = canvasPoint.y - yDiff * (zoom / originalZoom);\n        offsetX -= xDiff * (zoom / originalZoom) - xDiff;\n        offsetY -= yDiff * (zoom / originalZoom) - yDiff;\n\n        this.renderer.updateZoomAndOffset(zoom, offsetX, offsetY);\n    }\n\n    onPan(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        let movementX = event.movementX;\n        let movementY = event.movementY;\n        // translate offset to canvas coordinates\n        let rect = (\n            event.target as HTMLCanvasElement\n        ).getBoundingClientRect();\n        movementX = (movementX / rect.width) * 512;\n        movementY = (movementY / rect.height) * 512;\n\n        let zoom = this.renderer.getZoom();\n        let offsetX = this.renderer.getOffsetX();\n        let offsetY = this.renderer.getOffsetY();\n\n        offsetX += movementX / zoom;\n        offsetY += movementY / zoom;\n\n        this.renderer.updateZoomAndOffset(zoom, offsetX, offsetY);\n    }\n\n    onTouchStart(event: React.TouchEvent<HTMLCanvasElement>) {\n        if (event.touches.length === 2) {\n            this.startTouches = event.touches;\n            this.startZoom = this.renderer.getZoom();\n            this.startOffsetX = this.renderer.getOffsetX();\n            this.startOffsetY = this.renderer.getOffsetY();\n        }\n    }\n\n    onTouchMove(event: React.TouchEvent<HTMLCanvasElement>) {\n        if (this.startTouches) {\n            const canvasRect = this.renderer.getCanvas().getBoundingClientRect();\n            const startTouch1 = this.startTouches[0];\n            const startTouch2 = this.startTouches[1];\n            const touch1 = event.touches[0];\n            const touch2 = event.touches[1];\n\n            const startDistance = Math.sqrt(\n                Math.pow(startTouch1.clientX - startTouch2.clientX, 2) +\n                Math.pow(startTouch1.clientY - startTouch2.clientY, 2)\n            );\n            const distance = Math.sqrt(\n                Math.pow(touch1.clientX - touch2.clientX, 2) +\n                Math.pow(touch1.clientY - touch2.clientY, 2)\n            );\n            const zoom = this.startZoom * (distance / startDistance);\n\n            const startCenterX = (startTouch1.clientX + startTouch2.clientX) / 2;\n            const startCenterY = (startTouch1.clientY + startTouch2.clientY) / 2;\n            const centerX = (touch1.clientX + touch2.clientX) / 2;\n            const centerY = (touch1.clientY + touch2.clientY) / 2;\n\n            const startCanvasPoint = this.translateMouseToCanvasCoordinates(\n                startCenterX - canvasRect.left,\n                startCenterY - canvasRect.top\n            );\n            const canvasPoint = this.translateMouseToCanvasCoordinates(\n                centerX - canvasRect.left,\n                centerY - canvasRect.top\n            );\n\n            let offsetX = this.startOffsetX;\n            let offsetY = this.startOffsetY;\n\n            let xDiff = canvasPoint.x - startCanvasPoint.x;\n            let yDiff = canvasPoint.y - startCanvasPoint.y;\n\n            let xDiff2 = canvasPoint.x - -this.renderer.getOffsetX();\n            let yDiff2 = canvasPoint.y - -this.renderer.getOffsetY();\n\n            offsetX -= xDiff2 * (zoom / this.startZoom) - xDiff2 - (xDiff * (distance / startDistance));\n            offsetY -= yDiff2 * (zoom / this.startZoom) - yDiff2 - (yDiff * (distance / startDistance));\n\n            this.renderer.updateZoomAndOffset(zoom, offsetX, offsetY);\n        }\n    }\n\n    onTouchEnd(event: React.TouchEvent<HTMLCanvasElement>) {\n        this.startTouches = null;\n    }\n\n\n    translateMouseToCanvasCoordinates(mouseX: number, mouseY: number, zoom?: number, offsetX?: number, offsetY?: number) {\n        let x = mouseX;\n        let y = mouseY;\n        // adjust for zoom\n        zoom = zoom || this.renderer.getZoom();\n        offsetX = offsetX || this.renderer.getOffsetX();\n        offsetY = offsetY || this.renderer.getOffsetY();\n        x = x / zoom;\n        y = y / zoom;\n\n        // translate offset to canvas coordinates\n        let rect = this.renderer.getCanvas().getBoundingClientRect();\n\n        // x = (x / rect.width) * this.renderer.getWidth();\n        // y = (y / rect.height) * this.renderer.getHeight();\n\n        x = (x / rect.width) * 512;\n        y = (y / rect.height) * 512;\n\n        x = Math.round(x - offsetX);\n        y = Math.round(y - offsetY);\n\n        return { x: x, y: y };\n    }\n\n    translateCanvasToMouseCoordinates(x: number, y: number, zoom?: number, offsetX?: number, offsetY?: number) {\n        zoom = zoom || this.renderer.getZoom();\n        offsetX = offsetX || this.renderer.getOffsetX();\n        offsetY = offsetY || this.renderer.getOffsetY();\n        x = x + offsetX;\n        y = y + offsetY;\n        x = x * zoom;\n        y = y * zoom;\n\n        // translate offset to canvas coordinates\n        let rect = this.renderer.getCanvas().getBoundingClientRect();\n        x = Math.round((x / this.renderer.getWidth()) * rect.width);\n        y = Math.round((y / this.renderer.getHeight()) * rect.height);\n\n        return { x: x, y: y };\n    }\n}","import React from \"react\";\nimport { Renderer } from \"./renderer\";\nimport { ZoomHelper } from \"./zoomHelper\";\n\nexport interface Tool {\n    name: string;\n    getArgs(): any;\n    updateArgs(args: any): void;\n    onMouseDown(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>): void;\n    onMouseMove(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>): void;\n    onMouseUp(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>): void;\n    onMouseLeave(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>): void;\n\n    onTouchStart(event: React.TouchEvent<HTMLCanvasElement>): void;\n    onTouchMove(event: React.TouchEvent<HTMLCanvasElement>): void;\n    onTouchEnd(event: React.TouchEvent<HTMLCanvasElement>): void;\n\n    onKeyDown(event: KeyboardEvent): void;\n    onKeyUp(event: KeyboardEvent): void;\n    onWheel(event: WheelEvent): void;\n    destroy(): boolean;\n    onShowSelectionControls(listener: (show: boolean) => void): void;\n    select(direction: \"left\" | \"right\"): void;\n    onSaveImage(listener: (encodedImage: string) => void): void;\n}\n\nexport class BaseTool implements Tool {\n    saveListener?: (encodedImage: string, args?: any) => void = () => {};\n\n    private touchHandle: number | undefined;\n\n    readonly zoomHelper: ZoomHelper;\n\n    private _pinchZooming = false;\n    private _panning = false;\n\n    constructor(readonly renderer: Renderer, readonly name: string) {\n        this.zoomHelper = new ZoomHelper(renderer);\n    }\n\n    getArgs(): any {\n        return JSON.parse(\n            localStorage.getItem(`tool_args_${this.name}`) || \"{}\"\n        );\n    }\n    updateArgs(args: any) {\n        localStorage.setItem(`tool_args_${this.name}`, JSON.stringify(args));\n    }\n    onMouseDown(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        if (event.button === 1) {\n            this._panning = true;\n        }\n    }\n    onMouseMove(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        if (this._panning) {\n            this.zoomHelper.onPan(event);\n        }\n        let { x, y } = this.zoomHelper.translateMouseToCanvasCoordinates(\n            event.nativeEvent.offsetX,\n            event.nativeEvent.offsetY\n        );\n        this._updateCursor(x, y);\n    }\n\n    private _updateCursor(x: number, y: number) {\n        this.renderer.setCursor({\n            color: \"white\",\n            radius: 10,\n            type: \"crosshairs\",\n            x,\n            y,\n        });\n    }\n\n    onMouseUp(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        if (this._panning) {\n            this._panning = false;\n        }\n    }\n    onMouseLeave(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {}\n\n    onTouchStart(event: React.TouchEvent<HTMLCanvasElement>) {\n        if (this.touchHandle) {\n            window.clearTimeout(this.touchHandle);\n        }\n        const touches: React.Touch[] = [];\n        // make a deep copy so that the values live past the delay\n        for (let i = 0; i < event.touches.length; i++) {\n            const touch = event.touches[i];\n            touches.push({\n                identifier: touch.identifier,\n                clientX: touch.clientX,\n                clientY: touch.clientY,\n                pageX: touch.pageX,\n                pageY: touch.pageY,\n                screenX: touch.screenX,\n                screenY: touch.screenY,\n                target: null,\n            } as any);\n        }\n        event = {\n            touches,\n        } as any;\n        this.touchHandle = window.setTimeout(() => {\n            this.touchHandle = undefined;\n            if (event.touches.length === 2) {\n                this._pinchZooming = true;\n                this.zoomHelper.onTouchStart(event);\n            } else {\n                const rect = this.renderer.getCanvas().getBoundingClientRect();\n                const touch = event.touches[0];\n                if (touch) {\n                    this.onMouseDown({\n                        type: \"touch\",\n                        button: 0,\n                        nativeEvent: {\n                            offsetX: touch.clientX - rect.left,\n                            offsetY: touch.clientY - rect.top,\n                        },\n                    } as any);\n                }\n            }\n        }, 200);\n    }\n    onTouchMove(event: React.TouchEvent<HTMLCanvasElement>) {\n        if (event.touches.length === 2) {\n            this.zoomHelper.onTouchMove(event);\n        } else {\n            const rect = this.renderer.getCanvas().getBoundingClientRect();\n            const touch = event.touches[0];\n            if (touch) {\n                this.onMouseMove({\n                    type: \"touch\",\n                    button: 0,\n                    nativeEvent: {\n                        offsetX: touch.clientX - rect.left,\n                        offsetY: touch.clientY - rect.top,\n                    },\n                } as any);\n            }\n        }\n    }\n    onTouchEnd(event: React.TouchEvent<HTMLCanvasElement>) {\n        if (this._pinchZooming) {\n            this._pinchZooming = false;\n            this.zoomHelper.onTouchEnd(event);\n        } else {\n            this.onMouseUp({\n                button: 0,\n                type: \"touch\",\n            } as any);\n        }\n    }\n\n    onKeyDown(event: KeyboardEvent) {}\n    onKeyUp(event: KeyboardEvent) {}\n    onWheel(event: WheelEvent) {\n        this.zoomHelper.onWheel(event);\n    }\n    destroy(): boolean {\n        return true;\n    }\n    onShowSelectionControls(listener: (show: boolean) => void) {}\n    select(direction: \"left\" | \"right\") {}\n    onSaveImage(listener: (encodedImage: string) => void) {\n        this.saveListener = listener;\n    }\n}\n","import moment from \"moment\";\n\nimport { Image } from \"../client\";\n\nexport interface LocalImage extends Image {\n    imageData?: string;\n}\n\n/**\n * This class uses indexedDB to store images locally.\n */\nexport class LocalImagesStore {\n    private db: IDBDatabase | null = null;\n\n    init(): Promise<void> {\n        return new Promise((resolve, reject) => {\n            const request = indexedDB.open(\"aibrush\", 4);\n            request.onupgradeneeded = (evt) => {\n                const db = request.result;\n                // create object store if it doesn't exist\n                // const imagesStore = db.createObjectStore(\"images\", { keyPath: \"id\" });\n                let imagesStore: IDBObjectStore;\n                if (!db.objectStoreNames.contains(\"images\")) {\n                    imagesStore = db.createObjectStore(\"images\", {\n                        keyPath: \"id\",\n                    });\n                } else {\n                    imagesStore = request.transaction?.objectStore(\n                        \"images\"\n                    ) as IDBObjectStore;\n                }\n                imagesStore.createIndex(\"updated_at\", \"updated_at\", {\n                    unique: false,\n                });\n                imagesStore.createIndex(\"deleted_at\", \"deleted_at\", {\n                    unique: false,\n                });\n                console.log(\"Local images store updated\");\n            };\n            request.onsuccess = (_) => {\n                this.db = request.result;\n                console.log(\"Local images store initialized\");\n                resolve();\n            };\n            request.onerror = (evt) => {\n                console.error(\"error opening indexeddb\", evt);\n                reject(evt);\n            };\n        });\n    }\n\n    // migrate old images to new format\n    private hydrateImage(image: LocalImage): LocalImage {\n        if (!image) {\n            return image;\n        }\n        if (!image.params) {\n            const legacyImage = image as any;\n            image.params = {\n                prompt: legacyImage.phrases.join(\", \"),\n                negative_prompt: legacyImage.negative_phrases.join(\", \"),\n                width: legacyImage.width,\n                height: legacyImage.height,\n                denoising_strength: legacyImage.stable_diffusion_strength,\n                steps: legacyImage.iterations,\n            }\n        }\n        return image;\n    }\n\n    async getImage(id: string): Promise<LocalImage | null> {\n        if (!this.db) {\n            throw new Error(\"not initialized\");\n        }\n        const transaction = this.db.transaction([\"images\"]);\n        const store = transaction.objectStore(\"images\");\n        const request = store.get(id);\n        return new Promise((resolve, reject) => {\n            request.onsuccess = (evt) => {\n                resolve(this.hydrateImage(request.result));\n            };\n            request.onerror = (evt) => {\n                console.error(\"error getting image\", evt);\n                reject(evt);\n            };\n        });\n    }\n\n    async saveImage(image: LocalImage): Promise<void> {\n        if (!this.db) {\n            throw new Error(\"not initialized\");\n        }\n        await this.cleanupDeletedImages();\n        const transaction = this.db.transaction([\"images\"], \"readwrite\");\n        const store = transaction.objectStore(\"images\");\n        const request = store.put({\n            ...image,\n            updated_at: moment().valueOf(),\n        });\n        return new Promise((resolve, reject) => {\n            request.onsuccess = (evt) => {\n                resolve();\n            };\n            request.onerror = (evt) => {\n                console.error(\"error saving image\", evt);\n                reject(evt);\n            };\n        });\n    }\n\n    async hardDeleteImage(id: string): Promise<void> {\n        if (!this.db) {\n            throw new Error(\"not initialized\");\n        }\n        const transaction = this.db.transaction([\"images\"], \"readwrite\");\n        const store = transaction.objectStore(\"images\");\n        const request = store.delete(id);\n        return new Promise((resolve, reject) => {\n            request.onsuccess = (evt) => {\n                console.log(`image ${id} permanently deleted`);\n                resolve();\n            };\n            request.onerror = (evt) => {\n                console.error(\"error deleting image\", evt);\n                reject(evt);\n            };\n        });\n    }\n\n    async deleteImage(id: string): Promise<void> {\n        if (!this.db) {\n            throw new Error(\"not initialized\");\n        }\n        // fetch the image first. If it has a deletedAt timestamp already, or if it's not\n        // in \"completed\" state, hard delete it. Otherwise, set the deletedAt timestamp.\n        const image = await this.getImage(id);\n        if (!image) {\n            console.error(\"image not found\", id);\n            return;\n        }\n        if (image.deleted_at || image.status !== \"completed\") {\n            return this.hardDeleteImage(id);\n        }\n        const transaction = this.db.transaction([\"images\"], \"readwrite\");\n        const store = transaction.objectStore(\"images\");\n        const request = store.put({\n            ...image,\n            deleted_at: moment().valueOf(),\n        });\n        return new Promise((resolve, reject) => {\n            request.onsuccess = (evt) => {\n                resolve();\n            };\n            request.onerror = (evt) => {\n                console.error(\"error deleting image\", evt);\n                reject(evt);\n            };\n        });\n    }\n\n    async listImages(\n        updated_at: number,\n        direction: IDBCursorDirection,\n        count: number,\n        search: string\n    ): Promise<LocalImage[]> {\n        // use updated_at index\n        if (!this.db) {\n            throw new Error(\"not initialized\");\n        }\n        const transaction = this.db.transaction([\"images\"]);\n        const store = transaction.objectStore(\"images\");\n        const index = store.index(\"updated_at\");\n        const range =\n            direction == \"next\"\n                ? IDBKeyRange.lowerBound(updated_at)\n                : IDBKeyRange.upperBound(updated_at);\n        const request = index.openCursor(range, direction);\n        return new Promise((resolve, reject) => {\n            const images: LocalImage[] = [];\n            request.onsuccess = (evt) => {\n                const cursor = request.result;\n                if (cursor) {\n                    const image: LocalImage = this.hydrateImage(cursor.value);\n                    const prompt = (image.params.prompt || \"\").toLowerCase();\n                    if (\n                        !image.deleted_at &&\n                        (!search || prompt.includes(search.toLowerCase()))\n                    ) {\n                        images.push(image);\n                    }\n                    if (images.length < count) {\n                        cursor.continue();\n                    } else {\n                        resolve(images);\n                    }\n                } else {\n                    resolve(images);\n                }\n            };\n            request.onerror = (evt) => {\n                console.error(\"error listing images\", evt);\n                reject(evt);\n            };\n        });\n    }\n\n    async clearImages(): Promise<void> {\n        // clear from both indexes\n        if (!this.db) {\n            throw new Error(\"not initialized\");\n        }\n        const transaction = this.db.transaction([\"images\"], \"readwrite\");\n        const imagesStore = transaction.objectStore(\"images\");\n        const imagesRequest = imagesStore.clear();\n        return new Promise((resolve, reject) => {\n            imagesRequest.onsuccess = (evt) => {\n                resolve();\n            };\n            imagesRequest.onerror = (evt) => {\n                console.error(\"error clearing images\", evt);\n                reject(evt);\n            };\n        });\n    }\n\n    async getDeletedImages(olderThan?: number): Promise<LocalImage[]> {\n        if (!this.db) {\n            throw new Error(\"not initialized\");\n        }\n        // refactor to use deleted_at index\n        const transaction = this.db.transaction([\"images\"]);\n        const store = transaction.objectStore(\"images\");\n        const index = store.index(\"deleted_at\");\n        // const request = index.openCursor();\n        // get cursor for all deleted_at values\n        const request = index.openCursor(\n            olderThan\n                ? IDBKeyRange.upperBound(olderThan)\n                : IDBKeyRange.lowerBound(1),\n            olderThan ? \"prev\" : \"next\"\n        );\n        return new Promise((resolve, reject) => {\n            const images: LocalImage[] = [];\n            request.onsuccess = (evt) => {\n                const cursor = request.result;\n                if (cursor) {\n                    const image: LocalImage = cursor.value;\n                    if (images.length < 50 && image.deleted_at) {\n                        images.push(cursor.value);\n                    }\n                    cursor.continue();\n                } else {\n                    resolve(images);\n                }\n            };\n            request.onerror = (evt) => {\n                console.error(\"error listing images\", evt);\n                reject(evt);\n            };\n        });\n    }\n\n    async clearDeletedImages(): Promise<void> {\n        if (!this.db) {\n            throw new Error(\"not initialized\");\n        }\n        let deletedImages = await this.getDeletedImages();\n        while (deletedImages.length > 0) {\n            // hard delete all deleted images\n            const promises = deletedImages.map((image) => {\n                return this.hardDeleteImage(image.id);\n            });\n            await Promise.all(promises);\n            deletedImages = await this.getDeletedImages();\n        }\n    }\n\n    async cleanupDeletedImages(): Promise<void> {\n        // delete images that are more than 1 day old\n        let deletedImages = await this.getDeletedImages(\n            moment().subtract(1, \"hours\").valueOf()\n        );\n        while (deletedImages.length > 0) {\n            // hard delete all deleted images\n            const promises = deletedImages.map((image) => {\n                return this.hardDeleteImage(image.id);\n            });\n            await Promise.all(promises);\n            deletedImages = await this.getDeletedImages(\n                moment().subtract(1, \"hours\").valueOf()\n            );\n        }\n    }\n}\n","// Login react component with hooks\nimport React, { useState, FC } from \"react\";\nimport * as axios from \"axios\";\nimport qs from \"qs\";\nimport { AIBrushApi, LoginResult } from \"../client/api\";\n\nconsole.log(process.env)\nconst DISCORD_CLIENT_ID = \"1043951225944678490\";\n\ninterface LoginProps {\n    client: AIBrushApi;\n    onLogin: (loginResult: LoginResult) => void;\n}\n\nexport const Login: FC<LoginProps> = (props) => {\n    // login form accepts email only\n    const [email, setEmail] = useState(\"\");\n    const [emailSubmitted, setEmailSubmitted] = useState(false);\n    const [code, setCode] = useState(\"\");\n    const [err, setErr] = useState(\"\");\n\n    // check query string for invite_code\n    const query = window.location.search;\n    const queryParams = qs.parse(query.substring(1));\n    const inviteCode = queryParams[\"invite_code\"];\n\n    const onLogin = async () => {\n        // clear error\n        setErr(\"\");\n        // validate valid email\n        if (!email.match(/^[^@]+@[^@]+\\.[^@]+$/)) {\n            setErr(\"Invalid email address\");\n            return;\n        }\n\n        try {\n            await props.client.login({\n                email: email,\n                invite_code: inviteCode as string,\n            });\n            setEmailSubmitted(true);\n        } catch (err) {\n            console.error(err);\n            setErr(\"Could not login\");\n        }\n    };\n\n    const discordLink = () => {\n        // localhost url:\n        // https://discord.com/api/oauth2/authorize?client_id=1043951225944678490&redirect_uri=http%3A%2F%2Flocalhost%3A3001%2Fdiscord-login&response_type=code&scope=identify%20email\n        // prod url:\n        // https://discord.com/api/oauth2/authorize?client_id=1043951225944678490&redirect_uri=https%3A%2F%2Fwww.aibrush.art%2Fdiscord-login&response_type=code&scope=identify%20email\n        const host = window.location.host;\n        const protocol = window.location.protocol;\n        const redirectUri = `${protocol}//${host}/discord-login`;\n        const url = `https://discord.com/api/oauth2/authorize?client_id=${DISCORD_CLIENT_ID}&redirect_uri=${redirectUri}&response_type=code&scope=identify%20email`;\n        return url;\n    };\n\n    const onVerify = async () => {\n        // clear error\n        setErr(\"\");\n        // attempt to verify code\n        try {\n            const result = await props.client.verify({\n                email,\n                code,\n            });\n            props.onLogin(result.data);\n        } catch (err) {\n            console.error(err);\n            setErr(\"Failed to verify code\");\n        }\n    };\n\n    // bootstrap login form\n    return (\n        <>\n            <div\n                className=\"row\"\n                style={{\n                    height: \"100vh\",\n                    marginLeft: \"0px\",\n                    marginRight: \"0px\",\n                }}\n            >\n                <div className=\"col-md-6 login-splash\">\n                    {/* <div className=\"center-cropped\" style={{backgroundImage: \"url(/images/scifi-dreamland.png)\"}}></div> */}\n                    <img\n                        className=\"center-cropped\"\n                        src=\"/images/scifi-dreamland.png\"\n                    />\n                </div>\n                <div className=\"col-md-6\">\n                    <div\n                        style={{\n                            fontWeight: 500,\n                            fontSize: \"48px\",\n                            marginTop: \"200px\",\n                        }}\n                    >\n                        AiBrush\n                    </div>\n\n                    <div\n                        style={{\n                            marginLeft: \"10%\",\n                            marginRight: \"10%\",\n                            marginTop: \"88px\",\n                            marginBottom: \"24px\",\n                        }}\n                    >\n                        Login With Email\n                    </div>\n                    {/* Display error if one is set */}\n                    {/* Use <p class=\"text-danger\" */}\n                    {err && <p className=\"text-danger\">{err}</p>}\n                    {err && (\n                        <p className=\"text-info\">\n                            If you don't have an account yet, request one by\n                            sending an email to{\" \"}\n                            <a href=\"mailto:admin@aibrush.art\">\n                                admin@aibrush.art\n                            </a>\n                        </p>\n                    )}\n                    <div\n                        style={{\n                            marginLeft: \"10%\",\n                            marginRight: \"10%\",\n                            marginTop: \"24px\",\n                            textAlign: \"left\",\n                        }}\n                    >\n                        {/* If email submitted, show verify code form*/}\n                        {emailSubmitted && (\n                            <>\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"verifyCode\">\n                                        Verify Code\n                                    </label>\n                                    <input\n                                        type=\"text\"\n                                        className=\"form-control\"\n                                        id=\"verifyCode\"\n                                        placeholder=\"Verification Code\"\n                                        value={code}\n                                        onChange={(e) =>\n                                            setCode(e.target.value)\n                                        }\n                                    />\n                                </div>\n                                {/* Cancel verification and go back to email */}\n                                <button\n                                    className=\"btn btn-secondary\"\n                                    onClick={() => setEmailSubmitted(false)}\n                                >\n                                    Cancel\n                                </button>\n                                &nbsp;\n                                {/* Verify code */}\n                                <button\n                                    type=\"button\"\n                                    className=\"btn btn-primary\"\n                                    onClick={(e) => {\n                                        e.preventDefault();\n                                        onVerify();\n                                    }}\n                                >\n                                    Verify\n                                </button>\n                            </>\n                        )}\n                        {/* Else, show login form */}\n                        {!emailSubmitted && (\n                            <>\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"email\">Email address</label>\n                                    <input\n                                        type=\"email\"\n                                        className=\"form-control\"\n                                        id=\"email\"\n                                        aria-describedby=\"emailHelp\"\n                                        placeholder=\"Enter email\"\n                                        value={email}\n                                        onChange={(e) =>\n                                            setEmail(e.target.value.trim())\n                                        }\n                                    />\n                                </div>\n                                <button\n                                    type=\"button\"\n                                    className=\"btn btn-primary\"\n                                    style={{ float: \"right\" }}\n                                    onClick={(e) => {\n                                        e.preventDefault();\n                                        onLogin();\n                                    }}\n                                >\n                                    Login\n                                </button>\n                            </>\n                        )}\n                    </div>\n                    <div\n                        style={{\n                            marginLeft: \"10%\",\n                            marginRight: \"10%\",\n                            marginTop: \"88px\",\n                            marginBottom: \"24px\",\n                        }}\n                    >\n                        <hr/>\n                        OR\n                    </div>\n                    <div\n                        style={{\n                            marginLeft: \"10%\",\n                            marginRight: \"10%\",\n                            marginTop: \"24px\",\n                        }}\n                    >\n                        <a href={discordLink()} className=\"btn btn-primary\">\n                            <i className=\"fab fa-discord\"></i> Login With Discord\n                        </a>\n                    </div>\n                </div>\n            </div>\n        </>\n    );\n};\n","// Given a set of credentials, this component will refresh them\n// every 5 minutes and invoke the onCredentialsRefreshed callback\n\nimport React, { useEffect, FC } from \"react\"\nimport { LoginResult, AIBrushApi } from \"../client/api\";\n\ninterface TokenRefresherProps {\n    onCredentialsRefreshed: (loginResult: LoginResult) => void;\n    onCredentialsExpired: () => void;\n    api: AIBrushApi;\n    credentials: LoginResult;\n}\n\nexport const TokenRefresher : FC<TokenRefresherProps> = ({ onCredentialsRefreshed, onCredentialsExpired, api, credentials }) => {\n    useEffect(() => {\n        const interval = setInterval(() => {\n            if (credentials && credentials.refreshToken) {\n                api.refresh({refreshToken: credentials.refreshToken}).then(loginResult => {\n                    onCredentialsRefreshed(loginResult.data);\n                }).catch(() => {\n                    onCredentialsExpired();\n                });\n            }\n\n        }, 5 * 60 * 1000);\n        return () => {\n            clearInterval(interval);\n        };\n    }, [credentials, api, onCredentialsRefreshed]);\n    return <div></div>;\n}","import React, { FC, useEffect, useState } from 'react';\nimport { AIBrushApi } from \"../client/api\";\n\ninterface HealthcheckerProps {\n    api: AIBrushApi;\n}\n\nexport const Healthchecker: FC<HealthcheckerProps> = ({ api }) => {\n    // automatically check health every 5 seconds\n    const [healthCheck, setHealthCheck] = useState(true);\n    \n    useEffect(() => {\n        const interval = setInterval(() => {\n            api.healthcheck().then(() => setHealthCheck(true)).catch(() => setHealthCheck(false));\n        }, 5000);\n\n        return () => clearInterval(interval);\n    }, [api]);\n\n    // only display bootstrap danger alert if healthcheck failed\n    // \"service is unavailable\"\n    return (\n        <div className=\"alert alert-danger\" role=\"alert\" style={{ display: healthCheck ? 'none' : 'block' }}>\n            <strong>Looks like we're having some trouble reaching the server.</strong>\n        </div>\n    );\n}\n\n","import moment from \"moment\";\nimport React, { FC, useState, useEffect } from \"react\";\nimport { Modal } from \"react-bootstrap\";\nimport { AIBrushApi, Boost } from \"../../client\";\n\ninterface Props {\n    api: AIBrushApi;\n}\n\nexport const BoostList: FC<Props> = ({ api }) => {\n    const [boosts, setBoosts] = useState<Boost[]>([]);\n    const [email, setEmail] = useState<string>(\"\");\n    const [amount, setAmount] = useState<number>(0);\n    const [level, setLevel] = useState<number>(1);\n\n    const [showDeposit, setShowDeposit] = useState<boolean>(false);\n\n    function refresh() {\n        api.listBoosts().then((resp) => {\n            const boosts = resp.data.boosts || [];\n            setBoosts(boosts);\n        });\n    }\n\n    useEffect(() => {\n        refresh();\n    }, [api]);\n\n    const onDepositBoost = async () => {\n        await api.depositBoost(email, {\n            amount: amount * level * 1000 * 60 * 60,\n            level: level,\n        });\n        refresh();\n        setShowDeposit(false);\n    };\n\n    return (\n        <>\n            <h1>Active Boosts</h1>\n            <div className=\"row\">\n                <button\n                    className=\"btn btn-primary\"\n                    onClick={() => setShowDeposit(true)}\n                >\n                    <i className=\"fas fa-plus\" />\n                    &nbsp; Deposit Boost\n                </button>\n                &nbsp;\n                <button className=\"btn btn-primary\" onClick={refresh}>\n                    <i className=\"fas fa-sync\" />\n                    &nbsp; Refresh\n                </button>\n            </div>\n            <hr />\n            <div className=\"row\" style={{ marginTop: \"16px\" }}>\n                <table>\n                    <thead>\n                        <tr>\n                            <th>User</th>\n                            <th>Level</th>\n                            <th>Expires</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {boosts.map((boost) => (\n                            <tr key={boost.user_id}>\n                                <td>{boost.user_id}</td>\n                                <td>{boost.level}</td>\n                                <td>\n                                    {!boost.is_active && moment().add(boost.balance, \"milliseconds\").fromNow()}\n                                    {boost.is_active && moment(boost.activated_at + boost.balance).fromNow()}\n                                </td>\n                            </tr>\n                        ))}\n                    </tbody>\n                </table>\n            </div>\n            {showDeposit && (\n                <Modal show={showDeposit} onHide={() => setShowDeposit(false)}>\n                    <Modal.Header closeButton>\n                        <Modal.Title>Deposit Boost</Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body>\n                        {/* deposit controls */}\n                        <div className=\"form-group\">\n                            <label htmlFor=\"email\">Email</label>\n                            <input\n                                type=\"text\"\n                                className=\"form-control\"\n                                id=\"email\"\n                                value={email}\n                                onChange={(e) => setEmail(e.target.value)}\n                            />\n                        </div>\n                        <div className=\"form-group\">\n                            <label htmlFor=\"amount\">Amount</label>\n                            <input\n                                type=\"number\"\n                                className=\"form-control\"\n                                id=\"amount\"\n                                value={amount}\n                                onChange={(e) =>\n                                    setAmount(Number(e.target.value))\n                                }\n                                min={0.1}\n                                max={10}\n                                step={0.1}\n                            />\n                        </div>\n                        {/* level is a dropdown. 1=quick, 2=fast, 4=pro, 8=super */}\n                        <div className=\"form-group\">\n                            <label htmlFor=\"level\">Level</label>\n                            <select\n                                className=\"form-control\"\n                                id=\"level\"\n                                value={level}\n                                onChange={(e) =>\n                                    setLevel(parseInt(e.target.value))\n                                }\n                            >\n                                <option value={1}>Quick</option>\n                                <option value={2}>Fast</option>\n                                <option value={4}>Pro</option>\n                                <option value={8}>Super</option>\n                            </select>\n                        </div>\n                    </Modal.Body>\n                    <Modal.Footer>\n                        {/* cancel button */}\n                        <button\n                            type=\"button\"\n                            className=\"btn btn-secondary\"\n                            onClick={() => setShowDeposit(false)}\n                        >\n                            Cancel\n                        </button>\n                        &nbsp;\n                        <button\n                            type=\"button\"\n                            className=\"btn btn-primary\"\n                            onClick={onDepositBoost}\n                        >\n                            Deposit\n                        </button>\n                    </Modal.Footer>\n                </Modal>\n            )}\n        </>\n    );\n};\n","import { FC, useEffect, useState } from \"react\";\nimport { AIBrushApi } from \"../../client/api\";\nimport { WorkerSettings, WorkerSettingsJson } from \"../../lib/globalSettings\";\n\ninterface Props {\n    api: AIBrushApi;\n}\n\n// global settings all have a \"settings_key\" and \"settings_json\" field. settings_json is any.\n\n// default \"workers\" setting:\n// {\n//     \"minimum_worker_allocations\": {\n//         \"stable_diffusion\": 0,\n//         \"stable_diffusion_inpainting\": 0,\n//         \"swinir\": 0,\n//     }\n// }\n\nexport const GlobalSettings: FC<Props> = ({ api }) => {\n    const [workerSettings, setWorkerSettings] = useState<WorkerSettingsJson>({\n        minimum_worker_allocations: {\n            stable_diffusion: 0,\n            stable_diffusion_inpainting: 0,\n            swinir: 0,\n        },\n    });\n    const [saving, setSaving] = useState<boolean>(false);\n\n    const loadWorkerSettings = async () => {\n        const settings = await api.getGlobalSettings(\"workers\");\n        setWorkerSettings(settings.data.settings_json as any);\n    };\n\n    const saveWorkerSettings = async () => {\n        setSaving(true);\n        try {\n            await api.updateGlobalSettings(\"workers\", {\n                settings_json: workerSettings,\n            });\n        } finally {\n            setSaving(false);\n        }\n    };\n\n    useEffect(() => {\n        loadWorkerSettings();\n    }, []);\n\n    return (\n        <div style={{paddingBottom: \"48px\"}}>\n            {/* Header: Create new image */}\n            <div className=\"row\">\n                <div className=\"col-12\">\n                    <h1>Global Settings</h1>\n                </div>\n            </div>\n            {/* 50px vertical spacer */}\n            <div className=\"row\">\n                <div className=\"col-12\">\n                    <div className=\"spacer\" />\n                </div>\n            </div>\n            {/* slider from 0 to 10 for each model */}\n            <div className=\"row\">\n                <div className=\"col-12\">\n                    <label htmlFor=\"stable_diffusion\">\n                        stable_diffusion: {workerSettings.minimum_worker_allocations.stable_diffusion}\n                    </label>\n                    <input\n                        style={{marginLeft: \"16px\"}}\n                        type=\"range\"\n                        min={0}\n                        max={10}\n                        value={workerSettings.minimum_worker_allocations.stable_diffusion}\n                        className=\"form-range\"\n                        id=\"stable_diffusion\"\n                        onChange={(e) => {\n                            setWorkerSettings({\n                                ...workerSettings,\n                                minimum_worker_allocations: {\n                                    ...workerSettings.minimum_worker_allocations,\n                                    stable_diffusion: parseInt(e.target.value),\n                                },\n                            });\n                        }}\n                    />\n                </div>\n            </div>\n            <div className=\"row\">\n                <div className=\"col-12\">\n                    <label htmlFor=\"stable_diffusion_inpainting\">\n                        stable_diffusion_inpainting: {workerSettings.minimum_worker_allocations.stable_diffusion_inpainting}\n                    </label>\n                    <input\n                        style={{marginLeft: \"16px\"}}\n                        type=\"range\"\n                        min={0}\n                        max={10}\n                        value={workerSettings.minimum_worker_allocations.stable_diffusion_inpainting}\n                        className=\"form-range\"\n                        id=\"stable_diffusion_inpainting\"\n                        onChange={(e) => {\n                            setWorkerSettings({\n                                ...workerSettings,\n                                minimum_worker_allocations: {\n                                    ...workerSettings.minimum_worker_allocations,\n                                    stable_diffusion_inpainting: parseInt(e.target.value),\n                                },\n                            });\n                        }}\n                    />\n                </div>\n            </div>\n            <div className=\"row\">\n                <div className=\"col-12\">\n                    <label htmlFor=\"swinir\">\n                        swinir: {workerSettings.minimum_worker_allocations.swinir}\n                    </label>\n                    <input\n                        style={{marginLeft: \"16px\"}}\n                        type=\"range\"\n                        min={0}\n                        max={10}\n                        value={workerSettings.minimum_worker_allocations.swinir}\n                        className=\"form-range\"\n                        id=\"swinir\"\n                        onChange={(e) => {\n                            setWorkerSettings({\n                                ...workerSettings,\n                                minimum_worker_allocations: {\n                                    ...workerSettings.minimum_worker_allocations,\n                                    swinir: parseInt(e.target.value),\n                                },\n                            });\n                        }}\n                    />\n                </div>\n            </div>\n            \n            \n            {/* bottom row: save button */}\n            <div className=\"row\">\n                <div className=\"col-12\">\n                    <button className=\"btn btn-primary\" onClick={saveWorkerSettings} disabled={saving}>\n                        {saving ? <>\n                            <i className=\"fas fa-spinner fa-spin\" />\n                            &nbsp; Saving...\n                        </> : \"Save\"}\n                    </button>\n                </div>\n            </div>\n        </div>\n    );\n};","import React, { FC, useState, useEffect, useRef } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { AIBrushApi } from \"../../client/api\";\nimport { BoostList } from \"./BoostList\";\nimport { GlobalSettings } from \"./GlobalSettings\";\n\ninterface Props {\n    api: AIBrushApi;\n}\n\nexport const Admin: FC<Props> = ({ api }) => {\n    const [links, setLinks] = useState<string[]>([]);\n\n    const onGenerateLink = async () => {\n        const inviteCode = await api.createInviteCode();\n        setLinks([...links, `/?invite_code=${inviteCode.data.id}`]);\n    };\n\n    return (\n        <div style={{paddingBottom: \"48px\"}}>\n            {/* Header: Create new image */}\n            <div className=\"row\">\n                <div className=\"col-12\">\n                    <h1>Admin features</h1>\n                </div>\n            </div>\n            {/* 50px vertical spacer */}\n            <div className=\"row\">\n                <div className=\"col-12\">\n                    <div className=\"spacer\" />\n                </div>\n            </div>\n            {links.length > 0 && (\n                <div className=\"row\">\n                    <div className=\"col-12\">\n                        <p>Right click to copy invite links</p>\n                    </div>\n                </div>\n            )}\n            <div className=\"row\">\n                <div className=\"offset-lg-3 col-lg-6 col-sm-12\">\n                    {/* show a list of hyperlinks */}\n                    <div className=\"btn-group-vertical\">\n                        {links.map((link, i) => (\n                            <a key={i} href={link} className=\"btn btn-primary\">\n                                <i className=\"fas fa-link\" />\n                                &nbsp; Invite Link\n                            </a>\n                        ))}\n                    </div>\n                </div>\n            </div>\n            <div className=\"row\">\n                <div className=\"col-12\">\n                    <div className=\"spacer\" />\n                </div>\n            </div>\n            <div className=\"row\">\n                <div className=\"col-12\">\n                    {/* button to generate links */}\n                    <button\n                        className=\"btn btn-primary\"\n                        onClick={onGenerateLink}\n                    >\n                        Generate Link\n                    </button>\n                </div>\n            </div>\n            <hr />\n            <BoostList api={api} />\n            <hr />\n            <GlobalSettings api={api} />\n        </div>\n    );\n};\n","import React, { FC, useEffect, useState } from \"react\";\nimport { AIBrushApi, Image } from \"../client\";\nimport moment from \"moment\";\nimport { ImageThumbnail } from \"../components/ImageThumbnail\";\nimport { useHistory } from \"react-router-dom\";\nimport { BusyModal } from \"../components/BusyModal\";\n\ninterface Props {\n    api: AIBrushApi;\n    assetsUrl: string;\n}\n\nexport const DeletedImages: FC<Props> = ({ api, assetsUrl }) => {\n    const [images, setImages] = useState<Image[]>([]);\n    const [deleting, setDeleting] = useState(false);\n\n    const history = useHistory();\n\n    const loadImages = async () => {\n        const cursor = moment().add(-24, \"hours\").valueOf();\n        // TODO: special api call for deleted images?\n        const resp = await api.listImages(cursor, \"\", 100, \"asc\");\n        setImages(\n            (\n                resp.data.images?.filter((image) => !!image.deleted_at) || []\n            ).sort((a, b) => {\n                if (a.deleted_at && b.deleted_at) {\n                    return b.deleted_at - a.deleted_at;\n                }\n                return 0;\n            })\n        );\n    };\n\n    const onDeleteImage = async (image: Image) => {\n        setImages(images.filter((i) => i.id !== image.id));\n        await api.deleteImage(image.id);\n    };\n\n    const onDeleteAllImages = async () => {\n        setDeleting(true);\n        try {\n            await Promise.all(images.map((image) => api.deleteImage(image.id)));\n            setImages([]);\n        } finally {\n            setDeleting(false);\n        }\n    };\n\n    const onRestoreImage = async (image: Image) => {\n        setImages(images.filter((i) => i.id !== image.id));\n        await api.updateImage(image.id, { deleted_at: null });\n    };\n\n    useEffect(() => {\n        loadImages();\n    }, [api]);\n\n    return (\n        <div>\n            <div>\n                <div className=\"row\">\n                    <div className=\"col-12\">\n                        <h1 style={{ fontSize: \"40px\", textAlign: \"left\" }}>\n                            <i\n                                style={{ cursor: \"pointer\" }}\n                                onClick={() => history.goBack()}\n                                className=\"fas fa-chevron-left\"\n                            ></i>\n                            &nbsp; Deleted Images\n                        </h1>\n                        {/* float right \"delete all\" button */}\n                        <button\n                            className=\"btn btn-danger btn-sm image-popup-delete-button\"\n                            onClick={onDeleteAllImages}\n                            style={{\n                                float: \"right\",\n                                marginRight: \"8px\",\n                            }}\n                        >\n                            <i className=\"fa fa-trash\"></i>&nbsp;Delete All\n                        </button>\n                    </div>\n                </div>\n                <div className=\"row\" style={{ marginTop: \"32px\" }}>\n                    <div className=\"col-sm-2 offset-sm-2\">Image</div>\n                    <div className=\"col-sm-8\">Action</div>\n                </div>\n                {images.map((image) => (\n                    <div\n                        className=\"row\"\n                        style={{\n                            marginTop: \"16px\",\n                            borderBottom: \"1px solid #303030\",\n                        }}\n                        key={image.id}\n                    >\n                        <div className=\"col-sm-2 offset-sm-2\">\n                            <ImageThumbnail\n                                assetsUrl={assetsUrl}\n                                image={image}\n                                censorNSFW={true}\n                            />\n                        </div>\n                        <div\n                            className=\"col-sm-8\"\n                            style={{\n                                paddingTop: \"64px\",\n                                paddingBottom: \"64px\",\n                            }}\n                        >\n                            <button\n                                className=\"btn btn-danger btn-sm image-popup-delete-button\"\n                                onClick={() => onDeleteImage(image)}\n                                style={{\n                                    marginRight: \"8px\",\n                                }}\n                            >\n                                <i className=\"fa fa-trash\"></i>&nbsp;Delete\n                            </button>\n                            <button\n                                className=\"btn btn-primary btn-sm image-popup-restore-button\"\n                                onClick={() => onRestoreImage(image)}\n                            >\n                                <i className=\"fa fa-undo\"></i>&nbsp;Restore\n                            </button>\n                        </div>\n                    </div>\n                ))}\n            </div>\n            <BusyModal show={deleting} title=\"Deleting Images\">\n                Please wait while we delete all images...\n            </BusyModal>\n        </div>\n    );\n};\n","import React, { useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { AIBrushApi, LoginResult } from \"../client\";\n\ninterface LoginProps {\n    client: AIBrushApi;\n    onLogin: (loginResult: LoginResult) => void;\n}\n\nexport const DiscordLogin: React.FC<LoginProps> = ({client, onLogin}) => {\n    const history = useHistory();\n    const code = new URLSearchParams(window.location.search).get(\"code\");\n    \n    useEffect(() => {\n        if (code) {\n            console.log(\"logging in with code\", code);\n            client.discordLogin({code}).then((result) => {\n                console.log(\"login result\", result);\n                if (result.data.accessToken) {\n                    onLogin(result.data);\n                }\n                \n                history.push(\"/\");\n            });\n        } else {\n            history.push(\"/\");\n        }\n    }, [])\n\n    return null;\n}","import React, { FC, useEffect, useState } from \"react\";\nimport { AIBrushApi, Image } from \"../client\";\nimport moment from \"moment\";\nimport { ImageThumbnail } from \"../components/ImageThumbnail\";\nimport { useHistory } from \"react-router-dom\";\nimport { LocalImagesStore } from \"../lib/localImagesStore\";\nimport { BusyModal } from \"../components/BusyModal\";\n\ninterface Props {\n    localImages: LocalImagesStore;\n}\n\nexport const LocalDeletedImages: FC<Props> = ({ localImages }) => {\n    const [images, setImages] = useState<Image[]>([]);\n    const [deleting, setDeleting] = useState(false);\n\n    const history = useHistory();\n\n    const loadImages = async () => {\n        const deletedImages = await localImages.getDeletedImages();\n        setImages(deletedImages);\n    };\n\n    const onDeleteImage = async (image: Image) => {\n        setImages(images.filter((i) => i.id !== image.id));\n        await localImages.deleteImage(image.id);\n        if (images.length <= 5) {\n            loadImages();\n        }\n    };\n\n    const onDeleteAllImages = async () => {\n        setDeleting(true);\n        try {\n            await localImages.clearDeletedImages();\n            setImages([]);\n        } finally {\n            setDeleting(false);\n        }\n    };\n\n    const onRestoreImage = async (image: Image) => {\n        setImages(images.filter((i) => i.id !== image.id));\n        await localImages.saveImage({\n            ...image,\n            deleted_at: undefined,\n        });\n    };\n\n    useEffect(() => {\n        loadImages();\n    }, [localImages]);\n\n    return (\n        <div>\n            <div>\n                <div className=\"row\">\n                    <div className=\"col-12\">\n                        <h1 style={{ fontSize: \"40px\", textAlign: \"left\" }}>\n                            <i\n                                style={{ cursor: \"pointer\" }}\n                                onClick={() => history.goBack()}\n                                className=\"fas fa-chevron-left\"\n                            ></i>\n                            &nbsp; Deleted Images\n                        </h1>\n                        <button\n                            className=\"btn btn-danger btn-sm image-popup-delete-button\"\n                            onClick={onDeleteAllImages}\n                            style={{\n                                float: \"right\",\n                                marginRight: \"8px\",\n                            }}\n                        >\n                            <i className=\"fa fa-trash\"></i>&nbsp;Delete All\n                        </button>\n                    </div>\n                </div>\n                <div className=\"row\" style={{ marginTop: \"32px\" }}>\n                    <div className=\"col-sm-2 offset-sm-2\">Image</div>\n                    <div className=\"col-sm-8\">Action</div>\n                </div>\n                {images.map((image) => (\n                    <div\n                        className=\"row\"\n                        style={{\n                            marginTop: \"16px\",\n                            borderBottom: \"1px solid #303030\",\n                        }}\n                        key={image.id}\n                    >\n                        <div className=\"col-sm-2 offset-sm-2\">\n                            <ImageThumbnail\n                                assetsUrl={\"\"}\n                                image={image}\n                                censorNSFW={true}\n                            />\n                        </div>\n                        <div\n                            className=\"col-sm-8\"\n                            style={{\n                                paddingTop: \"64px\",\n                                paddingBottom: \"64px\",\n                            }}\n                        >\n                            <button\n                                className=\"btn btn-danger btn-sm image-popup-delete-button\"\n                                onClick={() => onDeleteImage(image)}\n                                style={{\n                                    marginRight: \"8px\",\n                                }}\n                            >\n                                <i className=\"fa fa-trash\"></i>&nbsp;Delete\n                            </button>\n                            <button\n                                className=\"btn btn-primary btn-sm image-popup-restore-button\"\n                                onClick={() => onRestoreImage(image)}\n                            >\n                                <i className=\"fa fa-undo\"></i>&nbsp;Restore\n                            </button>\n                        </div>\n                    </div>\n                ))}\n            </div>\n            <BusyModal show={deleting} title=\"Deleting Images\">\n                Please wait while we delete all images...\n            </BusyModal>\n        </div>\n    );\n};\n","export interface DBConfig {\n    dbName: string;\n    storeName: string;\n};\n\nexport class KVStore<T> {\n    private dbConfig: DBConfig;\n    private db: IDBDatabase | null = null;\n\n    constructor(dbConfig: DBConfig) {\n        this.dbConfig = dbConfig;\n    }\n\n    private async createDB(): Promise<IDBDatabase> {\n        return new Promise((resolve, reject) => {\n            const request = indexedDB.open(this.dbConfig.dbName);\n\n            request.onupgradeneeded = () => {\n                const db = request.result;\n                db.createObjectStore(this.dbConfig.storeName);\n            };\n\n            request.onsuccess = () => {\n                resolve(request.result);\n            };\n\n            request.onerror = () => {\n                reject(request.error);\n            };\n        });\n    }\n\n    private async getDB(): Promise<IDBDatabase> {\n        if (!this.db) {\n            this.db = await this.createDB();\n        }\n        return this.db;\n    }\n\n\n    async getItem(key: string): Promise<T | null> {\n        const db = await this.getDB();\n\n        return new Promise((resolve, reject) => {\n            const transaction = db.transaction(this.dbConfig.storeName);\n            const store = transaction.objectStore(this.dbConfig.storeName);\n            const request = store.get(key);\n\n            request.onsuccess = () => {\n                resolve(request.result);\n            };\n\n            request.onerror = () => {\n                resolve(null);\n            };\n        });\n    }\n\n    async setItem(key: string, value: T): Promise<void> {\n        const db = await this.getDB();\n\n        return new Promise((resolve, reject) => {\n            const transaction = db.transaction(\n                this.dbConfig.storeName,\n                \"readwrite\"\n            );\n            const store = transaction.objectStore(this.dbConfig.storeName);\n            const request = store.put(value, key);\n\n            request.onsuccess = () => {\n                resolve();\n            };\n\n            request.onerror = () => {\n                resolve();\n            };\n        });\n    }\n\n    async deleteItem(key: string): Promise<void> {\n        const db = await this.getDB();\n\n        return new Promise((resolve, reject) => {\n            const transaction = db.transaction(\n                this.dbConfig.storeName,\n                \"readwrite\"\n            );\n            const store = transaction.objectStore(this.dbConfig.storeName);\n            const request = store.delete(key);\n\n            request.onsuccess = () => {\n                resolve();\n            };\n\n            request.onerror = () => {\n                resolve();\n            };\n        });\n    }\n}\n","// V2 page\nimport React, { FC, useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport Dropdown from \"react-bootstrap/Dropdown\";\nimport { useParams, useHistory, Link } from \"react-router-dom\";\nimport moment from \"moment\";\nimport ScrollToTop from \"react-scroll-to-top\";\nimport { AIBrushApi } from \"../client\";\nimport { CreateImageInput, Image, StatusEnum, Boost } from \"../client/api\";\nimport { ImageThumbnail } from \"../components/ImageThumbnail\";\nimport { ImagePrompt, defaultArgs } from \"../components/ImagePrompt\";\nimport {\n    createEncodedThumbnail,\n    encodedImageToBlob,\n    uploadBlob,\n} from \"../lib/imageutil\";\n\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport { ImagePopup } from \"../components/ImagePopup\";\nimport { BusyModal } from \"../components/BusyModal\";\nimport { PendingImagesThumbnail } from \"../components/PendingImagesThumbnail\";\nimport { PendingImages } from \"../components/PendingImages\";\nimport {\n    ApiSocket,\n    NOTIFICATION_IMAGE_DELETED,\n    NOTIFICATION_IMAGE_UPDATED,\n} from \"../lib/apisocket\";\nimport { KVStore } from \"../lib/kvstore\";\nimport { ImagesCache } from \"../lib/imagesCache\";\n\ninterface Props {\n    api: AIBrushApi;\n    apiSocket: ApiSocket;\n    assetsUrl: string;\n}\n\nconst savedImagesCache = new ImagesCache();\n\nexport const SavedImagesPage: FC<Props> = ({ api, apiSocket, assetsUrl }) => {\n    const [creating, setCreating] = useState(false);\n    const [selectedImage, setSelectedImage] = useState<Image | null>(null);\n    const [parentImage, setParentImage] = useState<Image | null>(null);\n\n    const [showPendingImages, setShowPendingImages] = useState(false);\n\n    const [images, setImages] = useState<Array<Image>>([]);\n    const [err, setErr] = useState<string | null>(null);\n    const [hasMore, setHasMore] = useState<boolean>(true);\n    const [search, setSearch] = useState<string>(\"\");\n    const [searchDebounce, setSearchDebounce] = useState<string>(\"\");\n\n    const [bulkDeleteSelecting, setBulkDeleteSelecting] = useState(false);\n    const [bulkDeleting, setBulkDeleting] = useState(false);\n    const [bulkDeleteIds, setBulkDeleteIds] = useState<{\n        [key: string]: boolean;\n    }>({});\n\n    const [censorNSFW, setCensorNSFW] = useState(true);\n\n    const { id } = useParams<{ id?: string }>();\n    const history = useHistory();\n\n    useEffect(() => {\n        let handle = setTimeout(() => {\n            setSearch(searchDebounce);\n        }, 500);\n        return () => {\n            clearTimeout(handle);\n        };\n    }, [searchDebounce]);\n\n    useEffect(() => {\n        if (id) {\n            // check if the image is already loaded\n            const image = images.find((image) => image.id === id);\n            if (image) {\n                setSelectedImage(image);\n            }\n            // refresh\n            api.getImage(id).then((image) => {\n                setSelectedImage(image.data);\n            });\n        } else {\n            setSelectedImage(null);\n        }\n    }, [id]);\n\n    const onSubmit = async (input: CreateImageInput) => {\n        setCreating(true);\n        setParentImage(null);\n        setErr(null);\n        window.scrollTo(0, 0);\n        try {\n            await api.createImage(input);\n        } catch (e: any) {\n            console.error(e);\n            setErr(\"Error creating image\");\n        } finally {\n            setCreating(false);\n        }\n    };\n\n    const onEditNewImage = async (input: CreateImageInput) => {\n        setCreating(true);\n        setParentImage(null);\n        setErr(null);\n        window.scrollTo(0, 0);\n        try {\n            const encodedImage = input.encoded_image!;\n            const encodedThumbnail = await createEncodedThumbnail(encodedImage);\n            const newImages = await api.createImage({\n                ...input,\n                encoded_image: undefined,\n            });\n            if (newImages.data.images) {\n                const image = newImages.data.images![0];\n                const uploadUrls = await api.getImageUploadUrls(image.id);\n                // convert base64 encoded image to binary to upload as image/png with axios\n                const blob = encodedImageToBlob(encodedImage);\n                const thumbnailBlob = encodedImageToBlob(encodedThumbnail);\n                const imagePromise = uploadBlob(\n                    uploadUrls.data.image_url!,\n                    blob\n                );\n                const thumbnailPromise = uploadBlob(\n                    uploadUrls.data.thumbnail_url!,\n                    thumbnailBlob\n                );\n                await Promise.all([imagePromise, thumbnailPromise]);\n\n                history.push(`/image-editor/${image.id}`);\n            }\n        } catch (e: any) {\n            console.error(e);\n            setErr(\"Error creating image\");\n        } finally {\n            setCreating(false);\n        }\n    };\n\n    const onNSFW = (image: Image, nsfw: boolean) => {\n        api.updateImage(image.id, { nsfw }).then((res) => {\n            setImages((images) => {\n                return images.map((i) => {\n                    if (i.id === image.id) {\n                        return res.data;\n                    }\n                    return i;\n                });\n            });\n            setSelectedImage(res.data);\n        });\n    };\n\n    useEffect(() => {\n        if (!api) {\n            return;\n        }\n        const loadImages = async () => {\n            console.log(\"Initial load images\");\n            // clear error\n            setErr(null);\n            setHasMore(true);\n            try {\n                const cursor = moment().add(1, \"minutes\").valueOf();\n                // const resp = await api.listImages(cursor, search, 100, \"desc\");\n                const imagesResult = await savedImagesCache.listImages(\n                    api,\n                    cursor,\n                    search,\n                    100,\n                    \"desc\"\n                );\n                if (imagesResult) {\n                    console.log(\"Initial load images\", imagesResult.length);\n                    setImages(imagesResult.sort(sortImages));\n                }\n                return 0;\n            } catch (err) {\n                setErr(\"Could not load images\");\n                console.error(err);\n            }\n        };\n        loadImages();\n    }, [api, search]);\n\n    useEffect(() => {\n        if (!api) {\n            return;\n        }\n\n        const pollImages = async (images: Array<Image>) => {\n            // clear error\n            setErr(null);\n            // set cursor to max updated_at from images\n            const cursor = images.reduce((max, image) => {\n                return Math.max(max, image.updated_at);\n            }, 0);\n\n            try {\n                const imagesResult = await savedImagesCache.listImages(\n                    api,\n                    cursor + 1,\n                    search,\n                    100,\n                    \"asc\"\n                );\n                if (imagesResult) {\n                    let latestCursor = cursor;\n                    for (let image of imagesResult) {\n                        if (image.updated_at > latestCursor) {\n                            latestCursor = image.updated_at;\n                        }\n                    }\n\n                    // split resp.data.images into \"new\" and \"updated\" lists\n                    // image is \"new\" if it's not in images\n                    const newImages = imagesResult.filter((image) => {\n                        return images.findIndex((i) => i.id === image.id) < 0;\n                    });\n                    const updatedImages = imagesResult.filter((image) => {\n                        return images.findIndex((i) => i.id === image.id) >= 0;\n                    });\n                    setImages((images) => {\n                        const deletedIds: { [key: string]: boolean } = {};\n                        for (let image of newImages) {\n                            if (image.deleted_at) {\n                                deletedIds[image.id] = true;\n                                console.log(\n                                    `Deleting image ${image.id} from list`\n                                );\n                            }\n                        }\n                        for (let image of updatedImages) {\n                            if (image.deleted_at) {\n                                deletedIds[image.id] = true;\n                                console.log(\n                                    `Deleting image ${image.id} from list`\n                                );\n                            }\n                        }\n                        images = images.filter(\n                            (image) => !deletedIds[image.id]\n                        );\n                        return [\n                            ...images.map((image) => {\n                                const updatedImage = updatedImages.find(\n                                    (i) => i.id === image.id\n                                );\n                                if (updatedImage) {\n                                    return updatedImage;\n                                }\n                                return image;\n                            }),\n                            ...newImages.filter((image) => !image.deleted_at),\n                        ].sort(sortImages);\n                    });\n                }\n                return images;\n            } catch (err) {\n                setErr(\"Could not load images\");\n                console.error(err);\n            }\n        };\n\n        // polling is now a fallback for when the websocket connection fails\n        const timerHandle = setInterval(() => {\n            pollImages(images);\n        }, 60 * 1000);\n        return () => {\n            clearInterval(timerHandle);\n        };\n    }, [api, images, search]);\n\n    useEffect(() => {\n        // de-duplicate images by id\n        // first check if there are any duplicates\n        // I know, I should figure out where the duplicates are coming from,\n        // but I'm lazy.\n        const ids = images.map((image) => image.id);\n        const uniqueIds = new Set(ids);\n        if (ids.length !== uniqueIds.size) {\n            setImages((images) => {\n                // there are duplicates\n                const uniqueImages = images.filter((image, index) => {\n                    return ids.indexOf(image.id) === index;\n                });\n                return uniqueImages.sort(sortImages);\n            });\n        }\n    }, [images]);\n\n    useEffect(() => {\n        apiSocket.onMessage(async (message) => {\n            const payload = JSON.parse(message);\n            if (\n                payload.type === NOTIFICATION_IMAGE_UPDATED ||\n                payload.type === NOTIFICATION_IMAGE_DELETED\n            ) {\n                const updatedImage = await api.getImage(payload.id);\n                if (updatedImage.data.temporary) {\n                    return;\n                }\n                setImages((images) => {\n                    const index = images.findIndex(\n                        (image) => image.id === updatedImage.data.id\n                    );\n                    let updatedImages = images;\n                    if (index >= 0) {\n                        updatedImages = images.map((image) => {\n                            if (image.id === updatedImage.data.id) {\n                                return updatedImage.data;\n                            }\n                            return image;\n                        });\n                    } else {\n                        updatedImages = [...images, updatedImage.data];\n                    }\n                    return updatedImages.sort(sortImages);\n                });\n            }\n        });\n        return () => {\n            apiSocket.onMessage(undefined);\n        };\n    }, [apiSocket]);\n\n    const isPendingOrProcessing = (image: Image) => {\n        return (\n            image.status === StatusEnum.Pending ||\n            image.status === StatusEnum.Processing\n        );\n    };\n\n    const sortImages = (a: Image, b: Image) => {\n        // pending and processing images always come first\n        if (isPendingOrProcessing(a) && !isPendingOrProcessing(b)) {\n            return -1;\n        } else if (!isPendingOrProcessing(a) && isPendingOrProcessing(b)) {\n            return 1;\n        }\n        // if the parent is the same, sort by score descending\n        // otherwise, sort by updated_at\n        if (\n            a.parent === b.parent &&\n            a.params.prompt == b.params.prompt &&\n            a.status !== StatusEnum.Pending &&\n            b.status !== StatusEnum.Pending\n        ) {\n            // if the score is the same, sort by updated_at\n            let aScore = a.score;\n            let bScore = b.score;\n            // working around a bug where negative score was assigned\n            // for an empty negative prompt.\n            if (a.params.prompt!.trim() !== \"\") {\n                aScore = aScore - a.negative_score;\n            }\n            if (b.params.prompt!.trim() !== \"\") {\n                bScore = bScore - b.negative_score;\n            }\n            if (aScore == bScore) {\n                return b.updated_at - a.updated_at;\n            }\n            return bScore - aScore;\n        }\n\n        return b.updated_at - a.updated_at;\n    };\n\n    const onLoadMore = async () => {\n        // get the minimum updated_at from images\n        let minUpdatedAt = moment().valueOf();\n        images.forEach((image) => {\n            minUpdatedAt = Math.min(minUpdatedAt, image.updated_at);\n        });\n        // load images in descending order from updated_at\n        const imagesResult = await savedImagesCache.listImages(\n            api,\n            minUpdatedAt - 1,\n            search,\n            100,\n            \"desc\"\n        );\n        if (imagesResult && imagesResult.length > 0) {\n            // combine images with new images and sort by updated_at descending\n            setImages((images) =>\n                [...images, ...(imagesResult || [])].sort(sortImages)\n            );\n        } else {\n            setHasMore(false);\n        }\n    };\n\n    const onDelete = async (image: Image) => {\n        try {\n            await api.deleteImage(image.id);\n        } catch (e) {\n            console.error(e);\n            setErr(\"Error deleting image\");\n        }\n    };\n\n    const onFork = async (image: Image) => {\n        history.push({\n            pathname: \"/\",\n            search: `?parent=${image.id}`,\n        });\n    };\n\n    const onEdit = async (image: Image) => {\n        history.push(`/image-editor/${image.id}`);\n    };\n\n    const onThumbnailClicked = (image: Image) => {\n        // setSelectedImage(image);\n        if (bulkDeleteSelecting) {\n            setBulkDeleteIds({\n                ...bulkDeleteIds,\n                [image.id]: !bulkDeleteIds[image.id],\n            });\n        } else {\n            history.push(`/saved/${image.id}`);\n        }\n    };\n\n    const handleCancelFork = () => {\n        setParentImage(null);\n        window.scrollTo(0, 0);\n    };\n\n    const onConfirmBulkDelete = async () => {\n        try {\n            setBulkDeleting(true);\n            // await api.deleteImages(Object.keys(bulkDeleteIds));\n            const promises = Object.keys(bulkDeleteIds).map((id) => {\n                return api.deleteImage(id);\n            });\n            await Promise.all(promises);\n            setImages((images) => {\n                return images.filter((image) => !bulkDeleteIds[image.id]);\n            });\n            setBulkDeleteIds({});\n            setBulkDeleteSelecting(false);\n        } catch (e) {\n            console.error(e);\n            setErr(\"Error deleting images\");\n        } finally {\n            setBulkDeleting(false);\n        }\n    };\n\n    const completedOrSavedImages = images.filter((image) => {\n        return (\n            !image.deleted_at &&\n            (image.status === StatusEnum.Completed ||\n                image.status === StatusEnum.Saved)\n        );\n    });\n\n    const pendingOrProcessingImages = images.filter(\n        (image) =>\n            !image.deleted_at &&\n            (image.status === StatusEnum.Pending ||\n                image.status === StatusEnum.Processing)\n    );\n\n    const pendingImages = pendingOrProcessingImages.filter(\n        (image) => image.status === StatusEnum.Pending\n    );\n\n    const processingImages = pendingOrProcessingImages.filter(\n        (image) => image.status === StatusEnum.Processing\n    );\n\n    return (\n        <>\n            <h1 style={{ fontSize: \"40px\", textAlign: \"left\" }}>\n                Welcome to AiBrush - Saved\n            </h1>\n\n            <div\n                className=\"saved-images\"\n                style={{ marginTop: \"48px\", paddingBottom: \"48px\" }}\n            >\n                <div style={{ textAlign: \"left\" }}>\n                    <div\n                        className=\"input-group\"\n                        style={{ marginBottom: \"16px\" }}\n                    >\n                        <input\n                            style={{}}\n                            value={searchDebounce}\n                            type=\"search\"\n                            className=\"form-control image-search\"\n                            placeholder=\"Search...\"\n                            onChange={(e) => setSearchDebounce(e.target.value)}\n                        />\n\n                        <div\n                            style={{\n                                float: \"right\",\n                            }}\n                        >\n                            {!bulkDeleteSelecting && (\n                                <>\n                                    <button\n                                        style={{ display: \"inline\" }}\n                                        className=\"btn btn-primary image-popup-button\"\n                                        onClick={() =>\n                                            setCensorNSFW(!censorNSFW)\n                                        }\n                                    >\n                                        {!censorNSFW && (\n                                            <i className=\"fas fa-eye\"></i>\n                                        )}\n                                        {censorNSFW && (\n                                            <i className=\"fas fa-eye-slash\"></i>\n                                        )}\n                                    </button>\n                                    <Dropdown\n                                        style={{\n                                            display: \"inline\",\n                                            marginLeft: \"8px\",\n                                        }}\n                                    >\n                                        <Dropdown.Toggle variant=\"danger\">\n                                            <i className=\"fas fa-trash\"></i>\n                                        </Dropdown.Toggle>\n\n                                        <Dropdown.Menu>\n                                            <Dropdown.Item\n                                                onClick={() =>\n                                                    setBulkDeleteSelecting(true)\n                                                }\n                                            >\n                                                Bulk Delete\n                                            </Dropdown.Item>\n                                            <Dropdown.Item\n                                                onClick={() =>\n                                                    history.push(\n                                                        \"/deleted-images\"\n                                                    )\n                                                }\n                                            >\n                                                View Deleted Images\n                                            </Dropdown.Item>\n                                        </Dropdown.Menu>\n                                    </Dropdown>\n                                </>\n                            )}\n                            {bulkDeleteSelecting && (\n                                <>\n                                    <button\n                                        className=\"btn btn-primary image-popup-button\"\n                                        onClick={() => {\n                                            setBulkDeleteSelecting(false);\n                                            setBulkDeleteIds({});\n                                        }}\n                                    >\n                                        Cancel\n                                    </button>\n                                    <button\n                                        style={{ marginLeft: \"8px\" }}\n                                        className=\"btn image-popup-delete-button\"\n                                        onClick={() => {\n                                            onConfirmBulkDelete();\n                                        }}\n                                    >\n                                        Delete\n                                    </button>\n                                </>\n                            )}\n                        </div>\n                    </div>\n                </div>\n                <InfiniteScroll\n                    dataLength={images.length}\n                    next={onLoadMore}\n                    hasMore={hasMore}\n                    loader={\n                        <>\n                            <hr />\n                            <h4>Loading...</h4>\n                        </>\n                    }\n                >\n                    {pendingOrProcessingImages.length > 0 && (\n                        <PendingImagesThumbnail\n                            pendingCount={pendingImages.length}\n                            processingCount={processingImages.length}\n                            onClick={() => {\n                                setShowPendingImages(true);\n                            }}\n                        />\n                    )}\n                    {completedOrSavedImages.map((image) => (\n                        <ImageThumbnail\n                            key={image.id}\n                            image={image}\n                            assetsUrl={assetsUrl}\n                            onClick={onThumbnailClicked}\n                            bulkDelete={\n                                bulkDeleteSelecting && bulkDeleteIds[image.id]\n                            }\n                            censorNSFW={censorNSFW}\n                        />\n                    ))}\n                </InfiniteScroll>\n            </div>\n\n            {selectedImage && (\n                <ImagePopup\n                    assetsUrl={assetsUrl}\n                    image={selectedImage}\n                    onClose={() => history.push(\"/saved\")}\n                    onDelete={(image) => {\n                        onDelete(image);\n                        setImages(images.filter((i) => i.id !== image.id));\n                        history.push(\"/saved\");\n                    }}\n                    onFork={(image) => {\n                        onFork(image);\n                    }}\n                    onEdit={(image) => {\n                        onEdit(image);\n                    }}\n                    onNSFW={onNSFW}\n                    censorNSFW={censorNSFW}\n                />\n            )}\n            <ScrollToTop />\n            <BusyModal show={creating} title=\"Creating images\">\n                <p>Please wait while we create your image.</p>\n            </BusyModal>\n            <BusyModal show={bulkDeleting} title=\"Deleting images\">\n                <p>Please wait while we delete your images.</p>\n            </BusyModal>\n            <PendingImages\n                images={pendingOrProcessingImages}\n                onCancel={() => setShowPendingImages(false)}\n                show={showPendingImages}\n                onDeleteImage={(image) => {\n                    onDelete(image);\n                    setImages(images.filter((i) => i.id !== image.id));\n                }}\n            />\n        </>\n    );\n};\n","\n\n// const imagesCache = new KVStore({\n//     dbName: \"saved-images\",\n//     storeName: \"images\",\n// })\n\nimport { AIBrushApi, Image } from \"../client\";\nimport { KVStore } from \"./kvstore\";\n\nexport class ImagesCache {\n\n    private kvstore: KVStore<Image>;\n\n    constructor() {\n        this.kvstore = new KVStore<Image>({\n            dbName: \"saved-images\",\n            storeName: \"images\",\n        });\n    }\n\n    async listImages(api: AIBrushApi, cursor: number, search: string, limit: number, order: \"asc\" | \"desc\"): Promise<Image[] | undefined> {\n        const resp = await api.listImages(cursor, search, limit, order, \"id,updated_at,deleted_at\");\n        if (!resp.data.images) {\n            return undefined;\n        }\n\n        const result: Image[] = [];\n        const batchGetIds: string[] = [];\n        for (const image of resp.data.images) {\n            if (image.deleted_at) {\n                await this.kvstore.deleteItem(image.id);\n            } else {\n                const savedImage = await this.kvstore.getItem(image.id);\n                if (savedImage && savedImage.updated_at === image.updated_at) {\n                    result.push(savedImage);\n                } else {\n                    batchGetIds.push(image.id);\n                }\n            }\n        }\n        if (batchGetIds.length > 0) {\n            const batchResult = await api.batchGetImages(undefined, {\n                ids: batchGetIds,\n            });\n            if (batchResult.data.images) {\n                for (const image of batchResult.data.images) {\n                    await this.kvstore.setItem(image.id, image);\n                    result.push(image);\n                }\n            }\n        }\n        return result;\n    }\n}","import { useEffect, useState, FC } from \"react\";\nimport loadImage from \"blueimp-load-image\";\nimport {\n    splitImage,\n    mergeTiles,\n    SplitResult,\n    ImageUtilWorker,\n} from \"../lib/imageutil\";\nimport * as uuid from \"uuid\";\n\nexport const TestPage: FC = () => {\n    const [originalImage, setOriginalImage] = useState<string | undefined>();\n    const [upscaledImage, setUpscaledImage] = useState<string | undefined>();\n    const [imageWorker, setImageWorker] = useState<\n        ImageUtilWorker | undefined\n    >();\n\n    useEffect(() => {\n        const imageWorker = new ImageUtilWorker();\n        setImageWorker(imageWorker);\n        return () => {\n            imageWorker.destroy();\n        };\n    }, []);\n\n    const imageDataToCanvas = (imageData: ImageData): HTMLCanvasElement => {\n        const canvas = document.createElement(\"canvas\");\n        canvas.width = imageData.width;\n        canvas.height = imageData.height;\n        const ctx = canvas.getContext(\"2d\");\n        if (!ctx) {\n            throw new Error(\"Could not get canvas context\");\n        }\n        ctx.putImageData(imageData, 0, 0);\n        return canvas;\n    };\n\n    const upscaleImageData = (imageData: ImageData): HTMLCanvasElement => {\n        console.log(\"upscaling image data\", imageData.width, imageData.height);\n        const canvas = document.createElement(\"canvas\");\n        canvas.width = imageData.width * 2;\n        canvas.height = imageData.height * 2;\n        const ctx = canvas.getContext(\"2d\");\n        if (!ctx) {\n            throw new Error(\"Could not get canvas context\");\n        }\n        const image = imageDataToCanvas(imageData);\n        ctx.drawImage(image, 0, 0, canvas.width, canvas.height);\n        return canvas;\n    };\n\n    const onImageSelected = async (\n        event: React.ChangeEvent<HTMLInputElement>\n    ) => {\n        if (!imageWorker) {\n            throw new Error(\"Image worker not initialized\");\n        }\n        const files = event.target.files;\n        if (files && files.length > 0) {\n            loadImage(\n                files[0],\n                async (img) => {\n                    const c = img as HTMLCanvasElement;\n                    const originalImage = c.toDataURL(\"image/png\");\n                    setOriginalImage(originalImage);\n\n                    const ctx = c.getContext(\"2d\");\n                    if (ctx) {\n                        const originalImageData = ctx.getImageData(\n                            0,\n                            0,\n                            c.width,\n                            c.height\n                        );\n                        const splitResult = splitImage(originalImageData);\n                        if (!splitResult) {\n                            setUpscaledImage(originalImage);\n                            return;\n                        }\n                        console.log(\"splitResult\", {\n                            numTilesX: splitResult.numTilesX,\n                            numTilesY: splitResult.numTilesY,\n                            tileSize: splitResult.tileSize,\n                        });\n                        splitResult.tileSize *= 2;\n                        splitResult.imageWidth *= 2;\n                        splitResult.imageHeight *= 2;\n                        for (let x = 0; x < splitResult.numTilesX; x++) {\n                            for (let y = 0; y < splitResult.numTilesY; y++) {\n                                const tile = splitResult.tiles[x][y];\n                                const upscaledTile = upscaleImageData(tile);\n                                const upscaledImageData = upscaledTile\n                                .getContext(\"2d\")!\n                                .getImageData(\n                                    0,\n                                    0,\n                                    upscaledTile.width,\n                                    upscaledTile.height\n                                );\n                                const id = uuid.v4();\n                                const feathered =\n                                    await imageWorker.processRequest({\n                                        id,\n                                        alpha: false,\n                                        feather: true,\n                                        width: splitResult.imageWidth,\n                                        height: splitResult.imageHeight,\n                                        pixels: upscaledImageData.data,\n                                        selectionOverlay: {\n                                            x:\n                                                x *\n                                                (splitResult.tileSize - 64),\n                                            y:\n                                                y *\n                                                (splitResult.tileSize - 64),\n                                            width: upscaledTile.width,\n                                            height: upscaledTile.height,\n                                        },\n                                        upscale: true,\n                                        featherWidth: 64,\n                                    });\n\n                                splitResult.tiles[x][y] = new ImageData(feathered.pixels, upscaledTile.width, upscaledTile.height)\n                            }\n                        }\n                        const upscaledImageData = mergeTiles(splitResult);\n                        console.log(\n                            \"upscaled image data size\",\n                            upscaledImageData.width,\n                            upscaledImageData.height\n                        );\n                        const upscaledCanvas =\n                            imageDataToCanvas(upscaledImageData);\n                        const upscaledImage =\n                            upscaledCanvas.toDataURL(\"image/png\");\n                        setUpscaledImage(upscaledImage);\n                    }\n                },\n                { canvas: true }\n            );\n        }\n    };\n\n    return (\n        <div>\n            <input type=\"file\" onChange={onImageSelected} />\n            {originalImage && upscaledImage && (\n                <div>\n                    Original:\n                    <br />\n                    <img src={originalImage} />\n                    <br />\n                    Upscaled:\n                    <br />\n                    <img src={upscaledImage} />\n                </div>\n            )}\n        </div>\n    );\n};\n","import React, { useState, useEffect } from \"react\";\nimport * as axios from \"axios\";\nimport { BrowserRouter, Switch, Route, Link } from \"react-router-dom\";\nimport \"./App.css\";\nimport \"./bootstrap.min.css\";\nimport { AIBrushApi, LoginResult, FeatureList } from \"./client/api\";\nimport { LocalImagesStore } from \"./lib/localImagesStore\";\nimport { getConfig } from \"./config\";\nimport { Login } from \"./pages/Login\";\nimport { TokenRefresher } from \"./components/TokenRefresher\";\nimport { Healthchecker } from \"./components/Healthchecker\";\nimport { Admin } from \"./pages/admin/Admin\";\nimport { ImageEditor } from \"./pages/image-editor/ImageEditor\";\nimport { DeletedImages } from \"./pages/DeletedImages\";\n\n// V2 UI\nimport { Homepage } from \"./pages/Homepage\";\nimport { ApiSocket } from \"./lib/apisocket\";\nimport { DiscordLogin } from \"./pages/DiscordLogin\";\nimport { LocalDeletedImages } from \"./pages/LocalDeletedImages\";\nimport { SavedImagesPage } from \"./pages/SavedImagesPage\";\nimport { TestPage } from \"./pages/TestPage\";\n\nconst config = getConfig();\nconst httpClient = axios.default.create();\nconst client = new AIBrushApi(\n    undefined,\n    localStorage.getItem(\"apiUrl\") || config.apiUrl,\n    httpClient\n);\nconst apiSocket: ApiSocket = new ApiSocket();\nconst localImages = new LocalImagesStore();\n\nfunction updateHttpClient(loginResult: LoginResult) {\n    if (loginResult.accessToken) {\n        httpClient.defaults.headers.common[\n            \"Authorization\"\n        ] = `Bearer ${loginResult.accessToken}`;\n    }\n}\n\nfunction App() {\n    const [credentials, setCredentials] = useState<LoginResult | null>(null);\n    const [assetsUrl, setAssetsUrl] = useState<string>(\"/api/images\");\n    const [isAdmin, setIsAdmin] = useState<boolean>(false);\n    const [features, setFeatures] = useState<FeatureList | null>(null);\n\n    const onLogout = () => {\n        setCredentials(null);\n        localStorage.removeItem(\"credentials\");\n        httpClient.defaults.headers.common[\"Authorization\"] = undefined;\n    };\n\n    const init = async () => {\n        console.log(\"App.init\");\n        await localImages.init();\n        client\n            .getAssetsUrl()\n            .then((result) => setAssetsUrl(result.data.assets_url));\n        client.getFeatures().then((result) => setFeatures(result.data));\n        const storedCredentials = localStorage.getItem(\"credentials\");\n        if (storedCredentials) {\n            // attempt to refresh token\n            try {\n                const credentials = JSON.parse(\n                    storedCredentials\n                ) as LoginResult;\n                updateHttpClient(credentials);\n                const result = await client.refresh({\n                    refreshToken: credentials.refreshToken,\n                });\n                setCredentials(result.data);\n\n                // save to storage\n                localStorage.setItem(\n                    \"credentials\",\n                    JSON.stringify(result.data)\n                );\n                updateHttpClient(result.data);\n                const isAdmin = await client.isAdmin();\n                setIsAdmin(!!isAdmin.data.is_admin);\n                apiSocket.updateToken(result.data.accessToken!);\n                apiSocket.connect();\n            } catch (e) {\n                console.log(e);\n                localStorage.removeItem(\"credentials\");\n            }\n        }\n    };\n\n    const onLogin = async (credentials: LoginResult) => {\n        localStorage.setItem(\"credentials\", JSON.stringify(credentials));\n        setCredentials(credentials);\n        updateHttpClient(credentials);\n        apiSocket.updateToken(credentials.accessToken!);\n        apiSocket.connect();\n    };\n\n    const onCredentialsExpired = () => {\n        onLogout();\n    };\n\n    useEffect(() => {\n        init();\n    }, []);\n\n    return (\n        <div className=\"App\">\n            <TokenRefresher\n                api={client}\n                credentials={credentials as LoginResult}\n                onCredentialsRefreshed={onLogin}\n                onCredentialsExpired={onCredentialsExpired}\n            />\n            <Healthchecker api={client} />\n\n            <BrowserRouter>\n                {/* if credentials are not set, show Login component */}\n                {!credentials && (\n                    <Switch>\n                        <Route path=\"/\" exact={true}>\n                            <Login client={client} onLogin={onLogin} />\n                        </Route>\n                        <Route path=\"/discord-login\">\n                            <DiscordLogin client={client} onLogin={onLogin} />\n                        </Route>\n                        {/* fallback route is login page */}\n                        <Route path=\"*\">\n                            <Login client={client} onLogin={onLogin} />\n                        </Route>\n                    </Switch>\n                )}\n                {credentials && (\n                    <div className=\"container\">\n                        <div className=\"row\">\n                            <div className=\"col-lg-12\">\n                                {/* if credentials are set, show a bootstrap logout button a the far top right corner div */}\n                                {credentials && (\n                                    <>\n                                        <button\n                                            className=\"btn btn-primary top-button\"\n                                            onClick={() => onLogout()}\n                                        >\n                                            {/* font awesome logout icon */}\n                                            <i className=\"fas fa-sign-out-alt\"></i>\n                                        </button>\n                                        {/* saved images */}\n                                        <Link\n                                            className=\"btn btn-primary top-button\"\n                                            to=\"/saved\"\n                                        >\n                                            {/* font awesome save icon */}\n                                            <i className=\"fas fa-save\"></i>\n                                        </Link>\n                                        {/* home button */}\n                                        <Link\n                                            className=\"btn btn-primary top-button\"\n                                            to=\"/\"\n                                        >\n                                            {/* font awesome home icon */}\n                                            <i className=\"fas fa-home\"></i>\n                                        </Link>\n                                        {/* Link to discord */}\n                                        <a\n                                            className=\"btn btn-primary top-button\"\n                                            href=\"https://discord.gg/VPYyAJBkhC\"\n                                            target=\"_blank\"\n                                        >\n                                            {/* font awesome discord icon */}\n                                            <i className=\"fab fa-discord\"></i>\n                                        </a>\n                                        <Link\n                                            className=\"btn top-button pulse\"\n                                            to=\"/\"\n                                            style={{\n                                                width: \"47px\",\n                                            }}\n                                            onClick={() =>\n                                                alert(\"Coming soon!\")\n                                            }\n                                        >\n                                            {/* font awesome bolt icon */}\n                                            <i className=\"fas fa-bolt\"></i>\n                                        </Link>\n                                    </>\n                                )}\n                            </div>\n                        </div>\n\n                        {/* if credentials are set, show the rest of the app */}\n\n                        <Switch>\n                            <Route path=\"/\" exact={true}>\n                                {/* <MainMenu isAdmin={isAdmin} /> */}\n                                <Homepage\n                                    api={client}\n                                    apiSocket={apiSocket}\n                                    assetsUrl={assetsUrl}\n                                    localImages={localImages}\n                                />\n                            </Route>\n                            <Route path=\"/images/:id\">\n                                <Homepage\n                                    api={client}\n                                    apiSocket={apiSocket}\n                                    assetsUrl={assetsUrl}\n                                    localImages={localImages}\n                                />\n                            </Route>\n                            <Route path=\"/saved\" exact={true}>\n                                {/* <MainMenu isAdmin={isAdmin} /> */}\n                                <SavedImagesPage\n                                    api={client}\n                                    apiSocket={apiSocket}\n                                    assetsUrl={assetsUrl}\n                                />\n                            </Route>\n                            <Route path=\"/saved/:id\" exact={true}>\n                                {/* <MainMenu isAdmin={isAdmin} /> */}\n                                <SavedImagesPage\n                                    api={client}\n                                    apiSocket={apiSocket}\n                                    assetsUrl={assetsUrl}\n                                />\n                            </Route>\n                            <Route path=\"/image-editor/:id\">\n                                <ImageEditor\n                                    api={client}\n                                    apisocket={apiSocket}\n                                    assetsUrl={assetsUrl}\n                                    localImages={localImages}\n                                />\n                            </Route>\n                            <Route path=\"/deleted-images\">\n                                <DeletedImages\n                                    api={client}\n                                    assetsUrl={assetsUrl}\n                                />\n                            </Route>\n                            <Route path=\"/local-deleted-images\">\n                                <LocalDeletedImages\n                                    localImages={localImages}\n                                />\n                            </Route>\n                            <Route path=\"/testpage\">\n                                <TestPage />\n                            </Route>\n                            {isAdmin && (\n                                <>\n                                    <Route path=\"/admin\">\n                                        <Admin api={client} />\n                                    </Route>\n                                </>\n                            )}\n                        </Switch>\n                        <div\n                            // style={{ marginTop: \"100px\", padding: \"50px\" }}\n\n                            // use position:fixed to make the footer stick to the bottom of the page\n                            style={{\n                                position: \"fixed\",\n                                bottom: \"0\",\n                                left: \"0\",\n                                width: \"100%\",\n                                height: \"50px\",\n                                paddingTop: \"16px\",\n                                backgroundColor: \"#000000\",\n                            }}\n                        >\n                            {/* show external popout pages to terms and privacy policy, if they are present in the features */}\n                            {features && features.privacy_uri && (\n                                <a href={features.privacy_uri} target=\"_blank\">\n                                    Privacy Policy\n                                </a>\n                            )}\n                            {features && features.terms_uri && (\n                                <a\n                                    href={features.terms_uri}\n                                    target=\"_blank\"\n                                    style={{ marginLeft: \"20px\" }}\n                                >\n                                    Terms of Service\n                                </a>\n                            )}\n                            {/* link to mail to admin@aibrush.art */}\n                            <a\n                                href=\"mailto:admin@aibrush.art\"\n                                style={{ marginLeft: \"20px\" }}\n                            >\n                                Contact\n                            </a>\n                            <span style={{ float: \"right\", marginRight: \"50px\" }}>\n                                Powered by the{\" \"}\n                                <a\n                                    href=\"https://stablehorde.net/\"\n                                    target=\"_blank\"\n                                >\n                                    Stable Horde\n                                </a>\n                            </span>\n                        </div>\n                    </div>\n                )}\n            </BrowserRouter>\n        </div>\n    );\n}\n\nexport default App;\n","export interface Config {\n    apiUrl: string;\n}\n\nexport function getConfig(): Config {\n    // if (process.env.REACT_APP_ENV === \"prod\") {\n    //     return {\n    //         apiUrl: \"https://aibrush.ngrok.io\"\n    //     };\n    // } else if (process.env.REACT_APP_ENV === \"alt\") {\n    //     return {\n    //         apiUrl: \"\"\n    //     };\n    // } else {\n    //     return {\n    //         apiUrl: \"http://localhost:3000\"\n    //     };\n    // }\n    return {\n        apiUrl: \"\"\n    };\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","\nexport const NOTIFICATION_IMAGE_UPDATED = \"image_updated\";\nexport const NOTIFICATION_IMAGE_DELETED = \"image_deleted\";\nexport const NOTIFICATION_PENDING_IMAGE = \"pending_image\";\nexport const NOTIFICATION_BOOST_UPDATED = \"boost_updated\";\n\nexport class ApiSocket {\n    private client?: WebSocket;\n    private accessToken?: string\n    private messageListener?: (message: string) => void;\n\n    updateToken(accessToken: string) {\n        this.accessToken = accessToken;\n    }\n\n    onMessage(listener?: (message: string) => void) {\n        this.messageListener = listener;\n    }\n\n    connect() {\n        // if (!this.accessToken) {\n        //     throw new Error(\"unauthenticated\");\n        // }\n        // if (this.client) {\n        //     // will reconnect in one second automatically\n        //     // this is called every time the auth refreshes\n        //     this.client.close();\n        //     return;\n        // }\n        // let host = window.location.host;\n        // let protocol = \"wss\";\n        // if (host.includes(\"localhost\")) {\n        //   host = \"localhost:3000\";\n        //   protocol = \"ws\";\n        // }\n        // this.client = new WebSocket(`${protocol}://${host}`);\n        // this.client.onerror = err => console.error(err);\n        // this.client.onopen = () => {\n        //     console.log(\"websocket connected\");\n        //     this.client!.send(this.accessToken!);\n        // }\n        // this.client.onmessage = evt => {\n        //     console.log(\"server push\", evt.data);\n        //     if (this.messageListener) {\n        //         this.messageListener(evt.data as string);\n        //     }\n        // }\n        // this.client.onclose = () => {\n        //   console.log(\"websocket closed\");\n        //   this.client = undefined;\n        //   setTimeout(() => this.connect(), 1000);\n        // }\n    }\n}\n","import React, { FC, useEffect, useState } from \"react\";\nimport moment from \"moment\";\nimport { Image, StatusEnum } from \"../client/api\";\nimport { LocalImage } from \"../lib/localImagesStore\";\n\ninterface Props {\n    assetsUrl: string;\n    image: LocalImage;\n    censorNSFW: boolean;\n    bulkDelete?: boolean;\n    onClick?: (image: Image) => void;\n}\n\nexport const ImageThumbnail: FC<Props> = ({ assetsUrl, image, censorNSFW, bulkDelete, onClick }) => {\n    const src = `${assetsUrl}/${image.id}.thumbnail.png?updated_at=${image.updated_at}`;\n    const [retry, setRetry] = useState(\"\");\n\n    useEffect(() => {\n        // This is to help deal with eventual consistency from S3.\n        // if image.updated_at (unix timestamp in milliseconds) is less than a minute ago, try to reload the image\n        if (moment().diff(moment(image.updated_at), \"minutes\") < 1) {\n            setRetry(\"\");\n            const t = setTimeout(() => {\n                setRetry(\"&retry\")\n            }, 3000);\n            return () => clearTimeout(t);\n        }\n    }, [image.id, image.updated_at])\n\n    let label = image.label;\n    if (image.label === \"\") {\n        label = image.params.prompt || \"\";\n    }\n    \n    let className = \"image-thumbnail\";\n    if (bulkDelete) {\n        className += \" bulk-delete\";\n    }\n\n    let backgroundImage = `url(${src}${retry}), url(/images/default.png)`;\n    if (image.imageData) {\n        backgroundImage = `url(${image.imageData}), url(/images/default.png)`;\n    }\n\n    return (\n        <div\n            className={className}\n            style={{\n                backgroundImage,\n                backgroundRepeat: \"no-repeat\",\n                backgroundPosition: \"center\",\n                filter: (image.nsfw && censorNSFW) ? \"blur(8px)\" : undefined,\n            }}\n            onClick={() => onClick && onClick(image)}\n        >\n            {!bulkDelete && <div className=\"image-thumbnail-label\">\n                {label}\n            </div>}\n\n            {bulkDelete && <div className=\"image-thumbnail-label\">\n                <input type=\"checkbox\" style={{\n                    width: \"20px\",\n                    height: \"20px\",\n                    marginLeft: \"16px\",\n                    marginTop: \"16px\",\n                }} checked readOnly />\n            </div>}\n\n            {image.status === StatusEnum.Pending && <div className=\"image-thumbnail-pending\">\n                <i style={{marginTop: \"20px\"}} className=\"fa fa-hourglass-half\"></i>\n            </div>}\n            {\n                image.status === StatusEnum.Processing && <div className=\"image-thumbnail-pending\">\n                    <i style={{marginTop: \"20px\"}} className=\"fa fa-cog fa-spin\"></i>\n                </div>\n            }\n        </div>\n    );\n};\n","import { FC, useState, FormEvent } from \"react\";\nimport { Form, FormGroup, FormControl, FormText, FormCheck } from \"react-bootstrap\";\n\ninterface Props {\n    seed: string;\n    setSeed: (seed: string) => void;\n}\n\nexport const SeedInput: FC<Props> = ({seed, setSeed}) => {\n    const [useCustomSeed, setUseCustomSeed] = useState(false);\n\n    const onChangeCustomSeed = () => {\n        setUseCustomSeed(!useCustomSeed);\n        if (useCustomSeed) {\n            setSeed(\"\");\n        } else {\n            // set seed to a random number\n            setSeed(Math.floor(Math.random() * 1000000000).toString());\n        }\n    };\n\n    return (\n        <Form>\n            <FormGroup>\n                <FormCheck \n                    type=\"checkbox\"\n                    label=\"Use Custom Seed\"\n                    checked={useCustomSeed}\n                    onChange={(e) => onChangeCustomSeed()}\n                />\n            </FormGroup>\n\n            {useCustomSeed && (\n                <FormGroup>\n                    <FormControl\n                        type=\"text\"\n                        // value={seed}\n                        // onChange={(e) => setSeed(e.target.value)}\n                        placeholder=\"Enter seed\"\n                        value={seed}\n                        onChange={(e: any) => setSeed(e.target.value)}\n                    />\n                </FormGroup> \n            )}\n        </Form>\n    );\n};\n","import { FC, useEffect, useState } from \"react\";\nimport { ListGroup } from \"react-bootstrap\";\nimport { StableDiffusionModel } from \"../client\";\n\ninterface Props {\n    models: StableDiffusionModel[];\n    onSelectModel: (model: StableDiffusionModel) => void;\n    selectedModel: string;\n}\n\nexport const ModelList: FC<Props> = ({ models, onSelectModel, selectedModel }) => {\n    const [maxHeight, setMaxHeight] = useState(window.innerWidth < 576 ? window.innerHeight * 0.2 : window.innerHeight * 0.7); // Set maxHeight to 80% of the viewport height\n\n    useEffect(() => {\n        const handleResize = () => {\n            let maxHeight = window.innerHeight * 0.7;\n            if (window.innerWidth < 576) {\n                maxHeight = window.innerHeight * 0.2;\n            }\n            setMaxHeight(maxHeight); // Update maxHeight based on the current viewport height\n        };\n\n        window.addEventListener(\"resize\", handleResize);\n        return () => {\n            window.removeEventListener(\"resize\", handleResize);\n        };\n    }, []);\n\n    return (\n        <ListGroup\n            style={{\n                maxHeight: `${maxHeight}px`,\n                overflowY: \"auto\",\n            }}\n        >\n            {models.map((model) => (\n                <ListGroup.Item\n                    key={model.name}\n                    active={selectedModel === model.name}\n                    onClick={() => onSelectModel(model)}\n                    style={{\n                        cursor: \"pointer\",\n                    }}\n                >\n                    {model.name}\n                </ListGroup.Item>\n            ))}\n        </ListGroup>\n    );\n};\n","import { useState, useEffect } from \"react\";\n\nexport class SimpleCache {\n    private storage: Storage;\n\n    constructor() {\n        this.storage = window.localStorage;\n    }\n\n    setItem(key: string, value: any, ttl = 60 * 60) {\n        const item: {\n            value: any;\n            expiry: number;\n        } = {\n            value,\n            expiry: Date.now() + ttl * 1000,\n        };\n        this.storage.setItem(key, JSON.stringify(item));\n    }\n\n    getItem(key: string): any {\n        try {\n            const itemStr = this.storage.getItem(key);\n            if (!itemStr) {\n                return null;\n            }\n    \n            const item: {\n                value: any;\n                expiry: number;\n            } = JSON.parse(itemStr);\n            if (Date.now() > item.expiry) {\n                this.storage.removeItem(key);\n                return null;\n            }\n            return item.value;\n        } catch (error) {\n            console.error(error);\n            return null;\n        }\n    }\n\n    removeItem(key: string) {\n        this.storage.removeItem(key);\n    }\n\n    clear() {\n        this.storage.clear();\n    }\n}\n\nconst cache = new SimpleCache();\n\nexport function useCache<T>(key: string, initialValue: T): [T, React.Dispatch<React.SetStateAction<T>>] {\n  const [value, setValue] = useState<T>(() => {\n    const cachedValue = cache.getItem(key);\n    return cachedValue !== null ? cachedValue : initialValue;\n  });\n\n  useEffect(() => {\n    cache.setItem(key, value);\n  }, [key, value]);\n\n  return [value, setValue];\n}\n","import React, { useEffect, useState } from \"react\";\nimport { Button, Modal, Form, ListGroup, Row, Col } from \"react-bootstrap\";\nimport axios from \"axios\";\nimport { AIBrushApi, StableDiffusionModel } from \"../client\";\nimport { ModelList } from \"./ModelList\";\nimport { useCache } from \"../lib/localcache\";\n\nconst httpclient = axios.create();\n\ninterface ModelSelectorProps {\n    api: AIBrushApi;\n    initialSelectedModel: string;\n    onSelectModel: (model: string) => void;\n    onCancel: () => void;\n}\n\nconst ModelSelector: React.FC<ModelSelectorProps> = ({\n    api,\n    initialSelectedModel,\n    onSelectModel,\n    onCancel,\n}) => {\n    const [models, setModels] = useCache<StableDiffusionModel[]>(\"models\", []);\n    const [selectedModel, setSelectedModel] = useState<StableDiffusionModel | null>(null);\n    const [searchTerm, setSearchTerm] = useState(\"\");\n\n    const filteredModels = models.filter((model) =>\n        model.name.toLowerCase().includes(searchTerm.toLowerCase())\n    );\n\n    const handleSelect = () => {\n        console.log(\"Selected model:\", selectedModel);\n        if (selectedModel) {\n            onSelectModel(selectedModel.name);\n        }\n    };\n\n    const handleSearch = (e: React.ChangeEvent<HTMLInputElement>) => {\n        setSearchTerm(e.target.value);\n    };\n\n    const handleModelClick = (model: StableDiffusionModel) => {\n        setSelectedModel(model);\n    };\n\n    useEffect(() => {\n        if (!models || models.length === 0) {\n            api.getModels().then((res) => {\n                console.log(res);\n                setModels(Object.values(res.data));\n                setSelectedModel(\n                    res.data[initialSelectedModel] || Object.values(res.data)[0]\n                );\n            });\n        } else {\n            setSelectedModel(\n                models.find((model) => model.name === initialSelectedModel) ||\n                    models[0]\n            );\n        }\n        \n    }, [api, models]);\n\n    return (\n        <>\n            <Modal show={true} onHide={onCancel} size=\"xl\">\n                <Modal.Header closeButton>\n                    <Modal.Title>Select Model</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <Form.Control\n                        type=\"text\"\n                        placeholder=\"Search\"\n                        value={searchTerm}\n                        onChange={handleSearch}\n                    />\n                    <Row className=\"mt-3\">\n                        <Col sm={4}>\n                            <ModelList\n                                models={filteredModels}\n                                onSelectModel={handleModelClick}\n                                selectedModel={selectedModel?.name || \"\"}\n                            />\n                        </Col>\n                        <Col sm={8}>\n                            {selectedModel && (\n                                <>\n                                    <h5>{selectedModel.name}</h5>\n                                    <p>{selectedModel.description}</p>\n                                    {selectedModel.showcases && selectedModel.showcases.length > 0 && (\n                                        <img\n                                            src={selectedModel.showcases[0]}\n                                            alt=\"Showcase\"\n                                            style={{\n                                                width: \"100%\",\n                                            }}\n                                        />\n                                    )}\n                                </>\n                            )}\n                        </Col>\n                    </Row>\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button variant=\"secondary\" onClick={onCancel}>\n                        Cancel\n                    </Button>\n                    <Button\n                        variant=\"primary\"\n                        onClick={handleSelect}\n                        disabled={!selectedModel}\n                    >\n                        Select\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n        </>\n    );\n};\n\nexport default ModelSelector;\n","import React, { FC, useEffect, useState } from \"react\";\nimport { CreateImageInput, StatusEnum, Image, AIBrushApi } from \"../client\";\nimport {\n    aspectRatios,\n    DEFAULT_ASPECT_RATIO,\n    getClosestAspectRatio,\n    upscale,\n    compareSize,\n    AspectRatio,\n} from \"../lib/aspecRatios\";\nimport loadImage from \"blueimp-load-image\";\nimport { AspectRatioSelector } from \"./AspectRatioSelector\";\nimport { getUpscaleLevel } from \"../lib/upscale\";\nimport { resizeEncodedImage } from \"../lib/imageutil\";\nimport { LocalImage } from \"../lib/localImagesStore\";\nimport { controlnetTypes, supportedModels } from \"../lib/supportedModels\";\nimport { SeedInput } from \"./SeedInput\";\nimport ModelSelector from \"./ModelSelector\";\n\ninterface Props {\n    api: AIBrushApi;\n    parent: LocalImage | null;\n    creating: boolean;\n    assetsUrl: string;\n    onSubmit: (input: CreateImageInput) => void;\n    // go straight to editor without variations\n    onEdit: (input: CreateImageInput) => void;\n    onCancel: () => void;\n}\n\nexport function defaultArgs(): CreateImageInput {\n    return {\n        params: {\n            prompt: \"a painting of a happy corgi wearing sunglasses\",\n            negative_prompt: defaultNegativePrompt,\n            width: 512,\n            height: 512,\n            steps: 20,\n            denoising_strength: 0.75,\n        },\n        label: \"\",\n        encoded_image: \"\",\n        encoded_mask: \"\",\n        model: \"Epic Diffusion\",\n        count: 4,\n    };\n}\n\nconst defaultNegativePrompt =\n    \"low quality, distorted, deformed, dull, boring, plain, ugly, noise\";\n\nexport const ImagePrompt: FC<Props> = ({\n    api,\n    parent,\n    creating,\n    assetsUrl,\n    onSubmit,\n    onCancel,\n    onEdit,\n}) => {\n    const [prompt, setPrompt] = useState<string>(\"\");\n    const [negativePrompt, setNegativePrompt] = useState<string>(\n        defaultNegativePrompt\n    );\n    const [count, setCount] = useState<number>(4);\n    const [variationStrength, setVariationStrength] = useState<number>(0.75);\n    const [aspectRatio, setAspectRatio] =\n        useState<number>(DEFAULT_ASPECT_RATIO);\n    const [parentId, setParentId] = useState<string | null>(null);\n    const [advancedView, setAdvancedView] = useState<boolean>(false);\n    const [encodedImage, setEncodedImage] = useState<string>(\"\");\n    const [model, setModel] = useState<string>(\"Epic Diffusion\");\n\n    const [selectingModel, setSelectingModel] = useState<boolean>(false);\n\n    const [controlnetType, setControlnetType] = useState<string | undefined>();\n    const [cfgScale, setCfgScale] = useState<number>(7.5);\n    const [seed, setSeed] = useState<string>(\"\");\n    const defaultAspectRatio = aspectRatios[DEFAULT_ASPECT_RATIO];\n\n    const [aspectRatioDetails, setAspectRatioDetails] = useState<AspectRatio>(\n        aspectRatios[DEFAULT_ASPECT_RATIO]\n    );\n    let [originalWidth, setOriginalWidth] = useState<number>(\n        defaultAspectRatio.width\n    );\n    let [originalHeight, setOriginalHeight] = useState<number>(\n        defaultAspectRatio.height\n    );\n\n    // const aspectRatioDetails = aspectRatios[aspectRatio];\n\n    const resetState = () => {\n        setPrompt(\"\");\n        setNegativePrompt(defaultNegativePrompt);\n        setCount(4);\n        setAdvancedView(false);\n        setParentId(null);\n        setVariationStrength(0.75);\n        setAspectRatio(DEFAULT_ASPECT_RATIO);\n        setAspectRatioDetails(aspectRatios[DEFAULT_ASPECT_RATIO]);\n        setEncodedImage(\"\");\n        setCfgScale(7.5);\n        setSeed(\"\");\n    };\n\n    const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\n        e.preventDefault();\n        const args = defaultArgs();\n        args.params.prompt = prompt || \"\";\n        args.params.negative_prompt = negativePrompt || \"\";\n        args.count = seed ? 1 : count;\n        args.parent = parentId || undefined;\n        args.params.denoising_strength = variationStrength;\n        args.nsfw = true;\n        args.model = model;\n        args.temporary = true;\n        args.params.controlnet_type = controlnetType as any;\n        args.params.cfg_scale = cfgScale;\n        args.params.seed = seed || undefined;\n        if (parent) {\n            const bestMatch = getClosestAspectRatio(\n                parent.params.width!,\n                parent.params.height!\n            );\n            args.params.width = bestMatch.width;\n            args.params.height = bestMatch.height;\n        } else {\n            const bestMatch = getClosestAspectRatio(\n                aspectRatioDetails.width,\n                aspectRatioDetails.height\n            );\n            args.params.width = bestMatch.width;\n            args.params.height = bestMatch.height;\n        }\n        if (encodedImage) {\n            args.encoded_image = await resizeEncodedImage(\n                encodedImage,\n                args.params.width,\n                args.params.height\n            );\n        }\n\n        resetState();\n        onSubmit(args);\n    };\n\n    const handleEdit = () => {\n        if (!encodedImage) {\n            console.error(\"Cannot edit without existing image\");\n            return;\n        }\n        const args = defaultArgs();\n        args.params.prompt = prompt || \"\";\n        args.params.negative_prompt = negativePrompt || \"\";\n        args.count = 1;\n        args.parent = parentId || undefined;\n        // args.stable_diffusion_strength = variationStrength;\n        args.params.denoising_strength = variationStrength;\n        args.status = StatusEnum.Completed;\n        args.params.width = originalWidth;\n        args.params.height = originalHeight;\n        args.params.cfg_scale = cfgScale;\n        args.nsfw = true;\n        args.model = model;\n        if (encodedImage) {\n            args.encoded_image = encodedImage;\n        }\n\n        resetState();\n        onEdit(args);\n    };\n\n    const handleCancel = () => {\n        resetState();\n        onCancel();\n    };\n\n    const onSelectModel = (model: string) => {\n        setModel(model);\n        setSelectingModel(false);\n    };\n\n    const onImageSelected = async (e: React.ChangeEvent<HTMLInputElement>) => {\n        const file = e.target.files && e.target.files[0];\n        if (!file) {\n            return;\n        }\n        loadImage(\n            file,\n            (img: Event | HTMLImageElement | HTMLCanvasElement) => {\n                if (!(img instanceof HTMLCanvasElement)) {\n                    return;\n                }\n                // try to match width and height to a supported aspect ratio\n                const width = img.width;\n                const height = img.height;\n                let bestMatch = getClosestAspectRatio(width, height);\n                while (compareSize(upscale(bestMatch), width, height) <= 0) {\n                    bestMatch = upscale(bestMatch);\n                    if (\n                        getUpscaleLevel(bestMatch.width, bestMatch.height) >= 2\n                    ) {\n                        break;\n                    }\n                }\n                console.log(\"best match\", bestMatch);\n\n                const canvas = document.createElement(\"canvas\");\n                // canvas.width = bestMatch.width;\n                // canvas.height = bestMatch.height;\n                canvas.width = width;\n                canvas.height = height;\n                const ctx = canvas.getContext(\"2d\");\n                if (!ctx) {\n                    return;\n                }\n                ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n\n                // convert image to base64\n                // const canvas = img as HTMLCanvasElement\n                const dataUrl = canvas.toDataURL(\"image/png\");\n                const base64 = dataUrl.split(\",\")[1];\n                setEncodedImage(base64);\n                // get the index of the best match\n                setAspectRatio(\n                    aspectRatios.findIndex((a) => a.id === bestMatch.id)\n                );\n                setAspectRatioDetails(bestMatch);\n                setOriginalWidth(width);\n                setOriginalHeight(height);\n                // remove canvas\n                canvas.remove();\n            },\n            {\n                maxWidth: 4096,\n                maxHeight: 4096,\n                canvas: true,\n            }\n        );\n    };\n\n    useEffect(() => {\n        if (parent) {\n            const imageData = parent.imageData;\n            if (imageData) {\n                setEncodedImage(imageData.split(\",\")[1]);\n            }\n            setPrompt(parent.params.prompt || \"\");\n            setNegativePrompt(\n                parent.params.negative_prompt || defaultNegativePrompt\n            );\n            setCount(4);\n            setParentId(parent.id);\n            setAdvancedView(true);\n            setVariationStrength(parent.params.denoising_strength || 0.75);\n            setModel(\n                supportedModels.indexOf(parent.model) > -1\n                    ? parent.model\n                    : \"Epic Diffusion\"\n            );\n            setCfgScale(parent.params.cfg_scale || 7.5);\n        } else {\n            resetState();\n        }\n    }, [parent]);\n\n    // unset controlnet when encodedImage is null\n    useEffect(() => {\n        if (!encodedImage) {\n            setControlnetType(undefined);\n        }\n    }, [encodedImage]);\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <div className=\"homepage-prompt\">\n                <div className=\"input-group\">\n                    <input\n                        className=\"form-control\"\n                        placeholder=\"What would you like to create?\"\n                        value={prompt}\n                        onChange={(e) => setPrompt(e.target.value)}\n                    />\n\n                    <div className=\"input-group-append\">\n                        <button\n                            type=\"submit\"\n                            className=\"btn btn-secondary light-button\"\n                            style={{ marginLeft: \"8px\" }}\n                            disabled={!prompt || creating}\n                        >\n                            {/* paintbrush button */}\n                            {!creating && (\n                                <i className=\"fas fa-paint-brush\"></i>\n                            )}\n                            {/* spinner button */}\n                            {creating && (\n                                <i className=\"fas fa-spinner fa-spin\"></i>\n                            )}\n                        </button>\n                    </div>\n                </div>\n                <div\n                    style={{\n                        marginTop: \"24px\",\n                    }}\n                >\n                    <a\n                        href=\"javascript:void(0)\"\n                        onClick={() => setAdvancedView(!advancedView)}\n                        style={{\n                            color: \"white\",\n                            textDecoration: \"underline\",\n                        }}\n                    >\n                        Advanced\n                    </a>\n                    &nbsp;\n                    {advancedView ? (\n                        <i className=\"fas fa-chevron-up\"></i>\n                    ) : (\n                        <i className=\"fas fa-chevron-down\"></i>\n                    )}\n                </div>\n                {advancedView && (\n                    <div className=\"homepage-prompt-advanced\">\n                        {encodedImage && (\n                            <div className=\"form-group\">\n                                <label>Init Image</label>\n                                <img\n                                    style={{\n                                        display: \"block\",\n                                        marginLeft: \"auto\",\n                                        marginRight: \"auto\",\n                                        maxWidth: \"100%\",\n                                    }}\n                                    src={`data:image/png;base64,${encodedImage}`}\n                                />\n                            </div>\n                        )}\n                        {!parent && !encodedImage && (\n                            <AspectRatioSelector\n                                aspectRatio={aspectRatio}\n                                onChange={(aspectRatioId) => {\n                                    setAspectRatio(aspectRatioId);\n                                    setAspectRatioDetails(\n                                        aspectRatios[aspectRatioId]\n                                    );\n                                }}\n                            />\n                        )}\n                        <div className=\"form-group\">\n                            <div\n                                style={{\n                                    display: \"block\",\n                                    maxWidth: encodedImage ? \"350px\" : \"180px\",\n                                    marginTop: \"40px\",\n                                    marginRight: \"auto\",\n                                    marginLeft: \"auto\",\n                                }}\n                            >\n                                <label\n                                    id=\"loadimage-wrapper\"\n                                    className={`btn btn-primary `}\n                                    style={{ display: \"inline\" }}\n                                >\n                                    {/* upload image */}\n                                    <i className=\"fas fa-upload\"></i>&nbsp;\n                                    {encodedImage || parent\n                                        ? \"Replace Image\"\n                                        : \"Upload Image\"}\n                                    <input\n                                        id=\"loadimage\"\n                                        type=\"file\"\n                                        style={{ display: \"none\" }}\n                                        onChange={onImageSelected}\n                                    />\n                                </label>\n                                {encodedImage && (\n                                    <label\n                                        className=\"btn btn-secondary\"\n                                        onClick={() => setEncodedImage(\"\")}\n                                        style={{ display: \"inline\" }}\n                                    >\n                                        {/* remove image */}\n                                        <i className=\"fas fa-trash\"></i>&nbsp;\n                                        Remove Image\n                                    </label>\n                                )}\n                            </div>\n                        </div>\n                        <div className=\"form-group\">\n                            <label htmlFor=\"model\">Model</label>\n                            {/* <select\n                                className=\"form-control\"\n                                id=\"model\"\n                                value={model}\n                                onChange={(e) => setModel(e.target.value)}\n                            >\n                                {supportedModels.map((model) => (\n                                    <option\n                                        value={model}\n                                        key={`model-${model}`}\n                                    >\n                                        {model}\n                                    </option>\n                                ))}\n                            </select> */}\n                            {/* replace the select with a button that sets selectingModel to true */}\n                            <div>\n                                <button\n                                    type=\"button\"\n                                    className=\"btn btn-secondary light-button\"\n                                    onClick={() => setSelectingModel(true)}\n                                >\n                                    {model}&nbsp;\n                                    <i className=\"fas fa-caret-down\"></i>\n                                </button>\n                            </div>\n                        </div>\n                        <div className=\"form-group\">\n                            {/* negative prompt */}\n                            <label htmlFor=\"negativePrompt\">\n                                Negative Prompt\n                            </label>\n                            <input\n                                type=\"text\"\n                                className=\"form-control\"\n                                id=\"negativePrompt\"\n                                placeholder=\"What would you like to avoid?\"\n                                value={negativePrompt}\n                                onChange={(e) =>\n                                    setNegativePrompt(e.target.value)\n                                }\n                            />\n                            <span className=\"helptext\">\n                                Try descriptive words like \"blurry\" or\n                                \"distorted\"\n                            </span>\n                        </div>\n                        {!seed && (\n                            <div className=\"form-group\">\n                                <label htmlFor=\"count\">Count: {count}</label>\n                                {/* range slider from 1 to 20 */}\n                                <input\n                                    type=\"range\"\n                                    className=\"form-control-range\"\n                                    id=\"count\"\n                                    min=\"1\"\n                                    max=\"10\"\n                                    value={count}\n                                    onChange={(e) =>\n                                        setCount(parseInt(e.target.value))\n                                    }\n                                />\n                                <span className=\"helptext\">\n                                    This is how many images you want to generate\n                                </span>\n                            </div>\n                        )}\n                        {(parentId || encodedImage) && (\n                            <div className=\"form-group\">\n                                {/* variation strength */}\n                                <label htmlFor=\"variationStrength\">\n                                    Variation Strength:&nbsp;\n                                    {(variationStrength * 100).toFixed(0)}%\n                                </label>\n                                <input\n                                    type=\"range\"\n                                    className=\"form-control-range\"\n                                    id=\"variationStrength\"\n                                    min=\"0.05\"\n                                    max=\"0.95\"\n                                    step=\"0.05\"\n                                    value={variationStrength}\n                                    onChange={(e) =>\n                                        setVariationStrength(\n                                            parseFloat(e.target.value)\n                                        )\n                                    }\n                                />\n                                <span className=\"helptext\">\n                                    This is how much variation you want to see\n                                    from the parent image\n                                </span>\n                            </div>\n                        )}\n                        {encodedImage && (\n                            // controlnet type - canny, hed, depth, normal, openpose, seg, scribble, fakescribbles, hough\n                            <div className=\"form-group\">\n                                <label htmlFor=\"controlNetType\">\n                                    Control Net Type\n                                </label>\n                                <select\n                                    className=\"form-control\"\n                                    id=\"controlNetType\"\n                                    value={controlnetType}\n                                    onChange={(e) =>\n                                        setControlnetType(e.target.value)\n                                    }\n                                >\n                                    <option value=\"\">None</option>\n                                    {controlnetTypes.map((type) => (\n                                        <option\n                                            value={type}\n                                            key={`type-${type}`}\n                                        >\n                                            {type}\n                                        </option>\n                                    ))}\n                                </select>\n                                <span className=\"helptext\">\n                                    Controlnet is an advanced way of controlling\n                                    the output of image generation. You can read\n                                    more about it{\" \"}\n                                    <a\n                                        target=\"_blank\"\n                                        href=\"https://bootcamp.uxdesign.cc/controlnet-and-stable-diffusion-a-game-changer-for-ai-image-generation-83555cb942fc\"\n                                    >\n                                        here.\n                                    </a>\n                                </span>\n                            </div>\n                        )}\n                        {/* cfg scale. Slider from 1 to 20 in increments of 0.1 */}\n                        <div className=\"form-group\">\n                            <label>CFG Scale: {cfgScale.toFixed(1)}</label>\n                            <input\n                                type=\"range\"\n                                className=\"form-control-range\"\n                                min=\"1\"\n                                max=\"20\"\n                                step=\"0.5\"\n                                value={cfgScale}\n                                onChange={(e) =>\n                                    setCfgScale(parseFloat(e.target.value))\n                                }\n                            />\n                            <span className=\"helptext\">\n                                Adjust the CFG scale to control how much the\n                                image looks like the prompt.\n                            </span>\n                        </div>\n                        <SeedInput seed={seed} setSeed={setSeed} />\n\n                        <div\n                            className=\"form-group\"\n                            style={{ minHeight: \"20px\" }}\n                        >\n                            <div className=\"float-right\">\n                                {parent && (\n                                    <button\n                                        type=\"button\"\n                                        className=\"btn btn-secondary light-button\"\n                                        onClick={handleCancel}\n                                    >\n                                        <i className=\"fas fa-times\"></i>\n                                        &nbsp;CANCEL\n                                    </button>\n                                )}\n                                <button\n                                    type=\"submit\"\n                                    className=\"btn btn-primary\"\n                                    style={{ marginLeft: \"8px\" }}\n                                    disabled={!prompt || creating}\n                                >\n                                    {/* paintbrush button */}\n                                    {!creating && (\n                                        <i className=\"fas fa-paint-brush\"></i>\n                                    )}\n                                    {/* spinner button */}\n                                    {creating && (\n                                        <i className=\"fas fa-spinner fa-spin\"></i>\n                                    )}\n                                    &nbsp;PAINT\n                                </button>\n                                {encodedImage && (\n                                    <button\n                                        type=\"button\"\n                                        className=\"btn btn-secondary light-button\"\n                                        onClick={handleEdit}\n                                        style={{ marginLeft: \"8px\" }}\n                                        disabled={!prompt || creating}\n                                    >\n                                        <i className=\"fas fa-edit\"></i>\n                                        &nbsp;EDIT\n                                    </button>\n                                )}\n                            </div>\n                        </div>\n                    </div>\n                )}\n            </div>\n            {selectingModel && (\n                <ModelSelector\n                    api={api}\n                    onCancel={() => setSelectingModel(false)}\n                    onSelectModel={onSelectModel}\n                    initialSelectedModel={model}\n                />\n            )}\n        </form>\n    );\n};\n","import { aspectRatios } from \"./aspecRatios\";\n\nexport function getUpscaleLevel(width: number, height: number): number {\n    for (let i = 0; i < aspectRatios.length; i++) {\n        const aspectRatio = aspectRatios[i];\n        if (width * height <= aspectRatio.width * aspectRatio.height) {\n            return 0;\n        }\n        // if (width === aspectRatio.width && height === aspectRatio.height) {\n        //     return upscaleLevel;\n        // }\n    }\n    width /= 2;\n    height /= 2;\n    for (let i = 0; i < aspectRatios.length; i++) {\n        const aspectRatio = aspectRatios[i];\n        if (width * height <= aspectRatio.width * aspectRatio.height) {\n            return 1;\n        }\n        // if (width === aspectRatio.width && height === aspectRatio.height) {\n        //     return upscaleLevel;\n        // }\n    }\n    return 2;\n}\n","import { FC } from \"react\";\n\ninterface Props {\n    progress: number;\n}\n\nexport const ProgressBar: FC<Props> = ({ progress }) => {\n    return (\n        <div className=\"progress\" style={{ height: \"20px\", marginTop: \"16px\" }}>\n            <div\n                className=\"progress-bar\"\n                role=\"progressbar\"\n                style={{ width: `${progress * 100}%` }}\n                aria-valuenow={progress * 100}\n                aria-valuemin={0}\n                aria-valuemax={100}\n            >\n                {Math.round(progress * 100)}%\n            </div>\n        </div>\n    );\n};\n","export function sleep(ms: number): Promise<void> {\n    return new Promise(resolve => window.setTimeout(resolve, ms));\n}\n","import React, { FC, useEffect, useState } from 'react';\nimport moment from \"moment\";\n\n// implement an error notification component\n// error message and timestamp are passed in as props\n// but close button can make the error message disappear\n\n// show error when the timestamp or message changes with useEffect hook\n// hide error when the close button is clicked\n\ninterface Props {\n    message: string | null;\n    timestamp: number;\n}\n\ninterface AlertProps {\n    message: string;\n    timestamp: number;\n    alertType: 'success' | 'info' | 'warning' | 'danger';\n}\n\nconst Alert: FC<AlertProps> = ({ message, timestamp, alertType }) => {\n    const [show, setShow] = useState(!!message);\n\n    useEffect(() => {\n        setShow(!!message);\n        // set a timeout of 10 seconds to hide the message if it is currently showing\n        if (message) {\n            const timeout = setTimeout(() => {\n                setShow(false);\n            }, 10000);\n            return () => {\n                clearTimeout(timeout);\n            };\n        }\n    }, [message, timestamp]);\n\n    if (!show) {\n        return null;\n    }\n\n    return (\n        <div className={`alert alert-${alertType} ${show ? 'show' : 'hide'}`}>\n            <button\n                type=\"button\"\n                className=\"close\"\n                onClick={() => setShow(false)}\n            >\n                &times;\n            </button>\n            {message}\n        </div>\n    );\n};\n\nexport const ErrorNotification: FC<Props> = ({ message, timestamp }) => {\n    return (\n        <Alert message={message || ''} timestamp={timestamp} alertType=\"danger\" />\n    );\n};\n\nexport const SuccessNotification: FC<Props> = ({ message, timestamp }) => {\n    return (\n        <Alert message={message || ''} timestamp={timestamp} alertType=\"success\" />\n    );\n};\n","\nexport const supportedModels = [\n    \"Epic Diffusion\",\n    \"Rev Animated\",\n    \"Anything v3\",\n    \"Hentai Diffusion\",\n    \"Ranma Diffusion\",\n    \"URPM\",\n    \"Deliberate\",\n    \"GTA5 Artwork Diffusion\",\n    \"ChilloutMix\",\n    \"Realism Engine\",\n    \"AIO Pixel Art\",\n    \"Microworlds\",\n    \"Microchars\",\n    \"OrbAI\",\n    \"App Icon Diffusion\",\n];\n\n// canny, hed, depth, normal, openpose, seg, scribble, fakescribbles, hough\nexport const controlnetTypes = [\n    \"canny\",\n    \"hed\",\n    \"depth\",\n    \"normal\",\n    \"openpose\",\n    \"seg\",\n    \"scribble\",\n    \"fakescribbles\",\n    \"hough\",\n]","import React, { useState, useEffect } from \"react\";\nimport { Renderer } from \"./renderer\";\nimport { Cursor, Rect } from \"./models\";\nimport { Tool, BaseTool } from \"./tool\";\nimport { AspectRatioSelector } from \"../../components/AspectRatioSelector\";\nimport { getUpscaleLevel } from \"../../lib/upscale\";\nimport {\n    DEFAULT_ASPECT_RATIO,\n    aspectRatios,\n    getClosestAspectRatio,\n} from \"../../lib/aspecRatios\";\nimport { ZoomHelper } from \"./zoomHelper\";\nimport { runInThisContext } from \"vm\";\n\nexport class SelectionTool extends BaseTool implements Tool {\n    private selectionOverlay: Rect | undefined;\n    private selectionOverlayPreview: Rect | undefined;\n    private outpaint?: boolean;\n\n    // private selectionWidth: number = 512;\n    // private selectionHeight: number = 512;\n\n    private panning = false;\n\n    // TODO: size modifier to make the selection overlay smaller\n\n    constructor(renderer: Renderer) {\n        super(renderer, \"select\");\n    }\n\n    updateArgs(args: any) {\n        args = {\n            ...this.getArgs(),\n            ...args,\n        }\n        super.updateArgs(args);\n        this.selectionOverlay = args.selectionOverlay || {\n            x: 0,\n            y: 0,\n            width: 512,\n            height: 512,\n        };\n        this.outpaint = args.outpaint;\n        if (!this.outpaint) {\n            this.selectionOverlay = this.clamp(this.selectionOverlay!);\n        }\n        this.sync();\n    }\n\n    private clamp(rect: Rect): Rect {\n        const imageWidth = this.renderer.getWidth();\n        const imageHeight = this.renderer.getHeight();\n        let x = rect.x;\n        let y = rect.y;\n        let width = rect.width;\n        let height = rect.height;\n        // clamp to the canvas\n        x = Math.max(0, Math.min(x, imageWidth - this.selectionOverlay!.width));\n        y = Math.max(0, Math.min(y, imageHeight - rect.height));\n        x = Math.min(x, imageWidth - rect.width);\n        y = Math.min(y, imageHeight - rect.height);\n        width = Math.min(width, imageWidth);\n        height = Math.min(height, imageHeight);\n        return {\n            x: x,\n            y: y,\n            width: width,\n            height: height,\n        };\n    }\n\n    private sync(): void {\n        this.renderer.setSelectionOverlay(this.selectionOverlay);\n        this.renderer.setSelectionOverlayPreview(this.selectionOverlayPreview);\n    }\n\n    onMouseDown(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        if (event.type == \"touch\") {\n            this.onMouseMove(event);\n        } else if (event.button === 0) {\n            this.selectionOverlay = this.selectionOverlayPreview;\n            this.selectionOverlayPreview = undefined;\n            this.sync();\n            this.updateArgs({\n                selectionOverlay: this.selectionOverlay,\n            });\n        } else if (event.button === 1) {\n            this.panning = true;\n        }\n    }\n\n    onMouseMove(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        const imageWidth = this.renderer.getWidth();\n        const imageHeight = this.renderer.getHeight();\n        if (this.panning) {\n            this.zoomHelper.onPan(event);\n        } else {\n            let { x, y } = this.zoomHelper.translateMouseToCanvasCoordinates(\n                event.nativeEvent.offsetX,\n                event.nativeEvent.offsetY\n            );\n\n            // round to the nearest 16 pixels\n            x = Math.round(x / 16) * 16;\n            y = Math.round(y / 16) * 16;\n            // offset by -256 to center the rect\n            x -= 256;\n            y -= 256;\n\n            this.selectionOverlayPreview = {\n                x: x,\n                y: y,\n                width: this.selectionOverlay!.width,\n                height: this.selectionOverlay!.height,\n            };\n\n            if (!this.outpaint) {\n                this.selectionOverlayPreview = this.clamp(this.selectionOverlayPreview);\n            }\n\n            \n            this.sync();\n        }\n    }\n\n    onMouseUp(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        if (event.button === 0 && event.type == \"touch\") {\n            this.selectionOverlay = this.selectionOverlayPreview;\n            this.selectionOverlayPreview = undefined;\n            this.sync();\n            this.updateArgs({\n                selectionOverlay: this.selectionOverlay,\n            });\n        }\n        this.panning = false;\n    }\n\n    onMouseLeave(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        this.selectionOverlayPreview = undefined;\n        this.panning = false;\n        this.sync();\n    }\n\n    onWheel(event: WheelEvent) {\n        this.zoomHelper.onWheel(event);\n    }\n\n    destroy() {\n        // this.renderer.setSelectionOverlay(undefined);\n        this.renderer.setSelectionOverlayPreview(undefined);\n        return true;\n    }\n}\n\ninterface ControlsProps {\n    renderer: Renderer;\n    tool: Tool;\n    /** Lock aspect ratio for smaller images */\n    lockAspectRatio?: boolean;\n    outpaint?: boolean;\n}\n\nexport const Controls: React.FC<ControlsProps> = ({\n    renderer,\n    tool,\n    lockAspectRatio,\n    outpaint,\n}) => {\n    const upscaleLevel = getUpscaleLevel(\n        renderer.getWidth(),\n        renderer.getHeight()\n    );\n    const [aspectRatio, setAspectRatio] = useState(DEFAULT_ASPECT_RATIO);\n    const [size, setSize] = useState(1);\n\n    useEffect(() => {\n        const upscaleLevel = getUpscaleLevel(\n            renderer.getWidth(),\n            renderer.getHeight()\n        );\n        // lock aspect ratio to image\n        if (upscaleLevel === 0 && lockAspectRatio) {\n            const aspectRatio = getClosestAspectRatio(\n                renderer.getWidth(),\n                renderer.getHeight()\n            );\n            setAspectRatio(aspectRatio.id);\n            tool.updateArgs({\n                selectionOverlay: {\n                    x: 0,\n                    y: 0,\n                    width: aspectRatio.width,\n                    height: aspectRatio.height,\n                },\n                outpaint,\n            });\n        } else {\n            const args = tool.getArgs();\n            if (args.selectionOverlay) {\n                // restore args\n                const aspectRatio = getClosestAspectRatio(\n                    args.selectionOverlay.width,\n                    args.selectionOverlay.height\n                );\n                setAspectRatio(aspectRatio.id);\n                setSize(args.selectionOverlay.width / aspectRatio.width);\n                tool.updateArgs(args);\n            } else {\n                // set default args\n                args.selectionOverlay = {\n                    x: 0,\n                    y: 0,\n                    width: aspectRatios[aspectRatio].width,\n                    height: aspectRatios[aspectRatio].height,\n                };\n                args.outpaint = outpaint;\n                tool.updateArgs(args);\n            }\n        }\n    }, [tool]);\n\n    function onChange(aspectRatioId: number, size: number) {\n        const args = tool.getArgs();\n        const aspectRatio = aspectRatios[aspectRatioId];\n        if (args.selectionOverlay) {\n            const xDiff =\n                args.selectionOverlay.width - aspectRatio.width * size;\n            const yDiff =\n                args.selectionOverlay.height - aspectRatio.height * size;\n            args.selectionOverlay.width = Math.round(aspectRatio.width * size);\n            args.selectionOverlay.height = Math.round(\n                aspectRatio.height * size\n            );\n            args.selectionOverlay.x += xDiff / 2;\n            args.selectionOverlay.y += yDiff / 2;\n            if (!outpaint) {\n                // clamp to canvas\n                args.selectionOverlay.x = Math.round(\n                    Math.max(\n                        0,\n                        Math.min(\n                            args.selectionOverlay.x,\n                            renderer.getWidth() - args.selectionOverlay.width\n                        )\n                    )\n                );\n                args.selectionOverlay.y = Math.round(\n                    Math.max(\n                        0,\n                        Math.min(\n                            args.selectionOverlay.y,\n                            renderer.getHeight() - args.selectionOverlay.height\n                        )\n                    )\n                );\n            }\n        }\n        tool.updateArgs({\n            selectionOverlay: args.selectionOverlay,\n        });\n    }\n\n    return (\n        <>\n            {upscaleLevel > 0 && (\n                <AspectRatioSelector\n                    aspectRatio={aspectRatio}\n                    onChange={(aspectRatioId) => {\n                        onChange(aspectRatioId, size);\n                        setAspectRatio(aspectRatioId);\n                    }}\n                />\n            )}\n            <div className=\"form-group\">\n                <label htmlFor=\"size\" style={{ width: \"100%\" }}>\n                    Size\n                    <small\n                        className=\"form-text text-muted\"\n                        style={{ float: \"right\" }}\n                    >\n                        {Math.round(size * 100)}%\n                    </small>\n                </label>\n                {/* range from 0.1 to 1 */}\n                <input\n                    type=\"range\"\n                    className=\"form-control-range\"\n                    id=\"size\"\n                    min=\"1\"\n                    max=\"2\"\n                    step=\"0.1\"\n                    value={size}\n                    onChange={(event) => {\n                        onChange(aspectRatio, parseFloat(event.target.value));\n                        setSize(parseFloat(event.target.value));\n                    }}\n                />\n            </div>\n        </>\n    );\n};\n"],"sourceRoot":""}