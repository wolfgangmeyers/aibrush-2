{"version":3,"sources":["components/AspectRatioSelector.tsx","components/ImagePopup.tsx","components/PendingImagesThumbnail.tsx","components/PendingImages.tsx","pages/image-editor/enhance-tool.tsx","pages/image-editor/smudge-tool.tsx","pages/image-editor/inpaint-tool.tsx","pages/Homepage.tsx","pages/image-editor/PaletteButton.tsx","pages/image-editor/ColorPicker.tsx","pages/image-editor/pencil-tool.tsx","client/api.ts","client/base.ts","client/common.ts","lib/aspecRatios.ts","pages/image-editor/ImageEditor.tsx","pages/image-editor/renderer.ts","pages/image-editor/import-export.tsx","pages/image-editor/augment-tool.tsx","lib/boost.ts","components/BoostLevelPopup.tsx","components/BoostWidget.tsx","lib/imageutil.ts","components/BusyModal.tsx","pages/image-editor/zoomHelper.tsx","pages/image-editor/tool.ts","lib/localImagesStore.ts","pages/Login.tsx","components/TokenRefresher.tsx","components/Healthchecker.tsx","pages/admin/BoostList.tsx","pages/admin/GlobalSettings.tsx","pages/admin/Admin.tsx","pages/DeletedImages.tsx","pages/DiscordLogin.tsx","pages/LocalDeletedImages.tsx","pages/SavedImagesPage.tsx","pages/TestPage.tsx","App.tsx","config.ts","reportWebVitals.ts","index.tsx","lib/apisocket.ts","components/ImageThumbnail.tsx","components/SeedInput.tsx","components/ModelList.tsx","lib/localcache.ts","components/ModelSelector.tsx","components/ImagePrompt.tsx","lib/upscale.ts","components/ProgressBar.tsx","lib/sleep.ts","components/Alerts.tsx","lib/supportedModels.ts","pages/image-editor/selection-tool.tsx"],"names":["AspectRatioSelector","aspectRatio","onChange","disabled","aspectRatioDetails","aspectRatios","className","style","minHeight","display","alignItems","width","height","border","margin","float","displayName","type","min","max","length","value","e","parseInt","target","ImagePopup","assetsUrl","image","censorNSFW","onClose","onDelete","onFork","onEdit","onNSFW","onSave","img","useRef","src","id","updated_at","imageData","score","params","negative_prompt","negative_score","useState","showNSFW","setShowNSFW","useEffect","current","onerror","title","label","prompt","show","onHide","size","Header","closeButton","Title","Body","ref","maxWidth","maxHeight","marginLeft","marginRight","filter","nsfw","alt","marginTop","status","displayStatus","charAt","toUpperCase","slice","icon","StatusEnum","Pending","Processing","Completed","Saved","Error","fontSize","position","top","statusBadge","onClick","marginBottom","model","color","href","seed","PendingImagesThumbnail","pendingCount","processingCount","hover","setHover","onMouseEnter","onMouseLeave","backgroundImage","backgroundSize","cursor","background","lineHeight","PendingImages","images","onDeleteImage","onCancel","imageIcon","pendingDiv","map","phrases","substring","Footer","eraserWidthModifier","EnhanceTool","renderer","selectionTool","negativePrompt","count","variationStrength","_dirty","worker","idCounter","_state","stateHandler","selectionControlsListener","selectedImageDataIndex","selectedImageData","panning","erasing","progressListener","errorListener","dirtyListener","SelectionTool","selectSupported","state","selectionArgs","getArgs","selectionOverlay","x","y","getWidth","getHeight","updateArgs","ImageUtilWorker","this","dirty","listener","handler","error","destroy","setCursor","undefined","outpaint","getUpscaleLevel","event","zoomHelper","translateMouseToCanvasCoordinates","nativeEvent","offsetX","offsetY","button","ImageData","data","erasePoint","onMouseDown","getSelectionOverlay","baseWidth","Math","eraserRadius","floor","relX","relY","startX","startY","endX","endY","i","j","index","distance","sqrt","pow","alphaPct","alpha","setEditImage","featherWidth","radius","onPan","updateCursor","onMouseMove","onMouseUp","onWheel","args","console","log","api","imageId","baseImage","baseImageData","Promise","resolve","reject","getImageData","responseType","then","resp","base64ImageData","Buffer","from","toString","imageElement","Image","onload","canvas","document","createElement","ctx","getContext","drawImage","newId","processRequest","feather","pixels","updatedImageData","remove","progress","apisocket","a","notifyError","encodedImage","getEncodedImage","input","defaultArgs","encoded_image","parent","denoising_strength","ceil","temporary","updateProgress","createImage","onUploadProgress","progressEvent","loaded","total","newImages","completed","lastUpdate","moment","onMessage","msg","JSON","parse","NOTIFICATION_IMAGE_UPDATED","loadImageData","startTime","lastCheck","completeCount","sleep","diff","pendingIds","batchGetImages","ids","updatedImagesResult","updatedImages","byId","reduce","acc","updated","isAfter","sort","b","push","direction","saveListener","commitSelection","negative_phrases","BaseTool","EnhanceControls","tool","setCount","setDirty","setVariationStrength","setPrompt","setNegativePrompt","setModel","setState","setProgress","setError","onChangeState","onProgress","onError","onDirty","role","data-dismiss","aria-label","aria-hidden","lockAspectRatio","htmlFor","step","round","parseFloat","supportedModels","cancel","confirm","erase","submit","when","message","SmudgeTool","brushSize","brushOpacity","lastX","lastY","smudging","sync","smudgeLine","copyEditImageFromBaseImage","SmudgeControls","setBrushSize","setBrushOpacity","visibility","InpaintTool","imageWidth","imageHeight","selectionWidth","render","alphaMask","alphaPixels","snapshot","undo","clearRedoStack","expandToOverlay","encodedMask","getEncodedMask","maskData","encoded_mask","closestAspectRatio","getClosestAspectRatio","selection_overlay","window","InpaintControls","setoutpaint","checked","anonymousClient","axios","create","defaults","headers","common","Homepage","apiSocket","localImages","creating","setCreating","selectedImage","setSelectedImage","parentImage","setParentImage","loadingParent","setLoadingParent","savingImage","setSavingImage","uploadProgress","setUploadingProgress","showPendingImages","setShowPendingImages","setImages","err","setErr","errTime","setErrTime","success","setSuccess","successTime","setSuccessTime","hasMore","setHasMore","search","setSearch","searchDebounce","setSearchDebounce","bulkDeleteSelecting","setBulkDeleteSelecting","bulkDeleting","setBulkDeleting","bulkDeleteIds","setBulkDeleteIds","boost","setBoost","setCensorNSFW","useParams","history","useHistory","location","useLocation","valueOf","handle","setTimeout","clearTimeout","find","getImage","replace","onSubmit","scrollTo","percentCompleted","saveImage","sortImages","onEditNewImage","newImage","created_at","created_by","steps","uuid","updatedImage","loadImages","add","listImages","NOTIFICATION_BOOST_UPDATED","getBoost","updatedBoost","lock","pollImages","pendingOrProcessingImages","imageStatuses","statusChange","deleteImage","getImageDownloadUrls","downloadUrls","get","image_url","binaryImageData","timerHandle","setInterval","clearInterval","refreshBoost","interval","qs","ignoreQueryPrefix","loadParent","isPendingOrProcessing","aScore","bScore","trim","onLoadMore","minUpdatedAt","forEach","deleted_at","createInput","split","createEncodedThumbnail","encodedThumbnail","binaryThumbnailData","createResp","getImageUploadUrls","uploadUrls","put","thumbnail_url","hardDeleteImage","onThumbnailClicked","onConfirmBulkDelete","promises","Object","keys","all","completedOrSavedImages","pendingImages","processingImages","onUpdateBoostActive","active","updateBoost","is_active","level","alert","onUpdateBoostLevel","textAlign","timestamp","onUpdateActive","paddingBottom","placeholder","Toggle","variant","Menu","Item","dataLength","next","loader","bulkDelete","PaletteButton","selectedColor","backgroundColor","ColorPicker","onColorSelected","displayColorPicker","setDisplayColorPicker","tmpColor","setTmpColor","zIndex","right","bottom","left","hex","onChangeComplete","defaultColors","PencilTool","brushColor","palette","isDrawing","colorPicking","lastPickedColor","colorPickedListener","drawPoint","getPixel","drawLine","Controls","setBrushColor","setPalette","indexOf","addToPalette","onColorPicked","flexDirection","flexWrap","beginColorpicker","AddMetricItemTypeEnum","HealthcheckStatusEnum","ImageParamsControlnetTypeEnum","ImageParamsAugmentationEnum","UpsertWorkerInputStatusEnum","WorkerStatusEnum","BASE_PATH","BaseAPI","configuration","basePath","globalAxios","RequiredError","field","name","DUMMY_BASE_URL","assertParamExists","functionName","paramName","paramValue","setSearchParams","url","searchParams","URLSearchParams","objects","object","key","Array","isArray","delete","item","append","set","serializeDataIfNeeded","requestOptions","nonString","isJsonMime","stringify","toPathString","pathname","hash","createRequestFunction","axiosArgs","axiosRequestArgs","options","request","AIBrushApiFp","localVarAxiosParamCreator","addMetrics","addMetricsInput","localVarUrlObj","URL","baseOptions","localVarRequestOptions","method","localVarQueryParameter","localVarHeaderParameter","query","headersFromBaseOptions","batchGetImagesInput","createImageInput","createInviteCode","localVarPath","encodeURIComponent","String","depositBoost","userId","depositRequest","discordLogin","getAssetsUrl","getBoostForUser","getFeatures","getGlobalSettings","getMaskData","getModels","getThumbnailData","healthcheck","isAdmin","listBoosts","limit","login","loginInput","refresh","refreshLoginInput","updateBoostRequest","updateGlobalSettings","updateGlobalSettingsRequest","updateImage","updateImageInput","uploadImageData","body","uploadThumbnailData","verify","verifyLoginInput","AIBrushApiAxiosParamCreator","localVarAxiosArgs","AIBrushApi","DEFAULT_ASPECT_RATIO","tests","aRatio","bRatio","abs","compareSize","upscale","ImageEditor","showSelectionControls","setShowSelectionControls","tools","iconClass","constructor","r","renderControls","t","onShowSelectionControls","setImage","setRenderer","setTool","canUndo","setCanUndo","canRedo","setCanRedo","busyMessage","setBusyMessage","canvasRef","onSelectTool","toolconfig","newTool","onSaveImage","saveNewImage","newArgs","renderTool","buttonClass","isSelected","preventDefault","localImage","imageSrc","download_urls","createRenderer","setBaseImage","loadImage","onSnapshot","addEventListener","removeEventListener","redo","verticalAlign","touchAction","userSelect","onTouchStart","onTouchMove","onTouchEnd","select","transform","resetView","Renderer","undoStack","redoStack","currentSnapshot","backgroundLayer","baseImageLayer","editLayer","selectionOverlayPreview","hasSelection","zoom","snapshotListener","allowRedo","pop","clearRect","putImageData","notifySnapshotListener","shift","context","setTransform","drawOverlay","pattern","createPattern","createCheckeredPattern","fillStyle","fillRect","color1","color2","updateSelectionOverlay","initializeBackgroundLayer","setSelectionOverlay","updateZoomAndOffset","lineWidth","strokeStyle","strokeRect","beginPath","arc","PI","stroke","globalAlpha","fill","moveTo","lineTo","result","toDataURL","selection","imageDataToEncodedImage","erasure","mask","convertErasureToMask","brushx","brushy","absx","leftEdge","rightEdge","topEdge","bottomEdge","absy","contains","x1","y1","x2","y2","lineCap","unitVector","totalRed","totalGreen","totalBlue","averageRed","averageGreen","averageBlue","pixel","g","rgbToHex","minX","minY","newCanvas","ImportExportControls","backupImage","setBackupImage","files","byteString","atob","buffer","ArrayBuffer","intArray","Uint8Array","charCodeAt","blob","Blob","saveAs","onExport","AugmentControls","activeAugmentation","setActiveAugmentation","imageWorker","setImageWorker","lastError","setLastError","augmentImageData","augmentation","c","imageDataToCanvas","Upscale","FaceRestore","processingImage","checkResp","imageDataResp","binaryImageToDataBase64","decodeImage","upscaleFactor","newImageData","onAugment","fixImageSize","BOOST_LEVELS","description","BoostLevelPopup","selectedBoostLevel","updatedBoostLevel","setUpdatedBoostLevel","Modal","centered","boostLevel","COOLDOWN_MILLISECONDS","boostLevelToLabel","1","2","4","8","BoostWidget","remainingTime","setRemainingTime","hidden","setHidden","cooldown","setCooldown","updatingBoostLevel","setUpdatingBoostLevel","borderRadius","paddingTop","paddingLeft","paddingRight","fontWeight","animationName","animationDuration","animationIterationCount","updateRemainingTime","remainingMilliseconds","balance","activated_at","millisecondsSinceLastActivated","utc","format","fontStyle","animation","splitImage","initImage","tile_size","num_tiles_x","num_tiles_y","tiles","x0","y0","tile","numTilesX","numTilesY","tileSize","mergeTiles","splitResult","tileCanvas","resizeImage","numWorkers","workers","callbacks","Worker","process","bind","postMessage","terminate","cropWidth","cropHeight","cropX","cropY","base64","binaryImage","resizeEncodedImage","encodedImageToBlob","binaryString","arr","uploadBlob","signedUrl","xhr","XMLHttpRequest","open","setRequestHeader","send","BusyModal","children","backdrop","keyboard","ZoomHelper","startTouches","startZoom","startOffsetX","startOffsetY","originalZoom","getZoom","getOffsetX","getOffsetY","canvasPoint","deltaY","xDiff","yDiff","movementX","movementY","rect","getBoundingClientRect","touches","canvasRect","getCanvas","startTouch1","startTouch2","touch1","touch2","startDistance","clientX","clientY","startCenterX","startCenterY","centerX","centerY","startCanvasPoint","xDiff2","yDiff2","mouseX","mouseY","touchHandle","_pinchZooming","_panning","localStorage","getItem","setItem","_updateCursor","touch","identifier","pageX","pageY","screenX","screenY","LocalImagesStore","db","indexedDB","onupgradeneeded","evt","imagesStore","objectStoreNames","transaction","objectStore","createObjectStore","keyPath","createIndex","unique","onsuccess","_","legacyImage","join","stable_diffusion_strength","iterations","store","hydrateImage","cleanupDeletedImages","range","IDBKeyRange","lowerBound","upperBound","openCursor","toLowerCase","includes","continue","imagesRequest","clear","olderThan","getDeletedImages","deletedImages","subtract","Login","props","email","setEmail","emailSubmitted","setEmailSubmitted","code","setCode","inviteCode","onLogin","match","client","invite_code","onVerify","aria-describedby","host","protocol","redirectUri","discordLink","TokenRefresher","onCredentialsRefreshed","onCredentialsExpired","credentials","refreshToken","loginResult","catch","Healthchecker","healthCheck","setHealthCheck","BoostList","boosts","setBoosts","amount","setAmount","setLevel","showDeposit","setShowDeposit","onDepositBoost","user_id","fromNow","Number","GlobalSettings","minimum_worker_allocations","stable_diffusion","stable_diffusion_inpainting","swinir","workerSettings","setWorkerSettings","saving","setSaving","loadWorkerSettings","settings","settings_json","saveWorkerSettings","Admin","links","setLinks","onGenerateLink","link","DeletedImages","deleting","setDeleting","onDeleteAllImages","onRestoreImage","goBack","borderBottom","ImageThumbnail","DiscordLogin","accessToken","LocalDeletedImages","clearDeletedImages","SavedImagesPage","latestCursor","findIndex","deletedIds","uniqueIds","Set","payload","NOTIFICATION_IMAGE_DELETED","Dropdown","res","TestPage","originalImage","setOriginalImage","upscaledImage","setUpscaledImage","upscaleImageData","onImageSelected","originalImageData","upscaledTile","upscaledImageData","feathered","upscaledCanvas","config","apiUrl","httpClient","ApiSocket","updateHttpClient","App","setCredentials","setAssetsUrl","setIsAdmin","features","setFeatures","onLogout","removeItem","init","assets_url","storedCredentials","is_admin","updateToken","connect","path","exact","to","privacy_uri","terms_uri","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","getElementById","messageListener","retry","setRetry","backgroundRepeat","backgroundPosition","readOnly","SeedInput","setSeed","useCustomSeed","setUseCustomSeed","Form","FormGroup","FormCheck","random","FormControl","ModelList","models","onSelectModel","selectedModel","innerWidth","innerHeight","setMaxHeight","handleResize","ListGroup","overflowY","cache","storage","ttl","expiry","Date","now","itemStr","ModelSelector","initialSelectedModel","initialValue","cachedValue","setValue","useCache","setModels","setSelectedModel","searchTerm","setSearchTerm","filteredModels","values","Control","Row","Col","sm","showcases","Button","defaultNegativePrompt","encoded_npy","ImagePrompt","setAspectRatio","parentId","setParentId","advancedView","setAdvancedView","setEncodedImage","selectingModel","setSelectingModel","controlnetType","setControlnetType","cfgScale","setCfgScale","defaultAspectRatio","setAspectRatioDetails","originalWidth","setOriginalWidth","originalHeight","setOriginalHeight","resetState","handleSubmit","controlnet_type","cfg_scale","bestMatch","file","HTMLCanvasElement","textDecoration","aspectRatioId","toFixed","controlnetTypes","ProgressBar","aria-valuenow","aria-valuemin","aria-valuemax","ms","Alert","alertType","setShow","timeout","ErrorNotification","SuccessNotification","clamp","setSelectionOverlayPreview","upscaleLevel","setSize"],"mappings":"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","file":"static/js/main.d9b68e6b.chunk.js","sourcesContent":["import React, { FC, useEffect, useRef, useState } from \"react\";\n\nimport { aspectRatios, DEFAULT_ASPECT_RATIO, getClosestAspectRatio } from \"../lib/aspecRatios\";\n\ninterface Props {\n    aspectRatio: number;\n    onChange: (aspectRatio: number) => void;\n    disabled?: boolean;\n}\n\nexport const AspectRatioSelector: FC<Props> = ({ aspectRatio, onChange, disabled }) => {\n    const aspectRatioDetails = aspectRatios[aspectRatio];\n    return (\n        <div className=\"form-group\">\n            <div\n                style={{\n                    minHeight: \"140px\",\n                    display: \"flex\",\n                    alignItems: \"center\",\n                }}\n            >\n                {/* aspect ratio slider, goes from 0 -> aspectRatios.length - 1 */}\n                <div\n                    style={{\n                        width: aspectRatioDetails.width / 8,\n                        height: aspectRatioDetails.height / 8,\n                        // dotted line options: dotted, dashed, solid, double, groove, ridge, inset, outset, none, hidden\n                        border: \"1px dashed white\",\n                        margin: \"auto\",\n                    }}\n                ></div>\n            </div>\n            <label style={{width: \"100%\"}}>\n                Aspect Ratio\n                <small className=\"form-text text-muted\" style={{float: \"right\"}}>\n                    {aspectRatioDetails.displayName}\n                </small>\n            </label>\n            <input\n                type=\"range\"\n                disabled={disabled}\n                className=\"form-control-range\"\n                min={0}\n                max={aspectRatios.length - 1}\n                value={aspectRatio}\n                onChange={(e) => {\n                    onChange(parseInt(e.target.value));\n                }}\n            />\n        </div>\n    );\n};\n","import React, { FC, useEffect, useRef, useState } from \"react\";\nimport { Modal } from \"react-bootstrap\";\nimport { CreateImageInput, Image, StatusEnum } from \"../client/api\";\nimport { LocalImage } from \"../lib/localImagesStore\";\nimport { getUpscaleLevel } from \"../lib/upscale\";\n\ninterface ImagePopupProps {\n    assetsUrl: string;\n    image: LocalImage;\n    censorNSFW: boolean;\n    onClose: () => void;\n    onDelete?: (image: LocalImage) => void;\n    onFork?: (image: LocalImage) => void;\n    onEdit?: (image: LocalImage) => void;\n    onNSFW?: (image: LocalImage, nsfw: boolean) => void;\n    onSave?: (image: LocalImage) => void;\n}\n\nexport const ImagePopup: FC<ImagePopupProps> = ({\n    assetsUrl,\n    image,\n    censorNSFW,\n    onClose,\n    onDelete,\n    onFork,\n    onEdit,\n    onNSFW,\n    onSave,\n}) => {\n    const img = useRef<HTMLImageElement>(null);\n    let src = `${assetsUrl}/${image.id}.image.png?updated_at=${image.updated_at}`;\n    if (image.imageData) {\n        src = image.imageData;\n    }\n    let score = image.score;\n    if (\n        image.params.negative_prompt &&\n        image.negative_score != 0\n    ) {\n        score -= image.negative_score;\n    }\n    const [showNSFW, setShowNSFW] = useState(false);\n\n    const statusBadge = (status: string) => {\n        const displayStatus = status.charAt(0).toUpperCase() + status.slice(1);\n        let icon = \"fa fa-question-circle\";\n        switch (status) {\n            case StatusEnum.Pending:\n                icon = \"fas fa-hourglass-half\";\n                break;\n            case StatusEnum.Processing:\n                icon = \"fas fa-cog fa-spin\";\n                break;\n            case StatusEnum.Completed:\n                icon = \"fas fa-check\";\n                break;\n            case StatusEnum.Saved:\n                icon = \"fas fa-save\";\n                break;\n            case StatusEnum.Error:\n                icon = \"fas fa-exclamation-circle\";\n                break;\n        }\n        return (\n            <>\n                <span style={{ fontSize: \"24px\" }}>\n                    <i\n                        className={`${icon} status-badge status-badge-${status}`}\n                        style={{\n                            fontSize: \"10px\",\n                            position: \"relative\",\n                            top: \"-1px\",\n                        }}\n                    ></i>\n                    &nbsp;{displayStatus}\n                </span>\n            </>\n        );\n    };\n\n    useEffect(() => {\n        if (!img.current) {\n            return;\n        }\n        img.current.onerror = () => {\n            if (!img.current) {\n                return;\n            }\n            img.current.src = \"/images/default.png\";\n        };\n    }, [img]);\n\n    let title = image.label;\n    if (!title) {\n        title = image.params.prompt!;\n    }\n\n    // if open, show modal with image\n    return (\n        <Modal show={true} onHide={onClose} size=\"xl\">\n            <Modal.Header closeButton>\n                <Modal.Title>{title}</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <img\n                    ref={img}\n                    style={{\n                        maxWidth: \"100%\",\n                        maxHeight: \"1024px\",\n                        display: \"block\",\n                        marginLeft: \"auto\",\n                        marginRight: \"auto\",\n                        filter: (image.nsfw && censorNSFW) && !showNSFW ? \"blur(30px)\" : \"\",\n                    }}\n                    id={`image-popup-${image.id}`}\n                    src={src}\n                    alt={image.label}\n                />\n                {/* List these fields: status, iterations, phrases */}\n                <div className=\"row\">\n                    <div className=\"col-lg-12\"></div>\n                </div>\n                {/* controls */}\n                <div className=\"row\">\n                    <div className=\"col-lg-12\">\n                        <div\n                            className=\"image-popup-controls\"\n                            style={{ marginTop: \"40px\" }}\n                        >\n                            {statusBadge(image.status)}\n                            <div style={{ float: \"right\" }}>\n                                {onFork &&\n                                    (image.status === StatusEnum.Saved ||\n                                        image.status ===\n                                            StatusEnum.Completed) && (\n                                        <button\n                                            className=\"btn btn-secondary btn-sm image-popup-button\"\n                                            onClick={() => onFork(image)}\n                                            style={{ marginRight: \"5px\" }}\n                                        >\n                                            <i className=\"fas fa-code-branch\"></i>\n                                            &nbsp;VARIATIONS\n                                        </button>\n                                    )}\n                                {onDelete && (\n                                    <button\n                                        className=\"btn btn-danger btn-sm image-popup-delete-button\"\n                                        onClick={() =>\n                                            onDelete && onDelete(image)\n                                        }\n                                        style={{ marginRight: \"5px\" }}\n                                    >\n                                        <i className=\"fas fa-trash-alt\"></i>\n                                        &nbsp;DELETE\n                                    </button>\n                                )}\n                                {onEdit && (\n                                    <button\n                                        className=\"btn btn-primary btn-sm image-popup-button edit-button\"\n                                        onClick={() => onEdit && onEdit(image)}\n                                        style={{ marginRight: \"5px\" }}\n                                    >\n                                        <i className=\"fas fa-edit\"></i>\n                                        &nbsp;EDIT\n                                    </button>\n                                )}\n                                {onSave && (\n                                    <button\n                                        className=\"btn btn-primary btn-sm image-popup-button\"\n                                        onClick={() => onSave && onSave(image)}\n                                        style={{ marginRight: \"5px\" }}\n                                    >\n                                        <i className=\"fas fa-save\"></i>\n                                        &nbsp;SAVE\n                                    </button>\n                                )}\n                                {(image.nsfw && censorNSFW) && (\n                                    <button\n                                        className=\"btn btn-primary btn-sm image-popup-button\"\n                                        onClick={() => setShowNSFW(!showNSFW)}\n                                        style={{ marginRight: \"5px\" }}\n                                    >\n                                        <i className=\"fas fa-eye\"></i>\n                                        &nbsp;{showNSFW ? \"HIDE\" : \"SHOW\"}\n                                    </button>\n                                )}\n                            </div>\n                        </div>\n                        <div\n                            className=\"image-popup-controls\"\n                            style={{ marginTop: \"28px\", marginBottom: \"85px\" }}\n                        >\n                            {/* Horde interface doesn't support score yet */}\n                            {/* <div>\n                                Similarity to prompt: {(score * 200).toFixed(2)}\n                                %\n                            </div> */}\n                            <div>\n                                Image dimensions: {image.params.width} x {image.params.height}\n                            </div>\n                            <div>\n                                Model: {image.model}\n                            </div>\n                            {image.nsfw && (\n                                <>\n                                    <div>\n                                        {/* alert warning icon */}\n                                        <i\n                                            className=\"fas fa-exclamation-triangle\"\n                                            style={{\n                                                color: \"orange\",\n                                                fontSize: \"18px\",\n                                                position: \"relative\",\n                                                top: \"2px\",\n                                            }}\n                                        ></i>\n                                        &nbsp;May contain NSFW content\n                                    </div>\n                                    {onNSFW && (\n                                        <a\n                                            href=\"javascript:void(0)\"\n                                            onClick={() =>\n                                                onNSFW(image, false)\n                                            }\n                                        >\n                                            Mark as Safe for Work\n                                        </a>\n                                    )}\n                                </>\n                            )}\n                            {image.params.seed && (\n                                <div>\n                                    Seed: {image.params.seed}\n                                </div>\n                            )}\n                            {!image.nsfw && (\n                                <>\n                                    <div>\n                                        {/* green check icon */}\n                                        <i\n                                            className=\"fas fa-check\"\n                                            style={{\n                                                color: \"green\",\n                                                fontSize: \"18px\",\n                                                position: \"relative\",\n                                                top: \"2px\",\n                                            }}\n                                        ></i>\n                                        &nbsp;Safe for Work\n                                    </div>\n                                    {onNSFW && (\n                                        <a\n                                            href=\"javascript:void(0)\"\n                                            onClick={() =>\n                                                onNSFW(image, true)\n                                            }\n                                        >\n                                            Mark as Not Safe for Work\n                                        </a>\n                                    )}\n                                </>\n                            )}\n                        </div>\n                    </div>\n                </div>\n            </Modal.Body>\n        </Modal>\n    );\n};\n","import React, { FC, useEffect, useState } from \"react\";\n\ninterface Props {\n    pendingCount: number;\n    processingCount: number;\n    onClick?: () => void;\n}\n\nexport const PendingImagesThumbnail: FC<Props> = ({\n    pendingCount,\n    processingCount,\n    onClick,\n}) => {\n    const [hover, setHover] = useState(false);\n\n    // on mouse in/out, set hover state\n    const onMouseEnter = () => setHover(true);\n    const onMouseLeave = () => setHover(false);\n    let icon = (\n        <i style={{ marginTop: \"20px\" }} className=\"fa fa-hourglass-half\"></i>\n    );\n\n    if (processingCount > 0) {\n        icon = (\n            <i style={{ marginTop: \"20px\" }} className=\"fa fa-cog fa-spin\"></i>\n        );\n    }\n\n    return (\n        <div\n            onMouseEnter={onMouseEnter}\n            onMouseLeave={onMouseLeave}\n            style={{\n                backgroundImage: `url(/images/default.png)`,\n                backgroundSize: \"contain\",\n                width: \"128px\",\n                height: \"128px\",\n                margin: \"8px\",\n                float: \"left\",\n                cursor: \"pointer\",\n            }}\n            onClick={onClick}\n        >\n            {hover && (\n                <div\n                    style={{\n                        background: \"rgba(255, 255, 255, 0.5)\",\n                        color: \"black\",\n                        width: \"100%\",\n                        height: \"100%\",\n                        lineHeight: \"1\",\n                        fontSize: \"20px\",\n                    }}\n                >\n                    <br/>\n                    {pendingCount > 0 && (\n                        <div style={{ marginBottom: \"24px\" }}>\n                            {pendingCount} pending\n                        </div>\n                    )}\n                    {processingCount > 0 && (\n                        <div>{processingCount} processing</div>\n                    )}\n                </div>\n            )}\n            {!hover && (\n                <div\n                    style={{\n                        background: \"rgba(255, 255, 255, 0.3)\",\n                        color: \"#555\",\n                        width: \"100%\",\n                        height: \"100%\",\n                        fontSize: \"80px\",\n                    }}\n                >\n                    {icon}\n                </div>\n            )}\n        </div>\n    );\n};\n","import React, {FC, useEffect, useState} from \"react\";\nimport { Modal } from \"react-bootstrap\";\nimport { Image } from \"../client/api\";\n\ninterface Props {\n    images: Image[];\n    onDeleteImage: (image: Image) => void;\n    onCancel: () => void;\n    show: boolean;\n}\n\nexport const PendingImages: FC<Props> = ({\n    images,\n    onDeleteImage,\n    onCancel,\n    show,\n}) => {\n\n    function imageIcon(image: Image) {\n        if (image.status === \"pending\") {\n            return <i className=\"fa fa-hourglass-half\"></i>;\n        } else if (image.status === \"processing\") {\n            return <i className=\"fa fa-cog fa-spin\"></i>;\n        }\n    }\n\n    const truncate = (phrases: string) => {\n        if (phrases.length > 35) {\n            return phrases.substring(0, 35) + \"...\";\n        }\n        return phrases;\n    }\n\n    // refactor from table to div layout\n    const pendingDiv = (\n        <div>\n            <div style={{marginBottom: \"8px\"}}>\n                <div style={{display: \"inline-block\", width: \"100px\"}}>\n                    Status\n                </div>\n                <div style={{display: \"inline-block\", width: \"250px\"}}>\n                    Phrases\n                </div>\n                <div style={{display: \"inline-block\", width: \"100px\"}}>\n                    Action\n                </div>\n            </div>\n            {images.map((image) => (\n                <div key={image.id} style={{marginBottom: \"8px\"}}>\n                    <div style={{display: \"inline-block\", width: \"100px\"}}>\n                        {imageIcon(image)}&nbsp;{image.status}\n                    </div>\n                    <div style={{display: \"inline-block\", width: \"250px\"}}>\n                        {/* if more than 30 chars, truncate with ellipsis*/}\n                        {truncate(image.params.prompt || \"\")}\n                    </div>\n                    <div style={{display: \"inline-block\", width: \"100px\"}}>\n                        <button\n                            className=\"btn btn-danger btn-sm image-popup-delete-button\"\n                            onClick={() => onDeleteImage(image)}\n                        >\n                            <i className=\"fa fa-trash\"></i>&nbsp;Delete\n                        </button>\n                    </div>\n                </div>\n            ))}\n        </div>\n    );\n\n    return (\n        <Modal show={show} onHide={onCancel}>\n            <Modal.Header closeButton>\n                <Modal.Title>Pending Images</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                {pendingDiv}\n            </Modal.Body>\n            <Modal.Footer>\n                <button className=\"btn btn-secondary\" onClick={onCancel}>\n                    Close\n                </button>\n            </Modal.Footer>\n        </Modal>\n    );\n};","import React, { FC, useState, useEffect, useRef } from \"react\";\nimport { Prompt } from \"react-router\";\nimport { loadImageAsync } from \"../../lib/loadImage\";\n\nimport { sleep } from \"../../lib/sleep\";\nimport { defaultArgs } from \"../../components/ImagePrompt\";\nimport { Tool, BaseTool } from \"./tool\";\nimport { Renderer } from \"./renderer\";\nimport { Cursor, Rect } from \"./models\";\nimport {\n    AIBrushApi,\n    CreateImageInput,\n    Image as APIImage,\n    ImageList,\n    StatusEnum,\n} from \"../../client\";\nimport { ZoomHelper } from \"./zoomHelper\";\nimport { getClosestAspectRatio } from \"../../lib/aspecRatios\";\nimport { ImageUtilWorker } from \"../../lib/imageutil\";\nimport { SelectionTool, Controls as SelectionControls } from \"./selection-tool\";\nimport { getUpscaleLevel } from \"../../lib/upscale\";\nimport { ApiSocket, NOTIFICATION_IMAGE_UPDATED } from \"../../lib/apisocket\";\nimport moment from \"moment\";\nimport { supportedModels } from \"../../lib/supportedModels\";\nimport { ProgressBar } from \"../../components/ProgressBar\";\n\ntype EnhanceToolState = \"select\" | \"default\" | \"uploading\" | \"processing\" | \"confirm\" | \"erase\";\n\n// eraser width modifier adds a solid core with a feather edge\n// equal to the what is used on enhanced selections\nconst eraserWidthModifier = 1.3;\n\ninterface ImageWithData extends APIImage {\n    data?: ImageData;\n}\n\nexport class EnhanceTool extends BaseTool implements Tool {\n    readonly selectionTool: SelectionTool;\n    private prompt: string = \"\";\n    private negativePrompt: string = \"\";\n    private model: string = \"Epic Diffusion\";\n    private count: number = 4;\n    private variationStrength: number = 0.35;\n    private _dirty = false;\n    private worker: ImageUtilWorker;\n    private idCounter = 0;\n\n    private _state: EnhanceToolState = \"default\";\n    private stateHandler: (state: EnhanceToolState) => void = () => {};\n    private selectionControlsListener: (show: boolean) => void = () => {};\n\n    private imageData: Array<ImageData> = [];\n    private selectedImageDataIndex: number = -1;\n    private selectedImageData: ImageData | null = null;\n    private panning = false;\n    private erasing = false;\n    private progressListener?: (progress: number) => void;\n    private errorListener?: (error: string | null) => void;\n    private dirtyListener?: (dirty: boolean) => void;\n\n    set dirty(dirty: boolean) {\n        this._dirty = dirty;\n        if (this.dirtyListener) {\n            this.dirtyListener(dirty);\n        }\n    }\n\n    get dirty() {\n        return this._dirty;\n    }\n\n    onDirty(listener: (dirty: boolean) => void): void {\n        this.dirtyListener = listener;\n    }\n\n    onError(handler: (error: string | null) => void) {\n        this.errorListener = handler;\n    }\n\n    private notifyError(error: string | null) {\n        if (this.errorListener) {\n            this.errorListener(error);\n        }\n    }\n\n    get state(): EnhanceToolState {\n        return this._state;\n    }\n\n    set state(state: EnhanceToolState) {\n        if (state !== this._state) {\n            if (this._state == \"select\") {\n                this.selectionTool.destroy();\n            }\n            if (this._state === \"erase\") {\n                this.renderer.setCursor(undefined);\n            }\n            this._state = state;\n            this.stateHandler(state);\n            if (state == \"confirm\") {\n                this.selectionControlsListener(true);\n            } else {\n                this.selectionControlsListener(false);\n                if (state == \"select\") {\n                    this.selectionTool.updateArgs({\n                        ...this.selectionTool.getArgs(),\n                        outpaint: false,\n                    });\n                }\n            }\n        }\n    }\n\n    selectSupported(): boolean {\n        return !(\n            getUpscaleLevel(\n                this.renderer.getWidth(),\n                this.renderer.getHeight()\n            ) === 0 && this.renderer.getWidth()\n        );\n    }\n\n    constructor(renderer: Renderer) {\n        super(renderer, \"enhance\");\n        this.selectionTool = new SelectionTool(renderer);\n        if (this.selectSupported()) {\n            this.state = \"select\";\n        } else {\n            this.state = \"default\";\n        }\n        let selectionArgs = this.selectionTool.getArgs();\n        if (!this.selectSupported()) {\n            selectionArgs = {\n                ...selectionArgs,\n                selectionOverlay: {\n                    x: 0,\n                    y: 0,\n                    width: this.renderer.getWidth(),\n                    height: this.renderer.getHeight(),\n                },\n            };\n        }\n        this.selectionTool.updateArgs(selectionArgs);\n        this.worker = new ImageUtilWorker();\n    }\n\n    onMouseDown(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        if (this.state == \"select\") {\n            this.selectionTool.onMouseDown(event);\n            return;\n        }\n        let { x, y } = this.zoomHelper.translateMouseToCanvasCoordinates(\n            event.nativeEvent.offsetX,\n            event.nativeEvent.offsetY\n        );\n        if (event.button === 1) {\n            this.panning = true;\n            return;\n        }\n        if (this.state == \"erase\" && this.selectedImageData) {\n            this.erasing = true;\n            // clone selected ImageData\n            this.selectedImageData = new ImageData(\n                this.selectedImageData.data.slice(),\n                this.selectedImageData.width,\n                this.selectedImageData.height\n            );\n\n            this.erasePoint(x, y);\n        }\n    }\n\n    // TODO: on erase cancel and on erase confirm\n    // either restore the image data from the array\n    // or overwrite the array with the new image data\n\n    private erasePoint(x: number, y: number) {\n        const selectionOverlay = this.renderer.getSelectionOverlay()!;\n        const baseWidth = Math.min(\n            selectionOverlay.width,\n            selectionOverlay.height\n        );\n        const eraserRadius = Math.floor((baseWidth / 8) * eraserWidthModifier);\n\n        const relX = x - selectionOverlay.x;\n        const relY = y - selectionOverlay.y;\n        const imageData = this.selectedImageData!;\n\n        const startX = Math.max(0, relX - eraserRadius);\n        const startY = Math.max(0, relY - eraserRadius);\n        const endX = Math.min(imageData.width, relX + eraserRadius);\n        const endY = Math.min(imageData.height, relY + eraserRadius);\n\n        // relX=64.28541697636388, relY=64.24464312259761, startX=0.28541697636387653, startY=0.24464312259760845, endX=128.28541697636388, endY=128.2446431225976\n\n        for (let i = startX; i < endX; i++) {\n            for (let j = startY; j < endY; j++) {\n                const index = (j * imageData.width + i) * 4;\n                const distance = Math.sqrt(\n                    Math.pow(i - relX, 2) + Math.pow(j - relY, 2)\n                );\n                if (distance < eraserRadius) {\n                    // set alpha to a linear gradient from the center,\n                    // 100% in the middle and 0% at the edge\n                    const alphaPct =\n                        (distance / eraserRadius) * eraserWidthModifier -\n                        (eraserWidthModifier - 1);\n\n                    const alpha = Math.min(\n                        Math.floor(alphaPct * 255),\n                        imageData.data[index + 3]\n                    );\n                    imageData.data[index + 3] = alpha;\n                }\n            }\n        }\n        this.renderer.setEditImage(imageData);\n    }\n\n    private updateCursor(x: number, y: number) {\n        if (this.state == \"erase\" && this.selectedImageData) {\n            const selectionOverlay = this.renderer.getSelectionOverlay()!;\n            const baseWidth = Math.min(\n                selectionOverlay.width,\n                selectionOverlay.height\n            );\n            const featherWidth = Math.floor(baseWidth / 8);\n            this.renderer.setCursor({\n                color: \"white\",\n                radius: featherWidth * eraserWidthModifier,\n                type: \"circle\",\n                x,\n                y,\n            });\n        } else {\n            this.renderer.setCursor({\n                color: \"white\",\n                radius: 10,\n                type: \"crosshairs\",\n                x,\n                y,\n            });\n        }\n    }\n\n    onMouseMove(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        if (this.state == \"select\") {\n            this.selectionTool.onMouseMove(event);\n            return;\n        }\n        let { x, y } = this.zoomHelper.translateMouseToCanvasCoordinates(\n            event.nativeEvent.offsetX,\n            event.nativeEvent.offsetY\n        );\n        if (this.panning) {\n            this.zoomHelper.onPan(event);\n        }\n\n        this.updateCursor(x, y);\n        if (this.erasing) {\n            this.erasePoint(x, y);\n        }\n    }\n\n    onMouseUp(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        if (this.state == \"select\") {\n            this.selectionTool.onMouseUp(event);\n        }\n        this.panning = false;\n        this.erasing = false;\n    }\n\n    onMouseLeave(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>): void {\n        if (this.state == \"select\") {\n            this.selectionTool.onMouseLeave(event);\n        }\n        this.panning = false;\n        this.erasing = false;\n    }\n\n    onWheel(event: WheelEvent) {\n        this.zoomHelper.onWheel(event);\n        let { x, y } = this.zoomHelper.translateMouseToCanvasCoordinates(\n            event.offsetX,\n            event.offsetY\n        );\n        this.updateCursor(x, y);\n    }\n\n    updateArgs(args: any) {\n        args = {\n            ...this.getArgs(),\n            ...args,\n        };\n        this.prompt = args.prompt || \"\";\n        this.negativePrompt = args.negativePrompt || \"\";\n        this.model = args.model || \"Epic Diffusion\";\n        this.count = args.count || 4;\n        this.variationStrength = args.variationStrength || 0.75;\n        console.log(\"updateArgs\", args);\n    }\n\n    onChangeState(handler: (state: EnhanceToolState) => void) {\n        this.stateHandler = handler;\n    }\n\n    onShowSelectionControls(listener: (show: boolean) => void): void {\n        this.selectionControlsListener = listener;\n    }\n\n    onProgress(listener: (progress: number) => void): void {\n        this.progressListener = listener;\n    }\n\n    private newId(): string {\n        return `${this.idCounter++}`;\n    }\n\n    private loadImageData(\n        api: AIBrushApi,\n        imageId: string,\n        baseImage: APIImage,\n        baseImageData: ImageData,\n        selectionOverlay: Rect\n    ): Promise<ImageData> {\n        return new Promise((resolve, reject) => {\n            // TODO: use anonymous client to load image data instead with download urls\n            api.getImageData(imageId, {\n                responseType: \"arraybuffer\",\n            }).then((resp) => {\n                const binaryImageData = Buffer.from(resp.data, \"binary\");\n                const base64ImageData = binaryImageData.toString(\"base64\");\n                const src = `data:image/png;base64,${base64ImageData}`;\n                const imageElement = new Image();\n                imageElement.src = src;\n                imageElement.onload = () => {\n                    const canvas = document.createElement(\"canvas\");\n                    canvas.width = selectionOverlay.width;\n                    canvas.height = selectionOverlay.height;\n                    const ctx = canvas.getContext(\"2d\");\n                    if (!ctx) {\n                        reject(new Error(\"Failed to get canvas context\"));\n                        return;\n                    }\n                    ctx.drawImage(\n                        imageElement,\n                        0,\n                        0,\n                        selectionOverlay.width,\n                        selectionOverlay.height\n                    );\n                    const imageData = ctx.getImageData(\n                        0,\n                        0,\n                        selectionOverlay.width,\n                        selectionOverlay.height\n                    );\n                    const id = this.newId();\n                    this.worker\n                        .processRequest({\n                            id,\n                            alpha: false,\n                            feather: true,\n                            height: this.renderer.getHeight(),\n                            width: this.renderer.getWidth(),\n                            pixels: imageData.data,\n                            selectionOverlay,\n                        })\n                        .then((resp) => {\n                            const updatedImageData = new ImageData(\n                                resp.pixels,\n                                imageData.width,\n                                imageData.height\n                            );\n                            resolve(updatedImageData);\n                        });\n                    // remove canvas\n                    canvas.remove();\n                };\n            });\n        });\n    }\n\n    cancel() {\n        if (this.state == \"erase\") {\n            this.state = \"confirm\";\n            this.selectedImageData =\n                this.imageData[this.selectedImageDataIndex];\n            this.renderer.setEditImage(this.selectedImageData);\n        } else {\n            if (this.selectSupported()) {\n                this.state = \"select\";\n            } else {\n                this.state = \"default\";\n            }\n            this.imageData = [];\n            this.renderer.setEditImage(null);\n            this.dirty = false;\n        }\n    }\n\n    erase() {\n        this.state = \"erase\";\n    }\n\n    private updateProgress(progress: number) {\n        if (this.progressListener) {\n            this.progressListener(progress);\n        }\n    }\n\n    async submit(api: AIBrushApi, apisocket: ApiSocket, image: APIImage) {\n        this.dirty = true;\n        this.notifyError(null);\n        const selectionOverlay = this.renderer.getSelectionOverlay();\n        const encodedImage = this.renderer.getEncodedImage(selectionOverlay!);\n        if (!encodedImage) {\n            console.error(\"No selection\");\n            return;\n        }\n        const baseImageData = this.renderer.getImageData(selectionOverlay!)!;\n        const input: CreateImageInput = defaultArgs();\n        input.label = \"\";\n        input.encoded_image = encodedImage;\n        input.parent = image.id;\n        input.params.prompt = this.prompt || image.params.prompt;\n        input.params.negative_prompt = this.negativePrompt || image.params.negative_prompt;\n        input.params.denoising_strength = this.variationStrength;\n        input.count = this.count;\n        // TODO: allow switching model\n        input.model = this.model;\n        input.nsfw = image.nsfw;\n\n        input.params.width = selectionOverlay!.width;\n        input.params.height = selectionOverlay!.height;\n        // round width and height up to the nearest multiple of 64\n        input.params.width = Math.ceil(input.params.width / 64) * 64;\n        input.params.height = Math.ceil(input.params.height / 64) * 64;\n        input.temporary = true;\n\n        this.state = \"uploading\";\n        let resp: ImageList | null = null;\n        this.updateProgress(0);\n        try {\n            resp = (\n                await api.createImage(input, {\n                    onUploadProgress: (progressEvent: any) => {\n                        console.log(\"progressEvent\", progressEvent)\n                        const progress =\n                            progressEvent.loaded / progressEvent.total;\n\n                        // this.progressListener(progress);\n                        this.updateProgress(progress);\n                    },\n                })\n            ).data;\n        } catch (err) {\n            console.error(\"Error creating images\", err);\n            this.notifyError(\"Failed to create image\");\n            this.state = \"default\";\n            return;\n        }\n        this.state = \"processing\";\n        let newImages: Array<ImageWithData> | undefined = resp.images;\n        if (!newImages || newImages.length === 0) {\n            this.state = \"default\";\n            throw new Error(\"No images returned\");\n        }\n        let completed = false;\n\n        let lastUpdate = moment();\n\n        apisocket.onMessage(async (msg: string) => {\n            const img = JSON.parse(msg) as any;\n            if (\n                img.type === NOTIFICATION_IMAGE_UPDATED &&\n                img.status === StatusEnum.Completed\n            ) {\n                lastUpdate = moment();\n                for (let i = 0; i < newImages!.length; i++) {\n                    if (newImages![i].id === img.id) {\n                        const imageData = await this.loadImageData(\n                            api,\n                            newImages![i].id,\n                            image,\n                            baseImageData,\n                            selectionOverlay!\n                        );\n                        newImages![i].data = imageData;\n                        newImages![i].status = StatusEnum.Completed;\n                    }\n                }\n            } else if (img.status == StatusEnum.Error) {\n                for (let i = 0; i < newImages!.length; i++) {\n                    if (newImages![i].id === img.id) {\n                        newImages![i].status = StatusEnum.Error;\n                    }\n                }\n            }\n        });\n        try {\n            let startTime = moment();\n            let lastCheck = moment();\n\n            while (!completed) {\n                let completeCount = 0;\n                await sleep(1000);\n                // poll for completion\n                for (let i = 0; i < newImages!.length; i++) {\n                    if (\n                        newImages![i].status === StatusEnum.Completed ||\n                        newImages![i].status === StatusEnum.Error\n                    ) {\n                        completeCount++;\n                        continue;\n                    }\n                }\n                this.updateProgress(completeCount / newImages!.length);\n                if (completeCount === newImages!.length) {\n                    completed = true;\n                }\n\n                // fallback if sockets don't catch one\n                if (moment().diff(lastCheck, \"seconds\") > 10) {\n                    // get list of ids that aren't completed and batch get them.\n                    const pendingIds = newImages\n                        .filter(\n                            (img) =>\n                                img.status === StatusEnum.Pending ||\n                                img.status === StatusEnum.Processing\n                        )\n                        .map((img) => img.id);\n                    console.log(\"Checking pending images\", pendingIds);\n                    const updatedImagesResult = await api.batchGetImages({\n                        ids: pendingIds,\n                    });\n                    const updatedImages = updatedImagesResult.data.images;\n                    const byId = updatedImages!.reduce((acc, img) => {\n                        acc[img.id] = img;\n                        return acc;\n                    }, {} as Record<string, APIImage>);\n                    for (let i = 0; i < newImages!.length; i++) {\n                        if (\n                            newImages![i].status === StatusEnum.Pending ||\n                            newImages![i].status === StatusEnum.Processing\n                        ) {\n                            const updated = byId[newImages![i].id];\n                            if (updated) {\n                                newImages![i].status = updated.status;\n                                if (\n                                    updated.status === StatusEnum.Completed\n                                ) {\n                                    lastUpdate = moment();\n                                    const imageData = await this.loadImageData(\n                                        api,\n                                        newImages![i].id,\n                                        image,\n                                        baseImageData,\n                                        selectionOverlay!\n                                    );\n                                    newImages![i].data = imageData;\n                                }\n                            }\n                        }\n                    }\n                    lastCheck = moment();\n                }\n                // timeout of 2 minutes\n                if (\n                    (lastUpdate.isAfter(startTime) &&\n                        moment().diff(lastUpdate, \"seconds\") > 30) ||\n                    moment().diff(startTime, \"minutes\") > 2\n                ) {\n                    completed = true;\n                }\n            }\n        } finally {\n            apisocket.onMessage(undefined);\n        }\n\n        // sort images by score descending\n        newImages!.sort((a, b) => {\n            return b.score - a.score;\n        });\n        newImages = newImages!.filter((img) => {\n            return img.status === StatusEnum.Completed;\n        });\n\n        this.imageData = [];\n        for (let i = 0; i < newImages!.length; i++) {\n            if (newImages![i].data) {\n                this.imageData.push(newImages![i].data as ImageData);\n            }\n        }\n        if (this.imageData.length === 0) {\n            this.state = \"default\";\n            this.notifyError(\"No images returned\");\n            return;\n        }\n        this.renderer.setEditImage(this.imageData[0]);\n        this.selectedImageDataIndex = 0;\n        this.selectedImageData = this.imageData[0];\n        this.state = \"confirm\";\n    }\n\n    select(direction: \"left\" | \"right\") {\n        if (direction == \"left\") {\n            this.selectedImageDataIndex--;\n            if (this.selectedImageDataIndex < -1) {\n                this.selectedImageDataIndex = this.imageData.length - 1;\n            }\n        }\n        if (direction == \"right\") {\n            this.selectedImageDataIndex++;\n            if (this.selectedImageDataIndex >= this.imageData.length) {\n                this.selectedImageDataIndex = -1;\n            }\n        }\n        if (this.selectedImageDataIndex === -1) {\n            this.selectedImageData = null;\n        } else {\n            this.selectedImageData =\n                this.imageData[this.selectedImageDataIndex];\n        }\n        this.renderer.setEditImage(this.selectedImageData);\n    }\n\n    onSaveImage(listener: (encodedImage: string, args?: any) => void): void {\n        this.saveListener = listener;\n    }\n\n    confirm() {\n        this.renderer.commitSelection();\n        if (this.selectSupported()) {\n            this.state = \"select\";\n        } else {\n            this.state = \"default\";\n        }\n        this.imageData = [];\n        const encodedImage = this.renderer.getEncodedImage(null);\n        if (encodedImage && this.saveListener) {\n            this.saveListener(encodedImage, {\n                phrases: [this.prompt],\n                negative_phrases: [this.negativePrompt],\n                model: this.model,\n            });\n        }\n        this.dirty = false;\n    }\n\n    destroy(): boolean {\n        this.renderer.setCursor(undefined);\n        this.worker.destroy();\n        return true;\n    }\n}\n\ninterface ControlsProps {\n    api: AIBrushApi;\n    apisocket: ApiSocket;\n    image: APIImage;\n    renderer: Renderer;\n    tool: EnhanceTool;\n}\n\nexport const EnhanceControls: FC<ControlsProps> = ({\n    api,\n    apisocket,\n    image,\n    renderer,\n    tool,\n}) => {\n    const [count, setCount] = useState(4);\n    const [dirty, setDirty] = useState(false);\n    const [variationStrength, setVariationStrength] = useState(0.35);\n    const [prompt, setPrompt] = useState(image.params.prompt || \"\");\n    const [negativePrompt, setNegativePrompt] = useState(image.params.negative_prompt || \"\");\n    const [model, setModel] = useState(\n        image.model == \"swinir\" || image.model == \"stable_diffusion\"\n            ? \"Epic Diffusion\"\n            : image.model\n    );\n    const [state, setState] = useState<EnhanceToolState>(tool.state);\n    const [progress, setProgress] = useState(0);\n    const [error, setError] = useState<string | null>(null);\n\n    tool.onChangeState(setState);\n    tool.onProgress(setProgress);\n    tool.onError(setError);\n    tool.onDirty(setDirty);\n\n    if (state == \"processing\" || state == \"uploading\") {\n        return (\n            <div style={{ marginTop: \"16px\" }}>\n                <i className=\"fa fa-spinner fa-spin\"></i>&nbsp; {state === \"processing\" ? \"Enhancing...\" : \"Uploading...\"}\n                <br />\n                <ProgressBar progress={progress} />\n            </div>\n        );\n    }\n\n    return (\n        <div\n            style={{\n                marginTop: \"16px\",\n                marginBottom: \"8px\",\n                marginLeft: \"16px\",\n            }}\n        >\n            {error && (\n                <div className=\"alert alert-danger\" role=\"alert\">\n                    {/* dismiss button */}\n                    <button\n                        type=\"button\"\n                        className=\"close\"\n                        data-dismiss=\"alert\"\n                        aria-label=\"Close\"\n                        onClick={() => setError(null)}\n                    >\n                        <span aria-hidden=\"true\">&times;</span>\n                    </button>\n                    {error}\n                </div>\n            )}\n            {state === \"select\" && (\n                <>\n                    <p>\n                        {/* info icon */}\n                        <i className=\"fa fa-info-circle\"></i>&nbsp; Move the\n                        selection rectangle to the area that you want to enhance\n                    </p>\n                    <SelectionControls\n                        renderer={renderer}\n                        tool={tool.selectionTool}\n                        lockAspectRatio={true}\n                    />\n                </>\n            )}\n            {state === \"default\" && (\n                <>\n                    <p>\n                        {/* info icon */}\n                        <i className=\"fa fa-info-circle\"></i>&nbsp; Confirm the\n                        parameters below and continue\n                    </p>\n                    {/* prompt */}\n                    <div className=\"form-group\">\n                        <label htmlFor=\"prompt\">Prompt</label>\n                        <input\n                            type=\"text\"\n                            className=\"form-control\"\n                            id=\"prompt\"\n                            value={prompt}\n                            onChange={(e) => {\n                                setPrompt(e.target.value);\n                            }}\n                        />\n                        <small className=\"form-text text-muted\">\n                            Customize the text prompt here\n                        </small>\n                    </div>\n                    {/* negative prompt */}\n                    <div className=\"form-group\">\n                        <label htmlFor=\"negative-prompt\">Negative Prompt</label>\n                        <input\n                            type=\"text\"\n                            className=\"form-control\"\n                            id=\"negative-prompt\"\n                            value={negativePrompt}\n                            onChange={(e) => {\n                                setNegativePrompt(e.target.value);\n                            }}\n                        />\n                        <small className=\"form-text text-muted\">\n                            Customize the negative text prompt here\n                        </small>\n                    </div>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"count\">Count: {count}</label>\n                        <input\n                            type=\"range\"\n                            className=\"form-control-range\"\n                            id=\"count\"\n                            min=\"1\"\n                            max=\"10\"\n                            step=\"1\"\n                            value={count}\n                            onChange={(e) => {\n                                setCount(parseInt(e.target.value));\n                            }}\n                        />\n                        <small className=\"form-text text-muted\">\n                            Number of enhancement options\n                        </small>\n                    </div>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"variation-strength\">\n                            Variation Strength:{\" \"}\n                            {Math.round(variationStrength * 100)}%\n                        </label>\n                        <input\n                            type=\"range\"\n                            className=\"form-control-range\"\n                            id=\"variation-strength\"\n                            min=\"0\"\n                            max=\"1\"\n                            step=\"0.05\"\n                            value={variationStrength}\n                            onChange={(e) => {\n                                setVariationStrength(\n                                    parseFloat(e.target.value)\n                                );\n                            }}\n                        />\n                        <small className=\"form-text text-muted\">\n                            How much variation to use\n                        </small>\n                    </div>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"model\">Model</label>\n                        <select\n                            className=\"form-control\"\n                            id=\"model\"\n                            value={model}\n                            onChange={(e) => setModel(e.target.value)}\n                        >\n                            {supportedModels.map((model) => (\n                                <option value={model} key={`model-${model}`}>\n                                    {model}\n                                </option>\n                            ))}\n                        </select>\n                        <small className=\"form-text text-muted\">\n                            Select the model to use\n                        </small>\n                    </div>\n                </>\n            )}\n            {state === \"erase\" && (\n                <p>\n                    {/* info icon */}\n                    <i className=\"fa fa-info-circle\"></i>&nbsp; Erase any\n                    undesired sections before saving\n                </p>\n            )}\n\n            <div className=\"form-group\">\n                {state === \"select\" && (\n                    <button\n                        type=\"button\"\n                        className=\"btn btn-primary btn-sm\"\n                        onClick={() => {\n                            tool.state = \"default\";\n                        }}\n                        style={{ marginRight: \"8px\" }}\n                    >\n                        {/* magic icon */}\n                        <i className=\"fa fa-magic\"></i>&nbsp; Continue\n                    </button>\n                )}\n                {((state === \"default\" && tool.selectSupported()) ||\n                    state === \"confirm\" ||\n                    state === \"erase\") && (\n                    <button\n                        className=\"btn btn-primary btn-sm\"\n                        onClick={() => {\n                            tool.cancel();\n                        }}\n                        style={{ marginRight: \"8px\" }}\n                    >\n                        {/* cancel icon */}\n                        <i className=\"fa fa-times\"></i>&nbsp; Revert\n                    </button>\n                )}\n                {(state === \"confirm\" || state === \"erase\") && (\n                    <button\n                        className=\"btn btn-primary btn-sm\"\n                        onClick={() => tool.confirm()}\n                        style={{ marginRight: \"8px\" }}\n                    >\n                        <i className=\"fa fa-save\"></i>&nbsp; Save\n                    </button>\n                )}\n                {state === \"confirm\" && (\n                    <>\n                        <button\n                            className=\"btn btn-primary btn-sm\"\n                            onClick={() => tool.erase()}\n                            style={{ marginRight: \"8px\" }}\n                        >\n                            <i className=\"fa fa-eraser\"></i>&nbsp; Erase\n                        </button>\n                    </>\n                )}\n                {state === \"default\" && (\n                    <button\n                        className=\"btn btn-primary btn-sm\"\n                        onClick={() => {\n                            tool.updateArgs({\n                                count,\n                                variationStrength,\n                                prompt,\n                                negativePrompt,\n                                model,\n                            });\n                            tool.submit(api, apisocket, image);\n                        }}\n                        style={{ marginRight: \"8px\" }}\n                    >\n                        <i className=\"fa fa-magic\"></i>&nbsp; Enhance\n                    </button>\n                )}\n            </div>\n            <Prompt\n                when={dirty}\n                message=\"Are you sure you want to leave? Your changes will be lost.\"\n            />\n        </div>\n    );\n};\n","import React, { FC, useState, useEffect } from \"react\";\nimport { Renderer } from \"./renderer\";\nimport { BaseTool, Tool } from \"./tool\";\nimport { ZoomHelper } from \"./zoomHelper\";\n\nexport class SmudgeTool extends BaseTool implements Tool {\n    private brushSize = 10;\n    private brushOpacity = 0.2;\n\n    private lastX = 0;\n    private lastY = 0;\n    private panning = false;\n    private smudging = false;\n    private _dirty = false;\n\n    set dirty(dirty: boolean) {\n        this._dirty = dirty;\n        if (this.dirtyListener) {\n            this.dirtyListener(dirty);\n        }\n    }\n\n    get dirty() {\n        return this._dirty;\n    }\n\n    private dirtyListener?: (dirty: boolean) => void;\n\n    constructor(renderer: Renderer) {\n        super(renderer, \"smudge\");\n    }\n\n    private sync() {\n        this.renderer.setCursor({\n            type: \"circle\",\n            color: \"white\",\n            radius: this.brushSize / 2,\n            x: this.lastX,\n            y: this.lastY,\n        });\n    }\n\n    updateArgs(args: any) {\n        super.updateArgs(args);\n        this.brushSize = args.brushSize || 10;\n        this.brushOpacity = args.brushOpacity || 0.2;\n        this.sync();\n    }\n\n    onMouseMove(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>): void {\n        let { x, y } = this.zoomHelper.translateMouseToCanvasCoordinates(\n            event.nativeEvent.offsetX,\n            event.nativeEvent.offsetY\n        );\n\n        if (this.panning) {\n            this.zoomHelper.onPan(event);\n        } else if (this.smudging) {\n            this.renderer.smudgeLine(\n                this.lastX,\n                this.lastY,\n                x,\n                y,\n                this.brushSize,\n                this.brushOpacity\n            );\n            this.dirty = true;\n        }\n\n        this.lastX = x;\n        this.lastY = y;\n        this.sync();\n    }\n\n    onWheel(event: WheelEvent) {\n        this.zoomHelper.onWheel(event);\n        this.sync();\n    }\n\n    onMouseDown(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        if (event.button === 0) {\n            this.smudging = true;\n            if (!this.dirty) {\n                this.renderer.copyEditImageFromBaseImage();\n            }\n            this.dirty = true;\n            let { x, y } = this.zoomHelper.translateMouseToCanvasCoordinates(\n                event.nativeEvent.offsetX,\n                event.nativeEvent.offsetY\n            );\n            this.lastX = x;\n            this.lastY = y;\n            this.sync();\n        } else if (event.button === 1) {\n            this.panning = true;\n        }\n        this.sync();\n    }\n\n    onMouseUp(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        this.smudging = false;\n        this.panning = false;\n        this.sync();\n    }\n\n    onSaveImage(listener: (encodedImage: string) => void): void {\n        this.saveListener = listener;\n    }\n\n    onDirty(listener: (dirty: boolean) => void): void {\n        this.dirtyListener = listener;\n    }\n\n    cancel() {\n        // kind of a hack, clears the selection layer\n        this.renderer.setEditImage(null);\n        this.dirty = false;\n    }\n\n    confirm() {\n        this.renderer.commitSelection();\n        const encodedImage = this.renderer.getEncodedImage(null);\n        if (encodedImage && this.saveListener) {\n            this.saveListener(encodedImage);\n        }\n        this.dirty = false;\n    }\n\n    destroy(): boolean {\n        if (this.dirty) {\n            this.renderer.commitSelection();\n        }\n        return true;\n    }\n}\n\ninterface Props {\n    renderer: Renderer;\n    tool: SmudgeTool;\n}\n\nexport const SmudgeControls: FC<Props> = ({ renderer, tool }) => {\n    const [brushSize, setBrushSize] = useState(10);\n    const [brushOpacity, setBrushOpacity] = useState(0.2);\n    const [dirty, setDirty] = useState(false);\n\n    tool.onDirty(setDirty);\n\n    useEffect(() => {\n        tool.updateArgs({\n            brushSize,\n            brushOpacity,\n        });\n    }, [brushSize, brushOpacity]);\n\n    return (\n        <div style={{ marginTop: \"16px\" }}>\n            <div className=\"form-group\">\n                <label style={{ width: \"100%\" }}>\n                    Brush size\n                    <small\n                        className=\"form-text text-muted\"\n                        style={{ float: \"right\" }}\n                    >\n                        {brushSize}px\n                    </small>\n                </label>\n                <input\n                    type=\"range\"\n                    className=\"form-control-range\"\n                    min=\"1\"\n                    max=\"100\"\n                    value={brushSize}\n                    onChange={(e) => setBrushSize(parseInt(e.target.value))}\n                />\n            </div>\n            <div className=\"form-group\">\n                <label style={{ width: \"100%\" }}>\n                    Brush opacity\n                    <small\n                        className=\"form-text text-muted\"\n                        style={{ float: \"right\" }}\n                    >\n                        {Math.round(brushOpacity * 100)}%\n                    </small>\n                </label>\n                <input\n                    type=\"range\"\n                    className=\"form-control-range\"\n                    min=\"0\"\n                    max=\"1\"\n                    step=\"0.01\"\n                    value={brushOpacity}\n                    onChange={(e) =>\n                        setBrushOpacity(parseFloat(e.target.value))\n                    }\n                />\n            </div>\n            <div\n                className=\"form-group\"\n                style={{\n                    marginTop: \"16px\",\n                    visibility: dirty ? \"visible\" : \"hidden\",\n                }}\n            >\n                <button\n                    className=\"btn btn-secondary\"\n                    onClick={() => tool.cancel()}\n                >\n                    Revert\n                </button>\n                <button\n                    className=\"btn btn-primary\"\n                    onClick={() => tool.confirm()}\n                    style={{ marginLeft: \"8px\" }}\n                >\n                    Save\n                </button>\n            </div>\n        </div>\n    );\n};\n","import React, { FC, useState, useEffect, useRef } from \"react\";\nimport { Prompt } from \"react-router\";\n\nimport { sleep } from \"../../lib/sleep\";\nimport { defaultArgs } from \"../../components/ImagePrompt\";\nimport { Tool, BaseTool } from \"./tool\";\nimport { Renderer } from \"./renderer\";\nimport { SelectionTool } from \"./selection-tool\";\nimport { Cursor, Rect } from \"./models\";\nimport {\n    AIBrushApi,\n    CreateImageInput,\n    Image as APIImage,\n    ImageList,\n    StatusEnum,\n} from \"../../client\";\nimport { ZoomHelper } from \"./zoomHelper\";\nimport { getClosestAspectRatio } from \"../../lib/aspecRatios\";\nimport { getUpscaleLevel } from \"../../lib/upscale\";\nimport {\n    applyAlphaMask,\n    featherEdges,\n    ImageUtilWorker,\n} from \"../../lib/imageutil\";\nimport { ApiSocket, NOTIFICATION_IMAGE_UPDATED } from \"../../lib/apisocket\";\nimport moment from \"moment\";\nimport { ProgressBar } from \"../../components/ProgressBar\";\n\ntype InpaintToolState =\n    | \"select\"\n    | \"erase\"\n    | \"inpaint\"\n    | \"uploading\"\n    | \"processing\"\n    | \"confirm\"\n    | undefined;\n\ninterface ImageWithData extends APIImage {\n    data?: ImageData;\n}\n\nexport class InpaintTool extends BaseTool implements Tool {\n    private selectionTool: SelectionTool;\n    private prompt: string = \"\";\n    private negativePrompt: string = \"\";\n    private count: number = 4;\n    private variationStrength: number = 0.35;\n    private brushSize: number = 10;\n    private _dirty = false;\n    private worker: ImageUtilWorker;\n    private idCounter = 0;\n\n    private _state: InpaintToolState;\n    private stateHandler: (state: InpaintToolState) => void = () => {};\n    private selectionControlsListener: (show: boolean) => void = () => {};\n\n    private imageData: Array<ImageData> = [];\n    private selectedImageDataIndex: number = -1;\n    private selectedImageData: ImageData | null = null;\n    private panning = false;\n    private erasing = false;\n    private progressListener?: (progress: number) => void;\n    private errorListener?: (error: string | null) => void;\n    private dirtyListener?: (dirty: boolean) => void;\n\n    set dirty(dirty: boolean) {\n        this._dirty = dirty;\n        if (this.dirtyListener) {\n            this.dirtyListener(dirty);\n        }\n    }\n\n    get dirty() {\n        return this._dirty;\n    }\n\n    private newId(): string {\n        return `${this.idCounter++}`;\n    }\n\n    onError(handler: (error: string | null) => void) {\n        this.errorListener = handler;\n    }\n\n    private notifyError(error: string | null) {\n        if (this.errorListener) {\n            this.errorListener(error);\n        }\n    }\n\n    get state(): InpaintToolState {\n        return this._state;\n    }\n\n    set state(state: InpaintToolState) {\n        if (state != this._state) {\n            if (this._state == \"select\") {\n                this.selectionTool.destroy();\n            }\n            if (this._state === \"erase\") {\n                this.renderer.setCursor(undefined);\n            }\n            this._state = state;\n            this.stateHandler(state);\n\n            if (state == \"confirm\") {\n                this.selectionControlsListener(true);\n            } else {\n                this.selectionControlsListener(false);\n                if (state == \"select\") {\n                    const imageWidth = this.renderer.getWidth();\n                    const imageHeight = this.renderer.getHeight();\n                    const selectionWidth = Math.min(\n                        imageWidth,\n                        imageHeight,\n                        512\n                    );\n                    this.selectionTool.updateArgs({\n                        selectionOverlay: {\n                            x: 0,\n                            y: 0,\n                            width: selectionWidth,\n                            height: selectionWidth,\n                        },\n                    });\n                }\n            }\n        }\n    }\n\n    selectSupported(): boolean {\n        // return !(\n        //     this.renderer.getWidth() == this.renderer.getHeight() &&\n        //     getUpscaleLevel(\n        //         this.renderer.getWidth(),\n        //         this.renderer.getHeight()\n        //     ) === 0\n        // );\n        return true;\n    }\n\n    constructor(renderer: Renderer) {\n        super(renderer, \"inpaint\");\n        this.selectionTool = new SelectionTool(renderer);\n        if (this.selectSupported()) {\n            this.state = \"select\";\n            this.selectionTool.updateArgs({\n                outpaint: this.getArgs().outpaint,\n            });\n        } else {\n            this.state = \"erase\";\n        }\n        this.worker = new ImageUtilWorker();\n    }\n\n    onMouseDown(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        if (this.state == \"select\") {\n            this.selectionTool.onMouseDown(event);\n            return;\n        }\n        let { x, y } = this.zoomHelper.translateMouseToCanvasCoordinates(\n            event.nativeEvent.offsetX,\n            event.nativeEvent.offsetY\n        );\n        if (event.button === 1) {\n            this.panning = true;\n            return;\n        }\n        if (this.state == \"erase\") {\n            this.erasing = true;\n            this.erasePoint(x, y);\n        }\n    }\n\n    private erasePoint(x: number, y: number) {\n        if (!this.dirty) {\n            this.dirty = true;\n        }\n        this.renderer.erasePoint(x, y, this.brushSize);\n        this.renderer.render();\n    }\n\n    private updateCursor(x: number, y: number) {\n        if (this.state == \"erase\") {\n            this.renderer.setCursor({\n                color: \"white\",\n                radius: this.brushSize / 2,\n                type: \"circle\",\n                x,\n                y,\n            });\n        } else {\n            this.renderer.setCursor({\n                color: \"white\",\n                radius: 10,\n                type: \"crosshairs\",\n                x,\n                y,\n            });\n        }\n    }\n\n    onMouseMove(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        let { x, y } = this.zoomHelper.translateMouseToCanvasCoordinates(\n            event.nativeEvent.offsetX,\n            event.nativeEvent.offsetY\n        );\n        this.updateCursor(x, y);\n        if (this.state == \"select\") {\n            this.selectionTool.onMouseMove(event);\n            return;\n        }\n\n        if (this.panning) {\n            this.zoomHelper.onPan(event);\n        }\n\n        if (this.erasing) {\n            this.erasePoint(x, y);\n        }\n    }\n\n    onMouseUp(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        if (this.state == \"select\") {\n            this.selectionTool.onMouseUp(event);\n        }\n        this.panning = false;\n        this.erasing = false;\n    }\n\n    onMouseLeave(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>): void {\n        if (this.state == \"select\") {\n            this.selectionTool.onMouseLeave(event);\n        }\n        this.panning = false;\n        this.erasing = false;\n    }\n\n    onWheel(event: WheelEvent) {\n        this.zoomHelper.onWheel(event);\n        let { x, y } = this.zoomHelper.translateMouseToCanvasCoordinates(\n            event.offsetX,\n            event.offsetY\n        );\n        this.updateCursor(x, y);\n    }\n\n    updateArgs(args: any) {\n        args = {\n            ...this.getArgs(),\n            ...args,\n        };\n        super.updateArgs(args);\n        this.prompt = args.prompt || \"\";\n        this.negativePrompt = args.negativePrompt || \"\";\n        this.count = args.count || 4;\n        this.variationStrength = args.variationStrength || 0.75;\n        this.brushSize = args.brushSize || 10;\n\n        this.updateCursor(\n            this.renderer.getWidth() / 2,\n            this.renderer.getHeight() / 2\n        );\n        this.selectionTool.updateArgs({\n            outpaint: args.outpaint,\n        });\n    }\n\n    onChangeState(handler: (state: InpaintToolState) => void) {\n        this.stateHandler = handler;\n    }\n\n    onShowSelectionControls(listener: (show: boolean) => void): void {\n        this.selectionControlsListener = listener;\n    }\n\n    onProgress(listener: (progress: number) => void): void {\n        this.progressListener = listener;\n    }\n\n    private loadImageData(\n        api: AIBrushApi,\n        imageId: string,\n        alphaMask: ImageData,\n        baseImage: APIImage,\n        selectionOverlay: Rect\n    ): Promise<ImageData> {\n        return new Promise((resolve, reject) => {\n            api.getImageData(imageId, {\n                responseType: \"arraybuffer\",\n            }).then((resp) => {\n                const binaryImageData = Buffer.from(resp.data, \"binary\");\n                const base64ImageData = binaryImageData.toString(\"base64\");\n                const src = `data:image/png;base64,${base64ImageData}`;\n                const imageElement = new Image();\n                imageElement.src = src;\n                imageElement.onload = () => {\n                    const canvas = document.createElement(\"canvas\");\n                    canvas.width = selectionOverlay.width;\n                    canvas.height = selectionOverlay.height;\n                    const ctx = canvas.getContext(\"2d\");\n                    if (!ctx) {\n                        reject(new Error(\"Failed to get canvas context\"));\n                        return;\n                    }\n                    ctx.drawImage(\n                        imageElement,\n                        0,\n                        0,\n                        selectionOverlay.width,\n                        selectionOverlay.height\n                    );\n                    const imageData = ctx.getImageData(\n                        0,\n                        0,\n                        selectionOverlay.width,\n                        selectionOverlay.height\n                    );\n\n                    const id = this.newId();\n                    this.worker\n                        .processRequest({\n                            id,\n                            alpha: true,\n                            alphaPixels: alphaMask.data,\n                            feather: true,\n                            height: this.renderer.getHeight(),\n                            width: this.renderer.getWidth(),\n                            pixels: imageData.data,\n                            selectionOverlay,\n                            featherWidth: 10,\n                        })\n                        .then((resp) => {\n                            const updatedImageData = new ImageData(\n                                resp.pixels,\n                                imageData.width,\n                                imageData.height\n                            );\n                            resolve(updatedImageData);\n                        });\n                    // remove canvas\n                    canvas.remove();\n                };\n            });\n        });\n    }\n\n    cancel() {\n        if (this.selectSupported()) {\n            this.state = \"select\";\n        } else {\n            this.state = \"erase\";\n        }\n        this.renderer.snapshot();\n        this.renderer.undo();\n        this.renderer.clearRedoStack();\n        this.imageData = [];\n        this.renderer.setEditImage(null);\n        this.dirty = false;\n    }\n\n    private updateProgress(progress: number) {\n        if (this.progressListener) {\n            this.progressListener(progress);\n        }\n    }\n\n    async submit(\n        api: AIBrushApi,\n        apisocket: ApiSocket,\n        image: APIImage,\n        model: string\n    ) {\n        this.notifyError(null);\n        let selectionOverlay = this.renderer.getSelectionOverlay();\n        if (!selectionOverlay) {\n            console.error(\"No selection\");\n            return;\n        }\n\n        if (this.getArgs().outpaint) {\n            // check if selection overlay is out of renderer bounds (width, height)\n            if (\n                selectionOverlay.x < 0 ||\n                selectionOverlay.y < 0 ||\n                selectionOverlay.x + selectionOverlay.width >\n                    this.renderer.getWidth() ||\n                selectionOverlay.y + selectionOverlay.height >\n                    this.renderer.getHeight()\n            ) {\n                this.renderer.expandToOverlay();\n                selectionOverlay = this.renderer.getSelectionOverlay()!;\n            }\n        }\n\n        // get the erased area, then undo the erase to get the original image\n        const encodedMask = this.renderer.getEncodedMask(selectionOverlay);\n        const maskData = this.renderer.getImageData(selectionOverlay);\n        // hack to restore the image\n        this.renderer.snapshot();\n        this.renderer.undo();\n        this.renderer.clearRedoStack();\n\n        const encodedImage = this.renderer.getEncodedImage(selectionOverlay);\n\n        const input: CreateImageInput = defaultArgs();\n        input.label = \"\";\n        input.encoded_image = encodedImage;\n        input.encoded_mask = encodedMask;\n        input.parent = image.id;\n        // input.phrases = [this.prompt || image.phrases[0]];\n        // input.negative_phrases = [\n        //     this.negativePrompt || image.negative_phrases[0],\n        // ];\n        // input.stable_diffusion_strength = this.variationStrength;\n        input.params.prompt = this.prompt || image.params.prompt;\n        input.params.negative_prompt = this.negativePrompt || image.params.negative_prompt;\n        input.params.denoising_strength = this.variationStrength;\n        input.count = this.count;\n        input.model = model;\n\n        const closestAspectRatio = getClosestAspectRatio(\n            selectionOverlay!.width,\n            selectionOverlay!.height\n        );\n        input.params.width = closestAspectRatio.width;\n        input.params.height = closestAspectRatio.height;\n        input.temporary = true;\n\n        this.state = \"uploading\";\n        let resp: ImageList | null = null;\n        this.updateProgress(0);\n        try {\n            resp = (\n                await api.createImage(input, {\n                    onUploadProgress: (progressEvent: any) => {\n                        this.updateProgress(\n                            progressEvent.loaded / progressEvent.total\n                        );\n                    },\n                })\n            ).data;\n        } catch (err) {\n            console.error(\"Error creating images\", err);\n            this.notifyError(\"Failed to create image\");\n            this.state = \"select\";\n            return;\n        }\n        this.state = \"processing\";\n        this.updateProgress(0);\n        let newImages: Array<ImageWithData> | undefined = resp.images;\n        if (!newImages || newImages.length === 0) {\n            this.state = \"select\";\n            throw new Error(\"No images returned\");\n        }\n        let completed = false;\n        let lastUpdate = moment();\n\n        apisocket.onMessage(async (msg: string) => {\n            console.log(\"inpaint onMessage\", msg);\n            const img = JSON.parse(msg) as any;\n            if (\n                img.type === NOTIFICATION_IMAGE_UPDATED &&\n                img.status === StatusEnum.Completed\n            ) {\n                lastUpdate = moment();\n                for (let i = 0; i < newImages!.length; i++) {\n                    if (newImages![i].id === img.id) {\n                        const imageData = await this.loadImageData(\n                            api,\n                            newImages![i].id,\n                            maskData!,\n                            image,\n                            selectionOverlay!\n                        );\n                        newImages![i].data = imageData;\n                        newImages![i].status = StatusEnum.Completed;\n                    }\n                }\n            } else if (img.status === StatusEnum.Error) {\n                for (let i = 0; i < newImages!.length; i++) {\n                    if (newImages![i].id === img.id) {\n                        newImages![i].status = StatusEnum.Error;\n                    }\n                }\n            }\n        });\n        try {\n            let startTime = moment();\n            let lastCheck = moment();\n            while (!completed) {\n                let completeCount = 0;\n                await sleep(100);\n                // poll for completion\n                for (let i = 0; i < newImages!.length; i++) {\n                    if (\n                        newImages![i].status === StatusEnum.Completed ||\n                        newImages![i].status === StatusEnum.Error\n                    ) {\n                        completeCount++;\n                        continue;\n                    }\n                }\n                this.updateProgress(completeCount / newImages!.length);\n                if (completeCount === newImages!.length) {\n                    completed = true;\n                    continue;\n                }\n\n                // fallback if sockets don't catch one\n                if (moment().diff(lastCheck, \"seconds\") > 10) {\n                    // get list of ids that aren't completed and batch get them.\n                    const pendingIds = newImages\n                        .filter(\n                            (img) =>\n                                img.status === StatusEnum.Pending ||\n                                img.status === StatusEnum.Processing\n                        )\n                        .map((img) => img.id);\n                    console.log(\"Checking pending images\", pendingIds);\n                    const updatedImagesResult = await api.batchGetImages({\n                        ids: pendingIds,\n                    });\n                    const updatedImages = updatedImagesResult.data.images;\n                    const byId = updatedImages!.reduce((acc, img) => {\n                        acc[img.id] = img;\n                        return acc;\n                    }, {} as Record<string, APIImage>);\n                    for (let i = 0; i < newImages!.length; i++) {\n                        if (\n                            newImages![i].status === StatusEnum.Pending ||\n                            newImages![i].status === StatusEnum.Processing\n                        ) {\n                            const updated = byId[newImages![i].id];\n                            if (updated) {\n                                newImages![i].status = updated.status;\n                                if (\n                                    updated.status === StatusEnum.Completed\n                                ) {\n                                    lastUpdate = moment();\n                                    const imageData = await this.loadImageData(\n                                        api,\n                                        newImages![i].id,\n                                        maskData!,\n                                        image,\n                                        selectionOverlay!\n                                    );\n                                    newImages![i].data = imageData;\n                                }\n                            }\n                        }\n                    }\n                    lastCheck = moment();\n                }\n                // timeout of 2 minutes\n                if (\n                    (lastUpdate.isAfter(startTime) &&\n                        moment().diff(lastUpdate, \"seconds\") > 30) ||\n                    moment().diff(startTime, \"minutes\") > 2\n                ) {\n                    completed = true;\n                }\n            }\n        } finally {\n            apisocket.onMessage(undefined);\n        }\n\n        // sort images by score descending\n        newImages!.sort((a, b) => {\n            return b.score - a.score;\n        });\n        newImages = newImages!.filter((img) => {\n            return img.status === StatusEnum.Completed;\n        });\n\n        this.imageData = [];\n        for (let i = 0; i < newImages!.length; i++) {\n            if (newImages![i].data) {\n                this.imageData.push(newImages![i].data as ImageData);\n            }\n        }\n        if (this.imageData.length === 0) {\n            this.state = \"select\";\n            this.notifyError(\"No images returned\");\n            return;\n        }\n        this.renderer.setEditImage(this.imageData[0]);\n        this.selectedImageDataIndex = 0;\n        this.selectedImageData = this.imageData[0];\n        this.state = \"confirm\";\n    }\n\n    onDirty(listener: (dirty: boolean) => void): void {\n        this.dirtyListener = listener;\n    }\n\n    select(direction: \"left\" | \"right\") {\n        if (direction == \"left\") {\n            this.selectedImageDataIndex--;\n            if (this.selectedImageDataIndex < -1) {\n                this.selectedImageDataIndex = this.imageData.length - 1;\n            }\n        }\n        if (direction == \"right\") {\n            this.selectedImageDataIndex++;\n            if (this.selectedImageDataIndex >= this.imageData.length) {\n                this.selectedImageDataIndex = -1;\n            }\n        }\n        if (this.selectedImageDataIndex === -1) {\n            this.selectedImageData = null;\n        } else {\n            this.selectedImageData =\n                this.imageData[this.selectedImageDataIndex];\n        }\n        this.renderer.setEditImage(this.selectedImageData);\n    }\n\n    onSaveImage(listener: (encodedImage: string, args?: any) => void): void {\n        this.saveListener = listener;\n    }\n\n    confirm() {\n        this.renderer.commitSelection();\n\n        this.imageData = [];\n        const encodedImage = this.renderer.getEncodedImage(null);\n        if (encodedImage && this.saveListener) {\n            this.saveListener(encodedImage, {\n                phrases: [this.prompt],\n                negative_phrases: [this.negativePrompt],\n                selection_overlay: this.renderer.getSelectionOverlay(),\n            });\n        }\n        this.dirty = false;\n        if (this.selectSupported()) {\n            this.state = \"select\";\n        } else {\n            this.state = \"erase\";\n        }\n    }\n\n    destroy(): boolean {\n        if (this.dirty) {\n            if (!window.confirm(\"Discard changes?\")) {\n                return false;\n            }\n        }\n        this.renderer.setCursor(undefined);\n        this.renderer.setEditImage(null);\n        this.worker.destroy();\n        return true;\n    }\n}\n\ninterface ControlsProps {\n    api: AIBrushApi;\n    apisocket: ApiSocket;\n    image: APIImage;\n    renderer: Renderer;\n    tool: InpaintTool;\n}\n\nexport const InpaintControls: FC<ControlsProps> = ({\n    api,\n    apisocket,\n    image,\n    renderer,\n    tool,\n}) => {\n    const [count, setCount] = useState(4);\n    const [prompt, setPrompt] = useState(image.params.prompt || \"\");\n    const [negativePrompt, setNegativePrompt] = useState(image.params.negative_prompt || \"\");\n    const [state, setState] = useState<InpaintToolState>(tool.state);\n    const [progress, setProgress] = useState(0);\n    const [error, setError] = useState<string | null>(null);\n    const [brushSize, setBrushSize] = useState(10);\n    const [dirty, setDirty] = useState(false);\n    const [outpaint, setoutpaint] = useState<boolean | undefined>(\n        tool.getArgs().outpaint\n    );\n    const [model, setModel] = useState(\"stable_diffusion_inpainting\");\n\n    useEffect(() => {\n        tool.updateArgs({\n            brushSize,\n        });\n    }, [brushSize]);\n\n    tool.onChangeState(setState);\n    tool.onProgress(setProgress);\n    tool.onError(setError);\n    tool.onDirty(setDirty);\n\n    if (state === \"uploading\" || state === \"processing\") {\n        return (\n            <div style={{ marginTop: \"16px\" }}>\n                <i className=\"fa fa-spinner fa-spin\"></i>&nbsp;{\" \"}\n                {state === \"uploading\" ? \"Uploading...\" : \"Inpainting...\"}\n                <br />\n                <ProgressBar progress={progress} />\n            </div>\n        );\n    }\n    return (\n        <div\n            style={{\n                marginTop: \"16px\",\n                marginBottom: \"8px\",\n                marginLeft: \"16px\",\n            }}\n        >\n            {error && (\n                <div className=\"alert alert-danger\" role=\"alert\">\n                    {/* dismiss button */}\n                    <button\n                        type=\"button\"\n                        className=\"close\"\n                        data-dismiss=\"alert\"\n                        aria-label=\"Close\"\n                        onClick={() => setError(null)}\n                    >\n                        <span aria-hidden=\"true\">&times;</span>\n                    </button>\n                    {error}\n                </div>\n            )}\n            {state === \"select\" && (\n                <>\n                    <p>\n                        {/* info icon */}\n                        <i className=\"fa fa-info-circle\"></i>&nbsp; Move the\n                        selection rectangle to the area that you want to\n                        inpaint. For outpainting, try zooming out.\n                    </p>\n                    <div className=\"form-group\">\n                        {/* allow outpaint checkbox */}\n                        <div className=\"form-check\">\n                            <input\n                                className=\"form-check-input\"\n                                type=\"checkbox\"\n                                id=\"allowoutpaint\"\n                                checked={!!outpaint}\n                                onChange={(e) => {\n                                    setoutpaint(e.target.checked);\n                                    tool.updateArgs({\n                                        outpaint: e.target.checked,\n                                    });\n                                }}\n                            />\n                            <label\n                                className=\"form-check-label\"\n                                htmlFor=\"allowoutpaint\"\n                            >\n                                Allow outpainting\n                            </label>\n                        </div>\n                    </div>\n                </>\n            )}\n\n            {state === \"erase\" && (\n                <>\n                    <p>\n                        {/* info icon */}\n                        <i className=\"fa fa-info-circle\"></i>&nbsp; Erase the\n                        area that you want to inpaint.\n                    </p>\n                    <div className=\"form-group\">\n                        <label style={{ width: \"100%\" }}>\n                            Brush size\n                            <small\n                                className=\"form-text text-muted\"\n                                style={{ float: \"right\" }}\n                            >\n                                {brushSize}px\n                            </small>\n                        </label>\n                        <input\n                            type=\"range\"\n                            className=\"form-control-range\"\n                            min=\"1\"\n                            max=\"100\"\n                            value={brushSize}\n                            onChange={(e) =>\n                                setBrushSize(parseInt(e.target.value))\n                            }\n                        />\n                    </div>\n                </>\n            )}\n\n            {state === \"inpaint\" && (\n                <>\n                    <p>\n                        {/* info icon */}\n                        <i className=\"fa fa-info-circle\"></i>&nbsp; Confirm the\n                        parameters below and continue\n                    </p>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"prompt\">Prompt</label>\n                        <input\n                            type=\"text\"\n                            className=\"form-control\"\n                            id=\"prompt\"\n                            value={prompt}\n                            onChange={(e) => {\n                                setPrompt(e.target.value);\n                            }}\n                        />\n                        <small className=\"form-text text-muted\">\n                            Customize the text prompt here\n                        </small>\n                    </div>\n                    {/* negative prompt */}\n                    <div className=\"form-group\">\n                        <label htmlFor=\"negativeprompt\">Negative prompt</label>\n                        <input\n                            type=\"text\"\n                            className=\"form-control\"\n                            value={negativePrompt}\n                            onChange={(e) => {\n                                setNegativePrompt(e.target.value);\n                            }}\n                        />\n                        <small className=\"form-text text-muted\">\n                            Customize the negative text prompt here\n                        </small>\n                    </div>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"count\">Count: {count}</label>\n                        <input\n                            type=\"range\"\n                            className=\"form-control-range\"\n                            id=\"count\"\n                            min=\"1\"\n                            max=\"10\"\n                            step=\"1\"\n                            value={count}\n                            onChange={(e) => {\n                                setCount(parseInt(e.target.value));\n                            }}\n                        />\n                        <small className=\"form-text text-muted\">\n                            Number of inpaint options\n                        </small>\n                    </div>\n                    {/* select model dropdown */}\n                    {/* options: stable_diffusion_inpainting, \"Epic Diffusion\", \"Deliberate\" */}\n                    <div className=\"form-group\">\n                        <label htmlFor=\"model\">Model</label>\n                        <select\n                            className=\"form-control\"\n                            id=\"model\"\n                            value={model}\n                            onChange={(e) => {\n                                setModel(e.target.value);\n                            }}\n                        >\n                            <option value=\"stable_diffusion_inpainting\">\n                                Stable Diffusion\n                            </option>\n\n                            <option value=\"stable_diffusion_2_inpainting\">\n                                Stable Diffusion 2\n                            </option>\n                            <option value=\"dreamlike_diffusion_inpainting\">\n                                Dreamlike Diffusion\n                            </option>\n                            <option value=\"anything_v4_inpainting\">\n                                Anything v4\n                            </option>\n                            <option value=\"Epic Diffusion Inpainting\">\n                                Epic Diffusion\n                            </option>\n                            <option value=\"Deliberate Inpainting\">\n                                Deliberate\n                            </option>\n                        </select>\n                        <small className=\"form-text text-muted\">\n                            Select the inpaint model\n                        </small>\n                    </div>\n                </>\n            )}\n\n            {state === \"confirm\" && (\n                <>\n                    <p>\n                        Use the <i className=\"fa fa-arrow-left\"></i> and{\" \"}\n                        <i className=\"fa fa-arrow-right\"></i> buttons to\n                        navigate between the inpaint options\n                    </p>\n                </>\n            )}\n\n            <div className=\"form-group\">\n                {(dirty ||\n                    state === \"confirm\" ||\n                    (state == \"erase\" && tool.selectSupported()) ||\n                    state == \"inpaint\") && (\n                    <button\n                        style={{ marginRight: \"8px\" }}\n                        className=\"btn btn-primary btn-sm\"\n                        onClick={() => {\n                            tool.cancel();\n                        }}\n                    >\n                        {/* cancel icon */}\n                        <i className=\"fa fa-times\"></i>&nbsp; Revert\n                    </button>\n                )}\n\n                {state === \"confirm\" && (\n                    <>\n                        <button\n                            className=\"btn btn-primary btn-sm\"\n                            onClick={() => tool.confirm()}\n                            style={{ marginRight: \"8px\" }}\n                        >\n                            {/* save icon */}\n                            <i className=\"fa fa-save\"></i>&nbsp; Save\n                        </button>\n                    </>\n                )}\n                {state == \"select\" && (\n                    <button\n                        style={{ marginRight: \"8px\" }}\n                        type=\"button\"\n                        className=\"btn btn-primary btn-sm\"\n                        onClick={() => (tool.state = \"erase\")}\n                    >\n                        <i className=\"fa fa-eraser\"></i>&nbsp; Continue\n                    </button>\n                )}\n                {state == \"erase\" && (\n                    <button\n                        style={{ marginRight: \"8px\" }}\n                        type=\"button\"\n                        className=\"btn btn-primary btn-sm\"\n                        onClick={() => (tool.state = \"inpaint\")}\n                    >\n                        <i className=\"fa fa-paint-brush\"></i>&nbsp; Continue\n                    </button>\n                )}\n                {state === \"inpaint\" && (\n                    <button\n                        style={{ marginRight: \"8px\" }}\n                        className=\"btn btn-primary btn-sm\"\n                        onClick={() => {\n                            tool.updateArgs({\n                                count,\n                                prompt,\n                                negativePrompt,\n                            });\n                            tool.submit(api, apisocket, image, model);\n                        }}\n                    >\n                        {/* paint icon */}\n                        <i className=\"fa fa-paint-brush\"></i>&nbsp; Inpaint\n                    </button>\n                )}\n            </div>\n            <Prompt\n                when={dirty}\n                message=\"Are you sure you want to leave? Your changes will be lost.\"\n            />\n        </div>\n    );\n};\n","// V2 page\nimport { FC, useState, useEffect } from \"react\";\nimport * as uuid from \"uuid\";\nimport axios from \"axios\";\nimport qs from \"qs\";\nimport Dropdown from \"react-bootstrap/Dropdown\";\nimport { useParams, useHistory, Link, useLocation } from \"react-router-dom\";\nimport moment from \"moment\";\nimport ScrollToTop from \"react-scroll-to-top\";\nimport { AIBrushApi } from \"../client\";\nimport { CreateImageInput, StatusEnum, Boost } from \"../client/api\";\nimport { ImageThumbnail } from \"../components/ImageThumbnail\";\nimport { ImagePrompt, defaultArgs } from \"../components/ImagePrompt\";\nimport { BoostWidget } from \"../components/BoostWidget\";\nimport {\n    createEncodedThumbnail,\n    encodedImageToBlob,\n    uploadBlob,\n} from \"../lib/imageutil\";\n\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport { ImagePopup } from \"../components/ImagePopup\";\nimport { BusyModal } from \"../components/BusyModal\";\nimport { PendingImagesThumbnail } from \"../components/PendingImagesThumbnail\";\nimport { PendingImages } from \"../components/PendingImages\";\nimport {\n    ApiSocket,\n    NOTIFICATION_BOOST_UPDATED,\n    NOTIFICATION_IMAGE_DELETED,\n    NOTIFICATION_IMAGE_UPDATED,\n} from \"../lib/apisocket\";\nimport { LocalImagesStore, LocalImage } from \"../lib/localImagesStore\";\nimport { ErrorNotification, SuccessNotification } from \"../components/Alerts\";\nimport { sleep } from \"../lib/sleep\";\nimport { ProgressBar } from \"../components/ProgressBar\";\n\nexport const anonymousClient = axios.create();\ndelete anonymousClient.defaults.headers.common[\"Authorization\"];\n\ninterface Props {\n    api: AIBrushApi;\n    apiSocket: ApiSocket;\n    assetsUrl: string;\n    localImages: LocalImagesStore;\n}\n\nexport const Homepage: FC<Props> = ({\n    api,\n    apiSocket,\n    assetsUrl,\n    localImages,\n}) => {\n    const [creating, setCreating] = useState(false);\n    const [selectedImage, setSelectedImage] = useState<LocalImage | null>(null);\n    const [parentImage, setParentImage] = useState<LocalImage | null>(null);\n    const [loadingParent, setLoadingParent] = useState(false);\n    const [savingImage, setSavingImage] = useState(false);\n    const [uploadProgress, setUploadingProgress] = useState(0);\n\n    const [showPendingImages, setShowPendingImages] = useState(false);\n\n    const [images, setImages] = useState<Array<LocalImage>>([]);\n    const [err, setErr] = useState<string | null>(null);\n    const [errTime, setErrTime] = useState<number>(0);\n    const [success, setSuccess] = useState<string | null>(null);\n    const [successTime, setSuccessTime] = useState<number>(0);\n\n    const [hasMore, setHasMore] = useState<boolean>(true);\n    const [search, setSearch] = useState<string>(\"\");\n    const [searchDebounce, setSearchDebounce] = useState<string>(\"\");\n\n    const [bulkDeleteSelecting, setBulkDeleteSelecting] = useState(false);\n    const [bulkDeleting, setBulkDeleting] = useState(false);\n    const [bulkDeleteIds, setBulkDeleteIds] = useState<{\n        [key: string]: boolean;\n    }>({});\n\n    const [boost, setBoost] = useState<Boost | null>(null);\n    const [censorNSFW, setCensorNSFW] = useState(true);\n\n    const { id } = useParams<{ id?: string }>();\n    const history = useHistory();\n    const location = useLocation();\n\n    const onError = (err: string) => {\n        setErr(err);\n        setErrTime(moment().valueOf());\n    };\n\n    useEffect(() => {\n        let handle = setTimeout(() => {\n            setSearch(searchDebounce);\n        }, 500);\n        return () => {\n            clearTimeout(handle);\n        };\n    }, [searchDebounce]);\n\n    useEffect(() => {\n        if (id) {\n            // check if the image is already loaded\n            const image = images.find((image) => image.id === id);\n            if (image) {\n                setSelectedImage(image);\n            }\n            // refresh\n            localImages.getImage(id).then((image) => {\n                setSelectedImage(image);\n                if (!image) {\n                    history.replace(\"/\");\n                }\n            });\n        } else {\n            setSelectedImage(null);\n        }\n    }, [id]);\n\n    const onSubmit = async (input: CreateImageInput) => {\n        setCreating(true);\n        setParentImage(null);\n        setErr(null);\n        window.scrollTo(0, 0);\n        setUploadingProgress(0);\n        try {\n            const newImages = await api.createImage(input, {\n                onUploadProgress: (progressEvent: any) => {\n                    const percentCompleted = Math.round(\n                        (progressEvent.loaded) / progressEvent.total\n                    );\n                    setUploadingProgress(percentCompleted);\n                },\n            });\n            if (newImages.data.images) {\n                for (let image of newImages.data.images || []) {\n                    localImages.saveImage(image);\n                }\n                setImages((images) => {\n                    return [...newImages.data.images!, ...images].sort(\n                        sortImages\n                    );\n                });\n            } else {\n                onError(\"Could not create images\");\n            }\n        } catch (e: any) {\n            console.error(e);\n            onError(\"Error creating image\");\n        } finally {\n            setCreating(false);\n        }\n    };\n\n    const onEditNewImage = async (input: CreateImageInput) => {\n        setCreating(true);\n        setParentImage(null);\n        setErr(null);\n        window.scrollTo(0, 0);\n        try {\n            const encodedImage = input.encoded_image!;\n            const newImage: LocalImage = {\n                created_at: moment().valueOf(),\n                updated_at: moment().valueOf(),\n                created_by: \"\",\n                params: {\n                    steps: 20,\n                    width: input.params.width,\n                    height: input.params.height,\n                    prompt: input.params.prompt,\n                    negative_prompt: input.params.negative_prompt,\n                    denoising_strength: input.params.denoising_strength,\n                },\n                label: \"\",\n                id: uuid.v4(),\n                model: input.model!,\n                negative_score: 0,\n                nsfw: !!input.nsfw,\n                parent: input.parent!,\n                score: 0,\n                status: StatusEnum.Completed,\n                temporary: false,\n                imageData: `data:image/png;base64,${encodedImage}`,\n            };\n            await localImages.saveImage(newImage);\n\n            history.push(`/image-editor/${newImage.id}`);\n        } catch (e: any) {\n            console.error(e);\n            onError(\"Error creating image\");\n        } finally {\n            setCreating(false);\n        }\n    };\n\n    const onNSFW = async (updatedImage: LocalImage, nsfw: boolean) => {\n        await localImages.saveImage({\n            ...updatedImage,\n            nsfw,\n        });\n        setImages((images) => {\n            return images.map((image) => {\n                if (updatedImage.id === image.id) {\n                    return {\n                        ...image,\n                        nsfw,\n                    };\n                }\n                return image;\n            });\n        });\n    };\n\n    const loadImages = async (search: string) => {\n        console.log(\"Initial load images\");\n        // clear error\n        setErr(null);\n        setHasMore(true);\n        try {\n            const cursor = moment().add(1, \"minutes\").valueOf();\n            const resp = await localImages.listImages(\n                cursor,\n                \"prev\",\n                100,\n                search\n            );\n            setImages(resp.sort(sortImages));\n            return;\n        } catch (err) {\n            onError(\"Could not load images\");\n            console.error(err);\n        }\n    };\n\n    useEffect(() => {\n        loadImages(search);\n    }, [search]);\n\n    useEffect(() => {\n        apiSocket.onMessage(async (message) => {\n            const payload = JSON.parse(message);\n            if (payload.type === NOTIFICATION_BOOST_UPDATED) {\n                const updatedBoost = await api.getBoost();\n                setBoost(updatedBoost.data);\n            }\n        });\n        return () => {\n            apiSocket.onMessage(undefined);\n        };\n    }, [apiSocket]);\n\n    useEffect(() => {\n        if (!api) {\n            return;\n        }\n        let lock = false;\n\n        const pollImages = async (images: Array<LocalImage>) => {\n            if (lock) {\n                return;\n            }\n            lock = true;\n\n            const pendingOrProcessingImages = images.filter((image) => {\n                return (\n                    image.status === \"pending\" || image.status === \"processing\"\n                );\n            });\n            if (pendingOrProcessingImages.length === 0) {\n                return;\n            }\n\n            const imageStatuses = pendingOrProcessingImages.reduce(\n                (acc, image) => {\n                    acc[image.id] = image.status;\n                    return acc;\n                },\n                {} as Record<string, StatusEnum>\n            );\n\n            try {\n                const resp = await api.batchGetImages({\n                    ids: pendingOrProcessingImages.map((image) => image.id),\n                });\n\n                if (resp.data.images) {\n                    const updatedImages: Array<LocalImage> =\n                        resp.data.images || [];\n                    let statusChange = false;\n                    for (let img of updatedImages) {\n                        if (imageStatuses[img.id] !== img.status) {\n                            statusChange = true;\n                        }\n\n                        if (img.status == StatusEnum.Error) {\n                            onError(\n                                img.error ||\n                                    \"Some images failed to generate, please make sure your prompt doesn't violate our terms of service\"\n                            );\n                            await api.deleteImage(img.id);\n                            await localImages.deleteImage(img.id);\n                            continue;\n                        }\n\n                        if (img.status === StatusEnum.Completed) {\n                            const downloadUrls = await api.getImageDownloadUrls(\n                                img.id\n                            );\n                            const resp = await anonymousClient.get(\n                                downloadUrls.data.image_url!,\n                                {\n                                    responseType: \"arraybuffer\",\n                                }\n                            );\n                            const binaryImageData = Buffer.from(\n                                resp.data,\n                                \"binary\"\n                            );\n                            const base64ImageData =\n                                binaryImageData.toString(\"base64\");\n                            const src = `data:image/png;base64,${base64ImageData}`;\n                            img.imageData = src;\n\n                            // TODO: make this less ugly...\n                            if (img.parent) {\n                                const parentImage = await localImages.getImage(\n                                    img.parent\n                                );\n                                if (\n                                    parentImage &&\n                                    parentImage.imageData === src\n                                ) {\n                                    console.log(\"refreshing image in 5 sec...\");\n                                    setTimeout(async () => {\n                                        const resp = await anonymousClient.get(\n                                            downloadUrls.data.image_url!,\n                                            {\n                                                responseType: \"arraybuffer\",\n                                            }\n                                        );\n                                        const binaryImageData = Buffer.from(\n                                            resp.data,\n                                            \"binary\"\n                                        );\n                                        const base64ImageData =\n                                            binaryImageData.toString(\"base64\");\n                                        const src = `data:image/png;base64,${base64ImageData}`;\n                                        img.imageData = src;\n                                        await localImages.saveImage(img);\n                                        setImages((images) => {\n                                            return [\n                                                ...images.map((image) => {\n                                                    if (image.id === img.id) {\n                                                        return img;\n                                                    }\n                                                    return image;\n                                                }),\n                                            ].sort(sortImages);\n                                        });\n                                    }, 5000);\n                                }\n                            }\n                        }\n                        await localImages.saveImage(img);\n                    }\n                    if (statusChange) {\n                        setImages((images) => {\n                            return [\n                                ...images.map((image) => {\n                                    const updatedImage = updatedImages.find(\n                                        (i) => i.id === image.id\n                                    );\n                                    if (updatedImage) {\n                                        return updatedImage;\n                                    }\n                                    return image;\n                                }),\n                            ].sort(sortImages);\n                        });\n                    }\n                }\n            } catch (err) {\n                onError(\"Could not load images\");\n                console.error(err);\n            } finally {\n                lock = false;\n            }\n        };\n\n        const timerHandle = setInterval(() => {\n            pollImages(images);\n        }, 2 * 1000);\n        return () => {\n            clearInterval(timerHandle);\n        };\n    }, [api, images, search]);\n\n    useEffect(() => {\n        const refreshBoost = async () => {\n            const updatedBoost = await api.getBoost();\n            setBoost(updatedBoost.data);\n        };\n        refreshBoost();\n        const interval = setInterval(refreshBoost, 60 * 1000);\n        return () => {\n            clearInterval(interval);\n        };\n    }, [api]);\n\n    // load parent image from saved images if an id is on the query string\n    useEffect(() => {\n        const loadParent = async () => {\n            const search = qs.parse(location.search, {\n                ignoreQueryPrefix: true,\n            });\n            if (search.parent) {\n                setLoadingParent(true);\n                try {\n                    const parentImage = await api.getImage(\n                        search.parent as string\n                    );\n                    if (parentImage.data) {\n                        const downloadUrls = await api.getImageDownloadUrls(\n                            parentImage.data.id\n                        );\n                        const resp = await anonymousClient.get(\n                            downloadUrls.data.image_url!,\n                            {\n                                responseType: \"arraybuffer\",\n                            }\n                        );\n                        const binaryImageData = Buffer.from(\n                            resp.data,\n                            \"binary\"\n                        );\n                        const base64ImageData =\n                            binaryImageData.toString(\"base64\");\n                        const src = `data:image/png;base64,${base64ImageData}`;\n                        setParentImage({\n                            ...parentImage.data,\n                            imageData: src,\n                        });\n                        history.push(\"/\");\n                    }\n                } finally {\n                    setLoadingParent(false);\n                }\n            }\n        };\n        loadParent();\n    }, [location.search]);\n\n    const isPendingOrProcessing = (image: LocalImage) => {\n        return (\n            image.status === StatusEnum.Pending ||\n            image.status === StatusEnum.Processing\n        );\n    };\n\n    const sortImages = (a: LocalImage, b: LocalImage) => {\n        // pending and processing images always come first\n        if (isPendingOrProcessing(a) && !isPendingOrProcessing(b)) {\n            return -1;\n        } else if (!isPendingOrProcessing(a) && isPendingOrProcessing(b)) {\n            return 1;\n        }\n        // if the parent is the same, sort by score descending\n        // otherwise, sort by updated_at\n        if (\n            a.parent === b.parent &&\n            a.params.prompt == b.params.prompt &&\n            a.status !== StatusEnum.Pending &&\n            b.status !== StatusEnum.Pending\n        ) {\n            // if the score is the same, sort by updated_at\n            let aScore = a.score;\n            let bScore = b.score;\n            // working around a bug where negative score was assigned\n            // for an empty negative prompt.\n            if (a.params.prompt!.trim() !== \"\") {\n                aScore = aScore - a.negative_score;\n            }\n            if (b.params.prompt!.trim() !== \"\") {\n                bScore = bScore - b.negative_score;\n            }\n            if (aScore == bScore) {\n                return b.updated_at - a.updated_at;\n            }\n            return bScore - aScore;\n        }\n\n        return b.updated_at - a.updated_at;\n    };\n\n    const onLoadMore = async () => {\n        // get the minimum updated_at from images\n        let minUpdatedAt = moment().valueOf();\n        images.forEach((image) => {\n            minUpdatedAt = Math.min(minUpdatedAt, image.updated_at);\n        });\n        // load images in descending order from updated_at\n        const resp = await localImages.listImages(\n            minUpdatedAt - 1,\n            \"prev\",\n            100,\n            search\n        );\n        if (resp.length > 0) {\n            // combine images with new images and sort by updated_at descending\n            setImages((images) =>\n                [...images, ...resp]\n                    .filter((image) => !image.deleted_at)\n                    .sort(sortImages)\n            );\n        } else {\n            setHasMore(false);\n        }\n    };\n\n    const onDelete = async (image: LocalImage) => {\n        try {\n            // await api.deleteImage(image.id);\n            await localImages.deleteImage(image.id);\n            setImages((images) => {\n                return images.filter((i) => i.id !== image.id);\n            });\n            history.push(\"/\");\n        } catch (e) {\n            console.error(e);\n            onError(\"Error deleting image\");\n        }\n    };\n\n    const onFork = async (image: LocalImage) => {\n        setParentImage(image);\n        // setSelectedImage(null);\n        history.push(\"/\");\n        window.scrollTo(0, 0);\n    };\n\n    const onSave = async (image: LocalImage) => {\n        setSavingImage(true);\n        try {\n            history.push(\"/\");\n            const createInput: CreateImageInput = {\n                count: 1,\n                // encoded_image: image.imageData!.split(\",\")[1],\n                params: image.params,\n                status: StatusEnum.Saved,\n                temporary: false,\n                label: \"\",\n                model: image.model,\n            };\n\n            const encodedImage = image.imageData!.split(\",\")[1];\n\n            // convert base64 to binary\n            const binaryImageData = Buffer.from(encodedImage, \"base64\");\n            const encodedThumbnail = await createEncodedThumbnail(encodedImage);\n            const binaryThumbnailData = Buffer.from(encodedThumbnail, \"base64\");\n\n            const createResp = await api.createImage(createInput);\n            const imageId = createResp.data.images![0].id;\n            const uploadUrls = await api.getImageUploadUrls(imageId);\n            await anonymousClient.put(\n                uploadUrls.data.thumbnail_url!,\n                binaryThumbnailData,\n                {\n                    headers: {\n                        \"Content-Type\": \"image/png\",\n                    },\n                    onUploadProgress: (progressEvent: any) => {\n                        const percentCompleted = Math.round(\n                            progressEvent.loaded / progressEvent.total\n                        );\n                        setUploadingProgress(percentCompleted / 2);\n                    },\n                }\n            );\n            await anonymousClient.put(\n                uploadUrls.data.image_url!,\n                binaryImageData,\n                {\n                    headers: {\n                        \"Content-Type\": \"image/png\",\n                    },\n                    onUploadProgress: (progressEvent: any) => {\n                        const percentCompleted = Math.round(\n                            progressEvent.loaded / progressEvent.total\n                        );\n                        setUploadingProgress(percentCompleted / 2 + 0.5);\n                    },\n                }\n            );\n\n            await localImages.hardDeleteImage(image.id);\n            setImages((images) => {\n                return images.filter((i) => i.id !== image.id);\n            });\n            setSuccess(\"Image saved\");\n            setSuccessTime(moment().valueOf());\n        } catch (e) {\n            console.error(e);\n            onError(\"Error saving image\");\n        } finally {\n            setSavingImage(false);\n        }\n    };\n\n    const onEdit = async (image: LocalImage) => {\n        history.push(`/image-editor/${image.id}`);\n    };\n\n    const onThumbnailClicked = (image: LocalImage) => {\n        // setSelectedImage(image);\n        if (bulkDeleteSelecting) {\n            setBulkDeleteIds({\n                ...bulkDeleteIds,\n                [image.id]: !bulkDeleteIds[image.id],\n            });\n        } else {\n            history.push(`/images/${image.id}`);\n        }\n    };\n\n    const handleCancelFork = () => {\n        setParentImage(null);\n        window.scrollTo(0, 0);\n    };\n\n    const onConfirmBulkDelete = async () => {\n        try {\n            setBulkDeleting(true);\n            const promises = Object.keys(bulkDeleteIds).map((id) => {\n                return localImages.deleteImage(id);\n            });\n            await Promise.all(promises);\n            setImages((images) => {\n                return images.filter((image) => !bulkDeleteIds[image.id]);\n            });\n            setBulkDeleteIds({});\n            setBulkDeleteSelecting(false);\n        } catch (e) {\n            console.error(e);\n            onError(\"Error deleting images\");\n        } finally {\n            setBulkDeleting(false);\n        }\n    };\n\n    const completedOrSavedImages = images.filter((image) => {\n        return (\n            !image.deleted_at &&\n            (image.status === StatusEnum.Completed ||\n                image.status === StatusEnum.Saved)\n        );\n    });\n\n    const pendingOrProcessingImages = images.filter(\n        (image) =>\n            !image.deleted_at &&\n            (image.status === StatusEnum.Pending ||\n                image.status === StatusEnum.Processing)\n    );\n\n    const pendingImages = pendingOrProcessingImages.filter(\n        (image) => image.status === StatusEnum.Pending\n    );\n\n    const processingImages = pendingOrProcessingImages.filter(\n        (image) => image.status === StatusEnum.Processing\n    );\n\n    const onUpdateBoostActive = async (active: boolean) => {\n        if (!boost) return;\n        const resp = await api.updateBoost({\n            is_active: active,\n            level: boost.level,\n        });\n        if (resp.data.error) {\n            alert(resp.data.error);\n        } else {\n            setBoost((await api.getBoost()).data);\n        }\n    };\n\n    const onUpdateBoostLevel = async (level: number) => {\n        if (!boost) return;\n        const resp = await api.updateBoost({\n            is_active: boost.is_active,\n            level: level,\n        });\n        if (resp.data.error) {\n            alert(resp.data.error);\n        } else {\n            setBoost((await api.getBoost()).data);\n        }\n    };\n\n    return (\n        <>\n            <h1 style={{ fontSize: \"40px\", textAlign: \"left\" }}>\n                Welcome to AiBrush - Home\n            </h1>\n\n            <ErrorNotification message={err} timestamp={errTime} />\n            <SuccessNotification message={success} timestamp={successTime} />\n\n            <ImagePrompt\n                api={api}\n                assetsUrl={assetsUrl}\n                creating={creating}\n                onSubmit={onSubmit}\n                onEdit={onEditNewImage}\n                parent={parentImage}\n                onCancel={() => handleCancelFork()}\n            />\n            {boost && (\n                <BoostWidget\n                    boost={boost}\n                    onUpdateActive={onUpdateBoostActive}\n                    onUpdateBoostLevel={onUpdateBoostLevel}\n                />\n            )}\n            <hr />\n\n            <div\n                className=\"homepage-images\"\n                style={{ marginTop: \"48px\", paddingBottom: \"48px\" }}\n            >\n                <div style={{ textAlign: \"left\" }}>\n                    <div\n                        className=\"input-group\"\n                        style={{ marginBottom: \"16px\" }}\n                    >\n                        <input\n                            style={{}}\n                            value={searchDebounce}\n                            type=\"search\"\n                            className=\"form-control image-search\"\n                            placeholder=\"Search...\"\n                            onChange={(e) => setSearchDebounce(e.target.value)}\n                        />\n\n                        <div\n                            style={{\n                                float: \"right\",\n                            }}\n                        >\n                            {!bulkDeleteSelecting && (\n                                <>\n                                    <button\n                                        style={{ display: \"inline\" }}\n                                        className=\"btn btn-primary image-popup-button\"\n                                        onClick={() =>\n                                            setCensorNSFW(!censorNSFW)\n                                        }\n                                    >\n                                        {!censorNSFW && (\n                                            <i className=\"fas fa-eye\"></i>\n                                        )}\n                                        {censorNSFW && (\n                                            <i className=\"fas fa-eye-slash\"></i>\n                                        )}\n                                    </button>\n                                    <Dropdown\n                                        style={{\n                                            display: \"inline\",\n                                            marginLeft: \"8px\",\n                                        }}\n                                    >\n                                        <Dropdown.Toggle variant=\"danger\">\n                                            <i className=\"fas fa-trash\"></i>\n                                        </Dropdown.Toggle>\n\n                                        <Dropdown.Menu>\n                                            <Dropdown.Item\n                                                onClick={() =>\n                                                    setBulkDeleteSelecting(true)\n                                                }\n                                            >\n                                                Bulk Delete\n                                            </Dropdown.Item>\n                                            <Dropdown.Item\n                                                onClick={() =>\n                                                    history.push(\n                                                        \"/local-deleted-images\"\n                                                    )\n                                                }\n                                            >\n                                                View Deleted Images\n                                            </Dropdown.Item>\n                                        </Dropdown.Menu>\n                                    </Dropdown>\n                                </>\n                            )}\n                            {bulkDeleteSelecting && (\n                                <>\n                                    <button\n                                        className=\"btn btn-primary image-popup-button\"\n                                        onClick={() => {\n                                            setBulkDeleteSelecting(false);\n                                            setBulkDeleteIds({});\n                                        }}\n                                    >\n                                        Cancel\n                                    </button>\n                                    <button\n                                        style={{ marginLeft: \"8px\" }}\n                                        className=\"btn image-popup-delete-button\"\n                                        onClick={() => {\n                                            onConfirmBulkDelete();\n                                        }}\n                                    >\n                                        Delete\n                                    </button>\n                                </>\n                            )}\n                        </div>\n                    </div>\n                </div>\n                <InfiniteScroll\n                    dataLength={images.length}\n                    next={onLoadMore}\n                    hasMore={hasMore}\n                    loader={\n                        <>\n                            <hr />\n                            <h4>Loading...</h4>\n                        </>\n                    }\n                >\n                    {pendingOrProcessingImages.length > 0 && (\n                        <PendingImagesThumbnail\n                            pendingCount={pendingImages.length}\n                            processingCount={processingImages.length}\n                            onClick={() => {\n                                setShowPendingImages(true);\n                            }}\n                        />\n                    )}\n                    {completedOrSavedImages.map((image) => (\n                        <ImageThumbnail\n                            key={image.id}\n                            image={image}\n                            assetsUrl={assetsUrl}\n                            onClick={onThumbnailClicked}\n                            bulkDelete={\n                                bulkDeleteSelecting && bulkDeleteIds[image.id]\n                            }\n                            censorNSFW={censorNSFW}\n                        />\n                    ))}\n                </InfiniteScroll>\n            </div>\n\n            {selectedImage && (\n                <ImagePopup\n                    assetsUrl={assetsUrl}\n                    image={selectedImage}\n                    onClose={() => history.push(\"/\")}\n                    onDelete={(image) => {\n                        onDelete(image);\n                        setImages(images.filter((i) => i.id !== image.id));\n                        history.push(\"/\");\n                    }}\n                    onFork={(image) => {\n                        onFork(image);\n                        history.push(\"/\");\n                    }}\n                    onEdit={(image) => {\n                        onEdit(image);\n                    }}\n                    onSave={(image) => {\n                        onSave(image);\n                    }}\n                    onNSFW={onNSFW}\n                    censorNSFW={censorNSFW}\n                />\n            )}\n            <ScrollToTop />\n            <BusyModal show={creating} title=\"Creating images\">\n                <p>Please wait while we create your image.</p>\n                <ProgressBar progress={uploadProgress} />\n            </BusyModal>\n            <BusyModal show={bulkDeleting} title=\"Deleting images\">\n                <p>Please wait while we delete your images.</p>\n            </BusyModal>\n            <BusyModal show={loadingParent} title=\"Loading parent image\">\n                <p>Please wait while we load the parent image.</p>\n            </BusyModal>\n            <BusyModal show={savingImage} title=\"Saving image\">\n                {/* bootstrap progress bar for uploadProgress (0-1 value) */}\n                <ProgressBar progress={uploadProgress} />\n            </BusyModal>\n            <PendingImages\n                images={pendingOrProcessingImages}\n                onCancel={() => setShowPendingImages(false)}\n                show={showPendingImages}\n                onDeleteImage={(image) => {\n                    onDelete(image);\n                    setImages(images.filter((i) => i.id !== image.id));\n                }}\n            />\n        </>\n    );\n};\n","import React, { FC, useState, useEffect } from \"react\";\n\ninterface Props {\n    selectedColor: string;\n    color: string;\n    onClick: (color: string) => void;\n}\n\nexport const PaletteButton: FC<Props> = ({ selectedColor, color, onClick }) => {\n    let className = \"palette-button\";\n    if (selectedColor === color) {\n        className += \" selected\";\n    } else if (color == \"#000000\") {\n        className += \" black\";\n    }\n    return (\n        <div\n            className={className}\n            style={{ backgroundColor: color }}\n            onClick={() => onClick(color)}\n        ></div>\n    );\n};\n","import React, { FC, useState, useEffect } from \"react\";\nimport { ChromePicker } from \"react-color\";\n\n// class ButtonExample extends React.Component {\n//   state = {\n//     displayColorPicker: false,\n//   };\n\n//   handleClick = () => {\n//     this.setState({ displayColorPicker: !this.state.displayColorPicker })\n//   };\n\n//   handleClose = () => {\n//     this.setState({ displayColorPicker: false })\n//   };\n\n//   render() {\n//     const popover = {\n//       position: 'absolute',\n//       zIndex: '2',\n//     }\n//     const cover = {\n//       position: 'fixed',\n//       top: '0px',\n//       right: '0px',\n//       bottom: '0px',\n//       left: '0px',\n//     }\n//     return (\n//       <div>\n//         <button onClick={ this.handleClick }>Pick Color</button>\n//         { this.state.displayColorPicker ? <div style={ popover }>\n//           <div style={ cover } onClick={ this.handleClose }/>\n//           <ChromePicker />\n//         </div> : null }\n//       </div>\n//     )\n//   }\n// }\n\ninterface Props {\n    color: string;\n    onColorSelected: (color: string) => void;\n}\n\nexport const ColorPicker: FC<Props> = ({ color, onColorSelected }) => {\n    const [displayColorPicker, setDisplayColorPicker] = useState(false);\n    const [tmpColor, setTmpColor] = useState(color);\n\n    const handleClick = () => {\n        setDisplayColorPicker(!displayColorPicker);\n        if (displayColorPicker) {\n            onColorSelected(tmpColor);\n        }\n    };\n\n    const handleClose = () => {\n        setDisplayColorPicker(false);\n        if (displayColorPicker) {\n            onColorSelected(tmpColor);\n        }\n    };\n\n    const popover: React.CSSProperties = {\n        position: \"absolute\",\n        zIndex: 2,\n    };\n    const cover: React.CSSProperties = {\n        position: \"fixed\",\n        top: \"0px\",\n        right: \"0px\",\n        bottom: \"0px\",\n        left: \"0px\",\n    };\n\n    return (\n        <>\n            <button className=\"color-picker\" onClick={handleClick}>\n                <i className=\"fas fa-plus\" />\n            </button>\n            {displayColorPicker ? (\n                <div style={popover}>\n                    <div style={cover} onClick={handleClose} />\n                    <ChromePicker\n                        color={tmpColor}\n                        onChange={(color) => setTmpColor(color.hex)}\n                        onChangeComplete={(color) => setTmpColor(color.hex)}\n                    />\n                </div>\n            ) : null}\n        </>\n    );\n};\n","import React, { FC, useEffect, useState } from \"react\";\nimport { ChromePicker } from \"react-color\";\n\nimport { Renderer } from \"./renderer\";\nimport { BaseTool, Tool } from \"./tool\";\nimport { ZoomHelper } from \"./zoomHelper\";\nimport { PaletteButton } from \"./PaletteButton\";\nimport { ColorPicker } from \"./ColorPicker\";\n\nconst defaultColors = [\n    \"#FFFFFF\",\n    \"#5A2C02\",\n    \"#386EB6\",\n    \"#6B31A1\",\n    \"#CB2C26\",\n    \"#000000\",\n    \"#888888\",\n    \"#50B050\",\n    \"#FBDB37\",\n    \"#E88D2D\",\n];\n\nexport class PencilTool extends BaseTool implements Tool {\n    private brushSize = 10;\n    private brushColor = defaultColors[0];\n    private palette: string[] = [...defaultColors];\n\n    private panning = false;\n    private isDrawing = false;\n    private lastX = 0;\n    private lastY = 0;\n    private colorPicking = false;\n    private lastPickedColor = \"#000000\";\n    private _dirty = false;\n\n    set dirty(dirty: boolean) {\n        this._dirty = dirty;\n        if (this.dirtyListener) {\n            this.dirtyListener(dirty);\n        }\n    }\n\n    get dirty() {\n        return this._dirty;\n    }\n\n\n    private dirtyListener?: (dirty: boolean) => void;\n    private colorPickedListener?: (color: string) => void;\n\n    constructor(renderer: Renderer) {\n        super(renderer, \"pencil\");\n    }\n\n    private sync() {\n        if (this.colorPicking) {\n            this.renderer.setCursor({\n                x: this.lastX,\n                y: this.lastY,\n                radius: this.renderer.getWidth() / 20,\n                color: this.lastPickedColor,\n                type: \"colorpicker\",\n            })\n        } else {\n            this.renderer.setCursor({\n                x: this.lastX,\n                y: this.lastY,\n                radius: this.brushSize / 2,\n                color: this.brushColor,\n                type: \"circle-fill\",\n            });\n        }\n        \n    }\n\n    updateArgs(args: any) {\n        super.updateArgs(args);\n        this.brushSize = args.brushSize || 10;\n        this.brushColor = args.brushColor || defaultColors[0];\n        this.palette = args.palette || [...defaultColors];\n        this.sync();\n    }\n\n    onMouseDown(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        if (this.colorPicking) {\n            return;\n        }\n        if (event.button === 0) {\n            let { x, y } = this.zoomHelper.translateMouseToCanvasCoordinates(\n                event.nativeEvent.offsetX,\n                event.nativeEvent.offsetY\n            );\n            this.renderer.drawPoint(x, y, this.brushSize, this.brushColor);\n            this.isDrawing = true;\n            this.lastX = x;\n            this.lastY = y;\n            this.dirty = true;\n        } else if (event.button === 1) {\n            this.panning = true;\n        }\n        this.sync();\n    }\n\n    onMouseMove(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>): void {\n        let { x, y } = this.zoomHelper.translateMouseToCanvasCoordinates(\n            event.nativeEvent.offsetX,\n            event.nativeEvent.offsetY\n        );\n        if (this.colorPicking) {\n            this.lastPickedColor = this.renderer.getPixel(x, y);\n        } else if (this.panning) {\n            this.zoomHelper.onPan(event);\n        } else {\n            if (this.isDrawing) {\n                this.renderer.drawLine(\n                    this.lastX,\n                    this.lastY,\n                    x,\n                    y,\n                    this.brushSize,\n                    this.brushColor\n                );\n                this.dirty = true;\n            }\n        }\n        this.lastX = x;\n        this.lastY = y;\n        this.sync();\n    }\n\n    onMouseUp(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>): void {\n        if (event.button === 0) {\n            this.isDrawing = false;\n            if (this.colorPicking) {\n                this.colorPicking = false;\n                this.brushColor = this.lastPickedColor;\n                if (this.colorPickedListener) {\n                    this.colorPickedListener(this.lastPickedColor);\n                }\n            }\n        } else if (event.button === 1) {\n            this.panning = false;\n        }\n        this.sync();\n    }\n\n    onWheel(event: WheelEvent) {\n        this.zoomHelper.onWheel(event);\n        this.sync();\n    }\n\n    cancel() {\n        // kind of a hack, clears the selection layer\n        this.renderer.setEditImage(null);\n        this.dirty = false;\n    }\n\n    confirm() {\n        this.renderer.commitSelection();\n        const encodedImage = this.renderer.getEncodedImage(null);\n        if (encodedImage && this.saveListener) {\n            this.saveListener(encodedImage);\n        }\n        this.dirty = false;\n    }\n\n    onSaveImage(listener: (encodedImage: string) => void): void {\n        this.saveListener = listener;\n    }\n\n    onDirty(listener: (dirty: boolean) => void): void {\n        this.dirtyListener = listener;\n    }\n\n    destroy(): boolean {\n        if (this.dirty) {\n            this.renderer.commitSelection();\n        }\n        return true;\n    }\n\n    beginColorpicker(): void {\n        this.colorPicking = true;\n        this.sync();\n    }\n\n    onColorPicked(listener: (color: string) => void): void {\n        this.colorPickedListener = listener;\n    }\n}\n\ninterface ControlsProps {\n    renderer: Renderer;\n    tool: PencilTool;\n}\n\nconst MAX_PALETTE_SIZE = 30;\n\nfunction addToPalette(palette: string[], color: string): string[] {\n    if (palette.indexOf(color) === -1) {\n        // insert at the beginning\n        palette = [color, ...palette];\n    }\n    if (palette.length > MAX_PALETTE_SIZE) {\n        palette = palette.slice(0, MAX_PALETTE_SIZE);\n    }\n    return palette;\n}\n\nexport const Controls: FC<ControlsProps> = ({ renderer, tool }) => {\n    const [brushSize, setBrushSize] = useState(10);\n    const [brushColor, setBrushColor] = useState(defaultColors[0]);\n    const [palette, setPalette] = useState(defaultColors);\n    const [dirty, setDirty] = useState(false);\n\n    tool.onDirty(setDirty);\n\n    useEffect(() => {\n        tool.updateArgs({\n            brushSize,\n            brushColor,\n            palette,\n        });\n    }, [brushSize, brushColor, palette]);\n\n    const onColorSelected = (color: string) => {\n        setBrushColor(color);\n        setPalette(addToPalette(palette, color));\n    };\n\n    tool.onColorPicked(onColorSelected);\n\n    return (\n        <div style={{ marginTop: \"16px\" }}>\n            <div className=\"form-group\">\n                <label style={{width: \"100%\"}}>\n                    Brush size\n                    <small className=\"form-text text-muted\" style={{float: \"right\"}}>\n                        {brushSize}px\n                    </small>\n                </label>\n                <input\n                    type=\"range\"\n                    className=\"form-control-range\"\n                    min=\"1\"\n                    max=\"100\"\n                    value={brushSize}\n                    onChange={(e) => setBrushSize(parseInt(e.target.value))}\n                />\n            </div>\n            <div\n                style={{\n                    display: \"flex\",\n                    flexDirection: \"row\",\n                    flexWrap: \"wrap\",\n                }}\n            >\n                {palette.map((color, i) => (\n                    <PaletteButton\n                        key={i}\n                        selectedColor={brushColor}\n                        color={color}\n                        onClick={(color) => setBrushColor(color)}\n                    />\n                ))}\n                {/* <div\n                    className=\"color-picker\"\n                    style={{ textAlign: \"center\", backgroundColor: \"#ccc\" }}\n                >\n                    <i className=\"fas fa-eye-dropper\" />\n                </div> */}\n                <button\n                    className=\"color-picker\"\n                    onClick={() => tool.beginColorpicker()}\n                >\n                    <i className=\"fas fa-eye-dropper\" />\n                </button>\n                <ColorPicker\n                    color={brushColor}\n                    onColorSelected={(color) => onColorSelected(color)}\n                />\n            </div>\n            <div className=\"form-group\" style={{\n                marginTop: \"16px\",\n                visibility: dirty ? \"visible\" : \"hidden\",\n            }}>\n                <button\n                    className=\"btn btn-secondary\"\n                    onClick={() => tool.cancel()}\n                >\n                    Revert\n                </button>\n                <button\n                    className=\"btn btn-primary\"\n                    onClick={() => tool.confirm()}\n                    style={{ marginLeft: \"8px\" }}\n                >\n                    Save\n                </button>\n            </div>\n        </div>\n    );\n};\n\n// TODO list:\n// reset to initial colors\n// color picker\n// eyedropper\n// color history\n\n// zoom/pan\n// actual drawing\n// undo/redo\n// save\n// revert\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * AIBrush API\n * Orchestration backend for AI Brush\n *\n * The version of the OpenAPI document: 1.0.0\n * Contact: admin@aibrush.art\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport { Configuration } from './configuration';\nimport globalAxios, { AxiosPromise, AxiosInstance } from 'axios';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';\n\n/**\n * \n * @export\n * @interface AddMetricItem\n */\nexport interface AddMetricItem {\n    /**\n     * \n     * @type {string}\n     * @memberof AddMetricItem\n     */\n    name: string;\n    /**\n     * \n     * @type {number}\n     * @memberof AddMetricItem\n     */\n    value: number;\n    /**\n     * \n     * @type {string}\n     * @memberof AddMetricItem\n     */\n    type: AddMetricItemTypeEnum;\n    /**\n     * \n     * @type {Array<MetricAttribute>}\n     * @memberof AddMetricItem\n     */\n    attributes: Array<MetricAttribute>;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum AddMetricItemTypeEnum {\n    Gauge = 'gauge',\n    Count = 'count'\n}\n\n/**\n * \n * @export\n * @interface AddMetricsInput\n */\nexport interface AddMetricsInput {\n    /**\n     * \n     * @type {Array<AddMetricItem>}\n     * @memberof AddMetricsInput\n     */\n    metrics: Array<AddMetricItem>;\n}\n/**\n * \n * @export\n * @interface AssetsUrl\n */\nexport interface AssetsUrl {\n    /**\n     * \n     * @type {string}\n     * @memberof AssetsUrl\n     */\n    assets_url: string;\n}\n/**\n * \n * @export\n * @interface BatchGetImagesInput\n */\nexport interface BatchGetImagesInput {\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof BatchGetImagesInput\n     */\n    ids: Array<string>;\n}\n/**\n * \n * @export\n * @interface Boost\n */\nexport interface Boost {\n    /**\n     * \n     * @type {string}\n     * @memberof Boost\n     */\n    user_id: string;\n    /**\n     * \n     * @type {number}\n     * @memberof Boost\n     */\n    activated_at: number;\n    /**\n     * Balance in 1/2 gpu milliseconds (.1 cents)\n     * @type {number}\n     * @memberof Boost\n     */\n    balance: number;\n    /**\n     * \n     * @type {number}\n     * @memberof Boost\n     */\n    level: number;\n    /**\n     * Whether the boost is active\n     * @type {boolean}\n     * @memberof Boost\n     */\n    is_active?: boolean;\n}\n/**\n * \n * @export\n * @interface BoostList\n */\nexport interface BoostList {\n    /**\n     * \n     * @type {Array<Boost>}\n     * @memberof BoostList\n     */\n    boosts: Array<Boost>;\n}\n/**\n * \n * @export\n * @interface CreateImageInput\n */\nexport interface CreateImageInput {\n    /**\n     * \n     * @type {StatusEnum}\n     * @memberof CreateImageInput\n     */\n    status?: StatusEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateImageInput\n     */\n    label?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateImageInput\n     */\n    parent?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateImageInput\n     */\n    encoded_image?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateImageInput\n     */\n    encoded_mask?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateImageInput\n     */\n    encoded_npy?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateImageInput\n     */\n    model: string;\n    /**\n     * \n     * @type {ImageParams}\n     * @memberof CreateImageInput\n     */\n    params: ImageParams;\n    /**\n     * \n     * @type {number}\n     * @memberof CreateImageInput\n     */\n    count: number;\n    /**\n     * \n     * @type {boolean}\n     * @memberof CreateImageInput\n     */\n    nsfw?: boolean;\n    /**\n     * \n     * @type {boolean}\n     * @memberof CreateImageInput\n     */\n    temporary?: boolean;\n}\n/**\n * \n * @export\n * @interface DepositRequest\n */\nexport interface DepositRequest {\n    /**\n     * Amount in 1/2 gpu milliseconds (.1 cents)\n     * @type {number}\n     * @memberof DepositRequest\n     */\n    amount: number;\n    /**\n     * Boost level to activate after deposit\n     * @type {number}\n     * @memberof DepositRequest\n     */\n    level: number;\n}\n/**\n * \n * @export\n * @interface DiscordLogin\n */\nexport interface DiscordLogin {\n    /**\n     * \n     * @type {string}\n     * @memberof DiscordLogin\n     */\n    code: string;\n}\n/**\n * \n * @export\n * @interface FeatureList\n */\nexport interface FeatureList {\n    /**\n     * \n     * @type {string}\n     * @memberof FeatureList\n     */\n    terms_uri?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof FeatureList\n     */\n    privacy_uri?: string;\n}\n/**\n * \n * @export\n * @interface GlobalSettings\n */\nexport interface GlobalSettings {\n    /**\n     * \n     * @type {string}\n     * @memberof GlobalSettings\n     */\n    settings_key: string;\n    /**\n     * \n     * @type {object}\n     * @memberof GlobalSettings\n     */\n    settings_json: object;\n}\n/**\n * \n * @export\n * @interface Healthcheck\n */\nexport interface Healthcheck {\n    /**\n     * \n     * @type {string}\n     * @memberof Healthcheck\n     */\n    status?: HealthcheckStatusEnum;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum HealthcheckStatusEnum {\n    Ok = 'ok'\n}\n\n/**\n * \n * @export\n * @interface Image\n */\nexport interface Image {\n    /**\n     * \n     * @type {string}\n     * @memberof Image\n     */\n    id: string;\n    /**\n     * \n     * @type {number}\n     * @memberof Image\n     */\n    created_at: number;\n    /**\n     * \n     * @type {string}\n     * @memberof Image\n     */\n    created_by: string;\n    /**\n     * \n     * @type {number}\n     * @memberof Image\n     */\n    updated_at: number;\n    /**\n     * \n     * @type {ImageParams}\n     * @memberof Image\n     */\n    params: ImageParams;\n    /**\n     * \n     * @type {string}\n     * @memberof Image\n     */\n    label: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Image\n     */\n    parent: string;\n    /**\n     * \n     * @type {number}\n     * @memberof Image\n     */\n    score: number;\n    /**\n     * \n     * @type {number}\n     * @memberof Image\n     */\n    negative_score: number;\n    /**\n     * \n     * @type {StatusEnum}\n     * @memberof Image\n     */\n    status: StatusEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof Image\n     */\n    model: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof Image\n     */\n    nsfw: boolean;\n    /**\n     * \n     * @type {boolean}\n     * @memberof Image\n     */\n    temporary: boolean;\n    /**\n     * \n     * @type {number}\n     * @memberof Image\n     */\n    deleted_at?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof Image\n     */\n    error?: string;\n}\n/**\n * \n * @export\n * @interface ImageList\n */\nexport interface ImageList {\n    /**\n     * \n     * @type {Array<Image>}\n     * @memberof ImageList\n     */\n    images?: Array<Image>;\n}\n/**\n * \n * @export\n * @interface ImageParams\n */\nexport interface ImageParams {\n    /**\n     * \n     * @type {string}\n     * @memberof ImageParams\n     */\n    prompt?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof ImageParams\n     */\n    steps?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof ImageParams\n     */\n    negative_prompt?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof ImageParams\n     */\n    width?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof ImageParams\n     */\n    height?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof ImageParams\n     */\n    denoising_strength?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof ImageParams\n     */\n    cfg_scale?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof ImageParams\n     */\n    seed?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ImageParams\n     */\n    controlnet_type?: ImageParamsControlnetTypeEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof ImageParams\n     */\n    augmentation?: ImageParamsAugmentationEnum;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum ImageParamsControlnetTypeEnum {\n    Canny = 'canny',\n    Hed = 'hed',\n    Depth = 'depth',\n    Normal = 'normal',\n    Openpose = 'openpose',\n    Seg = 'seg',\n    Scribble = 'scribble',\n    Fakescribbles = 'fakescribbles',\n    Hough = 'hough'\n}\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum ImageParamsAugmentationEnum {\n    FaceRestore = 'face_restore',\n    RemoveBackground = 'remove_background',\n    Upscale = 'upscale'\n}\n\n/**\n * \n * @export\n * @interface ImageUrls\n */\nexport interface ImageUrls {\n    /**\n     * \n     * @type {string}\n     * @memberof ImageUrls\n     */\n    init_image_url?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ImageUrls\n     */\n    image_url?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ImageUrls\n     */\n    mask_url?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ImageUrls\n     */\n    thumbnail_url?: string;\n}\n/**\n * \n * @export\n * @interface InviteCode\n */\nexport interface InviteCode {\n    /**\n     * \n     * @type {string}\n     * @memberof InviteCode\n     */\n    id?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof InviteCode\n     */\n    created_at?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof InviteCode\n     */\n    created_by?: string;\n}\n/**\n * \n * @export\n * @interface IsAdminResponse\n */\nexport interface IsAdminResponse {\n    /**\n     * \n     * @type {boolean}\n     * @memberof IsAdminResponse\n     */\n    is_admin?: boolean;\n}\n/**\n * \n * @export\n * @interface LoginInput\n */\nexport interface LoginInput {\n    /**\n     * \n     * @type {string}\n     * @memberof LoginInput\n     */\n    email?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof LoginInput\n     */\n    invite_code?: string;\n}\n/**\n * \n * @export\n * @interface LoginResult\n */\nexport interface LoginResult {\n    /**\n     * \n     * @type {string}\n     * @memberof LoginResult\n     */\n    accessToken?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof LoginResult\n     */\n    refreshToken?: string;\n}\n/**\n * \n * @export\n * @interface MetricAttribute\n */\nexport interface MetricAttribute {\n    /**\n     * \n     * @type {string}\n     * @memberof MetricAttribute\n     */\n    name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof MetricAttribute\n     */\n    value?: string;\n}\n/**\n * \n * @export\n * @interface Order\n */\nexport interface Order {\n    /**\n     * \n     * @type {string}\n     * @memberof Order\n     */\n    id: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Order\n     */\n    created_by: string;\n    /**\n     * \n     * @type {number}\n     * @memberof Order\n     */\n    created_at: number;\n    /**\n     * \n     * @type {number}\n     * @memberof Order\n     */\n    ends_at: number;\n    /**\n     * \n     * @type {boolean}\n     * @memberof Order\n     */\n    is_active: boolean;\n    /**\n     * \n     * @type {number}\n     * @memberof Order\n     */\n    gpu_count: number;\n    /**\n     * \n     * @type {number}\n     * @memberof Order\n     */\n    amount_paid_cents: number;\n}\n/**\n * \n * @export\n * @interface RefreshLoginInput\n */\nexport interface RefreshLoginInput {\n    /**\n     * \n     * @type {string}\n     * @memberof RefreshLoginInput\n     */\n    refreshToken?: string;\n}\n/**\n * \n * @export\n * @interface StableDiffusionModel\n */\nexport interface StableDiffusionModel {\n    /**\n     * The name of the model\n     * @type {string}\n     * @memberof StableDiffusionModel\n     */\n    name: string;\n    /**\n     * The baseline model used\n     * @type {string}\n     * @memberof StableDiffusionModel\n     */\n    baseline: string;\n    /**\n     * The type of the model (e.g., ckpt)\n     * @type {string}\n     * @memberof StableDiffusionModel\n     */\n    type: string;\n    /**\n     * A short description of the model\n     * @type {string}\n     * @memberof StableDiffusionModel\n     */\n    description: string;\n    /**\n     * Tags associated with the model\n     * @type {Array<string>}\n     * @memberof StableDiffusionModel\n     */\n    tags: Array<string>;\n    /**\n     * A list of URIs for showcase images\n     * @type {Array<string>}\n     * @memberof StableDiffusionModel\n     */\n    showcases: Array<string>;\n    /**\n     * The version of the model\n     * @type {string}\n     * @memberof StableDiffusionModel\n     */\n    version: string;\n    /**\n     * The style of the model (e.g., anime, furry)\n     * @type {string}\n     * @memberof StableDiffusionModel\n     */\n    style: string;\n    /**\n     * Whether the model is Not Safe For Work (NSFW)\n     * @type {boolean}\n     * @memberof StableDiffusionModel\n     */\n    nsfw: boolean;\n    /**\n     * Whether to download all model files\n     * @type {boolean}\n     * @memberof StableDiffusionModel\n     */\n    download_all: boolean;\n    /**\n     * Configuration information for the model\n     * @type {object}\n     * @memberof StableDiffusionModel\n     */\n    config: object;\n    /**\n     * Whether the model is available for use\n     * @type {boolean}\n     * @memberof StableDiffusionModel\n     */\n    available: boolean;\n}\n/**\n * \n * @export\n * @enum {string}\n */\n\nexport enum StatusEnum {\n    Pending = 'pending',\n    Processing = 'processing',\n    Ranking = 'ranking',\n    Completed = 'completed',\n    Saved = 'saved',\n    Error = 'error'\n}\n\n/**\n * \n * @export\n * @interface TemporaryImage\n */\nexport interface TemporaryImage {\n    /**\n     * \n     * @type {string}\n     * @memberof TemporaryImage\n     */\n    id: string;\n    /**\n     * \n     * @type {string}\n     * @memberof TemporaryImage\n     */\n    upload_url: string;\n}\n/**\n * \n * @export\n * @interface UpdateBoostRequest\n */\nexport interface UpdateBoostRequest {\n    /**\n     * Boost level to set for current user\n     * @type {number}\n     * @memberof UpdateBoostRequest\n     */\n    level?: number;\n    /**\n     * Whether to activate or deactivate the boost\n     * @type {boolean}\n     * @memberof UpdateBoostRequest\n     */\n    is_active?: boolean;\n}\n/**\n * \n * @export\n * @interface UpdateBoostResponse\n */\nexport interface UpdateBoostResponse {\n    /**\n     * \n     * @type {number}\n     * @memberof UpdateBoostResponse\n     */\n    level?: number;\n    /**\n     * Balance in 1/2 gpu milliseconds (.1 cents)\n     * @type {number}\n     * @memberof UpdateBoostResponse\n     */\n    balance?: number;\n    /**\n     * Whether the boost is active\n     * @type {boolean}\n     * @memberof UpdateBoostResponse\n     */\n    is_active?: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof UpdateBoostResponse\n     */\n    error?: string;\n}\n/**\n * \n * @export\n * @interface UpdateGlobalSettingsRequest\n */\nexport interface UpdateGlobalSettingsRequest {\n    /**\n     * \n     * @type {object}\n     * @memberof UpdateGlobalSettingsRequest\n     */\n    settings_json: object;\n}\n/**\n * \n * @export\n * @interface UpdateImageInput\n */\nexport interface UpdateImageInput {\n    /**\n     * \n     * @type {string}\n     * @memberof UpdateImageInput\n     */\n    label?: string;\n    /**\n     * \n     * @type {StatusEnum}\n     * @memberof UpdateImageInput\n     */\n    status?: StatusEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof UpdateImageInput\n     */\n    encoded_image?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof UpdateImageInput\n     */\n    encoded_npy?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof UpdateImageInput\n     */\n    score?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof UpdateImageInput\n     */\n    negative_score?: number;\n    /**\n     * \n     * @type {boolean}\n     * @memberof UpdateImageInput\n     */\n    nsfw?: boolean;\n    /**\n     * \n     * @type {number}\n     * @memberof UpdateImageInput\n     */\n    deleted_at?: number | null;\n    /**\n     * \n     * @type {string}\n     * @memberof UpdateImageInput\n     */\n    error?: string;\n}\n/**\n * \n * @export\n * @interface UpdateLargeImageRequest\n */\nexport interface UpdateLargeImageRequest {\n    /**\n     * \n     * @type {string}\n     * @memberof UpdateLargeImageRequest\n     */\n    image_id: string;\n    /**\n     * \n     * @type {string}\n     * @memberof UpdateLargeImageRequest\n     */\n    tmp_image_id: string;\n    /**\n     * \n     * @type {number}\n     * @memberof UpdateLargeImageRequest\n     */\n    x: number;\n    /**\n     * \n     * @type {number}\n     * @memberof UpdateLargeImageRequest\n     */\n    y: number;\n}\n/**\n * \n * @export\n * @interface UpsertWorkerConfigInput\n */\nexport interface UpsertWorkerConfigInput {\n    /**\n     * \n     * @type {Array<WorkerGpuConfig>}\n     * @memberof UpsertWorkerConfigInput\n     */\n    gpu_configs?: Array<WorkerGpuConfig>;\n}\n/**\n * \n * @export\n * @interface UpsertWorkerInput\n */\nexport interface UpsertWorkerInput {\n    /**\n     * \n     * @type {string}\n     * @memberof UpsertWorkerInput\n     */\n    display_name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof UpsertWorkerInput\n     */\n    status?: UpsertWorkerInputStatusEnum;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum UpsertWorkerInputStatusEnum {\n    Idle = 'idle',\n    Active = 'active'\n}\n\n/**\n * \n * @export\n * @interface User\n */\nexport interface User {\n    /**\n     * \n     * @type {string}\n     * @memberof User\n     */\n    id?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof User\n     */\n    active?: boolean;\n}\n/**\n * \n * @export\n * @interface VerifyLoginInput\n */\nexport interface VerifyLoginInput {\n    /**\n     * \n     * @type {string}\n     * @memberof VerifyLoginInput\n     */\n    email?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof VerifyLoginInput\n     */\n    code?: string;\n}\n/**\n * \n * @export\n * @interface Worker\n */\nexport interface Worker {\n    /**\n     * \n     * @type {string}\n     * @memberof Worker\n     */\n    id: string;\n    /**\n     * \n     * @type {number}\n     * @memberof Worker\n     */\n    created_at: number;\n    /**\n     * \n     * @type {string}\n     * @memberof Worker\n     */\n    display_name: string;\n    /**\n     * \n     * @type {number}\n     * @memberof Worker\n     */\n    last_ping?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof Worker\n     */\n    status?: WorkerStatusEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof Worker\n     */\n    login_code?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Worker\n     */\n    engine?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof Worker\n     */\n    num_gpus?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof Worker\n     */\n    cloud_instance_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Worker\n     */\n    gpu_type?: string;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum WorkerStatusEnum {\n    Idle = 'idle',\n    Active = 'active'\n}\n\n/**\n * \n * @export\n * @interface WorkerConfig\n */\nexport interface WorkerConfig {\n    /**\n     * \n     * @type {string}\n     * @memberof WorkerConfig\n     */\n    worker_id: string;\n    /**\n     * \n     * @type {Array<WorkerGpuConfig>}\n     * @memberof WorkerConfig\n     */\n    gpu_configs?: Array<WorkerGpuConfig>;\n}\n/**\n * \n * @export\n * @interface WorkerGpuConfig\n */\nexport interface WorkerGpuConfig {\n    /**\n     * \n     * @type {number}\n     * @memberof WorkerGpuConfig\n     */\n    gpu_num: number;\n    /**\n     * \n     * @type {string}\n     * @memberof WorkerGpuConfig\n     */\n    model: string;\n}\n/**\n * \n * @export\n * @interface WorkerList\n */\nexport interface WorkerList {\n    /**\n     * \n     * @type {Array<Worker>}\n     * @memberof WorkerList\n     */\n    workers?: Array<Worker>;\n}\n/**\n * \n * @export\n * @interface WorkerLoginCode\n */\nexport interface WorkerLoginCode {\n    /**\n     * \n     * @type {string}\n     * @memberof WorkerLoginCode\n     */\n    login_code: string;\n}\n\n/**\n * AIBrushApi - axios parameter creator\n * @export\n */\nexport const AIBrushApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * Add Metrics\n         * @param {AddMetricsInput} [addMetricsInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        addMetrics: async (addMetricsInput?: AddMetricsInput, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/metrics`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(addMetricsInput, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get a list of saved images by id\n         * @param {BatchGetImagesInput} [batchGetImagesInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        batchGetImages: async (batchGetImagesInput?: BatchGetImagesInput, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/batch-get-images`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(batchGetImagesInput, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Create a new image\n         * @param {CreateImageInput} [createImageInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createImage: async (createImageInput?: CreateImageInput, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/images`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(createImageInput, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Create a new invite code\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createInviteCode: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/invite-codes`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Delete a saved image\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteImage: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('deleteImage', 'id', id)\n            const localVarPath = `/api/images/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Deposit to a user\\'s boost\n         * @param {string} userId \n         * @param {DepositRequest} [depositRequest] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        depositBoost: async (userId: string, depositRequest?: DepositRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'userId' is not null or undefined\n            assertParamExists('depositBoost', 'userId', userId)\n            const localVarPath = `/api/boost/{user_id}/deposit`\n                .replace(`{${\"user_id\"}}`, encodeURIComponent(String(userId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(depositRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Log in with Discord\n         * @param {DiscordLogin} [discordLogin] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        discordLogin: async (discordLogin?: DiscordLogin, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/discord-login`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(discordLogin, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get the assets url\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getAssetsUrl: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/assets-url`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get the boost for the current user\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getBoost: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/boost`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get the boost for a user\n         * @param {string} userId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getBoostForUser: async (userId: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'userId' is not null or undefined\n            assertParamExists('getBoostForUser', 'userId', userId)\n            const localVarPath = `/api/boost/{user_id}`\n                .replace(`{${\"user_id\"}}`, encodeURIComponent(String(userId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get the features\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getFeatures: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/features`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get the global settings\n         * @param {string} key \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getGlobalSettings: async (key: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'key' is not null or undefined\n            assertParamExists('getGlobalSettings', 'key', key)\n            const localVarPath = `/api/global-settings/{key}`\n                .replace(`{${\"key\"}}`, encodeURIComponent(String(key)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get a saved image by id\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getImage: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('getImage', 'id', id)\n            const localVarPath = `/api/images/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get the binary image data\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getImageData: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('getImageData', 'id', id)\n            const localVarPath = `/api/images/{id}.image.png`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get download urls for image assets\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getImageDownloadUrls: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('getImageDownloadUrls', 'id', id)\n            const localVarPath = `/api/images/{id}/download-urls`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get upload urls for image assets\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getImageUploadUrls: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('getImageUploadUrls', 'id', id)\n            const localVarPath = `/api/images/{id}/upload-urls`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get the binary mask data\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getMaskData: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('getMaskData', 'id', id)\n            const localVarPath = `/api/images/{id}.mask.png`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Get available models\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getModels: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/stable-diffusion-models`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get the binary thumbnail data\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getThumbnailData: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('getThumbnailData', 'id', id)\n            const localVarPath = `/api/images/{id}.thumbnail.png`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Healthcheck\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        healthcheck: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/healthcheck`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Check if the user is admin\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        isAdmin: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/is-admin`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get the boost for all users\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listBoosts: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/boosts`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get a list of saved images\n         * @param {number} [cursor] \n         * @param {string} [filter] \n         * @param {number} [limit] \n         * @param {'asc' | 'desc'} [direction] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listImages: async (cursor?: number, filter?: string, limit?: number, direction?: 'asc' | 'desc', options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/images`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (cursor !== undefined) {\n                localVarQueryParameter['cursor'] = cursor;\n            }\n\n            if (filter !== undefined) {\n                localVarQueryParameter['filter'] = filter;\n            }\n\n            if (limit !== undefined) {\n                localVarQueryParameter['limit'] = limit;\n            }\n\n            if (direction !== undefined) {\n                localVarQueryParameter['direction'] = direction;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Login by email\n         * @param {LoginInput} [loginInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        login: async (loginInput?: LoginInput, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/auth/login`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(loginInput, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Refresh Login code\n         * @param {RefreshLoginInput} [refreshLoginInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        refresh: async (refreshLoginInput?: RefreshLoginInput, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/auth/refresh`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(refreshLoginInput, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Update the boost level for the current user\n         * @param {UpdateBoostRequest} [updateBoostRequest] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateBoost: async (updateBoostRequest?: UpdateBoostRequest, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/boost`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(updateBoostRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Update the global settings\n         * @param {string} key \n         * @param {UpdateGlobalSettingsRequest} [updateGlobalSettingsRequest] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateGlobalSettings: async (key: string, updateGlobalSettingsRequest?: UpdateGlobalSettingsRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'key' is not null or undefined\n            assertParamExists('updateGlobalSettings', 'key', key)\n            const localVarPath = `/api/global-settings/{key}`\n                .replace(`{${\"key\"}}`, encodeURIComponent(String(key)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(updateGlobalSettingsRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Update a saved image\n         * @param {string} id \n         * @param {UpdateImageInput} [updateImageInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateImage: async (id: string, updateImageInput?: UpdateImageInput, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('updateImage', 'id', id)\n            const localVarPath = `/api/images/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(updateImageInput, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Upload the binary image data\n         * @param {string} id \n         * @param {any} [body] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        uploadImageData: async (id: string, body?: any, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('uploadImageData', 'id', id)\n            const localVarPath = `/api/images/{id}.image.png`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'image/png';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Upload the binary thumbnail data\n         * @param {string} id \n         * @param {any} [body] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        uploadThumbnailData: async (id: string, body?: any, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('uploadThumbnailData', 'id', id)\n            const localVarPath = `/api/images/{id}.thumbnail.png`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'image/png';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Verify Login code\n         * @param {VerifyLoginInput} [verifyLoginInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        verify: async (verifyLoginInput?: VerifyLoginInput, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/auth/verify`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(verifyLoginInput, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * AIBrushApi - functional programming interface\n * @export\n */\nexport const AIBrushApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = AIBrushApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * Add Metrics\n         * @param {AddMetricsInput} [addMetricsInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async addMetrics(addMetricsInput?: AddMetricsInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.addMetrics(addMetricsInput, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get a list of saved images by id\n         * @param {BatchGetImagesInput} [batchGetImagesInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async batchGetImages(batchGetImagesInput?: BatchGetImagesInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImageList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.batchGetImages(batchGetImagesInput, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Create a new image\n         * @param {CreateImageInput} [createImageInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createImage(createImageInput?: CreateImageInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImageList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.createImage(createImageInput, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Create a new invite code\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createInviteCode(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InviteCode>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.createInviteCode(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Delete a saved image\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async deleteImage(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteImage(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Deposit to a user\\'s boost\n         * @param {string} userId \n         * @param {DepositRequest} [depositRequest] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async depositBoost(userId: string, depositRequest?: DepositRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Boost>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.depositBoost(userId, depositRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Log in with Discord\n         * @param {DiscordLogin} [discordLogin] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async discordLogin(discordLogin?: DiscordLogin, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginResult>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.discordLogin(discordLogin, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get the assets url\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getAssetsUrl(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssetsUrl>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getAssetsUrl(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get the boost for the current user\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getBoost(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Boost>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getBoost(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get the boost for a user\n         * @param {string} userId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getBoostForUser(userId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Boost>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getBoostForUser(userId, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get the features\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getFeatures(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeatureList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getFeatures(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get the global settings\n         * @param {string} key \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getGlobalSettings(key: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GlobalSettings>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getGlobalSettings(key, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get a saved image by id\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getImage(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Image>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getImage(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get the binary image data\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getImageData(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getImageData(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get download urls for image assets\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getImageDownloadUrls(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImageUrls>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getImageDownloadUrls(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get upload urls for image assets\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getImageUploadUrls(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImageUrls>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getImageUploadUrls(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get the binary mask data\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getMaskData(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getMaskData(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Get available models\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getModels(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: StableDiffusionModel; }>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getModels(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get the binary thumbnail data\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getThumbnailData(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getThumbnailData(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Healthcheck\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async healthcheck(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Healthcheck>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.healthcheck(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Check if the user is admin\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async isAdmin(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IsAdminResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.isAdmin(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get the boost for all users\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listBoosts(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BoostList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.listBoosts(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get a list of saved images\n         * @param {number} [cursor] \n         * @param {string} [filter] \n         * @param {number} [limit] \n         * @param {'asc' | 'desc'} [direction] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listImages(cursor?: number, filter?: string, limit?: number, direction?: 'asc' | 'desc', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImageList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.listImages(cursor, filter, limit, direction, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Login by email\n         * @param {LoginInput} [loginInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async login(loginInput?: LoginInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.login(loginInput, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Refresh Login code\n         * @param {RefreshLoginInput} [refreshLoginInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async refresh(refreshLoginInput?: RefreshLoginInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginResult>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.refresh(refreshLoginInput, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Update the boost level for the current user\n         * @param {UpdateBoostRequest} [updateBoostRequest] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async updateBoost(updateBoostRequest?: UpdateBoostRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateBoostResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.updateBoost(updateBoostRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Update the global settings\n         * @param {string} key \n         * @param {UpdateGlobalSettingsRequest} [updateGlobalSettingsRequest] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async updateGlobalSettings(key: string, updateGlobalSettingsRequest?: UpdateGlobalSettingsRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GlobalSettings>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.updateGlobalSettings(key, updateGlobalSettingsRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Update a saved image\n         * @param {string} id \n         * @param {UpdateImageInput} [updateImageInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async updateImage(id: string, updateImageInput?: UpdateImageInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Image>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.updateImage(id, updateImageInput, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Upload the binary image data\n         * @param {string} id \n         * @param {any} [body] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async uploadImageData(id: string, body?: any, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadImageData(id, body, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Upload the binary thumbnail data\n         * @param {string} id \n         * @param {any} [body] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async uploadThumbnailData(id: string, body?: any, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadThumbnailData(id, body, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Verify Login code\n         * @param {VerifyLoginInput} [verifyLoginInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async verify(verifyLoginInput?: VerifyLoginInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginResult>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.verify(verifyLoginInput, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n    }\n};\n\n/**\n * AIBrushApi - factory interface\n * @export\n */\nexport const AIBrushApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = AIBrushApiFp(configuration)\n    return {\n        /**\n         * Add Metrics\n         * @param {AddMetricsInput} [addMetricsInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        addMetrics(addMetricsInput?: AddMetricsInput, options?: any): AxiosPromise<void> {\n            return localVarFp.addMetrics(addMetricsInput, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get a list of saved images by id\n         * @param {BatchGetImagesInput} [batchGetImagesInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        batchGetImages(batchGetImagesInput?: BatchGetImagesInput, options?: any): AxiosPromise<ImageList> {\n            return localVarFp.batchGetImages(batchGetImagesInput, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Create a new image\n         * @param {CreateImageInput} [createImageInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createImage(createImageInput?: CreateImageInput, options?: any): AxiosPromise<ImageList> {\n            return localVarFp.createImage(createImageInput, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Create a new invite code\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createInviteCode(options?: any): AxiosPromise<InviteCode> {\n            return localVarFp.createInviteCode(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Delete a saved image\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteImage(id: string, options?: any): AxiosPromise<void> {\n            return localVarFp.deleteImage(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Deposit to a user\\'s boost\n         * @param {string} userId \n         * @param {DepositRequest} [depositRequest] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        depositBoost(userId: string, depositRequest?: DepositRequest, options?: any): AxiosPromise<Boost> {\n            return localVarFp.depositBoost(userId, depositRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Log in with Discord\n         * @param {DiscordLogin} [discordLogin] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        discordLogin(discordLogin?: DiscordLogin, options?: any): AxiosPromise<LoginResult> {\n            return localVarFp.discordLogin(discordLogin, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get the assets url\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getAssetsUrl(options?: any): AxiosPromise<AssetsUrl> {\n            return localVarFp.getAssetsUrl(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get the boost for the current user\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getBoost(options?: any): AxiosPromise<Boost> {\n            return localVarFp.getBoost(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get the boost for a user\n         * @param {string} userId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getBoostForUser(userId: string, options?: any): AxiosPromise<Boost> {\n            return localVarFp.getBoostForUser(userId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get the features\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getFeatures(options?: any): AxiosPromise<FeatureList> {\n            return localVarFp.getFeatures(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get the global settings\n         * @param {string} key \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getGlobalSettings(key: string, options?: any): AxiosPromise<GlobalSettings> {\n            return localVarFp.getGlobalSettings(key, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get a saved image by id\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getImage(id: string, options?: any): AxiosPromise<Image> {\n            return localVarFp.getImage(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get the binary image data\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getImageData(id: string, options?: any): AxiosPromise<any> {\n            return localVarFp.getImageData(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get download urls for image assets\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getImageDownloadUrls(id: string, options?: any): AxiosPromise<ImageUrls> {\n            return localVarFp.getImageDownloadUrls(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get upload urls for image assets\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getImageUploadUrls(id: string, options?: any): AxiosPromise<ImageUrls> {\n            return localVarFp.getImageUploadUrls(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get the binary mask data\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getMaskData(id: string, options?: any): AxiosPromise<any> {\n            return localVarFp.getMaskData(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Get available models\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getModels(options?: any): AxiosPromise<{ [key: string]: StableDiffusionModel; }> {\n            return localVarFp.getModels(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get the binary thumbnail data\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getThumbnailData(id: string, options?: any): AxiosPromise<any> {\n            return localVarFp.getThumbnailData(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Healthcheck\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        healthcheck(options?: any): AxiosPromise<Healthcheck> {\n            return localVarFp.healthcheck(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Check if the user is admin\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        isAdmin(options?: any): AxiosPromise<IsAdminResponse> {\n            return localVarFp.isAdmin(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get the boost for all users\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listBoosts(options?: any): AxiosPromise<BoostList> {\n            return localVarFp.listBoosts(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get a list of saved images\n         * @param {number} [cursor] \n         * @param {string} [filter] \n         * @param {number} [limit] \n         * @param {'asc' | 'desc'} [direction] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listImages(cursor?: number, filter?: string, limit?: number, direction?: 'asc' | 'desc', options?: any): AxiosPromise<ImageList> {\n            return localVarFp.listImages(cursor, filter, limit, direction, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Login by email\n         * @param {LoginInput} [loginInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        login(loginInput?: LoginInput, options?: any): AxiosPromise<void> {\n            return localVarFp.login(loginInput, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Refresh Login code\n         * @param {RefreshLoginInput} [refreshLoginInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        refresh(refreshLoginInput?: RefreshLoginInput, options?: any): AxiosPromise<LoginResult> {\n            return localVarFp.refresh(refreshLoginInput, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Update the boost level for the current user\n         * @param {UpdateBoostRequest} [updateBoostRequest] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateBoost(updateBoostRequest?: UpdateBoostRequest, options?: any): AxiosPromise<UpdateBoostResponse> {\n            return localVarFp.updateBoost(updateBoostRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Update the global settings\n         * @param {string} key \n         * @param {UpdateGlobalSettingsRequest} [updateGlobalSettingsRequest] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateGlobalSettings(key: string, updateGlobalSettingsRequest?: UpdateGlobalSettingsRequest, options?: any): AxiosPromise<GlobalSettings> {\n            return localVarFp.updateGlobalSettings(key, updateGlobalSettingsRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Update a saved image\n         * @param {string} id \n         * @param {UpdateImageInput} [updateImageInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateImage(id: string, updateImageInput?: UpdateImageInput, options?: any): AxiosPromise<Image> {\n            return localVarFp.updateImage(id, updateImageInput, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Upload the binary image data\n         * @param {string} id \n         * @param {any} [body] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        uploadImageData(id: string, body?: any, options?: any): AxiosPromise<void> {\n            return localVarFp.uploadImageData(id, body, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Upload the binary thumbnail data\n         * @param {string} id \n         * @param {any} [body] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        uploadThumbnailData(id: string, body?: any, options?: any): AxiosPromise<void> {\n            return localVarFp.uploadThumbnailData(id, body, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Verify Login code\n         * @param {VerifyLoginInput} [verifyLoginInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        verify(verifyLoginInput?: VerifyLoginInput, options?: any): AxiosPromise<LoginResult> {\n            return localVarFp.verify(verifyLoginInput, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * AIBrushApi - object-oriented interface\n * @export\n * @class AIBrushApi\n * @extends {BaseAPI}\n */\nexport class AIBrushApi extends BaseAPI {\n    /**\n     * Add Metrics\n     * @param {AddMetricsInput} [addMetricsInput] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public addMetrics(addMetricsInput?: AddMetricsInput, options?: any) {\n        return AIBrushApiFp(this.configuration).addMetrics(addMetricsInput, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get a list of saved images by id\n     * @param {BatchGetImagesInput} [batchGetImagesInput] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public batchGetImages(batchGetImagesInput?: BatchGetImagesInput, options?: any) {\n        return AIBrushApiFp(this.configuration).batchGetImages(batchGetImagesInput, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Create a new image\n     * @param {CreateImageInput} [createImageInput] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public createImage(createImageInput?: CreateImageInput, options?: any) {\n        return AIBrushApiFp(this.configuration).createImage(createImageInput, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Create a new invite code\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public createInviteCode(options?: any) {\n        return AIBrushApiFp(this.configuration).createInviteCode(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Delete a saved image\n     * @param {string} id \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public deleteImage(id: string, options?: any) {\n        return AIBrushApiFp(this.configuration).deleteImage(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Deposit to a user\\'s boost\n     * @param {string} userId \n     * @param {DepositRequest} [depositRequest] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public depositBoost(userId: string, depositRequest?: DepositRequest, options?: any) {\n        return AIBrushApiFp(this.configuration).depositBoost(userId, depositRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Log in with Discord\n     * @param {DiscordLogin} [discordLogin] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public discordLogin(discordLogin?: DiscordLogin, options?: any) {\n        return AIBrushApiFp(this.configuration).discordLogin(discordLogin, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get the assets url\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public getAssetsUrl(options?: any) {\n        return AIBrushApiFp(this.configuration).getAssetsUrl(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get the boost for the current user\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public getBoost(options?: any) {\n        return AIBrushApiFp(this.configuration).getBoost(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get the boost for a user\n     * @param {string} userId \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public getBoostForUser(userId: string, options?: any) {\n        return AIBrushApiFp(this.configuration).getBoostForUser(userId, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get the features\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public getFeatures(options?: any) {\n        return AIBrushApiFp(this.configuration).getFeatures(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get the global settings\n     * @param {string} key \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public getGlobalSettings(key: string, options?: any) {\n        return AIBrushApiFp(this.configuration).getGlobalSettings(key, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get a saved image by id\n     * @param {string} id \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public getImage(id: string, options?: any) {\n        return AIBrushApiFp(this.configuration).getImage(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get the binary image data\n     * @param {string} id \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public getImageData(id: string, options?: any) {\n        return AIBrushApiFp(this.configuration).getImageData(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get download urls for image assets\n     * @param {string} id \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public getImageDownloadUrls(id: string, options?: any) {\n        return AIBrushApiFp(this.configuration).getImageDownloadUrls(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get upload urls for image assets\n     * @param {string} id \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public getImageUploadUrls(id: string, options?: any) {\n        return AIBrushApiFp(this.configuration).getImageUploadUrls(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get the binary mask data\n     * @param {string} id \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public getMaskData(id: string, options?: any) {\n        return AIBrushApiFp(this.configuration).getMaskData(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Get available models\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public getModels(options?: any) {\n        return AIBrushApiFp(this.configuration).getModels(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get the binary thumbnail data\n     * @param {string} id \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public getThumbnailData(id: string, options?: any) {\n        return AIBrushApiFp(this.configuration).getThumbnailData(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Healthcheck\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public healthcheck(options?: any) {\n        return AIBrushApiFp(this.configuration).healthcheck(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Check if the user is admin\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public isAdmin(options?: any) {\n        return AIBrushApiFp(this.configuration).isAdmin(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get the boost for all users\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public listBoosts(options?: any) {\n        return AIBrushApiFp(this.configuration).listBoosts(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get a list of saved images\n     * @param {number} [cursor] \n     * @param {string} [filter] \n     * @param {number} [limit] \n     * @param {'asc' | 'desc'} [direction] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public listImages(cursor?: number, filter?: string, limit?: number, direction?: 'asc' | 'desc', options?: any) {\n        return AIBrushApiFp(this.configuration).listImages(cursor, filter, limit, direction, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Login by email\n     * @param {LoginInput} [loginInput] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public login(loginInput?: LoginInput, options?: any) {\n        return AIBrushApiFp(this.configuration).login(loginInput, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Refresh Login code\n     * @param {RefreshLoginInput} [refreshLoginInput] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public refresh(refreshLoginInput?: RefreshLoginInput, options?: any) {\n        return AIBrushApiFp(this.configuration).refresh(refreshLoginInput, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Update the boost level for the current user\n     * @param {UpdateBoostRequest} [updateBoostRequest] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public updateBoost(updateBoostRequest?: UpdateBoostRequest, options?: any) {\n        return AIBrushApiFp(this.configuration).updateBoost(updateBoostRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Update the global settings\n     * @param {string} key \n     * @param {UpdateGlobalSettingsRequest} [updateGlobalSettingsRequest] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public updateGlobalSettings(key: string, updateGlobalSettingsRequest?: UpdateGlobalSettingsRequest, options?: any) {\n        return AIBrushApiFp(this.configuration).updateGlobalSettings(key, updateGlobalSettingsRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Update a saved image\n     * @param {string} id \n     * @param {UpdateImageInput} [updateImageInput] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public updateImage(id: string, updateImageInput?: UpdateImageInput, options?: any) {\n        return AIBrushApiFp(this.configuration).updateImage(id, updateImageInput, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Upload the binary image data\n     * @param {string} id \n     * @param {any} [body] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public uploadImageData(id: string, body?: any, options?: any) {\n        return AIBrushApiFp(this.configuration).uploadImageData(id, body, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Upload the binary thumbnail data\n     * @param {string} id \n     * @param {any} [body] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public uploadThumbnailData(id: string, body?: any, options?: any) {\n        return AIBrushApiFp(this.configuration).uploadThumbnailData(id, body, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Verify Login code\n     * @param {VerifyLoginInput} [verifyLoginInput] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public verify(verifyLoginInput?: VerifyLoginInput, options?: any) {\n        return AIBrushApiFp(this.configuration).verify(verifyLoginInput, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n\n\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * AIBrush API\n * Orchestration backend for AI Brush\n *\n * The version of the OpenAPI document: 1.0.0\n * Contact: admin@aibrush.art\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport { Configuration } from \"./configuration\";\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport globalAxios, { AxiosPromise, AxiosInstance } from 'axios';\n\nexport const BASE_PATH = \"https://www.aibrush.art\".replace(/\\/+$/, \"\");\n\n/**\n *\n * @export\n */\nexport const COLLECTION_FORMATS = {\n    csv: \",\",\n    ssv: \" \",\n    tsv: \"\\t\",\n    pipes: \"|\",\n};\n\n/**\n *\n * @export\n * @interface RequestArgs\n */\nexport interface RequestArgs {\n    url: string;\n    options: any;\n}\n\n/**\n *\n * @export\n * @class BaseAPI\n */\nexport class BaseAPI {\n    protected configuration: Configuration | undefined;\n\n    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected axios: AxiosInstance = globalAxios) {\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = configuration.basePath || this.basePath;\n        }\n    }\n};\n\n/**\n *\n * @export\n * @class RequiredError\n * @extends {Error}\n */\nexport class RequiredError extends Error {\n    name: \"RequiredError\" = \"RequiredError\";\n    constructor(public field: string, msg?: string) {\n        super(msg);\n    }\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * AIBrush API\n * Orchestration backend for AI Brush\n *\n * The version of the OpenAPI document: 1.0.0\n * Contact: admin@aibrush.art\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport { Configuration } from \"./configuration\";\nimport { RequiredError,　RequestArgs } from \"./base\";\nimport { AxiosInstance } from 'axios';\n\n/**\n *\n * @export\n */\nexport const DUMMY_BASE_URL = 'https://example.com'\n\n/**\n *\n * @throws {RequiredError}\n * @export\n */\nexport const assertParamExists = function (functionName: string, paramName: string, paramValue: unknown) {\n    if (paramValue === null || paramValue === undefined) {\n        throw new RequiredError(paramName, `Required parameter ${paramName} was null or undefined when calling ${functionName}.`);\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setApiKeyToObject = async function (object: any, keyParamName: string, configuration?: Configuration) {\n    if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n            ? await configuration.apiKey(keyParamName)\n            : await configuration.apiKey;\n        object[keyParamName] = localVarApiKeyValue;\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setBasicAuthToObject = function (object: any, configuration?: Configuration) {\n    if (configuration && (configuration.username || configuration.password)) {\n        object[\"auth\"] = { username: configuration.username, password: configuration.password };\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setBearerAuthToObject = async function (object: any, configuration?: Configuration) {\n    if (configuration && configuration.accessToken) {\n        const accessToken = typeof configuration.accessToken === 'function'\n            ? await configuration.accessToken()\n            : await configuration.accessToken;\n        object[\"Authorization\"] = \"Bearer \" + accessToken;\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setOAuthToObject = async function (object: any, name: string, scopes: string[], configuration?: Configuration) {\n    if (configuration && configuration.accessToken) {\n        const localVarAccessTokenValue = typeof configuration.accessToken === 'function'\n            ? await configuration.accessToken(name, scopes)\n            : await configuration.accessToken;\n        object[\"Authorization\"] = \"Bearer \" + localVarAccessTokenValue;\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setSearchParams = function (url: URL, ...objects: any[]) {\n    const searchParams = new URLSearchParams(url.search);\n    for (const object of objects) {\n        for (const key in object) {\n            if (Array.isArray(object[key])) {\n                searchParams.delete(key);\n                for (const item of object[key]) {\n                    searchParams.append(key, item);\n                }\n            } else {\n                searchParams.set(key, object[key]);\n            }\n        }\n    }\n    url.search = searchParams.toString();\n}\n\n/**\n *\n * @export\n */\nexport const serializeDataIfNeeded = function (value: any, requestOptions: any, configuration?: Configuration) {\n    const nonString = typeof value !== 'string';\n    const needsSerialization = nonString && configuration && configuration.isJsonMime\n        ? configuration.isJsonMime(requestOptions.headers['Content-Type'])\n        : nonString;\n    return needsSerialization\n        ? JSON.stringify(value !== undefined ? value : {})\n        : (value || \"\");\n}\n\n/**\n *\n * @export\n */\nexport const toPathString = function (url: URL) {\n    return url.pathname + url.search + url.hash\n}\n\n/**\n *\n * @export\n */\nexport const createRequestFunction = function (axiosArgs: RequestArgs, globalAxios: AxiosInstance, BASE_PATH: string, configuration?: Configuration) {\n    return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n        const axiosRequestArgs = {...axiosArgs.options, url: (configuration?.basePath || basePath) + axiosArgs.url};\n        return axios.request(axiosRequestArgs);\n    };\n}\n","export interface AspectRatio {\n    displayName: string;\n    width: number;\n    height: number;\n    id: number;\n}\n\nexport const DEFAULT_ASPECT_RATIO = 5;\n\nexport const aspectRatios: AspectRatio[] = [\n    {\n        displayName: \"4:1\",\n        width: 1024,\n        height: 256,\n        id: 0,\n    },\n    {\n        displayName: \"3:1\",\n        width: 768,\n        height: 256,\n        id: 1,\n    },\n    {\n        displayName: \"2:1\",\n        width: 640,\n        height: 320,\n        id: 2,\n    },\n    {\n        displayName: \"3:2\",\n        width: 576,\n        height: 384,\n        id: 3,\n    },\n    {\n        displayName: \"5:4\",\n        width: 640,\n        height: 512,\n        id: 4,\n    },\n    {\n        displayName: \"1:1\",\n        width: 512,\n        height: 512,\n        id: 5,\n    },\n    {\n        displayName: \"4:5\",\n        width: 512,\n        height: 640,\n        id: 6,\n    },\n    {\n        displayName: \"2:3\",\n        width: 384,\n        height: 576,\n        id: 7,\n    },\n    {\n        displayName: \"1:2\",\n        width: 320,\n        height: 640,\n        id: 8,\n    },\n    {\n        displayName: \"1:3\",\n        width: 256,\n        height: 768,\n        id: 9,\n    },\n    {\n        displayName: \"1:4\",\n        width: 256,\n        height: 1024,\n        id: 10,\n    }\n];\n\nexport function getClosestAspectRatio(width: number, height: number): AspectRatio {\n    const aspectRatio = width / height;\n\n    const tests = [...aspectRatios];\n    tests.sort((a, b) => {\n        const aRatio = a.width / a.height;\n        const bRatio = b.width / b.height;\n        return (\n            Math.abs(aRatio - aspectRatio) -\n            Math.abs(bRatio - aspectRatio)\n        );\n    });\n    const bestMatch = tests[0];\n    return bestMatch;\n}\n\nexport function compareSize(a: AspectRatio, width: number, height: number): number {\n    const area1 = a.width * a.height;\n    const area2 = width * height;\n    return area1 - area2;\n}\n\nexport function upscale(aspectRatio: AspectRatio): AspectRatio {\n    return {\n        displayName: aspectRatio.displayName,\n        width: aspectRatio.width * 2,\n        height: aspectRatio.height * 2,\n        id: aspectRatio.id,\n    }\n}\n\nexport function downscale(aspectRatio: AspectRatio): AspectRatio {\n    return {\n        displayName: aspectRatio.displayName,\n        width: aspectRatio.width / 2,\n        height: aspectRatio.height / 2,\n        id: aspectRatio.id,\n    }\n}\n","import React, { useState, useEffect, useRef } from \"react\";\nimport { useParams, useHistory } from \"react-router-dom\";\nimport axios, { AxiosInstance } from \"axios\";\nimport * as uuid from \"uuid\";\n\nimport { AIBrushApi } from \"../../client\";\nimport { getUpscaleLevel } from \"../../lib/upscale\";\nimport \"./ImageEditor.css\";\nimport { createRenderer, Renderer } from \"./renderer\";\nimport { Tool, BaseTool } from \"./tool\";\nimport { SelectionTool, Controls as SelectionControls } from \"./selection-tool\";\nimport { EnhanceTool, EnhanceControls } from \"./enhance-tool\";\nimport { PencilTool, Controls as PencilControls } from \"./pencil-tool\";\nimport { SmudgeTool, SmudgeControls } from \"./smudge-tool\";\nimport { ImportExportControls } from \"./import-export\";\nimport { InpaintControls, InpaintTool } from \"./inpaint-tool\";\nimport { AugmentControls } from \"./augment-tool\";\nimport { defaultArgs } from \"../../components/ImagePrompt\";\nimport { ApiSocket } from \"../../lib/apisocket\";\nimport {\n    createEncodedThumbnail,\n    encodedImageToBlob,\n    uploadBlob,\n} from \"../../lib/imageutil\";\nimport { BusyModal } from \"../../components/BusyModal\";\nimport { LocalImage, LocalImagesStore } from \"../../lib/localImagesStore\";\nimport { render } from \"@testing-library/react\";\n\ninterface CanPreventDefault {\n    preventDefault: () => void;\n}\n\ninterface Props {\n    api: AIBrushApi;\n    apisocket: ApiSocket;\n    assetsUrl: string;\n    localImages: LocalImagesStore;\n}\n\ninterface ToolConfig {\n    name: string;\n    iconClass: string;\n    constructor: (r: Renderer) => Tool;\n    renderControls: (t: Tool, renderer: Renderer) => JSX.Element;\n    defaultArgs: any;\n}\n\nexport const anonymousClient = axios.create();\ndelete anonymousClient.defaults.headers.common[\"Authorization\"];\n\nexport const ImageEditor: React.FC<Props> = ({\n    api,\n    apisocket,\n    localImages,\n}) => {\n    const [showSelectionControls, setShowSelectionControls] = useState(false);\n    const tools: Array<ToolConfig> = [\n        {\n            name: \"inpaint\",\n            iconClass: \"fas fa-paint-brush\",\n            constructor: (r: Renderer) => new InpaintTool(r),\n            defaultArgs: {},\n            renderControls: (t: Tool, renderer: Renderer) => {\n                t.onShowSelectionControls(setShowSelectionControls);\n                return (\n                    <InpaintControls\n                        tool={t as InpaintTool}\n                        renderer={renderer}\n                        api={api}\n                        apisocket={apisocket}\n                        image={image!}\n                    />\n                );\n            },\n        },\n        {\n            name: \"enhance\",\n            iconClass: \"fas fa-magic\",\n            constructor: (r: Renderer) => new EnhanceTool(r),\n            defaultArgs: {\n                variationStrength: 0.75,\n            },\n            renderControls: (t: Tool, renderer: Renderer) => {\n                t.onShowSelectionControls(setShowSelectionControls);\n                return (\n                    <EnhanceControls\n                        tool={t as EnhanceTool}\n                        renderer={renderer}\n                        api={api}\n                        apisocket={apisocket}\n                        image={image!}\n                    />\n                );\n            },\n        },\n        {\n            name: \"pencil\",\n            iconClass: \"fas fa-pencil-alt\",\n            constructor: (r: Renderer) => new PencilTool(r),\n            defaultArgs: {},\n            renderControls: (t: Tool, renderer: Renderer) => {\n                return (\n                    <PencilControls\n                        tool={t as PencilTool}\n                        renderer={renderer}\n                    />\n                );\n            },\n        },\n        {\n            name: \"smudge\",\n            // finger icon\n            iconClass: \"fas fa-hand-pointer\",\n            constructor: (r: Renderer) => new SmudgeTool(r),\n            defaultArgs: {},\n            renderControls: (t: Tool, renderer: Renderer) => {\n                return (\n                    <SmudgeControls\n                        tool={t as SmudgeTool}\n                        renderer={renderer}\n                    />\n                );\n            },\n        },\n        {\n            name: \"import-export\",\n            iconClass: \"fas fa-file-import\",\n            constructor: (r: Renderer) => new BaseTool(r, \"import-export\"),\n            defaultArgs: {},\n            renderControls: (t: Tool, renderer: Renderer) => {\n                return (\n                    <ImportExportControls\n                        renderer={renderer}\n                        tool={t as BaseTool}\n                        api={api}\n                    />\n                );\n            },\n        },\n        {\n            name: \"augment\",\n            iconClass: \"fas fa-image\",\n            constructor: (r: Renderer) => new BaseTool(r, \"augment\"),\n            defaultArgs: {},\n            renderControls: (t: Tool, renderer: Renderer) => {\n                return (\n                    <AugmentControls\n                        renderer={renderer}\n                        tool={t as BaseTool}\n                        api={api}\n                        image={image!}\n                    />\n                );\n            },\n        },\n    ];\n\n    const [image, setImage] = useState<LocalImage | null>(null);\n    const [renderer, setRenderer] = useState<Renderer | null>(null);\n    const [tool, setTool] = useState<Tool | null>(null);\n    const [canUndo, setCanUndo] = useState(false);\n    const [canRedo, setCanRedo] = useState(false);\n    const [busyMessage, setBusyMessage] = useState<string | null>(null);\n\n    const { id } = useParams<{ id: string }>();\n    const history = useHistory();\n\n    const canvasRef = useRef<HTMLCanvasElement>(null);\n\n    const onSelectTool = (toolconfig: ToolConfig) => {\n        if (renderer) {\n            if (tool) {\n                if (!tool.destroy()) {\n                    return;\n                }\n            }\n            const newTool = toolconfig.constructor(renderer);\n            setTool(newTool);\n            newTool.onSaveImage((encodedImage, args = {}) => {\n                console.log(\"Saving image...\");\n                saveNewImage(encodedImage, args);\n            });\n        }\n    };\n\n    /**\n     * Saves a new image to the server\n     *\n     * @param encodedImage base64 encoded image\n     * @param newArgs may contain new phrases and negative phrases\n     */\n    const saveNewImage = async (encodedImage: string, newArgs: any) => {\n        if (!image || !encodedImage) {\n            throw new Error(\"Cannot save new image without existing image\");\n        }\n        if (!renderer) {\n            throw new Error(\"Cannot save new image without renderer\");\n        }\n        setBusyMessage(\"Saving image...\");\n        try {\n            const newImage: LocalImage = {\n                ...image,\n                params: {\n                    ...image.params,\n                    width: renderer!.getWidth() as any,\n                    height: renderer!.getHeight() as any,\n                },\n                id: uuid.v4(),\n                imageData: `data:image/png;base64,${encodedImage}`,\n            };\n            await localImages.saveImage(newImage);\n\n            // switch url and state to new image\n            setImage(newImage);\n            history.replace(`/image-editor/${newImage.id}`);\n        } finally {\n            setBusyMessage(null);\n        }\n    };\n\n    useEffect(() => {\n        if (image) {\n            return;\n        }\n\n        async function loadImage() {\n            const localImage = await localImages.getImage(id);\n            let imageSrc = \"\";\n            if (localImage) {\n                setImage(localImage);\n                imageSrc = localImage.imageData!;\n            } else {\n                const image = (await api.getImage(id)).data;\n                setImage(image);\n                const download_urls = await api.getImageDownloadUrls(id);\n                // Loading up data as binary, base64 encoding into image url\n                // bypasses browser security nonsense about cross-domain images\n                const resp = await anonymousClient.get(\n                    download_urls.data.image_url!,\n                    {\n                        responseType: \"arraybuffer\",\n                    }\n                );\n                const binaryImageData = Buffer.from(resp.data, \"binary\");\n                const base64ImageData = binaryImageData.toString(\"base64\");\n                imageSrc = `data:image/png;base64,${base64ImageData}`;\n            }\n\n            const imageElement = new Image();\n            imageElement.src = imageSrc;\n            imageElement.onload = () => {\n                if (!canvasRef.current) {\n                    console.error(\"Failed to get canvas\");\n                    return;\n                }\n                const renderer = createRenderer(canvasRef.current);\n                renderer.setBaseImage(imageElement);\n                setRenderer(renderer);\n            };\n        }\n        loadImage();\n    }, [image, id]);\n\n    // this covers the case that an image is upscaled to max, the upscale tool needs to\n    // be hidden and deselected.\n    useEffect(() => {\n        if (\n            image &&\n            tool &&\n            tool.name == \"upscale\" &&\n            image.params.width! * image.params.height! >= 2048 * 2048\n        ) {\n            onSelectTool(tools[0]);\n        }\n    }, [image, tool]);\n\n    useEffect(() => {\n        if (renderer) {\n            onSelectTool(tools[0]);\n            renderer.onSnapshot(() => {\n                setCanUndo(renderer.canUndo());\n                setCanRedo(renderer.canRedo());\n            });\n        }\n    }, [renderer]);\n\n    useEffect(() => {\n        if (canvasRef.current) {\n            const listener = (e: WheelEvent) => {\n                if (tool) {\n                    e.preventDefault();\n                    tool.onWheel(e);\n                }\n            };\n            canvasRef.current.addEventListener(\"wheel\", listener);\n            return () => {\n                canvasRef.current?.removeEventListener(\"wheel\", listener);\n            };\n        }\n    }, [tool, canvasRef.current]);\n\n    function renderTool(t: ToolConfig) {\n        if (!image) {\n            return null;\n        }\n        if (\n            t.name == \"upscale\" &&\n            image.params.width! * image.params.height! >= 2048 * 2048\n        ) {\n            return null;\n        }\n        let buttonClass = `btn btn-secondary light-button image-editor-tool-button`;\n        const isSelected = tool && tool.name == t.name;\n        if (isSelected) {\n            buttonClass = `btn btn-primary image-editor-tool-button`;\n        }\n        return (\n            <div className=\"form-group\" key={t.name}>\n                <button className={buttonClass} onClick={() => onSelectTool(t)}>\n                    <i className={t.iconClass}></i>\n                </button>\n                {/* capitalize tool name */}\n                <label>\n                    {t.name.charAt(0).toUpperCase() + t.name.slice(1)}\n                </label>\n                {isSelected && t.renderControls(tool!, renderer!)}\n            </div>\n        );\n    }\n\n    function preventDefault(e: CanPreventDefault): boolean {\n        e.preventDefault();\n        return true;\n    }\n\n    return (\n        <>\n            <div className=\"row\">\n                <div className=\"col-12\">\n                    <h1 style={{ fontSize: \"40px\", textAlign: \"left\" }}>\n                        <i\n                            style={{ cursor: \"pointer\" }}\n                            onClick={() => history.push(`/images/${id}`)}\n                            className=\"fas fa-chevron-left\"\n                        ></i>\n                        &nbsp; AI Edit\n                    </h1>\n                </div>\n            </div>\n            <div\n                className=\"row\"\n                style={{ marginTop: \"32px\", paddingBottom: \"120px\" }}\n            >\n                <div className=\"col-lg-3\">\n                    {renderer && (\n                        <>\n                            {tools.map((tool) => renderTool(tool))}\n                            {(canRedo || canUndo) && (\n                                <div className=\"form-group\">\n                                    <div className=\"btn-group\">\n                                        <button\n                                            className=\"btn btn-primary image-popup-button\"\n                                            disabled={!renderer || !canUndo}\n                                            onClick={() =>\n                                                renderer && renderer.undo()\n                                            }\n                                        >\n                                            {/* undo */}\n                                            <i className=\"fas fa-undo\"></i>\n                                        </button>\n                                        <button\n                                            className=\"btn btn-primary image-popup-button\"\n                                            disabled={!renderer || !canRedo}\n                                            onClick={() =>\n                                                renderer && renderer.redo()\n                                            }\n                                        >\n                                            <i className=\"fas fa-redo\"></i>\n                                        </button>\n                                    </div>\n                                </div>\n                            )}\n                        </>\n                    )}\n                </div>\n                <div className=\"col-lg-9\">\n                    <div style={{ verticalAlign: \"middle\" }}>\n                        <div>\n                            <canvas\n                                style={{\n                                    cursor: \"none\",\n                                    touchAction: \"none\",\n                                    userSelect: \"none\",\n                                }}\n                                ref={canvasRef}\n                                className=\"image-editor-canvas\"\n                                onMouseDown={(e) =>\n                                    preventDefault(e) &&\n                                    tool &&\n                                    tool.onMouseDown(e)\n                                }\n                                onMouseMove={(e) =>\n                                    preventDefault(e) &&\n                                    tool &&\n                                    tool.onMouseMove(e)\n                                }\n                                onMouseUp={(e) =>\n                                    preventDefault(e) &&\n                                    tool &&\n                                    tool.onMouseUp(e)\n                                }\n                                onMouseLeave={(e) =>\n                                    preventDefault(e) &&\n                                    tool &&\n                                    tool.onMouseLeave(e)\n                                }\n                                onTouchStart={(e) =>\n                                    preventDefault(e) &&\n                                    tool &&\n                                    tool.onTouchStart(e)\n                                }\n                                onTouchMove={(e) =>\n                                    preventDefault(e) &&\n                                    tool &&\n                                    tool.onTouchMove(e)\n                                }\n                                onTouchEnd={(e) =>\n                                    preventDefault(e) &&\n                                    tool &&\n                                    tool.onTouchEnd(e)\n                                }\n                            ></canvas>\n                            {showSelectionControls && (\n                                <>\n                                    <button\n                                        className=\"btn btn-secondary canvas-select-left\"\n                                        onClick={() => tool!.select(\"left\")}\n                                    >\n                                        <i className=\"fas fa-chevron-left\"></i>\n                                    </button>\n                                    <button\n                                        className=\"btn btn-secondary canvas-select-right\"\n                                        onClick={() => tool!.select(\"right\")}\n                                    >\n                                        <i className=\"fas fa-chevron-right\"></i>\n                                    </button>\n                                </>\n                            )}\n                        </div>\n                    </div>\n                    <div className=\"row\">\n                        <button\n                            className=\"btn btn-primary\"\n                            // center horizontally\n                            style={{\n                                position: \"absolute\",\n                                left: \"50%\",\n                                transform: \"translate(-50%, 0)\",\n                            }}\n                            onClick={() => {\n                                if (renderer) {\n                                    renderer.resetView();\n                                }\n                            }}\n                        >\n                            {/* reset zoom */}\n                            <i className=\"fas fa-search-plus\"></i>&nbsp; Reset\n                            View\n                        </button>\n                        {/* redo */}\n                    </div>\n                    {/* vertically center button within the div */}\n                </div>\n            </div>\n            {busyMessage && (\n                <BusyModal show={true} title=\"Please Wait\">\n                    {busyMessage}\n                </BusyModal>\n            )}\n        </>\n    );\n};\n","import { Cursor, Rect } from \"./models\";\n\nconst maxSnapshots = 10;\n\nexport class Renderer {\n    private undoStack: ImageData[] = [];\n    private redoStack: ImageData[] = [];\n    private currentSnapshot: ImageData | undefined;\n\n    private backgroundLayer: HTMLCanvasElement;\n    private baseImageLayer: HTMLCanvasElement;\n    private editLayer: HTMLCanvasElement;\n    // private overlayLayer: HTMLCanvasElement;\n\n    private selectionOverlay: Rect | undefined;\n    private selectionOverlayPreview: Rect | undefined;\n    private hasSelection: boolean = false;\n    private cursor: Cursor | undefined;\n\n    private zoom: number;\n    private offsetX: number;\n    private offsetY: number;\n    private width = 0;\n    private height = 0;\n\n    private snapshotListener: (() => void) | null = null;\n\n    constructor(private readonly canvas: HTMLCanvasElement) {\n        canvas.width = 512;\n        canvas.height = 512;\n        // invisible canvas elements\n        this.backgroundLayer = document.createElement(\"canvas\");\n        this.backgroundLayer.width = 512;\n        this.backgroundLayer.height = 512;\n        this.baseImageLayer = document.createElement(\"canvas\");\n        this.editLayer = document.createElement(\"canvas\");\n        // this.overlayLayer = document.createElement(\"canvas\");\n\n        this.zoom = 1;\n        this.offsetX = 0;\n        this.offsetY = 0;\n    }\n\n    undo(allowRedo: boolean = true) {\n        if (this.undoStack.length > 0 && this.currentSnapshot) {\n            const imageData = this.undoStack.pop()!;\n            if (allowRedo) {\n                this.redoStack.push(this.currentSnapshot);\n            }\n            this.currentSnapshot = imageData;\n            // set as base image\n            const ctx = this.baseImageLayer.getContext(\"2d\");\n            if (ctx) {\n                ctx.clearRect(\n                    0,\n                    0,\n                    this.baseImageLayer.width,\n                    this.baseImageLayer.height\n                );\n                ctx.putImageData(imageData, 0, 0);\n                this.render();\n            }\n            this.notifySnapshotListener();\n        }\n    }\n\n    redo() {\n        if (this.redoStack.length > 0 && this.currentSnapshot) {\n            this.undoStack.push(this.currentSnapshot);\n            const imageData = this.redoStack.pop()!;\n            this.currentSnapshot = imageData;\n\n            // set as base image\n            const ctx = this.baseImageLayer.getContext(\"2d\");\n            if (ctx) {\n                ctx.putImageData(imageData, 0, 0);\n                this.render();\n            }\n            this.notifySnapshotListener();\n        }\n    }\n\n    clearRedoStack() {\n        this.redoStack = [];\n        this.notifySnapshotListener();\n    }\n\n    canUndo(): boolean {\n        return !this.hasSelection && this.undoStack.length > 0;\n    }\n\n    canRedo(): boolean {\n        return !this.hasSelection && this.redoStack.length > 0;\n    }\n\n    onSnapshot(listener: () => void) {\n        this.snapshotListener = listener;\n    }\n\n    snapshot() {\n        const ctx = this.baseImageLayer.getContext(\"2d\");\n        if (ctx) {\n            const snapshot = ctx.getImageData(\n                0,\n                0,\n                this.baseImageLayer.width,\n                this.baseImageLayer.height\n            );\n            if (this.currentSnapshot) {\n                this.undoStack.push(this.currentSnapshot);\n                this.currentSnapshot = snapshot;\n                if (this.redoStack.length > 0) {\n                    this.redoStack = [];\n                }\n                if (this.undoStack.length > maxSnapshots) {\n                    this.undoStack.shift();\n                }\n            } else {\n                this.currentSnapshot = snapshot;\n            }\n\n            this.notifySnapshotListener();\n        }\n    }\n\n    private notifySnapshotListener() {\n        if (this.snapshotListener) {\n            this.snapshotListener();\n        }\n    }\n\n    render() {\n        const context = this.canvas.getContext(\"2d\");\n        if (context) {\n            context.clearRect(0, 0, this.width, this.height);\n            context.drawImage(this.backgroundLayer, 0, 0);\n            // apply zoom and offset\n            context.setTransform(\n                this.zoom,\n                0,\n                0,\n                this.zoom,\n                this.offsetX * this.zoom,\n                this.offsetY * this.zoom\n            );\n            // context.drawImage(this.backgroundLayer, 0, 0);\n            context.drawImage(this.baseImageLayer, 0, 0);\n            context.drawImage(this.editLayer, 0, 0);\n            // context.drawImage(this.overlayLayer, 0, 0);\n            this.drawOverlay(context, this.width, this.height);\n            context.setTransform(1, 0, 0, 1, 0, 0);\n        }\n    }\n\n    getCanvas(): HTMLCanvasElement {\n        return this.canvas;\n    }\n\n    private initializeBackgroundLayer() {\n        // checkered background\n        // #DEDEDE\n        // #FFFFFF\n        // 10x10 pixel squares\n        const ctx = this.backgroundLayer.getContext(\"2d\");\n        if (ctx) {\n            const pattern = ctx.createPattern(\n                this.createCheckeredPattern(20, 20, \"#808080\", \"#AAAAAA\"),\n                \"repeat\"\n            );\n            if (pattern) {\n                ctx.fillStyle = pattern;\n                ctx.fillRect(\n                    0,\n                    0,\n                    this.backgroundLayer.width,\n                    this.backgroundLayer.height\n                );\n            }\n        }\n    }\n\n    private createCheckeredPattern(\n        width: number,\n        height: number,\n        color1: string,\n        color2: string\n    ): HTMLCanvasElement {\n        const canvas = document.createElement(\"canvas\");\n        canvas.width = width;\n        canvas.height = height;\n        const ctx = canvas.getContext(\"2d\");\n        if (ctx) {\n            ctx.fillStyle = color1;\n            ctx.fillRect(0, 0, width, height);\n            ctx.fillStyle = color2;\n            ctx.fillRect(0, 0, width / 2, height / 2);\n            ctx.fillRect(width / 2, height / 2, width / 2, height / 2);\n        }\n        return canvas;\n    }\n\n    setBaseImage(\n        image: HTMLImageElement | HTMLCanvasElement,\n        updateSelectionOverlay = true\n    ) {\n        const context = this.baseImageLayer.getContext(\"2d\");\n        if (context) {\n            // set size of all layers\n            // TODO: adapt for an always-square canvas\n            this.initializeBackgroundLayer();\n\n            this.baseImageLayer.width = image.width;\n            this.baseImageLayer.height = image.height;\n            this.editLayer.width = image.width;\n            this.editLayer.height = image.height;\n            // set image size\n            this.width = image.width;\n            this.height = image.height;\n            // this.canvas.width = image.width;\n            // this.canvas.height = image.height;\n            context.drawImage(image, 0, 0);\n\n            if (updateSelectionOverlay) {\n                // set 512x512 selection overlay at the center of the image\n                this.setSelectionOverlay({\n                    x: (image.width - 512) / 2,\n                    y: (image.height - 512) / 2,\n                    width: 512,\n                    height: 512,\n                });\n            }\n            this.resetView();\n            // this.render(); // already called by updateZoomAndOffset\n            this.snapshot();\n        }\n    }\n\n    resetView() {\n        // determine zoom based on image difference from canvas size\n        const maxWidth = Math.max(this.width, this.height);\n        const zoom = this.canvas.width / maxWidth;\n\n        let offsetX = 0;\n        let offsetY = 0;\n\n        if (this.width > this.height) {\n            offsetY = (this.width - this.height) / 2;\n        } else if (this.height > this.width) {\n            offsetX = (this.height - this.width) / 2;\n        }\n\n        this.updateZoomAndOffset(zoom, offsetX, offsetY);\n    }\n\n    setEditImage(imageData: ImageData | null) {\n        this.hasSelection = !!imageData;\n        const context = this.editLayer.getContext(\"2d\");\n        if (context && this.selectionOverlay) {\n            context.clearRect(\n                0,\n                0,\n                this.editLayer.width,\n                this.editLayer.height\n            );\n            if (imageData) {\n                context.putImageData(\n                    imageData,\n                    this.selectionOverlay.x,\n                    this.selectionOverlay.y\n                );\n            }\n            // edit image makes the selection rect and preview disappear\n            // so redraw the overlay\n            this.hasSelection = !!imageData;\n            this.render();\n        }\n        this.notifySnapshotListener();\n    }\n\n    private drawOverlay(\n        context: CanvasRenderingContext2D,\n        width: number,\n        height: number\n    ) {\n        const lineWidth = Math.max(this.width / 512, this.height / 512);\n        if (context) {\n            context.strokeStyle = \"white\";\n            context.lineWidth = lineWidth;\n            context.strokeRect(0, 0, width, height);\n\n            if (!this.hasSelection && this.selectionOverlay) {\n                context.strokeStyle = \"white\";\n                context.lineWidth = lineWidth;\n                context.strokeRect(\n                    this.selectionOverlay.x,\n                    this.selectionOverlay.y,\n                    this.selectionOverlay.width,\n                    this.selectionOverlay.height\n                );\n            }\n            if (!this.hasSelection && this.selectionOverlayPreview) {\n                context.strokeStyle = \"cyan\";\n                context.lineWidth = lineWidth;\n                context.strokeRect(\n                    this.selectionOverlayPreview.x,\n                    this.selectionOverlayPreview.y,\n                    this.selectionOverlayPreview.width,\n                    this.selectionOverlayPreview.height\n                );\n            }\n            if (this.cursor) {\n                if (this.cursor.type === \"circle\") {\n                    context.lineWidth = lineWidth;\n                    context.strokeStyle = this.cursor.color;\n                    // context.globalAlpha = 0.5;\n                    context.beginPath();\n                    context.arc(\n                        this.cursor.x,\n                        this.cursor.y,\n                        this.cursor.radius,\n                        0,\n                        2 * Math.PI\n                    );\n                    context.stroke();\n                } else if (this.cursor.type === \"circle-fill\") {\n                    context.fillStyle = this.cursor.color;\n                    context.strokeStyle = this.cursor.color;\n                    // context.lineWidth = lineWidth;\n                    // context.globalAlpha = 0.5;\n                    context.beginPath();\n                    context.arc(\n                        this.cursor.x,\n                        this.cursor.y,\n                        this.cursor.radius,\n                        0,\n                        2 * Math.PI\n                    );\n                    context.stroke();\n                    // set alpha to 0.5 and fill\n                    context.globalAlpha = 0.5;\n                    context.beginPath();\n                    context.arc(\n                        this.cursor.x,\n                        this.cursor.y,\n                        this.cursor.radius,\n                        0,\n                        2 * Math.PI\n                    );\n                    context.fill();\n                    context.globalAlpha = 1;\n                } else if (this.cursor.type == \"crosshairs\") {\n                    // draw crosshairs based on cursor radius\n                    context.strokeStyle = this.cursor.color;\n                    context.lineWidth = lineWidth;\n                    context.beginPath();\n                    context.moveTo(\n                        this.cursor.x - this.cursor.radius,\n                        this.cursor.y\n                    );\n                    context.lineTo(\n                        this.cursor.x + this.cursor.radius,\n                        this.cursor.y\n                    );\n                    context.moveTo(\n                        this.cursor.x,\n                        this.cursor.y - this.cursor.radius\n                    );\n                    context.lineTo(\n                        this.cursor.x,\n                        this.cursor.y + this.cursor.radius\n                    );\n                    context.stroke();\n                } else if (this.cursor.type === \"colorpicker\") {\n                    // TODO: add croshairs\n                    context.lineWidth = this.cursor.radius * 0.75;\n                    context.strokeStyle = this.cursor.color;\n                    // context.globalAlpha = 0.5;\n                    context.beginPath();\n                    context.arc(\n                        this.cursor.x,\n                        this.cursor.y,\n                        this.cursor.radius,\n                        0,\n                        2 * Math.PI\n                    );\n                    context.stroke();\n\n                    // draw crosshairs (black)\n                    context.lineWidth = lineWidth;\n                    context.strokeStyle = \"black\";\n                    context.beginPath();\n                    context.moveTo(\n                        this.cursor.x - this.cursor.radius,\n                        this.cursor.y\n                    );\n                    context.lineTo(\n                        this.cursor.x + this.cursor.radius,\n                        this.cursor.y\n                    );\n                    context.moveTo(\n                        this.cursor.x,\n                        this.cursor.y - this.cursor.radius\n                    );\n                    context.lineTo(\n                        this.cursor.x,\n                        this.cursor.y + this.cursor.radius\n                    );\n                    context.stroke();\n                }\n            }\n        }\n    }\n\n    setSelectionOverlay(selectionOverlay: Rect | undefined) {\n        this.selectionOverlay = selectionOverlay;\n        this.render();\n    }\n\n    setSelectionOverlayPreview(selectionOverlayPreview: Rect | undefined) {\n        this.selectionOverlayPreview = selectionOverlayPreview;\n        this.render();\n    }\n\n    setCursor(cursor: Cursor | undefined) {\n        this.cursor = cursor;\n        this.render();\n    }\n\n    getSelectionOverlay(): Rect | undefined {\n        return this.selectionOverlay;\n    }\n\n    getZoom(): number {\n        return this.zoom;\n    }\n\n    getOffsetX(): number {\n        return this.offsetX;\n    }\n\n    getOffsetY(): number {\n        return this.offsetY;\n    }\n\n    updateZoomAndOffset(zoom: number, offsetX: number, offsetY: number) {\n        // console.log(`zoom: ${zoom}, offset: ${offsetX}, ${offsetY}`)\n        this.zoom = zoom;\n        this.offsetX = offsetX;\n        this.offsetY = offsetY;\n        this.render();\n    }\n\n    getWidth(): number {\n        return this.width;\n    }\n\n    getHeight(): number {\n        return this.height;\n    }\n\n    private imageDataToEncodedImage(imageData: ImageData): string | undefined {\n        // create a canvas and draw the image data on it\n        const canvas = document.createElement(\"canvas\");\n        canvas.width = imageData.width;\n        canvas.height = imageData.height;\n        const context = canvas.getContext(\"2d\");\n        if (context) {\n            context.putImageData(imageData, 0, 0);\n            // return the data url of the canvas\n            const result = canvas.toDataURL(\"image/png\");\n            // cleanup the canvas\n            canvas.remove();\n            // extract base64 data from data url\n            return result.split(\",\")[1];\n        }\n    }\n\n    getEncodedImage(selection: Rect | null): string | undefined {\n        const imageData = this.getImageData(selection);\n        if (imageData) {\n            return this.imageDataToEncodedImage(imageData);\n        }\n    }\n\n    private convertErasureToMask(erasure: ImageData): ImageData {\n        // for each pixel, if alpha < 255, set to white, otherwise set to black\n        const mask = erasure;\n        for (let i = 0; i < erasure.data.length; i += 4) {\n            if (erasure.data[i + 3] < 255) {\n                mask.data[i] = 255;\n                mask.data[i + 1] = 255;\n                mask.data[i + 2] = 255;\n                mask.data[i + 3] = 255;\n            } else {\n                mask.data[i] = 0;\n                mask.data[i + 1] = 0;\n                mask.data[i + 2] = 0;\n                mask.data[i + 3] = 255;\n            }\n        }\n        return mask;\n    }\n\n    getEncodedMask(selection: Rect | null): string | undefined {\n        const imageData = this.getImageData(selection)!;\n        const mask = this.convertErasureToMask(imageData);\n        return this.imageDataToEncodedImage(mask);\n    }\n\n    getImageData(selection: Rect | null): ImageData | undefined {\n        if (!selection) {\n            selection = {\n                x: 0,\n                y: 0,\n                width: this.width,\n                height: this.height,\n            };\n        }\n        // get image data of the selection\n        let context = this.baseImageLayer.getContext(\"2d\");\n        if (context) {\n            const imageData = context.getImageData(\n                selection.x,\n                selection.y,\n                selection.width,\n                selection.height\n            );\n            return imageData;\n        }\n    }\n\n    commitSelection() {\n        // draw the selection overlay on the base image layer\n        const context = this.baseImageLayer.getContext(\"2d\");\n        if (context) {\n            context.drawImage(this.editLayer, 0, 0);\n            this.setEditImage(null);\n            this.snapshot();\n        }\n    }\n\n    drawPoint(x: number, y: number, brushSize: number, color: string): void {\n        // draw on selection layer\n        const context = this.editLayer.getContext(\"2d\");\n        if (context) {\n            context.fillStyle = color;\n            context.beginPath();\n            context.arc(x, y, brushSize / 2, 0, 2 * Math.PI);\n            context.fill();\n        }\n        this.render();\n    }\n\n    erasePoint(brushx: number, brushy: number, brushSize: number): void {\n        if (!this.selectionOverlay) {\n            throw new Error(\"No selection overlay\");\n        }\n        // get image data centered on x, y with brushSize width and height\n        const context = this.baseImageLayer.getContext(\"2d\");\n        if (context) {\n            const imageData = context.getImageData(\n                brushx - brushSize / 2,\n                brushy - brushSize / 2,\n                brushSize,\n                brushSize\n            );\n            // set alpha to 0 in a circle centered on x, y with radius brushSize / 2\n            for (let i = 0; i < imageData.data.length; i += 4) {\n                const x = (i / 4) % brushSize;\n                const y = Math.floor(i / 4 / brushSize);\n\n                const absx = x - brushSize / 2 + brushx;\n                // three pixel barrier on each edge UNLESS the selection overlay borders that edge\n                let leftEdge = this.selectionOverlay.x;\n                if (leftEdge > 0) {\n                    leftEdge += 10;\n                }\n                let rightEdge =\n                    this.selectionOverlay.x + this.selectionOverlay.width;\n                if (rightEdge < this.width) {\n                    rightEdge -= 10;\n                }\n                let topEdge = this.selectionOverlay.y;\n                if (topEdge > 0) {\n                    topEdge += 10;\n                }\n                let bottomEdge =\n                    this.selectionOverlay.y + this.selectionOverlay.height;\n                if (bottomEdge < this.canvas.height) {\n                    bottomEdge -= 10;\n                }\n\n                const containsx = absx > leftEdge && absx < rightEdge;\n                const absy = y - brushSize / 2 + brushy;\n                const containsy = absy > topEdge && absy < bottomEdge;\n                const contains = containsx && containsy;\n\n                // check if x, y is within the selection overlay\n                if (this.selectionOverlay && !contains) {\n                    continue;\n                }\n\n                const distance = Math.sqrt(\n                    Math.pow(x - brushSize / 2, 2) +\n                        Math.pow(y - brushSize / 2, 2)\n                );\n                if (distance < brushSize / 2) {\n                    imageData.data[i + 3] = 0;\n                }\n            }\n            // draw the image data on the selection layer\n            context.putImageData(\n                imageData,\n                brushx - brushSize / 2,\n                brushy - brushSize / 2\n            );\n        }\n    }\n\n    drawLine(\n        x1: number,\n        y1: number,\n        x2: number,\n        y2: number,\n        brushSize: number,\n        color: string\n    ): void {\n        // draw on selection layer\n        const context = this.editLayer.getContext(\"2d\");\n        if (context) {\n            context.strokeStyle = color;\n            context.lineWidth = brushSize;\n            context.lineCap = \"round\";\n            context.beginPath();\n            context.moveTo(x1, y1);\n            context.lineTo(x2, y2);\n            context.stroke();\n        }\n        this.render();\n    }\n\n    smudgeLine(\n        x1: number,\n        y1: number,\n        x2: number,\n        y2: number,\n        brushSize: number,\n        brushOpacity: number\n    ): void {\n        const unitVector = {\n            x: x2 - x1,\n            y: y2 - y1,\n        };\n        const length = Math.sqrt(\n            unitVector.x * unitVector.x + unitVector.y * unitVector.y\n        );\n        unitVector.x /= length;\n        unitVector.y /= length;\n\n        // for each point on the line, get image data (brushSize x brushSize) from edit layer\n        // average pixel values that are within the brush circle.\n        // update the image data with the averaged pixel values in the\n        // brush circle, then put the image data back on the edit layer\n        // at the point on the line\n\n        const context = this.editLayer.getContext(\"2d\");\n        if (context) {\n            for (let i = 0; i < length; i++) {\n                const x = x1 + i * unitVector.x;\n                const y = y1 + i * unitVector.y;\n\n                const imageData = context.getImageData(\n                    x - brushSize / 2,\n                    y - brushSize / 2,\n                    brushSize,\n                    brushSize\n                );\n\n                let totalRed = 0;\n                let totalGreen = 0;\n                let totalBlue = 0;\n                let count = 0.0;\n\n                // average pixel values\n                for (let y = 0; y < imageData.height; y++) {\n                    for (let x = 0; x < imageData.width; x++) {\n                        const index = (y * imageData.width + x) * 4;\n                        const distance = Math.sqrt(\n                            (x - brushSize / 2) * (x - brushSize / 2) +\n                                (y - brushSize / 2) * (y - brushSize / 2)\n                        );\n                        if (distance <= brushSize / 2) {\n                            // get the pixel value from the image data\n                            const r = imageData.data[index];\n                            const g = imageData.data[index + 1];\n                            const b = imageData.data[index + 2];\n\n                            totalRed += r;\n                            totalGreen += g;\n                            totalBlue += b;\n                            count++;\n                        }\n                    }\n                }\n\n                // update the image data with the averaged pixel values\n                // these need to be weighted by the brush opacity\n                const averageRed = totalRed / count;\n                const averageGreen = totalGreen / count;\n                const averageBlue = totalBlue / count;\n                for (let y = 0; y < imageData.height; y++) {\n                    for (let x = 0; x < imageData.width; x++) {\n                        const index = (y * imageData.width + x) * 4;\n                        const distance = Math.sqrt(\n                            (x - brushSize / 2) * (x - brushSize / 2) +\n                                (y - brushSize / 2) * (y - brushSize / 2)\n                        );\n                        if (distance <= brushSize / 2) {\n                            imageData.data[index] =\n                                averageRed * brushOpacity +\n                                imageData.data[index] * (1 - brushOpacity);\n                            imageData.data[index + 1] =\n                                averageGreen * brushOpacity +\n                                imageData.data[index + 1] * (1 - brushOpacity);\n                            imageData.data[index + 2] =\n                                averageBlue * brushOpacity +\n                                imageData.data[index + 2] * (1 - brushOpacity);\n                        }\n                    }\n                }\n\n                // put the image data back on the edit layer\n                context.putImageData(\n                    imageData,\n                    x - brushSize / 2,\n                    y - brushSize / 2\n                );\n            }\n        }\n        this.render();\n    }\n\n    getPixel(x: number, y: number): string {\n        const context = this.baseImageLayer.getContext(\"2d\");\n        // get pixel as hex string\n        if (context) {\n            const pixel = context.getImageData(x, y, 1, 1).data;\n            return (\n                \"#\" +\n                (\"000000\" + rgbToHex(pixel[0], pixel[1], pixel[2])).slice(-6)\n            );\n        }\n        return \"#000000\";\n    }\n\n    copyEditImageFromBaseImage(): void {\n        // copy the base image to the edit layer\n        const context = this.editLayer.getContext(\"2d\");\n        if (context) {\n            context.drawImage(this.baseImageLayer, 0, 0);\n        }\n        this.render();\n        this.hasSelection = true;\n        this.notifySnapshotListener();\n    }\n\n    expandToOverlay() {\n        if (!this.selectionOverlay) {\n            throw new Error(\"No selection overlay\");\n        }\n        const minX = Math.min(0, this.selectionOverlay.x);\n        const minY = Math.min(0, this.selectionOverlay.y);\n        const maxX = Math.max(\n            this.selectionOverlay.x + this.selectionOverlay.width,\n            this.baseImageLayer.width\n        );\n        const maxY = Math.max(\n            this.selectionOverlay.y + this.selectionOverlay.height,\n            this.baseImageLayer.height\n        );\n        const width = maxX - minX;\n        const height = maxY - minY;\n\n        // create a new canvas with the expanded size\n        const newCanvas = document.createElement(\"canvas\");\n        newCanvas.width = width;\n        newCanvas.height = height;\n        // draw the base image on the new canvas.\n        // if overlay.x is negative, image.x is overlay.x * -1\n        // if overlay.x is 0 or positive, image.x is 0\n        // if overlay.y is negative, image.y is overlay.y * -1\n        // if overlay.y is 0 or positive, image.y is 0\n        const context = newCanvas.getContext(\"2d\");\n        if (context) {\n            context.drawImage(\n                this.baseImageLayer,\n                Math.max(0, this.selectionOverlay.x * -1),\n                Math.max(0, this.selectionOverlay.y * -1)\n            );\n        }\n        if (this.selectionOverlay.x < 0) {\n            this.selectionOverlay.x = 0;\n        }\n        if (this.selectionOverlay.y < 0) {\n            this.selectionOverlay.y = 0;\n        }\n        console.log(`new Canvas size: ${width} x ${height}`);\n        this.setBaseImage(newCanvas, false);\n    }\n}\n\nfunction rgbToHex(r: number, g: number, b: number) {\n    if (r > 255 || g > 255 || b > 255) throw \"Invalid color component\";\n    return ((r << 16) | (g << 8) | b).toString(16);\n}\n\nexport function createRenderer(canvas: HTMLCanvasElement): Renderer {\n    return new Renderer(canvas);\n}\n","import React, { FC, useState, useEffect } from \"react\";\nimport loadImage from \"blueimp-load-image\";\nimport saveAs from \"file-saver\";\n\nimport { AIBrushApi } from \"../../client\";\nimport { Renderer } from \"./renderer\";\nimport { BaseTool, Tool } from \"./tool\";\n\ninterface Props {\n    renderer: Renderer;\n    tool: BaseTool;\n    api: AIBrushApi;\n}\n\nexport const ImportExportControls: FC<Props> = ({ renderer, tool }) => {\n\n    const [backupImage, setBackupImage] = useState<string | undefined>();\n\n    const onImageSelected = (event: React.ChangeEvent<HTMLInputElement>) => {\n        const files = event.target.files;\n        if (files && files.length > 0) {\n            loadImage(\n                files[0],\n                (img) => {\n                    const backupImage = renderer.getEncodedImage(null);\n                    setBackupImage(backupImage);\n                    renderer.setBaseImage(img as HTMLImageElement);\n                },\n                { canvas: false }\n            );\n        }\n    };\n\n    const onExport = () => {\n        const encodedImage = renderer.getEncodedImage(null);\n        if (encodedImage) {\n            // base64 decode\n            const byteString = atob(encodedImage);\n            // save as file\n            const buffer = new ArrayBuffer(byteString.length);\n            const intArray = new Uint8Array(buffer);\n            for (let i = 0; i < byteString.length; i++) {\n                intArray[i] = byteString.charCodeAt(i);\n            }\n            const blob = new Blob([intArray], { type: \"image/png\" });\n            saveAs(blob, \"image.png\");\n        }\n    };\n\n    if (backupImage) {\n        return (\n            <div className=\"form-group\" style={{marginTop: \"16px\"}}>\n                <button\n                    className=\"btn btn-primary\"\n                    onClick={() => {\n                        setBackupImage(undefined);\n                        const img = new Image();\n                        // set src as data uri\n                        const src = \"data:image/png;base64,\" + backupImage;\n                        img.src = src;\n                        img.onload = () => {\n                            renderer.setBaseImage(img);\n                        };\n                    }}\n                >\n                    {/* cancel icon */}\n                    <i className=\"fas fa-times\"></i>&nbsp;\n                    Revert\n                </button>\n                <button\n                    className=\"btn btn-primary\"\n                    onClick={() => {\n                        setBackupImage(undefined);\n                        if (tool.saveListener) {\n                            const encodedImage = renderer.getEncodedImage(null);\n                            if (encodedImage) {\n                                tool.saveListener(encodedImage);\n                            }\n                        }\n                    }}\n                    style={{marginLeft: \"8px\"}}\n                >\n                    {/* save icon */}\n                    <i className=\"fas fa-save\"></i>&nbsp;\n                    Save\n                </button>\n            </div>\n        );\n    }\n\n    // Show buttons for import and export and \"save a copy\"\n    return (\n        <>\n            <div className=\"form-group\" style={{marginTop: \"16px\"}}>\n                <label\n                    id=\"loadimage-wrapper\"\n                    className={`btn btn-primary `}\n                    style={{ display: \"inline\" }}\n                >\n                    {/* upload image */}\n                    <i className=\"fas fa-upload\"></i>&nbsp; Import Image\n                    <input\n                        id=\"loadimage\"\n                        type=\"file\"\n                        style={{ display: \"none\" }}\n                        onChange={onImageSelected}\n                    />\n                </label>\n            </div>\n            <div className=\"form-group\">\n                <button\n                    className=\"btn btn-primary\"\n                    onClick={() => {\n                        onExport();\n                    }}\n                    style={{ marginLeft: \"8px\"}}\n                >\n                    <i className=\"fas fa-download\"></i>&nbsp; Export Image\n                </button>\n            </div>\n        </>\n    );\n};\n","import React, { FC, useState, useEffect } from \"react\";\nimport loadImage from \"blueimp-load-image\";\nimport saveAs from \"file-saver\";\nimport axios from \"axios\";\nimport * as uuid from \"uuid\";\n\nimport { sleep } from \"../../lib/sleep\";\n\nimport {\n    AIBrushApi,\n    CreateImageInput,\n    ImageParamsAugmentationEnum,\n    Image as APIImage,\n    StatusEnum,\n} from \"../../client\";\nimport { Renderer } from \"./renderer\";\nimport { BaseTool, Tool } from \"./tool\";\nimport {\n    splitImage,\n    mergeTiles,\n    ImageUtilWorker,\n    imageDataToCanvas,\n    fixImageSize,\n    decodeImage,\n    binaryImageToDataBase64,\n    SplitResult,\n} from \"../../lib/imageutil\";\nimport { defaultArgs } from \"../../components/ImagePrompt\";\nimport { ErrorNotification } from \"../../components/Alerts\";\nimport moment from \"moment\";\n\nexport const anonymousClient = axios.create();\ndelete anonymousClient.defaults.headers.common[\"Authorization\"];\n\ninterface Props {\n    renderer: Renderer;\n    tool: BaseTool;\n    api: AIBrushApi;\n    image: APIImage;\n}\n\nexport const AugmentControls: FC<Props> = ({ renderer, tool, api, image }) => {\n    const [backupImage, setBackupImage] = useState<string | undefined>();\n    const [activeAugmentation, setActiveAugmentation] = useState<\n        \"upscale\" | \"face_restore\" | null\n    >(null);\n    const [imageWorker, setImageWorker] = useState<\n        ImageUtilWorker | undefined\n    >();\n    const [error, setError] = useState<string | null>(null);\n    const [lastError, setLastError] = useState<number>(0);\n\n    useEffect(() => {\n        const imageWorker = new ImageUtilWorker();\n        setImageWorker(imageWorker);\n        return () => {\n            imageWorker.destroy();\n        };\n    }, []);\n\n    const augmentImageData = async (\n        imageData: ImageData,\n        augmentation: \"upscale\" | \"face_restore\"\n    ): Promise<ImageData> => {\n        if (!imageWorker) {\n            throw new Error(\"Image worker not initialized\");\n        }\n        let c = imageDataToCanvas(imageData);\n        let encodedImage = c.toDataURL(\"image/png\").split(\",\")[1];\n        c.remove();\n        const input: CreateImageInput = defaultArgs();\n        input.label = \"\";\n        input.encoded_image = encodedImage;\n        input.params.prompt = image.params.prompt;\n        input.params.negative_prompt = image.params.negative_prompt;\n        input.params.denoising_strength = 0.05;\n        input.count = 1;\n        input.model = \"stable_diffusion\";\n        input.nsfw = true;\n        input.temporary = true;\n        input.params.width = imageData.width;\n        input.params.height = imageData.height;\n        input.params.augmentation =\n            augmentation === \"upscale\"\n                ? ImageParamsAugmentationEnum.Upscale\n                : ImageParamsAugmentationEnum.FaceRestore;\n\n        const createResp = await api.createImage(input);\n        let processingImage = createResp.data.images![0];\n        while (processingImage.status !== StatusEnum.Completed) {\n            await sleep(2000);\n            const checkResp = await api.getImage(processingImage.id);\n            processingImage = checkResp.data;\n            if (processingImage.status === StatusEnum.Error) {\n                throw new Error(\"Augmentation failed\");\n            }\n        }\n        const downloadUrls = await api.getImageDownloadUrls(processingImage.id);\n\n        // download image data, convert to canvas and resize to 2x original,\n        // convert back to image data and return.\n        const imageDataResp = await anonymousClient.get(\n            downloadUrls.data.image_url!,\n            {\n                responseType: \"arraybuffer\",\n            }\n        );\n        encodedImage = binaryImageToDataBase64(imageDataResp.data);\n        const img = await decodeImage(encodedImage);\n        c = document.createElement(\"canvas\");\n        const upscaleFactor = augmentation === \"upscale\" ? 2 : 1;\n        c.width = imageData.width * upscaleFactor;\n        c.height = imageData.height * upscaleFactor;\n        const ctx = c.getContext(\"2d\")!;\n        ctx.drawImage(img, 0, 0, c.width, c.height);\n        const newImageData = ctx.getImageData(0, 0, c.width, c.height);\n        c.remove();\n        return newImageData;\n    };\n\n    const onAugment = async (augmentation: \"upscale\" | \"face_restore\") => {\n        setActiveAugmentation(augmentation);\n        setError(null);\n        try {\n            const backupImage = renderer.getEncodedImage(null);\n            setBackupImage(backupImage);\n            let imageData = renderer.getImageData(null);\n            if (!imageData) {\n                return;\n            }\n            // ensure width and height are multiples of 64\n            if ((imageData.width % 64) + (imageData.height % 64) !== 0) {\n                const c = fixImageSize(imageDataToCanvas(imageData));\n                imageData = c\n                    .getContext(\"2d\")!\n                    .getImageData(0, 0, c.width, c.height);\n            }\n\n            const newImageData = await augmentImageData(\n                imageData,\n                augmentation\n            );\n            const newCanvas = imageDataToCanvas(newImageData);\n            renderer.setBaseImage(newCanvas);\n            newCanvas.remove();\n        } catch (err: any) {\n            setError(err.message || \"Upscaling failed\");\n            setLastError(moment().valueOf());\n        } finally {\n            setActiveAugmentation(null);\n        }\n    };\n\n    if (activeAugmentation) {\n        return (\n            <div className=\"form-group\" style={{ marginTop: \"16px\" }}>\n                <i className=\"fas fa-spinner fa-spin\"></i>&nbsp;{\" \"}\n                {activeAugmentation === \"upscale\"\n                    ? \"Upscaling...\"\n                    : \"Restoring faces...\"}\n            </div>\n        );\n    }\n\n    if (backupImage) {\n        return (\n            <div className=\"form-group\" style={{ marginTop: \"16px\" }}>\n                <ErrorNotification message={error} timestamp={lastError} />\n                <button\n                    className=\"btn btn-primary\"\n                    onClick={() => {\n                        setBackupImage(undefined);\n                        const img = new Image();\n                        // set src as data uri\n                        const src = \"data:image/png;base64,\" + backupImage;\n                        img.src = src;\n                        img.onload = () => {\n                            renderer.setBaseImage(img);\n                        };\n                    }}\n                >\n                    {/* cancel icon */}\n                    <i className=\"fas fa-times\"></i>&nbsp; Revert\n                </button>\n                <button\n                    className=\"btn btn-primary\"\n                    onClick={() => {\n                        setBackupImage(undefined);\n                        if (tool.saveListener) {\n                            const encodedImage = renderer.getEncodedImage(null);\n                            if (encodedImage) {\n                                tool.saveListener(encodedImage);\n                            }\n                        }\n                    }}\n                    style={{ marginLeft: \"8px\" }}\n                >\n                    {/* save icon */}\n                    <i className=\"fas fa-save\"></i>&nbsp; Save\n                </button>\n            </div>\n        );\n    }\n\n    const maxSize = 2048 * 2048;\n    if (renderer.getWidth() * renderer.getHeight() > maxSize) {\n        return (\n            <div style={{ marginTop: \"16px\" }}>\n                This image is too large to augment.\n            </div>\n        );\n    }\n\n    // Show buttons for import and export and \"save a copy\"\n    return (\n        <>\n            <ErrorNotification message={error} timestamp={lastError} />\n            <div className=\"form-group\" style={{ marginTop: \"16px\" }}>\n                <button\n                    className=\"btn btn-primary\"\n                    onClick={() => {\n                        onAugment(\"upscale\");\n                    }}\n                    style={{ marginLeft: \"8px\" }}\n                >\n                    {/* upscale icon */}\n                    <i className=\"fas fa-arrows-alt\"></i>&nbsp; Upscale Image 2x\n                </button>\n            </div>\n            <div className=\"form-group\" style={{ marginTop: \"16px\" }}>\n                <button\n                    className=\"btn btn-primary\"\n                    onClick={() => {\n                        onAugment(\"face_restore\");\n                    }}\n                    style={{ marginLeft: \"8px\" }}\n                >\n                    {/* face restore icon */}\n                    <i className=\"fas fa-smile\"></i>&nbsp; Restore Faces\n                </button>\n            </div>\n        </>\n    );\n};\n","export interface BoostLevel {\n    level: number\n    name: string\n    description: string\n}\n\nexport const BOOST_LEVELS: BoostLevel[] = [\n    {\n        level: 1,\n        name: \"Quick\",\n        description: \"This boost is a great deal for anyone who needs dedicated gpu power on a budget. Estimated peak output: 350 images per hour\"\n    },\n    {\n        level: 2,\n        name: \"Fast\",\n        description: \"With twice the gpu power of the Quick boost, the Fast boost is ideal for the impatient hobbyist. Estimated peak output: 700 images per hour\"\n    },\n    {\n        level: 4,\n        name: \"Pro\",\n        description: \"Is Fast not enough for you? Prepare to break the sound barrier and double your gpu power with the Pro boost. Estimated peak output: 1400 images per hour\"\n    },\n    {\n        level: 8,\n        name: \"Super\",\n        description: \"Upgrade to the Pro boost to achieve unparalleled speed. This boost is for people who want to make images as fast as possible. Estimated peak output: 2800 images per hour\"\n    }\n]","import React, { FC, useState, useEffect, CSSProperties } from \"react\";\nimport { Modal } from \"react-bootstrap\";\nimport { BOOST_LEVELS } from \"../lib/boost\";\n\nimport \"./BoostLevelPopup.css\";\n\ninterface Props {\n    selectedBoostLevel: number;\n    onUpdateBoostLevel: (level: number) => void;\n    onCancel: () => void;\n}\n\nexport const BoostLevelPopup: FC<Props> = ({\n    selectedBoostLevel,\n    onUpdateBoostLevel,\n    onCancel,\n}) => {\n\n    const [updatedBoostLevel, setUpdatedBoostLevel] = useState<number>(selectedBoostLevel);\n\n    useEffect(() => {\n        setUpdatedBoostLevel(selectedBoostLevel);\n    }, [selectedBoostLevel])\n\n    return (<Modal\n        onHide={() => onCancel()}\n        centered\n        show={true}\n    >\n        <Modal.Header closeButton>\n            <Modal.Title>Boost Level</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n            {/* Select from the list: Quick (1), Fast (2), Pro (4) and Super (8)\n            <div className=\"form-group\">\n                <label htmlFor=\"boost-level\">Boost Level</label>\n                <select\n                    className=\"form-control\"\n                    id=\"boost-level\"\n                    value={selectedBoostLevel}\n                    onChange={(e) =>\n                        setUpdatedBoostLevel(parseInt(e.target.value))\n                    }\n                >\n                    <option value={1}>Quick</option>\n                    <option value={2}>Fast</option>\n                    <option value={4}>Pro</option>\n                    <option value={8}>Super</option>\n                </select>\n            </div> */}\n            {BOOST_LEVELS.map(boostLevel => (\n                <div\n                    className={\"boost-item\" + (updatedBoostLevel === boostLevel.level ? \" selected\" : \"\")}\n                    key={boostLevel.level}\n                    onClick={() => setUpdatedBoostLevel(boostLevel.level)}\n                >\n                    <div className=\"boost-item-label\">\n                        {boostLevel.name}\n                    </div>\n                    <div className=\"boost-item-description\">\n                        {boostLevel.description}\n                    </div>\n                </div>\n            ))}\n        </Modal.Body>\n        <Modal.Footer>\n            <button\n                type=\"button\"\n                className=\"btn btn-secondary\"\n                onClick={() => onCancel()}\n            >\n                Close\n            </button>\n            &nbsp;\n            <button\n                type=\"button\"\n                className=\"btn btn-primary\"\n                onClick={() => onUpdateBoostLevel(updatedBoostLevel)}\n            >\n                Update\n            </button>\n        </Modal.Footer>\n    </Modal>)\n}","import React, { FC, useState, useEffect, CSSProperties } from \"react\";\nimport { Modal } from \"react-bootstrap\";\nimport moment from \"moment\";\nimport { Boost } from \"../client\";\nimport { relative } from \"path\";\nimport { BoostLevelPopup } from \"./BoostLevelPopup\";\n\ninterface Props {\n    boost: Boost;\n    onUpdateActive: (active: boolean) => void;\n    onUpdateBoostLevel: (level: number) => void;\n}\n\nconst COOLDOWN_MILLISECONDS = 1000 * 60 * 10; // 10 minutes\nconst boostLevelToLabel: { [key: number]: string } = {\n    1: \"QUICK\",\n    2: \"FAST\",\n    4: \"PRO\",\n    8: \"SUPER\",\n};\n\nexport const BoostWidget: FC<Props> = ({\n    boost,\n    onUpdateActive,\n    onUpdateBoostLevel,\n}) => {\n    const [remainingTime, setRemainingTime] = useState<string>(\"00:00:00\");\n    const [hidden, setHidden] = useState<boolean>(false);\n    const [cooldown, setCooldown] = useState(false);\n    const [updatingBoostLevel, setUpdatingBoostLevel] = useState(false);\n\n    const style: CSSProperties = {\n        // width: \"100%\",\n        height: \"50px\",\n        // background:\n        //     \"linear-gradient(-45deg, #3D3BB5, #8B41D6, #26D6E1)\",\n        backgroundColor: \"#3D3BB5\",\n        backgroundSize: \"400% 400%\",\n        borderRadius: \"8px\",\n        textAlign: \"left\",\n        paddingTop: \"8px\",\n        paddingLeft: \"16px\",\n        paddingRight: \"16px\",\n        fontSize: \"24px\",\n        fontWeight: \"bolder\",\n        // italic\n        // fontStyle: \"italic\",\n        // animationName: \"boost\",\n        // animationDuration: \"5s\",\n        // animationIterationCount: \"infinite\",\n    };\n    if (boost.is_active) {\n        style.backgroundColor = undefined;\n        style.backgroundImage =\n            \"linear-gradient(-45deg, #3D3BB5, #8B41D6, #26D6E1)\";\n        style.animationName = \"boost\";\n        style.animationDuration = \"5s\";\n        style.animationIterationCount = \"infinite\";\n    }\n\n    useEffect(() => {\n        const updateRemainingTime = () => {\n            // boost.balance is specified in milliseconds\n            // use the moment library to show remaining time in the form of\n            // \"HH:MM:SS\"\n            let remainingMilliseconds = boost.balance / boost.level;\n\n            if (boost.is_active) {\n                remainingMilliseconds -= moment()\n                    .diff(moment(boost.activated_at))\n                    .valueOf();\n                if (remainingMilliseconds <= 0) {\n                    remainingMilliseconds = 0;\n                }\n                setHidden(remainingMilliseconds === 0);\n                setCooldown(false);\n            } else {\n                const millisecondsSinceLastActivated =\n                    moment().valueOf() - boost.activated_at;\n                if (millisecondsSinceLastActivated < COOLDOWN_MILLISECONDS) {\n                    setCooldown(true);\n                    remainingMilliseconds =\n                        COOLDOWN_MILLISECONDS - millisecondsSinceLastActivated;\n                } else {\n                    setCooldown(false);\n                }\n                setHidden(boost.balance === 0);\n            }\n\n            let remainingTime = moment\n                .utc(remainingMilliseconds)\n                .format(\"HH:mm:ss\");\n            setRemainingTime(remainingTime);\n        };\n        updateRemainingTime();\n        const interval = setInterval(updateRemainingTime, 1000);\n        return () => clearInterval(interval);\n    }, [boost]);\n\n    if (hidden) {\n        return <div></div>;\n    }\n\n    return (\n        <div className=\"boost-widget\" style={style}>\n            <span\n                style={{\n                    cursor: \"pointer\",\n                    fontStyle: boost.is_active ? \"italic\" : \"normal\",\n                }}\n                onClick={() => setUpdatingBoostLevel(true)}\n            >\n                {boostLevelToLabel[boost.level]}\n            </span>\n\n            <div\n                style={{\n                    float: \"right\",\n                }}\n            >\n                {!boost.is_active && (\n                    <i\n                        className=\"fas fa-play\"\n                        onClick={() => onUpdateActive(true)}\n                        style={{ cursor: \"pointer\" }}\n                    />\n                )}\n                {boost.is_active && (\n                    <i\n                        className=\"fas fa-pause\"\n                        onClick={() => onUpdateActive(false)}\n                        style={{ cursor: \"pointer\" }}\n                    />\n                )}\n            </div>\n            <span\n                style={{\n                    fontStyle: \"normal\",\n                    fontSize: \"16px\",\n                    float: \"right\",\n                    paddingTop: \"6px\",\n                    marginRight: \"8px\",\n                }}\n            >\n                {remainingTime}&nbsp;\n            </span>\n            {cooldown && (\n                <span\n                    style={{\n                        fontStyle: \"normal\",\n                        fontSize: \"12px\",\n                        float: \"right\",\n                        paddingTop: \"8px\",\n                        marginRight: \"8px\",\n                        color: \"#26D6E1\",\n                        animation: \"cooldown 5s ease infinite\",\n                    }}\n                >\n                    COOLDOWN&nbsp;\n                </span>\n            )}\n            {updatingBoostLevel && (\n                <BoostLevelPopup\n                    onCancel={() => setUpdatingBoostLevel(false)}\n                    onUpdateBoostLevel={(level: number) => {\n                        setUpdatingBoostLevel(false);\n                        onUpdateBoostLevel(level);\n                    }}\n                    selectedBoostLevel={boost.level}\n                />\n            )}\n        </div>\n    );\n};\n","import { Rect } from \"../pages/image-editor/models\";\n\nexport interface SplitResult {\n    numTilesX: number;\n    numTilesY: number;\n    tileSize: number;\n    imageWidth: number;\n    imageHeight: number;\n    tiles: ImageData[][]; // [x][y]\n}\n\n// split image for individual upscales\nexport function splitImage(initImage: ImageData) {\n    // Check if the image area is larger than 512x512\n    if (initImage.width * initImage.height > 512 * 512) {\n        // use a temporary canvas to split the image\n        const canvas = document.createElement(\"canvas\");\n        try {\n            canvas.width = initImage.width;\n            canvas.height = initImage.height;\n            const ctx = canvas.getContext(\"2d\");\n            if (!ctx) {\n                throw new Error(\"Could not get canvas context\");\n            }\n            ctx.putImageData(initImage, 0, 0);\n            const tile_size = Math.min(initImage.width, initImage.height, 512);\n            // split the image into 512x512 tiles\n            // they need to overlap by at least 32 pixels\n            // so that the edges can be merged\n\n            // calculate the number of tiles in each dimension\n            const num_tiles_x = Math.ceil(initImage.width / (tile_size - 32));\n            const num_tiles_y = Math.ceil(initImage.height / (tile_size - 32));\n\n            const tiles: ImageData[][] = [];\n            for (let x = 0; x < num_tiles_x; x++) {\n                tiles.push([]);\n                for (let y = 0; y < num_tiles_y; y++) {\n                    // calculate the bounding box of the tile\n                    const x0 = x * (tile_size - 32);\n                    const y0 = y * (tile_size - 32);\n                    const x1 = Math.min(x0 + tile_size, initImage.width);\n                    const y1 = Math.min(y0 + tile_size, initImage.height);\n                    // crop the tile\n                    const tile = ctx.getImageData(x0, y0, x1 - x0, y1 - y0);\n                    tiles[x].push(tile);\n                }\n            }\n            return {\n                numTilesX: num_tiles_x,\n                numTilesY: num_tiles_y,\n                tileSize: tile_size,\n                imageWidth: initImage.width,\n                imageHeight: initImage.height,\n                tiles,\n            };\n        } finally {\n            canvas.remove();\n        }\n    } else {\n        return null;\n    }\n}\n\n// merge the tiles back into a single image\n// tiles should be 2x original size\nexport function mergeTiles(splitResult: SplitResult): ImageData {\n    // create a new image\n    const canvas = document.createElement(\"canvas\");\n    try {\n        canvas.width = splitResult.imageWidth;\n        canvas.height = splitResult.imageHeight;\n        const ctx = canvas.getContext(\"2d\");\n        if (!ctx) {\n            throw new Error(\"Could not get canvas context\");\n        }\n        for (let x = 0; x < splitResult.numTilesX; x++) {\n            for (let y = 0; y < splitResult.numTilesY; y++) {\n                // load the tile\n                const tile = splitResult.tiles[x][y];\n                const tileCanvas = imageDataToCanvas(tile);\n                \n                // paste the tile into the new image\n                ctx.drawImage(tileCanvas, x * (splitResult.tileSize - 64), y * (splitResult.tileSize - 64));\n            }\n        }\n        return ctx.getImageData(\n            0,\n            0,\n            splitResult.imageWidth,\n            splitResult.imageHeight\n        );\n    } finally {\n        canvas.remove();\n    }\n}\n\nexport function imageDataToCanvas(imageData: ImageData): HTMLCanvasElement {\n    const canvas = document.createElement(\"canvas\");\n    canvas.width = imageData.width;\n    canvas.height = imageData.height;\n    const ctx = canvas.getContext(\"2d\");\n    if (!ctx) {\n        throw new Error(\"Could not get canvas context\");\n    }\n    ctx.putImageData(imageData, 0, 0);\n    return canvas;\n}\n\n// extract resizing logic from above function into a reusable resizeImage function\nexport function resizeImage(\n    image: HTMLCanvasElement,\n    width: number,\n    height: number\n): HTMLCanvasElement {\n    const canvas = document.createElement(\"canvas\");\n    try {\n        canvas.width = width;\n        canvas.height = height;\n        const ctx = canvas.getContext(\"2d\");\n        if (!ctx) {\n            throw new Error(\"Could not get canvas context\");\n        }\n        ctx.drawImage(image, 0, 0, width, height);\n        return canvas;\n    } finally {\n        image.remove();\n    }\n}\n\n// re-implement fixImageSize using resizeImage\nexport function fixImageSize(image: HTMLCanvasElement): HTMLCanvasElement {\n    // if the width and the height are divisible by 64, return the image data\n    // otherwise, resize up to the next multiple of 64\n    const width = Math.ceil(image.width / 64) * 64;\n    const height = Math.ceil(image.height / 64) * 64;\n    if (width == image.width && height == image.height) {\n        return image;\n    }\n    return resizeImage(image, width, height);\n}\n\nexport function featherEdges(\n    selectionOverlay: Rect,\n    imageWidth: number,\n    imageHeight: number,\n    imageData: ImageData,\n    featherWidth?: number\n) {\n    const featherLeftEdge = selectionOverlay.x != 0;\n    const featherRightEdge =\n        selectionOverlay.x + selectionOverlay.width != imageWidth;\n    const featherTopEdge = selectionOverlay.y != 0;\n    const featherBottomEdge =\n        selectionOverlay.y + selectionOverlay.height != imageHeight;\n\n    const baseWidth = Math.min(selectionOverlay.width, selectionOverlay.height);\n    if (!featherWidth) {\n        featherWidth = Math.floor(baseWidth / 8);\n    }\n\n    if (featherTopEdge) {\n        for (let y = 0; y < featherWidth; y++) {\n            for (let x = 0; x < selectionOverlay.width; x++) {\n                const pixelIndex = (y * selectionOverlay.width + x) * 4;\n                const alpha = (y / featherWidth) * 255;\n                const existingAlpha = imageData.data[pixelIndex + 3];\n                imageData.data[pixelIndex + 3] = Math.min(alpha, existingAlpha);\n            }\n        }\n    }\n    if (featherBottomEdge) {\n        for (\n            let y = selectionOverlay.height - featherWidth;\n            y < selectionOverlay.height;\n            y++\n        ) {\n            for (let x = 0; x < selectionOverlay.width; x++) {\n                const pixelIndex = (y * selectionOverlay.width + x) * 4;\n                const alpha =\n                    ((selectionOverlay.height - y) / featherWidth) * 255;\n                const existingAlpha = imageData.data[pixelIndex + 3];\n                imageData.data[pixelIndex + 3] = Math.min(alpha, existingAlpha);\n            }\n        }\n    }\n    if (featherLeftEdge) {\n        for (let x = 0; x < featherWidth; x++) {\n            for (let y = 0; y < selectionOverlay.height; y++) {\n                const pixelIndex = (y * selectionOverlay.width + x) * 4;\n                const alpha = (x / featherWidth) * 255;\n                const existingAlpha = imageData.data[pixelIndex + 3];\n                imageData.data[pixelIndex + 3] = Math.min(alpha, existingAlpha);\n            }\n        }\n    }\n    if (featherRightEdge) {\n        for (\n            let x = selectionOverlay.width - featherWidth;\n            x < selectionOverlay.width;\n            x++\n        ) {\n            for (let y = 0; y < selectionOverlay.height; y++) {\n                const pixelIndex = (y * selectionOverlay.width + x) * 4;\n                const alpha =\n                    ((selectionOverlay.width - x) / featherWidth) * 255;\n                const existingAlpha = imageData.data[pixelIndex + 3];\n                imageData.data[pixelIndex + 3] = Math.min(alpha, existingAlpha);\n            }\n        }\n    }\n}\n\nexport function applyAlphaMask(imageData: ImageData, alphaMask: ImageData) {\n    if (\n        imageData.width != alphaMask.width ||\n        imageData.height != alphaMask.height\n    ) {\n        throw new Error(\"imageData and alphaMask are not the same size\");\n    }\n    const spread = 10;\n    for (let x = 0; x < imageData.width; x++) {\n        for (let y = 0; y < imageData.height; y++) {\n            // r, g, b, a\n            // if transparency within 10 pixels, set alpha to 1, otherwise to zero.\n            // binary alpha inversion with spread\n            let alpha = false;\n            for (\n                let x2 = Math.max(0, x - spread);\n                x2 < Math.min(imageData.width, x + spread);\n                x2++\n            ) {\n                for (\n                    let y2 = Math.max(0, y - spread);\n                    y2 < Math.min(imageData.height, y + spread);\n                    y2++\n                ) {\n                    const alphaValue =\n                        alphaMask.data[y2 * alphaMask.width * 4 + x2 * 4 + 3];\n                    if (alphaValue < 255) {\n                        alpha = true;\n                    }\n                }\n            }\n            const alphaIndex = y * imageData.width * 4 + x * 4 + 3;\n            if (alpha) {\n                imageData.data[alphaIndex] = 255;\n            } else {\n                imageData.data[alphaIndex] = 0;\n            }\n        }\n    }\n}\n\nexport interface ImageWorkerRequest {\n    id: string;\n    feather: boolean;\n    upscale?: boolean;\n    alpha: boolean;\n    pixels: Uint8ClampedArray;\n    alphaPixels?: Uint8ClampedArray;\n    width: number;\n    height: number;\n    featherWidth?: number;\n    selectionOverlay: Rect;\n}\n\nexport interface ImageWorkerResponse {\n    id: string;\n    pixels: Uint8ClampedArray;\n}\n\nexport class ImageUtilWorker {\n    private workers: Array<Worker> = [];\n    private callbacks: { [key: string]: (event: MessageEvent) => void } = {};\n    private cursor = 0;\n\n    constructor(numWorkers = 3) {\n        for (let i = 0; i < numWorkers; i++) {\n            this.workers[i] = new Worker(\n                `${process.env.PUBLIC_URL}/workers/imageutil.js`\n            );\n            this.workers[i].addEventListener(\n                \"message\",\n                this.onMessage.bind(this)\n            );\n        }\n    }\n\n    onMessage(event: MessageEvent) {\n        const resp = event.data as ImageWorkerResponse;\n        this.callbacks[resp.id](event);\n        delete this.callbacks[resp.id];\n    }\n\n    async processRequest(\n        request: ImageWorkerRequest\n    ): Promise<ImageWorkerResponse> {\n        return new Promise((resolve, reject) => {\n            this.callbacks[request.id] = (event) => {\n                resolve(event.data);\n            };\n            this.workers[this.cursor].postMessage({\n                ...request,\n            });\n            this.cursor = (this.cursor + 1) % this.workers.length;\n        });\n    }\n\n    destroy() {\n        for (let key in this.workers) {\n            this.workers[key].terminate();\n        }\n    }\n}\n\nexport function createEncodedThumbnail(encodedImage: string): Promise<string> {\n    return new Promise((resolve, reject) => {\n        // use html5 canvas\n        // crop to square aspect ratio on 128x128 canvas\n        const canvas = document.createElement(\"canvas\");\n        canvas.width = 128;\n        canvas.height = 128;\n\n        const image = new Image();\n        image.src = `data:image/png;base64,${encodedImage}`;\n        image.onload = () => {\n            const context = canvas.getContext(\"2d\");\n            if (!context) {\n                throw new Error(\"Could not create canvas context\");\n            }\n            const width = 128;\n            const height = 128;\n            canvas.width = width;\n            canvas.height = height;\n\n            const aspectRatio = image.width / image.height;\n            const cropWidth =\n                aspectRatio > 1 ? image.width : image.height * aspectRatio;\n            const cropHeight =\n                aspectRatio > 1 ? image.width / aspectRatio : image.height;\n            const cropX = (image.width - cropWidth) / 2;\n            const cropY = (image.height - cropHeight) / 2;\n            context.drawImage(\n                image,\n                cropX,\n                cropY,\n                cropWidth,\n                cropHeight,\n                0,\n                0,\n                width,\n                height\n            );\n\n            // save to png\n            const imageUrl = canvas.toDataURL(\"image/png\");\n            const base64 = imageUrl.split(\",\")[1];\n            resolve(base64);\n        };\n    });\n}\n\nexport function decodeImage(encodedImage: string): Promise<HTMLImageElement> {\n    return new Promise((resolve, reject) => {\n        const image = new Image();\n        image.src = `data:image/png;base64,${encodedImage}`;\n        image.onload = () => {\n            resolve(image);\n        };\n    });\n}\n\nexport function binaryImageToDataBase64(binaryImage: any): string {\n    const buf = Buffer.from(binaryImage, \"binary\");\n    return buf.toString(\"base64\");\n}\n\nexport function resizeEncodedImage(\n    encodedImage: string,\n    width: number,\n    height: number\n): Promise<string> {\n    return new Promise((resolve, reject) => {\n        // use html5 canvas\n        // crop to square aspect ratio on 128x128 canvas\n        const canvas = document.createElement(\"canvas\");\n        canvas.width = width;\n        canvas.height = height;\n\n        const image = new Image();\n        image.src = `data:image/png;base64,${encodedImage}`;\n        image.onload = () => {\n            const context = canvas.getContext(\"2d\");\n            if (!context) {\n                throw new Error(\"Could not create canvas context\");\n            }\n            canvas.width = width;\n            canvas.height = height;\n\n            context.drawImage(\n                image,\n                0,\n                0,\n                image.width,\n                image.height,\n                0,\n                0,\n                width,\n                height\n            );\n\n            // save to png\n            const imageUrl = canvas.toDataURL(\"image/png\");\n            const base64 = imageUrl.split(\",\")[1];\n            resolve(base64);\n        };\n    });\n}\n\nexport function encodedImageToBlob(encodedImage: string): Blob {\n    const binaryString = atob(encodedImage);\n    const arr = [];\n    for (let i = 0; i < binaryString.length; i++) {\n        arr.push(binaryString.charCodeAt(i));\n    }\n    return new Blob([new Uint8Array(arr)], {\n        type: \"image/png\",\n    });\n}\n\n// This function is made to work with S3 presigned urls.\n// Solution found at https://stackoverflow.com/questions/22531114/how-to-upload-to-aws-s3-directly-from-browser-using-a-pre-signed-url-instead-of\nexport function uploadBlob(signedUrl: string, blob: Blob): Promise<void> {\n    return new Promise((resolve, reject) => {\n        var xhr = new XMLHttpRequest();\n        xhr.open(\"PUT\", signedUrl, true);\n        xhr.setRequestHeader(\"Content-Type\", \"image/png\");\n        xhr.onload = () => {\n            if (xhr.status < 400) {\n                // success!\n                resolve();\n            }\n        };\n        xhr.onerror = (err) => {\n            // error...\n            reject(err);\n        };\n        xhr.send(blob); // `file` is a File object here\n    });\n}\n","import React, { FC, useEffect, useRef, useState } from \"react\";\nimport { Modal } from \"react-bootstrap\";\nimport { propTypes } from \"react-bootstrap/esm/Image\";\n\ninterface Props {\n    show: boolean;\n    title?: string;\n}\n\n// Show modal with child contents\nexport const BusyModal: FC<Props> = ({ show, title, children }) => {\n    return (\n        <Modal show={show} backdrop=\"static\" keyboard={false}>\n            <Modal.Header closeButton>\n                <Modal.Title>{title || \"Processing\"}</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                {children || (\n                    <div className=\"d-flex justify-content-center\">\n                        <div className=\"spinner-border\" role=\"status\">\n                            <span className=\"sr-only\">Please Wait...</span>\n                        </div>\n                    </div>\n                )}\n            </Modal.Body>\n        </Modal>\n    );\n};\n","import { Renderer } from \"./renderer\";\n\nexport class ZoomHelper {\n\n    private startTouches: React.TouchList | null;\n    private startZoom = 1;\n    private startOffsetX = 0;\n    private startOffsetY = 0;\n\n    constructor(private renderer: Renderer) {\n        this.startTouches = null;\n    }\n\n    onWheel(event: WheelEvent) {\n        const originalZoom = this.renderer.getZoom();\n        let zoom = this.renderer.getZoom();\n        let offsetX = this.renderer.getOffsetX();\n        let offsetY = this.renderer.getOffsetY();\n\n        let canvasPoint = this.translateMouseToCanvasCoordinates(\n            event.offsetX,\n            event.offsetY\n        );\n        // console.log(\"x: \" + x + \", y: \" + y);\n        \n        if (event.deltaY < 0) {\n            zoom += 0.1 * zoom;\n        } else {\n            zoom -= 0.1 * zoom;\n        }\n        zoom = Math.max(0.1, Math.min(zoom, 8.0));\n\n        let xDiff = canvasPoint.x - -offsetX;\n        let yDiff = canvasPoint.y - -offsetY;\n\n        // offsetX = canvasPoint.x - xDiff * (zoom / originalZoom);\n        // offsetY = canvasPoint.y - yDiff * (zoom / originalZoom);\n        offsetX -= xDiff * (zoom / originalZoom) - xDiff;\n        offsetY -= yDiff * (zoom / originalZoom) - yDiff;\n\n        this.renderer.updateZoomAndOffset(zoom, offsetX, offsetY);\n    }\n\n    onPan(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        let movementX = event.movementX;\n        let movementY = event.movementY;\n        // translate offset to canvas coordinates\n        let rect = (\n            event.target as HTMLCanvasElement\n        ).getBoundingClientRect();\n        movementX = (movementX / rect.width) * 512;\n        movementY = (movementY / rect.height) * 512;\n\n        let zoom = this.renderer.getZoom();\n        let offsetX = this.renderer.getOffsetX();\n        let offsetY = this.renderer.getOffsetY();\n\n        offsetX += movementX / zoom;\n        offsetY += movementY / zoom;\n\n        this.renderer.updateZoomAndOffset(zoom, offsetX, offsetY);\n    }\n\n    onTouchStart(event: React.TouchEvent<HTMLCanvasElement>) {\n        if (event.touches.length === 2) {\n            this.startTouches = event.touches;\n            this.startZoom = this.renderer.getZoom();\n            this.startOffsetX = this.renderer.getOffsetX();\n            this.startOffsetY = this.renderer.getOffsetY();\n        }\n    }\n\n    onTouchMove(event: React.TouchEvent<HTMLCanvasElement>) {\n        if (this.startTouches) {\n            const canvasRect = this.renderer.getCanvas().getBoundingClientRect();\n            const startTouch1 = this.startTouches[0];\n            const startTouch2 = this.startTouches[1];\n            const touch1 = event.touches[0];\n            const touch2 = event.touches[1];\n\n            const startDistance = Math.sqrt(\n                Math.pow(startTouch1.clientX - startTouch2.clientX, 2) +\n                Math.pow(startTouch1.clientY - startTouch2.clientY, 2)\n            );\n            const distance = Math.sqrt(\n                Math.pow(touch1.clientX - touch2.clientX, 2) +\n                Math.pow(touch1.clientY - touch2.clientY, 2)\n            );\n            const zoom = this.startZoom * (distance / startDistance);\n\n            const startCenterX = (startTouch1.clientX + startTouch2.clientX) / 2;\n            const startCenterY = (startTouch1.clientY + startTouch2.clientY) / 2;\n            const centerX = (touch1.clientX + touch2.clientX) / 2;\n            const centerY = (touch1.clientY + touch2.clientY) / 2;\n\n            const startCanvasPoint = this.translateMouseToCanvasCoordinates(\n                startCenterX - canvasRect.left,\n                startCenterY - canvasRect.top\n            );\n            const canvasPoint = this.translateMouseToCanvasCoordinates(\n                centerX - canvasRect.left,\n                centerY - canvasRect.top\n            );\n\n            let offsetX = this.startOffsetX;\n            let offsetY = this.startOffsetY;\n\n            let xDiff = canvasPoint.x - startCanvasPoint.x;\n            let yDiff = canvasPoint.y - startCanvasPoint.y;\n\n            let xDiff2 = canvasPoint.x - -this.renderer.getOffsetX();\n            let yDiff2 = canvasPoint.y - -this.renderer.getOffsetY();\n\n            offsetX -= xDiff2 * (zoom / this.startZoom) - xDiff2 - (xDiff * (distance / startDistance));\n            offsetY -= yDiff2 * (zoom / this.startZoom) - yDiff2 - (yDiff * (distance / startDistance));\n\n            this.renderer.updateZoomAndOffset(zoom, offsetX, offsetY);\n        }\n    }\n\n    onTouchEnd(event: React.TouchEvent<HTMLCanvasElement>) {\n        this.startTouches = null;\n    }\n\n\n    translateMouseToCanvasCoordinates(mouseX: number, mouseY: number, zoom?: number, offsetX?: number, offsetY?: number) {\n        let x = mouseX;\n        let y = mouseY;\n        // adjust for zoom\n        zoom = zoom || this.renderer.getZoom();\n        offsetX = offsetX || this.renderer.getOffsetX();\n        offsetY = offsetY || this.renderer.getOffsetY();\n        x = x / zoom;\n        y = y / zoom;\n\n        // translate offset to canvas coordinates\n        let rect = this.renderer.getCanvas().getBoundingClientRect();\n\n        // x = (x / rect.width) * this.renderer.getWidth();\n        // y = (y / rect.height) * this.renderer.getHeight();\n\n        x = (x / rect.width) * 512;\n        y = (y / rect.height) * 512;\n\n        x = Math.round(x - offsetX);\n        y = Math.round(y - offsetY);\n\n        return { x: x, y: y };\n    }\n\n    translateCanvasToMouseCoordinates(x: number, y: number, zoom?: number, offsetX?: number, offsetY?: number) {\n        zoom = zoom || this.renderer.getZoom();\n        offsetX = offsetX || this.renderer.getOffsetX();\n        offsetY = offsetY || this.renderer.getOffsetY();\n        x = x + offsetX;\n        y = y + offsetY;\n        x = x * zoom;\n        y = y * zoom;\n\n        // translate offset to canvas coordinates\n        let rect = this.renderer.getCanvas().getBoundingClientRect();\n        x = Math.round((x / this.renderer.getWidth()) * rect.width);\n        y = Math.round((y / this.renderer.getHeight()) * rect.height);\n\n        return { x: x, y: y };\n    }\n}","import React from \"react\";\nimport { Renderer } from \"./renderer\";\nimport { ZoomHelper } from \"./zoomHelper\";\n\nexport interface Tool {\n    name: string;\n    getArgs(): any;\n    updateArgs(args: any): void;\n    onMouseDown(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>): void;\n    onMouseMove(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>): void;\n    onMouseUp(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>): void;\n    onMouseLeave(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>): void;\n\n    onTouchStart(event: React.TouchEvent<HTMLCanvasElement>): void;\n    onTouchMove(event: React.TouchEvent<HTMLCanvasElement>): void;\n    onTouchEnd(event: React.TouchEvent<HTMLCanvasElement>): void;\n\n    onKeyDown(event: KeyboardEvent): void;\n    onKeyUp(event: KeyboardEvent): void;\n    onWheel(event: WheelEvent): void;\n    destroy(): boolean;\n    onShowSelectionControls(listener: (show: boolean) => void): void;\n    select(direction: \"left\" | \"right\"): void;\n    onSaveImage(listener: (encodedImage: string) => void): void;\n}\n\nexport class BaseTool implements Tool {\n    saveListener?: (encodedImage: string, args?: any) => void = () => {};\n\n    private touchHandle: number | undefined;\n\n    readonly zoomHelper: ZoomHelper;\n\n    private _pinchZooming = false;\n    private _panning = false;\n\n    constructor(readonly renderer: Renderer, readonly name: string) {\n        this.zoomHelper = new ZoomHelper(renderer);\n    }\n\n    getArgs(): any {\n        return JSON.parse(\n            localStorage.getItem(`tool_args_${this.name}`) || \"{}\"\n        );\n    }\n    updateArgs(args: any) {\n        localStorage.setItem(`tool_args_${this.name}`, JSON.stringify(args));\n    }\n    onMouseDown(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        if (event.button === 1) {\n            this._panning = true;\n        }\n    }\n    onMouseMove(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        if (this._panning) {\n            this.zoomHelper.onPan(event);\n        }\n        let { x, y } = this.zoomHelper.translateMouseToCanvasCoordinates(\n            event.nativeEvent.offsetX,\n            event.nativeEvent.offsetY\n        );\n        this._updateCursor(x, y);\n    }\n\n    private _updateCursor(x: number, y: number) {\n        this.renderer.setCursor({\n            color: \"white\",\n            radius: 10,\n            type: \"crosshairs\",\n            x,\n            y,\n        });\n    }\n\n    onMouseUp(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        if (this._panning) {\n            this._panning = false;\n        }\n    }\n    onMouseLeave(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {}\n\n    onTouchStart(event: React.TouchEvent<HTMLCanvasElement>) {\n        if (this.touchHandle) {\n            window.clearTimeout(this.touchHandle);\n        }\n        const touches: React.Touch[] = [];\n        // make a deep copy so that the values live past the delay\n        for (let i = 0; i < event.touches.length; i++) {\n            const touch = event.touches[i];\n            touches.push({\n                identifier: touch.identifier,\n                clientX: touch.clientX,\n                clientY: touch.clientY,\n                pageX: touch.pageX,\n                pageY: touch.pageY,\n                screenX: touch.screenX,\n                screenY: touch.screenY,\n                target: null,\n            } as any);\n        }\n        event = {\n            touches,\n        } as any;\n        this.touchHandle = window.setTimeout(() => {\n            this.touchHandle = undefined;\n            if (event.touches.length === 2) {\n                this._pinchZooming = true;\n                this.zoomHelper.onTouchStart(event);\n            } else {\n                const rect = this.renderer.getCanvas().getBoundingClientRect();\n                const touch = event.touches[0];\n                if (touch) {\n                    this.onMouseDown({\n                        type: \"touch\",\n                        button: 0,\n                        nativeEvent: {\n                            offsetX: touch.clientX - rect.left,\n                            offsetY: touch.clientY - rect.top,\n                        },\n                    } as any);\n                }\n            }\n        }, 200);\n    }\n    onTouchMove(event: React.TouchEvent<HTMLCanvasElement>) {\n        if (event.touches.length === 2) {\n            this.zoomHelper.onTouchMove(event);\n        } else {\n            const rect = this.renderer.getCanvas().getBoundingClientRect();\n            const touch = event.touches[0];\n            if (touch) {\n                this.onMouseMove({\n                    type: \"touch\",\n                    button: 0,\n                    nativeEvent: {\n                        offsetX: touch.clientX - rect.left,\n                        offsetY: touch.clientY - rect.top,\n                    },\n                } as any);\n            }\n        }\n    }\n    onTouchEnd(event: React.TouchEvent<HTMLCanvasElement>) {\n        if (this._pinchZooming) {\n            this._pinchZooming = false;\n            this.zoomHelper.onTouchEnd(event);\n        } else {\n            this.onMouseUp({\n                button: 0,\n                type: \"touch\",\n            } as any);\n        }\n    }\n\n    onKeyDown(event: KeyboardEvent) {}\n    onKeyUp(event: KeyboardEvent) {}\n    onWheel(event: WheelEvent) {\n        this.zoomHelper.onWheel(event);\n    }\n    destroy(): boolean {\n        return true;\n    }\n    onShowSelectionControls(listener: (show: boolean) => void) {}\n    select(direction: \"left\" | \"right\") {}\n    onSaveImage(listener: (encodedImage: string) => void) {\n        this.saveListener = listener;\n    }\n}\n","import moment from \"moment\";\n\nimport { Image } from \"../client\";\n\nexport interface LocalImage extends Image {\n    imageData?: string;\n}\n\n/**\n * This class uses indexedDB to store images locally.\n */\nexport class LocalImagesStore {\n    private db: IDBDatabase | null = null;\n\n    init(): Promise<void> {\n        return new Promise((resolve, reject) => {\n            const request = indexedDB.open(\"aibrush\", 4);\n            request.onupgradeneeded = (evt) => {\n                const db = request.result;\n                // create object store if it doesn't exist\n                // const imagesStore = db.createObjectStore(\"images\", { keyPath: \"id\" });\n                let imagesStore: IDBObjectStore;\n                if (!db.objectStoreNames.contains(\"images\")) {\n                    imagesStore = db.createObjectStore(\"images\", {\n                        keyPath: \"id\",\n                    });\n                } else {\n                    imagesStore = request.transaction?.objectStore(\n                        \"images\"\n                    ) as IDBObjectStore;\n                }\n                imagesStore.createIndex(\"updated_at\", \"updated_at\", {\n                    unique: false,\n                });\n                imagesStore.createIndex(\"deleted_at\", \"deleted_at\", {\n                    unique: false,\n                });\n                console.log(\"Local images store updated\");\n            };\n            request.onsuccess = (_) => {\n                this.db = request.result;\n                console.log(\"Local images store initialized\");\n                resolve();\n            };\n            request.onerror = (evt) => {\n                console.error(\"error opening indexeddb\", evt);\n                reject(evt);\n            };\n        });\n    }\n\n    // migrate old images to new format\n    private hydrateImage(image: LocalImage): LocalImage {\n        if (!image) {\n            return image;\n        }\n        if (!image.params) {\n            const legacyImage = image as any;\n            image.params = {\n                prompt: legacyImage.phrases.join(\", \"),\n                negative_prompt: legacyImage.negative_phrases.join(\", \"),\n                width: legacyImage.width,\n                height: legacyImage.height,\n                denoising_strength: legacyImage.stable_diffusion_strength,\n                steps: legacyImage.iterations,\n            }\n        }\n        return image;\n    }\n\n    async getImage(id: string): Promise<LocalImage | null> {\n        if (!this.db) {\n            throw new Error(\"not initialized\");\n        }\n        const transaction = this.db.transaction([\"images\"]);\n        const store = transaction.objectStore(\"images\");\n        const request = store.get(id);\n        return new Promise((resolve, reject) => {\n            request.onsuccess = (evt) => {\n                resolve(this.hydrateImage(request.result));\n            };\n            request.onerror = (evt) => {\n                console.error(\"error getting image\", evt);\n                reject(evt);\n            };\n        });\n    }\n\n    async saveImage(image: LocalImage): Promise<void> {\n        if (!this.db) {\n            throw new Error(\"not initialized\");\n        }\n        await this.cleanupDeletedImages();\n        const transaction = this.db.transaction([\"images\"], \"readwrite\");\n        const store = transaction.objectStore(\"images\");\n        const request = store.put({\n            ...image,\n            updated_at: moment().valueOf(),\n        });\n        return new Promise((resolve, reject) => {\n            request.onsuccess = (evt) => {\n                resolve();\n            };\n            request.onerror = (evt) => {\n                console.error(\"error saving image\", evt);\n                reject(evt);\n            };\n        });\n    }\n\n    async hardDeleteImage(id: string): Promise<void> {\n        if (!this.db) {\n            throw new Error(\"not initialized\");\n        }\n        const transaction = this.db.transaction([\"images\"], \"readwrite\");\n        const store = transaction.objectStore(\"images\");\n        const request = store.delete(id);\n        return new Promise((resolve, reject) => {\n            request.onsuccess = (evt) => {\n                console.log(`image ${id} permanently deleted`);\n                resolve();\n            };\n            request.onerror = (evt) => {\n                console.error(\"error deleting image\", evt);\n                reject(evt);\n            };\n        });\n    }\n\n    async deleteImage(id: string): Promise<void> {\n        if (!this.db) {\n            throw new Error(\"not initialized\");\n        }\n        // fetch the image first. If it has a deletedAt timestamp already, or if it's not\n        // in \"completed\" state, hard delete it. Otherwise, set the deletedAt timestamp.\n        const image = await this.getImage(id);\n        if (!image) {\n            console.error(\"image not found\", id);\n            return;\n        }\n        if (image.deleted_at || image.status !== \"completed\") {\n            return this.hardDeleteImage(id);\n        }\n        const transaction = this.db.transaction([\"images\"], \"readwrite\");\n        const store = transaction.objectStore(\"images\");\n        const request = store.put({\n            ...image,\n            deleted_at: moment().valueOf(),\n        });\n        return new Promise((resolve, reject) => {\n            request.onsuccess = (evt) => {\n                resolve();\n            };\n            request.onerror = (evt) => {\n                console.error(\"error deleting image\", evt);\n                reject(evt);\n            };\n        });\n    }\n\n    async listImages(\n        updated_at: number,\n        direction: IDBCursorDirection,\n        count: number,\n        search: string\n    ): Promise<LocalImage[]> {\n        // use updated_at index\n        if (!this.db) {\n            throw new Error(\"not initialized\");\n        }\n        const transaction = this.db.transaction([\"images\"]);\n        const store = transaction.objectStore(\"images\");\n        const index = store.index(\"updated_at\");\n        const range =\n            direction == \"next\"\n                ? IDBKeyRange.lowerBound(updated_at)\n                : IDBKeyRange.upperBound(updated_at);\n        const request = index.openCursor(range, direction);\n        return new Promise((resolve, reject) => {\n            const images: LocalImage[] = [];\n            request.onsuccess = (evt) => {\n                const cursor = request.result;\n                if (cursor) {\n                    const image: LocalImage = this.hydrateImage(cursor.value);\n                    const prompt = (image.params.prompt || \"\").toLowerCase();\n                    if (\n                        !image.deleted_at &&\n                        (!search || prompt.includes(search.toLowerCase()))\n                    ) {\n                        images.push(image);\n                    }\n                    if (images.length < count) {\n                        cursor.continue();\n                    } else {\n                        resolve(images);\n                    }\n                } else {\n                    resolve(images);\n                }\n            };\n            request.onerror = (evt) => {\n                console.error(\"error listing images\", evt);\n                reject(evt);\n            };\n        });\n    }\n\n    async clearImages(): Promise<void> {\n        // clear from both indexes\n        if (!this.db) {\n            throw new Error(\"not initialized\");\n        }\n        const transaction = this.db.transaction([\"images\"], \"readwrite\");\n        const imagesStore = transaction.objectStore(\"images\");\n        const imagesRequest = imagesStore.clear();\n        return new Promise((resolve, reject) => {\n            imagesRequest.onsuccess = (evt) => {\n                resolve();\n            };\n            imagesRequest.onerror = (evt) => {\n                console.error(\"error clearing images\", evt);\n                reject(evt);\n            };\n        });\n    }\n\n    async getDeletedImages(olderThan?: number): Promise<LocalImage[]> {\n        if (!this.db) {\n            throw new Error(\"not initialized\");\n        }\n        // refactor to use deleted_at index\n        const transaction = this.db.transaction([\"images\"]);\n        const store = transaction.objectStore(\"images\");\n        const index = store.index(\"deleted_at\");\n        // const request = index.openCursor();\n        // get cursor for all deleted_at values\n        const request = index.openCursor(\n            olderThan\n                ? IDBKeyRange.upperBound(olderThan)\n                : IDBKeyRange.lowerBound(1),\n            olderThan ? \"prev\" : \"next\"\n        );\n        return new Promise((resolve, reject) => {\n            const images: LocalImage[] = [];\n            request.onsuccess = (evt) => {\n                const cursor = request.result;\n                if (cursor) {\n                    const image: LocalImage = cursor.value;\n                    if (images.length < 50 && image.deleted_at) {\n                        images.push(cursor.value);\n                    }\n                    cursor.continue();\n                } else {\n                    resolve(images);\n                }\n            };\n            request.onerror = (evt) => {\n                console.error(\"error listing images\", evt);\n                reject(evt);\n            };\n        });\n    }\n\n    async clearDeletedImages(): Promise<void> {\n        if (!this.db) {\n            throw new Error(\"not initialized\");\n        }\n        let deletedImages = await this.getDeletedImages();\n        while (deletedImages.length > 0) {\n            // hard delete all deleted images\n            const promises = deletedImages.map((image) => {\n                return this.hardDeleteImage(image.id);\n            });\n            await Promise.all(promises);\n            deletedImages = await this.getDeletedImages();\n        }\n    }\n\n    async cleanupDeletedImages(): Promise<void> {\n        // delete images that are more than 1 day old\n        let deletedImages = await this.getDeletedImages(\n            moment().subtract(1, \"hours\").valueOf()\n        );\n        while (deletedImages.length > 0) {\n            // hard delete all deleted images\n            const promises = deletedImages.map((image) => {\n                return this.hardDeleteImage(image.id);\n            });\n            await Promise.all(promises);\n            deletedImages = await this.getDeletedImages(\n                moment().subtract(1, \"hours\").valueOf()\n            );\n        }\n    }\n}\n","// Login react component with hooks\nimport React, { useState, FC } from \"react\";\nimport * as axios from \"axios\";\nimport qs from \"qs\";\nimport { AIBrushApi, LoginResult } from \"../client/api\";\n\nconsole.log(process.env)\nconst DISCORD_CLIENT_ID = \"1043951225944678490\";\n\ninterface LoginProps {\n    client: AIBrushApi;\n    onLogin: (loginResult: LoginResult) => void;\n}\n\nexport const Login: FC<LoginProps> = (props) => {\n    // login form accepts email only\n    const [email, setEmail] = useState(\"\");\n    const [emailSubmitted, setEmailSubmitted] = useState(false);\n    const [code, setCode] = useState(\"\");\n    const [err, setErr] = useState(\"\");\n\n    // check query string for invite_code\n    const query = window.location.search;\n    const queryParams = qs.parse(query.substring(1));\n    const inviteCode = queryParams[\"invite_code\"];\n\n    const onLogin = async () => {\n        // clear error\n        setErr(\"\");\n        // validate valid email\n        if (!email.match(/^[^@]+@[^@]+\\.[^@]+$/)) {\n            setErr(\"Invalid email address\");\n            return;\n        }\n\n        try {\n            await props.client.login({\n                email: email,\n                invite_code: inviteCode as string,\n            });\n            setEmailSubmitted(true);\n        } catch (err) {\n            console.error(err);\n            setErr(\"Could not login\");\n        }\n    };\n\n    const discordLink = () => {\n        // localhost url:\n        // https://discord.com/api/oauth2/authorize?client_id=1043951225944678490&redirect_uri=http%3A%2F%2Flocalhost%3A3001%2Fdiscord-login&response_type=code&scope=identify%20email\n        // prod url:\n        // https://discord.com/api/oauth2/authorize?client_id=1043951225944678490&redirect_uri=https%3A%2F%2Fwww.aibrush.art%2Fdiscord-login&response_type=code&scope=identify%20email\n        const host = window.location.host;\n        const protocol = window.location.protocol;\n        const redirectUri = `${protocol}//${host}/discord-login`;\n        const url = `https://discord.com/api/oauth2/authorize?client_id=${DISCORD_CLIENT_ID}&redirect_uri=${redirectUri}&response_type=code&scope=identify%20email`;\n        return url;\n    };\n\n    const onVerify = async () => {\n        // clear error\n        setErr(\"\");\n        // attempt to verify code\n        try {\n            const result = await props.client.verify({\n                email,\n                code,\n            });\n            props.onLogin(result.data);\n        } catch (err) {\n            console.error(err);\n            setErr(\"Failed to verify code\");\n        }\n    };\n\n    // bootstrap login form\n    return (\n        <>\n            <div\n                className=\"row\"\n                style={{\n                    height: \"100vh\",\n                    marginLeft: \"0px\",\n                    marginRight: \"0px\",\n                }}\n            >\n                <div className=\"col-md-6 login-splash\">\n                    {/* <div className=\"center-cropped\" style={{backgroundImage: \"url(/images/scifi-dreamland.png)\"}}></div> */}\n                    <img\n                        className=\"center-cropped\"\n                        src=\"/images/scifi-dreamland.png\"\n                    />\n                </div>\n                <div className=\"col-md-6\">\n                    <div\n                        style={{\n                            fontWeight: 500,\n                            fontSize: \"48px\",\n                            marginTop: \"200px\",\n                        }}\n                    >\n                        AiBrush\n                    </div>\n\n                    <div\n                        style={{\n                            marginLeft: \"10%\",\n                            marginRight: \"10%\",\n                            marginTop: \"88px\",\n                            marginBottom: \"24px\",\n                        }}\n                    >\n                        Login With Email\n                    </div>\n                    {/* Display error if one is set */}\n                    {/* Use <p class=\"text-danger\" */}\n                    {err && <p className=\"text-danger\">{err}</p>}\n                    {err && (\n                        <p className=\"text-info\">\n                            If you don't have an account yet, request one by\n                            sending an email to{\" \"}\n                            <a href=\"mailto:admin@aibrush.art\">\n                                admin@aibrush.art\n                            </a>\n                        </p>\n                    )}\n                    <div\n                        style={{\n                            marginLeft: \"10%\",\n                            marginRight: \"10%\",\n                            marginTop: \"24px\",\n                            textAlign: \"left\",\n                        }}\n                    >\n                        {/* If email submitted, show verify code form*/}\n                        {emailSubmitted && (\n                            <>\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"verifyCode\">\n                                        Verify Code\n                                    </label>\n                                    <input\n                                        type=\"text\"\n                                        className=\"form-control\"\n                                        id=\"verifyCode\"\n                                        placeholder=\"Verification Code\"\n                                        value={code}\n                                        onChange={(e) =>\n                                            setCode(e.target.value)\n                                        }\n                                    />\n                                </div>\n                                {/* Cancel verification and go back to email */}\n                                <button\n                                    className=\"btn btn-secondary\"\n                                    onClick={() => setEmailSubmitted(false)}\n                                >\n                                    Cancel\n                                </button>\n                                &nbsp;\n                                {/* Verify code */}\n                                <button\n                                    type=\"button\"\n                                    className=\"btn btn-primary\"\n                                    onClick={(e) => {\n                                        e.preventDefault();\n                                        onVerify();\n                                    }}\n                                >\n                                    Verify\n                                </button>\n                            </>\n                        )}\n                        {/* Else, show login form */}\n                        {!emailSubmitted && (\n                            <>\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"email\">Email address</label>\n                                    <input\n                                        type=\"email\"\n                                        className=\"form-control\"\n                                        id=\"email\"\n                                        aria-describedby=\"emailHelp\"\n                                        placeholder=\"Enter email\"\n                                        value={email}\n                                        onChange={(e) =>\n                                            setEmail(e.target.value.trim())\n                                        }\n                                    />\n                                </div>\n                                <button\n                                    type=\"button\"\n                                    className=\"btn btn-primary\"\n                                    style={{ float: \"right\" }}\n                                    onClick={(e) => {\n                                        e.preventDefault();\n                                        onLogin();\n                                    }}\n                                >\n                                    Login\n                                </button>\n                            </>\n                        )}\n                    </div>\n                    <div\n                        style={{\n                            marginLeft: \"10%\",\n                            marginRight: \"10%\",\n                            marginTop: \"88px\",\n                            marginBottom: \"24px\",\n                        }}\n                    >\n                        <hr/>\n                        OR\n                    </div>\n                    <div\n                        style={{\n                            marginLeft: \"10%\",\n                            marginRight: \"10%\",\n                            marginTop: \"24px\",\n                        }}\n                    >\n                        <a href={discordLink()} className=\"btn btn-primary\">\n                            <i className=\"fab fa-discord\"></i> Login With Discord\n                        </a>\n                    </div>\n                </div>\n            </div>\n        </>\n    );\n};\n","// Given a set of credentials, this component will refresh them\n// every 5 minutes and invoke the onCredentialsRefreshed callback\n\nimport React, { useEffect, FC } from \"react\"\nimport { LoginResult, AIBrushApi } from \"../client/api\";\n\ninterface TokenRefresherProps {\n    onCredentialsRefreshed: (loginResult: LoginResult) => void;\n    onCredentialsExpired: () => void;\n    api: AIBrushApi;\n    credentials: LoginResult;\n}\n\nexport const TokenRefresher : FC<TokenRefresherProps> = ({ onCredentialsRefreshed, onCredentialsExpired, api, credentials }) => {\n    useEffect(() => {\n        const interval = setInterval(() => {\n            if (credentials && credentials.refreshToken) {\n                api.refresh({refreshToken: credentials.refreshToken}).then(loginResult => {\n                    onCredentialsRefreshed(loginResult.data);\n                }).catch(() => {\n                    onCredentialsExpired();\n                });\n            }\n\n        }, 5 * 60 * 1000);\n        return () => {\n            clearInterval(interval);\n        };\n    }, [credentials, api, onCredentialsRefreshed]);\n    return <div></div>;\n}","import React, { FC, useEffect, useState } from 'react';\nimport { AIBrushApi } from \"../client/api\";\n\ninterface HealthcheckerProps {\n    api: AIBrushApi;\n}\n\nexport const Healthchecker: FC<HealthcheckerProps> = ({ api }) => {\n    // automatically check health every 5 seconds\n    const [healthCheck, setHealthCheck] = useState(true);\n    \n    useEffect(() => {\n        const interval = setInterval(() => {\n            api.healthcheck().then(() => setHealthCheck(true)).catch(() => setHealthCheck(false));\n        }, 5000);\n\n        return () => clearInterval(interval);\n    }, [api]);\n\n    // only display bootstrap danger alert if healthcheck failed\n    // \"service is unavailable\"\n    return (\n        <div className=\"alert alert-danger\" role=\"alert\" style={{ display: healthCheck ? 'none' : 'block' }}>\n            <strong>Service is unavailable</strong>\n        </div>\n    );\n}\n\n","import moment from \"moment\";\nimport React, { FC, useState, useEffect } from \"react\";\nimport { Modal } from \"react-bootstrap\";\nimport { AIBrushApi, Boost } from \"../../client\";\n\ninterface Props {\n    api: AIBrushApi;\n}\n\nexport const BoostList: FC<Props> = ({ api }) => {\n    const [boosts, setBoosts] = useState<Boost[]>([]);\n    const [email, setEmail] = useState<string>(\"\");\n    const [amount, setAmount] = useState<number>(0);\n    const [level, setLevel] = useState<number>(1);\n\n    const [showDeposit, setShowDeposit] = useState<boolean>(false);\n\n    function refresh() {\n        api.listBoosts().then((resp) => {\n            const boosts = resp.data.boosts || [];\n            setBoosts(boosts);\n        });\n    }\n\n    useEffect(() => {\n        refresh();\n    }, [api]);\n\n    const onDepositBoost = async () => {\n        await api.depositBoost(email, {\n            amount: amount * level * 1000 * 60 * 60,\n            level: level,\n        });\n        refresh();\n        setShowDeposit(false);\n    };\n\n    return (\n        <>\n            <h1>Active Boosts</h1>\n            <div className=\"row\">\n                <button\n                    className=\"btn btn-primary\"\n                    onClick={() => setShowDeposit(true)}\n                >\n                    <i className=\"fas fa-plus\" />\n                    &nbsp; Deposit Boost\n                </button>\n                &nbsp;\n                <button className=\"btn btn-primary\" onClick={refresh}>\n                    <i className=\"fas fa-sync\" />\n                    &nbsp; Refresh\n                </button>\n            </div>\n            <hr />\n            <div className=\"row\" style={{ marginTop: \"16px\" }}>\n                <table>\n                    <thead>\n                        <tr>\n                            <th>User</th>\n                            <th>Level</th>\n                            <th>Expires</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {boosts.map((boost) => (\n                            <tr key={boost.user_id}>\n                                <td>{boost.user_id}</td>\n                                <td>{boost.level}</td>\n                                <td>\n                                    {!boost.is_active && moment().add(boost.balance, \"milliseconds\").fromNow()}\n                                    {boost.is_active && moment(boost.activated_at + boost.balance).fromNow()}\n                                </td>\n                            </tr>\n                        ))}\n                    </tbody>\n                </table>\n            </div>\n            {showDeposit && (\n                <Modal show={showDeposit} onHide={() => setShowDeposit(false)}>\n                    <Modal.Header closeButton>\n                        <Modal.Title>Deposit Boost</Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body>\n                        {/* deposit controls */}\n                        <div className=\"form-group\">\n                            <label htmlFor=\"email\">Email</label>\n                            <input\n                                type=\"text\"\n                                className=\"form-control\"\n                                id=\"email\"\n                                value={email}\n                                onChange={(e) => setEmail(e.target.value)}\n                            />\n                        </div>\n                        <div className=\"form-group\">\n                            <label htmlFor=\"amount\">Amount</label>\n                            <input\n                                type=\"number\"\n                                className=\"form-control\"\n                                id=\"amount\"\n                                value={amount}\n                                onChange={(e) =>\n                                    setAmount(Number(e.target.value))\n                                }\n                                min={0.1}\n                                max={10}\n                                step={0.1}\n                            />\n                        </div>\n                        {/* level is a dropdown. 1=quick, 2=fast, 4=pro, 8=super */}\n                        <div className=\"form-group\">\n                            <label htmlFor=\"level\">Level</label>\n                            <select\n                                className=\"form-control\"\n                                id=\"level\"\n                                value={level}\n                                onChange={(e) =>\n                                    setLevel(parseInt(e.target.value))\n                                }\n                            >\n                                <option value={1}>Quick</option>\n                                <option value={2}>Fast</option>\n                                <option value={4}>Pro</option>\n                                <option value={8}>Super</option>\n                            </select>\n                        </div>\n                    </Modal.Body>\n                    <Modal.Footer>\n                        {/* cancel button */}\n                        <button\n                            type=\"button\"\n                            className=\"btn btn-secondary\"\n                            onClick={() => setShowDeposit(false)}\n                        >\n                            Cancel\n                        </button>\n                        &nbsp;\n                        <button\n                            type=\"button\"\n                            className=\"btn btn-primary\"\n                            onClick={onDepositBoost}\n                        >\n                            Deposit\n                        </button>\n                    </Modal.Footer>\n                </Modal>\n            )}\n        </>\n    );\n};\n","import { FC, useEffect, useState } from \"react\";\nimport { AIBrushApi } from \"../../client/api\";\nimport { WorkerSettings, WorkerSettingsJson } from \"../../lib/globalSettings\";\n\ninterface Props {\n    api: AIBrushApi;\n}\n\n// global settings all have a \"settings_key\" and \"settings_json\" field. settings_json is any.\n\n// default \"workers\" setting:\n// {\n//     \"minimum_worker_allocations\": {\n//         \"stable_diffusion\": 0,\n//         \"stable_diffusion_inpainting\": 0,\n//         \"swinir\": 0,\n//     }\n// }\n\nexport const GlobalSettings: FC<Props> = ({ api }) => {\n    const [workerSettings, setWorkerSettings] = useState<WorkerSettingsJson>({\n        minimum_worker_allocations: {\n            stable_diffusion: 0,\n            stable_diffusion_inpainting: 0,\n            swinir: 0,\n        },\n    });\n    const [saving, setSaving] = useState<boolean>(false);\n\n    const loadWorkerSettings = async () => {\n        const settings = await api.getGlobalSettings(\"workers\");\n        setWorkerSettings(settings.data.settings_json as any);\n    };\n\n    const saveWorkerSettings = async () => {\n        setSaving(true);\n        try {\n            await api.updateGlobalSettings(\"workers\", {\n                settings_json: workerSettings,\n            });\n        } finally {\n            setSaving(false);\n        }\n    };\n\n    useEffect(() => {\n        loadWorkerSettings();\n    }, []);\n\n    return (\n        <div style={{paddingBottom: \"48px\"}}>\n            {/* Header: Create new image */}\n            <div className=\"row\">\n                <div className=\"col-12\">\n                    <h1>Global Settings</h1>\n                </div>\n            </div>\n            {/* 50px vertical spacer */}\n            <div className=\"row\">\n                <div className=\"col-12\">\n                    <div className=\"spacer\" />\n                </div>\n            </div>\n            {/* slider from 0 to 10 for each model */}\n            <div className=\"row\">\n                <div className=\"col-12\">\n                    <label htmlFor=\"stable_diffusion\">\n                        stable_diffusion: {workerSettings.minimum_worker_allocations.stable_diffusion}\n                    </label>\n                    <input\n                        style={{marginLeft: \"16px\"}}\n                        type=\"range\"\n                        min={0}\n                        max={10}\n                        value={workerSettings.minimum_worker_allocations.stable_diffusion}\n                        className=\"form-range\"\n                        id=\"stable_diffusion\"\n                        onChange={(e) => {\n                            setWorkerSettings({\n                                ...workerSettings,\n                                minimum_worker_allocations: {\n                                    ...workerSettings.minimum_worker_allocations,\n                                    stable_diffusion: parseInt(e.target.value),\n                                },\n                            });\n                        }}\n                    />\n                </div>\n            </div>\n            <div className=\"row\">\n                <div className=\"col-12\">\n                    <label htmlFor=\"stable_diffusion_inpainting\">\n                        stable_diffusion_inpainting: {workerSettings.minimum_worker_allocations.stable_diffusion_inpainting}\n                    </label>\n                    <input\n                        style={{marginLeft: \"16px\"}}\n                        type=\"range\"\n                        min={0}\n                        max={10}\n                        value={workerSettings.minimum_worker_allocations.stable_diffusion_inpainting}\n                        className=\"form-range\"\n                        id=\"stable_diffusion_inpainting\"\n                        onChange={(e) => {\n                            setWorkerSettings({\n                                ...workerSettings,\n                                minimum_worker_allocations: {\n                                    ...workerSettings.minimum_worker_allocations,\n                                    stable_diffusion_inpainting: parseInt(e.target.value),\n                                },\n                            });\n                        }}\n                    />\n                </div>\n            </div>\n            <div className=\"row\">\n                <div className=\"col-12\">\n                    <label htmlFor=\"swinir\">\n                        swinir: {workerSettings.minimum_worker_allocations.swinir}\n                    </label>\n                    <input\n                        style={{marginLeft: \"16px\"}}\n                        type=\"range\"\n                        min={0}\n                        max={10}\n                        value={workerSettings.minimum_worker_allocations.swinir}\n                        className=\"form-range\"\n                        id=\"swinir\"\n                        onChange={(e) => {\n                            setWorkerSettings({\n                                ...workerSettings,\n                                minimum_worker_allocations: {\n                                    ...workerSettings.minimum_worker_allocations,\n                                    swinir: parseInt(e.target.value),\n                                },\n                            });\n                        }}\n                    />\n                </div>\n            </div>\n            \n            \n            {/* bottom row: save button */}\n            <div className=\"row\">\n                <div className=\"col-12\">\n                    <button className=\"btn btn-primary\" onClick={saveWorkerSettings} disabled={saving}>\n                        {saving ? <>\n                            <i className=\"fas fa-spinner fa-spin\" />\n                            &nbsp; Saving...\n                        </> : \"Save\"}\n                    </button>\n                </div>\n            </div>\n        </div>\n    );\n};","import React, { FC, useState, useEffect, useRef } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { AIBrushApi } from \"../../client/api\";\nimport { BoostList } from \"./BoostList\";\nimport { GlobalSettings } from \"./GlobalSettings\";\n\ninterface Props {\n    api: AIBrushApi;\n}\n\nexport const Admin: FC<Props> = ({ api }) => {\n    const [links, setLinks] = useState<string[]>([]);\n\n    const onGenerateLink = async () => {\n        const inviteCode = await api.createInviteCode();\n        setLinks([...links, `/?invite_code=${inviteCode.data.id}`]);\n    };\n\n    return (\n        <div style={{paddingBottom: \"48px\"}}>\n            {/* Header: Create new image */}\n            <div className=\"row\">\n                <div className=\"col-12\">\n                    <h1>Admin features</h1>\n                </div>\n            </div>\n            {/* 50px vertical spacer */}\n            <div className=\"row\">\n                <div className=\"col-12\">\n                    <div className=\"spacer\" />\n                </div>\n            </div>\n            {links.length > 0 && (\n                <div className=\"row\">\n                    <div className=\"col-12\">\n                        <p>Right click to copy invite links</p>\n                    </div>\n                </div>\n            )}\n            <div className=\"row\">\n                <div className=\"offset-lg-3 col-lg-6 col-sm-12\">\n                    {/* show a list of hyperlinks */}\n                    <div className=\"btn-group-vertical\">\n                        {links.map((link, i) => (\n                            <a key={i} href={link} className=\"btn btn-primary\">\n                                <i className=\"fas fa-link\" />\n                                &nbsp; Invite Link\n                            </a>\n                        ))}\n                    </div>\n                </div>\n            </div>\n            <div className=\"row\">\n                <div className=\"col-12\">\n                    <div className=\"spacer\" />\n                </div>\n            </div>\n            <div className=\"row\">\n                <div className=\"col-12\">\n                    {/* button to generate links */}\n                    <button\n                        className=\"btn btn-primary\"\n                        onClick={onGenerateLink}\n                    >\n                        Generate Link\n                    </button>\n                </div>\n            </div>\n            <hr />\n            <BoostList api={api} />\n            <hr />\n            <GlobalSettings api={api} />\n        </div>\n    );\n};\n","import React, { FC, useEffect, useState } from \"react\";\nimport { AIBrushApi, Image } from \"../client\";\nimport moment from \"moment\";\nimport { ImageThumbnail } from \"../components/ImageThumbnail\";\nimport { useHistory } from \"react-router-dom\";\nimport { BusyModal } from \"../components/BusyModal\";\n\ninterface Props {\n    api: AIBrushApi;\n    assetsUrl: string;\n}\n\nexport const DeletedImages: FC<Props> = ({ api, assetsUrl }) => {\n    const [images, setImages] = useState<Image[]>([]);\n    const [deleting, setDeleting] = useState(false);\n\n    const history = useHistory();\n\n    const loadImages = async () => {\n        const cursor = moment().add(-24, \"hours\").valueOf();\n        // TODO: special api call for deleted images?\n        const resp = await api.listImages(cursor, \"\", 100, \"asc\");\n        setImages(\n            (\n                resp.data.images?.filter((image) => !!image.deleted_at) || []\n            ).sort((a, b) => {\n                if (a.deleted_at && b.deleted_at) {\n                    return b.deleted_at - a.deleted_at;\n                }\n                return 0;\n            })\n        );\n    };\n\n    const onDeleteImage = async (image: Image) => {\n        setImages(images.filter((i) => i.id !== image.id));\n        await api.deleteImage(image.id);\n    };\n\n    const onDeleteAllImages = async () => {\n        setDeleting(true);\n        try {\n            await Promise.all(images.map((image) => api.deleteImage(image.id)));\n            setImages([]);\n        } finally {\n            setDeleting(false);\n        }\n    };\n\n    const onRestoreImage = async (image: Image) => {\n        setImages(images.filter((i) => i.id !== image.id));\n        await api.updateImage(image.id, { deleted_at: null });\n    };\n\n    useEffect(() => {\n        loadImages();\n    }, [api]);\n\n    return (\n        <div>\n            <div>\n                <div className=\"row\">\n                    <div className=\"col-12\">\n                        <h1 style={{ fontSize: \"40px\", textAlign: \"left\" }}>\n                            <i\n                                style={{ cursor: \"pointer\" }}\n                                onClick={() => history.goBack()}\n                                className=\"fas fa-chevron-left\"\n                            ></i>\n                            &nbsp; Deleted Images\n                        </h1>\n                        {/* float right \"delete all\" button */}\n                        <button\n                            className=\"btn btn-danger btn-sm image-popup-delete-button\"\n                            onClick={onDeleteAllImages}\n                            style={{\n                                float: \"right\",\n                                marginRight: \"8px\",\n                            }}\n                        >\n                            <i className=\"fa fa-trash\"></i>&nbsp;Delete All\n                        </button>\n                    </div>\n                </div>\n                <div className=\"row\" style={{ marginTop: \"32px\" }}>\n                    <div className=\"col-sm-2 offset-sm-2\">Image</div>\n                    <div className=\"col-sm-8\">Action</div>\n                </div>\n                {images.map((image) => (\n                    <div\n                        className=\"row\"\n                        style={{\n                            marginTop: \"16px\",\n                            borderBottom: \"1px solid #303030\",\n                        }}\n                        key={image.id}\n                    >\n                        <div className=\"col-sm-2 offset-sm-2\">\n                            <ImageThumbnail\n                                assetsUrl={assetsUrl}\n                                image={image}\n                                censorNSFW={true}\n                            />\n                        </div>\n                        <div\n                            className=\"col-sm-8\"\n                            style={{\n                                paddingTop: \"64px\",\n                                paddingBottom: \"64px\",\n                            }}\n                        >\n                            <button\n                                className=\"btn btn-danger btn-sm image-popup-delete-button\"\n                                onClick={() => onDeleteImage(image)}\n                                style={{\n                                    marginRight: \"8px\",\n                                }}\n                            >\n                                <i className=\"fa fa-trash\"></i>&nbsp;Delete\n                            </button>\n                            <button\n                                className=\"btn btn-primary btn-sm image-popup-restore-button\"\n                                onClick={() => onRestoreImage(image)}\n                            >\n                                <i className=\"fa fa-undo\"></i>&nbsp;Restore\n                            </button>\n                        </div>\n                    </div>\n                ))}\n            </div>\n            <BusyModal show={deleting} title=\"Deleting Images\">\n                Please wait while we delete all images...\n            </BusyModal>\n        </div>\n    );\n};\n","import React, { useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { AIBrushApi, LoginResult } from \"../client\";\n\ninterface LoginProps {\n    client: AIBrushApi;\n    onLogin: (loginResult: LoginResult) => void;\n}\n\nexport const DiscordLogin: React.FC<LoginProps> = ({client, onLogin}) => {\n    const history = useHistory();\n    const code = new URLSearchParams(window.location.search).get(\"code\");\n    \n    useEffect(() => {\n        if (code) {\n            console.log(\"logging in with code\", code);\n            client.discordLogin({code}).then((result) => {\n                console.log(\"login result\", result);\n                if (result.data.accessToken) {\n                    onLogin(result.data);\n                }\n                \n                history.push(\"/\");\n            });\n        } else {\n            history.push(\"/\");\n        }\n    }, [])\n\n    return null;\n}","import React, { FC, useEffect, useState } from \"react\";\nimport { AIBrushApi, Image } from \"../client\";\nimport moment from \"moment\";\nimport { ImageThumbnail } from \"../components/ImageThumbnail\";\nimport { useHistory } from \"react-router-dom\";\nimport { LocalImagesStore } from \"../lib/localImagesStore\";\nimport { BusyModal } from \"../components/BusyModal\";\n\ninterface Props {\n    localImages: LocalImagesStore;\n}\n\nexport const LocalDeletedImages: FC<Props> = ({ localImages }) => {\n    const [images, setImages] = useState<Image[]>([]);\n    const [deleting, setDeleting] = useState(false);\n\n    const history = useHistory();\n\n    const loadImages = async () => {\n        const deletedImages = await localImages.getDeletedImages();\n        setImages(deletedImages);\n    };\n\n    const onDeleteImage = async (image: Image) => {\n        setImages(images.filter((i) => i.id !== image.id));\n        await localImages.deleteImage(image.id);\n        if (images.length <= 5) {\n            loadImages();\n        }\n    };\n\n    const onDeleteAllImages = async () => {\n        setDeleting(true);\n        try {\n            await localImages.clearDeletedImages();\n            setImages([]);\n        } finally {\n            setDeleting(false);\n        }\n    };\n\n    const onRestoreImage = async (image: Image) => {\n        setImages(images.filter((i) => i.id !== image.id));\n        await localImages.saveImage({\n            ...image,\n            deleted_at: undefined,\n        });\n    };\n\n    useEffect(() => {\n        loadImages();\n    }, [localImages]);\n\n    return (\n        <div>\n            <div>\n                <div className=\"row\">\n                    <div className=\"col-12\">\n                        <h1 style={{ fontSize: \"40px\", textAlign: \"left\" }}>\n                            <i\n                                style={{ cursor: \"pointer\" }}\n                                onClick={() => history.goBack()}\n                                className=\"fas fa-chevron-left\"\n                            ></i>\n                            &nbsp; Deleted Images\n                        </h1>\n                        <button\n                            className=\"btn btn-danger btn-sm image-popup-delete-button\"\n                            onClick={onDeleteAllImages}\n                            style={{\n                                float: \"right\",\n                                marginRight: \"8px\",\n                            }}\n                        >\n                            <i className=\"fa fa-trash\"></i>&nbsp;Delete All\n                        </button>\n                    </div>\n                </div>\n                <div className=\"row\" style={{ marginTop: \"32px\" }}>\n                    <div className=\"col-sm-2 offset-sm-2\">Image</div>\n                    <div className=\"col-sm-8\">Action</div>\n                </div>\n                {images.map((image) => (\n                    <div\n                        className=\"row\"\n                        style={{\n                            marginTop: \"16px\",\n                            borderBottom: \"1px solid #303030\",\n                        }}\n                        key={image.id}\n                    >\n                        <div className=\"col-sm-2 offset-sm-2\">\n                            <ImageThumbnail\n                                assetsUrl={\"\"}\n                                image={image}\n                                censorNSFW={true}\n                            />\n                        </div>\n                        <div\n                            className=\"col-sm-8\"\n                            style={{\n                                paddingTop: \"64px\",\n                                paddingBottom: \"64px\",\n                            }}\n                        >\n                            <button\n                                className=\"btn btn-danger btn-sm image-popup-delete-button\"\n                                onClick={() => onDeleteImage(image)}\n                                style={{\n                                    marginRight: \"8px\",\n                                }}\n                            >\n                                <i className=\"fa fa-trash\"></i>&nbsp;Delete\n                            </button>\n                            <button\n                                className=\"btn btn-primary btn-sm image-popup-restore-button\"\n                                onClick={() => onRestoreImage(image)}\n                            >\n                                <i className=\"fa fa-undo\"></i>&nbsp;Restore\n                            </button>\n                        </div>\n                    </div>\n                ))}\n            </div>\n            <BusyModal show={deleting} title=\"Deleting Images\">\n                Please wait while we delete all images...\n            </BusyModal>\n        </div>\n    );\n};\n","// V2 page\nimport React, { FC, useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport Dropdown from \"react-bootstrap/Dropdown\";\nimport { useParams, useHistory, Link } from \"react-router-dom\";\nimport moment from \"moment\";\nimport ScrollToTop from \"react-scroll-to-top\";\nimport { AIBrushApi } from \"../client\";\nimport { CreateImageInput, Image, StatusEnum, Boost } from \"../client/api\";\nimport { ImageThumbnail } from \"../components/ImageThumbnail\";\nimport { ImagePrompt, defaultArgs } from \"../components/ImagePrompt\";\nimport { BoostWidget } from \"../components/BoostWidget\";\nimport {\n    createEncodedThumbnail,\n    encodedImageToBlob,\n    uploadBlob,\n} from \"../lib/imageutil\";\n\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport { ImagePopup } from \"../components/ImagePopup\";\nimport { BusyModal } from \"../components/BusyModal\";\nimport { PendingImagesThumbnail } from \"../components/PendingImagesThumbnail\";\nimport { PendingImages } from \"../components/PendingImages\";\nimport {\n    ApiSocket,\n    NOTIFICATION_BOOST_UPDATED,\n    NOTIFICATION_IMAGE_DELETED,\n    NOTIFICATION_IMAGE_UPDATED,\n} from \"../lib/apisocket\";\n\ninterface Props {\n    api: AIBrushApi;\n    apiSocket: ApiSocket;\n    assetsUrl: string;\n}\n\nexport const SavedImagesPage: FC<Props> = ({ api, apiSocket, assetsUrl }) => {\n    const [creating, setCreating] = useState(false);\n    const [selectedImage, setSelectedImage] = useState<Image | null>(null);\n    const [parentImage, setParentImage] = useState<Image | null>(null);\n\n    const [showPendingImages, setShowPendingImages] = useState(false);\n\n    const [images, setImages] = useState<Array<Image>>([]);\n    const [err, setErr] = useState<string | null>(null);\n    const [hasMore, setHasMore] = useState<boolean>(true);\n    const [search, setSearch] = useState<string>(\"\");\n    const [searchDebounce, setSearchDebounce] = useState<string>(\"\");\n\n    const [bulkDeleteSelecting, setBulkDeleteSelecting] = useState(false);\n    const [bulkDeleting, setBulkDeleting] = useState(false);\n    const [bulkDeleteIds, setBulkDeleteIds] = useState<{\n        [key: string]: boolean;\n    }>({});\n\n    const [boost, setBoost] = useState<Boost | null>(null);\n    const [censorNSFW, setCensorNSFW] = useState(true);\n\n    const { id } = useParams<{ id?: string }>();\n    const history = useHistory();\n\n    useEffect(() => {\n        let handle = setTimeout(() => {\n            setSearch(searchDebounce);\n        }, 500);\n        return () => {\n            clearTimeout(handle);\n        };\n    }, [searchDebounce]);\n\n    useEffect(() => {\n        if (id) {\n            // check if the image is already loaded\n            const image = images.find((image) => image.id === id);\n            if (image) {\n                setSelectedImage(image);\n            }\n            // refresh\n            api.getImage(id).then((image) => {\n                setSelectedImage(image.data);\n            });\n        } else {\n            setSelectedImage(null);\n        }\n    }, [id]);\n\n    const onSubmit = async (input: CreateImageInput) => {\n        setCreating(true);\n        setParentImage(null);\n        setErr(null);\n        window.scrollTo(0, 0);\n        try {\n            await api.createImage(input);\n        } catch (e: any) {\n            console.error(e);\n            setErr(\"Error creating image\");\n        } finally {\n            setCreating(false);\n        }\n    };\n\n    const onEditNewImage = async (input: CreateImageInput) => {\n        setCreating(true);\n        setParentImage(null);\n        setErr(null);\n        window.scrollTo(0, 0);\n        try {\n            const encodedImage = input.encoded_image!;\n            const encodedThumbnail = await createEncodedThumbnail(encodedImage);\n            const newImages = await api.createImage({\n                ...input,\n                encoded_image: undefined,\n            });\n            if (newImages.data.images) {\n                const image = newImages.data.images![0];\n                const uploadUrls = await api.getImageUploadUrls(image.id);\n                // convert base64 encoded image to binary to upload as image/png with axios\n                const blob = encodedImageToBlob(encodedImage);\n                const thumbnailBlob = encodedImageToBlob(encodedThumbnail);\n                const imagePromise = uploadBlob(\n                    uploadUrls.data.image_url!,\n                    blob\n                );\n                const thumbnailPromise = uploadBlob(\n                    uploadUrls.data.thumbnail_url!,\n                    thumbnailBlob\n                );\n                await Promise.all([imagePromise, thumbnailPromise]);\n\n                history.push(`/image-editor/${image.id}`);\n            }\n        } catch (e: any) {\n            console.error(e);\n            setErr(\"Error creating image\");\n        } finally {\n            setCreating(false);\n        }\n    };\n\n    const onNSFW = (image: Image, nsfw: boolean) => {\n        api.updateImage(image.id, { nsfw }).then((res) => {\n            setImages((images) => {\n                return images.map((i) => {\n                    if (i.id === image.id) {\n                        return res.data;\n                    }\n                    return i;\n                });\n            });\n            setSelectedImage(res.data);\n        });\n    };\n\n    useEffect(() => {\n        if (!api) {\n            return;\n        }\n        const loadImages = async () => {\n            console.log(\"Initial load images\");\n            // clear error\n            setErr(null);\n            setHasMore(true);\n            try {\n                const cursor = moment().add(1, \"minutes\").valueOf();\n                const resp = await api.listImages(cursor, search, 100, \"desc\");\n                if (resp.data.images) {\n                    console.log(\"Initial load images\", resp.data.images.length);\n                    setImages(\n                        resp.data.images\n                            .filter((image) => !image.deleted_at)\n                            .sort(sortImages)\n                    );\n                }\n                return 0;\n            } catch (err) {\n                setErr(\"Could not load images\");\n                console.error(err);\n            }\n        };\n        loadImages();\n    }, [api, search]);\n\n    useEffect(() => {\n        if (!api) {\n            return;\n        }\n\n        const pollImages = async (images: Array<Image>) => {\n            // clear error\n            setErr(null);\n            // set cursor to max updated_at from images\n            const cursor = images.reduce((max, image) => {\n                return Math.max(max, image.updated_at);\n            }, 0);\n\n            try {\n                const resp = await api.listImages(\n                    cursor + 1,\n                    search,\n                    100,\n                    \"asc\"\n                );\n                if (resp.data.images) {\n                    let latestCursor = cursor;\n                    for (let image of resp.data.images) {\n                        if (image.updated_at > latestCursor) {\n                            latestCursor = image.updated_at;\n                        }\n                    }\n\n                    // split resp.data.images into \"new\" and \"updated\" lists\n                    // image is \"new\" if it's not in images\n                    const newImages = resp.data.images.filter((image) => {\n                        return images.findIndex((i) => i.id === image.id) < 0;\n                    });\n                    const updatedImages = resp.data.images.filter((image) => {\n                        return images.findIndex((i) => i.id === image.id) >= 0;\n                    });\n                    setImages((images) => {\n                        const deletedIds: { [key: string]: boolean } = {};\n                        for (let image of newImages) {\n                            if (image.deleted_at) {\n                                deletedIds[image.id] = true;\n                                console.log(\n                                    `Deleting image ${image.id} from list`\n                                );\n                            }\n                        }\n                        for (let image of updatedImages) {\n                            if (image.deleted_at) {\n                                deletedIds[image.id] = true;\n                                console.log(\n                                    `Deleting image ${image.id} from list`\n                                );\n                            }\n                        }\n                        images = images.filter(\n                            (image) => !deletedIds[image.id]\n                        );\n                        return [\n                            ...images.map((image) => {\n                                const updatedImage = updatedImages.find(\n                                    (i) => i.id === image.id\n                                );\n                                if (updatedImage) {\n                                    return updatedImage;\n                                }\n                                return image;\n                            }),\n                            ...newImages.filter((image) => !image.deleted_at),\n                        ].sort(sortImages);\n                    });\n                }\n                return images;\n            } catch (err) {\n                setErr(\"Could not load images\");\n                console.error(err);\n            }\n        };\n\n        // polling is now a fallback for when the websocket connection fails\n        const timerHandle = setInterval(() => {\n            pollImages(images);\n        }, 60 * 1000);\n        return () => {\n            clearInterval(timerHandle);\n        };\n    }, [api, images, search]);\n\n    useEffect(() => {\n        // de-duplicate images by id\n        // first check if there are any duplicates\n        // I know, I should figure out where the duplicates are coming from,\n        // but I'm lazy.\n        const ids = images.map((image) => image.id);\n        const uniqueIds = new Set(ids);\n        if (ids.length !== uniqueIds.size) {\n            setImages((images) => {\n                // there are duplicates\n                const uniqueImages = images.filter((image, index) => {\n                    return ids.indexOf(image.id) === index;\n                });\n                return uniqueImages.sort(sortImages);\n            });\n        }\n    }, [images]);\n\n    useEffect(() => {\n        apiSocket.onMessage(async (message) => {\n            const payload = JSON.parse(message);\n            if (\n                payload.type === NOTIFICATION_IMAGE_UPDATED ||\n                payload.type === NOTIFICATION_IMAGE_DELETED\n            ) {\n                const updatedImage = await api.getImage(payload.id);\n                if (updatedImage.data.temporary) {\n                    return;\n                }\n                setImages((images) => {\n                    const index = images.findIndex(\n                        (image) => image.id === updatedImage.data.id\n                    );\n                    let updatedImages = images;\n                    if (index >= 0) {\n                        updatedImages = images.map((image) => {\n                            if (image.id === updatedImage.data.id) {\n                                return updatedImage.data;\n                            }\n                            return image;\n                        });\n                    } else {\n                        updatedImages = [...images, updatedImage.data];\n                    }\n                    return updatedImages.sort(sortImages);\n                });\n            } else if (payload.type === NOTIFICATION_BOOST_UPDATED) {\n                const updatedBoost = await api.getBoost();\n                setBoost(updatedBoost.data);\n            }\n        });\n        return () => {\n            apiSocket.onMessage(undefined);\n        };\n    }, [apiSocket]);\n\n    useEffect(() => {\n        const refreshBoost = async () => {\n            const updatedBoost = await api.getBoost();\n            setBoost(updatedBoost.data);\n        };\n        refreshBoost();\n        const interval = setInterval(refreshBoost, 60 * 1000);\n        return () => {\n            clearInterval(interval);\n        };\n    }, [api]);\n\n    const isPendingOrProcessing = (image: Image) => {\n        return (\n            image.status === StatusEnum.Pending ||\n            image.status === StatusEnum.Processing\n        );\n    };\n\n    const sortImages = (a: Image, b: Image) => {\n        // pending and processing images always come first\n        if (isPendingOrProcessing(a) && !isPendingOrProcessing(b)) {\n            return -1;\n        } else if (!isPendingOrProcessing(a) && isPendingOrProcessing(b)) {\n            return 1;\n        }\n        // if the parent is the same, sort by score descending\n        // otherwise, sort by updated_at\n        if (\n            a.parent === b.parent &&\n            a.params.prompt == b.params.prompt &&\n            a.status !== StatusEnum.Pending &&\n            b.status !== StatusEnum.Pending\n        ) {\n            // if the score is the same, sort by updated_at\n            let aScore = a.score;\n            let bScore = b.score;\n            // working around a bug where negative score was assigned\n            // for an empty negative prompt.\n            if (a.params.prompt!.trim() !== \"\") {\n                aScore = aScore - a.negative_score;\n            }\n            if (b.params.prompt!.trim() !== \"\") {\n                bScore = bScore - b.negative_score;\n            }\n            if (aScore == bScore) {\n                return b.updated_at - a.updated_at;\n            }\n            return bScore - aScore;\n        }\n\n        return b.updated_at - a.updated_at;\n    };\n\n    const onLoadMore = async () => {\n        // get the minimum updated_at from images\n        let minUpdatedAt = moment().valueOf();\n        images.forEach((image) => {\n            minUpdatedAt = Math.min(minUpdatedAt, image.updated_at);\n        });\n        // load images in descending order from updated_at\n        const resp = await api.listImages(\n            minUpdatedAt - 1,\n            search,\n            100,\n            \"desc\"\n        );\n        if (resp.data.images && resp.data.images.length > 0) {\n            // combine images with new images and sort by updated_at descending\n            setImages((images) =>\n                [...images, ...(resp.data.images || [])]\n                    .filter((image) => !image.deleted_at)\n                    .sort(sortImages)\n            );\n        } else {\n            setHasMore(false);\n        }\n    };\n\n    const onDelete = async (image: Image) => {\n        try {\n            await api.deleteImage(image.id);\n        } catch (e) {\n            console.error(e);\n            setErr(\"Error deleting image\");\n        }\n    };\n\n    const onFork = async (image: Image) => {\n        history.push({\n            pathname: \"/\",\n            search: `?parent=${image.id}`,\n        });\n    };\n\n    const onEdit = async (image: Image) => {\n        history.push(`/image-editor/${image.id}`);\n    };\n\n    const onThumbnailClicked = (image: Image) => {\n        // setSelectedImage(image);\n        if (bulkDeleteSelecting) {\n            setBulkDeleteIds({\n                ...bulkDeleteIds,\n                [image.id]: !bulkDeleteIds[image.id],\n            });\n        } else {\n            history.push(`/saved/${image.id}`);\n        }\n    };\n\n    const handleCancelFork = () => {\n        setParentImage(null);\n        window.scrollTo(0, 0);\n    };\n\n    const onConfirmBulkDelete = async () => {\n        try {\n            setBulkDeleting(true);\n            // await api.deleteImages(Object.keys(bulkDeleteIds));\n            const promises = Object.keys(bulkDeleteIds).map((id) => {\n                return api.deleteImage(id);\n            });\n            await Promise.all(promises);\n            setImages((images) => {\n                return images.filter((image) => !bulkDeleteIds[image.id]);\n            });\n            setBulkDeleteIds({});\n            setBulkDeleteSelecting(false);\n        } catch (e) {\n            console.error(e);\n            setErr(\"Error deleting images\");\n        } finally {\n            setBulkDeleting(false);\n        }\n    };\n\n    const completedOrSavedImages = images.filter((image) => {\n        return (\n            !image.deleted_at &&\n            (image.status === StatusEnum.Completed ||\n                image.status === StatusEnum.Saved)\n        );\n    });\n\n    const pendingOrProcessingImages = images.filter(\n        (image) =>\n            !image.deleted_at &&\n            (image.status === StatusEnum.Pending ||\n                image.status === StatusEnum.Processing)\n    );\n\n    const pendingImages = pendingOrProcessingImages.filter(\n        (image) => image.status === StatusEnum.Pending\n    );\n\n    const processingImages = pendingOrProcessingImages.filter(\n        (image) => image.status === StatusEnum.Processing\n    );\n\n    return (\n        <>\n            <h1 style={{ fontSize: \"40px\", textAlign: \"left\" }}>\n                Welcome to AiBrush - Saved\n            </h1>\n\n            <div\n                className=\"saved-images\"\n                style={{ marginTop: \"48px\", paddingBottom: \"48px\" }}\n            >\n                <div style={{ textAlign: \"left\" }}>\n                    <div\n                        className=\"input-group\"\n                        style={{ marginBottom: \"16px\" }}\n                    >\n                        <input\n                            style={{}}\n                            value={searchDebounce}\n                            type=\"search\"\n                            className=\"form-control image-search\"\n                            placeholder=\"Search...\"\n                            onChange={(e) => setSearchDebounce(e.target.value)}\n                        />\n\n                        <div\n                            style={{\n                                float: \"right\",\n                            }}\n                        >\n                            {!bulkDeleteSelecting && (\n                                <>\n                                    <button\n                                        style={{ display: \"inline\" }}\n                                        className=\"btn btn-primary image-popup-button\"\n                                        onClick={() =>\n                                            setCensorNSFW(!censorNSFW)\n                                        }\n                                    >\n                                        {!censorNSFW && (\n                                            <i className=\"fas fa-eye\"></i>\n                                        )}\n                                        {censorNSFW && (\n                                            <i className=\"fas fa-eye-slash\"></i>\n                                        )}\n                                    </button>\n                                    <Dropdown style={{ display: \"inline\", marginLeft: \"8px\" }}>\n                                        <Dropdown.Toggle variant=\"danger\">\n                                            <i className=\"fas fa-trash\"></i>\n                                        </Dropdown.Toggle>\n\n                                        <Dropdown.Menu>\n                                            <Dropdown.Item\n                                                onClick={() =>\n                                                    setBulkDeleteSelecting(true)\n                                                }\n                                            >\n                                                Bulk Delete\n                                            </Dropdown.Item>\n                                            <Dropdown.Item\n                                                onClick={() =>\n                                                    history.push(\n                                                        \"/deleted-images\"\n                                                    )\n                                                }\n                                            >\n                                                View Deleted Images\n                                            </Dropdown.Item>\n                                        </Dropdown.Menu>\n                                    </Dropdown>\n                                    \n                                </>\n                            )}\n                            {bulkDeleteSelecting && (\n                                <>\n                                    <button\n                                        className=\"btn btn-primary image-popup-button\"\n                                        onClick={() => {\n                                            setBulkDeleteSelecting(false);\n                                            setBulkDeleteIds({});\n                                        }}\n                                    >\n                                        Cancel\n                                    </button>\n                                    <button\n                                        style={{ marginLeft: \"8px\" }}\n                                        className=\"btn image-popup-delete-button\"\n                                        onClick={() => {\n                                            onConfirmBulkDelete();\n                                        }}\n                                    >\n                                        Delete\n                                    </button>\n                                </>\n                            )}\n                        </div>\n                    </div>\n                </div>\n                <InfiniteScroll\n                    dataLength={images.length}\n                    next={onLoadMore}\n                    hasMore={hasMore}\n                    loader={\n                        <>\n                            <hr />\n                            <h4>Loading...</h4>\n                        </>\n                    }\n                >\n                    {pendingOrProcessingImages.length > 0 && (\n                        <PendingImagesThumbnail\n                            pendingCount={pendingImages.length}\n                            processingCount={processingImages.length}\n                            onClick={() => {\n                                setShowPendingImages(true);\n                            }}\n                        />\n                    )}\n                    {completedOrSavedImages.map((image) => (\n                        <ImageThumbnail\n                            key={image.id}\n                            image={image}\n                            assetsUrl={assetsUrl}\n                            onClick={onThumbnailClicked}\n                            bulkDelete={\n                                bulkDeleteSelecting && bulkDeleteIds[image.id]\n                            }\n                            censorNSFW={censorNSFW}\n                        />\n                    ))}\n                </InfiniteScroll>\n            </div>\n\n            {selectedImage && (\n                <ImagePopup\n                    assetsUrl={assetsUrl}\n                    image={selectedImage}\n                    onClose={() => history.push(\"/saved\")}\n                    onDelete={(image) => {\n                        onDelete(image);\n                        setImages(images.filter((i) => i.id !== image.id));\n                        history.push(\"/saved\");\n                    }}\n                    onFork={(image) => {\n                        onFork(image);\n                    }}\n                    onEdit={(image) => {\n                        onEdit(image);\n                    }}\n                    onNSFW={onNSFW}\n                    censorNSFW={censorNSFW}\n                />\n            )}\n            <ScrollToTop />\n            <BusyModal show={creating} title=\"Creating images\">\n                <p>Please wait while we create your image.</p>\n            </BusyModal>\n            <BusyModal show={bulkDeleting} title=\"Deleting images\">\n                <p>Please wait while we delete your images.</p>\n            </BusyModal>\n            <PendingImages\n                images={pendingOrProcessingImages}\n                onCancel={() => setShowPendingImages(false)}\n                show={showPendingImages}\n                onDeleteImage={(image) => {\n                    onDelete(image);\n                    setImages(images.filter((i) => i.id !== image.id));\n                }}\n            />\n        </>\n    );\n};\n","import { useEffect, useState, FC } from \"react\";\nimport loadImage from \"blueimp-load-image\";\nimport {\n    splitImage,\n    mergeTiles,\n    SplitResult,\n    ImageUtilWorker,\n} from \"../lib/imageutil\";\nimport * as uuid from \"uuid\";\n\nexport const TestPage: FC = () => {\n    const [originalImage, setOriginalImage] = useState<string | undefined>();\n    const [upscaledImage, setUpscaledImage] = useState<string | undefined>();\n    const [imageWorker, setImageWorker] = useState<\n        ImageUtilWorker | undefined\n    >();\n\n    useEffect(() => {\n        const imageWorker = new ImageUtilWorker();\n        setImageWorker(imageWorker);\n        return () => {\n            imageWorker.destroy();\n        };\n    }, []);\n\n    const imageDataToCanvas = (imageData: ImageData): HTMLCanvasElement => {\n        const canvas = document.createElement(\"canvas\");\n        canvas.width = imageData.width;\n        canvas.height = imageData.height;\n        const ctx = canvas.getContext(\"2d\");\n        if (!ctx) {\n            throw new Error(\"Could not get canvas context\");\n        }\n        ctx.putImageData(imageData, 0, 0);\n        return canvas;\n    };\n\n    const upscaleImageData = (imageData: ImageData): HTMLCanvasElement => {\n        console.log(\"upscaling image data\", imageData.width, imageData.height);\n        const canvas = document.createElement(\"canvas\");\n        canvas.width = imageData.width * 2;\n        canvas.height = imageData.height * 2;\n        const ctx = canvas.getContext(\"2d\");\n        if (!ctx) {\n            throw new Error(\"Could not get canvas context\");\n        }\n        const image = imageDataToCanvas(imageData);\n        ctx.drawImage(image, 0, 0, canvas.width, canvas.height);\n        return canvas;\n    };\n\n    const onImageSelected = async (\n        event: React.ChangeEvent<HTMLInputElement>\n    ) => {\n        if (!imageWorker) {\n            throw new Error(\"Image worker not initialized\");\n        }\n        const files = event.target.files;\n        if (files && files.length > 0) {\n            loadImage(\n                files[0],\n                async (img) => {\n                    const c = img as HTMLCanvasElement;\n                    const originalImage = c.toDataURL(\"image/png\");\n                    setOriginalImage(originalImage);\n\n                    const ctx = c.getContext(\"2d\");\n                    if (ctx) {\n                        const originalImageData = ctx.getImageData(\n                            0,\n                            0,\n                            c.width,\n                            c.height\n                        );\n                        const splitResult = splitImage(originalImageData);\n                        if (!splitResult) {\n                            setUpscaledImage(originalImage);\n                            return;\n                        }\n                        console.log(\"splitResult\", {\n                            numTilesX: splitResult.numTilesX,\n                            numTilesY: splitResult.numTilesY,\n                            tileSize: splitResult.tileSize,\n                        });\n                        splitResult.tileSize *= 2;\n                        splitResult.imageWidth *= 2;\n                        splitResult.imageHeight *= 2;\n                        for (let x = 0; x < splitResult.numTilesX; x++) {\n                            for (let y = 0; y < splitResult.numTilesY; y++) {\n                                const tile = splitResult.tiles[x][y];\n                                const upscaledTile = upscaleImageData(tile);\n                                const upscaledImageData = upscaledTile\n                                .getContext(\"2d\")!\n                                .getImageData(\n                                    0,\n                                    0,\n                                    upscaledTile.width,\n                                    upscaledTile.height\n                                );\n                                const id = uuid.v4();\n                                const feathered =\n                                    await imageWorker.processRequest({\n                                        id,\n                                        alpha: false,\n                                        feather: true,\n                                        width: splitResult.imageWidth,\n                                        height: splitResult.imageHeight,\n                                        pixels: upscaledImageData.data,\n                                        selectionOverlay: {\n                                            x:\n                                                x *\n                                                (splitResult.tileSize - 64),\n                                            y:\n                                                y *\n                                                (splitResult.tileSize - 64),\n                                            width: upscaledTile.width,\n                                            height: upscaledTile.height,\n                                        },\n                                        upscale: true,\n                                        featherWidth: 64,\n                                    });\n\n                                splitResult.tiles[x][y] = new ImageData(feathered.pixels, upscaledTile.width, upscaledTile.height)\n                            }\n                        }\n                        const upscaledImageData = mergeTiles(splitResult);\n                        console.log(\n                            \"upscaled image data size\",\n                            upscaledImageData.width,\n                            upscaledImageData.height\n                        );\n                        const upscaledCanvas =\n                            imageDataToCanvas(upscaledImageData);\n                        const upscaledImage =\n                            upscaledCanvas.toDataURL(\"image/png\");\n                        setUpscaledImage(upscaledImage);\n                    }\n                },\n                { canvas: true }\n            );\n        }\n    };\n\n    return (\n        <div>\n            <input type=\"file\" onChange={onImageSelected} />\n            {originalImage && upscaledImage && (\n                <div>\n                    Original:\n                    <br />\n                    <img src={originalImage} />\n                    <br />\n                    Upscaled:\n                    <br />\n                    <img src={upscaledImage} />\n                </div>\n            )}\n        </div>\n    );\n};\n","import React, { useState, useEffect } from \"react\";\nimport * as axios from \"axios\";\nimport { BrowserRouter, Switch, Route, Link } from \"react-router-dom\";\nimport \"./App.css\";\nimport \"./bootstrap.min.css\";\nimport { AIBrushApi, LoginResult, FeatureList } from \"./client/api\";\nimport { LocalImagesStore } from \"./lib/localImagesStore\";\nimport { getConfig } from \"./config\";\nimport { Login } from \"./pages/Login\";\nimport { TokenRefresher } from \"./components/TokenRefresher\";\nimport { Healthchecker } from \"./components/Healthchecker\";\nimport { Admin } from \"./pages/admin/Admin\";\nimport { ImageEditor } from \"./pages/image-editor/ImageEditor\";\nimport { DeletedImages } from \"./pages/DeletedImages\";\n\n// V2 UI\nimport { Homepage } from \"./pages/Homepage\";\nimport { ApiSocket } from \"./lib/apisocket\";\nimport { DiscordLogin } from \"./pages/DiscordLogin\";\nimport { LocalDeletedImages } from \"./pages/LocalDeletedImages\";\nimport { SavedImagesPage } from \"./pages/SavedImagesPage\";\nimport { TestPage } from \"./pages/TestPage\";\n\nconst config = getConfig();\nconst httpClient = axios.default.create();\nconst client = new AIBrushApi(\n    undefined,\n    localStorage.getItem(\"apiUrl\") || config.apiUrl,\n    httpClient\n);\nconst apiSocket: ApiSocket = new ApiSocket();\nconst localImages = new LocalImagesStore();\n\nfunction updateHttpClient(loginResult: LoginResult) {\n    if (loginResult.accessToken) {\n        httpClient.defaults.headers.common[\n            \"Authorization\"\n        ] = `Bearer ${loginResult.accessToken}`;\n    }\n}\n\nfunction App() {\n    const [credentials, setCredentials] = useState<LoginResult | null>(null);\n    const [assetsUrl, setAssetsUrl] = useState<string>(\"/api/images\");\n    const [isAdmin, setIsAdmin] = useState<boolean>(false);\n    const [features, setFeatures] = useState<FeatureList | null>(null);\n\n    const onLogout = () => {\n        setCredentials(null);\n        localStorage.removeItem(\"credentials\");\n        httpClient.defaults.headers.common[\"Authorization\"] = undefined;\n    };\n\n    const init = async () => {\n        console.log(\"App.init\");\n        await localImages.init();\n        client\n            .getAssetsUrl()\n            .then((result) => setAssetsUrl(result.data.assets_url));\n        client.getFeatures().then((result) => setFeatures(result.data));\n        const storedCredentials = localStorage.getItem(\"credentials\");\n        if (storedCredentials) {\n            // attempt to refresh token\n            try {\n                const credentials = JSON.parse(\n                    storedCredentials\n                ) as LoginResult;\n                updateHttpClient(credentials);\n                const result = await client.refresh({\n                    refreshToken: credentials.refreshToken,\n                });\n                setCredentials(result.data);\n\n                // save to storage\n                localStorage.setItem(\n                    \"credentials\",\n                    JSON.stringify(result.data)\n                );\n                updateHttpClient(result.data);\n                const isAdmin = await client.isAdmin();\n                setIsAdmin(!!isAdmin.data.is_admin);\n                apiSocket.updateToken(result.data.accessToken!);\n                apiSocket.connect();\n            } catch (e) {\n                console.log(e);\n                localStorage.removeItem(\"credentials\");\n            }\n        }\n    };\n\n    const onLogin = async (credentials: LoginResult) => {\n        localStorage.setItem(\"credentials\", JSON.stringify(credentials));\n        setCredentials(credentials);\n        updateHttpClient(credentials);\n        apiSocket.updateToken(credentials.accessToken!);\n        apiSocket.connect();\n    };\n\n    const onCredentialsExpired = () => {\n        onLogout();\n    };\n\n    useEffect(() => {\n        init();\n    }, []);\n\n    return (\n        <div className=\"App\">\n            <TokenRefresher\n                api={client}\n                credentials={credentials as LoginResult}\n                onCredentialsRefreshed={onLogin}\n                onCredentialsExpired={onCredentialsExpired}\n            />\n            <Healthchecker api={client} />\n\n            <BrowserRouter>\n                {/* if credentials are not set, show Login component */}\n                {!credentials && (\n                    <Switch>\n                        <Route path=\"/\" exact={true}>\n                            <Login client={client} onLogin={onLogin} />\n                        </Route>\n                        <Route path=\"/discord-login\">\n                            <DiscordLogin client={client} onLogin={onLogin} />\n                        </Route>\n                        {/* fallback route is login page */}\n                        <Route path=\"*\">\n                            <Login client={client} onLogin={onLogin} />\n                        </Route>\n                    </Switch>\n                )}\n                {credentials && (\n                    <div className=\"container\">\n                        <div className=\"row\">\n                            <div className=\"col-lg-12\">\n                                {/* if credentials are set, show a bootstrap logout button a the far top right corner div */}\n                                {credentials && (\n                                    <>\n                                        <button\n                                            className=\"btn btn-primary top-button\"\n                                            onClick={() => onLogout()}\n                                        >\n                                            {/* font awesome logout icon */}\n                                            <i className=\"fas fa-sign-out-alt\"></i>\n                                        </button>\n                                        {/* saved images */}\n                                        <Link\n                                            className=\"btn btn-primary top-button\"\n                                            to=\"/saved\"\n                                        >\n                                            {/* font awesome save icon */}\n                                            <i className=\"fas fa-save\"></i>\n                                        </Link>\n                                        {/* home button */}\n                                        <Link\n                                            className=\"btn btn-primary top-button\"\n                                            to=\"/\"\n                                        >\n                                            {/* font awesome home icon */}\n                                            <i className=\"fas fa-home\"></i>\n                                        </Link>\n                                        {/* Link to discord */}\n                                        <a\n                                            className=\"btn btn-primary top-button\"\n                                            href=\"https://discord.gg/VPYyAJBkhC\"\n                                            target=\"_blank\"\n                                        >\n                                            {/* font awesome discord icon */}\n                                            <i className=\"fab fa-discord\"></i>\n                                        </a>\n                                        <Link\n                                            className=\"btn top-button pulse\"\n                                            to=\"/\"\n                                            style={{\n                                                width: \"47px\",\n                                            }}\n                                            onClick={() =>\n                                                alert(\"Coming soon!\")\n                                            }\n                                        >\n                                            {/* font awesome bolt icon */}\n                                            <i className=\"fas fa-bolt\"></i>\n                                        </Link>\n                                    </>\n                                )}\n                            </div>\n                        </div>\n\n                        {/* if credentials are set, show the rest of the app */}\n\n                        <Switch>\n                            <Route path=\"/\" exact={true}>\n                                {/* <MainMenu isAdmin={isAdmin} /> */}\n                                <Homepage\n                                    api={client}\n                                    apiSocket={apiSocket}\n                                    assetsUrl={assetsUrl}\n                                    localImages={localImages}\n                                />\n                            </Route>\n                            <Route path=\"/images/:id\">\n                                <Homepage\n                                    api={client}\n                                    apiSocket={apiSocket}\n                                    assetsUrl={assetsUrl}\n                                    localImages={localImages}\n                                />\n                            </Route>\n                            <Route path=\"/saved\" exact={true}>\n                                {/* <MainMenu isAdmin={isAdmin} /> */}\n                                <SavedImagesPage\n                                    api={client}\n                                    apiSocket={apiSocket}\n                                    assetsUrl={assetsUrl}\n                                />\n                            </Route>\n                            <Route path=\"/saved/:id\" exact={true}>\n                                {/* <MainMenu isAdmin={isAdmin} /> */}\n                                <SavedImagesPage\n                                    api={client}\n                                    apiSocket={apiSocket}\n                                    assetsUrl={assetsUrl}\n                                />\n                            </Route>\n                            <Route path=\"/image-editor/:id\">\n                                <ImageEditor\n                                    api={client}\n                                    apisocket={apiSocket}\n                                    assetsUrl={assetsUrl}\n                                    localImages={localImages}\n                                />\n                            </Route>\n                            <Route path=\"/deleted-images\">\n                                <DeletedImages\n                                    api={client}\n                                    assetsUrl={assetsUrl}\n                                />\n                            </Route>\n                            <Route path=\"/local-deleted-images\">\n                                <LocalDeletedImages\n                                    localImages={localImages}\n                                />\n                            </Route>\n                            <Route path=\"/testpage\">\n                                <TestPage />\n                            </Route>\n                            {isAdmin && (\n                                <>\n                                    <Route path=\"/admin\">\n                                        <Admin api={client} />\n                                    </Route>\n                                </>\n                            )}\n                        </Switch>\n                        <div\n                            // style={{ marginTop: \"100px\", padding: \"50px\" }}\n\n                            // use position:fixed to make the footer stick to the bottom of the page\n                            style={{\n                                position: \"fixed\",\n                                bottom: \"0\",\n                                left: \"0\",\n                                width: \"100%\",\n                                height: \"50px\",\n                                paddingTop: \"16px\",\n                                backgroundColor: \"#000000\",\n                            }}\n                        >\n                            {/* show external popout pages to terms and privacy policy, if they are present in the features */}\n                            {features && features.privacy_uri && (\n                                <a href={features.privacy_uri} target=\"_blank\">\n                                    Privacy Policy\n                                </a>\n                            )}\n                            {features && features.terms_uri && (\n                                <a\n                                    href={features.terms_uri}\n                                    target=\"_blank\"\n                                    style={{ marginLeft: \"20px\" }}\n                                >\n                                    Terms of Service\n                                </a>\n                            )}\n                            {/* link to mail to admin@aibrush.art */}\n                            <a\n                                href=\"mailto:admin@aibrush.art\"\n                                style={{ marginLeft: \"20px\" }}\n                            >\n                                Contact\n                            </a>\n                            <span style={{ float: \"right\", marginRight: \"50px\" }}>\n                                Powered by the{\" \"}\n                                <a\n                                    href=\"https://stablehorde.net/\"\n                                    target=\"_blank\"\n                                >\n                                    Stable Horde\n                                </a>\n                            </span>\n                        </div>\n                    </div>\n                )}\n            </BrowserRouter>\n        </div>\n    );\n}\n\nexport default App;\n","export interface Config {\n    apiUrl: string;\n}\n\nexport function getConfig(): Config {\n    // if (process.env.REACT_APP_ENV === \"prod\") {\n    //     return {\n    //         apiUrl: \"https://aibrush.ngrok.io\"\n    //     };\n    // } else if (process.env.REACT_APP_ENV === \"alt\") {\n    //     return {\n    //         apiUrl: \"\"\n    //     };\n    // } else {\n    //     return {\n    //         apiUrl: \"http://localhost:3000\"\n    //     };\n    // }\n    return {\n        apiUrl: \"\"\n    };\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","\nexport const NOTIFICATION_IMAGE_UPDATED = \"image_updated\";\nexport const NOTIFICATION_IMAGE_DELETED = \"image_deleted\";\nexport const NOTIFICATION_PENDING_IMAGE = \"pending_image\";\nexport const NOTIFICATION_BOOST_UPDATED = \"boost_updated\";\n\nexport class ApiSocket {\n    private client?: WebSocket;\n    private accessToken?: string\n    private messageListener?: (message: string) => void;\n\n    updateToken(accessToken: string) {\n        this.accessToken = accessToken;\n    }\n\n    onMessage(listener?: (message: string) => void) {\n        this.messageListener = listener;\n    }\n\n    connect() {\n        // if (!this.accessToken) {\n        //     throw new Error(\"unauthenticated\");\n        // }\n        // if (this.client) {\n        //     // will reconnect in one second automatically\n        //     // this is called every time the auth refreshes\n        //     this.client.close();\n        //     return;\n        // }\n        // let host = window.location.host;\n        // let protocol = \"wss\";\n        // if (host.includes(\"localhost\")) {\n        //   host = \"localhost:3000\";\n        //   protocol = \"ws\";\n        // }\n        // this.client = new WebSocket(`${protocol}://${host}`);\n        // this.client.onerror = err => console.error(err);\n        // this.client.onopen = () => {\n        //     console.log(\"websocket connected\");\n        //     this.client!.send(this.accessToken!);\n        // }\n        // this.client.onmessage = evt => {\n        //     console.log(\"server push\", evt.data);\n        //     if (this.messageListener) {\n        //         this.messageListener(evt.data as string);\n        //     }\n        // }\n        // this.client.onclose = () => {\n        //   console.log(\"websocket closed\");\n        //   this.client = undefined;\n        //   setTimeout(() => this.connect(), 1000);\n        // }\n    }\n}\n","import React, { FC, useEffect, useState } from \"react\";\nimport moment from \"moment\";\nimport { Image, StatusEnum } from \"../client/api\";\nimport { LocalImage } from \"../lib/localImagesStore\";\n\ninterface Props {\n    assetsUrl: string;\n    image: LocalImage;\n    censorNSFW: boolean;\n    bulkDelete?: boolean;\n    onClick?: (image: Image) => void;\n}\n\nexport const ImageThumbnail: FC<Props> = ({ assetsUrl, image, censorNSFW, bulkDelete, onClick }) => {\n    const src = `${assetsUrl}/${image.id}.thumbnail.png?updated_at=${image.updated_at}`;\n    const [retry, setRetry] = useState(\"\");\n\n    useEffect(() => {\n        // This is to help deal with eventual consistency from S3.\n        // if image.updated_at (unix timestamp in milliseconds) is less than a minute ago, try to reload the image\n        if (moment().diff(moment(image.updated_at), \"minutes\") < 1) {\n            setRetry(\"\");\n            const t = setTimeout(() => {\n                setRetry(\"&retry\")\n            }, 3000);\n            return () => clearTimeout(t);\n        }\n    }, [image.id, image.updated_at])\n\n    let label = image.label;\n    if (image.label === \"\") {\n        label = image.params.prompt || \"\";\n    }\n    \n    let className = \"image-thumbnail\";\n    if (bulkDelete) {\n        className += \" bulk-delete\";\n    }\n\n    let backgroundImage = `url(${src}${retry}), url(/images/default.png)`;\n    if (image.imageData) {\n        backgroundImage = `url(${image.imageData}), url(/images/default.png)`;\n    }\n\n    return (\n        <div\n            className={className}\n            style={{\n                backgroundImage,\n                backgroundRepeat: \"no-repeat\",\n                backgroundPosition: \"center\",\n                filter: (image.nsfw && censorNSFW) ? \"blur(8px)\" : undefined,\n            }}\n            onClick={() => onClick && onClick(image)}\n        >\n            {!bulkDelete && <div className=\"image-thumbnail-label\">\n                {label}\n            </div>}\n\n            {bulkDelete && <div className=\"image-thumbnail-label\">\n                <input type=\"checkbox\" style={{\n                    width: \"20px\",\n                    height: \"20px\",\n                    marginLeft: \"16px\",\n                    marginTop: \"16px\",\n                }} checked readOnly />\n            </div>}\n\n            {image.status === StatusEnum.Pending && <div className=\"image-thumbnail-pending\">\n                <i style={{marginTop: \"20px\"}} className=\"fa fa-hourglass-half\"></i>\n            </div>}\n            {\n                image.status === StatusEnum.Processing && <div className=\"image-thumbnail-pending\">\n                    <i style={{marginTop: \"20px\"}} className=\"fa fa-cog fa-spin\"></i>\n                </div>\n            }\n        </div>\n    );\n};\n","import { FC, useState, FormEvent } from \"react\";\nimport { Form, FormGroup, FormControl, FormText, FormCheck } from \"react-bootstrap\";\n\ninterface Props {\n    seed: string;\n    setSeed: (seed: string) => void;\n}\n\nexport const SeedInput: FC<Props> = ({seed, setSeed}) => {\n    const [useCustomSeed, setUseCustomSeed] = useState(false);\n\n    const onChangeCustomSeed = () => {\n        setUseCustomSeed(!useCustomSeed);\n        if (useCustomSeed) {\n            setSeed(\"\");\n        } else {\n            // set seed to a random number\n            setSeed(Math.floor(Math.random() * 1000000000).toString());\n        }\n    };\n\n    return (\n        <Form>\n            <FormGroup>\n                <FormCheck \n                    type=\"checkbox\"\n                    label=\"Use Custom Seed\"\n                    checked={useCustomSeed}\n                    onChange={(e) => onChangeCustomSeed()}\n                />\n            </FormGroup>\n\n            {useCustomSeed && (\n                <FormGroup>\n                    <FormControl\n                        type=\"text\"\n                        // value={seed}\n                        // onChange={(e) => setSeed(e.target.value)}\n                        placeholder=\"Enter seed\"\n                        value={seed}\n                        onChange={(e: any) => setSeed(e.target.value)}\n                    />\n                </FormGroup> \n            )}\n        </Form>\n    );\n};\n","import { FC, useEffect, useState } from \"react\";\nimport { ListGroup } from \"react-bootstrap\";\nimport { StableDiffusionModel } from \"../client\";\n\ninterface Props {\n    models: StableDiffusionModel[];\n    onSelectModel: (model: StableDiffusionModel) => void;\n    selectedModel: string;\n}\n\nexport const ModelList: FC<Props> = ({ models, onSelectModel, selectedModel }) => {\n    const [maxHeight, setMaxHeight] = useState(window.innerWidth < 576 ? window.innerHeight * 0.2 : window.innerHeight * 0.7); // Set maxHeight to 80% of the viewport height\n\n    useEffect(() => {\n        const handleResize = () => {\n            let maxHeight = window.innerHeight * 0.7;\n            if (window.innerWidth < 576) {\n                maxHeight = window.innerHeight * 0.2;\n            }\n            setMaxHeight(maxHeight); // Update maxHeight based on the current viewport height\n        };\n\n        window.addEventListener(\"resize\", handleResize);\n        return () => {\n            window.removeEventListener(\"resize\", handleResize);\n        };\n    }, []);\n\n    return (\n        <ListGroup\n            style={{\n                maxHeight: `${maxHeight}px`,\n                overflowY: \"auto\",\n            }}\n        >\n            {models.map((model) => (\n                <ListGroup.Item\n                    key={model.name}\n                    active={selectedModel === model.name}\n                    onClick={() => onSelectModel(model)}\n                    style={{\n                        cursor: \"pointer\",\n                    }}\n                >\n                    {model.name}\n                </ListGroup.Item>\n            ))}\n        </ListGroup>\n    );\n};\n","import { useState, useEffect } from \"react\";\n\nexport class SimpleCache {\n    private storage: Storage;\n\n    constructor() {\n        this.storage = window.localStorage;\n    }\n\n    setItem(key: string, value: any, ttl = 60 * 60) {\n        const item: {\n            value: any;\n            expiry: number;\n        } = {\n            value,\n            expiry: Date.now() + ttl * 1000,\n        };\n        this.storage.setItem(key, JSON.stringify(item));\n    }\n\n    getItem(key: string): any {\n        try {\n            const itemStr = this.storage.getItem(key);\n            if (!itemStr) {\n                return null;\n            }\n    \n            const item: {\n                value: any;\n                expiry: number;\n            } = JSON.parse(itemStr);\n            if (Date.now() > item.expiry) {\n                this.storage.removeItem(key);\n                return null;\n            }\n            return item.value;\n        } catch (error) {\n            console.error(error);\n            return null;\n        }\n    }\n\n    removeItem(key: string) {\n        this.storage.removeItem(key);\n    }\n\n    clear() {\n        this.storage.clear();\n    }\n}\n\nconst cache = new SimpleCache();\n\nexport function useCache<T>(key: string, initialValue: T): [T, React.Dispatch<React.SetStateAction<T>>] {\n  const [value, setValue] = useState<T>(() => {\n    const cachedValue = cache.getItem(key);\n    return cachedValue !== null ? cachedValue : initialValue;\n  });\n\n  useEffect(() => {\n    cache.setItem(key, value);\n  }, [key, value]);\n\n  return [value, setValue];\n}\n","import React, { useEffect, useState } from \"react\";\nimport { Button, Modal, Form, ListGroup, Row, Col } from \"react-bootstrap\";\nimport axios from \"axios\";\nimport { AIBrushApi, StableDiffusionModel } from \"../client\";\nimport { ModelList } from \"./ModelList\";\nimport { useCache } from \"../lib/localcache\";\n\nconst httpclient = axios.create();\n\ninterface ModelSelectorProps {\n    api: AIBrushApi;\n    initialSelectedModel: string;\n    onSelectModel: (model: string) => void;\n    onCancel: () => void;\n}\n\nconst ModelSelector: React.FC<ModelSelectorProps> = ({\n    api,\n    initialSelectedModel,\n    onSelectModel,\n    onCancel,\n}) => {\n    const [models, setModels] = useCache<StableDiffusionModel[]>(\"models\", []);\n    const [selectedModel, setSelectedModel] = useState<StableDiffusionModel | null>(null);\n    const [searchTerm, setSearchTerm] = useState(\"\");\n\n    const filteredModels = models.filter((model) =>\n        model.name.toLowerCase().includes(searchTerm.toLowerCase())\n    );\n\n    const handleSelect = () => {\n        console.log(\"Selected model:\", selectedModel);\n        if (selectedModel) {\n            onSelectModel(selectedModel.name);\n        }\n    };\n\n    const handleSearch = (e: React.ChangeEvent<HTMLInputElement>) => {\n        setSearchTerm(e.target.value);\n    };\n\n    const handleModelClick = (model: StableDiffusionModel) => {\n        setSelectedModel(model);\n    };\n\n    useEffect(() => {\n        if (!models || models.length === 0) {\n            api.getModels().then((res) => {\n                console.log(res);\n                setModels(Object.values(res.data));\n                setSelectedModel(\n                    res.data[initialSelectedModel] || Object.values(res.data)[0]\n                );\n            });\n        } else {\n            setSelectedModel(\n                models.find((model) => model.name === initialSelectedModel) ||\n                    models[0]\n            );\n        }\n        \n    }, [api, models]);\n\n    return (\n        <>\n            <Modal show={true} onHide={onCancel} size=\"xl\">\n                <Modal.Header closeButton>\n                    <Modal.Title>Select Model</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <Form.Control\n                        type=\"text\"\n                        placeholder=\"Search\"\n                        value={searchTerm}\n                        onChange={handleSearch}\n                    />\n                    <Row className=\"mt-3\">\n                        <Col sm={4}>\n                            <ModelList\n                                models={filteredModels}\n                                onSelectModel={handleModelClick}\n                                selectedModel={selectedModel?.name || \"\"}\n                            />\n                        </Col>\n                        <Col sm={8}>\n                            {selectedModel && (\n                                <>\n                                    <h5>{selectedModel.name}</h5>\n                                    <p>{selectedModel.description}</p>\n                                    {selectedModel.showcases && selectedModel.showcases.length > 0 && (\n                                        <img\n                                            src={selectedModel.showcases[0]}\n                                            alt=\"Showcase\"\n                                            style={{\n                                                width: \"100%\",\n                                            }}\n                                        />\n                                    )}\n                                </>\n                            )}\n                        </Col>\n                    </Row>\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button variant=\"secondary\" onClick={onCancel}>\n                        Cancel\n                    </Button>\n                    <Button\n                        variant=\"primary\"\n                        onClick={handleSelect}\n                        disabled={!selectedModel}\n                    >\n                        Select\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n        </>\n    );\n};\n\nexport default ModelSelector;\n","import React, { FC, useEffect, useState } from \"react\";\nimport { CreateImageInput, StatusEnum, Image, AIBrushApi } from \"../client\";\nimport {\n    aspectRatios,\n    DEFAULT_ASPECT_RATIO,\n    getClosestAspectRatio,\n    upscale,\n    compareSize,\n    AspectRatio,\n} from \"../lib/aspecRatios\";\nimport loadImage from \"blueimp-load-image\";\nimport { AspectRatioSelector } from \"./AspectRatioSelector\";\nimport { getUpscaleLevel } from \"../lib/upscale\";\nimport { resizeEncodedImage } from \"../lib/imageutil\";\nimport { LocalImage } from \"../lib/localImagesStore\";\nimport { controlnetTypes, supportedModels } from \"../lib/supportedModels\";\nimport { SeedInput } from \"./SeedInput\";\nimport ModelSelector from \"./ModelSelector\";\n\ninterface Props {\n    api: AIBrushApi;\n    parent: LocalImage | null;\n    creating: boolean;\n    assetsUrl: string;\n    onSubmit: (input: CreateImageInput) => void;\n    // go straight to editor without variations\n    onEdit: (input: CreateImageInput) => void;\n    onCancel: () => void;\n}\n\nexport function defaultArgs(): CreateImageInput {\n    return {\n        params: {\n            prompt: \"a painting of a happy corgi wearing sunglasses\",\n            negative_prompt: defaultNegativePrompt,\n            width: 512,\n            height: 512,\n            steps: 20,\n            denoising_strength: 0.75,\n        },\n        label: \"\",\n        encoded_image: \"\",\n        encoded_npy: \"\",\n        encoded_mask: \"\",\n        model: \"Epic Diffusion\",\n        count: 4,\n    };\n}\n\nconst defaultNegativePrompt =\n    \"low quality, distorted, deformed, dull, boring, plain, ugly, noise\";\n\nexport const ImagePrompt: FC<Props> = ({\n    api,\n    parent,\n    creating,\n    assetsUrl,\n    onSubmit,\n    onCancel,\n    onEdit,\n}) => {\n    const [prompt, setPrompt] = useState<string>(\"\");\n    const [negativePrompt, setNegativePrompt] = useState<string>(\n        defaultNegativePrompt\n    );\n    const [count, setCount] = useState<number>(4);\n    const [variationStrength, setVariationStrength] = useState<number>(0.75);\n    const [aspectRatio, setAspectRatio] =\n        useState<number>(DEFAULT_ASPECT_RATIO);\n    const [parentId, setParentId] = useState<string | null>(null);\n    const [advancedView, setAdvancedView] = useState<boolean>(false);\n    const [encodedImage, setEncodedImage] = useState<string>(\"\");\n    const [model, setModel] = useState<string>(\"Epic Diffusion\");\n\n    const [selectingModel, setSelectingModel] = useState<boolean>(false);\n\n    const [controlnetType, setControlnetType] = useState<string | undefined>();\n    const [cfgScale, setCfgScale] = useState<number>(7.5);\n    const [seed, setSeed] = useState<string>(\"\");\n    const defaultAspectRatio = aspectRatios[DEFAULT_ASPECT_RATIO];\n\n    const [aspectRatioDetails, setAspectRatioDetails] = useState<AspectRatio>(\n        aspectRatios[DEFAULT_ASPECT_RATIO]\n    );\n    let [originalWidth, setOriginalWidth] = useState<number>(\n        defaultAspectRatio.width\n    );\n    let [originalHeight, setOriginalHeight] = useState<number>(\n        defaultAspectRatio.height\n    );\n\n    // const aspectRatioDetails = aspectRatios[aspectRatio];\n\n    const resetState = () => {\n        setPrompt(\"\");\n        setNegativePrompt(defaultNegativePrompt);\n        setCount(4);\n        setAdvancedView(false);\n        setParentId(null);\n        setVariationStrength(0.75);\n        setAspectRatio(DEFAULT_ASPECT_RATIO);\n        setAspectRatioDetails(aspectRatios[DEFAULT_ASPECT_RATIO]);\n        setEncodedImage(\"\");\n        setCfgScale(7.5);\n        setSeed(\"\");\n    };\n\n    const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\n        e.preventDefault();\n        const args = defaultArgs();\n        args.params.prompt = prompt || \"\";\n        args.params.negative_prompt = negativePrompt || \"\";\n        args.count = seed ? 1 : count;\n        args.parent = parentId || undefined;\n        args.params.denoising_strength = variationStrength;\n        args.nsfw = true;\n        args.model = model;\n        args.temporary = true;\n        args.params.controlnet_type = controlnetType as any;\n        args.params.cfg_scale = cfgScale;\n        args.params.seed = seed || undefined;\n        if (parent) {\n            const bestMatch = getClosestAspectRatio(\n                parent.params.width!,\n                parent.params.height!\n            );\n            args.params.width = bestMatch.width;\n            args.params.height = bestMatch.height;\n        } else {\n            const bestMatch = getClosestAspectRatio(\n                aspectRatioDetails.width,\n                aspectRatioDetails.height\n            );\n            args.params.width = bestMatch.width;\n            args.params.height = bestMatch.height;\n        }\n        if (encodedImage) {\n            args.encoded_image = await resizeEncodedImage(\n                encodedImage,\n                args.params.width,\n                args.params.height\n            );\n        }\n\n        resetState();\n        onSubmit(args);\n    };\n\n    const handleEdit = () => {\n        if (!encodedImage) {\n            console.error(\"Cannot edit without existing image\");\n            return;\n        }\n        const args = defaultArgs();\n        args.params.prompt = prompt || \"\";\n        args.params.negative_prompt = negativePrompt || \"\";\n        args.count = 1;\n        args.parent = parentId || undefined;\n        // args.stable_diffusion_strength = variationStrength;\n        args.params.denoising_strength = variationStrength;\n        args.status = StatusEnum.Completed;\n        args.params.width = originalWidth;\n        args.params.height = originalHeight;\n        args.params.cfg_scale = cfgScale;\n        args.nsfw = true;\n        args.model = model;\n        if (encodedImage) {\n            args.encoded_image = encodedImage;\n        }\n\n        resetState();\n        onEdit(args);\n    };\n\n    const handleCancel = () => {\n        resetState();\n        onCancel();\n    };\n\n    const onSelectModel = (model: string) => {\n        setModel(model);\n        setSelectingModel(false);\n    };\n\n    const onImageSelected = async (e: React.ChangeEvent<HTMLInputElement>) => {\n        const file = e.target.files && e.target.files[0];\n        if (!file) {\n            return;\n        }\n        loadImage(\n            file,\n            (img: Event | HTMLImageElement | HTMLCanvasElement) => {\n                if (!(img instanceof HTMLCanvasElement)) {\n                    return;\n                }\n                // try to match width and height to a supported aspect ratio\n                const width = img.width;\n                const height = img.height;\n                let bestMatch = getClosestAspectRatio(width, height);\n                while (compareSize(upscale(bestMatch), width, height) <= 0) {\n                    bestMatch = upscale(bestMatch);\n                    if (\n                        getUpscaleLevel(bestMatch.width, bestMatch.height) >= 2\n                    ) {\n                        break;\n                    }\n                }\n                console.log(\"best match\", bestMatch);\n\n                const canvas = document.createElement(\"canvas\");\n                // canvas.width = bestMatch.width;\n                // canvas.height = bestMatch.height;\n                canvas.width = width;\n                canvas.height = height;\n                const ctx = canvas.getContext(\"2d\");\n                if (!ctx) {\n                    return;\n                }\n                ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n\n                // convert image to base64\n                // const canvas = img as HTMLCanvasElement\n                const dataUrl = canvas.toDataURL(\"image/png\");\n                const base64 = dataUrl.split(\",\")[1];\n                setEncodedImage(base64);\n                // get the index of the best match\n                setAspectRatio(\n                    aspectRatios.findIndex((a) => a.id === bestMatch.id)\n                );\n                setAspectRatioDetails(bestMatch);\n                setOriginalWidth(width);\n                setOriginalHeight(height);\n                // remove canvas\n                canvas.remove();\n            },\n            {\n                maxWidth: 4096,\n                maxHeight: 4096,\n                canvas: true,\n            }\n        );\n    };\n\n    useEffect(() => {\n        if (parent) {\n            const imageData = parent.imageData;\n            if (imageData) {\n                setEncodedImage(imageData.split(\",\")[1]);\n            }\n            setPrompt(parent.params.prompt || \"\");\n            setNegativePrompt(\n                parent.params.negative_prompt || defaultNegativePrompt\n            );\n            setCount(4);\n            setParentId(parent.id);\n            setAdvancedView(true);\n            setVariationStrength(parent.params.denoising_strength || 0.75);\n            setModel(\n                supportedModels.indexOf(parent.model) > -1\n                    ? parent.model\n                    : \"Epic Diffusion\"\n            );\n            setCfgScale(parent.params.cfg_scale || 7.5);\n        } else {\n            resetState();\n        }\n    }, [parent]);\n\n    // unset controlnet when encodedImage is null\n    useEffect(() => {\n        if (!encodedImage) {\n            setControlnetType(undefined);\n        }\n    }, [encodedImage]);\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <div className=\"homepage-prompt\">\n                <div className=\"input-group\">\n                    <input\n                        className=\"form-control\"\n                        placeholder=\"What would you like to create?\"\n                        value={prompt}\n                        onChange={(e) => setPrompt(e.target.value)}\n                    />\n\n                    <div className=\"input-group-append\">\n                        <button\n                            type=\"submit\"\n                            className=\"btn btn-secondary light-button\"\n                            style={{ marginLeft: \"8px\" }}\n                            disabled={!prompt || creating}\n                        >\n                            {/* paintbrush button */}\n                            {!creating && (\n                                <i className=\"fas fa-paint-brush\"></i>\n                            )}\n                            {/* spinner button */}\n                            {creating && (\n                                <i className=\"fas fa-spinner fa-spin\"></i>\n                            )}\n                        </button>\n                    </div>\n                </div>\n                <div\n                    style={{\n                        marginTop: \"24px\",\n                    }}\n                >\n                    <a\n                        href=\"javascript:void(0)\"\n                        onClick={() => setAdvancedView(!advancedView)}\n                        style={{\n                            color: \"white\",\n                            textDecoration: \"underline\",\n                        }}\n                    >\n                        Advanced\n                    </a>\n                    &nbsp;\n                    {advancedView ? (\n                        <i className=\"fas fa-chevron-up\"></i>\n                    ) : (\n                        <i className=\"fas fa-chevron-down\"></i>\n                    )}\n                </div>\n                {advancedView && (\n                    <div className=\"homepage-prompt-advanced\">\n                        {encodedImage && (\n                            <div className=\"form-group\">\n                                <label>Init Image</label>\n                                <img\n                                    style={{\n                                        display: \"block\",\n                                        marginLeft: \"auto\",\n                                        marginRight: \"auto\",\n                                        maxWidth: \"100%\",\n                                    }}\n                                    src={`data:image/png;base64,${encodedImage}`}\n                                />\n                            </div>\n                        )}\n                        {!parent && !encodedImage && (\n                            <AspectRatioSelector\n                                aspectRatio={aspectRatio}\n                                onChange={(aspectRatioId) => {\n                                    setAspectRatio(aspectRatioId);\n                                    setAspectRatioDetails(\n                                        aspectRatios[aspectRatioId]\n                                    );\n                                }}\n                            />\n                        )}\n                        <div className=\"form-group\">\n                            <div\n                                style={{\n                                    display: \"block\",\n                                    maxWidth: encodedImage ? \"350px\" : \"180px\",\n                                    marginTop: \"40px\",\n                                    marginRight: \"auto\",\n                                    marginLeft: \"auto\",\n                                }}\n                            >\n                                <label\n                                    id=\"loadimage-wrapper\"\n                                    className={`btn btn-primary `}\n                                    style={{ display: \"inline\" }}\n                                >\n                                    {/* upload image */}\n                                    <i className=\"fas fa-upload\"></i>&nbsp;\n                                    {encodedImage || parent\n                                        ? \"Replace Image\"\n                                        : \"Upload Image\"}\n                                    <input\n                                        id=\"loadimage\"\n                                        type=\"file\"\n                                        style={{ display: \"none\" }}\n                                        onChange={onImageSelected}\n                                    />\n                                </label>\n                                {encodedImage && (\n                                    <label\n                                        className=\"btn btn-secondary\"\n                                        onClick={() => setEncodedImage(\"\")}\n                                        style={{ display: \"inline\" }}\n                                    >\n                                        {/* remove image */}\n                                        <i className=\"fas fa-trash\"></i>&nbsp;\n                                        Remove Image\n                                    </label>\n                                )}\n                            </div>\n                        </div>\n                        <div className=\"form-group\">\n                            <label htmlFor=\"model\">Model</label>\n                            {/* <select\n                                className=\"form-control\"\n                                id=\"model\"\n                                value={model}\n                                onChange={(e) => setModel(e.target.value)}\n                            >\n                                {supportedModels.map((model) => (\n                                    <option\n                                        value={model}\n                                        key={`model-${model}`}\n                                    >\n                                        {model}\n                                    </option>\n                                ))}\n                            </select> */}\n                            {/* replace the select with a button that sets selectingModel to true */}\n                            <div>\n                                <button\n                                    type=\"button\"\n                                    className=\"btn btn-secondary light-button\"\n                                    onClick={() => setSelectingModel(true)}\n                                >\n                                    {model}&nbsp;\n                                    <i className=\"fas fa-caret-down\"></i>\n                                </button>\n                            </div>\n                        </div>\n                        <div className=\"form-group\">\n                            {/* negative prompt */}\n                            <label htmlFor=\"negativePrompt\">\n                                Negative Prompt\n                            </label>\n                            <input\n                                type=\"text\"\n                                className=\"form-control\"\n                                id=\"negativePrompt\"\n                                placeholder=\"What would you like to avoid?\"\n                                value={negativePrompt}\n                                onChange={(e) =>\n                                    setNegativePrompt(e.target.value)\n                                }\n                            />\n                            <span className=\"helptext\">\n                                Try descriptive words like \"blurry\" or\n                                \"distorted\"\n                            </span>\n                        </div>\n                        {!seed && (\n                            <div className=\"form-group\">\n                                <label htmlFor=\"count\">Count: {count}</label>\n                                {/* range slider from 1 to 20 */}\n                                <input\n                                    type=\"range\"\n                                    className=\"form-control-range\"\n                                    id=\"count\"\n                                    min=\"1\"\n                                    max=\"10\"\n                                    value={count}\n                                    onChange={(e) =>\n                                        setCount(parseInt(e.target.value))\n                                    }\n                                />\n                                <span className=\"helptext\">\n                                    This is how many images you want to generate\n                                </span>\n                            </div>\n                        )}\n                        {(parentId || encodedImage) && (\n                            <div className=\"form-group\">\n                                {/* variation strength */}\n                                <label htmlFor=\"variationStrength\">\n                                    Variation Strength:&nbsp;\n                                    {(variationStrength * 100).toFixed(0)}%\n                                </label>\n                                <input\n                                    type=\"range\"\n                                    className=\"form-control-range\"\n                                    id=\"variationStrength\"\n                                    min=\"0.05\"\n                                    max=\"0.95\"\n                                    step=\"0.05\"\n                                    value={variationStrength}\n                                    onChange={(e) =>\n                                        setVariationStrength(\n                                            parseFloat(e.target.value)\n                                        )\n                                    }\n                                />\n                                <span className=\"helptext\">\n                                    This is how much variation you want to see\n                                    from the parent image\n                                </span>\n                            </div>\n                        )}\n                        {encodedImage && (\n                            // controlnet type - canny, hed, depth, normal, openpose, seg, scribble, fakescribbles, hough\n                            <div className=\"form-group\">\n                                <label htmlFor=\"controlNetType\">\n                                    Control Net Type\n                                </label>\n                                <select\n                                    className=\"form-control\"\n                                    id=\"controlNetType\"\n                                    value={controlnetType}\n                                    onChange={(e) =>\n                                        setControlnetType(e.target.value)\n                                    }\n                                >\n                                    <option value=\"\">None</option>\n                                    {controlnetTypes.map((type) => (\n                                        <option\n                                            value={type}\n                                            key={`type-${type}`}\n                                        >\n                                            {type}\n                                        </option>\n                                    ))}\n                                </select>\n                                <span className=\"helptext\">\n                                    Controlnet is an advanced way of controlling\n                                    the output of image generation. You can read\n                                    more about it{\" \"}\n                                    <a\n                                        target=\"_blank\"\n                                        href=\"https://bootcamp.uxdesign.cc/controlnet-and-stable-diffusion-a-game-changer-for-ai-image-generation-83555cb942fc\"\n                                    >\n                                        here.\n                                    </a>\n                                </span>\n                            </div>\n                        )}\n                        {/* cfg scale. Slider from 1 to 20 in increments of 0.1 */}\n                        <div className=\"form-group\">\n                            <label>CFG Scale: {cfgScale.toFixed(1)}</label>\n                            <input\n                                type=\"range\"\n                                className=\"form-control-range\"\n                                min=\"1\"\n                                max=\"20\"\n                                step=\"0.5\"\n                                value={cfgScale}\n                                onChange={(e) =>\n                                    setCfgScale(parseFloat(e.target.value))\n                                }\n                            />\n                            <span className=\"helptext\">\n                                Adjust the CFG scale to control how much the\n                                image looks like the prompt.\n                            </span>\n                        </div>\n                        <SeedInput seed={seed} setSeed={setSeed} />\n\n                        <div\n                            className=\"form-group\"\n                            style={{ minHeight: \"20px\" }}\n                        >\n                            <div className=\"float-right\">\n                                {parent && (\n                                    <button\n                                        type=\"button\"\n                                        className=\"btn btn-secondary light-button\"\n                                        onClick={handleCancel}\n                                    >\n                                        <i className=\"fas fa-times\"></i>\n                                        &nbsp;CANCEL\n                                    </button>\n                                )}\n                                <button\n                                    type=\"submit\"\n                                    className=\"btn btn-primary\"\n                                    style={{ marginLeft: \"8px\" }}\n                                    disabled={!prompt || creating}\n                                >\n                                    {/* paintbrush button */}\n                                    {!creating && (\n                                        <i className=\"fas fa-paint-brush\"></i>\n                                    )}\n                                    {/* spinner button */}\n                                    {creating && (\n                                        <i className=\"fas fa-spinner fa-spin\"></i>\n                                    )}\n                                    &nbsp;PAINT\n                                </button>\n                                {encodedImage && (\n                                    <button\n                                        type=\"button\"\n                                        className=\"btn btn-secondary light-button\"\n                                        onClick={handleEdit}\n                                        style={{ marginLeft: \"8px\" }}\n                                        disabled={!prompt || creating}\n                                    >\n                                        <i className=\"fas fa-edit\"></i>\n                                        &nbsp;EDIT\n                                    </button>\n                                )}\n                            </div>\n                        </div>\n                    </div>\n                )}\n            </div>\n            {selectingModel && (\n                <ModelSelector\n                    api={api}\n                    onCancel={() => setSelectingModel(false)}\n                    onSelectModel={onSelectModel}\n                    initialSelectedModel={model}\n                />\n            )}\n        </form>\n    );\n};\n","import { aspectRatios } from \"./aspecRatios\";\n\nexport function getUpscaleLevel(width: number, height: number): number {\n    for (let i = 0; i < aspectRatios.length; i++) {\n        const aspectRatio = aspectRatios[i];\n        if (width * height <= aspectRatio.width * aspectRatio.height) {\n            return 0;\n        }\n        // if (width === aspectRatio.width && height === aspectRatio.height) {\n        //     return upscaleLevel;\n        // }\n    }\n    width /= 2;\n    height /= 2;\n    for (let i = 0; i < aspectRatios.length; i++) {\n        const aspectRatio = aspectRatios[i];\n        if (width * height <= aspectRatio.width * aspectRatio.height) {\n            return 1;\n        }\n        // if (width === aspectRatio.width && height === aspectRatio.height) {\n        //     return upscaleLevel;\n        // }\n    }\n    return 2;\n}\n","import { FC } from \"react\";\n\ninterface Props {\n    progress: number;\n}\n\nexport const ProgressBar: FC<Props> = ({ progress }) => {\n    return (\n        <div className=\"progress\" style={{ height: \"20px\", marginTop: \"16px\" }}>\n            <div\n                className=\"progress-bar\"\n                role=\"progressbar\"\n                style={{ width: `${progress * 100}%` }}\n                aria-valuenow={progress * 100}\n                aria-valuemin={0}\n                aria-valuemax={100}\n            >\n                {Math.round(progress * 100)}%\n            </div>\n        </div>\n    );\n};\n","export function sleep(ms: number): Promise<void> {\n    return new Promise(resolve => window.setTimeout(resolve, ms));\n}\n","import React, { FC, useEffect, useState } from 'react';\nimport moment from \"moment\";\n\n// implement an error notification component\n// error message and timestamp are passed in as props\n// but close button can make the error message disappear\n\n// show error when the timestamp or message changes with useEffect hook\n// hide error when the close button is clicked\n\ninterface Props {\n    message: string | null;\n    timestamp: number;\n}\n\ninterface AlertProps {\n    message: string;\n    timestamp: number;\n    alertType: 'success' | 'info' | 'warning' | 'danger';\n}\n\nconst Alert: FC<AlertProps> = ({ message, timestamp, alertType }) => {\n    const [show, setShow] = useState(!!message);\n\n    useEffect(() => {\n        setShow(!!message);\n        // set a timeout of 10 seconds to hide the message if it is currently showing\n        if (message) {\n            const timeout = setTimeout(() => {\n                setShow(false);\n            }, 10000);\n            return () => {\n                clearTimeout(timeout);\n            };\n        }\n    }, [message, timestamp]);\n\n    if (!show) {\n        return null;\n    }\n\n    return (\n        <div className={`alert alert-${alertType} ${show ? 'show' : 'hide'}`}>\n            <button\n                type=\"button\"\n                className=\"close\"\n                onClick={() => setShow(false)}\n            >\n                &times;\n            </button>\n            {message}\n        </div>\n    );\n};\n\nexport const ErrorNotification: FC<Props> = ({ message, timestamp }) => {\n    return (\n        <Alert message={message || ''} timestamp={timestamp} alertType=\"danger\" />\n    );\n};\n\nexport const SuccessNotification: FC<Props> = ({ message, timestamp }) => {\n    return (\n        <Alert message={message || ''} timestamp={timestamp} alertType=\"success\" />\n    );\n};\n","\nexport const supportedModels = [\n    \"Epic Diffusion\",\n    \"Rev Animated\",\n    \"Anything v3\",\n    \"Hentai Diffusion\",\n    \"Ranma Diffusion\",\n    \"URPM\",\n    \"Deliberate\",\n    \"GTA5 Artwork Diffusion\",\n    \"ChilloutMix\",\n    \"Realism Engine\",\n    \"AIO Pixel Art\",\n    \"Microworlds\",\n    \"Microchars\",\n    \"OrbAI\",\n    \"App Icon Diffusion\",\n];\n\n// canny, hed, depth, normal, openpose, seg, scribble, fakescribbles, hough\nexport const controlnetTypes = [\n    \"canny\",\n    \"hed\",\n    \"depth\",\n    \"normal\",\n    \"openpose\",\n    \"seg\",\n    \"scribble\",\n    \"fakescribbles\",\n    \"hough\",\n]","import React, { useState, useEffect } from \"react\";\nimport { Renderer } from \"./renderer\";\nimport { Cursor, Rect } from \"./models\";\nimport { Tool, BaseTool } from \"./tool\";\nimport { AspectRatioSelector } from \"../../components/AspectRatioSelector\";\nimport { getUpscaleLevel } from \"../../lib/upscale\";\nimport {\n    DEFAULT_ASPECT_RATIO,\n    aspectRatios,\n    getClosestAspectRatio,\n} from \"../../lib/aspecRatios\";\nimport { ZoomHelper } from \"./zoomHelper\";\nimport { runInThisContext } from \"vm\";\n\nexport class SelectionTool extends BaseTool implements Tool {\n    private selectionOverlay: Rect | undefined;\n    private selectionOverlayPreview: Rect | undefined;\n    private outpaint?: boolean;\n\n    // private selectionWidth: number = 512;\n    // private selectionHeight: number = 512;\n\n    private panning = false;\n\n    // TODO: size modifier to make the selection overlay smaller\n\n    constructor(renderer: Renderer) {\n        super(renderer, \"select\");\n    }\n\n    updateArgs(args: any) {\n        args = {\n            ...this.getArgs(),\n            ...args,\n        }\n        super.updateArgs(args);\n        this.selectionOverlay = args.selectionOverlay || {\n            x: 0,\n            y: 0,\n            width: 512,\n            height: 512,\n        };\n        this.outpaint = args.outpaint;\n        if (!this.outpaint) {\n            this.selectionOverlay = this.clamp(this.selectionOverlay!);\n        }\n        this.sync();\n    }\n\n    private clamp(rect: Rect): Rect {\n        const imageWidth = this.renderer.getWidth();\n        const imageHeight = this.renderer.getHeight();\n        let x = rect.x;\n        let y = rect.y;\n        let width = rect.width;\n        let height = rect.height;\n        // clamp to the canvas\n        x = Math.max(0, Math.min(x, imageWidth - this.selectionOverlay!.width));\n        y = Math.max(0, Math.min(y, imageHeight - rect.height));\n        x = Math.min(x, imageWidth - rect.width);\n        y = Math.min(y, imageHeight - rect.height);\n        width = Math.min(width, imageWidth);\n        height = Math.min(height, imageHeight);\n        return {\n            x: x,\n            y: y,\n            width: width,\n            height: height,\n        };\n    }\n\n    private sync(): void {\n        this.renderer.setSelectionOverlay(this.selectionOverlay);\n        this.renderer.setSelectionOverlayPreview(this.selectionOverlayPreview);\n    }\n\n    onMouseDown(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        if (event.type == \"touch\") {\n            this.onMouseMove(event);\n        } else if (event.button === 0) {\n            this.selectionOverlay = this.selectionOverlayPreview;\n            this.selectionOverlayPreview = undefined;\n            this.sync();\n            this.updateArgs({\n                selectionOverlay: this.selectionOverlay,\n            });\n        } else if (event.button === 1) {\n            this.panning = true;\n        }\n    }\n\n    onMouseMove(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        const imageWidth = this.renderer.getWidth();\n        const imageHeight = this.renderer.getHeight();\n        if (this.panning) {\n            this.zoomHelper.onPan(event);\n        } else {\n            let { x, y } = this.zoomHelper.translateMouseToCanvasCoordinates(\n                event.nativeEvent.offsetX,\n                event.nativeEvent.offsetY\n            );\n\n            // round to the nearest 16 pixels\n            x = Math.round(x / 16) * 16;\n            y = Math.round(y / 16) * 16;\n            // offset by -256 to center the rect\n            x -= 256;\n            y -= 256;\n\n            this.selectionOverlayPreview = {\n                x: x,\n                y: y,\n                width: this.selectionOverlay!.width,\n                height: this.selectionOverlay!.height,\n            };\n\n            if (!this.outpaint) {\n                this.selectionOverlayPreview = this.clamp(this.selectionOverlayPreview);\n            }\n\n            \n            this.sync();\n        }\n    }\n\n    onMouseUp(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        if (event.button === 0 && event.type == \"touch\") {\n            this.selectionOverlay = this.selectionOverlayPreview;\n            this.selectionOverlayPreview = undefined;\n            this.sync();\n            this.updateArgs({\n                selectionOverlay: this.selectionOverlay,\n            });\n        }\n        this.panning = false;\n    }\n\n    onMouseLeave(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        this.selectionOverlayPreview = undefined;\n        this.panning = false;\n        this.sync();\n    }\n\n    onWheel(event: WheelEvent) {\n        this.zoomHelper.onWheel(event);\n    }\n\n    destroy() {\n        // this.renderer.setSelectionOverlay(undefined);\n        this.renderer.setSelectionOverlayPreview(undefined);\n        return true;\n    }\n}\n\ninterface ControlsProps {\n    renderer: Renderer;\n    tool: Tool;\n    /** Lock aspect ratio for smaller images */\n    lockAspectRatio?: boolean;\n    outpaint?: boolean;\n}\n\nexport const Controls: React.FC<ControlsProps> = ({\n    renderer,\n    tool,\n    lockAspectRatio,\n    outpaint,\n}) => {\n    const upscaleLevel = getUpscaleLevel(\n        renderer.getWidth(),\n        renderer.getHeight()\n    );\n    const [aspectRatio, setAspectRatio] = useState(DEFAULT_ASPECT_RATIO);\n    const [size, setSize] = useState(1);\n\n    useEffect(() => {\n        const upscaleLevel = getUpscaleLevel(\n            renderer.getWidth(),\n            renderer.getHeight()\n        );\n        // lock aspect ratio to image\n        if (upscaleLevel === 0 && lockAspectRatio) {\n            const aspectRatio = getClosestAspectRatio(\n                renderer.getWidth(),\n                renderer.getHeight()\n            );\n            setAspectRatio(aspectRatio.id);\n            tool.updateArgs({\n                selectionOverlay: {\n                    x: 0,\n                    y: 0,\n                    width: aspectRatio.width,\n                    height: aspectRatio.height,\n                },\n                outpaint,\n            });\n        } else {\n            const args = tool.getArgs();\n            if (args.selectionOverlay) {\n                // restore args\n                const aspectRatio = getClosestAspectRatio(\n                    args.selectionOverlay.width,\n                    args.selectionOverlay.height\n                );\n                setAspectRatio(aspectRatio.id);\n                setSize(args.selectionOverlay.width / aspectRatio.width);\n                tool.updateArgs(args);\n            } else {\n                // set default args\n                args.selectionOverlay = {\n                    x: 0,\n                    y: 0,\n                    width: aspectRatios[aspectRatio].width,\n                    height: aspectRatios[aspectRatio].height,\n                };\n                args.outpaint = outpaint;\n                tool.updateArgs(args);\n            }\n        }\n    }, [tool]);\n\n    function onChange(aspectRatioId: number, size: number) {\n        const args = tool.getArgs();\n        const aspectRatio = aspectRatios[aspectRatioId];\n        if (args.selectionOverlay) {\n            const xDiff =\n                args.selectionOverlay.width - aspectRatio.width * size;\n            const yDiff =\n                args.selectionOverlay.height - aspectRatio.height * size;\n            args.selectionOverlay.width = Math.round(aspectRatio.width * size);\n            args.selectionOverlay.height = Math.round(\n                aspectRatio.height * size\n            );\n            args.selectionOverlay.x += xDiff / 2;\n            args.selectionOverlay.y += yDiff / 2;\n            if (!outpaint) {\n                // clamp to canvas\n                args.selectionOverlay.x = Math.round(\n                    Math.max(\n                        0,\n                        Math.min(\n                            args.selectionOverlay.x,\n                            renderer.getWidth() - args.selectionOverlay.width\n                        )\n                    )\n                );\n                args.selectionOverlay.y = Math.round(\n                    Math.max(\n                        0,\n                        Math.min(\n                            args.selectionOverlay.y,\n                            renderer.getHeight() - args.selectionOverlay.height\n                        )\n                    )\n                );\n            }\n        }\n        tool.updateArgs({\n            selectionOverlay: args.selectionOverlay,\n        });\n    }\n\n    return (\n        <>\n            {upscaleLevel > 0 && (\n                <AspectRatioSelector\n                    aspectRatio={aspectRatio}\n                    onChange={(aspectRatioId) => {\n                        onChange(aspectRatioId, size);\n                        setAspectRatio(aspectRatioId);\n                    }}\n                />\n            )}\n            <div className=\"form-group\">\n                <label htmlFor=\"size\" style={{ width: \"100%\" }}>\n                    Size\n                    <small\n                        className=\"form-text text-muted\"\n                        style={{ float: \"right\" }}\n                    >\n                        {Math.round(size * 100)}%\n                    </small>\n                </label>\n                {/* range from 0.1 to 1 */}\n                <input\n                    type=\"range\"\n                    className=\"form-control-range\"\n                    id=\"size\"\n                    min=\"1\"\n                    max=\"2\"\n                    step=\"0.1\"\n                    value={size}\n                    onChange={(event) => {\n                        onChange(aspectRatio, parseFloat(event.target.value));\n                        setSize(parseFloat(event.target.value));\n                    }}\n                />\n            </div>\n        </>\n    );\n};\n"],"sourceRoot":""}