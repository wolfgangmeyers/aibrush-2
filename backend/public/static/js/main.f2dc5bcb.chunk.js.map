{"version":3,"sources":["pages/Homepage.tsx","components/AspectRatioSelector.tsx","pages/image-editor/PaletteButton.tsx","components/PendingImagesThumbnail.tsx","components/PendingImages.tsx","components/CopyToClipboardIcon.tsx","components/ImagePopup.tsx","pages/image-editor/enhance-tool.tsx","client/api.ts","client/base.ts","client/common.ts","pages/image-editor/smudge-tool.tsx","pages/image-editor/inpaint-tool.tsx","pages/image-editor/ImageEditor.tsx","pages/image-editor/renderer.ts","lib/aspecRatios.ts","pages/image-editor/mask-editor-controls.tsx","pages/image-editor/import-export.tsx","pages/image-editor/augment-tool.tsx","components/OutOfCreditsModal.tsx","components/PaymentStatusModal.tsx","lib/imageutil.ts","components/BusyModal.tsx","lib/localImagesStore.ts","pages/Login.tsx","components/TokenRefresher.tsx","components/Healthchecker.tsx","pages/admin/GenerateCode.tsx","pages/admin/GlobalSettings.tsx","pages/admin/Admin.tsx","pages/DeletedImages.tsx","pages/DiscordLogin.tsx","pages/LocalDeletedImages.tsx","lib/kvstore.ts","pages/SavedImagesPage.tsx","lib/imagesCache.ts","pages/TestPage.tsx","components/CreditsBalance.tsx","App.tsx","config.ts","reportWebVitals.ts","index.tsx","pages/image-editor/zoomHelper.tsx","pages/image-editor/tool.ts","lib/recentList.ts","lib/apisocket.ts","components/CostIndicator.tsx","components/ImageThumbnail.tsx","lib/supportedModels.ts","components/SeedInput.tsx","components/TextInputWithHistory.tsx","components/ImagePrompt.tsx","components/ProgressBar.tsx","lib/sleep.ts","lib/credits.ts","components/ModelList.tsx","lib/localcache.ts","components/ModelSelector.tsx","components/ResetToDefaultIcon.tsx","components/Alerts.tsx","pages/image-editor/ColorPicker.tsx","pages/image-editor/pencil-tool.tsx","pages/image-editor/selection-tool.tsx","lib/upscale.ts"],"names":["anonymousClient","axios","create","defaults","headers","common","Homepage","api","assetsUrl","apiSocket","localImages","paymentStatus","useState","creating","setCreating","selectedImage","setSelectedImage","parentImage","setParentImage","loadingParent","setLoadingParent","savingImage","setSavingImage","uploadProgress","setUploadingProgress","showPendingImages","setShowPendingImages","images","setImages","err","setErr","errTime","setErrTime","success","setSuccess","successTime","setSuccessTime","hasMore","setHasMore","search","setSearch","searchDebounce","setSearchDebounce","bulkDeleteSelecting","setBulkDeleteSelecting","bulkDeleting","setBulkDeleting","bulkDeleteIds","setBulkDeleteIds","censorNSFW","setCensorNSFW","outOfCredits","setOutOfCredits","id","useParams","history","useHistory","location","useLocation","onError","moment","valueOf","useEffect","handle","setTimeout","clearTimeout","image","find","getImage","then","replace","onSubmit","input","a","window","scrollTo","encoded_image","convertPNGToJPG","encodedJpg","createTemporaryImage","tmpInitImage","binaryImageData","Buffer","from","put","data","upload_url","onUploadProgress","progressEvent","percentCompleted","loaded","total","undefined","tmp_jpg_id","createImage","newImages","saveImage","sort","sortImages","console","error","response","message","includes","onEditNewImage","encodedImage","newImage","created_at","updated_at","created_by","params","steps","width","height","prompt","negative_prompt","denoising_strength","label","uuid","model","negative_score","nsfw","parent","score","status","StatusEnum","Completed","temporary","imageData","push","onNSFW","updatedImage","map","loadImages","log","cursor","add","listImages","resp","lock","pollImages","pendingOrProcessingImages","filter","length","pendingById","reduce","acc","batchGetImages","ids","updatedImages","statusChange","i","img","Error","deleteImage","getImageDownloadUrls","downloadUrls","get","image_url","responseType","base64ImageData","toString","src","timerHandle","setInterval","clearInterval","qs","parse","ignoreQueryPrefix","loadParent","isPendingOrProcessing","Pending","Processing","b","aScore","bScore","trim","onLoadMore","minUpdatedAt","forEach","Math","min","imagesById","deleted_at","onDelete","onFork","onSave","createInput","count","Saved","split","createEncodedThumbnail","encodedThumbnail","binaryThumbnailData","createResp","imageId","getImageUploadUrls","uploadUrls","thumbnail_url","hardDeleteImage","onEdit","onThumbnailClicked","onConfirmBulkDelete","promises","Object","keys","Promise","all","completedOrSavedImages","pendingImages","processingImages","style","fontSize","textAlign","timestamp","onCancel","className","marginTop","paddingBottom","marginBottom","value","type","placeholder","onChange","e","target","float","display","onClick","marginLeft","Toggle","variant","Menu","Item","dataLength","next","loader","pendingCount","processingCount","bulkDelete","onClose","show","title","progress","onDeleteImage","onHide","AspectRatioSelector","aspectRatio","disabled","aspectRatioDetails","aspectRatios","minHeight","alignItems","border","margin","displayName","max","parseInt","PaletteButton","selectedColor","color","onColorSelected","displayColorPicker","setDisplayColorPicker","tmpColor","setTmpColor","backgroundColor","onDoubleClick","position","zIndex","hex","onChangeComplete","marginRight","PendingImagesThumbnail","hover","setHover","icon","onMouseEnter","onMouseLeave","backgroundImage","backgroundSize","background","lineHeight","PendingImages","imageIcon","pendingDiv","phrases","substring","Header","closeButton","Title","Body","Footer","CopyToClipboardIcon","text","copied","setCopied","onCopy","ImagePopup","useRef","showNSFW","setShowNSFW","current","onerror","indexOf","Modal","size","ref","maxWidth","maxHeight","alt","displayStatus","charAt","toUpperCase","slice","top","statusBadge","href","seed","eraserWidthModifier","EnhanceTool","renderer","selectionTool","pencilTool","negativePrompt","variationStrength","_dirty","worker","idCounter","_state","stateHandler","selectionControlsListener","maskHandler","selectedImageDataIndex","selectedImageData","panning","erasing","progressListener","errorListener","dirtyListener","SelectionTool","PencilTool","selectSupported","state","selectionArgs","getArgs","selectionOverlay","x","y","getWidth","getHeight","updateArgs","brushColor","setCursor","ImageUtilWorker","this","dirty","listener","handler","destroy","outpaint","getUpscaleLevel","event","zoomHelper","translateMouseToCanvasCoordinates","nativeEvent","offsetX","offsetY","button","ImageData","erasePoint","onMouseDown","getSelectionOverlay","baseWidth","eraserRadius","floor","relX","relY","startX","startY","endX","endY","j","index","distance","sqrt","pow","alphaPct","alpha","setEditImage","featherWidth","radius","onPan","updateCursor","onMouseMove","onMouseUp","onWheel","args","maskData","loadImageDataElement","imageElement","canvas","document","createElement","ctx","getContext","drawImage","getImageData","newId","req","alphaMode","feather","pixels","alphaPixels","processRequest","updatedImageData","remove","isMasked","deleteMask","createMask","apisocket","notifyError","getEncodedImage","encodedMask","getEncodedMask","defaultArgs","updateProgress","tmpMaskImage","binaryMaskData","tmp_mask_id","ceil","completed","lastUpdate","onMessage","msg","JSON","NOTIFICATION_IMAGE_UPDATED","loadImageData","addMessageListener","startTime","lastCheck","completeCount","sleep","diff","pendingIds","updatedImagesResult","byId","updated","isAfter","removeMessageListener","direction","saveListener","commitSelection","negative_phrases","BaseTool","EnhanceControls","tool","setCount","setDirty","setVariationStrength","setPrompt","setNegativePrompt","setModel","selectingModel","setSelectingModel","setState","setIsMasked","setProgress","setError","onChangeState","onChangeMask","onProgress","onDirty","cost","calculateImagesCost","role","data-dismiss","aria-label","aria-hidden","lockAspectRatio","htmlFor","step","round","parseFloat","imagesCost","onConfirm","onRevert","cancel","confirm","erase","submit","mask","when","onSelectModel","initialSelectedModel","inpainting","AddMetricItemTypeEnum","HealthcheckStatusEnum","ImageParamsControlnetTypeEnum","ImageParamsAugmentationEnum","UpsertWorkerInputStatusEnum","WorkerStatusEnum","BASE_PATH","BaseAPI","configuration","basePath","globalAxios","RequiredError","field","name","DUMMY_BASE_URL","assertParamExists","functionName","paramName","paramValue","setSearchParams","url","searchParams","URLSearchParams","objects","object","key","Array","isArray","delete","item","append","set","serializeDataIfNeeded","requestOptions","nonString","isJsonMime","stringify","toPathString","pathname","hash","createRequestFunction","axiosArgs","axiosRequestArgs","options","request","AIBrushApiFp","localVarAxiosParamCreator","addMetrics","addMetricsInput","localVarUrlObj","URL","baseOptions","localVarRequestOptions","method","localVarQueryParameter","localVarHeaderParameter","query","headersFromBaseOptions","fields","batchGetImagesInput","createDepositCode","createDepositCodeInput","createImageInput","createInviteCode","createStripeSession","createStripeSessionInput","format","localVarPath","encodeURIComponent","String","discordLogin","getAssetsUrl","getCredits","getFeatures","getGlobalSettings","getMaskData","getModels","getThumbnailData","healthcheck","isAdmin","limit","login","loginInput","redeemDepositCode","code","refresh","refreshLoginInput","updateGlobalSettings","updateGlobalSettingsRequest","updateImage","updateImageInput","uploadImageData","body","uploadThumbnailData","verify","verifyLoginInput","AIBrushApiAxiosParamCreator","localVarAxiosArgs","AIBrushApi","SmudgeTool","brushSize","brushOpacity","lastX","lastY","smudging","sync","smudgeLine","copyEditImageFromBaseImage","SmudgeControls","setBrushSize","setBrushOpacity","visibility","InpaintTool","imageWidth","imageHeight","selectionWidth","render","alphaMask","snapshot","undo","clearRedoStack","expandToOverlay","tmpImagePromises","tmpImages","binaryImages","uploadPromises","tmpImage","binaryImage","tmp_image_id","closestAspectRatio","getClosestAspectRatio","selection_overlay","InpaintControls","setoutpaint","checked","ImageEditor","showSelectionControls","setShowSelectionControls","tools","iconClass","constructor","r","renderControls","t","onShowSelectionControls","colors","defaultColors","setImage","setRenderer","setTool","canUndo","setCanUndo","canRedo","setCanRedo","busyMessage","setBusyMessage","canvasRef","onSelectTool","toolconfig","newTool","onSaveImage","saveNewImage","newArgs","renderTool","buttonClass","isSelected","preventDefault","localImage","imageSrc","download_urls","Image","onload","createRenderer","setBaseImage","loadImage","onSnapshot","addEventListener","removeEventListener","redo","verticalAlign","touchAction","userSelect","onTouchStart","onTouchMove","onTouchEnd","select","left","transform","resetView","Renderer","undoStack","redoStack","currentSnapshot","backgroundLayer","baseImageLayer","editLayer","maskLayer","selectionOverlayPreview","hasSelection","zoom","snapshotListener","allowRedo","pop","clearRect","putImageData","notifySnapshotListener","shift","context","setTransform","globalAlpha","drawOverlay","resetMask","fillStyle","fillRect","pattern","createPattern","createCheckeredPattern","color1","color2","updateSelectionOverlay","initializeBackgroundLayer","setSelectionOverlay","updateZoomAndOffset","lineWidth","strokeStyle","strokeRect","beginPath","arc","PI","stroke","fill","moveTo","lineTo","result","toDataURL","selection","imageDataToEncodedImage","erasure","layer","convertErasureToMask","imageLayer","brushx","brushy","absx","leftEdge","rightEdge","topEdge","bottomEdge","absy","contains","x1","y1","x2","y2","lineCap","unitVector","totalRed","totalGreen","totalBlue","averageRed","averageGreen","averageBlue","pixel","g","rgbToHex","minX","minY","newCanvas","AspectRatio","cfg","newWidth","newHeight","DEFAULT_ASPECT_RATIO","tests","aRatio","bRatio","abs","MaskEditor","setBrushColor","flexDirection","flexWrap","invertMask","ImportExportControls","backupImage","setBackupImage","files","byteString","atob","buffer","ArrayBuffer","intArray","Uint8Array","charCodeAt","blob","Blob","saveAs","onExport","AugmentControls","activeAugmentation","setActiveAugmentation","imageWorker","setImageWorker","lastError","setLastError","augmentImageData","augmentation","c","imageDataToCanvas","Upscale","FaceRestore","processingImage","checkResp","imageDataResp","binaryImageToDataBase64","decodeImage","upscaleFactor","newImageData","onAugment","fixImageSize","OutOfCreditsModal","centered","to","PaymentStatusModal","setShow","handleClose","resolve","reject","dataUrl","urls","catch","splitImage","initImage","tile_size","num_tiles_x","num_tiles_y","tiles","x0","y0","tile","numTilesX","numTilesY","tileSize","mergeTiles","splitResult","tileCanvas","resizeImage","numWorkers","workers","callbacks","Worker","process","bind","postMessage","terminate","cropWidth","cropHeight","cropX","cropY","base64","resizeEncodedImage","encodedImageToBlob","binaryString","arr","uploadBlob","signedUrl","xhr","XMLHttpRequest","open","setRequestHeader","send","BusyModal","children","backdrop","keyboard","LocalImagesStore","db","indexedDB","onupgradeneeded","evt","imagesStore","objectStoreNames","transaction","objectStore","createObjectStore","keyPath","createIndex","unique","onsuccess","_","legacyImage","join","stable_diffusion_strength","iterations","store","hydrateImage","cleanupDeletedImages","range","IDBKeyRange","lowerBound","upperBound","openCursor","toLowerCase","continue","imagesRequest","clear","olderThan","getDeletedImages","deletedImages","subtract","Login","props","email","setEmail","emailSubmitted","setEmailSubmitted","setCode","inviteCode","onLogin","match","client","invite_code","onVerify","fontWeight","aria-describedby","host","protocol","redirectUri","discordLink","TokenRefresher","onCredentialsRefreshed","onCredentialsExpired","credentials","interval","refreshToken","loginResult","Healthchecker","healthCheck","setHealthCheck","GenerateCode","amount","setAmount","generatedCode","setGeneratedCode","handleSubmit","Form","InputGroup","Control","Append","Button","Alert","GlobalSettings","minimum_worker_allocations","stable_diffusion","stable_diffusion_inpainting","swinir","workerSettings","setWorkerSettings","saving","setSaving","loadWorkerSettings","settings","settings_json","saveWorkerSettings","Admin","DeletedImages","deleting","setDeleting","onDeleteAllImages","onRestoreImage","goBack","borderBottom","ImageThumbnail","paddingTop","DiscordLogin","accessToken","LocalDeletedImages","clearDeletedImages","KVStore","dbConfig","dbName","storeName","createDB","getDB","savedImagesCache","kvstore","order","batchGetIds","deleteItem","getItem","savedImage","batchResult","setItem","SavedImagesPage","imagesResult","latestCursor","findIndex","deletedIds","uniqueIds","Set","payload","NOTIFICATION_IMAGE_DELETED","Dropdown","res","TestPage","originalImage","setOriginalImage","upscaledImage","setUpscaledImage","upscaleImageData","onImageSelected","originalImageData","upscaledTile","upscaledImageData","upscale","feathered","upscaledCanvas","CreditsBalance","config","apiUrl","httpClient","localStorage","ApiSocket","updateHttpClient","App","setCredentials","setAssetsUrl","setIsAdmin","features","setFeatures","onLogout","removeItem","init","assets_url","storedCredentials","is_admin","updateToken","connect","path","exact","bottom","privacy_uri","terms_uri","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","getElementById","ZoomHelper","startTouches","startZoom","startOffsetX","startOffsetY","originalZoom","getZoom","getOffsetX","getOffsetY","canvasPoint","deltaY","xDiff","yDiff","movementX","movementY","rect","getBoundingClientRect","touches","canvasRect","getCanvas","startTouch1","startTouch2","touch1","touch2","startDistance","clientX","clientY","startCenterX","startCenterY","centerX","centerY","startCanvasPoint","xDiff2","yDiff2","mouseX","mouseY","touchHandle","_pinchZooming","_panning","_updateCursor","touch","identifier","pageX","pageY","screenX","screenY","RecentList","listSize","modelsJson","models","recentModels","getRecentItems","modelIndex","splice","unshift","saveRecentItems","recentNegativePrompts","messageListeners","l","close","WebSocket","onopen","onmessage","onclose","CostIndicator","retry","setRetry","backgroundRepeat","backgroundPosition","readOnly","supportedModels","controlnetTypes","SeedInput","setSeed","useCustomSeed","setUseCustomSeed","FormGroup","FormCheck","random","FormControl","TextInputWithHistory","onBlur","onSelect","eventKey","padding","overflow","defaultNegativePrompt","encoded_mask","getItems","ImagePrompt","setAspectRatio","parentId","setParentId","advancedView","setAdvancedView","setEncodedImage","controlnetType","setControlnetType","cfgScale","setCfgScale","setSize","defaultAspectRatio","setAspectRatioDetails","originalWidth","setOriginalWidth","originalHeight","setOriginalHeight","resetState","addItem","controlnet_type","cfg_scale","bestMatch","scale","file","HTMLCanvasElement","scaledAspectRatio","borderTopLeftRadius","textDecoration","aspectRatioId","toFixed","ModelSelector","ProgressBar","aria-valuenow","aria-valuemin","aria-valuemax","ms","ModelList","selectedModel","innerWidth","innerHeight","setMaxHeight","handleResize","ListGroup","overflowY","active","cache","storage","ttl","expiry","Date","now","itemStr","initialValue","cachedValue","setValue","useCache","setModels","setSelectedModel","searchTerm","setSearchTerm","filteredModels","setSortedModels","recentModelNames","recentModelIndices","sortedModels","aIndex","bIndex","values","Row","Col","sm","description","showcases","ResetToDefaultIcon","placement","overlay","alertType","timeout","ErrorNotification","SuccessNotification","ColorPicker","right","isDrawing","colorPicking","lastPickedColor","colorPickedListener","drawPoint","getPixel","drawLine","Controls","palette","setPalette","addToPalette","onColorPicked","beginColorpicker","clamp","setSelectionOverlayPreview","upscaleLevel"],"mappings":"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","file":"static/js/main.f2dc5bcb.chunk.js","sourcesContent":["// V2 page\nimport { FC, useState, useEffect } from \"react\";\nimport * as uuid from \"uuid\";\nimport axios from \"axios\";\nimport qs from \"qs\";\nimport Dropdown from \"react-bootstrap/Dropdown\";\nimport { useParams, useHistory, Link, useLocation } from \"react-router-dom\";\nimport moment from \"moment\";\nimport ScrollToTop from \"react-scroll-to-top\";\nimport { AIBrushApi } from \"../client\";\nimport { CreateImageInput, StatusEnum, TemporaryImage } from \"../client/api\";\nimport { ImageThumbnail } from \"../components/ImageThumbnail\";\nimport { ImagePrompt, defaultArgs } from \"../components/ImagePrompt\";\nimport {\n    convertPNGToJPG,\n    createEncodedThumbnail,\n    encodedImageToBlob,\n    uploadBlob,\n} from \"../lib/imageutil\";\n\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport { ImagePopup } from \"../components/ImagePopup\";\nimport { BusyModal } from \"../components/BusyModal\";\nimport { PendingImagesThumbnail } from \"../components/PendingImagesThumbnail\";\nimport { PendingImages } from \"../components/PendingImages\";\nimport { ApiSocket } from \"../lib/apisocket\";\nimport { LocalImagesStore, LocalImage } from \"../lib/localImagesStore\";\nimport { ErrorNotification, SuccessNotification } from \"../components/Alerts\";\nimport { sleep } from \"../lib/sleep\";\nimport { ProgressBar } from \"../components/ProgressBar\";\nimport OutOfCreditsModal from \"../components/OutOfCreditsModal\";\nimport PaymentStatusModal from \"../components/PaymentStatusModal\";\n\nexport const anonymousClient = axios.create();\ndelete anonymousClient.defaults.headers.common[\"Authorization\"];\n\ninterface Props {\n    api: AIBrushApi;\n    apiSocket: ApiSocket;\n    assetsUrl: string;\n    localImages: LocalImagesStore;\n    paymentStatus?: \"success\" | \"canceled\";\n}\n\nexport const Homepage: FC<Props> = ({\n    api,\n    apiSocket,\n    assetsUrl,\n    localImages,\n    paymentStatus,\n}) => {\n    const [creating, setCreating] = useState(false);\n    const [selectedImage, setSelectedImage] = useState<LocalImage | null>(null);\n    const [parentImage, setParentImage] = useState<LocalImage | null>(null);\n    const [loadingParent, setLoadingParent] = useState(false);\n    const [savingImage, setSavingImage] = useState(false);\n    const [uploadProgress, setUploadingProgress] = useState(0);\n\n    const [showPendingImages, setShowPendingImages] = useState(false);\n\n    const [images, setImages] = useState<Array<LocalImage>>([]);\n    const [err, setErr] = useState<string | null>(null);\n    const [errTime, setErrTime] = useState<number>(0);\n    const [success, setSuccess] = useState<string | null>(null);\n    const [successTime, setSuccessTime] = useState<number>(0);\n\n    const [hasMore, setHasMore] = useState<boolean>(true);\n    const [search, setSearch] = useState<string>(\"\");\n    const [searchDebounce, setSearchDebounce] = useState<string>(\"\");\n\n    const [bulkDeleteSelecting, setBulkDeleteSelecting] = useState(false);\n    const [bulkDeleting, setBulkDeleting] = useState(false);\n    const [bulkDeleteIds, setBulkDeleteIds] = useState<{\n        [key: string]: boolean;\n    }>({});\n\n    const [censorNSFW, setCensorNSFW] = useState(true);\n    const [outOfCredits, setOutOfCredits] = useState(false);\n\n    const { id } = useParams<{ id?: string }>();\n    const history = useHistory();\n    const location = useLocation();\n\n    const onError = (err: string) => {\n        setErr(err);\n        setErrTime(moment().valueOf());\n    };\n\n    useEffect(() => {\n        let handle = setTimeout(() => {\n            setSearch(searchDebounce);\n        }, 500);\n        return () => {\n            clearTimeout(handle);\n        };\n    }, [searchDebounce]);\n\n    useEffect(() => {\n        if (id) {\n            // check if the image is already loaded\n            const image = images.find((image) => image.id === id);\n            if (image) {\n                setSelectedImage(image);\n            }\n            // refresh\n            localImages.getImage(id).then((image) => {\n                setSelectedImage(image);\n                if (!image) {\n                    history.replace(\"/\");\n                }\n            });\n        } else {\n            setSelectedImage(null);\n        }\n    }, [id]);\n\n    const onSubmit = async (input: CreateImageInput) => {\n        setCreating(true);\n        setParentImage(null);\n        setErr(null);\n        window.scrollTo(0, 0);\n        setUploadingProgress(0);\n        try {\n            if (input.encoded_image) {\n                const encodedJpg = await convertPNGToJPG(input.encoded_image);\n                const tmpInitImage = await api.createTemporaryImage(\"jpg\");\n                // convert base64 to binary\n                const binaryImageData = Buffer.from(\n                    encodedJpg,\n                    \"base64\"\n                );\n                await anonymousClient.put(\n                    tmpInitImage.data.upload_url,\n                    binaryImageData,\n                    {\n                        headers: {\n                            \"Content-Type\": \"image/jpeg\",\n                        },\n                        onUploadProgress: (progressEvent: any) => {\n                            const percentCompleted =\n                                progressEvent.loaded / progressEvent.total;\n                            setUploadingProgress(percentCompleted);\n                        },\n                    }\n                );\n                input.encoded_image = undefined;\n                input.tmp_jpg_id = tmpInitImage.data.id;\n            }\n\n            const newImages = await api.createImage(input);\n            if (newImages.data.images) {\n                for (let image of newImages.data.images || []) {\n                    localImages.saveImage(image);\n                }\n                setImages((images) => {\n                    return [...newImages.data.images!, ...images].sort(\n                        sortImages\n                    );\n                });\n            } else {\n                onError(\"Could not create images\");\n            }\n        } catch (e: any) {\n            console.error(e);\n            if (e.response?.data?.message?.includes(\"credits\")) {\n                setOutOfCredits(true);\n                return;\n            }\n            onError(\"Error creating images\");\n        } finally {\n            setCreating(false);\n        }\n    };\n\n    const onEditNewImage = async (input: CreateImageInput) => {\n        setCreating(true);\n        setParentImage(null);\n        setErr(null);\n        window.scrollTo(0, 0);\n        try {\n            const encodedImage = input.encoded_image!;\n            const newImage: LocalImage = {\n                created_at: moment().valueOf(),\n                updated_at: moment().valueOf(),\n                created_by: \"\",\n                params: {\n                    steps: 20,\n                    width: input.params.width,\n                    height: input.params.height,\n                    prompt: input.params.prompt,\n                    negative_prompt: input.params.negative_prompt,\n                    denoising_strength: input.params.denoising_strength,\n                },\n                label: \"\",\n                id: uuid.v4(),\n                model: input.model!,\n                negative_score: 0,\n                nsfw: !!input.nsfw,\n                parent: input.parent!,\n                score: 0,\n                status: StatusEnum.Completed,\n                temporary: false,\n                imageData: `data:image/png;base64,${encodedImage}`,\n            };\n            await localImages.saveImage(newImage);\n\n            history.push(`/image-editor/${newImage.id}`);\n        } catch (e: any) {\n            console.error(e);\n            onError(\"Error creating image\");\n        } finally {\n            setCreating(false);\n        }\n    };\n\n    const onNSFW = async (updatedImage: LocalImage, nsfw: boolean) => {\n        updatedImage = {\n            ...updatedImage,\n            nsfw,\n        };\n        await localImages.saveImage(updatedImage);\n        setImages((images) => {\n            return images.map((image) => {\n                if (updatedImage.id === image.id) {\n                    return {\n                        ...image,\n                        nsfw,\n                    };\n                }\n                return image;\n            });\n        });\n        setSelectedImage(updatedImage);\n    };\n\n    const loadImages = async (search: string) => {\n        console.log(\"Initial load images\");\n        // clear error\n        setErr(null);\n        setHasMore(true);\n        try {\n            const cursor = moment().add(1, \"minutes\").valueOf();\n            const resp = await localImages.listImages(\n                cursor,\n                \"prev\",\n                100,\n                search\n            );\n            setImages(resp.sort(sortImages));\n            return;\n        } catch (err) {\n            onError(\"Could not load images\");\n            console.error(err);\n        }\n    };\n\n    useEffect(() => {\n        loadImages(search);\n    }, [search]);\n\n    useEffect(() => {\n        if (!api) {\n            return;\n        }\n        let lock = false;\n\n        const pollImages = async (images: Array<LocalImage>) => {\n            if (lock) {\n                return;\n            }\n            lock = true;\n\n            const pendingOrProcessingImages = images.filter((image) => {\n                return (\n                    image.status === \"pending\" || image.status === \"processing\"\n                );\n            });\n            if (pendingOrProcessingImages.length === 0) {\n                return;\n            }\n\n            const pendingById = pendingOrProcessingImages.reduce(\n                (acc, image) => {\n                    acc[image.id] = image;\n                    return acc;\n                },\n                {} as Record<string, LocalImage>\n            );\n\n            try {\n                const resp = await api.batchGetImages(\"id,status,nsfw,error\", {\n                    ids: pendingOrProcessingImages.map((image) => image.id),\n                });\n\n                if (resp.data.images) {\n                    const updatedImages: Array<LocalImage> =\n                        resp.data.images || [];\n                    let statusChange = false;\n                    for (let i = 0; i < updatedImages.length; i++) {\n                        let img = updatedImages[i];\n                        if (pendingById[img.id].status !== img.status) {\n                            statusChange = true;\n                        }\n                        img = {\n                            ...pendingById[img.id],\n                            ...img,\n                        };\n                        updatedImages[i] = img;\n\n                        if (img.status == StatusEnum.Error) {\n                            onError(\n                                img.error ||\n                                    \"Some images failed to generate, please make sure your prompt doesn't violate our terms of service\"\n                            );\n                            await api.deleteImage(img.id);\n                            await localImages.deleteImage(img.id);\n                            continue;\n                        }\n\n                        if (img.status === StatusEnum.Completed) {\n                            const downloadUrls = await api.getImageDownloadUrls(\n                                img.id\n                            );\n                            const resp = await anonymousClient.get(\n                                downloadUrls.data.image_url!,\n                                {\n                                    responseType: \"arraybuffer\",\n                                }\n                            );\n                            const binaryImageData = Buffer.from(\n                                resp.data,\n                                \"binary\"\n                            );\n                            const base64ImageData =\n                                binaryImageData.toString(\"base64\");\n                            const src = `data:image/png;base64,${base64ImageData}`;\n                            img.imageData = src;\n                        }\n                        await localImages.saveImage(img);\n                    }\n                    if (statusChange) {\n                        setImages((images) => {\n                            return [\n                                ...images.map((image) => {\n                                    const updatedImage = updatedImages.find(\n                                        (i) => i.id === image.id\n                                    );\n                                    if (updatedImage) {\n                                        return updatedImage;\n                                    }\n                                    return image;\n                                }),\n                            ].sort(sortImages);\n                        });\n                    }\n                }\n            } catch (err) {\n                onError(\"Could not load images\");\n                console.error(err);\n            } finally {\n                lock = false;\n            }\n        };\n\n        const timerHandle = setInterval(() => {\n            pollImages(images);\n        }, 2 * 1000);\n        return () => {\n            clearInterval(timerHandle);\n        };\n    }, [api, images, search]);\n\n    // load parent image from saved images if an id is on the query string\n    useEffect(() => {\n        const loadParent = async () => {\n            const search = qs.parse(location.search, {\n                ignoreQueryPrefix: true,\n            });\n            if (search.parent) {\n                setLoadingParent(true);\n                try {\n                    const parentImage = await api.getImage(\n                        search.parent as string\n                    );\n                    if (parentImage.data) {\n                        const downloadUrls = await api.getImageDownloadUrls(\n                            parentImage.data.id\n                        );\n                        const resp = await anonymousClient.get(\n                            downloadUrls.data.image_url!,\n                            {\n                                responseType: \"arraybuffer\",\n                            }\n                        );\n                        const binaryImageData = Buffer.from(\n                            resp.data,\n                            \"binary\"\n                        );\n                        const base64ImageData =\n                            binaryImageData.toString(\"base64\");\n                        const src = `data:image/png;base64,${base64ImageData}`;\n                        setParentImage({\n                            ...parentImage.data,\n                            imageData: src,\n                        });\n                        history.push(\"/\");\n                    }\n                } finally {\n                    setLoadingParent(false);\n                }\n            }\n        };\n        loadParent();\n    }, [location.search]);\n\n    const isPendingOrProcessing = (image: LocalImage) => {\n        return (\n            image.status === StatusEnum.Pending ||\n            image.status === StatusEnum.Processing\n        );\n    };\n\n    const sortImages = (a: LocalImage, b: LocalImage) => {\n        // pending and processing images always come first\n        if (isPendingOrProcessing(a) && !isPendingOrProcessing(b)) {\n            return -1;\n        } else if (!isPendingOrProcessing(a) && isPendingOrProcessing(b)) {\n            return 1;\n        }\n        // if the parent is the same, sort by score descending\n        // otherwise, sort by updated_at\n        if (\n            a.parent === b.parent &&\n            a.params.prompt == b.params.prompt &&\n            a.status !== StatusEnum.Pending &&\n            b.status !== StatusEnum.Pending\n        ) {\n            // if the score is the same, sort by updated_at\n            let aScore = a.score;\n            let bScore = b.score;\n            // working around a bug where negative score was assigned\n            // for an empty negative prompt.\n            if (a.params.prompt!.trim() !== \"\") {\n                aScore = aScore - a.negative_score;\n            }\n            if (b.params.prompt!.trim() !== \"\") {\n                bScore = bScore - b.negative_score;\n            }\n            if (aScore == bScore) {\n                return b.updated_at - a.updated_at;\n            }\n            return bScore - aScore;\n        }\n\n        return b.updated_at - a.updated_at;\n    };\n\n    const onLoadMore = async () => {\n        // get the minimum updated_at from images\n        let minUpdatedAt = moment().valueOf();\n        images.forEach((image) => {\n            minUpdatedAt = Math.min(minUpdatedAt, image.updated_at);\n        });\n        // load images in descending order from updated_at\n        let resp = await localImages.listImages(\n            minUpdatedAt - 1,\n            \"prev\",\n            100,\n            search\n        );\n        if (resp.length > 0) {\n            // combine images with new images and sort by updated_at descending\n            setImages((images) => {\n                // filtering is required due to a race condition\n                const imagesById = images.reduce((acc, image) => {\n                    acc[image.id] = image;\n                    return acc;\n                }, {} as { [key: string]: LocalImage });\n                resp = resp.filter((image) => !imagesById[image.id]);\n                return [...images, ...resp]\n                    .filter((image) => !image.deleted_at)\n                    .sort(sortImages);\n            });\n        } else {\n            setHasMore(false);\n        }\n    };\n\n    const onDelete = async (image: LocalImage) => {\n        try {\n            // await api.deleteImage(image.id);\n            await localImages.deleteImage(image.id);\n            setImages((images) => {\n                return images.filter((i) => i.id !== image.id);\n            });\n            history.push(\"/\");\n        } catch (e) {\n            console.error(e);\n            onError(\"Error deleting image\");\n        }\n    };\n\n    const onFork = async (image: LocalImage) => {\n        setParentImage(image);\n        // setSelectedImage(null);\n        history.push(\"/\");\n        window.scrollTo(0, 0);\n    };\n\n    const onSave = async (image: LocalImage) => {\n        setSavingImage(true);\n        try {\n            history.push(\"/\");\n            const createInput: CreateImageInput = {\n                count: 1,\n                // encoded_image: image.imageData!.split(\",\")[1],\n                params: image.params,\n                status: StatusEnum.Saved,\n                temporary: false,\n                label: \"\",\n                model: image.model,\n            };\n\n            const encodedImage = image.imageData!.split(\",\")[1];\n\n            // convert base64 to binary\n            const binaryImageData = Buffer.from(encodedImage, \"base64\");\n            const encodedThumbnail = await createEncodedThumbnail(encodedImage);\n            const binaryThumbnailData = Buffer.from(encodedThumbnail, \"base64\");\n\n            const createResp = await api.createImage(createInput);\n            const imageId = createResp.data.images![0].id;\n            const uploadUrls = await api.getImageUploadUrls(imageId);\n            await anonymousClient.put(\n                uploadUrls.data.thumbnail_url!,\n                binaryThumbnailData,\n                {\n                    headers: {\n                        \"Content-Type\": \"image/png\",\n                    },\n                    onUploadProgress: (progressEvent: any) => {\n                        const percentCompleted =\n                            progressEvent.loaded / progressEvent.total;\n                        setUploadingProgress(percentCompleted / 2);\n                    },\n                }\n            );\n            await anonymousClient.put(\n                uploadUrls.data.image_url!,\n                binaryImageData,\n                {\n                    headers: {\n                        \"Content-Type\": \"image/png\",\n                    },\n                    onUploadProgress: (progressEvent: any) => {\n                        const percentCompleted =\n                            progressEvent.loaded / progressEvent.total;\n                        setUploadingProgress(percentCompleted / 2 + 0.5);\n                    },\n                }\n            );\n\n            await localImages.hardDeleteImage(image.id);\n            setImages((images) => {\n                return images.filter((i) => i.id !== image.id);\n            });\n            setSuccess(\"Image saved\");\n            setSuccessTime(moment().valueOf());\n        } catch (e) {\n            console.error(e);\n            onError(\"Error saving image\");\n        } finally {\n            setSavingImage(false);\n        }\n    };\n\n    const onEdit = async (image: LocalImage) => {\n        history.push(`/image-editor/${image.id}`);\n    };\n\n    const onThumbnailClicked = (image: LocalImage) => {\n        // setSelectedImage(image);\n        if (bulkDeleteSelecting) {\n            setBulkDeleteIds({\n                ...bulkDeleteIds,\n                [image.id]: !bulkDeleteIds[image.id],\n            });\n        } else {\n            history.push(`/images/${image.id}`);\n        }\n    };\n\n    const handleCancelFork = () => {\n        setParentImage(null);\n        window.scrollTo(0, 0);\n    };\n\n    const onConfirmBulkDelete = async () => {\n        try {\n            setBulkDeleting(true);\n            const promises = Object.keys(bulkDeleteIds).map((id) => {\n                return localImages.deleteImage(id);\n            });\n            await Promise.all(promises);\n            setImages((images) => {\n                return images.filter((image) => !bulkDeleteIds[image.id]);\n            });\n            setBulkDeleteIds({});\n            setBulkDeleteSelecting(false);\n        } catch (e) {\n            console.error(e);\n            onError(\"Error deleting images\");\n        } finally {\n            setBulkDeleting(false);\n        }\n    };\n\n    const completedOrSavedImages = images.filter((image) => {\n        return (\n            !image.deleted_at &&\n            (image.status === StatusEnum.Completed ||\n                image.status === StatusEnum.Saved)\n        );\n    });\n\n    const pendingOrProcessingImages = images.filter(\n        (image) =>\n            !image.deleted_at &&\n            (image.status === StatusEnum.Pending ||\n                image.status === StatusEnum.Processing)\n    );\n\n    const pendingImages = pendingOrProcessingImages.filter(\n        (image) => image.status === StatusEnum.Pending\n    );\n\n    const processingImages = pendingOrProcessingImages.filter(\n        (image) => image.status === StatusEnum.Processing\n    );\n\n    return (\n        <>\n            <h1 style={{ fontSize: \"40px\", textAlign: \"left\" }}>\n                Welcome to AiBrush - Home\n            </h1>\n\n            <ErrorNotification message={err} timestamp={errTime} />\n            <SuccessNotification message={success} timestamp={successTime} />\n\n            <ImagePrompt\n                api={api}\n                assetsUrl={assetsUrl}\n                creating={creating}\n                onSubmit={onSubmit}\n                onEdit={onEditNewImage}\n                parent={parentImage}\n                onCancel={() => handleCancelFork()}\n            />\n            <hr />\n\n            <div\n                className=\"homepage-images\"\n                style={{ marginTop: \"48px\", paddingBottom: \"48px\" }}\n            >\n                <div style={{ textAlign: \"left\" }}>\n                    <div\n                        className=\"input-group\"\n                        style={{ marginBottom: \"16px\" }}\n                    >\n                        <input\n                            style={{}}\n                            value={searchDebounce}\n                            type=\"search\"\n                            className=\"form-control image-search\"\n                            placeholder=\"Search...\"\n                            onChange={(e) => setSearchDebounce(e.target.value)}\n                        />\n\n                        <div\n                            style={{\n                                float: \"right\",\n                            }}\n                        >\n                            {!bulkDeleteSelecting && (\n                                <>\n                                    <button\n                                        style={{ display: \"inline\" }}\n                                        className=\"btn btn-primary image-popup-button\"\n                                        onClick={() =>\n                                            setCensorNSFW(!censorNSFW)\n                                        }\n                                    >\n                                        {!censorNSFW && (\n                                            <i className=\"fas fa-eye\"></i>\n                                        )}\n                                        {censorNSFW && (\n                                            <i className=\"fas fa-eye-slash\"></i>\n                                        )}\n                                    </button>\n                                    <Dropdown\n                                        style={{\n                                            display: \"inline\",\n                                            marginLeft: \"8px\",\n                                        }}\n                                    >\n                                        <Dropdown.Toggle variant=\"danger\">\n                                            <i className=\"fas fa-trash\"></i>\n                                        </Dropdown.Toggle>\n\n                                        <Dropdown.Menu>\n                                            <Dropdown.Item\n                                                onClick={() =>\n                                                    setBulkDeleteSelecting(true)\n                                                }\n                                            >\n                                                Bulk Delete\n                                            </Dropdown.Item>\n                                            <Dropdown.Item\n                                                onClick={() =>\n                                                    history.push(\n                                                        \"/local-deleted-images\"\n                                                    )\n                                                }\n                                            >\n                                                View Deleted Images\n                                            </Dropdown.Item>\n                                        </Dropdown.Menu>\n                                    </Dropdown>\n                                </>\n                            )}\n                            {bulkDeleteSelecting && (\n                                <>\n                                    <button\n                                        className=\"btn btn-primary image-popup-button\"\n                                        onClick={() => {\n                                            setBulkDeleteSelecting(false);\n                                            setBulkDeleteIds({});\n                                        }}\n                                    >\n                                        Cancel\n                                    </button>\n                                    <button\n                                        style={{ marginLeft: \"8px\" }}\n                                        className=\"btn image-popup-delete-button\"\n                                        onClick={() => {\n                                            onConfirmBulkDelete();\n                                        }}\n                                    >\n                                        Delete\n                                    </button>\n                                </>\n                            )}\n                        </div>\n                    </div>\n                </div>\n                <InfiniteScroll\n                    dataLength={images.length}\n                    next={onLoadMore}\n                    hasMore={hasMore}\n                    loader={\n                        <>\n                            <hr />\n                            <h4>Loading...</h4>\n                        </>\n                    }\n                >\n                    {pendingOrProcessingImages.length > 0 && (\n                        <PendingImagesThumbnail\n                            pendingCount={pendingImages.length}\n                            processingCount={processingImages.length}\n                            onClick={() => {\n                                setShowPendingImages(true);\n                            }}\n                        />\n                    )}\n                    {completedOrSavedImages.map((image) => (\n                        <ImageThumbnail\n                            key={image.id}\n                            image={image}\n                            assetsUrl={assetsUrl}\n                            onClick={onThumbnailClicked}\n                            bulkDelete={\n                                bulkDeleteSelecting && bulkDeleteIds[image.id]\n                            }\n                            censorNSFW={censorNSFW}\n                        />\n                    ))}\n                </InfiniteScroll>\n            </div>\n\n            {selectedImage && (\n                <ImagePopup\n                    assetsUrl={assetsUrl}\n                    image={selectedImage}\n                    onClose={() => history.push(\"/\")}\n                    onDelete={(image) => {\n                        onDelete(image);\n                        setImages(images.filter((i) => i.id !== image.id));\n                        history.push(\"/\");\n                    }}\n                    onFork={(image) => {\n                        onFork(image);\n                        history.push(\"/\");\n                    }}\n                    onEdit={(image) => {\n                        onEdit(image);\n                    }}\n                    onSave={(image) => {\n                        onSave(image);\n                    }}\n                    onNSFW={onNSFW}\n                    censorNSFW={censorNSFW}\n                />\n            )}\n            <ScrollToTop />\n            <BusyModal show={creating} title=\"Creating images\">\n                <p>Please wait while we create your image.</p>\n                <ProgressBar progress={uploadProgress} />\n            </BusyModal>\n            <BusyModal show={bulkDeleting} title=\"Deleting images\">\n                <p>Please wait while we delete your images.</p>\n            </BusyModal>\n            <BusyModal show={loadingParent} title=\"Loading parent image\">\n                <p>Please wait while we load the parent image.</p>\n            </BusyModal>\n            <BusyModal show={savingImage} title=\"Saving image\">\n                {/* bootstrap progress bar for uploadProgress (0-1 value) */}\n                <ProgressBar progress={uploadProgress} />\n            </BusyModal>\n            <PendingImages\n                images={pendingOrProcessingImages}\n                onCancel={() => setShowPendingImages(false)}\n                show={showPendingImages}\n                onDeleteImage={(image) => {\n                    onDelete(image);\n                    setImages(images.filter((i) => i.id !== image.id));\n                }}\n            />\n            <OutOfCreditsModal\n                show={outOfCredits}\n                onHide={() => setOutOfCredits(false)}\n            />\n            <PaymentStatusModal paymentStatus={paymentStatus} />\n        </>\n    );\n};\n","import React, { FC, useEffect, useRef, useState } from \"react\";\n\nimport { aspectRatios, DEFAULT_ASPECT_RATIO, getClosestAspectRatio } from \"../lib/aspecRatios\";\n\ninterface Props {\n    aspectRatio: number;\n    onChange: (aspectRatio: number) => void;\n    disabled?: boolean;\n}\n\nexport const AspectRatioSelector: FC<Props> = ({ aspectRatio, onChange, disabled }) => {\n    const aspectRatioDetails = aspectRatios[aspectRatio];\n    return (\n        <div className=\"form-group\">\n            <div\n                style={{\n                    minHeight: \"140px\",\n                    display: \"flex\",\n                    alignItems: \"center\",\n                }}\n            >\n                {/* aspect ratio slider, goes from 0 -> aspectRatios.length - 1 */}\n                <div\n                    style={{\n                        width: aspectRatioDetails.width / 8,\n                        height: aspectRatioDetails.height / 8,\n                        // dotted line options: dotted, dashed, solid, double, groove, ridge, inset, outset, none, hidden\n                        border: \"1px dashed white\",\n                        margin: \"auto\",\n                    }}\n                ></div>\n            </div>\n            <label style={{width: \"100%\"}}>\n                Aspect Ratio\n                <small className=\"form-text text-muted\" style={{float: \"right\"}}>\n                    {aspectRatioDetails.displayName}\n                </small>\n            </label>\n            <input\n                type=\"range\"\n                disabled={disabled}\n                className=\"form-control-range\"\n                min={0}\n                max={aspectRatios.length - 1}\n                value={aspectRatio}\n                onChange={(e) => {\n                    onChange(parseInt(e.target.value));\n                }}\n            />\n        </div>\n    );\n};\n","import React, { FC, useState, useEffect } from \"react\";\nimport { ChromePicker } from \"react-color\";\n\ninterface Props {\n    selectedColor: string;\n    color: string;\n    onClick: (color: string) => void;\n    onColorSelected?: (color: string) => void;\n}\n\nexport const PaletteButton: FC<Props> = ({\n    selectedColor,\n    color,\n    onClick,\n    onColorSelected,\n}) => {\n    const [displayColorPicker, setDisplayColorPicker] = useState(false);\n    const [tmpColor, setTmpColor] = useState(color);\n\n    useEffect(() => {\n        setTmpColor(color);\n    }, [color]);\n\n    const popover: React.CSSProperties = {\n        position: \"absolute\",\n        zIndex: 2,\n    };\n\n    let className = \"palette-button\";\n    if (selectedColor === color) {\n        className += \" selected\";\n    } else if (color == \"#000000\") {\n        className += \" black\";\n    }\n    return (\n        <>\n            <div\n                className={className}\n                style={{ backgroundColor: color }}\n                onClick={() => onClick(color)}\n                onDoubleClick={() => setDisplayColorPicker(!displayColorPicker)}\n            ></div>\n            {onColorSelected && displayColorPicker ? (\n                <div style={popover}>\n                    {/* <div style={cover} onClick={handleClose} /> */}\n                    <ChromePicker\n                        color={tmpColor}\n                        onChange={(color) => setTmpColor(color.hex)}\n                        onChangeComplete={(color) => setTmpColor(color.hex)}\n                    />\n                    <button\n                        className=\"btn btn-primary\"\n                        style={{ marginRight: \"8px\", marginLeft: \"16px\" }}\n                        onClick={() => {\n                            onColorSelected(tmpColor);\n                            setDisplayColorPicker(false);\n                        }}\n                    >\n                        <i className=\"fas fa-check\" />\n                    </button>\n                    <button\n                        className=\"btn btn-primary\"\n                        onClick={() => setDisplayColorPicker(false)}\n                    >\n                        <i className=\"fas fa-times\" />\n                    </button>\n                </div>\n            ) : null}\n        </>\n    );\n};\n","import React, { FC, useEffect, useState } from \"react\";\n\ninterface Props {\n    pendingCount: number;\n    processingCount: number;\n    onClick?: () => void;\n}\n\nexport const PendingImagesThumbnail: FC<Props> = ({\n    pendingCount,\n    processingCount,\n    onClick,\n}) => {\n    const [hover, setHover] = useState(false);\n\n    // on mouse in/out, set hover state\n    const onMouseEnter = () => setHover(true);\n    const onMouseLeave = () => setHover(false);\n    let icon = (\n        <i style={{ marginTop: \"20px\" }} className=\"fa fa-hourglass-half\"></i>\n    );\n\n    if (processingCount > 0) {\n        icon = (\n            <i style={{ marginTop: \"20px\" }} className=\"fa fa-cog fa-spin\"></i>\n        );\n    }\n\n    return (\n        <div\n            onMouseEnter={onMouseEnter}\n            onMouseLeave={onMouseLeave}\n            style={{\n                backgroundImage: `url(/images/default.png)`,\n                backgroundSize: \"contain\",\n                width: \"128px\",\n                height: \"128px\",\n                margin: \"8px\",\n                float: \"left\",\n                cursor: \"pointer\",\n            }}\n            onClick={onClick}\n        >\n            {hover && (\n                <div\n                    style={{\n                        background: \"rgba(255, 255, 255, 0.5)\",\n                        color: \"black\",\n                        width: \"100%\",\n                        height: \"100%\",\n                        lineHeight: \"1\",\n                        fontSize: \"20px\",\n                    }}\n                >\n                    <br/>\n                    {pendingCount > 0 && (\n                        <div style={{ marginBottom: \"24px\" }}>\n                            {pendingCount} pending\n                        </div>\n                    )}\n                    {processingCount > 0 && (\n                        <div>{processingCount} processing</div>\n                    )}\n                </div>\n            )}\n            {!hover && (\n                <div\n                    style={{\n                        background: \"rgba(255, 255, 255, 0.3)\",\n                        color: \"#555\",\n                        width: \"100%\",\n                        height: \"100%\",\n                        fontSize: \"80px\",\n                    }}\n                >\n                    {icon}\n                </div>\n            )}\n        </div>\n    );\n};\n","import React, {FC, useEffect, useState} from \"react\";\nimport { Modal } from \"react-bootstrap\";\nimport { Image } from \"../client/api\";\n\ninterface Props {\n    images: Image[];\n    onDeleteImage: (image: Image) => void;\n    onCancel: () => void;\n    show: boolean;\n}\n\nexport const PendingImages: FC<Props> = ({\n    images,\n    onDeleteImage,\n    onCancel,\n    show,\n}) => {\n\n    function imageIcon(image: Image) {\n        if (image.status === \"pending\") {\n            return <i className=\"fa fa-hourglass-half\"></i>;\n        } else if (image.status === \"processing\") {\n            return <i className=\"fa fa-cog fa-spin\"></i>;\n        }\n    }\n\n    const truncate = (phrases: string) => {\n        if (phrases.length > 35) {\n            return phrases.substring(0, 35) + \"...\";\n        }\n        return phrases;\n    }\n\n    // refactor from table to div layout\n    const pendingDiv = (\n        <div>\n            <div style={{marginBottom: \"8px\"}}>\n                <div style={{display: \"inline-block\", width: \"100px\"}}>\n                    Status\n                </div>\n                <div style={{display: \"inline-block\", width: \"250px\"}}>\n                    Phrases\n                </div>\n                <div style={{display: \"inline-block\", width: \"100px\"}}>\n                    Action\n                </div>\n            </div>\n            {images.map((image) => (\n                <div key={image.id} style={{marginBottom: \"8px\"}}>\n                    <div style={{display: \"inline-block\", width: \"100px\"}}>\n                        {imageIcon(image)}&nbsp;{image.status}\n                    </div>\n                    <div style={{display: \"inline-block\", width: \"250px\"}}>\n                        {/* if more than 30 chars, truncate with ellipsis*/}\n                        {truncate(image.params.prompt || \"\")}\n                    </div>\n                    <div style={{display: \"inline-block\", width: \"100px\"}}>\n                        <button\n                            className=\"btn btn-danger btn-sm image-popup-delete-button\"\n                            onClick={() => onDeleteImage(image)}\n                        >\n                            <i className=\"fa fa-trash\"></i>&nbsp;Delete\n                        </button>\n                    </div>\n                </div>\n            ))}\n        </div>\n    );\n\n    return (\n        <Modal show={show} onHide={onCancel}>\n            <Modal.Header closeButton>\n                <Modal.Title>Pending Images</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                {pendingDiv}\n            </Modal.Body>\n            <Modal.Footer>\n                <button className=\"btn btn-secondary\" onClick={onCancel}>\n                    Close\n                </button>\n            </Modal.Footer>\n        </Modal>\n    );\n};","import React, { useState } from 'react';\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\n\ninterface CopyToClipboardIconProps {\n  text: string;\n}\n\nconst CopyToClipboardIcon: React.FC<CopyToClipboardIconProps> = ({ text }) => {\n  const [copied, setCopied] = useState(false);\n\n  const handleCopy = () => {\n    setCopied(true);\n    setTimeout(() => setCopied(false), 5000); // Reset icon after 5 seconds\n  };\n\n  return (\n    <CopyToClipboard text={text} onCopy={handleCopy}>\n      <span style={{cursor: \"pointer\", marginLeft: \"8px\"}}>\n        {/* <FontAwesomeIcon icon={copied ? faCheck : faCopy} style={{ color: copied ? 'green' : undefined }} /> */}\n        <i className={`fas fa-${copied ? 'check' : 'copy'}`} style={{ color: copied ? 'green' : undefined }} />\n      </span>\n    </CopyToClipboard>\n  );\n};\n\nexport default CopyToClipboardIcon;\n","import React, { FC, useEffect, useRef, useState } from \"react\";\nimport { Modal } from \"react-bootstrap\";\nimport { CreateImageInput, Image, StatusEnum } from \"../client/api\";\nimport { LocalImage } from \"../lib/localImagesStore\";\nimport CopyToClipboard from \"react-copy-to-clipboard\";\nimport CopyToClipboardIcon from \"./CopyToClipboardIcon\";\n\ninterface ImagePopupProps {\n    assetsUrl: string;\n    image: LocalImage;\n    censorNSFW: boolean;\n    onClose: () => void;\n    onDelete?: (image: LocalImage) => void;\n    onFork?: (image: LocalImage) => void;\n    onEdit?: (image: LocalImage) => void;\n    onNSFW?: (image: LocalImage, nsfw: boolean) => void;\n    onSave?: (image: LocalImage) => void;\n}\n\nexport const ImagePopup: FC<ImagePopupProps> = ({\n    assetsUrl,\n    image,\n    censorNSFW,\n    onClose,\n    onDelete,\n    onFork,\n    onEdit,\n    onNSFW,\n    onSave,\n}) => {\n    const img = useRef<HTMLImageElement>(null);\n    let src = `${assetsUrl}/${image.id}.image.png?updated_at=${image.updated_at}`;\n    if (image.imageData) {\n        src = image.imageData;\n    }\n    let score = image.score;\n    if (image.params.negative_prompt && image.negative_score != 0) {\n        score -= image.negative_score;\n    }\n    const [showNSFW, setShowNSFW] = useState(false);\n\n    const statusBadge = (status: string) => {\n        const displayStatus = status.charAt(0).toUpperCase() + status.slice(1);\n        let icon = \"fa fa-question-circle\";\n        switch (status) {\n            case StatusEnum.Pending:\n                icon = \"fas fa-hourglass-half\";\n                break;\n            case StatusEnum.Processing:\n                icon = \"fas fa-cog fa-spin\";\n                break;\n            case StatusEnum.Completed:\n                icon = \"fas fa-check\";\n                break;\n            case StatusEnum.Saved:\n                icon = \"fas fa-save\";\n                break;\n            case StatusEnum.Error:\n                icon = \"fas fa-exclamation-circle\";\n                break;\n        }\n        return (\n            <>\n                <span style={{ fontSize: \"24px\" }}>\n                    <i\n                        className={`${icon} status-badge status-badge-${status}`}\n                        style={{\n                            fontSize: \"10px\",\n                            position: \"relative\",\n                            top: \"-1px\",\n                        }}\n                    ></i>\n                    &nbsp;{displayStatus}\n                </span>\n            </>\n        );\n    };\n\n    useEffect(() => {\n        if (!img.current) {\n            return;\n        }\n        img.current.onerror = () => {\n            if (!img.current) {\n                return;\n            }\n            img.current.src = \"/images/default.png\";\n        };\n    }, [img]);\n\n    let title = image.label;\n    if (!title) {\n        title = image.params.prompt!;\n    }\n    if (title.indexOf(\",\") > 0) {\n        title = title.substring(0, title.indexOf(\",\"));\n    }\n\n    // if open, show modal with image\n    return (\n        <Modal show={true} onHide={onClose} size=\"xl\">\n            <Modal.Header closeButton>\n                <Modal.Title>{title}</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <img\n                    ref={img}\n                    style={{\n                        maxWidth: \"100%\",\n                        maxHeight: \"1024px\",\n                        display: \"block\",\n                        marginLeft: \"auto\",\n                        marginRight: \"auto\",\n                        filter:\n                            image.nsfw && censorNSFW && !showNSFW\n                                ? \"blur(30px)\"\n                                : \"\",\n                    }}\n                    id={`image-popup-${image.id}`}\n                    src={src}\n                    alt={image.label}\n                />\n                {/* List these fields: status, iterations, phrases */}\n                <div className=\"row\">\n                    <div className=\"col-lg-12\"></div>\n                </div>\n                {/* controls */}\n                <div className=\"row\">\n                    <div className=\"col-lg-12\">\n                        <div\n                            className=\"image-popup-controls\"\n                            style={{ marginTop: \"40px\" }}\n                        >\n                            {statusBadge(image.status)}\n                            <div style={{ float: \"right\" }}>\n                                {onFork &&\n                                    (image.status === StatusEnum.Saved ||\n                                        image.status ===\n                                            StatusEnum.Completed) && (\n                                        <button\n                                            className=\"btn btn-secondary btn-sm image-popup-button\"\n                                            onClick={() => onFork(image)}\n                                            style={{ marginRight: \"5px\" }}\n                                        >\n                                            <i className=\"fas fa-code-branch\"></i>\n                                            &nbsp;VARIATIONS\n                                        </button>\n                                    )}\n                                {onDelete && (\n                                    <button\n                                        className=\"btn btn-danger btn-sm image-popup-delete-button\"\n                                        onClick={() =>\n                                            onDelete && onDelete(image)\n                                        }\n                                        style={{ marginRight: \"5px\" }}\n                                    >\n                                        <i className=\"fas fa-trash-alt\"></i>\n                                        &nbsp;DELETE\n                                    </button>\n                                )}\n                                {onEdit && (\n                                    <button\n                                        className=\"btn btn-primary btn-sm image-popup-button edit-button\"\n                                        onClick={() => onEdit && onEdit(image)}\n                                        style={{ marginRight: \"5px\" }}\n                                    >\n                                        <i className=\"fas fa-edit\"></i>\n                                        &nbsp;EDIT\n                                    </button>\n                                )}\n                                {onSave && (\n                                    <button\n                                        className=\"btn btn-primary btn-sm image-popup-button\"\n                                        onClick={() => onSave && onSave(image)}\n                                        style={{ marginRight: \"5px\" }}\n                                    >\n                                        <i className=\"fas fa-save\"></i>\n                                        &nbsp;SAVE\n                                    </button>\n                                )}\n                                {image.nsfw && censorNSFW && (\n                                    <button\n                                        className=\"btn btn-primary btn-sm image-popup-button\"\n                                        onClick={() => setShowNSFW(!showNSFW)}\n                                        style={{ marginRight: \"5px\" }}\n                                    >\n                                        <i className=\"fas fa-eye\"></i>\n                                        &nbsp;{showNSFW ? \"HIDE\" : \"SHOW\"}\n                                    </button>\n                                )}\n                            </div>\n                        </div>\n                        <div\n                            className=\"image-popup-controls\"\n                            style={{ marginTop: \"28px\", marginBottom: \"85px\" }}\n                        >\n                            {/* Horde interface doesn't support score yet */}\n                            {/* <div>\n                                Similarity to prompt: {(score * 200).toFixed(2)}\n                                %\n                            </div> */}\n                            <div>\n                                Image dimensions: {image.params.width} x{\" \"}\n                                {image.params.height}\n                            </div>\n                            <div>Model: {image.model}</div>\n                            {image.nsfw && (\n                                <>\n                                    <div>\n                                        {/* alert warning icon */}\n                                        <i\n                                            className=\"fas fa-exclamation-triangle\"\n                                            style={{\n                                                color: \"orange\",\n                                                fontSize: \"18px\",\n                                                position: \"relative\",\n                                                top: \"2px\",\n                                            }}\n                                        ></i>\n                                        &nbsp;May contain NSFW content\n                                    </div>\n                                    {onNSFW && (\n                                        <a\n                                            href=\"javascript:void(0)\"\n                                            onClick={() => onNSFW(image, false)}\n                                        >\n                                            Mark as Safe for Work\n                                        </a>\n                                    )}\n                                </>\n                            )}\n                            {image.params.seed && (\n                                <div>Seed: {image.params.seed}</div>\n                            )}\n                            {!image.nsfw && (\n                                <>\n                                    <div>\n                                        {/* green check icon */}\n                                        <i\n                                            className=\"fas fa-check\"\n                                            style={{\n                                                color: \"green\",\n                                                fontSize: \"18px\",\n                                                position: \"relative\",\n                                                top: \"2px\",\n                                            }}\n                                        ></i>\n                                        &nbsp;Safe for Work\n                                    </div>\n                                    {onNSFW && (\n                                        <a\n                                            href=\"javascript:void(0)\"\n                                            onClick={() => onNSFW(image, true)}\n                                        >\n                                            Mark as Not Safe for Work\n                                        </a>\n                                    )}\n                                </>\n                            )}\n                            <div style={{marginTop: \"8px\"}}>\n                                Prompt: {image.params.prompt}\n                                <CopyToClipboardIcon text={image.params.prompt!} />\n                            </div>\n                            <div style={{marginTop: \"8px\"}}>\n                                Negative Prompt: {image.params.negative_prompt}\n                                <CopyToClipboardIcon text={image.params.negative_prompt!} />\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </Modal.Body>\n        </Modal>\n    );\n};\n","import React, { FC, useState, useEffect, useRef } from \"react\";\nimport axios from \"axios\";\nimport { Prompt } from \"react-router\";\nimport { loadImageAsync } from \"../../lib/loadImage\";\n\nimport { sleep } from \"../../lib/sleep\";\nimport { defaultArgs } from \"../../components/ImagePrompt\";\nimport { Tool, BaseTool } from \"./tool\";\nimport { Renderer } from \"./renderer\";\nimport { Cursor, Rect } from \"./models\";\nimport {\n    AIBrushApi,\n    CreateImageInput,\n    Image as APIImage,\n    ImageList,\n    StatusEnum,\n} from \"../../client\";\nimport { ZoomHelper } from \"./zoomHelper\";\nimport { getClosestAspectRatio } from \"../../lib/aspecRatios\";\nimport { convertPNGToJPG, ImageUtilWorker, ImageWorkerRequest, loadImageDataElement } from \"../../lib/imageutil\";\nimport { SelectionTool, Controls as SelectionControls } from \"./selection-tool\";\nimport { getUpscaleLevel } from \"../../lib/upscale\";\nimport { ApiSocket, NOTIFICATION_IMAGE_UPDATED } from \"../../lib/apisocket\";\nimport moment from \"moment\";\nimport { supportedModels } from \"../../lib/supportedModels\";\nimport { ProgressBar } from \"../../components/ProgressBar\";\nimport { calculateImagesCost } from \"../../lib/credits\";\nimport { CostIndicator } from \"../../components/CostIndicator\";\nimport ModelSelector from \"../../components/ModelSelector\";\nimport { PencilTool } from \"./pencil-tool\";\nimport { MaskEditor } from \"./mask-editor-controls\";\nimport { ResetToDefaultIcon } from \"../../components/ResetToDefaultIcon\";\n\nconst anonymousClient = axios.create();\n\ntype EnhanceToolState =\n    | \"select\"\n    | \"default\"\n    | \"uploading\"\n    | \"processing\"\n    | \"confirm\"\n    | \"erase\"\n    | \"mask\";\n\n// eraser width modifier adds a solid core with a feather edge\n// equal to the what is used on enhanced selections\nconst eraserWidthModifier = 1.3;\n\ninterface ImageWithData extends APIImage {\n    data?: ImageData;\n}\n\nexport class EnhanceTool extends BaseTool implements Tool {\n    readonly selectionTool: SelectionTool;\n    readonly pencilTool: PencilTool;\n\n    private prompt: string = \"\";\n    private negativePrompt: string = \"\";\n    private model: string = \"Epic Diffusion\";\n    private count: number = 4;\n    private variationStrength: number = 0.35;\n    private _dirty = false;\n    private worker: ImageUtilWorker;\n    private idCounter = 0;\n\n    private _state: EnhanceToolState = \"default\";\n    private stateHandler: (state: EnhanceToolState) => void = () => {};\n    private selectionControlsListener: (show: boolean) => void = () => {};\n    private maskHandler: (isMasked: boolean) => void = () => {};\n\n    private imageData: Array<ImageData> = [];\n    private selectedImageDataIndex: number = -1;\n    private selectedImageData: ImageData | null = null;\n    private panning = false;\n    private erasing = false;\n    private progressListener?: (progress: number) => void;\n    private errorListener?: (error: string | null) => void;\n    private dirtyListener?: (dirty: boolean) => void;\n\n    set dirty(dirty: boolean) {\n        this._dirty = dirty;\n        if (this.dirtyListener) {\n            this.dirtyListener(dirty);\n        }\n    }\n\n    get dirty() {\n        return this._dirty;\n    }\n\n    onDirty(listener: (dirty: boolean) => void): void {\n        this.dirtyListener = listener;\n    }\n\n    onError(handler: (error: string | null) => void) {\n        this.errorListener = handler;\n    }\n\n    private notifyError(error: string | null) {\n        if (this.errorListener) {\n            this.errorListener(error);\n        }\n    }\n\n    get state(): EnhanceToolState {\n        return this._state;\n    }\n\n    set state(state: EnhanceToolState) {\n        if (state !== this._state) {\n            this.renderer.setCursor(undefined);\n            if (this._state == \"select\") {\n                this.selectionTool.destroy();\n            }\n            // if (this._state === \"mask\") {\n            //     this.renderer.setCursor(undefined);\n            // }\n            // if (this._state === \"erase\") {\n            //     this.renderer.setCursor(undefined);\n            // }\n            this._state = state;\n            this.stateHandler(state);\n            if (state == \"confirm\") {\n                this.selectionControlsListener(true);\n            } else {\n                this.selectionControlsListener(false);\n                if (state == \"select\") {\n                    this.selectionTool.updateArgs({\n                        ...this.selectionTool.getArgs(),\n                        outpaint: false,\n                    });\n                }\n            }\n        }\n    }\n\n    selectSupported(): boolean {\n        return !(\n            getUpscaleLevel(\n                this.renderer.getWidth(),\n                this.renderer.getHeight()\n            ) === 0 && this.renderer.getWidth()\n        );\n    }\n\n    constructor(renderer: Renderer) {\n        super(renderer, \"enhance\");\n        this.selectionTool = new SelectionTool(renderer);\n        this.pencilTool = new PencilTool(\n            renderer,\n            \"mask\",\n            \"#FFFFFF\",\n            \"mask-editor\"\n        );\n        if (this.selectSupported()) {\n            this.state = \"select\";\n        } else {\n            this.state = \"default\";\n        }\n        let selectionArgs = this.selectionTool.getArgs();\n        if (!this.selectSupported()) {\n            selectionArgs = {\n                ...selectionArgs,\n                selectionOverlay: {\n                    x: 0,\n                    y: 0,\n                    width: this.renderer.getWidth(),\n                    height: this.renderer.getHeight(),\n                },\n            };\n        }\n        this.selectionTool.updateArgs(selectionArgs);\n        this.pencilTool.updateArgs({\n            ...this.pencilTool.getArgs(),\n            brushColor: \"#FFFFFF\",\n        });\n        // unset the cursor from the pencil tool (hack)\n        this.renderer.setCursor(undefined);\n        this.worker = new ImageUtilWorker();\n    }\n\n    onMouseDown(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        if (this.state == \"select\") {\n            this.selectionTool.onMouseDown(event);\n            return;\n        }\n        if (this.state == \"mask\") {\n            this.pencilTool.onMouseDown(event);\n            return;\n        }\n        let { x, y } = this.zoomHelper.translateMouseToCanvasCoordinates(\n            event.nativeEvent.offsetX,\n            event.nativeEvent.offsetY\n        );\n        if (event.button === 1) {\n            this.panning = true;\n            return;\n        }\n        if (this.state == \"erase\" && this.selectedImageData) {\n            this.erasing = true;\n            // clone selected ImageData\n            this.selectedImageData = new ImageData(\n                this.selectedImageData.data.slice(),\n                this.selectedImageData.width,\n                this.selectedImageData.height\n            );\n\n            this.erasePoint(x, y);\n        }\n    }\n\n    // TODO: on erase cancel and on erase confirm\n    // either restore the image data from the array\n    // or overwrite the array with the new image data\n\n    private erasePoint(x: number, y: number) {\n        const selectionOverlay = this.renderer.getSelectionOverlay()!;\n        const baseWidth = Math.min(\n            selectionOverlay.width,\n            selectionOverlay.height\n        );\n        const eraserRadius = Math.floor((baseWidth / 8) * eraserWidthModifier);\n\n        const relX = x - selectionOverlay.x;\n        const relY = y - selectionOverlay.y;\n        const imageData = this.selectedImageData!;\n\n        const startX = Math.max(0, relX - eraserRadius);\n        const startY = Math.max(0, relY - eraserRadius);\n        const endX = Math.min(imageData.width, relX + eraserRadius);\n        const endY = Math.min(imageData.height, relY + eraserRadius);\n\n        // relX=64.28541697636388, relY=64.24464312259761, startX=0.28541697636387653, startY=0.24464312259760845, endX=128.28541697636388, endY=128.2446431225976\n\n        for (let i = startX; i < endX; i++) {\n            for (let j = startY; j < endY; j++) {\n                const index = (j * imageData.width + i) * 4;\n                const distance = Math.sqrt(\n                    Math.pow(i - relX, 2) + Math.pow(j - relY, 2)\n                );\n                if (distance < eraserRadius) {\n                    // set alpha to a linear gradient from the center,\n                    // 100% in the middle and 0% at the edge\n                    const alphaPct =\n                        (distance / eraserRadius) * eraserWidthModifier -\n                        (eraserWidthModifier - 1);\n\n                    const alpha = Math.min(\n                        Math.floor(alphaPct * 255),\n                        imageData.data[index + 3]\n                    );\n                    imageData.data[index + 3] = alpha;\n                }\n            }\n        }\n        this.renderer.setEditImage(imageData);\n    }\n\n    private updateCursor(x: number, y: number) {\n        if (this.state == \"erase\" && this.selectedImageData) {\n            const selectionOverlay = this.renderer.getSelectionOverlay()!;\n            const baseWidth = Math.min(\n                selectionOverlay.width,\n                selectionOverlay.height\n            );\n            const featherWidth = Math.floor(baseWidth / 8);\n            this.renderer.setCursor({\n                color: \"white\",\n                radius: featherWidth * eraserWidthModifier,\n                type: \"circle\",\n                x,\n                y,\n            });\n        } else {\n            this.renderer.setCursor({\n                color: \"white\",\n                radius: 10,\n                type: \"crosshairs\",\n                x,\n                y,\n            });\n        }\n    }\n\n    onMouseMove(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        if (this.state == \"select\") {\n            this.selectionTool.onMouseMove(event);\n            return;\n        }\n        if (this.state == \"mask\") {\n            this.pencilTool.onMouseMove(event);\n            return;\n        }\n        let { x, y } = this.zoomHelper.translateMouseToCanvasCoordinates(\n            event.nativeEvent.offsetX,\n            event.nativeEvent.offsetY\n        );\n        if (this.panning) {\n            this.zoomHelper.onPan(event);\n        }\n\n        this.updateCursor(x, y);\n        if (this.erasing) {\n            this.erasePoint(x, y);\n        }\n    }\n\n    onMouseUp(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        if (this.state == \"select\") {\n            this.selectionTool.onMouseUp(event);\n        }\n        if (this.state == \"mask\") {\n            this.pencilTool.onMouseUp(event);\n        }\n        this.panning = false;\n        this.erasing = false;\n    }\n\n    onMouseLeave(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>): void {\n        if (this.state == \"select\") {\n            this.selectionTool.onMouseLeave(event);\n        }\n        if (this.state == \"mask\") {\n            this.pencilTool.onMouseLeave(event);\n        }\n        this.panning = false;\n        this.erasing = false;\n    }\n\n    onWheel(event: WheelEvent) {\n        this.zoomHelper.onWheel(event);\n        let { x, y } = this.zoomHelper.translateMouseToCanvasCoordinates(\n            event.offsetX,\n            event.offsetY\n        );\n        this.updateCursor(x, y);\n    }\n\n    updateArgs(args: any) {\n        args = {\n            ...this.getArgs(),\n            ...args,\n        };\n        this.prompt = args.prompt || \"\";\n        this.negativePrompt = args.negativePrompt || \"\";\n        this.model = args.model || \"Epic Diffusion\";\n        this.count = args.count || 4;\n        this.variationStrength = args.variationStrength || 0.75;\n        console.log(\"updateArgs\", args);\n    }\n\n    onChangeState(handler: (state: EnhanceToolState) => void) {\n        this.stateHandler = handler;\n    }\n\n    onChangeMask(handler: (isMasked: boolean) => void) {\n        this.maskHandler = handler;\n    }\n\n    onShowSelectionControls(listener: (show: boolean) => void): void {\n        this.selectionControlsListener = listener;\n    }\n\n    onProgress(listener: (progress: number) => void): void {\n        this.progressListener = listener;\n    }\n\n    private newId(): string {\n        return `${this.idCounter++}`;\n    }\n\n    private async loadImageData(\n        api: AIBrushApi,\n        imageId: string,\n        maskData: ImageData | undefined,\n        selectionOverlay: Rect\n    ): Promise<ImageData> {\n        const imageElement = await loadImageDataElement(api, imageId);\n        const canvas = document.createElement(\"canvas\");\n        canvas.width = selectionOverlay.width;\n        canvas.height = selectionOverlay.height;\n        const ctx = canvas.getContext(\"2d\");\n        if (!ctx) {\n            throw new Error(\"Failed to get canvas context\");\n        }\n        ctx.drawImage(\n            imageElement,\n            0,\n            0,\n            selectionOverlay.width,\n            selectionOverlay.height\n        );\n        const imageData = ctx.getImageData(\n            0,\n            0,\n            selectionOverlay.width,\n            selectionOverlay.height\n        );\n        const id = this.newId();\n        const req: ImageWorkerRequest = {\n            id,\n            alphaMode: \"none\",\n            feather: true,\n            height: this.renderer.getHeight(),\n            width: this.renderer.getWidth(),\n            pixels: imageData.data,\n            selectionOverlay,\n        }\n        if (maskData) {\n            req.alphaMode = \"mask\";\n            req.alphaPixels = maskData.data;\n        }\n        const resp = await this.worker.processRequest(req);\n        const updatedImageData = new ImageData(\n            resp.pixels,\n            imageData.width,\n            imageData.height\n        );\n        // remove canvas\n        canvas.remove();\n        return updatedImageData;\n    }\n\n    cancel() {\n        if (this.state == \"erase\") {\n            this.state = \"confirm\";\n            this.selectedImageData =\n                this.imageData[this.selectedImageDataIndex];\n            this.renderer.setEditImage(this.selectedImageData);\n        } else {\n            if (this.selectSupported()) {\n                this.state = \"select\";\n            } else {\n                this.state = \"default\";\n            }\n            this.imageData = [];\n            this.renderer.setEditImage(null);\n            this.dirty = false;\n        }\n    }\n\n    erase() {\n        this.state = \"erase\";\n    }\n\n    mask() {\n        if (this.renderer.isMasked()) {\n            this.renderer.deleteMask();\n        }\n        this.renderer.createMask();\n        this.state = \"mask\";\n        this.maskHandler(true);\n    }\n\n    deleteMask() {\n        this.renderer.deleteMask();\n        if (this.state == \"mask\") {\n            this.state = \"default\";\n        }\n        this.maskHandler(false);\n    }\n\n    private updateProgress(progress: number) {\n        if (this.progressListener) {\n            this.progressListener(progress);\n        }\n    }\n\n    async submit(api: AIBrushApi, apisocket: ApiSocket, image: APIImage) {\n        this.dirty = true;\n        this.notifyError(null);\n        const selectionOverlay = this.renderer.getSelectionOverlay();\n        let encodedImage = this.renderer.getEncodedImage(selectionOverlay!);\n        if (!encodedImage) {\n            console.error(\"No selection\");\n            return;\n        }\n        encodedImage = await convertPNGToJPG(encodedImage);\n        let encodedMask: string | undefined;\n        let maskData: ImageData | undefined;\n        if (this.renderer.isMasked()) {\n            encodedMask = this.renderer.getEncodedMask(selectionOverlay!, \"mask\");\n            maskData = this.renderer.getImageData(selectionOverlay!, \"mask\");\n        }\n\n        const input: CreateImageInput = defaultArgs();\n\n        const tmpInitImage = await api.createTemporaryImage(\"jpg\");\n        // convert base64 to binary\n        const binaryImageData = Buffer.from(encodedImage, \"base64\");\n        this.state = \"uploading\";\n        this.updateProgress(0);\n        await anonymousClient.put(\n            tmpInitImage.data.upload_url,\n            binaryImageData,\n            {\n                headers: {\n                    \"Content-Type\": \"image/jpeg\",\n                },\n                onUploadProgress: (progressEvent: any) => {\n                    let percentCompleted =\n                        progressEvent.loaded / progressEvent.total;\n                    if (encodedMask) {\n                        percentCompleted /= 2;\n                    }\n                    this.updateProgress(percentCompleted);\n                },\n            }\n        );\n        input.tmp_jpg_id = tmpInitImage.data.id;\n\n        if (encodedMask) {\n            const tmpMaskImage = await api.createTemporaryImage(\"png\");\n            const binaryMaskData = Buffer.from(encodedMask, \"base64\");\n            await anonymousClient.put(tmpMaskImage.data.upload_url, binaryMaskData, {\n                headers: {\n                    \"Content-Type\": \"image/png\",\n                },\n                onUploadProgress: (progressEvent: any) => {\n                    let percentCompleted = 0.5 + progressEvent.loaded / progressEvent.total / 2;\n                    this.updateProgress(percentCompleted);\n                },\n            });\n            input.tmp_mask_id = tmpMaskImage.data.id;\n        }\n\n        input.label = \"\";\n        input.parent = image.id;\n        input.params.prompt = this.prompt || image.params.prompt;\n        input.params.negative_prompt =\n            this.negativePrompt || image.params.negative_prompt;\n        input.params.denoising_strength = this.variationStrength;\n        input.count = this.count;\n        input.model = this.model;\n        input.nsfw = image.nsfw;\n\n        input.params.width = selectionOverlay!.width;\n        input.params.height = selectionOverlay!.height;\n        // round width and height up to the nearest multiple of 64\n        input.params.width = Math.ceil(input.params.width / 64) * 64;\n        input.params.height = Math.ceil(input.params.height / 64) * 64;\n        input.temporary = true;\n\n        let resp: ImageList | null = null;\n\n        try {\n            resp = (await api.createImage(input)).data;\n        } catch (err) {\n            console.error(\"Error creating images\", err);\n            this.notifyError(\"Failed to create image\");\n            this.state = \"default\";\n            return;\n        }\n        this.state = \"processing\";\n        let newImages: Array<ImageWithData> | undefined = resp.images;\n        if (!newImages || newImages.length === 0) {\n            this.state = \"default\";\n            throw new Error(\"No images returned\");\n        }\n        let completed = false;\n\n        let lastUpdate = moment();\n\n        const onMessage = async (msg: string) => {\n            const img = JSON.parse(msg) as any;\n            if (\n                img.type === NOTIFICATION_IMAGE_UPDATED &&\n                img.status === StatusEnum.Completed\n            ) {\n                lastUpdate = moment();\n                for (let i = 0; i < newImages!.length; i++) {\n                    if (newImages![i].id === img.id) {\n                        const imageData = await this.loadImageData(\n                            api,\n                            newImages![i].id,\n                            maskData,\n                            selectionOverlay!\n                        );\n                        newImages![i].data = imageData;\n                        newImages![i].status = StatusEnum.Completed;\n                    }\n                }\n            } else if (img.status == StatusEnum.Error) {\n                for (let i = 0; i < newImages!.length; i++) {\n                    if (newImages![i].id === img.id) {\n                        newImages![i].status = StatusEnum.Error;\n                    }\n                }\n            }\n        };\n        apisocket.addMessageListener(onMessage);\n        try {\n            let startTime = moment();\n            let lastCheck = moment();\n\n            while (!completed) {\n                let completeCount = 0;\n                await sleep(1000);\n                // poll for completion\n                for (let i = 0; i < newImages!.length; i++) {\n                    if (\n                        newImages![i].status === StatusEnum.Completed ||\n                        newImages![i].status === StatusEnum.Error\n                    ) {\n                        completeCount++;\n                        continue;\n                    }\n                }\n                this.updateProgress(completeCount / newImages!.length);\n                if (completeCount === newImages!.length) {\n                    completed = true;\n                }\n\n                // fallback if sockets don't catch one\n                if (moment().diff(lastCheck, \"seconds\") > 10) {\n                    // get list of ids that aren't completed and batch get them.\n                    const pendingIds = newImages\n                        .filter(\n                            (img) =>\n                                img.status === StatusEnum.Pending ||\n                                img.status === StatusEnum.Processing\n                        )\n                        .map((img) => img.id);\n                    console.log(\"Checking pending images\", pendingIds);\n                    const updatedImagesResult = await api.batchGetImages(\n                        undefined,\n                        {\n                            ids: pendingIds,\n                        }\n                    );\n                    const updatedImages = updatedImagesResult.data.images;\n                    const byId = updatedImages!.reduce((acc, img) => {\n                        acc[img.id] = img;\n                        return acc;\n                    }, {} as Record<string, APIImage>);\n                    for (let i = 0; i < newImages!.length; i++) {\n                        if (\n                            newImages![i].status === StatusEnum.Pending ||\n                            newImages![i].status === StatusEnum.Processing\n                        ) {\n                            const updated = byId[newImages![i].id];\n                            if (updated) {\n                                newImages![i].status = updated.status;\n                                if (updated.status === StatusEnum.Completed) {\n                                    lastUpdate = moment();\n                                    const imageData = await this.loadImageData(\n                                        api,\n                                        newImages![i].id,\n                                        maskData,\n                                        selectionOverlay!\n                                    );\n                                    newImages![i].data = imageData;\n                                }\n                            }\n                        }\n                    }\n                    lastCheck = moment();\n                }\n                // timeout of 2 minutes\n                if (\n                    (lastUpdate.isAfter(startTime) &&\n                        moment().diff(lastUpdate, \"seconds\") > 30) ||\n                    moment().diff(startTime, \"minutes\") > 2\n                ) {\n                    completed = true;\n                }\n            }\n        } finally {\n            apisocket.removeMessageListener(onMessage);\n        }\n\n        // sort images by score descending\n        newImages!.sort((a, b) => {\n            return b.score - a.score;\n        });\n        newImages = newImages!.filter((img) => {\n            return img.status === StatusEnum.Completed;\n        });\n\n        this.imageData = [];\n        for (let i = 0; i < newImages!.length; i++) {\n            if (newImages![i].data) {\n                this.imageData.push(newImages![i].data as ImageData);\n            }\n        }\n        if (this.imageData.length === 0) {\n            this.state = \"default\";\n            this.notifyError(\"No images returned\");\n            return;\n        }\n        this.renderer.setEditImage(this.imageData[0]);\n        this.selectedImageDataIndex = 0;\n        this.selectedImageData = this.imageData[0];\n        this.state = \"confirm\";\n        this.deleteMask();\n    }\n\n    select(direction: \"left\" | \"right\") {\n        if (direction == \"left\") {\n            this.selectedImageDataIndex--;\n            if (this.selectedImageDataIndex < -1) {\n                this.selectedImageDataIndex = this.imageData.length - 1;\n            }\n        }\n        if (direction == \"right\") {\n            this.selectedImageDataIndex++;\n            if (this.selectedImageDataIndex >= this.imageData.length) {\n                this.selectedImageDataIndex = -1;\n            }\n        }\n        if (this.selectedImageDataIndex === -1) {\n            this.selectedImageData = null;\n        } else {\n            this.selectedImageData =\n                this.imageData[this.selectedImageDataIndex];\n        }\n        this.renderer.setEditImage(this.selectedImageData);\n    }\n\n    onSaveImage(listener: (encodedImage: string, args?: any) => void): void {\n        this.saveListener = listener;\n    }\n\n    confirm() {\n        this.renderer.commitSelection();\n        if (this.selectSupported()) {\n            this.state = \"select\";\n        } else {\n            this.state = \"default\";\n        }\n        this.imageData = [];\n        const encodedImage = this.renderer.getEncodedImage(null);\n        if (encodedImage && this.saveListener) {\n            this.saveListener(encodedImage, {\n                phrases: [this.prompt],\n                negative_phrases: [this.negativePrompt],\n                model: this.model,\n            });\n        }\n        this.dirty = false;\n    }\n\n    destroy(): boolean {\n        if (this.renderer.isMasked()) {\n            this.renderer.deleteMask();\n        }\n        this.renderer.setCursor(undefined);\n        this.worker.destroy();\n        return true;\n    }\n}\n\ninterface ControlsProps {\n    api: AIBrushApi;\n    apisocket: ApiSocket;\n    image: APIImage;\n    renderer: Renderer;\n    tool: EnhanceTool;\n}\n\nexport const EnhanceControls: FC<ControlsProps> = ({\n    api,\n    apisocket,\n    image,\n    renderer,\n    tool,\n}) => {\n    const [count, setCount] = useState(4);\n    const [dirty, setDirty] = useState(false);\n    const [variationStrength, setVariationStrength] = useState(0.35);\n    const [prompt, setPrompt] = useState(image.params.prompt || \"\");\n    const [negativePrompt, setNegativePrompt] = useState(\n        image.params.negative_prompt || \"\"\n    );\n    const [model, setModel] = useState(\n        image.model == \"swinir\" || image.model == \"stable_diffusion\"\n            ? \"Epic Diffusion\"\n            : image.model\n    );\n    const [selectingModel, setSelectingModel] = useState<boolean>(false);\n    const [state, setState] = useState<EnhanceToolState>(tool.state);\n    const [isMasked, setIsMasked] = useState<boolean>(tool.renderer.isMasked());\n    const [progress, setProgress] = useState(0);\n    const [error, setError] = useState<string | null>(null);\n\n    tool.onChangeState(setState);\n    tool.onChangeMask(setIsMasked);\n    tool.onProgress(setProgress);\n    tool.onError(setError);\n    tool.onDirty(setDirty);\n\n    const selectionOverlay: Rect =\n        tool.selectionTool.getArgs().selectionOverlay;\n    let cost = count;\n    if (selectionOverlay) {\n        cost = calculateImagesCost(\n            count,\n            selectionOverlay.width,\n            selectionOverlay.height\n        );\n    }\n\n    if (state == \"processing\" || state == \"uploading\") {\n        return (\n            <div style={{ marginTop: \"16px\" }}>\n                <i className=\"fa fa-spinner fa-spin\"></i>&nbsp;{\" \"}\n                {state === \"processing\" ? \"Enhancing...\" : \"Uploading...\"}\n                <br />\n                <ProgressBar progress={progress} />\n            </div>\n        );\n    }\n\n    return (\n        <div\n            style={{\n                marginTop: \"16px\",\n                marginBottom: \"8px\",\n                marginLeft: \"16px\",\n            }}\n        >\n            {error && (\n                <div className=\"alert alert-danger\" role=\"alert\">\n                    {/* dismiss button */}\n                    <button\n                        type=\"button\"\n                        className=\"close\"\n                        data-dismiss=\"alert\"\n                        aria-label=\"Close\"\n                        onClick={() => setError(null)}\n                    >\n                        <span aria-hidden=\"true\">&times;</span>\n                    </button>\n                    {error}\n                </div>\n            )}\n            {state === \"select\" && (\n                <>\n                    <p>\n                        {/* info icon */}\n                        <i className=\"fa fa-info-circle\"></i>&nbsp; Move the\n                        selection rectangle to the area that you want to enhance\n                    </p>\n                    <SelectionControls\n                        renderer={renderer}\n                        tool={tool.selectionTool}\n                        lockAspectRatio={true}\n                    />\n                </>\n            )}\n            {state === \"default\" && (\n                <>\n                    <p>\n                        {/* info icon */}\n                        <i className=\"fa fa-info-circle\"></i>&nbsp; Confirm the\n                        parameters below and continue\n                    </p>\n                    {/* prompt */}\n                    <div className=\"form-group\">\n                        <label htmlFor=\"prompt\">\n                            Prompt&nbsp;\n                            <ResetToDefaultIcon onClick={() => setPrompt(image.params.prompt || \"\")} />\n                        </label>\n                        {/* refresh icon */}\n                        \n                        <input\n                            type=\"text\"\n                            className=\"form-control\"\n                            id=\"prompt\"\n                            value={prompt}\n                            onChange={(e) => {\n                                setPrompt(e.target.value);\n                            }}\n                        />\n                        \n                        <small className=\"form-text text-muted\">\n                            Customize the text prompt here\n                        </small>\n                    </div>\n                    {/* negative prompt */}\n                    <div className=\"form-group\">\n                        <label htmlFor=\"negative-prompt\">\n                            Negative Prompt&nbsp;\n                            <ResetToDefaultIcon onClick={() => setNegativePrompt(image.params.negative_prompt || \"\")} />\n                        </label>\n                        <input\n                            type=\"text\"\n                            className=\"form-control\"\n                            id=\"negative-prompt\"\n                            value={negativePrompt}\n                            onChange={(e) => {\n                                setNegativePrompt(e.target.value);\n                            }}\n                        />\n                        <small className=\"form-text text-muted\">\n                            Customize the negative text prompt here\n                        </small>\n                    </div>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"count\">Count: {count}</label>\n                        <input\n                            type=\"range\"\n                            className=\"form-control-range\"\n                            id=\"count\"\n                            min=\"1\"\n                            max=\"10\"\n                            step=\"1\"\n                            value={count}\n                            onChange={(e) => {\n                                setCount(parseInt(e.target.value));\n                            }}\n                        />\n                        <small className=\"form-text text-muted\">\n                            Number of enhancement options\n                        </small>\n                    </div>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"variation-strength\">\n                            Variation Strength:{\" \"}\n                            {Math.round(variationStrength * 100)}%\n                        </label>\n                        <input\n                            type=\"range\"\n                            className=\"form-control-range\"\n                            id=\"variation-strength\"\n                            min=\"0\"\n                            max=\"1\"\n                            step=\"0.05\"\n                            value={variationStrength}\n                            onChange={(e) => {\n                                setVariationStrength(\n                                    parseFloat(e.target.value)\n                                );\n                            }}\n                        />\n                        <small className=\"form-text text-muted\">\n                            How much variation to use\n                        </small>\n                    </div>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"model\">Model</label>\n                        {/* <select\n                            className=\"form-control\"\n                            id=\"model\"\n                            value={model}\n                            onChange={(e) => setModel(e.target.value)}\n                        >\n                            {supportedModels.map((model) => (\n                                <option value={model} key={`model-${model}`}>\n                                    {model}\n                                </option>\n                            ))}\n                        </select> */}\n                        <div>\n                            <button\n                                type=\"button\"\n                                className=\"btn btn-secondary light-button\"\n                                onClick={() => setSelectingModel(true)}\n                            >\n                                {model}&nbsp;\n                                <i className=\"fas fa-caret-down\"></i>\n                            </button>\n                        </div>\n                        <small className=\"form-text text-muted\">\n                            Select the model to use\n                        </small>\n                    </div>\n                    <div className=\"form-group\">\n                        <CostIndicator imagesCost={cost} />\n                    </div>\n                </>\n            )}\n            {state === \"erase\" && (\n                <p>\n                    {/* info icon */}\n                    <i className=\"fa fa-info-circle\"></i>&nbsp; Erase any\n                    undesired sections before saving\n                </p>\n            )}\n            {state === \"mask\" && (\n                <MaskEditor\n                    onConfirm={() => (tool.state = \"default\")}\n                    onRevert={() => {\n                        tool.deleteMask();\n                    }}\n                    tool={tool.pencilTool}\n                />\n            )}\n\n            <div className=\"form-group\">\n                {state === \"select\" && (\n                    <button\n                        type=\"button\"\n                        className=\"btn btn-primary btn-sm\"\n                        onClick={() => {\n                            tool.state = \"default\";\n                        }}\n                        style={{ marginRight: \"8px\" }}\n                    >\n                        {/* magic icon */}\n                        <i className=\"fa fa-magic\"></i>&nbsp; Continue\n                    </button>\n                )}\n                {((state === \"default\" && tool.selectSupported()) ||\n                    state === \"confirm\" ||\n                    state === \"erase\") && (\n                    <button\n                        className=\"btn btn-primary btn-sm\"\n                        onClick={() => {\n                            tool.cancel();\n                        }}\n                        style={{ marginRight: \"8px\" }}\n                    >\n                        {/* cancel icon */}\n                        <i className=\"fa fa-times\"></i>&nbsp; Revert\n                    </button>\n                )}\n                {(state === \"confirm\" || state === \"erase\") && (\n                    <button\n                        className=\"btn btn-primary btn-sm\"\n                        onClick={() => tool.confirm()}\n                        style={{ marginRight: \"8px\" }}\n                    >\n                        <i className=\"fa fa-save\"></i>&nbsp; Save\n                    </button>\n                )}\n                {state === \"confirm\" && (\n                    <>\n                        <button\n                            className=\"btn btn-primary btn-sm\"\n                            onClick={() => tool.erase()}\n                            style={{ marginRight: \"8px\" }}\n                        >\n                            <i className=\"fa fa-eraser\"></i>&nbsp; Erase\n                        </button>\n                    </>\n                )}\n                {state === \"default\" && (\n                    <>\n                        <button\n                            className=\"btn btn-primary btn-sm\"\n                            onClick={() => {\n                                tool.updateArgs({\n                                    count,\n                                    variationStrength,\n                                    prompt,\n                                    negativePrompt,\n                                    model,\n                                });\n                                tool.submit(api, apisocket, image);\n                            }}\n                            style={{ marginRight: \"8px\" }}\n                        >\n                            <i className=\"fa fa-magic\"></i>&nbsp; Enhance\n                        </button>\n                        <button\n                            className=\"btn btn-primary btn-sm\"\n                            onClick={() => tool.mask()}\n                            style={{ marginRight: \"8px\" }}\n                        >\n                            <i className=\"fa fa-cut\"></i>&nbsp; Mask\n                        </button>\n                        {isMasked && (\n                            <button\n                                className=\"btn btn-danger btn-sm\"\n                                onClick={() => tool.deleteMask()}\n                                style={{ marginRight: \"8px\" }}\n                            >\n                                <i className=\"fa fa-cut\"></i>&nbsp; Unmask\n                            </button>\n                        )}\n                    </>\n                )}\n            </div>\n            <Prompt\n                when={dirty}\n                message=\"Are you sure you want to leave? Your changes will be lost.\"\n            />\n            {selectingModel && (\n                <ModelSelector\n                    api={api}\n                    onCancel={() => setSelectingModel(false)}\n                    onSelectModel={(model) => {\n                        setModel(model);\n                        setSelectingModel(false);\n                    }}\n                    initialSelectedModel={model}\n                    inpainting={false}\n                />\n            )}\n        </div>\n    );\n};\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * AIBrush API\n * Orchestration backend for AI Brush\n *\n * The version of the OpenAPI document: 1.0.0\n * Contact: admin@aibrush.art\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport { Configuration } from './configuration';\nimport globalAxios, { AxiosPromise, AxiosInstance } from 'axios';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';\n\n/**\n * \n * @export\n * @interface AddMetricItem\n */\nexport interface AddMetricItem {\n    /**\n     * \n     * @type {string}\n     * @memberof AddMetricItem\n     */\n    name: string;\n    /**\n     * \n     * @type {number}\n     * @memberof AddMetricItem\n     */\n    value: number;\n    /**\n     * \n     * @type {string}\n     * @memberof AddMetricItem\n     */\n    type: AddMetricItemTypeEnum;\n    /**\n     * \n     * @type {Array<MetricAttribute>}\n     * @memberof AddMetricItem\n     */\n    attributes: Array<MetricAttribute>;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum AddMetricItemTypeEnum {\n    Gauge = 'gauge',\n    Count = 'count'\n}\n\n/**\n * \n * @export\n * @interface AddMetricsInput\n */\nexport interface AddMetricsInput {\n    /**\n     * \n     * @type {Array<AddMetricItem>}\n     * @memberof AddMetricsInput\n     */\n    metrics: Array<AddMetricItem>;\n}\n/**\n * \n * @export\n * @interface AssetsUrl\n */\nexport interface AssetsUrl {\n    /**\n     * \n     * @type {string}\n     * @memberof AssetsUrl\n     */\n    assets_url: string;\n}\n/**\n * \n * @export\n * @interface BatchGetImagesInput\n */\nexport interface BatchGetImagesInput {\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof BatchGetImagesInput\n     */\n    ids: Array<string>;\n}\n/**\n * \n * @export\n * @interface CreateDepositCodeInput\n */\nexport interface CreateDepositCodeInput {\n    /**\n     * \n     * @type {number}\n     * @memberof CreateDepositCodeInput\n     */\n    amount: number;\n}\n/**\n * \n * @export\n * @interface CreateImageInput\n */\nexport interface CreateImageInput {\n    /**\n     * \n     * @type {StatusEnum}\n     * @memberof CreateImageInput\n     */\n    status?: StatusEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateImageInput\n     */\n    label?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateImageInput\n     */\n    parent?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateImageInput\n     */\n    encoded_image?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateImageInput\n     */\n    encoded_mask?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateImageInput\n     */\n    tmp_image_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateImageInput\n     */\n    tmp_jpg_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateImageInput\n     */\n    tmp_mask_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateImageInput\n     */\n    tmp_thumbnail_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateImageInput\n     */\n    model: string;\n    /**\n     * \n     * @type {ImageParams}\n     * @memberof CreateImageInput\n     */\n    params: ImageParams;\n    /**\n     * \n     * @type {number}\n     * @memberof CreateImageInput\n     */\n    count: number;\n    /**\n     * \n     * @type {boolean}\n     * @memberof CreateImageInput\n     */\n    nsfw?: boolean;\n    /**\n     * \n     * @type {boolean}\n     * @memberof CreateImageInput\n     */\n    temporary?: boolean;\n}\n/**\n * \n * @export\n * @interface CreateStripeSessionInput\n */\nexport interface CreateStripeSessionInput {\n    /**\n     * \n     * @type {string}\n     * @memberof CreateStripeSessionInput\n     */\n    product_id: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateStripeSessionInput\n     */\n    success_url: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateStripeSessionInput\n     */\n    cancel_url: string;\n}\n/**\n * \n * @export\n * @interface Credits\n */\nexport interface Credits {\n    /**\n     * \n     * @type {number}\n     * @memberof Credits\n     */\n    free_credits: number;\n    /**\n     * \n     * @type {number}\n     * @memberof Credits\n     */\n    paid_credits: number;\n}\n/**\n * \n * @export\n * @interface DepositCode\n */\nexport interface DepositCode {\n    /**\n     * \n     * @type {string}\n     * @memberof DepositCode\n     */\n    code: string;\n    /**\n     * \n     * @type {number}\n     * @memberof DepositCode\n     */\n    amount: number;\n}\n/**\n * \n * @export\n * @interface DepositRequest\n */\nexport interface DepositRequest {\n    /**\n     * Amount in credits\n     * @type {number}\n     * @memberof DepositRequest\n     */\n    amount: number;\n}\n/**\n * \n * @export\n * @interface DiscordLogin\n */\nexport interface DiscordLogin {\n    /**\n     * \n     * @type {string}\n     * @memberof DiscordLogin\n     */\n    code: string;\n}\n/**\n * \n * @export\n * @interface FeatureList\n */\nexport interface FeatureList {\n    /**\n     * \n     * @type {string}\n     * @memberof FeatureList\n     */\n    terms_uri?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof FeatureList\n     */\n    privacy_uri?: string;\n}\n/**\n * \n * @export\n * @interface GlobalSettings\n */\nexport interface GlobalSettings {\n    /**\n     * \n     * @type {string}\n     * @memberof GlobalSettings\n     */\n    settings_key: string;\n    /**\n     * \n     * @type {object}\n     * @memberof GlobalSettings\n     */\n    settings_json: object;\n}\n/**\n * \n * @export\n * @interface Healthcheck\n */\nexport interface Healthcheck {\n    /**\n     * \n     * @type {string}\n     * @memberof Healthcheck\n     */\n    status?: HealthcheckStatusEnum;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum HealthcheckStatusEnum {\n    Ok = 'ok'\n}\n\n/**\n * \n * @export\n * @interface Image\n */\nexport interface Image {\n    /**\n     * \n     * @type {string}\n     * @memberof Image\n     */\n    id: string;\n    /**\n     * \n     * @type {number}\n     * @memberof Image\n     */\n    created_at: number;\n    /**\n     * \n     * @type {string}\n     * @memberof Image\n     */\n    created_by: string;\n    /**\n     * \n     * @type {number}\n     * @memberof Image\n     */\n    updated_at: number;\n    /**\n     * \n     * @type {ImageParams}\n     * @memberof Image\n     */\n    params: ImageParams;\n    /**\n     * \n     * @type {string}\n     * @memberof Image\n     */\n    label: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Image\n     */\n    parent: string;\n    /**\n     * \n     * @type {number}\n     * @memberof Image\n     */\n    score: number;\n    /**\n     * \n     * @type {number}\n     * @memberof Image\n     */\n    negative_score: number;\n    /**\n     * \n     * @type {StatusEnum}\n     * @memberof Image\n     */\n    status: StatusEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof Image\n     */\n    model: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof Image\n     */\n    nsfw: boolean;\n    /**\n     * \n     * @type {boolean}\n     * @memberof Image\n     */\n    temporary: boolean;\n    /**\n     * \n     * @type {number}\n     * @memberof Image\n     */\n    deleted_at?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof Image\n     */\n    error?: string;\n}\n/**\n * \n * @export\n * @interface ImageList\n */\nexport interface ImageList {\n    /**\n     * \n     * @type {Array<Image>}\n     * @memberof ImageList\n     */\n    images?: Array<Image>;\n}\n/**\n * \n * @export\n * @interface ImageParams\n */\nexport interface ImageParams {\n    /**\n     * \n     * @type {string}\n     * @memberof ImageParams\n     */\n    prompt?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof ImageParams\n     */\n    steps?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof ImageParams\n     */\n    negative_prompt?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof ImageParams\n     */\n    width?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof ImageParams\n     */\n    height?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof ImageParams\n     */\n    denoising_strength?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof ImageParams\n     */\n    cfg_scale?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof ImageParams\n     */\n    seed?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ImageParams\n     */\n    controlnet_type?: ImageParamsControlnetTypeEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof ImageParams\n     */\n    augmentation?: ImageParamsAugmentationEnum;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum ImageParamsControlnetTypeEnum {\n    Canny = 'canny',\n    Hed = 'hed',\n    Depth = 'depth',\n    Normal = 'normal',\n    Openpose = 'openpose',\n    Seg = 'seg',\n    Scribble = 'scribble',\n    Fakescribbles = 'fakescribbles',\n    Hough = 'hough'\n}\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum ImageParamsAugmentationEnum {\n    FaceRestore = 'face_restore',\n    RemoveBackground = 'remove_background',\n    Upscale = 'upscale'\n}\n\n/**\n * \n * @export\n * @interface ImageUrls\n */\nexport interface ImageUrls {\n    /**\n     * \n     * @type {string}\n     * @memberof ImageUrls\n     */\n    init_image_url?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ImageUrls\n     */\n    image_url?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ImageUrls\n     */\n    mask_url?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ImageUrls\n     */\n    thumbnail_url?: string;\n}\n/**\n * \n * @export\n * @interface InviteCode\n */\nexport interface InviteCode {\n    /**\n     * \n     * @type {string}\n     * @memberof InviteCode\n     */\n    id?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof InviteCode\n     */\n    created_at?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof InviteCode\n     */\n    created_by?: string;\n}\n/**\n * \n * @export\n * @interface IsAdminResponse\n */\nexport interface IsAdminResponse {\n    /**\n     * \n     * @type {boolean}\n     * @memberof IsAdminResponse\n     */\n    is_admin?: boolean;\n}\n/**\n * \n * @export\n * @interface LoginInput\n */\nexport interface LoginInput {\n    /**\n     * \n     * @type {string}\n     * @memberof LoginInput\n     */\n    email?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof LoginInput\n     */\n    invite_code?: string;\n}\n/**\n * \n * @export\n * @interface LoginResult\n */\nexport interface LoginResult {\n    /**\n     * \n     * @type {string}\n     * @memberof LoginResult\n     */\n    accessToken?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof LoginResult\n     */\n    refreshToken?: string;\n}\n/**\n * \n * @export\n * @interface MetricAttribute\n */\nexport interface MetricAttribute {\n    /**\n     * \n     * @type {string}\n     * @memberof MetricAttribute\n     */\n    name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof MetricAttribute\n     */\n    value?: string;\n}\n/**\n * \n * @export\n * @interface Order\n */\nexport interface Order {\n    /**\n     * \n     * @type {string}\n     * @memberof Order\n     */\n    id: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Order\n     */\n    created_by: string;\n    /**\n     * \n     * @type {number}\n     * @memberof Order\n     */\n    created_at: number;\n    /**\n     * \n     * @type {number}\n     * @memberof Order\n     */\n    ends_at: number;\n    /**\n     * \n     * @type {boolean}\n     * @memberof Order\n     */\n    is_active: boolean;\n    /**\n     * \n     * @type {number}\n     * @memberof Order\n     */\n    gpu_count: number;\n    /**\n     * \n     * @type {number}\n     * @memberof Order\n     */\n    amount_paid_cents: number;\n}\n/**\n * \n * @export\n * @interface RefreshLoginInput\n */\nexport interface RefreshLoginInput {\n    /**\n     * \n     * @type {string}\n     * @memberof RefreshLoginInput\n     */\n    refreshToken?: string;\n}\n/**\n * \n * @export\n * @interface StableDiffusionModel\n */\nexport interface StableDiffusionModel {\n    /**\n     * The name of the model\n     * @type {string}\n     * @memberof StableDiffusionModel\n     */\n    name: string;\n    /**\n     * The baseline model used\n     * @type {string}\n     * @memberof StableDiffusionModel\n     */\n    baseline: string;\n    /**\n     * The type of the model (e.g., ckpt)\n     * @type {string}\n     * @memberof StableDiffusionModel\n     */\n    type: string;\n    /**\n     * A short description of the model\n     * @type {string}\n     * @memberof StableDiffusionModel\n     */\n    description: string;\n    /**\n     * Tags associated with the model\n     * @type {Array<string>}\n     * @memberof StableDiffusionModel\n     */\n    tags: Array<string>;\n    /**\n     * A list of URIs for showcase images\n     * @type {Array<string>}\n     * @memberof StableDiffusionModel\n     */\n    showcases: Array<string>;\n    /**\n     * The version of the model\n     * @type {string}\n     * @memberof StableDiffusionModel\n     */\n    version: string;\n    /**\n     * The style of the model (e.g., anime, furry)\n     * @type {string}\n     * @memberof StableDiffusionModel\n     */\n    style: string;\n    /**\n     * Whether the model is Not Safe For Work (NSFW)\n     * @type {boolean}\n     * @memberof StableDiffusionModel\n     */\n    nsfw: boolean;\n    /**\n     * Whether to download all model files\n     * @type {boolean}\n     * @memberof StableDiffusionModel\n     */\n    download_all: boolean;\n    /**\n     * Configuration information for the model\n     * @type {object}\n     * @memberof StableDiffusionModel\n     */\n    config: object;\n    /**\n     * Whether the model is available for use\n     * @type {boolean}\n     * @memberof StableDiffusionModel\n     */\n    available: boolean;\n    /**\n     * Whether the model is an inpainting model\n     * @type {boolean}\n     * @memberof StableDiffusionModel\n     */\n    inpainting: boolean;\n}\n/**\n * \n * @export\n * @enum {string}\n */\n\nexport enum StatusEnum {\n    Pending = 'pending',\n    Processing = 'processing',\n    Completed = 'completed',\n    Saved = 'saved',\n    Error = 'error',\n    Deleted = 'deleted'\n}\n\n/**\n * \n * @export\n * @interface StripeSession\n */\nexport interface StripeSession {\n    /**\n     * \n     * @type {string}\n     * @memberof StripeSession\n     */\n    session_id: string;\n}\n/**\n * \n * @export\n * @interface TemporaryImage\n */\nexport interface TemporaryImage {\n    /**\n     * \n     * @type {string}\n     * @memberof TemporaryImage\n     */\n    id: string;\n    /**\n     * \n     * @type {string}\n     * @memberof TemporaryImage\n     */\n    upload_url: string;\n}\n/**\n * \n * @export\n * @interface UpdateGlobalSettingsRequest\n */\nexport interface UpdateGlobalSettingsRequest {\n    /**\n     * \n     * @type {object}\n     * @memberof UpdateGlobalSettingsRequest\n     */\n    settings_json: object;\n}\n/**\n * \n * @export\n * @interface UpdateImageInput\n */\nexport interface UpdateImageInput {\n    /**\n     * \n     * @type {string}\n     * @memberof UpdateImageInput\n     */\n    label?: string;\n    /**\n     * \n     * @type {StatusEnum}\n     * @memberof UpdateImageInput\n     */\n    status?: StatusEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof UpdateImageInput\n     */\n    encoded_image?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof UpdateImageInput\n     */\n    encoded_npy?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof UpdateImageInput\n     */\n    score?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof UpdateImageInput\n     */\n    negative_score?: number;\n    /**\n     * \n     * @type {boolean}\n     * @memberof UpdateImageInput\n     */\n    nsfw?: boolean;\n    /**\n     * \n     * @type {number}\n     * @memberof UpdateImageInput\n     */\n    deleted_at?: number | null;\n    /**\n     * \n     * @type {string}\n     * @memberof UpdateImageInput\n     */\n    error?: string;\n}\n/**\n * \n * @export\n * @interface UpsertWorkerConfigInput\n */\nexport interface UpsertWorkerConfigInput {\n    /**\n     * \n     * @type {Array<WorkerGpuConfig>}\n     * @memberof UpsertWorkerConfigInput\n     */\n    gpu_configs?: Array<WorkerGpuConfig>;\n}\n/**\n * \n * @export\n * @interface UpsertWorkerInput\n */\nexport interface UpsertWorkerInput {\n    /**\n     * \n     * @type {string}\n     * @memberof UpsertWorkerInput\n     */\n    display_name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof UpsertWorkerInput\n     */\n    status?: UpsertWorkerInputStatusEnum;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum UpsertWorkerInputStatusEnum {\n    Idle = 'idle',\n    Active = 'active'\n}\n\n/**\n * \n * @export\n * @interface User\n */\nexport interface User {\n    /**\n     * \n     * @type {string}\n     * @memberof User\n     */\n    id?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof User\n     */\n    active?: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof User\n     */\n    customer_id?: string;\n}\n/**\n * \n * @export\n * @interface VerifyLoginInput\n */\nexport interface VerifyLoginInput {\n    /**\n     * \n     * @type {string}\n     * @memberof VerifyLoginInput\n     */\n    email?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof VerifyLoginInput\n     */\n    code?: string;\n}\n/**\n * \n * @export\n * @interface Worker\n */\nexport interface Worker {\n    /**\n     * \n     * @type {string}\n     * @memberof Worker\n     */\n    id: string;\n    /**\n     * \n     * @type {number}\n     * @memberof Worker\n     */\n    created_at: number;\n    /**\n     * \n     * @type {string}\n     * @memberof Worker\n     */\n    display_name: string;\n    /**\n     * \n     * @type {number}\n     * @memberof Worker\n     */\n    last_ping?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof Worker\n     */\n    status?: WorkerStatusEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof Worker\n     */\n    login_code?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Worker\n     */\n    engine?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof Worker\n     */\n    num_gpus?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof Worker\n     */\n    cloud_instance_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Worker\n     */\n    gpu_type?: string;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum WorkerStatusEnum {\n    Idle = 'idle',\n    Active = 'active'\n}\n\n/**\n * \n * @export\n * @interface WorkerConfig\n */\nexport interface WorkerConfig {\n    /**\n     * \n     * @type {string}\n     * @memberof WorkerConfig\n     */\n    worker_id: string;\n    /**\n     * \n     * @type {Array<WorkerGpuConfig>}\n     * @memberof WorkerConfig\n     */\n    gpu_configs?: Array<WorkerGpuConfig>;\n}\n/**\n * \n * @export\n * @interface WorkerGpuConfig\n */\nexport interface WorkerGpuConfig {\n    /**\n     * \n     * @type {number}\n     * @memberof WorkerGpuConfig\n     */\n    gpu_num: number;\n    /**\n     * \n     * @type {string}\n     * @memberof WorkerGpuConfig\n     */\n    model: string;\n}\n/**\n * \n * @export\n * @interface WorkerList\n */\nexport interface WorkerList {\n    /**\n     * \n     * @type {Array<Worker>}\n     * @memberof WorkerList\n     */\n    workers?: Array<Worker>;\n}\n/**\n * \n * @export\n * @interface WorkerLoginCode\n */\nexport interface WorkerLoginCode {\n    /**\n     * \n     * @type {string}\n     * @memberof WorkerLoginCode\n     */\n    login_code: string;\n}\n\n/**\n * AIBrushApi - axios parameter creator\n * @export\n */\nexport const AIBrushApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * Add Metrics\n         * @param {AddMetricsInput} [addMetricsInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        addMetrics: async (addMetricsInput?: AddMetricsInput, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/metrics`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(addMetricsInput, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get a list of saved images by id\n         * @param {string} [fields] Comma-separated list of fields to include in the response images. For example: \\&quot;id,params,created_at\\&quot; \n         * @param {BatchGetImagesInput} [batchGetImagesInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        batchGetImages: async (fields?: string, batchGetImagesInput?: BatchGetImagesInput, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/batch-get-images`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (fields !== undefined) {\n                localVarQueryParameter['fields'] = fields;\n            }\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(batchGetImagesInput, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Create a new deposit code\n         * @param {CreateDepositCodeInput} [createDepositCodeInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createDepositCode: async (createDepositCodeInput?: CreateDepositCodeInput, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/deposit-codes`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(createDepositCodeInput, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Create a new image\n         * @param {CreateImageInput} [createImageInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createImage: async (createImageInput?: CreateImageInput, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/images`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(createImageInput, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Create a new invite code\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createInviteCode: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/invite-codes`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Create a new Stripe session\n         * @param {CreateStripeSessionInput} [createStripeSessionInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createStripeSession: async (createStripeSessionInput?: CreateStripeSessionInput, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/stripe-sessions`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(createStripeSessionInput, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Create a new temporary image\n         * @param {string} format \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createTemporaryImage: async (format: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'format' is not null or undefined\n            assertParamExists('createTemporaryImage', 'format', format)\n            const localVarPath = `/api/temporary-images`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (format !== undefined) {\n                localVarQueryParameter['format'] = format;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Delete a saved image\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteImage: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('deleteImage', 'id', id)\n            const localVarPath = `/api/images/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Log in with Discord\n         * @param {DiscordLogin} [discordLogin] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        discordLogin: async (discordLogin?: DiscordLogin, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/discord-login`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(discordLogin, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get the assets url\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getAssetsUrl: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/assets-url`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get the user\\'s credit balance\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getCredits: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/credits`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get the features\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getFeatures: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/features`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get the global settings\n         * @param {string} key \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getGlobalSettings: async (key: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'key' is not null or undefined\n            assertParamExists('getGlobalSettings', 'key', key)\n            const localVarPath = `/api/global-settings/{key}`\n                .replace(`{${\"key\"}}`, encodeURIComponent(String(key)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get a saved image by id\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getImage: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('getImage', 'id', id)\n            const localVarPath = `/api/images/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get the binary image data\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getImageData: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('getImageData', 'id', id)\n            const localVarPath = `/api/images/{id}.image.png`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get download urls for image assets\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getImageDownloadUrls: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('getImageDownloadUrls', 'id', id)\n            const localVarPath = `/api/images/{id}/download-urls`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get upload urls for image assets\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getImageUploadUrls: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('getImageUploadUrls', 'id', id)\n            const localVarPath = `/api/images/{id}/upload-urls`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get the binary mask data\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getMaskData: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('getMaskData', 'id', id)\n            const localVarPath = `/api/images/{id}.mask.png`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Get available models\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getModels: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/stable-diffusion-models`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get the binary thumbnail data\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getThumbnailData: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('getThumbnailData', 'id', id)\n            const localVarPath = `/api/images/{id}.thumbnail.png`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Healthcheck\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        healthcheck: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/healthcheck`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Check if the user is admin\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        isAdmin: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/is-admin`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get a list of saved images\n         * @param {number} [cursor] \n         * @param {string} [filter] \n         * @param {number} [limit] \n         * @param {'asc' | 'desc'} [direction] \n         * @param {string} [fields] Comma-separated list of fields to include in the response images. For example: \\&quot;id,params,created_at\\&quot; \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listImages: async (cursor?: number, filter?: string, limit?: number, direction?: 'asc' | 'desc', fields?: string, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/images`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (cursor !== undefined) {\n                localVarQueryParameter['cursor'] = cursor;\n            }\n\n            if (filter !== undefined) {\n                localVarQueryParameter['filter'] = filter;\n            }\n\n            if (limit !== undefined) {\n                localVarQueryParameter['limit'] = limit;\n            }\n\n            if (direction !== undefined) {\n                localVarQueryParameter['direction'] = direction;\n            }\n\n            if (fields !== undefined) {\n                localVarQueryParameter['fields'] = fields;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Login by email\n         * @param {LoginInput} [loginInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        login: async (loginInput?: LoginInput, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/auth/login`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(loginInput, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Redeem a deposit code\n         * @param {string} code \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        redeemDepositCode: async (code: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'code' is not null or undefined\n            assertParamExists('redeemDepositCode', 'code', code)\n            const localVarPath = `/api/deposit-codes/{code}`\n                .replace(`{${\"code\"}}`, encodeURIComponent(String(code)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Refresh Login code\n         * @param {RefreshLoginInput} [refreshLoginInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        refresh: async (refreshLoginInput?: RefreshLoginInput, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/auth/refresh`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(refreshLoginInput, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Update the global settings\n         * @param {string} key \n         * @param {UpdateGlobalSettingsRequest} [updateGlobalSettingsRequest] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateGlobalSettings: async (key: string, updateGlobalSettingsRequest?: UpdateGlobalSettingsRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'key' is not null or undefined\n            assertParamExists('updateGlobalSettings', 'key', key)\n            const localVarPath = `/api/global-settings/{key}`\n                .replace(`{${\"key\"}}`, encodeURIComponent(String(key)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(updateGlobalSettingsRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Update a saved image\n         * @param {string} id \n         * @param {UpdateImageInput} [updateImageInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateImage: async (id: string, updateImageInput?: UpdateImageInput, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('updateImage', 'id', id)\n            const localVarPath = `/api/images/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(updateImageInput, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Upload the binary image data\n         * @param {string} id \n         * @param {any} [body] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        uploadImageData: async (id: string, body?: any, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('uploadImageData', 'id', id)\n            const localVarPath = `/api/images/{id}.image.png`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'image/png';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Upload the binary thumbnail data\n         * @param {string} id \n         * @param {any} [body] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        uploadThumbnailData: async (id: string, body?: any, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('uploadThumbnailData', 'id', id)\n            const localVarPath = `/api/images/{id}.thumbnail.png`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'image/png';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Verify Login code\n         * @param {VerifyLoginInput} [verifyLoginInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        verify: async (verifyLoginInput?: VerifyLoginInput, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/auth/verify`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(verifyLoginInput, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * AIBrushApi - functional programming interface\n * @export\n */\nexport const AIBrushApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = AIBrushApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * Add Metrics\n         * @param {AddMetricsInput} [addMetricsInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async addMetrics(addMetricsInput?: AddMetricsInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.addMetrics(addMetricsInput, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get a list of saved images by id\n         * @param {string} [fields] Comma-separated list of fields to include in the response images. For example: \\&quot;id,params,created_at\\&quot; \n         * @param {BatchGetImagesInput} [batchGetImagesInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async batchGetImages(fields?: string, batchGetImagesInput?: BatchGetImagesInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImageList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.batchGetImages(fields, batchGetImagesInput, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Create a new deposit code\n         * @param {CreateDepositCodeInput} [createDepositCodeInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createDepositCode(createDepositCodeInput?: CreateDepositCodeInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DepositCode>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.createDepositCode(createDepositCodeInput, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Create a new image\n         * @param {CreateImageInput} [createImageInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createImage(createImageInput?: CreateImageInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImageList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.createImage(createImageInput, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Create a new invite code\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createInviteCode(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InviteCode>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.createInviteCode(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Create a new Stripe session\n         * @param {CreateStripeSessionInput} [createStripeSessionInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createStripeSession(createStripeSessionInput?: CreateStripeSessionInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StripeSession>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.createStripeSession(createStripeSessionInput, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Create a new temporary image\n         * @param {string} format \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createTemporaryImage(format: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TemporaryImage>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.createTemporaryImage(format, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Delete a saved image\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async deleteImage(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteImage(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Log in with Discord\n         * @param {DiscordLogin} [discordLogin] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async discordLogin(discordLogin?: DiscordLogin, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginResult>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.discordLogin(discordLogin, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get the assets url\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getAssetsUrl(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssetsUrl>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getAssetsUrl(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get the user\\'s credit balance\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getCredits(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Credits>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getCredits(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get the features\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getFeatures(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeatureList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getFeatures(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get the global settings\n         * @param {string} key \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getGlobalSettings(key: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GlobalSettings>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getGlobalSettings(key, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get a saved image by id\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getImage(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Image>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getImage(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get the binary image data\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getImageData(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getImageData(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get download urls for image assets\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getImageDownloadUrls(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImageUrls>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getImageDownloadUrls(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get upload urls for image assets\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getImageUploadUrls(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImageUrls>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getImageUploadUrls(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get the binary mask data\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getMaskData(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getMaskData(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Get available models\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getModels(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: StableDiffusionModel; }>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getModels(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get the binary thumbnail data\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getThumbnailData(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getThumbnailData(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Healthcheck\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async healthcheck(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Healthcheck>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.healthcheck(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Check if the user is admin\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async isAdmin(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IsAdminResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.isAdmin(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get a list of saved images\n         * @param {number} [cursor] \n         * @param {string} [filter] \n         * @param {number} [limit] \n         * @param {'asc' | 'desc'} [direction] \n         * @param {string} [fields] Comma-separated list of fields to include in the response images. For example: \\&quot;id,params,created_at\\&quot; \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listImages(cursor?: number, filter?: string, limit?: number, direction?: 'asc' | 'desc', fields?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImageList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.listImages(cursor, filter, limit, direction, fields, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Login by email\n         * @param {LoginInput} [loginInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async login(loginInput?: LoginInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.login(loginInput, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Redeem a deposit code\n         * @param {string} code \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async redeemDepositCode(code: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.redeemDepositCode(code, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Refresh Login code\n         * @param {RefreshLoginInput} [refreshLoginInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async refresh(refreshLoginInput?: RefreshLoginInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginResult>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.refresh(refreshLoginInput, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Update the global settings\n         * @param {string} key \n         * @param {UpdateGlobalSettingsRequest} [updateGlobalSettingsRequest] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async updateGlobalSettings(key: string, updateGlobalSettingsRequest?: UpdateGlobalSettingsRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GlobalSettings>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.updateGlobalSettings(key, updateGlobalSettingsRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Update a saved image\n         * @param {string} id \n         * @param {UpdateImageInput} [updateImageInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async updateImage(id: string, updateImageInput?: UpdateImageInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Image>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.updateImage(id, updateImageInput, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Upload the binary image data\n         * @param {string} id \n         * @param {any} [body] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async uploadImageData(id: string, body?: any, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadImageData(id, body, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Upload the binary thumbnail data\n         * @param {string} id \n         * @param {any} [body] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async uploadThumbnailData(id: string, body?: any, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadThumbnailData(id, body, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Verify Login code\n         * @param {VerifyLoginInput} [verifyLoginInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async verify(verifyLoginInput?: VerifyLoginInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginResult>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.verify(verifyLoginInput, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n    }\n};\n\n/**\n * AIBrushApi - factory interface\n * @export\n */\nexport const AIBrushApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = AIBrushApiFp(configuration)\n    return {\n        /**\n         * Add Metrics\n         * @param {AddMetricsInput} [addMetricsInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        addMetrics(addMetricsInput?: AddMetricsInput, options?: any): AxiosPromise<void> {\n            return localVarFp.addMetrics(addMetricsInput, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get a list of saved images by id\n         * @param {string} [fields] Comma-separated list of fields to include in the response images. For example: \\&quot;id,params,created_at\\&quot; \n         * @param {BatchGetImagesInput} [batchGetImagesInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        batchGetImages(fields?: string, batchGetImagesInput?: BatchGetImagesInput, options?: any): AxiosPromise<ImageList> {\n            return localVarFp.batchGetImages(fields, batchGetImagesInput, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Create a new deposit code\n         * @param {CreateDepositCodeInput} [createDepositCodeInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createDepositCode(createDepositCodeInput?: CreateDepositCodeInput, options?: any): AxiosPromise<DepositCode> {\n            return localVarFp.createDepositCode(createDepositCodeInput, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Create a new image\n         * @param {CreateImageInput} [createImageInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createImage(createImageInput?: CreateImageInput, options?: any): AxiosPromise<ImageList> {\n            return localVarFp.createImage(createImageInput, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Create a new invite code\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createInviteCode(options?: any): AxiosPromise<InviteCode> {\n            return localVarFp.createInviteCode(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Create a new Stripe session\n         * @param {CreateStripeSessionInput} [createStripeSessionInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createStripeSession(createStripeSessionInput?: CreateStripeSessionInput, options?: any): AxiosPromise<StripeSession> {\n            return localVarFp.createStripeSession(createStripeSessionInput, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Create a new temporary image\n         * @param {string} format \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createTemporaryImage(format: string, options?: any): AxiosPromise<TemporaryImage> {\n            return localVarFp.createTemporaryImage(format, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Delete a saved image\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteImage(id: string, options?: any): AxiosPromise<void> {\n            return localVarFp.deleteImage(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Log in with Discord\n         * @param {DiscordLogin} [discordLogin] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        discordLogin(discordLogin?: DiscordLogin, options?: any): AxiosPromise<LoginResult> {\n            return localVarFp.discordLogin(discordLogin, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get the assets url\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getAssetsUrl(options?: any): AxiosPromise<AssetsUrl> {\n            return localVarFp.getAssetsUrl(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get the user\\'s credit balance\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getCredits(options?: any): AxiosPromise<Credits> {\n            return localVarFp.getCredits(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get the features\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getFeatures(options?: any): AxiosPromise<FeatureList> {\n            return localVarFp.getFeatures(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get the global settings\n         * @param {string} key \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getGlobalSettings(key: string, options?: any): AxiosPromise<GlobalSettings> {\n            return localVarFp.getGlobalSettings(key, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get a saved image by id\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getImage(id: string, options?: any): AxiosPromise<Image> {\n            return localVarFp.getImage(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get the binary image data\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getImageData(id: string, options?: any): AxiosPromise<any> {\n            return localVarFp.getImageData(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get download urls for image assets\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getImageDownloadUrls(id: string, options?: any): AxiosPromise<ImageUrls> {\n            return localVarFp.getImageDownloadUrls(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get upload urls for image assets\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getImageUploadUrls(id: string, options?: any): AxiosPromise<ImageUrls> {\n            return localVarFp.getImageUploadUrls(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get the binary mask data\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getMaskData(id: string, options?: any): AxiosPromise<any> {\n            return localVarFp.getMaskData(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Get available models\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getModels(options?: any): AxiosPromise<{ [key: string]: StableDiffusionModel; }> {\n            return localVarFp.getModels(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get the binary thumbnail data\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getThumbnailData(id: string, options?: any): AxiosPromise<any> {\n            return localVarFp.getThumbnailData(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Healthcheck\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        healthcheck(options?: any): AxiosPromise<Healthcheck> {\n            return localVarFp.healthcheck(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Check if the user is admin\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        isAdmin(options?: any): AxiosPromise<IsAdminResponse> {\n            return localVarFp.isAdmin(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get a list of saved images\n         * @param {number} [cursor] \n         * @param {string} [filter] \n         * @param {number} [limit] \n         * @param {'asc' | 'desc'} [direction] \n         * @param {string} [fields] Comma-separated list of fields to include in the response images. For example: \\&quot;id,params,created_at\\&quot; \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listImages(cursor?: number, filter?: string, limit?: number, direction?: 'asc' | 'desc', fields?: string, options?: any): AxiosPromise<ImageList> {\n            return localVarFp.listImages(cursor, filter, limit, direction, fields, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Login by email\n         * @param {LoginInput} [loginInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        login(loginInput?: LoginInput, options?: any): AxiosPromise<void> {\n            return localVarFp.login(loginInput, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Redeem a deposit code\n         * @param {string} code \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        redeemDepositCode(code: string, options?: any): AxiosPromise<void> {\n            return localVarFp.redeemDepositCode(code, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Refresh Login code\n         * @param {RefreshLoginInput} [refreshLoginInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        refresh(refreshLoginInput?: RefreshLoginInput, options?: any): AxiosPromise<LoginResult> {\n            return localVarFp.refresh(refreshLoginInput, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Update the global settings\n         * @param {string} key \n         * @param {UpdateGlobalSettingsRequest} [updateGlobalSettingsRequest] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateGlobalSettings(key: string, updateGlobalSettingsRequest?: UpdateGlobalSettingsRequest, options?: any): AxiosPromise<GlobalSettings> {\n            return localVarFp.updateGlobalSettings(key, updateGlobalSettingsRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Update a saved image\n         * @param {string} id \n         * @param {UpdateImageInput} [updateImageInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateImage(id: string, updateImageInput?: UpdateImageInput, options?: any): AxiosPromise<Image> {\n            return localVarFp.updateImage(id, updateImageInput, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Upload the binary image data\n         * @param {string} id \n         * @param {any} [body] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        uploadImageData(id: string, body?: any, options?: any): AxiosPromise<void> {\n            return localVarFp.uploadImageData(id, body, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Upload the binary thumbnail data\n         * @param {string} id \n         * @param {any} [body] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        uploadThumbnailData(id: string, body?: any, options?: any): AxiosPromise<void> {\n            return localVarFp.uploadThumbnailData(id, body, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Verify Login code\n         * @param {VerifyLoginInput} [verifyLoginInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        verify(verifyLoginInput?: VerifyLoginInput, options?: any): AxiosPromise<LoginResult> {\n            return localVarFp.verify(verifyLoginInput, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * AIBrushApi - object-oriented interface\n * @export\n * @class AIBrushApi\n * @extends {BaseAPI}\n */\nexport class AIBrushApi extends BaseAPI {\n    /**\n     * Add Metrics\n     * @param {AddMetricsInput} [addMetricsInput] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public addMetrics(addMetricsInput?: AddMetricsInput, options?: any) {\n        return AIBrushApiFp(this.configuration).addMetrics(addMetricsInput, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get a list of saved images by id\n     * @param {string} [fields] Comma-separated list of fields to include in the response images. For example: \\&quot;id,params,created_at\\&quot; \n     * @param {BatchGetImagesInput} [batchGetImagesInput] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public batchGetImages(fields?: string, batchGetImagesInput?: BatchGetImagesInput, options?: any) {\n        return AIBrushApiFp(this.configuration).batchGetImages(fields, batchGetImagesInput, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Create a new deposit code\n     * @param {CreateDepositCodeInput} [createDepositCodeInput] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public createDepositCode(createDepositCodeInput?: CreateDepositCodeInput, options?: any) {\n        return AIBrushApiFp(this.configuration).createDepositCode(createDepositCodeInput, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Create a new image\n     * @param {CreateImageInput} [createImageInput] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public createImage(createImageInput?: CreateImageInput, options?: any) {\n        return AIBrushApiFp(this.configuration).createImage(createImageInput, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Create a new invite code\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public createInviteCode(options?: any) {\n        return AIBrushApiFp(this.configuration).createInviteCode(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Create a new Stripe session\n     * @param {CreateStripeSessionInput} [createStripeSessionInput] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public createStripeSession(createStripeSessionInput?: CreateStripeSessionInput, options?: any) {\n        return AIBrushApiFp(this.configuration).createStripeSession(createStripeSessionInput, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Create a new temporary image\n     * @param {string} format \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public createTemporaryImage(format: string, options?: any) {\n        return AIBrushApiFp(this.configuration).createTemporaryImage(format, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Delete a saved image\n     * @param {string} id \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public deleteImage(id: string, options?: any) {\n        return AIBrushApiFp(this.configuration).deleteImage(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Log in with Discord\n     * @param {DiscordLogin} [discordLogin] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public discordLogin(discordLogin?: DiscordLogin, options?: any) {\n        return AIBrushApiFp(this.configuration).discordLogin(discordLogin, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get the assets url\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public getAssetsUrl(options?: any) {\n        return AIBrushApiFp(this.configuration).getAssetsUrl(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get the user\\'s credit balance\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public getCredits(options?: any) {\n        return AIBrushApiFp(this.configuration).getCredits(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get the features\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public getFeatures(options?: any) {\n        return AIBrushApiFp(this.configuration).getFeatures(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get the global settings\n     * @param {string} key \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public getGlobalSettings(key: string, options?: any) {\n        return AIBrushApiFp(this.configuration).getGlobalSettings(key, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get a saved image by id\n     * @param {string} id \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public getImage(id: string, options?: any) {\n        return AIBrushApiFp(this.configuration).getImage(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get the binary image data\n     * @param {string} id \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public getImageData(id: string, options?: any) {\n        return AIBrushApiFp(this.configuration).getImageData(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get download urls for image assets\n     * @param {string} id \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public getImageDownloadUrls(id: string, options?: any) {\n        return AIBrushApiFp(this.configuration).getImageDownloadUrls(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get upload urls for image assets\n     * @param {string} id \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public getImageUploadUrls(id: string, options?: any) {\n        return AIBrushApiFp(this.configuration).getImageUploadUrls(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get the binary mask data\n     * @param {string} id \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public getMaskData(id: string, options?: any) {\n        return AIBrushApiFp(this.configuration).getMaskData(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Get available models\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public getModels(options?: any) {\n        return AIBrushApiFp(this.configuration).getModels(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get the binary thumbnail data\n     * @param {string} id \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public getThumbnailData(id: string, options?: any) {\n        return AIBrushApiFp(this.configuration).getThumbnailData(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Healthcheck\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public healthcheck(options?: any) {\n        return AIBrushApiFp(this.configuration).healthcheck(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Check if the user is admin\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public isAdmin(options?: any) {\n        return AIBrushApiFp(this.configuration).isAdmin(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get a list of saved images\n     * @param {number} [cursor] \n     * @param {string} [filter] \n     * @param {number} [limit] \n     * @param {'asc' | 'desc'} [direction] \n     * @param {string} [fields] Comma-separated list of fields to include in the response images. For example: \\&quot;id,params,created_at\\&quot; \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public listImages(cursor?: number, filter?: string, limit?: number, direction?: 'asc' | 'desc', fields?: string, options?: any) {\n        return AIBrushApiFp(this.configuration).listImages(cursor, filter, limit, direction, fields, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Login by email\n     * @param {LoginInput} [loginInput] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public login(loginInput?: LoginInput, options?: any) {\n        return AIBrushApiFp(this.configuration).login(loginInput, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Redeem a deposit code\n     * @param {string} code \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public redeemDepositCode(code: string, options?: any) {\n        return AIBrushApiFp(this.configuration).redeemDepositCode(code, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Refresh Login code\n     * @param {RefreshLoginInput} [refreshLoginInput] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public refresh(refreshLoginInput?: RefreshLoginInput, options?: any) {\n        return AIBrushApiFp(this.configuration).refresh(refreshLoginInput, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Update the global settings\n     * @param {string} key \n     * @param {UpdateGlobalSettingsRequest} [updateGlobalSettingsRequest] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public updateGlobalSettings(key: string, updateGlobalSettingsRequest?: UpdateGlobalSettingsRequest, options?: any) {\n        return AIBrushApiFp(this.configuration).updateGlobalSettings(key, updateGlobalSettingsRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Update a saved image\n     * @param {string} id \n     * @param {UpdateImageInput} [updateImageInput] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public updateImage(id: string, updateImageInput?: UpdateImageInput, options?: any) {\n        return AIBrushApiFp(this.configuration).updateImage(id, updateImageInput, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Upload the binary image data\n     * @param {string} id \n     * @param {any} [body] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public uploadImageData(id: string, body?: any, options?: any) {\n        return AIBrushApiFp(this.configuration).uploadImageData(id, body, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Upload the binary thumbnail data\n     * @param {string} id \n     * @param {any} [body] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public uploadThumbnailData(id: string, body?: any, options?: any) {\n        return AIBrushApiFp(this.configuration).uploadThumbnailData(id, body, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Verify Login code\n     * @param {VerifyLoginInput} [verifyLoginInput] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public verify(verifyLoginInput?: VerifyLoginInput, options?: any) {\n        return AIBrushApiFp(this.configuration).verify(verifyLoginInput, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n\n\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * AIBrush API\n * Orchestration backend for AI Brush\n *\n * The version of the OpenAPI document: 1.0.0\n * Contact: admin@aibrush.art\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport { Configuration } from \"./configuration\";\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport globalAxios, { AxiosPromise, AxiosInstance } from 'axios';\n\nexport const BASE_PATH = \"https://www.aibrush.art\".replace(/\\/+$/, \"\");\n\n/**\n *\n * @export\n */\nexport const COLLECTION_FORMATS = {\n    csv: \",\",\n    ssv: \" \",\n    tsv: \"\\t\",\n    pipes: \"|\",\n};\n\n/**\n *\n * @export\n * @interface RequestArgs\n */\nexport interface RequestArgs {\n    url: string;\n    options: any;\n}\n\n/**\n *\n * @export\n * @class BaseAPI\n */\nexport class BaseAPI {\n    protected configuration: Configuration | undefined;\n\n    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected axios: AxiosInstance = globalAxios) {\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = configuration.basePath || this.basePath;\n        }\n    }\n};\n\n/**\n *\n * @export\n * @class RequiredError\n * @extends {Error}\n */\nexport class RequiredError extends Error {\n    name: \"RequiredError\" = \"RequiredError\";\n    constructor(public field: string, msg?: string) {\n        super(msg);\n    }\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * AIBrush API\n * Orchestration backend for AI Brush\n *\n * The version of the OpenAPI document: 1.0.0\n * Contact: admin@aibrush.art\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport { Configuration } from \"./configuration\";\nimport { RequiredError,　RequestArgs } from \"./base\";\nimport { AxiosInstance } from 'axios';\n\n/**\n *\n * @export\n */\nexport const DUMMY_BASE_URL = 'https://example.com'\n\n/**\n *\n * @throws {RequiredError}\n * @export\n */\nexport const assertParamExists = function (functionName: string, paramName: string, paramValue: unknown) {\n    if (paramValue === null || paramValue === undefined) {\n        throw new RequiredError(paramName, `Required parameter ${paramName} was null or undefined when calling ${functionName}.`);\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setApiKeyToObject = async function (object: any, keyParamName: string, configuration?: Configuration) {\n    if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n            ? await configuration.apiKey(keyParamName)\n            : await configuration.apiKey;\n        object[keyParamName] = localVarApiKeyValue;\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setBasicAuthToObject = function (object: any, configuration?: Configuration) {\n    if (configuration && (configuration.username || configuration.password)) {\n        object[\"auth\"] = { username: configuration.username, password: configuration.password };\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setBearerAuthToObject = async function (object: any, configuration?: Configuration) {\n    if (configuration && configuration.accessToken) {\n        const accessToken = typeof configuration.accessToken === 'function'\n            ? await configuration.accessToken()\n            : await configuration.accessToken;\n        object[\"Authorization\"] = \"Bearer \" + accessToken;\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setOAuthToObject = async function (object: any, name: string, scopes: string[], configuration?: Configuration) {\n    if (configuration && configuration.accessToken) {\n        const localVarAccessTokenValue = typeof configuration.accessToken === 'function'\n            ? await configuration.accessToken(name, scopes)\n            : await configuration.accessToken;\n        object[\"Authorization\"] = \"Bearer \" + localVarAccessTokenValue;\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setSearchParams = function (url: URL, ...objects: any[]) {\n    const searchParams = new URLSearchParams(url.search);\n    for (const object of objects) {\n        for (const key in object) {\n            if (Array.isArray(object[key])) {\n                searchParams.delete(key);\n                for (const item of object[key]) {\n                    searchParams.append(key, item);\n                }\n            } else {\n                searchParams.set(key, object[key]);\n            }\n        }\n    }\n    url.search = searchParams.toString();\n}\n\n/**\n *\n * @export\n */\nexport const serializeDataIfNeeded = function (value: any, requestOptions: any, configuration?: Configuration) {\n    const nonString = typeof value !== 'string';\n    const needsSerialization = nonString && configuration && configuration.isJsonMime\n        ? configuration.isJsonMime(requestOptions.headers['Content-Type'])\n        : nonString;\n    return needsSerialization\n        ? JSON.stringify(value !== undefined ? value : {})\n        : (value || \"\");\n}\n\n/**\n *\n * @export\n */\nexport const toPathString = function (url: URL) {\n    return url.pathname + url.search + url.hash\n}\n\n/**\n *\n * @export\n */\nexport const createRequestFunction = function (axiosArgs: RequestArgs, globalAxios: AxiosInstance, BASE_PATH: string, configuration?: Configuration) {\n    return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n        const axiosRequestArgs = {...axiosArgs.options, url: (configuration?.basePath || basePath) + axiosArgs.url};\n        return axios.request(axiosRequestArgs);\n    };\n}\n","import React, { FC, useState, useEffect } from \"react\";\nimport { Renderer } from \"./renderer\";\nimport { BaseTool, Tool } from \"./tool\";\nimport { ZoomHelper } from \"./zoomHelper\";\n\nexport class SmudgeTool extends BaseTool implements Tool {\n    private brushSize = 10;\n    private brushOpacity = 0.2;\n\n    private lastX = 0;\n    private lastY = 0;\n    private panning = false;\n    private smudging = false;\n    private _dirty = false;\n\n    set dirty(dirty: boolean) {\n        this._dirty = dirty;\n        if (this.dirtyListener) {\n            this.dirtyListener(dirty);\n        }\n    }\n\n    get dirty() {\n        return this._dirty;\n    }\n\n    private dirtyListener?: (dirty: boolean) => void;\n\n    constructor(renderer: Renderer) {\n        super(renderer, \"smudge\");\n    }\n\n    private sync() {\n        this.renderer.setCursor({\n            type: \"circle\",\n            color: \"white\",\n            radius: this.brushSize / 2,\n            x: this.lastX,\n            y: this.lastY,\n        });\n    }\n\n    updateArgs(args: any) {\n        super.updateArgs(args);\n        this.brushSize = args.brushSize || 10;\n        this.brushOpacity = args.brushOpacity || 0.2;\n        this.sync();\n    }\n\n    onMouseMove(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>): void {\n        let { x, y } = this.zoomHelper.translateMouseToCanvasCoordinates(\n            event.nativeEvent.offsetX,\n            event.nativeEvent.offsetY\n        );\n\n        if (this.panning) {\n            this.zoomHelper.onPan(event);\n        } else if (this.smudging) {\n            this.renderer.smudgeLine(\n                this.lastX,\n                this.lastY,\n                x,\n                y,\n                this.brushSize,\n                this.brushOpacity\n            );\n            this.dirty = true;\n        }\n\n        this.lastX = x;\n        this.lastY = y;\n        this.sync();\n    }\n\n    onWheel(event: WheelEvent) {\n        this.zoomHelper.onWheel(event);\n        this.sync();\n    }\n\n    onMouseDown(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        if (event.button === 0) {\n            this.smudging = true;\n            if (!this.dirty) {\n                this.renderer.copyEditImageFromBaseImage();\n            }\n            this.dirty = true;\n            let { x, y } = this.zoomHelper.translateMouseToCanvasCoordinates(\n                event.nativeEvent.offsetX,\n                event.nativeEvent.offsetY\n            );\n            this.lastX = x;\n            this.lastY = y;\n            this.sync();\n        } else if (event.button === 1) {\n            this.panning = true;\n        }\n        this.sync();\n    }\n\n    onMouseUp(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        this.smudging = false;\n        this.panning = false;\n        this.sync();\n    }\n\n    onSaveImage(listener: (encodedImage: string) => void): void {\n        this.saveListener = listener;\n    }\n\n    onDirty(listener: (dirty: boolean) => void): void {\n        this.dirtyListener = listener;\n    }\n\n    cancel() {\n        // kind of a hack, clears the selection layer\n        this.renderer.setEditImage(null);\n        this.dirty = false;\n    }\n\n    confirm() {\n        this.renderer.commitSelection();\n        const encodedImage = this.renderer.getEncodedImage(null);\n        if (encodedImage && this.saveListener) {\n            this.saveListener(encodedImage);\n        }\n        this.dirty = false;\n    }\n\n    destroy(): boolean {\n        if (this.dirty) {\n            this.renderer.commitSelection();\n        }\n        return true;\n    }\n}\n\ninterface Props {\n    renderer: Renderer;\n    tool: SmudgeTool;\n}\n\nexport const SmudgeControls: FC<Props> = ({ renderer, tool }) => {\n    const [brushSize, setBrushSize] = useState(10);\n    const [brushOpacity, setBrushOpacity] = useState(0.2);\n    const [dirty, setDirty] = useState(false);\n\n    tool.onDirty(setDirty);\n\n    useEffect(() => {\n        tool.updateArgs({\n            brushSize,\n            brushOpacity,\n        });\n    }, [brushSize, brushOpacity]);\n\n    return (\n        <div style={{ marginTop: \"16px\" }}>\n            <div className=\"form-group\">\n                <label style={{ width: \"100%\" }}>\n                    Brush size\n                    <small\n                        className=\"form-text text-muted\"\n                        style={{ float: \"right\" }}\n                    >\n                        {brushSize}px\n                    </small>\n                </label>\n                <input\n                    type=\"range\"\n                    className=\"form-control-range\"\n                    min=\"1\"\n                    max=\"100\"\n                    value={brushSize}\n                    onChange={(e) => setBrushSize(parseInt(e.target.value))}\n                />\n            </div>\n            <div className=\"form-group\">\n                <label style={{ width: \"100%\" }}>\n                    Brush opacity\n                    <small\n                        className=\"form-text text-muted\"\n                        style={{ float: \"right\" }}\n                    >\n                        {Math.round(brushOpacity * 100)}%\n                    </small>\n                </label>\n                <input\n                    type=\"range\"\n                    className=\"form-control-range\"\n                    min=\"0\"\n                    max=\"1\"\n                    step=\"0.01\"\n                    value={brushOpacity}\n                    onChange={(e) =>\n                        setBrushOpacity(parseFloat(e.target.value))\n                    }\n                />\n            </div>\n            <div\n                className=\"form-group\"\n                style={{\n                    marginTop: \"16px\",\n                    visibility: dirty ? \"visible\" : \"hidden\",\n                }}\n            >\n                <button\n                    className=\"btn btn-secondary\"\n                    onClick={() => tool.cancel()}\n                >\n                    Revert\n                </button>\n                <button\n                    className=\"btn btn-primary\"\n                    onClick={() => tool.confirm()}\n                    style={{ marginLeft: \"8px\" }}\n                >\n                    Save\n                </button>\n            </div>\n        </div>\n    );\n};\n","import React, { FC, useState, useEffect, useRef } from \"react\";\nimport axios from \"axios\";\nimport { Prompt } from \"react-router\";\n\nimport { sleep } from \"../../lib/sleep\";\nimport { defaultArgs } from \"../../components/ImagePrompt\";\nimport { Tool, BaseTool } from \"./tool\";\nimport { Renderer } from \"./renderer\";\nimport { SelectionTool } from \"./selection-tool\";\nimport { Cursor, Rect } from \"./models\";\nimport {\n    AIBrushApi,\n    CreateImageInput,\n    Image as APIImage,\n    ImageList,\n    StatusEnum,\n} from \"../../client\";\nimport { ZoomHelper } from \"./zoomHelper\";\nimport { getClosestAspectRatio } from \"../../lib/aspecRatios\";\nimport { getUpscaleLevel } from \"../../lib/upscale\";\nimport {\n    applyAlphaMask,\n    featherEdges,\n    ImageUtilWorker,\n    loadImageDataElement,\n} from \"../../lib/imageutil\";\nimport { ApiSocket, NOTIFICATION_IMAGE_UPDATED } from \"../../lib/apisocket\";\nimport moment from \"moment\";\nimport { ProgressBar } from \"../../components/ProgressBar\";\nimport { calculateImagesCost } from \"../../lib/credits\";\nimport { CostIndicator } from \"../../components/CostIndicator\";\nimport ModelSelector from \"../../components/ModelSelector\";\nimport { ResetToDefaultIcon } from \"../../components/ResetToDefaultIcon\";\n\nconst anonymousClient = axios.create();\n\ntype InpaintToolState =\n    | \"select\"\n    | \"erase\"\n    | \"inpaint\"\n    | \"uploading\"\n    | \"processing\"\n    | \"confirm\"\n    | undefined;\n\ninterface ImageWithData extends APIImage {\n    data?: ImageData;\n}\n\nexport class InpaintTool extends BaseTool implements Tool {\n    private selectionTool: SelectionTool;\n    private prompt: string = \"\";\n    private negativePrompt: string = \"\";\n    private count: number = 4;\n    private brushSize: number = 10;\n    private _dirty = false;\n    private worker: ImageUtilWorker;\n    private idCounter = 0;\n\n    private _state: InpaintToolState;\n    private stateHandler: (state: InpaintToolState) => void = () => {};\n    private selectionControlsListener: (show: boolean) => void = () => {};\n\n    private imageData: Array<ImageData> = [];\n    private selectedImageDataIndex: number = -1;\n    private selectedImageData: ImageData | null = null;\n    private panning = false;\n    private erasing = false;\n    private progressListener?: (progress: number) => void;\n    private errorListener?: (error: string | null) => void;\n    private dirtyListener?: (dirty: boolean) => void;\n\n    set dirty(dirty: boolean) {\n        this._dirty = dirty;\n        if (this.dirtyListener) {\n            this.dirtyListener(dirty);\n        }\n    }\n\n    get dirty() {\n        return this._dirty;\n    }\n\n    private newId(): string {\n        return `${this.idCounter++}`;\n    }\n\n    onError(handler: (error: string | null) => void) {\n        this.errorListener = handler;\n    }\n\n    private notifyError(error: string | null) {\n        if (this.errorListener) {\n            this.errorListener(error);\n        }\n    }\n\n    get state(): InpaintToolState {\n        return this._state;\n    }\n\n    set state(state: InpaintToolState) {\n        if (state != this._state) {\n            if (this._state == \"select\") {\n                this.selectionTool.destroy();\n            }\n            if (this._state === \"erase\") {\n                this.renderer.setCursor(undefined);\n            }\n            this._state = state;\n            this.stateHandler(state);\n\n            if (state == \"confirm\") {\n                this.selectionControlsListener(true);\n            } else {\n                this.selectionControlsListener(false);\n                if (state == \"select\") {\n                    const imageWidth = this.renderer.getWidth();\n                    const imageHeight = this.renderer.getHeight();\n                    const selectionWidth = Math.min(\n                        imageWidth,\n                        imageHeight,\n                        512\n                    );\n                    this.selectionTool.updateArgs({\n                        selectionOverlay: {\n                            x: 0,\n                            y: 0,\n                            width: selectionWidth,\n                            height: selectionWidth,\n                        },\n                    });\n                }\n            }\n        }\n    }\n\n    selectSupported(): boolean {\n        // return !(\n        //     this.renderer.getWidth() == this.renderer.getHeight() &&\n        //     getUpscaleLevel(\n        //         this.renderer.getWidth(),\n        //         this.renderer.getHeight()\n        //     ) === 0\n        // );\n        return true;\n    }\n\n    constructor(renderer: Renderer) {\n        super(renderer, \"inpaint\");\n        this.selectionTool = new SelectionTool(renderer);\n        if (this.selectSupported()) {\n            this.state = \"select\";\n            this.selectionTool.updateArgs({\n                outpaint: this.getArgs().outpaint,\n            });\n        } else {\n            this.state = \"erase\";\n        }\n        this.worker = new ImageUtilWorker();\n    }\n\n    onMouseDown(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        if (this.state == \"select\") {\n            this.selectionTool.onMouseDown(event);\n            return;\n        }\n        let { x, y } = this.zoomHelper.translateMouseToCanvasCoordinates(\n            event.nativeEvent.offsetX,\n            event.nativeEvent.offsetY\n        );\n        if (event.button === 1) {\n            this.panning = true;\n            return;\n        }\n        if (this.state == \"erase\") {\n            this.erasing = true;\n            this.erasePoint(x, y);\n        }\n    }\n\n    private erasePoint(x: number, y: number) {\n        if (!this.dirty) {\n            this.dirty = true;\n        }\n        this.renderer.erasePoint(x, y, this.brushSize);\n        this.renderer.render();\n    }\n\n    private updateCursor(x: number, y: number) {\n        if (this.state == \"erase\") {\n            this.renderer.setCursor({\n                color: \"white\",\n                radius: this.brushSize / 2,\n                type: \"circle\",\n                x,\n                y,\n            });\n        } else {\n            this.renderer.setCursor({\n                color: \"white\",\n                radius: 10,\n                type: \"crosshairs\",\n                x,\n                y,\n            });\n        }\n    }\n\n    onMouseMove(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        let { x, y } = this.zoomHelper.translateMouseToCanvasCoordinates(\n            event.nativeEvent.offsetX,\n            event.nativeEvent.offsetY\n        );\n        this.updateCursor(x, y);\n        if (this.state == \"select\") {\n            this.selectionTool.onMouseMove(event);\n            return;\n        }\n\n        if (this.panning) {\n            this.zoomHelper.onPan(event);\n        }\n\n        if (this.erasing) {\n            this.erasePoint(x, y);\n        }\n    }\n\n    onMouseUp(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        if (this.state == \"select\") {\n            this.selectionTool.onMouseUp(event);\n        }\n        this.panning = false;\n        this.erasing = false;\n    }\n\n    onMouseLeave(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>): void {\n        if (this.state == \"select\") {\n            this.selectionTool.onMouseLeave(event);\n        }\n        this.panning = false;\n        this.erasing = false;\n    }\n\n    onWheel(event: WheelEvent) {\n        this.zoomHelper.onWheel(event);\n        let { x, y } = this.zoomHelper.translateMouseToCanvasCoordinates(\n            event.offsetX,\n            event.offsetY\n        );\n        this.updateCursor(x, y);\n    }\n\n    updateArgs(args: any) {\n        args = {\n            ...this.getArgs(),\n            ...args,\n        };\n        super.updateArgs(args);\n        this.prompt = args.prompt || \"\";\n        this.negativePrompt = args.negativePrompt || \"\";\n        this.count = args.count || 4;\n        this.brushSize = args.brushSize || 10;\n\n        this.updateCursor(\n            this.renderer.getWidth() / 2,\n            this.renderer.getHeight() / 2\n        );\n        this.selectionTool.updateArgs({\n            outpaint: args.outpaint,\n        });\n    }\n\n    onChangeState(handler: (state: InpaintToolState) => void) {\n        this.stateHandler = handler;\n    }\n\n    onShowSelectionControls(listener: (show: boolean) => void): void {\n        this.selectionControlsListener = listener;\n    }\n\n    onProgress(listener: (progress: number) => void): void {\n        this.progressListener = listener;\n    }\n\n    private async loadImageData(\n        api: AIBrushApi,\n        imageId: string,\n        alphaMask: ImageData,\n        selectionOverlay: Rect\n    ): Promise<ImageData> {\n        const imageElement = await loadImageDataElement(api, imageId);\n        const canvas = document.createElement(\"canvas\");\n        canvas.width = selectionOverlay.width;\n        canvas.height = selectionOverlay.height;\n        const ctx = canvas.getContext(\"2d\");\n        if (!ctx) {\n            throw new Error(\"Failed to get canvas context\");\n        }\n        ctx.drawImage(\n            imageElement,\n            0,\n            0,\n            selectionOverlay.width,\n            selectionOverlay.height\n        );\n        const imageData = ctx.getImageData(\n            0,\n            0,\n            selectionOverlay.width,\n            selectionOverlay.height\n        );\n\n        const id = this.newId();\n        const resp = await this.worker.processRequest({\n            id,\n            alphaMode: \"alpha\",\n            alphaPixels: alphaMask.data,\n            feather: true,\n            height: this.renderer.getHeight(),\n            width: this.renderer.getWidth(),\n            pixels: imageData.data,\n            selectionOverlay,\n            featherWidth: 10,\n        });\n        const updatedImageData = new ImageData(\n            resp.pixels,\n            imageData.width,\n            imageData.height\n        );\n        // remove canvas\n        canvas.remove();\n        return updatedImageData;\n    }\n\n    cancel() {\n        if (this.selectSupported()) {\n            this.state = \"select\";\n        } else {\n            this.state = \"erase\";\n        }\n        this.renderer.snapshot();\n        this.renderer.undo();\n        this.renderer.clearRedoStack();\n        this.imageData = [];\n        this.renderer.setEditImage(null);\n        this.dirty = false;\n    }\n\n    private updateProgress(progress: number) {\n        if (this.progressListener) {\n            this.progressListener(progress);\n        }\n    }\n\n    async submit(\n        api: AIBrushApi,\n        apisocket: ApiSocket,\n        image: APIImage,\n        model: string\n    ) {\n        this.notifyError(null);\n        let selectionOverlay = this.renderer.getSelectionOverlay();\n        if (!selectionOverlay) {\n            console.error(\"No selection\");\n            return;\n        }\n\n        if (this.getArgs().outpaint) {\n            // check if selection overlay is out of renderer bounds (width, height)\n            if (\n                selectionOverlay.x < 0 ||\n                selectionOverlay.y < 0 ||\n                selectionOverlay.x + selectionOverlay.width >\n                    this.renderer.getWidth() ||\n                selectionOverlay.y + selectionOverlay.height >\n                    this.renderer.getHeight()\n            ) {\n                this.renderer.expandToOverlay();\n                selectionOverlay = this.renderer.getSelectionOverlay()!;\n            }\n        }\n\n        this.state = \"uploading\";\n        this.updateProgress(0);\n\n        // get the erased area, then undo the erase to get the original image\n        const encodedMask = this.renderer.getEncodedMask(selectionOverlay);\n        const maskData = this.renderer.getImageData(selectionOverlay);\n        // hack to restore the image\n        this.renderer.snapshot();\n        this.renderer.undo();\n        this.renderer.clearRedoStack();\n\n        const encodedImage = this.renderer.getEncodedImage(selectionOverlay);\n\n        // upload temporary images in parallel\n        const tmpImagePromises = [\n            api.createTemporaryImage(\"png\"),\n            api.createTemporaryImage(\"png\"),\n        ];\n        const tmpImages = await Promise.all(tmpImagePromises);\n        const binaryImages = [\n            Buffer.from(encodedImage!, \"base64\"),\n            Buffer.from(encodedMask!, \"base64\"),\n        ];\n        const progress = [0, 0];\n        const uploadPromises: Array<Promise<any>> = [];\n        for (let i = 0; i < tmpImages.length; i++) {\n            const tmpImage = tmpImages[i].data;\n            const binaryImage = binaryImages[i];\n            uploadPromises.push(\n                anonymousClient.put(tmpImage.upload_url, binaryImage, {\n                    headers: {\n                        \"Content-Type\": \"image/png\",\n                    },\n                    onUploadProgress: (e) => {\n                        progress[i] = e.loaded / e.total;\n                        this.updateProgress((progress[0] + progress[1]) / 2);\n                    },\n                })\n            );\n        }\n        await Promise.all(uploadPromises);\n\n        const input: CreateImageInput = defaultArgs();\n        input.label = \"\";\n        // input.encoded_image = encodedImage;\n        // input.encoded_mask = encodedMask;\n        input.tmp_image_id = tmpImages[0].data.id;\n        input.tmp_mask_id = tmpImages[1].data.id;\n        input.parent = image.id;\n        input.params.prompt = this.prompt || image.params.prompt;\n        input.params.negative_prompt =\n            this.negativePrompt || image.params.negative_prompt;\n        input.params.denoising_strength = 1;\n        input.count = this.count;\n        input.model = model;\n\n        const closestAspectRatio = getClosestAspectRatio(\n            selectionOverlay!.width,\n            selectionOverlay!.height\n        );\n        input.params.width = closestAspectRatio.width;\n        input.params.height = closestAspectRatio.height;\n        input.temporary = true;\n\n        let resp: ImageList | null = null;\n\n        try {\n            resp = (await api.createImage(input)).data;\n        } catch (err) {\n            console.error(\"Error creating images\", err);\n            this.notifyError(\"Failed to create image\");\n            this.state = \"select\";\n            return;\n        }\n        this.state = \"processing\";\n        this.updateProgress(0);\n        let newImages: Array<ImageWithData> | undefined = resp.images;\n        if (!newImages || newImages.length === 0) {\n            this.state = \"select\";\n            throw new Error(\"No images returned\");\n        }\n        let completed = false;\n        let lastUpdate = moment();\n\n        const onMessage = async (msg: string) => {\n            console.log(\"inpaint onMessage\", msg);\n            const img = JSON.parse(msg) as any;\n            if (\n                img.type === NOTIFICATION_IMAGE_UPDATED &&\n                img.status === StatusEnum.Completed\n            ) {\n                lastUpdate = moment();\n                for (let i = 0; i < newImages!.length; i++) {\n                    if (newImages![i].id === img.id) {\n                        const imageData = await this.loadImageData(\n                            api,\n                            newImages![i].id,\n                            maskData!,\n                            selectionOverlay!\n                        );\n                        newImages![i].data = imageData;\n                        newImages![i].status = StatusEnum.Completed;\n                    }\n                }\n            } else if (img.status === StatusEnum.Error) {\n                for (let i = 0; i < newImages!.length; i++) {\n                    if (newImages![i].id === img.id) {\n                        newImages![i].status = StatusEnum.Error;\n                    }\n                }\n            }\n        };\n        apisocket.addMessageListener(onMessage);\n        try {\n            let startTime = moment();\n            let lastCheck = moment();\n            while (!completed) {\n                let completeCount = 0;\n                await sleep(100);\n                // poll for completion\n                for (let i = 0; i < newImages!.length; i++) {\n                    if (\n                        newImages![i].status === StatusEnum.Completed ||\n                        newImages![i].status === StatusEnum.Error\n                    ) {\n                        completeCount++;\n                        continue;\n                    }\n                }\n                this.updateProgress(completeCount / newImages!.length);\n                if (completeCount === newImages!.length) {\n                    completed = true;\n                    continue;\n                }\n\n                // fallback if sockets don't catch one\n                if (moment().diff(lastCheck, \"seconds\") > 10) {\n                    // get list of ids that aren't completed and batch get them.\n                    const pendingIds = newImages\n                        .filter(\n                            (img) =>\n                                img.status === StatusEnum.Pending ||\n                                img.status === StatusEnum.Processing\n                        )\n                        .map((img) => img.id);\n                    console.log(\"Checking pending images\", pendingIds);\n                    const updatedImagesResult = await api.batchGetImages(\n                        undefined,\n                        {\n                            ids: pendingIds,\n                        }\n                    );\n                    const updatedImages = updatedImagesResult.data.images;\n                    const byId = updatedImages!.reduce((acc, img) => {\n                        acc[img.id] = img;\n                        return acc;\n                    }, {} as Record<string, APIImage>);\n                    for (let i = 0; i < newImages!.length; i++) {\n                        if (\n                            newImages![i].status === StatusEnum.Pending ||\n                            newImages![i].status === StatusEnum.Processing\n                        ) {\n                            const updated = byId[newImages![i].id];\n                            if (updated) {\n                                newImages![i].status = updated.status;\n                                if (updated.status === StatusEnum.Completed) {\n                                    lastUpdate = moment();\n                                    const imageData = await this.loadImageData(\n                                        api,\n                                        newImages![i].id,\n                                        maskData!,\n                                        selectionOverlay!\n                                    );\n                                    newImages![i].data = imageData;\n                                }\n                            }\n                        }\n                    }\n                    lastCheck = moment();\n                }\n                // timeout of 2 minutes\n                if (\n                    (lastUpdate.isAfter(startTime) &&\n                        moment().diff(lastUpdate, \"seconds\") > 30) ||\n                    moment().diff(startTime, \"minutes\") > 2\n                ) {\n                    completed = true;\n                }\n            }\n        } finally {\n            apisocket.removeMessageListener(onMessage);\n        }\n\n        // sort images by score descending\n        newImages!.sort((a, b) => {\n            return b.score - a.score;\n        });\n        newImages = newImages!.filter((img) => {\n            return img.status === StatusEnum.Completed;\n        });\n\n        this.imageData = [];\n        for (let i = 0; i < newImages!.length; i++) {\n            if (newImages![i].data) {\n                this.imageData.push(newImages![i].data as ImageData);\n            }\n        }\n        if (this.imageData.length === 0) {\n            this.state = \"select\";\n            this.notifyError(\"No images returned\");\n            return;\n        }\n        this.renderer.setEditImage(this.imageData[0]);\n        this.selectedImageDataIndex = 0;\n        this.selectedImageData = this.imageData[0];\n        this.state = \"confirm\";\n    }\n\n    onDirty(listener: (dirty: boolean) => void): void {\n        this.dirtyListener = listener;\n    }\n\n    select(direction: \"left\" | \"right\") {\n        if (direction == \"left\") {\n            this.selectedImageDataIndex--;\n            if (this.selectedImageDataIndex < -1) {\n                this.selectedImageDataIndex = this.imageData.length - 1;\n            }\n        }\n        if (direction == \"right\") {\n            this.selectedImageDataIndex++;\n            if (this.selectedImageDataIndex >= this.imageData.length) {\n                this.selectedImageDataIndex = -1;\n            }\n        }\n        if (this.selectedImageDataIndex === -1) {\n            this.selectedImageData = null;\n        } else {\n            this.selectedImageData =\n                this.imageData[this.selectedImageDataIndex];\n        }\n        this.renderer.setEditImage(this.selectedImageData);\n    }\n\n    onSaveImage(listener: (encodedImage: string, args?: any) => void): void {\n        this.saveListener = listener;\n    }\n\n    confirm() {\n        this.renderer.commitSelection();\n\n        this.imageData = [];\n        const encodedImage = this.renderer.getEncodedImage(null);\n        if (encodedImage && this.saveListener) {\n            this.saveListener(encodedImage, {\n                phrases: [this.prompt],\n                negative_phrases: [this.negativePrompt],\n                selection_overlay: this.renderer.getSelectionOverlay(),\n            });\n        }\n        this.dirty = false;\n        if (this.selectSupported()) {\n            this.state = \"select\";\n        } else {\n            this.state = \"erase\";\n        }\n    }\n\n    destroy(): boolean {\n        if (this.dirty) {\n            if (!window.confirm(\"Discard changes?\")) {\n                return false;\n            }\n        }\n        this.renderer.setCursor(undefined);\n        this.renderer.setEditImage(null);\n        this.worker.destroy();\n        return true;\n    }\n}\n\ninterface ControlsProps {\n    api: AIBrushApi;\n    apisocket: ApiSocket;\n    image: APIImage;\n    renderer: Renderer;\n    tool: InpaintTool;\n}\n\nexport const InpaintControls: FC<ControlsProps> = ({\n    api,\n    apisocket,\n    image,\n    renderer,\n    tool,\n}) => {\n    const [count, setCount] = useState(4);\n    const [prompt, setPrompt] = useState(image.params.prompt || \"\");\n    const [negativePrompt, setNegativePrompt] = useState(\n        image.params.negative_prompt || \"\"\n    );\n    const [state, setState] = useState<InpaintToolState>(tool.state);\n    const [progress, setProgress] = useState(0);\n    const [error, setError] = useState<string | null>(null);\n    const [brushSize, setBrushSize] = useState(10);\n    const [dirty, setDirty] = useState(false);\n    const [outpaint, setoutpaint] = useState<boolean | undefined>(\n        tool.getArgs().outpaint\n    );\n    const [model, setModel] = useState(\"Deliberate Inpainting\");\n    const [selectingModel, setSelectingModel] = useState(false);\n\n    useEffect(() => {\n        tool.updateArgs({\n            brushSize,\n        });\n    }, [brushSize]);\n\n    tool.onChangeState(setState);\n    tool.onProgress(setProgress);\n    tool.onError(setError);\n    tool.onDirty(setDirty);\n\n    const onSelectModel = (model: string) => {\n        setModel(model);\n        setSelectingModel(false);\n    };\n\n    if (state === \"uploading\" || state === \"processing\") {\n        return (\n            <div style={{ marginTop: \"16px\" }}>\n                <i className=\"fa fa-spinner fa-spin\"></i>&nbsp;{\" \"}\n                {state === \"uploading\" ? \"Uploading...\" : \"Inpainting...\"}\n                <br />\n                <ProgressBar progress={progress} />\n            </div>\n        );\n    }\n    return (\n        <div\n            style={{\n                marginTop: \"16px\",\n                marginBottom: \"8px\",\n                marginLeft: \"16px\",\n            }}\n        >\n            {error && (\n                <div className=\"alert alert-danger\" role=\"alert\">\n                    {/* dismiss button */}\n                    <button\n                        type=\"button\"\n                        className=\"close\"\n                        data-dismiss=\"alert\"\n                        aria-label=\"Close\"\n                        onClick={() => setError(null)}\n                    >\n                        <span aria-hidden=\"true\">&times;</span>\n                    </button>\n                    {error}\n                </div>\n            )}\n            {state === \"select\" && (\n                <>\n                    <p>\n                        {/* info icon */}\n                        <i className=\"fa fa-info-circle\"></i>&nbsp; Move the\n                        selection rectangle to the area that you want to\n                        inpaint. For outpainting, try zooming out.\n                    </p>\n                    <div className=\"form-group\">\n                        {/* allow outpaint checkbox */}\n                        <div className=\"form-check\">\n                            <input\n                                className=\"form-check-input\"\n                                type=\"checkbox\"\n                                id=\"allowoutpaint\"\n                                checked={!!outpaint}\n                                onChange={(e) => {\n                                    setoutpaint(e.target.checked);\n                                    tool.updateArgs({\n                                        outpaint: e.target.checked,\n                                    });\n                                }}\n                            />\n                            <label\n                                className=\"form-check-label\"\n                                htmlFor=\"allowoutpaint\"\n                            >\n                                Allow outpainting\n                            </label>\n                        </div>\n                    </div>\n                </>\n            )}\n\n            {state === \"erase\" && (\n                <>\n                    <p>\n                        {/* info icon */}\n                        <i className=\"fa fa-info-circle\"></i>&nbsp; Erase the\n                        area that you want to inpaint.\n                    </p>\n                    <div className=\"form-group\">\n                        <label style={{ width: \"100%\" }}>\n                            Brush size\n                            <small\n                                className=\"form-text text-muted\"\n                                style={{ float: \"right\" }}\n                            >\n                                {brushSize}px\n                            </small>\n                        </label>\n                        <input\n                            type=\"range\"\n                            className=\"form-control-range\"\n                            min=\"1\"\n                            max=\"100\"\n                            value={brushSize}\n                            onChange={(e) =>\n                                setBrushSize(parseInt(e.target.value))\n                            }\n                        />\n                    </div>\n                </>\n            )}\n\n            {state === \"inpaint\" && (\n                <>\n                    <p>\n                        {/* info icon */}\n                        <i className=\"fa fa-info-circle\"></i>&nbsp; Confirm the\n                        parameters below and continue\n                    </p>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"prompt\">\n                            Prompt&nbsp;\n                            <ResetToDefaultIcon onClick={() => setPrompt(image.params.prompt || \"\")} />\n                        </label>\n                        <input\n                            type=\"text\"\n                            className=\"form-control\"\n                            id=\"prompt\"\n                            value={prompt}\n                            onChange={(e) => {\n                                setPrompt(e.target.value);\n                            }}\n                        />\n                        <small className=\"form-text text-muted\">\n                            Customize the text prompt here\n                        </small>\n                    </div>\n                    {/* negative prompt */}\n                    <div className=\"form-group\">\n                        <label htmlFor=\"negativeprompt\">\n                            Negative prompt&nbsp;\n                            <ResetToDefaultIcon onClick={() => setNegativePrompt(image.params.negative_prompt || \"\")} />\n                        </label>\n                        <input\n                            type=\"text\"\n                            className=\"form-control\"\n                            value={negativePrompt}\n                            onChange={(e) => {\n                                setNegativePrompt(e.target.value);\n                            }}\n                        />\n                        <small className=\"form-text text-muted\">\n                            Customize the negative text prompt here\n                        </small>\n                    </div>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"count\">Count: {count}</label>\n                        <input\n                            type=\"range\"\n                            className=\"form-control-range\"\n                            id=\"count\"\n                            min=\"1\"\n                            max=\"10\"\n                            step=\"1\"\n                            value={count}\n                            onChange={(e) => {\n                                setCount(parseInt(e.target.value));\n                            }}\n                        />\n                        <small className=\"form-text text-muted\">\n                            Number of inpaint options\n                        </small>\n                    </div>\n                    {/* select model dropdown */}\n                    {/* options: stable_diffusion_inpainting, \"Epic Diffusion\", \"Deliberate\" */}\n                    <div className=\"form-group\">\n                        <label htmlFor=\"model\">Model</label>\n                        <div>\n                            <button\n                                type=\"button\"\n                                className=\"btn btn-secondary light-button\"\n                                onClick={() => setSelectingModel(true)}\n                            >\n                                {model}&nbsp;\n                                <i className=\"fas fa-caret-down\"></i>\n                            </button>\n                        </div>\n                        <small className=\"form-text text-muted\">\n                            Select the inpaint model\n                        </small>\n                    </div>\n                    <div className=\"form-group\">\n                        <CostIndicator imagesCost={count} />\n                    </div>\n                </>\n            )}\n\n            {state === \"confirm\" && (\n                <>\n                    <p>\n                        Use the <i className=\"fa fa-arrow-left\"></i> and{\" \"}\n                        <i className=\"fa fa-arrow-right\"></i> buttons to\n                        navigate between the inpaint options\n                    </p>\n                </>\n            )}\n\n            <div className=\"form-group\">\n                {(dirty ||\n                    state === \"confirm\" ||\n                    (state == \"erase\" && tool.selectSupported()) ||\n                    state == \"inpaint\") && (\n                    <button\n                        style={{ marginRight: \"8px\" }}\n                        className=\"btn btn-primary btn-sm\"\n                        onClick={() => {\n                            tool.cancel();\n                        }}\n                    >\n                        {/* cancel icon */}\n                        <i className=\"fa fa-times\"></i>&nbsp; Revert\n                    </button>\n                )}\n\n                {state === \"confirm\" && (\n                    <>\n                        <button\n                            className=\"btn btn-primary btn-sm\"\n                            onClick={() => tool.confirm()}\n                            style={{ marginRight: \"8px\" }}\n                        >\n                            {/* save icon */}\n                            <i className=\"fa fa-save\"></i>&nbsp; Save\n                        </button>\n                    </>\n                )}\n                {state == \"select\" && (\n                    <button\n                        style={{ marginRight: \"8px\" }}\n                        type=\"button\"\n                        className=\"btn btn-primary btn-sm\"\n                        onClick={() => (tool.state = \"erase\")}\n                    >\n                        <i className=\"fa fa-eraser\"></i>&nbsp; Continue\n                    </button>\n                )}\n                {state == \"erase\" && (\n                    <button\n                        style={{ marginRight: \"8px\" }}\n                        type=\"button\"\n                        className=\"btn btn-primary btn-sm\"\n                        onClick={() => (tool.state = \"inpaint\")}\n                    >\n                        <i className=\"fa fa-paint-brush\"></i>&nbsp; Continue\n                    </button>\n                )}\n                {state === \"inpaint\" && (\n                    <button\n                        style={{ marginRight: \"8px\" }}\n                        className=\"btn btn-primary btn-sm\"\n                        onClick={() => {\n                            tool.updateArgs({\n                                count,\n                                prompt,\n                                negativePrompt,\n                            });\n                            tool.submit(api, apisocket, image, model);\n                        }}\n                    >\n                        {/* paint icon */}\n                        <i className=\"fa fa-paint-brush\"></i>&nbsp; Inpaint\n                    </button>\n                )}\n            </div>\n            <Prompt\n                when={dirty}\n                message=\"Are you sure you want to leave? Your changes will be lost.\"\n            />\n            {selectingModel && (\n                <ModelSelector\n                    api={api}\n                    onCancel={() => setSelectingModel(false)}\n                    onSelectModel={onSelectModel}\n                    initialSelectedModel={model}\n                    inpainting={true}\n                />\n            )}\n        </div>\n    );\n};\n","import React, { useState, useEffect, useRef } from \"react\";\nimport { useParams, useHistory } from \"react-router-dom\";\nimport axios, { AxiosInstance } from \"axios\";\nimport * as uuid from \"uuid\";\n\nimport { AIBrushApi } from \"../../client\";\nimport { getUpscaleLevel } from \"../../lib/upscale\";\nimport \"./ImageEditor.css\";\nimport { createRenderer, Renderer } from \"./renderer\";\nimport { Tool, BaseTool } from \"./tool\";\nimport { SelectionTool, Controls as SelectionControls } from \"./selection-tool\";\nimport { EnhanceTool, EnhanceControls } from \"./enhance-tool\";\nimport { PencilTool, Controls as PencilControls, defaultColors } from \"./pencil-tool\";\nimport { SmudgeTool, SmudgeControls } from \"./smudge-tool\";\nimport { ImportExportControls } from \"./import-export\";\nimport { InpaintControls, InpaintTool } from \"./inpaint-tool\";\nimport { AugmentControls } from \"./augment-tool\";\nimport { defaultArgs } from \"../../components/ImagePrompt\";\nimport { ApiSocket } from \"../../lib/apisocket\";\nimport {\n    createEncodedThumbnail,\n    encodedImageToBlob,\n    uploadBlob,\n} from \"../../lib/imageutil\";\nimport { BusyModal } from \"../../components/BusyModal\";\nimport { LocalImage, LocalImagesStore } from \"../../lib/localImagesStore\";\nimport { render } from \"@testing-library/react\";\n\ninterface CanPreventDefault {\n    preventDefault: () => void;\n}\n\ninterface Props {\n    api: AIBrushApi;\n    apisocket: ApiSocket;\n    assetsUrl: string;\n    localImages: LocalImagesStore;\n}\n\ninterface ToolConfig {\n    name: string;\n    iconClass: string;\n    constructor: (r: Renderer) => Tool;\n    renderControls: (t: Tool, renderer: Renderer) => JSX.Element;\n    defaultArgs: any;\n}\n\nexport const anonymousClient = axios.create();\ndelete anonymousClient.defaults.headers.common[\"Authorization\"];\n\nexport const ImageEditor: React.FC<Props> = ({\n    api,\n    apisocket,\n    localImages,\n}) => {\n    const [showSelectionControls, setShowSelectionControls] = useState(false);\n    const tools: Array<ToolConfig> = [\n        {\n            name: \"inpaint\",\n            iconClass: \"fas fa-paint-brush\",\n            constructor: (r: Renderer) => new InpaintTool(r),\n            defaultArgs: {},\n            renderControls: (t: Tool, renderer: Renderer) => {\n                t.onShowSelectionControls(setShowSelectionControls);\n                return (\n                    <InpaintControls\n                        tool={t as InpaintTool}\n                        renderer={renderer}\n                        api={api}\n                        apisocket={apisocket}\n                        image={image!}\n                    />\n                );\n            },\n        },\n        {\n            name: \"enhance\",\n            iconClass: \"fas fa-magic\",\n            constructor: (r: Renderer) => new EnhanceTool(r),\n            defaultArgs: {\n                variationStrength: 0.75,\n            },\n            renderControls: (t: Tool, renderer: Renderer) => {\n                t.onShowSelectionControls(setShowSelectionControls);\n                return (\n                    <EnhanceControls\n                        tool={t as EnhanceTool}\n                        renderer={renderer}\n                        api={api}\n                        apisocket={apisocket}\n                        image={image!}\n                    />\n                );\n            },\n        },\n        {\n            name: \"pencil\",\n            iconClass: \"fas fa-pencil-alt\",\n            constructor: (r: Renderer) => new PencilTool(r, \"base\"),\n            defaultArgs: {},\n            renderControls: (t: Tool, renderer: Renderer) => {\n                return (\n                    <PencilControls\n                        tool={t as PencilTool}\n                        renderer={renderer}\n                        colors={defaultColors}\n                    />\n                );\n            },\n        },\n        {\n            name: \"smudge\",\n            // finger icon\n            iconClass: \"fas fa-hand-pointer\",\n            constructor: (r: Renderer) => new SmudgeTool(r),\n            defaultArgs: {},\n            renderControls: (t: Tool, renderer: Renderer) => {\n                return (\n                    <SmudgeControls\n                        tool={t as SmudgeTool}\n                        renderer={renderer}\n                    />\n                );\n            },\n        },\n        {\n            name: \"import-export\",\n            iconClass: \"fas fa-file-import\",\n            constructor: (r: Renderer) => new BaseTool(r, \"import-export\"),\n            defaultArgs: {},\n            renderControls: (t: Tool, renderer: Renderer) => {\n                return (\n                    <ImportExportControls\n                        renderer={renderer}\n                        tool={t as BaseTool}\n                        api={api}\n                    />\n                );\n            },\n        },\n        {\n            name: \"augment\",\n            iconClass: \"fas fa-image\",\n            constructor: (r: Renderer) => new BaseTool(r, \"augment\"),\n            defaultArgs: {},\n            renderControls: (t: Tool, renderer: Renderer) => {\n                return (\n                    <AugmentControls\n                        renderer={renderer}\n                        tool={t as BaseTool}\n                        api={api}\n                        image={image!}\n                    />\n                );\n            },\n        },\n    ];\n\n    const [image, setImage] = useState<LocalImage | null>(null);\n    const [renderer, setRenderer] = useState<Renderer | null>(null);\n    const [tool, setTool] = useState<Tool | null>(null);\n    const [canUndo, setCanUndo] = useState(false);\n    const [canRedo, setCanRedo] = useState(false);\n    const [busyMessage, setBusyMessage] = useState<string | null>(null);\n\n    const { id } = useParams<{ id: string }>();\n    const history = useHistory();\n\n    const canvasRef = useRef<HTMLCanvasElement>(null);\n\n    const onSelectTool = (toolconfig: ToolConfig) => {\n        if (renderer) {\n            if (tool) {\n                if (!tool.destroy()) {\n                    return;\n                }\n            }\n            const newTool = toolconfig.constructor(renderer);\n            setTool(newTool);\n            newTool.onSaveImage((encodedImage, args = {}) => {\n                console.log(\"Saving image...\");\n                saveNewImage(encodedImage, args);\n            });\n        }\n    };\n\n    /**\n     * Saves a new image to the server\n     *\n     * @param encodedImage base64 encoded image\n     * @param newArgs may contain new phrases and negative phrases\n     */\n    const saveNewImage = async (encodedImage: string, newArgs: any) => {\n        if (!image || !encodedImage) {\n            throw new Error(\"Cannot save new image without existing image\");\n        }\n        if (!renderer) {\n            throw new Error(\"Cannot save new image without renderer\");\n        }\n        setBusyMessage(\"Saving image...\");\n        try {\n            const newImage: LocalImage = {\n                ...image,\n                params: {\n                    ...image.params,\n                    width: renderer!.getWidth() as any,\n                    height: renderer!.getHeight() as any,\n                },\n                id: uuid.v4(),\n                imageData: `data:image/png;base64,${encodedImage}`,\n            };\n            await localImages.saveImage(newImage);\n\n            // switch url and state to new image\n            setImage(newImage);\n            history.replace(`/image-editor/${newImage.id}`);\n        } finally {\n            setBusyMessage(null);\n        }\n    };\n\n    useEffect(() => {\n        if (image) {\n            return;\n        }\n\n        async function loadImage() {\n            const localImage = await localImages.getImage(id);\n            let imageSrc = \"\";\n            if (localImage) {\n                setImage(localImage);\n                imageSrc = localImage.imageData!;\n            } else {\n                const image = (await api.getImage(id)).data;\n                setImage(image);\n                const download_urls = await api.getImageDownloadUrls(id);\n                // Loading up data as binary, base64 encoding into image url\n                // bypasses browser security nonsense about cross-domain images\n                const resp = await anonymousClient.get(\n                    download_urls.data.image_url!,\n                    {\n                        responseType: \"arraybuffer\",\n                    }\n                );\n                const binaryImageData = Buffer.from(resp.data, \"binary\");\n                const base64ImageData = binaryImageData.toString(\"base64\");\n                imageSrc = `data:image/png;base64,${base64ImageData}`;\n            }\n\n            const imageElement = new Image();\n            imageElement.src = imageSrc;\n            imageElement.onload = () => {\n                if (!canvasRef.current) {\n                    console.error(\"Failed to get canvas\");\n                    return;\n                }\n                const renderer = createRenderer(canvasRef.current);\n                renderer.setBaseImage(imageElement);\n                setRenderer(renderer);\n            };\n        }\n        loadImage();\n    }, [image, id]);\n\n    // this covers the case that an image is upscaled to max, the upscale tool needs to\n    // be hidden and deselected.\n    useEffect(() => {\n        if (\n            image &&\n            tool &&\n            tool.name == \"upscale\" &&\n            image.params.width! * image.params.height! >= 2048 * 2048\n        ) {\n            onSelectTool(tools[0]);\n        }\n    }, [image, tool]);\n\n    useEffect(() => {\n        if (renderer) {\n            onSelectTool(tools[0]);\n            renderer.onSnapshot(() => {\n                setCanUndo(renderer.canUndo());\n                setCanRedo(renderer.canRedo());\n            });\n        }\n    }, [renderer]);\n\n    useEffect(() => {\n        if (canvasRef.current) {\n            const listener = (e: WheelEvent) => {\n                if (tool) {\n                    e.preventDefault();\n                    tool.onWheel(e);\n                }\n            };\n            canvasRef.current.addEventListener(\"wheel\", listener);\n            return () => {\n                canvasRef.current?.removeEventListener(\"wheel\", listener);\n            };\n        }\n    }, [tool, canvasRef.current]);\n\n    function renderTool(t: ToolConfig) {\n        if (!image) {\n            return null;\n        }\n        if (\n            t.name == \"upscale\" &&\n            image.params.width! * image.params.height! >= 2048 * 2048\n        ) {\n            return null;\n        }\n        let buttonClass = `btn btn-secondary light-button image-editor-tool-button`;\n        const isSelected = tool && tool.name == t.name;\n        if (isSelected) {\n            buttonClass = `btn btn-primary image-editor-tool-button`;\n        }\n        return (\n            <div className=\"form-group\" key={t.name}>\n                <button className={buttonClass} onClick={() => onSelectTool(t)}>\n                    <i className={t.iconClass}></i>\n                </button>\n                {/* capitalize tool name */}\n                <label>\n                    {t.name.charAt(0).toUpperCase() + t.name.slice(1)}\n                </label>\n                {isSelected && t.renderControls(tool!, renderer!)}\n            </div>\n        );\n    }\n\n    function preventDefault(e: CanPreventDefault): boolean {\n        e.preventDefault();\n        return true;\n    }\n\n    return (\n        <>\n            <div className=\"row\">\n                <div className=\"col-12\">\n                    <h1 style={{ fontSize: \"40px\", textAlign: \"left\" }}>\n                        <i\n                            style={{ cursor: \"pointer\" }}\n                            onClick={() => history.push(`/images/${id}`)}\n                            className=\"fas fa-chevron-left\"\n                        ></i>\n                        &nbsp; AI Edit\n                    </h1>\n                </div>\n            </div>\n            <div\n                className=\"row\"\n                style={{ marginTop: \"32px\", paddingBottom: \"120px\" }}\n            >\n                <div className=\"col-lg-3\">\n                    {renderer && (\n                        <>\n                            {tools.map((tool) => renderTool(tool))}\n                            {(canRedo || canUndo) && (\n                                <div className=\"form-group\">\n                                    <div className=\"btn-group\">\n                                        <button\n                                            className=\"btn btn-primary image-popup-button\"\n                                            disabled={!renderer || !canUndo}\n                                            onClick={() =>\n                                                renderer && renderer.undo()\n                                            }\n                                        >\n                                            {/* undo */}\n                                            <i className=\"fas fa-undo\"></i>\n                                        </button>\n                                        <button\n                                            className=\"btn btn-primary image-popup-button\"\n                                            disabled={!renderer || !canRedo}\n                                            onClick={() =>\n                                                renderer && renderer.redo()\n                                            }\n                                        >\n                                            <i className=\"fas fa-redo\"></i>\n                                        </button>\n                                    </div>\n                                </div>\n                            )}\n                        </>\n                    )}\n                </div>\n                <div className=\"col-lg-9\">\n                    <div style={{ verticalAlign: \"middle\" }}>\n                        <div>\n                            <canvas\n                                style={{\n                                    cursor: \"none\",\n                                    touchAction: \"none\",\n                                    userSelect: \"none\",\n                                }}\n                                ref={canvasRef}\n                                className=\"image-editor-canvas\"\n                                onMouseDown={(e) =>\n                                    preventDefault(e) &&\n                                    tool &&\n                                    tool.onMouseDown(e)\n                                }\n                                onMouseMove={(e) =>\n                                    preventDefault(e) &&\n                                    tool &&\n                                    tool.onMouseMove(e)\n                                }\n                                onMouseUp={(e) =>\n                                    preventDefault(e) &&\n                                    tool &&\n                                    tool.onMouseUp(e)\n                                }\n                                onMouseLeave={(e) =>\n                                    preventDefault(e) &&\n                                    tool &&\n                                    tool.onMouseLeave(e)\n                                }\n                                onTouchStart={(e) =>\n                                    preventDefault(e) &&\n                                    tool &&\n                                    tool.onTouchStart(e)\n                                }\n                                onTouchMove={(e) =>\n                                    preventDefault(e) &&\n                                    tool &&\n                                    tool.onTouchMove(e)\n                                }\n                                onTouchEnd={(e) =>\n                                    preventDefault(e) &&\n                                    tool &&\n                                    tool.onTouchEnd(e)\n                                }\n                            ></canvas>\n                            {showSelectionControls && (\n                                <>\n                                    <button\n                                        className=\"btn btn-secondary canvas-select-left\"\n                                        onClick={() => tool!.select(\"left\")}\n                                    >\n                                        <i className=\"fas fa-chevron-left\"></i>\n                                    </button>\n                                    <button\n                                        className=\"btn btn-secondary canvas-select-right\"\n                                        onClick={() => tool!.select(\"right\")}\n                                    >\n                                        <i className=\"fas fa-chevron-right\"></i>\n                                    </button>\n                                </>\n                            )}\n                        </div>\n                    </div>\n                    <div className=\"row\">\n                        <button\n                            className=\"btn btn-primary\"\n                            // center horizontally\n                            style={{\n                                position: \"absolute\",\n                                left: \"50%\",\n                                transform: \"translate(-50%, 0)\",\n                            }}\n                            onClick={() => {\n                                if (renderer) {\n                                    renderer.resetView();\n                                }\n                            }}\n                        >\n                            {/* reset zoom */}\n                            <i className=\"fas fa-search-plus\"></i>&nbsp; Reset\n                            View\n                        </button>\n                        {/* redo */}\n                    </div>\n                    {/* vertically center button within the div */}\n                </div>\n            </div>\n            {busyMessage && (\n                <BusyModal show={true} title=\"Please Wait\">\n                    {busyMessage}\n                </BusyModal>\n            )}\n        </>\n    );\n};\n","import { Cursor, Rect } from \"./models\";\n\nconst maxSnapshots = 10;\n\nexport class Renderer {\n    private undoStack: ImageData[] = [];\n    private redoStack: ImageData[] = [];\n    private currentSnapshot: ImageData | undefined;\n\n    private backgroundLayer: HTMLCanvasElement;\n    private baseImageLayer: HTMLCanvasElement;\n    private editLayer: HTMLCanvasElement;\n    private maskLayer: HTMLCanvasElement | undefined;\n    // private overlayLayer: HTMLCanvasElement;\n\n    private selectionOverlay: Rect | undefined;\n    private selectionOverlayPreview: Rect | undefined;\n    private hasSelection: boolean = false;\n    private cursor: Cursor | undefined;\n\n    private zoom: number;\n    private offsetX: number;\n    private offsetY: number;\n    private width = 0;\n    private height = 0;\n\n    private snapshotListener: (() => void) | null = null;\n\n    constructor(private readonly canvas: HTMLCanvasElement) {\n        canvas.width = 512;\n        canvas.height = 512;\n        // invisible canvas elements\n        this.backgroundLayer = document.createElement(\"canvas\");\n        this.backgroundLayer.width = 512;\n        this.backgroundLayer.height = 512;\n        this.baseImageLayer = document.createElement(\"canvas\");\n        this.editLayer = document.createElement(\"canvas\");\n        // this.overlayLayer = document.createElement(\"canvas\");\n\n        this.zoom = 1;\n        this.offsetX = 0;\n        this.offsetY = 0;\n    }\n\n    undo(allowRedo: boolean = true) {\n        if (this.undoStack.length > 0 && this.currentSnapshot) {\n            const imageData = this.undoStack.pop()!;\n            if (allowRedo) {\n                this.redoStack.push(this.currentSnapshot);\n            }\n            this.currentSnapshot = imageData;\n            // set as base image\n            const ctx = this.baseImageLayer.getContext(\"2d\");\n            if (ctx) {\n                ctx.clearRect(\n                    0,\n                    0,\n                    this.baseImageLayer.width,\n                    this.baseImageLayer.height\n                );\n                ctx.putImageData(imageData, 0, 0);\n                this.render();\n            }\n            this.notifySnapshotListener();\n        }\n    }\n\n    redo() {\n        if (this.redoStack.length > 0 && this.currentSnapshot) {\n            this.undoStack.push(this.currentSnapshot);\n            const imageData = this.redoStack.pop()!;\n            this.currentSnapshot = imageData;\n\n            // set as base image\n            const ctx = this.baseImageLayer.getContext(\"2d\");\n            if (ctx) {\n                ctx.putImageData(imageData, 0, 0);\n                this.render();\n            }\n            this.notifySnapshotListener();\n        }\n    }\n\n    clearRedoStack() {\n        this.redoStack = [];\n        this.notifySnapshotListener();\n    }\n\n    canUndo(): boolean {\n        return !this.hasSelection && this.undoStack.length > 0;\n    }\n\n    canRedo(): boolean {\n        return !this.hasSelection && this.redoStack.length > 0;\n    }\n\n    onSnapshot(listener: () => void) {\n        this.snapshotListener = listener;\n    }\n\n    snapshot() {\n        const ctx = this.baseImageLayer.getContext(\"2d\");\n        if (ctx) {\n            const snapshot = ctx.getImageData(\n                0,\n                0,\n                this.baseImageLayer.width,\n                this.baseImageLayer.height\n            );\n            if (this.currentSnapshot) {\n                this.undoStack.push(this.currentSnapshot);\n                this.currentSnapshot = snapshot;\n                if (this.redoStack.length > 0) {\n                    this.redoStack = [];\n                }\n                if (this.undoStack.length > maxSnapshots) {\n                    this.undoStack.shift();\n                }\n            } else {\n                this.currentSnapshot = snapshot;\n            }\n\n            this.notifySnapshotListener();\n        }\n    }\n\n    private notifySnapshotListener() {\n        if (this.snapshotListener) {\n            this.snapshotListener();\n        }\n    }\n\n    render() {\n        const context = this.canvas.getContext(\"2d\");\n        if (context) {\n            context.clearRect(0, 0, this.width, this.height);\n            context.drawImage(this.backgroundLayer, 0, 0);\n            // apply zoom and offset\n            context.setTransform(\n                this.zoom,\n                0,\n                0,\n                this.zoom,\n                this.offsetX * this.zoom,\n                this.offsetY * this.zoom\n            );\n            // context.drawImage(this.backgroundLayer, 0, 0);\n            context.drawImage(this.baseImageLayer, 0, 0);\n            context.drawImage(this.editLayer, 0, 0);\n            // draw this.maskLayer at 0.3 opacity\n            if (this.maskLayer) {\n                context.globalAlpha = 0.3;\n                context.drawImage(this.maskLayer, 0, 0);\n                context.globalAlpha = 1;\n            }\n\n            // context.drawImage(this.overlayLayer, 0, 0);\n            this.drawOverlay(context, this.width, this.height);\n            context.setTransform(1, 0, 0, 1, 0, 0);\n        }\n    }\n\n    createMask() {\n        this.maskLayer = document.createElement(\"canvas\");\n        this.maskLayer.width = this.width;\n        this.maskLayer.height = this.height;\n        this.resetMask();\n    }\n\n    resetMask() {\n        if (this.maskLayer) {\n            const ctx = this.maskLayer.getContext(\"2d\");\n            if (ctx) {\n                ctx.fillStyle = \"#000000\";\n                ctx.fillRect(0, 0, this.width, this.height);\n            }\n            this.render();\n        }\n    }\n\n    invertMask() {\n        if (this.maskLayer) {\n            const ctx = this.maskLayer.getContext(\"2d\");\n            if (ctx) {\n                // change black to white, white to black\n                const imageData = ctx.getImageData(\n                    0,\n                    0,\n                    this.width,\n                    this.height\n                );\n                for (let i = 0; i < imageData.data.length; i += 4) {\n                    imageData.data[i] = 255 - imageData.data[i];\n                    imageData.data[i + 1] = 255 - imageData.data[i + 1];\n                    imageData.data[i + 2] = 255 - imageData.data[i + 2];\n                }\n                ctx.putImageData(imageData, 0, 0);\n            }\n            this.render();\n        }\n    }\n\n    deleteMask() {\n        this.maskLayer = undefined;\n        this.render();\n    }\n\n    isMasked() {\n        return this.maskLayer !== undefined;\n    }\n\n    getCanvas(): HTMLCanvasElement {\n        return this.canvas;\n    }\n\n    private initializeBackgroundLayer() {\n        // checkered background\n        // #DEDEDE\n        // #FFFFFF\n        // 10x10 pixel squares\n        const ctx = this.backgroundLayer.getContext(\"2d\");\n        if (ctx) {\n            const pattern = ctx.createPattern(\n                this.createCheckeredPattern(20, 20, \"#808080\", \"#AAAAAA\"),\n                \"repeat\"\n            );\n            if (pattern) {\n                ctx.fillStyle = pattern;\n                ctx.fillRect(\n                    0,\n                    0,\n                    this.backgroundLayer.width,\n                    this.backgroundLayer.height\n                );\n            }\n        }\n    }\n\n    private createCheckeredPattern(\n        width: number,\n        height: number,\n        color1: string,\n        color2: string\n    ): HTMLCanvasElement {\n        const canvas = document.createElement(\"canvas\");\n        canvas.width = width;\n        canvas.height = height;\n        const ctx = canvas.getContext(\"2d\");\n        if (ctx) {\n            ctx.fillStyle = color1;\n            ctx.fillRect(0, 0, width, height);\n            ctx.fillStyle = color2;\n            ctx.fillRect(0, 0, width / 2, height / 2);\n            ctx.fillRect(width / 2, height / 2, width / 2, height / 2);\n        }\n        return canvas;\n    }\n\n    setBaseImage(\n        image: HTMLImageElement | HTMLCanvasElement,\n        updateSelectionOverlay = true\n    ) {\n        const context = this.baseImageLayer.getContext(\"2d\");\n        if (context) {\n            // set size of all layers\n            // TODO: adapt for an always-square canvas\n            this.initializeBackgroundLayer();\n\n            this.baseImageLayer.width = image.width;\n            this.baseImageLayer.height = image.height;\n            this.editLayer.width = image.width;\n            this.editLayer.height = image.height;\n            this.maskLayer = undefined;\n            // set image size\n            this.width = image.width;\n            this.height = image.height;\n            // this.canvas.width = image.width;\n            // this.canvas.height = image.height;\n            context.drawImage(image, 0, 0);\n\n            if (updateSelectionOverlay) {\n                // set 512x512 selection overlay at the center of the image\n                this.setSelectionOverlay({\n                    x: (image.width - 512) / 2,\n                    y: (image.height - 512) / 2,\n                    width: 512,\n                    height: 512,\n                });\n            }\n            this.resetView();\n            // this.render(); // already called by updateZoomAndOffset\n            this.snapshot();\n        }\n    }\n\n    resetView() {\n        // determine zoom based on image difference from canvas size\n        const maxWidth = Math.max(this.width, this.height);\n        const zoom = this.canvas.width / maxWidth;\n\n        let offsetX = 0;\n        let offsetY = 0;\n\n        if (this.width > this.height) {\n            offsetY = (this.width - this.height) / 2;\n        } else if (this.height > this.width) {\n            offsetX = (this.height - this.width) / 2;\n        }\n\n        this.updateZoomAndOffset(zoom, offsetX, offsetY);\n    }\n\n    setEditImage(imageData: ImageData | null) {\n        this.hasSelection = !!imageData;\n        const context = this.editLayer.getContext(\"2d\");\n        if (context && this.selectionOverlay) {\n            context.clearRect(\n                0,\n                0,\n                this.editLayer.width,\n                this.editLayer.height\n            );\n            if (imageData) {\n                context.putImageData(\n                    imageData,\n                    this.selectionOverlay.x,\n                    this.selectionOverlay.y\n                );\n            }\n            // edit image makes the selection rect and preview disappear\n            // so redraw the overlay\n            this.hasSelection = !!imageData;\n            this.render();\n        }\n        this.notifySnapshotListener();\n    }\n\n    private drawOverlay(\n        context: CanvasRenderingContext2D,\n        width: number,\n        height: number\n    ) {\n        const lineWidth = Math.max(this.width / 512, this.height / 512);\n        if (context) {\n            context.strokeStyle = \"white\";\n            context.lineWidth = lineWidth;\n            context.strokeRect(0, 0, width, height);\n\n            if (!this.hasSelection && this.selectionOverlay) {\n                context.strokeStyle = \"white\";\n                context.lineWidth = lineWidth;\n                context.strokeRect(\n                    this.selectionOverlay.x,\n                    this.selectionOverlay.y,\n                    this.selectionOverlay.width,\n                    this.selectionOverlay.height\n                );\n            }\n            if (!this.hasSelection && this.selectionOverlayPreview) {\n                context.strokeStyle = \"cyan\";\n                context.lineWidth = lineWidth;\n                context.strokeRect(\n                    this.selectionOverlayPreview.x,\n                    this.selectionOverlayPreview.y,\n                    this.selectionOverlayPreview.width,\n                    this.selectionOverlayPreview.height\n                );\n            }\n            if (this.cursor) {\n                if (this.cursor.type === \"circle\") {\n                    context.lineWidth = lineWidth;\n                    context.strokeStyle = this.cursor.color;\n                    // context.globalAlpha = 0.5;\n                    context.beginPath();\n                    context.arc(\n                        this.cursor.x,\n                        this.cursor.y,\n                        this.cursor.radius,\n                        0,\n                        2 * Math.PI\n                    );\n                    context.stroke();\n                } else if (this.cursor.type === \"circle-fill\") {\n                    context.fillStyle = this.cursor.color;\n                    context.strokeStyle = this.cursor.color;\n                    // context.lineWidth = lineWidth;\n                    // context.globalAlpha = 0.5;\n                    context.beginPath();\n                    context.arc(\n                        this.cursor.x,\n                        this.cursor.y,\n                        this.cursor.radius,\n                        0,\n                        2 * Math.PI\n                    );\n                    context.stroke();\n                    // set alpha to 0.5 and fill\n                    context.globalAlpha = 0.5;\n                    context.beginPath();\n                    context.arc(\n                        this.cursor.x,\n                        this.cursor.y,\n                        this.cursor.radius,\n                        0,\n                        2 * Math.PI\n                    );\n                    context.fill();\n                    context.globalAlpha = 1;\n                } else if (this.cursor.type == \"crosshairs\") {\n                    // draw crosshairs based on cursor radius\n                    context.strokeStyle = this.cursor.color;\n                    context.lineWidth = lineWidth;\n                    context.beginPath();\n                    context.moveTo(\n                        this.cursor.x - this.cursor.radius,\n                        this.cursor.y\n                    );\n                    context.lineTo(\n                        this.cursor.x + this.cursor.radius,\n                        this.cursor.y\n                    );\n                    context.moveTo(\n                        this.cursor.x,\n                        this.cursor.y - this.cursor.radius\n                    );\n                    context.lineTo(\n                        this.cursor.x,\n                        this.cursor.y + this.cursor.radius\n                    );\n                    context.stroke();\n                } else if (this.cursor.type === \"colorpicker\") {\n                    // TODO: add croshairs\n                    context.lineWidth = this.cursor.radius * 0.75;\n                    context.strokeStyle = this.cursor.color;\n                    // context.globalAlpha = 0.5;\n                    context.beginPath();\n                    context.arc(\n                        this.cursor.x,\n                        this.cursor.y,\n                        this.cursor.radius,\n                        0,\n                        2 * Math.PI\n                    );\n                    context.stroke();\n\n                    // draw crosshairs (black)\n                    context.lineWidth = lineWidth;\n                    context.strokeStyle = \"black\";\n                    context.beginPath();\n                    context.moveTo(\n                        this.cursor.x - this.cursor.radius,\n                        this.cursor.y\n                    );\n                    context.lineTo(\n                        this.cursor.x + this.cursor.radius,\n                        this.cursor.y\n                    );\n                    context.moveTo(\n                        this.cursor.x,\n                        this.cursor.y - this.cursor.radius\n                    );\n                    context.lineTo(\n                        this.cursor.x,\n                        this.cursor.y + this.cursor.radius\n                    );\n                    context.stroke();\n                }\n            }\n        }\n    }\n\n    setSelectionOverlay(selectionOverlay: Rect | undefined) {\n        this.selectionOverlay = selectionOverlay;\n        this.render();\n    }\n\n    setSelectionOverlayPreview(selectionOverlayPreview: Rect | undefined) {\n        this.selectionOverlayPreview = selectionOverlayPreview;\n        this.render();\n    }\n\n    setCursor(cursor: Cursor | undefined) {\n        this.cursor = cursor;\n        this.render();\n    }\n\n    getSelectionOverlay(): Rect | undefined {\n        return this.selectionOverlay;\n    }\n\n    getZoom(): number {\n        return this.zoom;\n    }\n\n    getOffsetX(): number {\n        return this.offsetX;\n    }\n\n    getOffsetY(): number {\n        return this.offsetY;\n    }\n\n    updateZoomAndOffset(zoom: number, offsetX: number, offsetY: number) {\n        // console.log(`zoom: ${zoom}, offset: ${offsetX}, ${offsetY}`)\n        this.zoom = zoom;\n        this.offsetX = offsetX;\n        this.offsetY = offsetY;\n        this.render();\n    }\n\n    getWidth(): number {\n        return this.width;\n    }\n\n    getHeight(): number {\n        return this.height;\n    }\n\n    private imageDataToEncodedImage(imageData: ImageData): string | undefined {\n        // create a canvas and draw the image data on it\n        const canvas = document.createElement(\"canvas\");\n        canvas.width = imageData.width;\n        canvas.height = imageData.height;\n        const context = canvas.getContext(\"2d\");\n        if (context) {\n            context.putImageData(imageData, 0, 0);\n            // return the data url of the canvas\n            const result = canvas.toDataURL(\"image/png\");\n            // cleanup the canvas\n            canvas.remove();\n            // extract base64 data from data url\n            return result.split(\",\")[1];\n        }\n    }\n\n    getEncodedImage(selection: Rect | null): string | undefined {\n        const imageData = this.getImageData(selection);\n        if (imageData) {\n            return this.imageDataToEncodedImage(imageData);\n        }\n    }\n\n    private convertErasureToMask(\n        erasure: ImageData,\n    ): ImageData {\n        // for each pixel, if alpha < 255, set to white, otherwise set to black\n        const mask = erasure;\n        for (let i = 0; i < erasure.data.length; i += 4) {\n            let white = erasure.data[i + 3] < 255;\n            if (white) {\n                mask.data[i] = 255;\n                mask.data[i + 1] = 255;\n                mask.data[i + 2] = 255;\n                mask.data[i + 3] = 255;\n            } else {\n                mask.data[i] = 0;\n                mask.data[i + 1] = 0;\n                mask.data[i + 2] = 0;\n                mask.data[i + 3] = 255;\n            }\n        }\n        return mask;\n    }\n\n    getEncodedMask(\n        selection: Rect | null,\n        layer: \"base\" | \"mask\" = \"base\"\n    ): string | undefined {\n        const imageData = this.getImageData(selection, layer)!;\n        if (!imageData) {\n            return;\n        }\n        if (layer === \"base\") {\n            const mask = this.convertErasureToMask(imageData);\n            return this.imageDataToEncodedImage(mask);\n        } else {\n            return this.imageDataToEncodedImage(imageData);\n        }\n    }\n\n    getImageData(\n        selection: Rect | null,\n        layer: \"base\" | \"mask\" = \"base\"\n    ): ImageData | undefined {\n        if (!selection) {\n            selection = {\n                x: 0,\n                y: 0,\n                width: this.width,\n                height: this.height,\n            };\n        }\n        // get image data of the selection\n        const imageLayer =\n            layer === \"base\" ? this.baseImageLayer : this.maskLayer;\n        if (!imageLayer) {\n            return;\n        }\n        let context = imageLayer.getContext(\"2d\");\n        if (context) {\n            const imageData = context.getImageData(\n                selection.x,\n                selection.y,\n                selection.width,\n                selection.height\n            );\n            return imageData;\n        }\n    }\n\n    commitSelection() {\n        // draw the selection overlay on the base image layer\n        const context = this.baseImageLayer.getContext(\"2d\");\n        if (context) {\n            context.drawImage(this.editLayer, 0, 0);\n            this.setEditImage(null);\n            this.snapshot();\n        }\n    }\n\n    drawPoint(x: number, y: number, brushSize: number, color: string, layer: \"base\" | \"mask\" = \"base\"): void {\n        // draw on selection layer\n        const imageLayer = layer === \"base\" ? this.editLayer : this.maskLayer;\n        if (!imageLayer) {\n            return;\n        }\n        const context = imageLayer.getContext(\"2d\");\n        if (context) {\n            context.fillStyle = color;\n            context.beginPath();\n            context.arc(x, y, brushSize / 2, 0, 2 * Math.PI);\n            context.fill();\n        }\n        this.render();\n    }\n\n    erasePoint(brushx: number, brushy: number, brushSize: number): void {\n        if (!this.selectionOverlay) {\n            throw new Error(\"No selection overlay\");\n        }\n        // get image data centered on x, y with brushSize width and height\n        const context = this.baseImageLayer.getContext(\"2d\");\n        if (context) {\n            const imageData = context.getImageData(\n                brushx - brushSize / 2,\n                brushy - brushSize / 2,\n                brushSize,\n                brushSize\n            );\n            // set alpha to 0 in a circle centered on x, y with radius brushSize / 2\n            for (let i = 0; i < imageData.data.length; i += 4) {\n                const x = (i / 4) % brushSize;\n                const y = Math.floor(i / 4 / brushSize);\n\n                const absx = x - brushSize / 2 + brushx;\n                // three pixel barrier on each edge UNLESS the selection overlay borders that edge\n                let leftEdge = this.selectionOverlay.x;\n                if (leftEdge > 0) {\n                    leftEdge += 10;\n                }\n                let rightEdge =\n                    this.selectionOverlay.x + this.selectionOverlay.width;\n                if (rightEdge < this.width) {\n                    rightEdge -= 10;\n                }\n                let topEdge = this.selectionOverlay.y;\n                if (topEdge > 0) {\n                    topEdge += 10;\n                }\n                let bottomEdge =\n                    this.selectionOverlay.y + this.selectionOverlay.height;\n                if (bottomEdge < this.canvas.height) {\n                    bottomEdge -= 10;\n                }\n\n                const containsx = absx > leftEdge && absx < rightEdge;\n                const absy = y - brushSize / 2 + brushy;\n                const containsy = absy > topEdge && absy < bottomEdge;\n                const contains = containsx && containsy;\n\n                // check if x, y is within the selection overlay\n                if (this.selectionOverlay && !contains) {\n                    continue;\n                }\n\n                const distance = Math.sqrt(\n                    Math.pow(x - brushSize / 2, 2) +\n                        Math.pow(y - brushSize / 2, 2)\n                );\n                if (distance < brushSize / 2) {\n                    imageData.data[i + 3] = 0;\n                }\n            }\n            // draw the image data on the selection layer\n            context.putImageData(\n                imageData,\n                brushx - brushSize / 2,\n                brushy - brushSize / 2\n            );\n        }\n    }\n\n    drawLine(\n        x1: number,\n        y1: number,\n        x2: number,\n        y2: number,\n        brushSize: number,\n        color: string,\n        layer: \"base\" | \"mask\" = \"base\"\n    ): void {\n        const imageLayer = layer === \"base\" ? this.editLayer : this.maskLayer;\n        if (!imageLayer) {\n            return;\n        }\n        // draw on selection layer\n        const context = imageLayer.getContext(\"2d\");\n        if (context) {\n            context.strokeStyle = color;\n            context.lineWidth = brushSize;\n            context.lineCap = \"round\";\n            context.beginPath();\n            context.moveTo(x1, y1);\n            context.lineTo(x2, y2);\n            context.stroke();\n        }\n        this.render();\n    }\n\n    smudgeLine(\n        x1: number,\n        y1: number,\n        x2: number,\n        y2: number,\n        brushSize: number,\n        brushOpacity: number\n    ): void {\n        const unitVector = {\n            x: x2 - x1,\n            y: y2 - y1,\n        };\n        const length = Math.sqrt(\n            unitVector.x * unitVector.x + unitVector.y * unitVector.y\n        );\n        unitVector.x /= length;\n        unitVector.y /= length;\n\n        // for each point on the line, get image data (brushSize x brushSize) from edit layer\n        // average pixel values that are within the brush circle.\n        // update the image data with the averaged pixel values in the\n        // brush circle, then put the image data back on the edit layer\n        // at the point on the line\n\n        const context = this.editLayer.getContext(\"2d\");\n        if (context) {\n            for (let i = 0; i < length; i++) {\n                const x = x1 + i * unitVector.x;\n                const y = y1 + i * unitVector.y;\n\n                const imageData = context.getImageData(\n                    x - brushSize / 2,\n                    y - brushSize / 2,\n                    brushSize,\n                    brushSize\n                );\n\n                let totalRed = 0;\n                let totalGreen = 0;\n                let totalBlue = 0;\n                let count = 0.0;\n\n                // average pixel values\n                for (let y = 0; y < imageData.height; y++) {\n                    for (let x = 0; x < imageData.width; x++) {\n                        const index = (y * imageData.width + x) * 4;\n                        const distance = Math.sqrt(\n                            (x - brushSize / 2) * (x - brushSize / 2) +\n                                (y - brushSize / 2) * (y - brushSize / 2)\n                        );\n                        if (distance <= brushSize / 2) {\n                            // get the pixel value from the image data\n                            const r = imageData.data[index];\n                            const g = imageData.data[index + 1];\n                            const b = imageData.data[index + 2];\n\n                            totalRed += r;\n                            totalGreen += g;\n                            totalBlue += b;\n                            count++;\n                        }\n                    }\n                }\n\n                // update the image data with the averaged pixel values\n                // these need to be weighted by the brush opacity\n                const averageRed = totalRed / count;\n                const averageGreen = totalGreen / count;\n                const averageBlue = totalBlue / count;\n                for (let y = 0; y < imageData.height; y++) {\n                    for (let x = 0; x < imageData.width; x++) {\n                        const index = (y * imageData.width + x) * 4;\n                        const distance = Math.sqrt(\n                            (x - brushSize / 2) * (x - brushSize / 2) +\n                                (y - brushSize / 2) * (y - brushSize / 2)\n                        );\n                        if (distance <= brushSize / 2) {\n                            imageData.data[index] =\n                                averageRed * brushOpacity +\n                                imageData.data[index] * (1 - brushOpacity);\n                            imageData.data[index + 1] =\n                                averageGreen * brushOpacity +\n                                imageData.data[index + 1] * (1 - brushOpacity);\n                            imageData.data[index + 2] =\n                                averageBlue * brushOpacity +\n                                imageData.data[index + 2] * (1 - brushOpacity);\n                        }\n                    }\n                }\n\n                // put the image data back on the edit layer\n                context.putImageData(\n                    imageData,\n                    x - brushSize / 2,\n                    y - brushSize / 2\n                );\n            }\n        }\n        this.render();\n    }\n\n    getPixel(x: number, y: number): string {\n        const context = this.baseImageLayer.getContext(\"2d\");\n        // get pixel as hex string\n        if (context) {\n            const pixel = context.getImageData(x, y, 1, 1).data;\n            return (\n                \"#\" +\n                (\"000000\" + rgbToHex(pixel[0], pixel[1], pixel[2])).slice(-6)\n            );\n        }\n        return \"#000000\";\n    }\n\n    copyEditImageFromBaseImage(): void {\n        // copy the base image to the edit layer\n        const context = this.editLayer.getContext(\"2d\");\n        if (context) {\n            context.drawImage(this.baseImageLayer, 0, 0);\n        }\n        this.render();\n        this.hasSelection = true;\n        this.notifySnapshotListener();\n    }\n\n    expandToOverlay() {\n        if (!this.selectionOverlay) {\n            throw new Error(\"No selection overlay\");\n        }\n        const minX = Math.min(0, this.selectionOverlay.x);\n        const minY = Math.min(0, this.selectionOverlay.y);\n        const maxX = Math.max(\n            this.selectionOverlay.x + this.selectionOverlay.width,\n            this.baseImageLayer.width\n        );\n        const maxY = Math.max(\n            this.selectionOverlay.y + this.selectionOverlay.height,\n            this.baseImageLayer.height\n        );\n        const width = maxX - minX;\n        const height = maxY - minY;\n\n        // create a new canvas with the expanded size\n        const newCanvas = document.createElement(\"canvas\");\n        newCanvas.width = width;\n        newCanvas.height = height;\n        // draw the base image on the new canvas.\n        // if overlay.x is negative, image.x is overlay.x * -1\n        // if overlay.x is 0 or positive, image.x is 0\n        // if overlay.y is negative, image.y is overlay.y * -1\n        // if overlay.y is 0 or positive, image.y is 0\n        const context = newCanvas.getContext(\"2d\");\n        if (context) {\n            context.drawImage(\n                this.baseImageLayer,\n                Math.max(0, this.selectionOverlay.x * -1),\n                Math.max(0, this.selectionOverlay.y * -1)\n            );\n        }\n        if (this.selectionOverlay.x < 0) {\n            this.selectionOverlay.x = 0;\n        }\n        if (this.selectionOverlay.y < 0) {\n            this.selectionOverlay.y = 0;\n        }\n        console.log(`new Canvas size: ${width} x ${height}`);\n        this.setBaseImage(newCanvas, false);\n    }\n}\n\nfunction rgbToHex(r: number, g: number, b: number) {\n    if (r > 255 || g > 255 || b > 255) throw \"Invalid color component\";\n    return ((r << 16) | (g << 8) | b).toString(16);\n}\n\nexport function createRenderer(canvas: HTMLCanvasElement): Renderer {\n    return new Renderer(canvas);\n}\n","// export interface AspectRatio {\n//     displayName: string;\n//     width: number;\n//     height: number;\n//     id: number;\n\n//     scale: (size: number) => AspectRatio;\n// }\n\nexport class AspectRatio implements AspectRatio {\n    readonly displayName: string;\n    readonly width: number;\n    readonly height: number;\n    readonly id: number;\n\n    constructor(cfg: any) {\n        this.displayName = cfg.displayName;\n        this.width = cfg.width;\n        this.height = cfg.height;\n        this.id = cfg.id;\n    }\n\n    scale(size: number): AspectRatio {\n        const newWidth = this.width * size;\n        const newHeight = this.height * size;\n\n        return new AspectRatio({\n            id: this.id,\n            displayName: this.displayName,\n            // round width and height up to the nearest multiple of 64\n            width: Math.ceil(newWidth / 64) * 64,\n            height: Math.ceil(newHeight / 64) * 64,\n        });\n    }\n}\n\nexport const DEFAULT_ASPECT_RATIO = 5;\n\nexport const aspectRatios: AspectRatio[] = [\n    {\n        displayName: \"4:1\",\n        width: 1024,\n        height: 256,\n        id: 0,\n    },\n    {\n        displayName: \"3:1\",\n        width: 768,\n        height: 256,\n        id: 1,\n    },\n    {\n        displayName: \"2:1\",\n        width: 640,\n        height: 320,\n        id: 2,\n    },\n    {\n        displayName: \"3:2\",\n        width: 576,\n        height: 384,\n        id: 3,\n    },\n    {\n        displayName: \"5:4\",\n        width: 640,\n        height: 512,\n        id: 4,\n    },\n    {\n        displayName: \"1:1\",\n        width: 512,\n        height: 512,\n        id: 5,\n    },\n    {\n        displayName: \"4:5\",\n        width: 512,\n        height: 640,\n        id: 6,\n    },\n    {\n        displayName: \"2:3\",\n        width: 384,\n        height: 576,\n        id: 7,\n    },\n    {\n        displayName: \"1:2\",\n        width: 320,\n        height: 640,\n        id: 8,\n    },\n    {\n        displayName: \"1:3\",\n        width: 256,\n        height: 768,\n        id: 9,\n    },\n    {\n        displayName: \"1:4\",\n        width: 256,\n        height: 1024,\n        id: 10,\n    }\n].map((cfg) => new AspectRatio(cfg));\n\nexport function getClosestAspectRatio(width: number, height: number): AspectRatio {\n    const aspectRatio = width / height;\n\n    const tests = [...aspectRatios];\n    tests.sort((a, b) => {\n        const aRatio = a.width / a.height;\n        const bRatio = b.width / b.height;\n        return (\n            Math.abs(aRatio - aspectRatio) -\n            Math.abs(bRatio - aspectRatio)\n        );\n    });\n    const bestMatch = tests[0];\n    return bestMatch;\n}\n\n\n","import { FC, useEffect, useState } from \"react\";\nimport { PaletteButton } from \"./PaletteButton\";\nimport { PencilTool } from \"./pencil-tool\";\nimport { Renderer } from \"./renderer\";\n\ninterface MaskEditorProps {\n    // renderer: Renderer;\n    tool: PencilTool;\n    onConfirm: () => void;\n    onRevert: () => void;\n}\n\nconst colors = [\"#FFFFFF\", \"#000000\"];\n\nexport const MaskEditor: FC<MaskEditorProps> = ({\n    // renderer,\n    tool,\n    onConfirm,\n    onRevert,\n}) => {\n    const [brushSize, setBrushSize] = useState(10);\n    const [brushColor, setBrushColor] = useState(colors[0]);\n\n    useEffect(() => {\n        tool.updateArgs({\n            brushSize,\n            brushColor,\n        });\n    }, [brushSize, brushColor]);\n\n    return (\n        <div style={{ marginTop: \"16px\" }}>\n            <div className=\"form-group\">\n                <label style={{ width: \"100%\" }}>\n                    Brush size\n                    <small\n                        className=\"form-text text-muted\"\n                        style={{ float: \"right\" }}\n                    >\n                        {brushSize}px\n                    </small>\n                </label>\n                <input\n                    type=\"range\"\n                    className=\"form-control-range\"\n                    min=\"1\"\n                    max=\"100\"\n                    value={brushSize}\n                    onChange={(e) => setBrushSize(parseInt(e.target.value))}\n                />\n            </div>\n            <div\n                style={{\n                    display: \"flex\",\n                    flexDirection: \"row\",\n                    flexWrap: \"wrap\",\n                }}\n            >\n                {colors.map((color, i) => (\n                    <PaletteButton\n                        key={i}\n                        selectedColor={brushColor}\n                        color={color}\n                        onClick={(color) => setBrushColor(color)}\n                    />\n                ))}\n            </div>\n            <div className=\"form-group\" style={{ marginTop: \"16px\" }}>\n                <i className=\"fa fa-info-circle\"></i>&nbsp;Masking: areas that\n                are painted white will be changed, areas that are painted black\n                will be left unchanged.\n            </div>\n            <div className=\"form-group\" style={{ marginTop: \"16px\" }}>\n                <button\n                    className=\"btn btn-secondary\"\n                    onClick={() => tool.renderer.invertMask()}\n                >\n                    Invert\n                </button>\n                <button\n                    className=\"btn btn-secondary\"\n                    onClick={onRevert}\n                    style={{ marginLeft: \"8px\" }}\n                >\n                    Cancel\n                </button>\n                <button\n                    className=\"btn btn-primary\"\n                    onClick={onConfirm}\n                    style={{ marginLeft: \"8px\" }}\n                >\n                    Save\n                </button>\n            </div>\n        </div>\n    );\n};\n","import React, { FC, useState, useEffect } from \"react\";\nimport loadImage from \"blueimp-load-image\";\nimport saveAs from \"file-saver\";\n\nimport { AIBrushApi } from \"../../client\";\nimport { Renderer } from \"./renderer\";\nimport { BaseTool, Tool } from \"./tool\";\n\ninterface Props {\n    renderer: Renderer;\n    tool: BaseTool;\n    api: AIBrushApi;\n}\n\nexport const ImportExportControls: FC<Props> = ({ renderer, tool }) => {\n\n    const [backupImage, setBackupImage] = useState<string | undefined>();\n\n    const onImageSelected = (event: React.ChangeEvent<HTMLInputElement>) => {\n        const files = event.target.files;\n        if (files && files.length > 0) {\n            loadImage(\n                files[0],\n                (img) => {\n                    const backupImage = renderer.getEncodedImage(null);\n                    setBackupImage(backupImage);\n                    renderer.setBaseImage(img as HTMLImageElement);\n                },\n                { canvas: false }\n            );\n        }\n    };\n\n    const onExport = () => {\n        const encodedImage = renderer.getEncodedImage(null);\n        if (encodedImage) {\n            // base64 decode\n            const byteString = atob(encodedImage);\n            // save as file\n            const buffer = new ArrayBuffer(byteString.length);\n            const intArray = new Uint8Array(buffer);\n            for (let i = 0; i < byteString.length; i++) {\n                intArray[i] = byteString.charCodeAt(i);\n            }\n            const blob = new Blob([intArray], { type: \"image/png\" });\n            saveAs(blob, \"image.png\");\n        }\n    };\n\n    if (backupImage) {\n        return (\n            <div className=\"form-group\" style={{marginTop: \"16px\"}}>\n                <button\n                    className=\"btn btn-primary\"\n                    onClick={() => {\n                        setBackupImage(undefined);\n                        const img = new Image();\n                        // set src as data uri\n                        const src = \"data:image/png;base64,\" + backupImage;\n                        img.src = src;\n                        img.onload = () => {\n                            renderer.setBaseImage(img);\n                        };\n                    }}\n                >\n                    {/* cancel icon */}\n                    <i className=\"fas fa-times\"></i>&nbsp;\n                    Revert\n                </button>\n                <button\n                    className=\"btn btn-primary\"\n                    onClick={() => {\n                        setBackupImage(undefined);\n                        if (tool.saveListener) {\n                            const encodedImage = renderer.getEncodedImage(null);\n                            if (encodedImage) {\n                                tool.saveListener(encodedImage);\n                            }\n                        }\n                    }}\n                    style={{marginLeft: \"8px\"}}\n                >\n                    {/* save icon */}\n                    <i className=\"fas fa-save\"></i>&nbsp;\n                    Save\n                </button>\n            </div>\n        );\n    }\n\n    // Show buttons for import and export and \"save a copy\"\n    return (\n        <>\n            <div className=\"form-group\" style={{marginTop: \"16px\"}}>\n                <label\n                    id=\"loadimage-wrapper\"\n                    className={`btn btn-primary `}\n                    style={{ display: \"inline\" }}\n                >\n                    {/* upload image */}\n                    <i className=\"fas fa-upload\"></i>&nbsp; Import Image\n                    <input\n                        id=\"loadimage\"\n                        type=\"file\"\n                        style={{ display: \"none\" }}\n                        onChange={onImageSelected}\n                    />\n                </label>\n            </div>\n            <div className=\"form-group\">\n                <button\n                    className=\"btn btn-primary\"\n                    onClick={() => {\n                        onExport();\n                    }}\n                    style={{ marginLeft: \"8px\"}}\n                >\n                    <i className=\"fas fa-download\"></i>&nbsp; Export Image\n                </button>\n            </div>\n        </>\n    );\n};\n","import React, { FC, useState, useEffect } from \"react\";\nimport loadImage from \"blueimp-load-image\";\nimport saveAs from \"file-saver\";\nimport axios from \"axios\";\nimport * as uuid from \"uuid\";\n\nimport { sleep } from \"../../lib/sleep\";\n\nimport {\n    AIBrushApi,\n    CreateImageInput,\n    ImageParamsAugmentationEnum,\n    Image as APIImage,\n    StatusEnum,\n} from \"../../client\";\nimport { Renderer } from \"./renderer\";\nimport { BaseTool, Tool } from \"./tool\";\nimport {\n    splitImage,\n    mergeTiles,\n    ImageUtilWorker,\n    imageDataToCanvas,\n    fixImageSize,\n    decodeImage,\n    binaryImageToDataBase64,\n    SplitResult,\n} from \"../../lib/imageutil\";\nimport { defaultArgs } from \"../../components/ImagePrompt\";\nimport { ErrorNotification } from \"../../components/Alerts\";\nimport moment from \"moment\";\nimport { calculateImagesCost } from \"../../lib/credits\";\nimport { CostIndicator } from \"../../components/CostIndicator\";\n\nexport const anonymousClient = axios.create();\n\ninterface Props {\n    renderer: Renderer;\n    tool: BaseTool;\n    api: AIBrushApi;\n    image: APIImage;\n}\n\nexport const AugmentControls: FC<Props> = ({ renderer, tool, api, image }) => {\n    const [backupImage, setBackupImage] = useState<string | undefined>();\n    const [activeAugmentation, setActiveAugmentation] = useState<\n        \"upscale\" | \"face_restore\" | null\n    >(null);\n    const [imageWorker, setImageWorker] = useState<\n        ImageUtilWorker | undefined\n    >();\n    const [error, setError] = useState<string | null>(null);\n    const [lastError, setLastError] = useState<number>(0);\n\n    useEffect(() => {\n        const imageWorker = new ImageUtilWorker();\n        setImageWorker(imageWorker);\n        return () => {\n            imageWorker.destroy();\n        };\n    }, []);\n\n    const augmentImageData = async (\n        imageData: ImageData,\n        augmentation: \"upscale\" | \"face_restore\"\n    ): Promise<ImageData> => {\n        if (!imageWorker) {\n            throw new Error(\"Image worker not initialized\");\n        }\n        let c = imageDataToCanvas(imageData);\n        let encodedImage = c.toDataURL(\"image/png\").split(\",\")[1];\n        c.remove();\n        const input: CreateImageInput = defaultArgs();\n        input.label = \"\";\n        // input.encoded_image = encodedImage;\n\n        const tmpInitImage = await api.createTemporaryImage(\"png\");\n        const binaryImageData = Buffer.from(encodedImage, \"base64\");\n        await anonymousClient.put(\n            tmpInitImage.data.upload_url!,\n            binaryImageData,\n            {\n                headers: {\n                    \"Content-Type\": \"image/png\",\n                },\n            }\n        );\n\n        input.tmp_image_id = tmpInitImage.data.id;\n        input.params.prompt = image.params.prompt;\n        input.params.negative_prompt = image.params.negative_prompt;\n        input.params.denoising_strength = 0.05;\n        input.count = 1;\n        input.model = \"stable_diffusion\";\n        input.nsfw = true;\n        input.temporary = true;\n        input.params.width = imageData.width;\n        input.params.height = imageData.height;\n        input.params.augmentation =\n            augmentation === \"upscale\"\n                ? ImageParamsAugmentationEnum.Upscale\n                : ImageParamsAugmentationEnum.FaceRestore;\n\n        const createResp = await api.createImage(input);\n        let processingImage = createResp.data.images![0];\n        while (processingImage.status !== StatusEnum.Completed) {\n            await sleep(2000);\n            const checkResp = await api.getImage(processingImage.id);\n            processingImage = checkResp.data;\n            if (processingImage.status === StatusEnum.Error) {\n                throw new Error(\"Augmentation failed\");\n            }\n        }\n        const downloadUrls = await api.getImageDownloadUrls(processingImage.id);\n\n        // download image data, convert to canvas and resize to 2x original,\n        // convert back to image data and return.\n        const imageDataResp = await anonymousClient.get(\n            downloadUrls.data.image_url!,\n            {\n                responseType: \"arraybuffer\",\n            }\n        );\n        encodedImage = binaryImageToDataBase64(imageDataResp.data);\n        const img = await decodeImage(encodedImage);\n        c = document.createElement(\"canvas\");\n        const upscaleFactor = augmentation === \"upscale\" ? 2 : 1;\n        c.width = imageData.width * upscaleFactor;\n        c.height = imageData.height * upscaleFactor;\n        const ctx = c.getContext(\"2d\")!;\n        ctx.drawImage(img, 0, 0, c.width, c.height);\n        const newImageData = ctx.getImageData(0, 0, c.width, c.height);\n        c.remove();\n        return newImageData;\n    };\n\n    const onAugment = async (augmentation: \"upscale\" | \"face_restore\") => {\n        setActiveAugmentation(augmentation);\n        setError(null);\n        try {\n            const backupImage = renderer.getEncodedImage(null);\n            setBackupImage(backupImage);\n            let imageData = renderer.getImageData(null);\n            if (!imageData) {\n                return;\n            }\n            // ensure width and height are multiples of 64\n            if ((imageData.width % 64) + (imageData.height % 64) !== 0) {\n                const c = fixImageSize(imageDataToCanvas(imageData));\n                imageData = c\n                    .getContext(\"2d\")!\n                    .getImageData(0, 0, c.width, c.height);\n            }\n\n            const newImageData = await augmentImageData(\n                imageData,\n                augmentation\n            );\n            const newCanvas = imageDataToCanvas(newImageData);\n            renderer.setBaseImage(newCanvas);\n            newCanvas.remove();\n        } catch (err: any) {\n            setError(err.message || \"Augmentation failed\");\n            setLastError(moment().valueOf());\n        } finally {\n            setActiveAugmentation(null);\n        }\n    };\n\n    if (activeAugmentation) {\n        return (\n            <div className=\"form-group\" style={{ marginTop: \"16px\" }}>\n                <i className=\"fas fa-spinner fa-spin\"></i>&nbsp;{\" \"}\n                {activeAugmentation === \"upscale\"\n                    ? \"Upscaling...\"\n                    : \"Restoring faces...\"}\n            </div>\n        );\n    }\n\n    if (backupImage) {\n        return (\n            <div className=\"form-group\" style={{ marginTop: \"16px\" }}>\n                <ErrorNotification message={error} timestamp={lastError} />\n                <button\n                    className=\"btn btn-primary\"\n                    onClick={() => {\n                        setBackupImage(undefined);\n                        const img = new Image();\n                        // set src as data uri\n                        const src = \"data:image/png;base64,\" + backupImage;\n                        img.src = src;\n                        img.onload = () => {\n                            renderer.setBaseImage(img);\n                        };\n                    }}\n                >\n                    {/* cancel icon */}\n                    <i className=\"fas fa-times\"></i>&nbsp; Revert\n                </button>\n                <button\n                    className=\"btn btn-primary\"\n                    onClick={() => {\n                        setBackupImage(undefined);\n                        if (tool.saveListener) {\n                            const encodedImage = renderer.getEncodedImage(null);\n                            if (encodedImage) {\n                                tool.saveListener(encodedImage);\n                            }\n                        }\n                    }}\n                    style={{ marginLeft: \"8px\" }}\n                >\n                    {/* save icon */}\n                    <i className=\"fas fa-save\"></i>&nbsp; Save\n                </button>\n            </div>\n        );\n    }\n\n    const maxSize = 2048 * 2048;\n    if (renderer.getWidth() * renderer.getHeight() > maxSize) {\n        return (\n            <div style={{ marginTop: \"16px\" }}>\n                This image is too large to augment.\n            </div>\n        );\n    }\n\n    const cost = calculateImagesCost(1, image.params.width!, image.params.height!);\n\n    // Show buttons for import and export and \"save a copy\"\n    return (\n        <>\n            <ErrorNotification message={error} timestamp={lastError} />\n            <div className=\"form-group\" style={{ marginTop: \"16px\" }}>\n                <button\n                    className=\"btn btn-primary\"\n                    onClick={() => {\n                        onAugment(\"upscale\");\n                    }}\n                    style={{ marginLeft: \"8px\" }}\n                >\n                    {/* upscale icon */}\n                    <i className=\"fas fa-arrows-alt\"></i>&nbsp; Upscale Image 2x\n                </button>\n            </div>\n            <div className=\"form-group\" style={{ marginTop: \"16px\" }}>\n                <button\n                    className=\"btn btn-primary\"\n                    onClick={() => {\n                        onAugment(\"face_restore\");\n                    }}\n                    style={{ marginLeft: \"8px\" }}\n                >\n                    {/* face restore icon */}\n                    <i className=\"fas fa-smile\"></i>&nbsp; Restore Faces\n                </button>\n            </div>\n            <div className=\"form-group\" style={{ marginTop: \"16px\" }}>\n                <CostIndicator imagesCost={cost} />\n            </div>\n        </>\n    );\n};\n","import React from \"react\";\nimport { Modal, Button } from \"react-bootstrap\";\nimport { Link, useHistory } from \"react-router-dom\";\n\ninterface OutOfCreditsModalProps {\n    show: boolean;\n    onHide: () => void;\n}\n\nconst OutOfCreditsModal: React.FC<OutOfCreditsModalProps> = ({\n    show,\n    onHide,\n}) => {\n    const history = useHistory();\n\n    const redirectToPricing = () => {\n        onHide();\n        history.push(\"/pricing\");\n    };\n\n    return (\n        <Modal show={show} onHide={onHide} centered>\n            <Modal.Header closeButton>\n                <Modal.Title>Out of Credits</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                Oops! It looks like you've run out of credits for today. But\n                don't worry, you'll receive 100 free credits tomorrow to\n                continue creating amazing images. Can't wait? Check out our\n                affordable <Link to=\"/pricing\">pricing options</Link> to get instant access to more credits\n                and unleash your creativity without limits!\n            </Modal.Body>\n            <Modal.Footer>\n                <Button variant=\"secondary\" onClick={onHide}>\n                    Close\n                </Button>\n                <Button variant=\"primary\" onClick={redirectToPricing}>\n                    Visit Pricing Page\n                </Button>\n            </Modal.Footer>\n        </Modal>\n    );\n};\n\nexport default OutOfCreditsModal;\n","import React, { useEffect, useState } from \"react\";\nimport { Modal, Button } from \"react-bootstrap\";\nimport { useHistory } from \"react-router-dom\";\n\ninterface PaymentStatusModalProps {\n    paymentStatus?: \"success\" | \"canceled\";\n}\n\nconst PaymentStatusModal: React.FC<PaymentStatusModalProps> = ({\n    paymentStatus,\n}) => {\n    const [show, setShow] = useState(false);\n    const history = useHistory();\n\n    useEffect(() => {\n        if (paymentStatus) {\n            setShow(true);\n        }\n    }, [paymentStatus]);\n\n    const handleClose = () => {\n        setShow(false);\n        history.push(\"/\");\n    };\n\n    return (\n        <Modal show={show} onHide={handleClose}>\n            <Modal.Header closeButton>\n                <Modal.Title>Payment Status</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                {paymentStatus === \"success\"\n                    ? \"Payment succeeded!\"\n                    : \"Payment canceled.\"}\n            </Modal.Body>\n            <Modal.Footer>\n                <Button variant=\"secondary\" onClick={handleClose}>\n                    Close\n                </Button>\n            </Modal.Footer>\n        </Modal>\n    );\n};\n\nexport default PaymentStatusModal;\n","import axios from \"axios\";\nimport { AIBrushApi } from \"../client\";\nimport { Rect } from \"../pages/image-editor/models\";\n\nconst anonymousClient = axios.create();\n\nexport interface SplitResult {\n    numTilesX: number;\n    numTilesY: number;\n    tileSize: number;\n    imageWidth: number;\n    imageHeight: number;\n    tiles: ImageData[][]; // [x][y]\n}\n\nexport function convertPNGToJPG(encodedImage: string): Promise<string> {\n    return new Promise((resolve, reject) => {\n        const image = new Image();\n        image.onload = () => {\n            const canvas = document.createElement(\"canvas\");\n            try {\n                canvas.width = image.width;\n                canvas.height = image.height;\n                const ctx = canvas.getContext(\"2d\");\n                if (!ctx) {\n                    throw new Error(\"Could not get canvas context\");\n                }\n                ctx.drawImage(image, 0, 0);\n                const dataUrl = canvas.toDataURL(\"image/jpeg\");\n                resolve(dataUrl.split(\",\")[1]);\n            } finally {\n                canvas.remove();\n            }\n        };\n        image.src = `data:image/png;base64,${encodedImage}`\n    });\n}\n\nexport function loadImageDataElement(\n    api: AIBrushApi,\n    imageId: string\n): Promise<HTMLImageElement> {\n    return new Promise((resolve, reject) => {\n        api.getImageDownloadUrls(imageId)\n            .then((urls) => {\n                anonymousClient\n                    .get(urls.data.image_url!, {\n                        responseType: \"arraybuffer\",\n                    })\n                    .then((resp) => {\n                        const binaryImageData = Buffer.from(\n                            resp.data,\n                            \"binary\"\n                        );\n                        const base64ImageData =\n                            binaryImageData.toString(\"base64\");\n                        const src = `data:image/png;base64,${base64ImageData}`;\n                        const imageElement = new Image();\n                        imageElement.src = src;\n                        imageElement.onload = () => {\n                            resolve(imageElement);\n                        };\n                    })\n                    .catch((err) => reject(err));\n            })\n            .catch((err) => reject(err));\n    });\n}\n\n// split image for individual upscales\nexport function splitImage(initImage: ImageData) {\n    // Check if the image area is larger than 512x512\n    if (initImage.width * initImage.height > 512 * 512) {\n        // use a temporary canvas to split the image\n        const canvas = document.createElement(\"canvas\");\n        try {\n            canvas.width = initImage.width;\n            canvas.height = initImage.height;\n            const ctx = canvas.getContext(\"2d\");\n            if (!ctx) {\n                throw new Error(\"Could not get canvas context\");\n            }\n            ctx.putImageData(initImage, 0, 0);\n            const tile_size = Math.min(initImage.width, initImage.height, 512);\n            // split the image into 512x512 tiles\n            // they need to overlap by at least 32 pixels\n            // so that the edges can be merged\n\n            // calculate the number of tiles in each dimension\n            const num_tiles_x = Math.ceil(initImage.width / (tile_size - 32));\n            const num_tiles_y = Math.ceil(initImage.height / (tile_size - 32));\n\n            const tiles: ImageData[][] = [];\n            for (let x = 0; x < num_tiles_x; x++) {\n                tiles.push([]);\n                for (let y = 0; y < num_tiles_y; y++) {\n                    // calculate the bounding box of the tile\n                    const x0 = x * (tile_size - 32);\n                    const y0 = y * (tile_size - 32);\n                    const x1 = Math.min(x0 + tile_size, initImage.width);\n                    const y1 = Math.min(y0 + tile_size, initImage.height);\n                    // crop the tile\n                    const tile = ctx.getImageData(x0, y0, x1 - x0, y1 - y0);\n                    tiles[x].push(tile);\n                }\n            }\n            return {\n                numTilesX: num_tiles_x,\n                numTilesY: num_tiles_y,\n                tileSize: tile_size,\n                imageWidth: initImage.width,\n                imageHeight: initImage.height,\n                tiles,\n            };\n        } finally {\n            canvas.remove();\n        }\n    } else {\n        return null;\n    }\n}\n\n// merge the tiles back into a single image\n// tiles should be 2x original size\nexport function mergeTiles(splitResult: SplitResult): ImageData {\n    // create a new image\n    const canvas = document.createElement(\"canvas\");\n    try {\n        canvas.width = splitResult.imageWidth;\n        canvas.height = splitResult.imageHeight;\n        const ctx = canvas.getContext(\"2d\");\n        if (!ctx) {\n            throw new Error(\"Could not get canvas context\");\n        }\n        for (let x = 0; x < splitResult.numTilesX; x++) {\n            for (let y = 0; y < splitResult.numTilesY; y++) {\n                // load the tile\n                const tile = splitResult.tiles[x][y];\n                const tileCanvas = imageDataToCanvas(tile);\n\n                // paste the tile into the new image\n                ctx.drawImage(\n                    tileCanvas,\n                    x * (splitResult.tileSize - 64),\n                    y * (splitResult.tileSize - 64)\n                );\n            }\n        }\n        return ctx.getImageData(\n            0,\n            0,\n            splitResult.imageWidth,\n            splitResult.imageHeight\n        );\n    } finally {\n        canvas.remove();\n    }\n}\n\nexport function imageDataToCanvas(imageData: ImageData): HTMLCanvasElement {\n    const canvas = document.createElement(\"canvas\");\n    canvas.width = imageData.width;\n    canvas.height = imageData.height;\n    const ctx = canvas.getContext(\"2d\");\n    if (!ctx) {\n        throw new Error(\"Could not get canvas context\");\n    }\n    ctx.putImageData(imageData, 0, 0);\n    return canvas;\n}\n\n// extract resizing logic from above function into a reusable resizeImage function\nexport function resizeImage(\n    image: HTMLCanvasElement,\n    width: number,\n    height: number\n): HTMLCanvasElement {\n    const canvas = document.createElement(\"canvas\");\n    try {\n        canvas.width = width;\n        canvas.height = height;\n        const ctx = canvas.getContext(\"2d\");\n        if (!ctx) {\n            throw new Error(\"Could not get canvas context\");\n        }\n        ctx.drawImage(image, 0, 0, width, height);\n        return canvas;\n    } finally {\n        image.remove();\n    }\n}\n\n// re-implement fixImageSize using resizeImage\nexport function fixImageSize(image: HTMLCanvasElement): HTMLCanvasElement {\n    // if the width and the height are divisible by 64, return the image data\n    // otherwise, resize up to the next multiple of 64\n    const width = Math.ceil(image.width / 64) * 64;\n    const height = Math.ceil(image.height / 64) * 64;\n    if (width == image.width && height == image.height) {\n        return image;\n    }\n    return resizeImage(image, width, height);\n}\n\nexport function featherEdges(\n    selectionOverlay: Rect,\n    imageWidth: number,\n    imageHeight: number,\n    imageData: ImageData,\n    featherWidth?: number\n) {\n    const featherLeftEdge = selectionOverlay.x != 0;\n    const featherRightEdge =\n        selectionOverlay.x + selectionOverlay.width != imageWidth;\n    const featherTopEdge = selectionOverlay.y != 0;\n    const featherBottomEdge =\n        selectionOverlay.y + selectionOverlay.height != imageHeight;\n\n    const baseWidth = Math.min(selectionOverlay.width, selectionOverlay.height);\n    if (!featherWidth) {\n        featherWidth = Math.floor(baseWidth / 8);\n    }\n\n    if (featherTopEdge) {\n        for (let y = 0; y < featherWidth; y++) {\n            for (let x = 0; x < selectionOverlay.width; x++) {\n                const pixelIndex = (y * selectionOverlay.width + x) * 4;\n                const alpha = (y / featherWidth) * 255;\n                const existingAlpha = imageData.data[pixelIndex + 3];\n                imageData.data[pixelIndex + 3] = Math.min(alpha, existingAlpha);\n            }\n        }\n    }\n    if (featherBottomEdge) {\n        for (\n            let y = selectionOverlay.height - featherWidth;\n            y < selectionOverlay.height;\n            y++\n        ) {\n            for (let x = 0; x < selectionOverlay.width; x++) {\n                const pixelIndex = (y * selectionOverlay.width + x) * 4;\n                const alpha =\n                    ((selectionOverlay.height - y) / featherWidth) * 255;\n                const existingAlpha = imageData.data[pixelIndex + 3];\n                imageData.data[pixelIndex + 3] = Math.min(alpha, existingAlpha);\n            }\n        }\n    }\n    if (featherLeftEdge) {\n        for (let x = 0; x < featherWidth; x++) {\n            for (let y = 0; y < selectionOverlay.height; y++) {\n                const pixelIndex = (y * selectionOverlay.width + x) * 4;\n                const alpha = (x / featherWidth) * 255;\n                const existingAlpha = imageData.data[pixelIndex + 3];\n                imageData.data[pixelIndex + 3] = Math.min(alpha, existingAlpha);\n            }\n        }\n    }\n    if (featherRightEdge) {\n        for (\n            let x = selectionOverlay.width - featherWidth;\n            x < selectionOverlay.width;\n            x++\n        ) {\n            for (let y = 0; y < selectionOverlay.height; y++) {\n                const pixelIndex = (y * selectionOverlay.width + x) * 4;\n                const alpha =\n                    ((selectionOverlay.width - x) / featherWidth) * 255;\n                const existingAlpha = imageData.data[pixelIndex + 3];\n                imageData.data[pixelIndex + 3] = Math.min(alpha, existingAlpha);\n            }\n        }\n    }\n}\n\nexport function applyAlphaMask(imageData: ImageData, alphaMask: ImageData) {\n    if (\n        imageData.width != alphaMask.width ||\n        imageData.height != alphaMask.height\n    ) {\n        throw new Error(\"imageData and alphaMask are not the same size\");\n    }\n    const spread = 10;\n    for (let x = 0; x < imageData.width; x++) {\n        for (let y = 0; y < imageData.height; y++) {\n            // r, g, b, a\n            // if transparency within 10 pixels, set alpha to 1, otherwise to zero.\n            // binary alpha inversion with spread\n            let alpha = false;\n            for (\n                let x2 = Math.max(0, x - spread);\n                x2 < Math.min(imageData.width, x + spread);\n                x2++\n            ) {\n                for (\n                    let y2 = Math.max(0, y - spread);\n                    y2 < Math.min(imageData.height, y + spread);\n                    y2++\n                ) {\n                    const alphaValue =\n                        alphaMask.data[y2 * alphaMask.width * 4 + x2 * 4 + 3];\n                    if (alphaValue < 255) {\n                        alpha = true;\n                    }\n                }\n            }\n            const alphaIndex = y * imageData.width * 4 + x * 4 + 3;\n            if (alpha) {\n                imageData.data[alphaIndex] = 255;\n            } else {\n                imageData.data[alphaIndex] = 0;\n            }\n        }\n    }\n}\n\nexport interface ImageWorkerRequest {\n    id: string;\n    feather: boolean;\n    upscale?: boolean;\n    alphaMode: \"none\" | \"mask\" | \"alpha\";\n    pixels: Uint8ClampedArray;\n    alphaPixels?: Uint8ClampedArray;\n    width: number;\n    height: number;\n    featherWidth?: number;\n    selectionOverlay: Rect;\n}\n\nexport interface ImageWorkerResponse {\n    id: string;\n    pixels: Uint8ClampedArray;\n}\n\nexport class ImageUtilWorker {\n    private workers: Array<Worker> = [];\n    private callbacks: { [key: string]: (event: MessageEvent) => void } = {};\n    private cursor = 0;\n\n    constructor(numWorkers = 3) {\n        for (let i = 0; i < numWorkers; i++) {\n            this.workers[i] = new Worker(\n                `${process.env.PUBLIC_URL}/workers/imageutil.js`\n            );\n            this.workers[i].addEventListener(\n                \"message\",\n                this.onMessage.bind(this)\n            );\n        }\n    }\n\n    onMessage(event: MessageEvent) {\n        const resp = event.data as ImageWorkerResponse;\n        this.callbacks[resp.id](event);\n        delete this.callbacks[resp.id];\n    }\n\n    async processRequest(\n        request: ImageWorkerRequest\n    ): Promise<ImageWorkerResponse> {\n        return new Promise((resolve, reject) => {\n            this.callbacks[request.id] = (event) => {\n                resolve(event.data);\n            };\n            this.workers[this.cursor].postMessage({\n                ...request,\n            });\n            this.cursor = (this.cursor + 1) % this.workers.length;\n        });\n    }\n\n    destroy() {\n        for (let key in this.workers) {\n            this.workers[key].terminate();\n        }\n    }\n}\n\nexport function createEncodedThumbnail(encodedImage: string): Promise<string> {\n    return new Promise((resolve, reject) => {\n        // use html5 canvas\n        // crop to square aspect ratio on 128x128 canvas\n        const canvas = document.createElement(\"canvas\");\n        canvas.width = 128;\n        canvas.height = 128;\n\n        const image = new Image();\n        image.src = `data:image/png;base64,${encodedImage}`;\n        image.onload = () => {\n            const context = canvas.getContext(\"2d\");\n            if (!context) {\n                throw new Error(\"Could not create canvas context\");\n            }\n            const width = 128;\n            const height = 128;\n            canvas.width = width;\n            canvas.height = height;\n\n            const aspectRatio = image.width / image.height;\n            const cropWidth =\n                aspectRatio > 1 ? image.width : image.height * aspectRatio;\n            const cropHeight =\n                aspectRatio > 1 ? image.width / aspectRatio : image.height;\n            const cropX = (image.width - cropWidth) / 2;\n            const cropY = (image.height - cropHeight) / 2;\n            context.drawImage(\n                image,\n                cropX,\n                cropY,\n                cropWidth,\n                cropHeight,\n                0,\n                0,\n                width,\n                height\n            );\n\n            // save to png\n            const imageUrl = canvas.toDataURL(\"image/png\");\n            const base64 = imageUrl.split(\",\")[1];\n            resolve(base64);\n        };\n    });\n}\n\nexport function decodeImage(encodedImage: string): Promise<HTMLImageElement> {\n    return new Promise((resolve, reject) => {\n        const image = new Image();\n        image.src = `data:image/png;base64,${encodedImage}`;\n        image.onload = () => {\n            resolve(image);\n        };\n    });\n}\n\nexport function binaryImageToDataBase64(binaryImage: any): string {\n    const buf = Buffer.from(binaryImage, \"binary\");\n    return buf.toString(\"base64\");\n}\n\nexport function resizeEncodedImage(\n    encodedImage: string,\n    width: number,\n    height: number,\n    format: \"png\" | \"jpeg\",\n): Promise<string> {\n    return new Promise((resolve, reject) => {\n        // use html5 canvas\n        // crop to square aspect ratio on 128x128 canvas\n        const canvas = document.createElement(\"canvas\");\n        canvas.width = width;\n        canvas.height = height;\n\n        const image = new Image();\n        image.src = `data:image/${format};base64,${encodedImage}`;\n        image.onload = () => {\n            const context = canvas.getContext(\"2d\");\n            if (!context) {\n                throw new Error(\"Could not create canvas context\");\n            }\n            canvas.width = width;\n            canvas.height = height;\n\n            context.drawImage(\n                image,\n                0,\n                0,\n                image.width,\n                image.height,\n                0,\n                0,\n                width,\n                height\n            );\n\n            // save to png\n            const imageUrl = canvas.toDataURL(\"image/${format}\");\n            const base64 = imageUrl.split(\",\")[1];\n            resolve(base64);\n        };\n    });\n}\n\nexport function encodedImageToBlob(encodedImage: string): Blob {\n    const binaryString = atob(encodedImage);\n    const arr = [];\n    for (let i = 0; i < binaryString.length; i++) {\n        arr.push(binaryString.charCodeAt(i));\n    }\n    return new Blob([new Uint8Array(arr)], {\n        type: \"image/png\",\n    });\n}\n\n// This function is made to work with S3 presigned urls.\n// Solution found at https://stackoverflow.com/questions/22531114/how-to-upload-to-aws-s3-directly-from-browser-using-a-pre-signed-url-instead-of\nexport function uploadBlob(signedUrl: string, blob: Blob): Promise<void> {\n    return new Promise((resolve, reject) => {\n        var xhr = new XMLHttpRequest();\n        xhr.open(\"PUT\", signedUrl, true);\n        xhr.setRequestHeader(\"Content-Type\", \"image/png\");\n        xhr.onload = () => {\n            if (xhr.status < 400) {\n                // success!\n                resolve();\n            }\n        };\n        xhr.onerror = (err) => {\n            // error...\n            reject(err);\n        };\n        xhr.send(blob); // `file` is a File object here\n    });\n}\n","import React, { FC, useEffect, useRef, useState } from \"react\";\nimport { Modal } from \"react-bootstrap\";\nimport { propTypes } from \"react-bootstrap/esm/Image\";\n\ninterface Props {\n    show: boolean;\n    title?: string;\n}\n\n// Show modal with child contents\nexport const BusyModal: FC<Props> = ({ show, title, children }) => {\n    return (\n        <Modal show={show} backdrop=\"static\" keyboard={false}>\n            <Modal.Header closeButton>\n                <Modal.Title>{title || \"Processing\"}</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                {children || (\n                    <div className=\"d-flex justify-content-center\">\n                        <div className=\"spinner-border\" role=\"status\">\n                            <span className=\"sr-only\">Please Wait...</span>\n                        </div>\n                    </div>\n                )}\n            </Modal.Body>\n        </Modal>\n    );\n};\n","import moment from \"moment\";\n\nimport { Image } from \"../client\";\n\nexport interface LocalImage extends Image {\n    imageData?: string;\n}\n\n/**\n * This class uses indexedDB to store images locally.\n */\nexport class LocalImagesStore {\n    private db: IDBDatabase | null = null;\n\n    init(): Promise<void> {\n        return new Promise((resolve, reject) => {\n            const request = indexedDB.open(\"aibrush\", 4);\n            request.onupgradeneeded = (evt) => {\n                const db = request.result;\n                // create object store if it doesn't exist\n                // const imagesStore = db.createObjectStore(\"images\", { keyPath: \"id\" });\n                let imagesStore: IDBObjectStore;\n                if (!db.objectStoreNames.contains(\"images\")) {\n                    imagesStore = db.createObjectStore(\"images\", {\n                        keyPath: \"id\",\n                    });\n                } else {\n                    imagesStore = request.transaction?.objectStore(\n                        \"images\"\n                    ) as IDBObjectStore;\n                }\n                imagesStore.createIndex(\"updated_at\", \"updated_at\", {\n                    unique: false,\n                });\n                imagesStore.createIndex(\"deleted_at\", \"deleted_at\", {\n                    unique: false,\n                });\n                console.log(\"Local images store updated\");\n            };\n            request.onsuccess = (_) => {\n                this.db = request.result;\n                console.log(\"Local images store initialized\");\n                resolve();\n            };\n            request.onerror = (evt) => {\n                console.error(\"error opening indexeddb\", evt);\n                reject(evt);\n            };\n        });\n    }\n\n    // migrate old images to new format\n    private hydrateImage(image: LocalImage): LocalImage {\n        if (!image) {\n            return image;\n        }\n        if (!image.params) {\n            const legacyImage = image as any;\n            image.params = {\n                prompt: legacyImage.phrases.join(\", \"),\n                negative_prompt: legacyImage.negative_phrases.join(\", \"),\n                width: legacyImage.width,\n                height: legacyImage.height,\n                denoising_strength: legacyImage.stable_diffusion_strength,\n                steps: legacyImage.iterations,\n            }\n        }\n        return image;\n    }\n\n    async getImage(id: string): Promise<LocalImage | null> {\n        if (!this.db) {\n            throw new Error(\"not initialized\");\n        }\n        const transaction = this.db.transaction([\"images\"]);\n        const store = transaction.objectStore(\"images\");\n        const request = store.get(id);\n        return new Promise((resolve, reject) => {\n            request.onsuccess = (evt) => {\n                resolve(this.hydrateImage(request.result));\n            };\n            request.onerror = (evt) => {\n                console.error(\"error getting image\", evt);\n                reject(evt);\n            };\n        });\n    }\n\n    async saveImage(image: LocalImage): Promise<void> {\n        if (!this.db) {\n            throw new Error(\"not initialized\");\n        }\n        await this.cleanupDeletedImages();\n        const transaction = this.db.transaction([\"images\"], \"readwrite\");\n        const store = transaction.objectStore(\"images\");\n        const request = store.put({\n            ...image,\n            updated_at: moment().valueOf(),\n        });\n        return new Promise((resolve, reject) => {\n            request.onsuccess = (evt) => {\n                resolve();\n            };\n            request.onerror = (evt) => {\n                console.error(\"error saving image\", evt);\n                reject(evt);\n            };\n        });\n    }\n\n    async hardDeleteImage(id: string): Promise<void> {\n        if (!this.db) {\n            throw new Error(\"not initialized\");\n        }\n        const transaction = this.db.transaction([\"images\"], \"readwrite\");\n        const store = transaction.objectStore(\"images\");\n        const request = store.delete(id);\n        return new Promise((resolve, reject) => {\n            request.onsuccess = (evt) => {\n                console.log(`image ${id} permanently deleted`);\n                resolve();\n            };\n            request.onerror = (evt) => {\n                console.error(\"error deleting image\", evt);\n                reject(evt);\n            };\n        });\n    }\n\n    async deleteImage(id: string): Promise<void> {\n        if (!this.db) {\n            throw new Error(\"not initialized\");\n        }\n        // fetch the image first. If it has a deletedAt timestamp already, or if it's not\n        // in \"completed\" state, hard delete it. Otherwise, set the deletedAt timestamp.\n        const image = await this.getImage(id);\n        if (!image) {\n            console.error(\"image not found\", id);\n            return;\n        }\n        if (image.deleted_at || image.status !== \"completed\") {\n            return this.hardDeleteImage(id);\n        }\n        const transaction = this.db.transaction([\"images\"], \"readwrite\");\n        const store = transaction.objectStore(\"images\");\n        const request = store.put({\n            ...image,\n            deleted_at: moment().valueOf(),\n        });\n        return new Promise((resolve, reject) => {\n            request.onsuccess = (evt) => {\n                resolve();\n            };\n            request.onerror = (evt) => {\n                console.error(\"error deleting image\", evt);\n                reject(evt);\n            };\n        });\n    }\n\n    async listImages(\n        updated_at: number,\n        direction: IDBCursorDirection,\n        count: number,\n        search: string\n    ): Promise<LocalImage[]> {\n        // use updated_at index\n        if (!this.db) {\n            throw new Error(\"not initialized\");\n        }\n        const transaction = this.db.transaction([\"images\"]);\n        const store = transaction.objectStore(\"images\");\n        const index = store.index(\"updated_at\");\n        const range =\n            direction == \"next\"\n                ? IDBKeyRange.lowerBound(updated_at)\n                : IDBKeyRange.upperBound(updated_at);\n        const request = index.openCursor(range, direction);\n        return new Promise((resolve, reject) => {\n            const images: LocalImage[] = [];\n            request.onsuccess = (evt) => {\n                const cursor = request.result;\n                if (cursor) {\n                    const image: LocalImage = this.hydrateImage(cursor.value);\n                    const prompt = (image.params.prompt || \"\").toLowerCase();\n                    if (\n                        !image.deleted_at &&\n                        (!search || prompt.includes(search.toLowerCase()))\n                    ) {\n                        images.push(image);\n                    }\n                    if (images.length < count) {\n                        cursor.continue();\n                    } else {\n                        resolve(images);\n                    }\n                } else {\n                    resolve(images);\n                }\n            };\n            request.onerror = (evt) => {\n                console.error(\"error listing images\", evt);\n                reject(evt);\n            };\n        });\n    }\n\n    async clearImages(): Promise<void> {\n        // clear from both indexes\n        if (!this.db) {\n            throw new Error(\"not initialized\");\n        }\n        const transaction = this.db.transaction([\"images\"], \"readwrite\");\n        const imagesStore = transaction.objectStore(\"images\");\n        const imagesRequest = imagesStore.clear();\n        return new Promise((resolve, reject) => {\n            imagesRequest.onsuccess = (evt) => {\n                resolve();\n            };\n            imagesRequest.onerror = (evt) => {\n                console.error(\"error clearing images\", evt);\n                reject(evt);\n            };\n        });\n    }\n\n    async getDeletedImages(olderThan?: number): Promise<LocalImage[]> {\n        if (!this.db) {\n            throw new Error(\"not initialized\");\n        }\n        // refactor to use deleted_at index\n        const transaction = this.db.transaction([\"images\"]);\n        const store = transaction.objectStore(\"images\");\n        const index = store.index(\"deleted_at\");\n        // const request = index.openCursor();\n        // get cursor for all deleted_at values\n        const request = index.openCursor(\n            olderThan\n                ? IDBKeyRange.upperBound(olderThan)\n                : IDBKeyRange.lowerBound(1),\n            olderThan ? \"prev\" : \"next\"\n        );\n        return new Promise((resolve, reject) => {\n            const images: LocalImage[] = [];\n            request.onsuccess = (evt) => {\n                const cursor = request.result;\n                if (cursor) {\n                    const image: LocalImage = cursor.value;\n                    if (images.length < 50 && image.deleted_at) {\n                        images.push(cursor.value);\n                    }\n                    cursor.continue();\n                } else {\n                    resolve(images);\n                }\n            };\n            request.onerror = (evt) => {\n                console.error(\"error listing images\", evt);\n                reject(evt);\n            };\n        });\n    }\n\n    async clearDeletedImages(): Promise<void> {\n        if (!this.db) {\n            throw new Error(\"not initialized\");\n        }\n        let deletedImages = await this.getDeletedImages();\n        while (deletedImages.length > 0) {\n            // hard delete all deleted images\n            const promises = deletedImages.map((image) => {\n                return this.hardDeleteImage(image.id);\n            });\n            await Promise.all(promises);\n            deletedImages = await this.getDeletedImages();\n        }\n    }\n\n    async cleanupDeletedImages(): Promise<void> {\n        // delete images that are more than 1 day old\n        let deletedImages = await this.getDeletedImages(\n            moment().subtract(1, \"hours\").valueOf()\n        );\n        while (deletedImages.length > 0) {\n            // hard delete all deleted images\n            const promises = deletedImages.map((image) => {\n                return this.hardDeleteImage(image.id);\n            });\n            await Promise.all(promises);\n            deletedImages = await this.getDeletedImages(\n                moment().subtract(1, \"hours\").valueOf()\n            );\n        }\n    }\n}\n","// Login react component with hooks\nimport React, { useState, FC } from \"react\";\nimport * as axios from \"axios\";\nimport qs from \"qs\";\nimport { AIBrushApi, LoginResult } from \"../client/api\";\n\nconsole.log(process.env)\nconst DISCORD_CLIENT_ID = \"1043951225944678490\";\n\ninterface LoginProps {\n    client: AIBrushApi;\n    onLogin: (loginResult: LoginResult) => void;\n}\n\nexport const Login: FC<LoginProps> = (props) => {\n    // login form accepts email only\n    const [email, setEmail] = useState(\"\");\n    const [emailSubmitted, setEmailSubmitted] = useState(false);\n    const [code, setCode] = useState(\"\");\n    const [err, setErr] = useState(\"\");\n\n    // check query string for invite_code\n    const query = window.location.search;\n    const queryParams = qs.parse(query.substring(1));\n    const inviteCode = queryParams[\"invite_code\"];\n\n    const onLogin = async () => {\n        // clear error\n        setErr(\"\");\n        // validate valid email\n        if (!email.match(/^[^@]+@[^@]+\\.[^@]+$/)) {\n            setErr(\"Invalid email address\");\n            return;\n        }\n\n        try {\n            await props.client.login({\n                email: email,\n                invite_code: inviteCode as string,\n            });\n            setEmailSubmitted(true);\n        } catch (err) {\n            console.error(err);\n            setErr(\"Could not login\");\n        }\n    };\n\n    const discordLink = () => {\n        // localhost url:\n        // https://discord.com/api/oauth2/authorize?client_id=1043951225944678490&redirect_uri=http%3A%2F%2Flocalhost%3A3001%2Fdiscord-login&response_type=code&scope=identify%20email\n        // prod url:\n        // https://discord.com/api/oauth2/authorize?client_id=1043951225944678490&redirect_uri=https%3A%2F%2Fwww.aibrush.art%2Fdiscord-login&response_type=code&scope=identify%20email\n        const host = window.location.host;\n        const protocol = window.location.protocol;\n        const redirectUri = `${protocol}//${host}/discord-login`;\n        const url = `https://discord.com/api/oauth2/authorize?client_id=${DISCORD_CLIENT_ID}&redirect_uri=${redirectUri}&response_type=code&scope=identify%20email`;\n        return url;\n    };\n\n    const onVerify = async () => {\n        // clear error\n        setErr(\"\");\n        // attempt to verify code\n        try {\n            const result = await props.client.verify({\n                email,\n                code,\n            });\n            props.onLogin(result.data);\n        } catch (err) {\n            console.error(err);\n            setErr(\"Failed to verify code\");\n        }\n    };\n\n    // bootstrap login form\n    return (\n        <>\n            <div\n                className=\"row\"\n                style={{\n                    height: \"100vh\",\n                    marginLeft: \"0px\",\n                    marginRight: \"0px\",\n                }}\n            >\n                <div className=\"col-md-6 login-splash\">\n                    {/* <div className=\"center-cropped\" style={{backgroundImage: \"url(/images/scifi-dreamland.png)\"}}></div> */}\n                    <img\n                        className=\"center-cropped\"\n                        src=\"/images/scifi-dreamland.png\"\n                    />\n                </div>\n                <div className=\"col-md-6\">\n                    <div\n                        style={{\n                            fontWeight: 500,\n                            fontSize: \"48px\",\n                            marginTop: \"200px\",\n                        }}\n                    >\n                        AiBrush\n                    </div>\n\n                    <div\n                        style={{\n                            marginLeft: \"10%\",\n                            marginRight: \"10%\",\n                            marginTop: \"88px\",\n                            marginBottom: \"24px\",\n                        }}\n                    >\n                        Login With Email\n                    </div>\n                    {/* Display error if one is set */}\n                    {/* Use <p class=\"text-danger\" */}\n                    {err && <p className=\"text-danger\">{err}</p>}\n                    {err && (\n                        <p className=\"text-info\">\n                            If you don't have an account yet, request one by\n                            sending an email to{\" \"}\n                            <a href=\"mailto:admin@aibrush.art\">\n                                admin@aibrush.art\n                            </a>\n                        </p>\n                    )}\n                    <div\n                        style={{\n                            marginLeft: \"10%\",\n                            marginRight: \"10%\",\n                            marginTop: \"24px\",\n                            textAlign: \"left\",\n                        }}\n                    >\n                        {/* If email submitted, show verify code form*/}\n                        {emailSubmitted && (\n                            <>\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"verifyCode\">\n                                        Verify Code\n                                    </label>\n                                    <input\n                                        type=\"text\"\n                                        className=\"form-control\"\n                                        id=\"verifyCode\"\n                                        placeholder=\"Verification Code\"\n                                        value={code}\n                                        onChange={(e) =>\n                                            setCode(e.target.value)\n                                        }\n                                    />\n                                </div>\n                                {/* Cancel verification and go back to email */}\n                                <button\n                                    className=\"btn btn-secondary\"\n                                    onClick={() => setEmailSubmitted(false)}\n                                >\n                                    Cancel\n                                </button>\n                                &nbsp;\n                                {/* Verify code */}\n                                <button\n                                    type=\"button\"\n                                    className=\"btn btn-primary\"\n                                    onClick={(e) => {\n                                        e.preventDefault();\n                                        onVerify();\n                                    }}\n                                >\n                                    Verify\n                                </button>\n                            </>\n                        )}\n                        {/* Else, show login form */}\n                        {!emailSubmitted && (\n                            <>\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"email\">Email address</label>\n                                    <input\n                                        type=\"email\"\n                                        className=\"form-control\"\n                                        id=\"email\"\n                                        aria-describedby=\"emailHelp\"\n                                        placeholder=\"Enter email\"\n                                        value={email}\n                                        onChange={(e) =>\n                                            setEmail(e.target.value.trim())\n                                        }\n                                    />\n                                </div>\n                                <button\n                                    type=\"button\"\n                                    className=\"btn btn-primary\"\n                                    style={{ float: \"right\" }}\n                                    onClick={(e) => {\n                                        e.preventDefault();\n                                        onLogin();\n                                    }}\n                                >\n                                    Login\n                                </button>\n                            </>\n                        )}\n                    </div>\n                    <div\n                        style={{\n                            marginLeft: \"10%\",\n                            marginRight: \"10%\",\n                            marginTop: \"88px\",\n                            marginBottom: \"24px\",\n                        }}\n                    >\n                        <hr/>\n                        OR\n                    </div>\n                    <div\n                        style={{\n                            marginLeft: \"10%\",\n                            marginRight: \"10%\",\n                            marginTop: \"24px\",\n                        }}\n                    >\n                        <a href={discordLink()} className=\"btn btn-primary\">\n                            <i className=\"fab fa-discord\"></i> Login With Discord\n                        </a>\n                    </div>\n                </div>\n            </div>\n        </>\n    );\n};\n","// Given a set of credentials, this component will refresh them\n// every 5 minutes and invoke the onCredentialsRefreshed callback\n\nimport React, { useEffect, FC } from \"react\"\nimport { LoginResult, AIBrushApi } from \"../client/api\";\n\ninterface TokenRefresherProps {\n    onCredentialsRefreshed: (loginResult: LoginResult) => void;\n    onCredentialsExpired: () => void;\n    api: AIBrushApi;\n    credentials: LoginResult;\n}\n\nexport const TokenRefresher : FC<TokenRefresherProps> = ({ onCredentialsRefreshed, onCredentialsExpired, api, credentials }) => {\n    useEffect(() => {\n        const interval = setInterval(() => {\n            if (credentials && credentials.refreshToken) {\n                api.refresh({refreshToken: credentials.refreshToken}).then(loginResult => {\n                    onCredentialsRefreshed(loginResult.data);\n                }).catch(() => {\n                    onCredentialsExpired();\n                });\n            }\n\n        }, 5 * 60 * 1000);\n        return () => {\n            clearInterval(interval);\n        };\n    }, [credentials, api, onCredentialsRefreshed]);\n    return <div></div>;\n}","import React, { FC, useEffect, useState } from 'react';\nimport { AIBrushApi } from \"../client/api\";\n\ninterface HealthcheckerProps {\n    api: AIBrushApi;\n}\n\nexport const Healthchecker: FC<HealthcheckerProps> = ({ api }) => {\n    // automatically check health every 5 seconds\n    const [healthCheck, setHealthCheck] = useState(true);\n    \n    useEffect(() => {\n        const interval = setInterval(() => {\n            api.healthcheck().then(() => setHealthCheck(true)).catch(() => setHealthCheck(false));\n        }, 5000);\n\n        return () => clearInterval(interval);\n    }, [api]);\n\n    // only display bootstrap danger alert if healthcheck failed\n    // \"service is unavailable\"\n    return (\n        <div className=\"alert alert-danger\" role=\"alert\" style={{ display: healthCheck ? 'none' : 'block' }}>\n            <strong>Looks like we're having some trouble reaching the server.</strong>\n        </div>\n    );\n}\n\n","import React, { useState } from \"react\";\nimport { Button, Form, InputGroup, Alert } from \"react-bootstrap\";\nimport { AIBrushApi, CreateDepositCodeInput } from \"../../client/api\";\nimport CopyToClipboard from \"react-copy-to-clipboard\";\n\ninterface Props {\n    api: AIBrushApi;\n}\n\nconst GenerateCode: React.FC<Props> = ({ api }) => {\n    const [amount, setAmount] = useState<number>(100);\n    const [generatedCode, setGeneratedCode] = useState<string | null>(null);\n    const [copied, setCopied] = useState<boolean>(false);\n\n    const handleSubmit = async (event: React.FormEvent) => {\n        event.preventDefault();\n\n        const input: CreateDepositCodeInput = { amount };\n        const result = await api.createDepositCode(input);\n        setGeneratedCode(result.data.code);\n    };\n\n    const handleCopy = () => {\n        setCopied(true);\n        setTimeout(() => setCopied(false), 3000);\n    };\n\n    return (\n        <div>\n            <h4>Generate deposit code</h4>\n            <Form onSubmit={handleSubmit} style={{marginTop: \"16px\"}}>\n                <InputGroup className=\"mb-3\">\n                    {/* amount label */}\n                    <label style={{fontSize: \"24px\", marginRight: \"8px\"}}>Amount:</label>\n                    <Form.Control\n                        type=\"number\"\n                        placeholder=\"Amount\"\n                        value={amount}\n                        onChange={(e) => setAmount(parseInt(e.target.value))}\n                    />\n                    <InputGroup.Append>\n                        <Button\n                            variant=\"primary\"\n                            type=\"submit\"\n                            style={{ marginLeft: \"16px\" }}\n                        >\n                            Generate Code\n                        </Button>\n                    </InputGroup.Append>\n                </InputGroup>\n            </Form>\n\n            {generatedCode && (\n                <div className=\"mb-3\">\n                    <strong>Generated Code: </strong> {generatedCode}\n                    <CopyToClipboard text={generatedCode} onCopy={handleCopy}>\n                        <Button variant=\"secondary\" className=\"ml-2\">\n                            Copy to clipboard\n                        </Button>\n                    </CopyToClipboard>\n                </div>\n            )}\n\n            {copied && (\n                <Alert variant=\"success\">Code copied to clipboard!</Alert>\n            )}\n        </div>\n    );\n};\n\nexport default GenerateCode;\n","import { FC, useEffect, useState } from \"react\";\nimport { AIBrushApi } from \"../../client/api\";\nimport { WorkerSettings, WorkerSettingsJson } from \"../../lib/globalSettings\";\n\ninterface Props {\n    api: AIBrushApi;\n}\n\n// global settings all have a \"settings_key\" and \"settings_json\" field. settings_json is any.\n\n// default \"workers\" setting:\n// {\n//     \"minimum_worker_allocations\": {\n//         \"stable_diffusion\": 0,\n//         \"stable_diffusion_inpainting\": 0,\n//         \"swinir\": 0,\n//     }\n// }\n\nexport const GlobalSettings: FC<Props> = ({ api }) => {\n    const [workerSettings, setWorkerSettings] = useState<WorkerSettingsJson>({\n        minimum_worker_allocations: {\n            stable_diffusion: 0,\n            stable_diffusion_inpainting: 0,\n            swinir: 0,\n        },\n    });\n    const [saving, setSaving] = useState<boolean>(false);\n\n    const loadWorkerSettings = async () => {\n        const settings = await api.getGlobalSettings(\"workers\");\n        setWorkerSettings(settings.data.settings_json as any);\n    };\n\n    const saveWorkerSettings = async () => {\n        setSaving(true);\n        try {\n            await api.updateGlobalSettings(\"workers\", {\n                settings_json: workerSettings,\n            });\n        } finally {\n            setSaving(false);\n        }\n    };\n\n    useEffect(() => {\n        loadWorkerSettings();\n    }, []);\n\n    return (\n        <div style={{paddingBottom: \"48px\"}}>\n            {/* Header: Create new image */}\n            <div className=\"row\">\n                <div className=\"col-12\">\n                    <h1>Global Settings</h1>\n                </div>\n            </div>\n            {/* 50px vertical spacer */}\n            <div className=\"row\">\n                <div className=\"col-12\">\n                    <div className=\"spacer\" />\n                </div>\n            </div>\n            {/* slider from 0 to 10 for each model */}\n            <div className=\"row\">\n                <div className=\"col-12\">\n                    <label htmlFor=\"stable_diffusion\">\n                        stable_diffusion: {workerSettings.minimum_worker_allocations.stable_diffusion}\n                    </label>\n                    <input\n                        style={{marginLeft: \"16px\"}}\n                        type=\"range\"\n                        min={0}\n                        max={10}\n                        value={workerSettings.minimum_worker_allocations.stable_diffusion}\n                        className=\"form-range\"\n                        id=\"stable_diffusion\"\n                        onChange={(e) => {\n                            setWorkerSettings({\n                                ...workerSettings,\n                                minimum_worker_allocations: {\n                                    ...workerSettings.minimum_worker_allocations,\n                                    stable_diffusion: parseInt(e.target.value),\n                                },\n                            });\n                        }}\n                    />\n                </div>\n            </div>\n            <div className=\"row\">\n                <div className=\"col-12\">\n                    <label htmlFor=\"stable_diffusion_inpainting\">\n                        stable_diffusion_inpainting: {workerSettings.minimum_worker_allocations.stable_diffusion_inpainting}\n                    </label>\n                    <input\n                        style={{marginLeft: \"16px\"}}\n                        type=\"range\"\n                        min={0}\n                        max={10}\n                        value={workerSettings.minimum_worker_allocations.stable_diffusion_inpainting}\n                        className=\"form-range\"\n                        id=\"stable_diffusion_inpainting\"\n                        onChange={(e) => {\n                            setWorkerSettings({\n                                ...workerSettings,\n                                minimum_worker_allocations: {\n                                    ...workerSettings.minimum_worker_allocations,\n                                    stable_diffusion_inpainting: parseInt(e.target.value),\n                                },\n                            });\n                        }}\n                    />\n                </div>\n            </div>\n            <div className=\"row\">\n                <div className=\"col-12\">\n                    <label htmlFor=\"swinir\">\n                        swinir: {workerSettings.minimum_worker_allocations.swinir}\n                    </label>\n                    <input\n                        style={{marginLeft: \"16px\"}}\n                        type=\"range\"\n                        min={0}\n                        max={10}\n                        value={workerSettings.minimum_worker_allocations.swinir}\n                        className=\"form-range\"\n                        id=\"swinir\"\n                        onChange={(e) => {\n                            setWorkerSettings({\n                                ...workerSettings,\n                                minimum_worker_allocations: {\n                                    ...workerSettings.minimum_worker_allocations,\n                                    swinir: parseInt(e.target.value),\n                                },\n                            });\n                        }}\n                    />\n                </div>\n            </div>\n            \n            \n            {/* bottom row: save button */}\n            <div className=\"row\">\n                <div className=\"col-12\">\n                    <button className=\"btn btn-primary\" onClick={saveWorkerSettings} disabled={saving}>\n                        {saving ? <>\n                            <i className=\"fas fa-spinner fa-spin\" />\n                            &nbsp; Saving...\n                        </> : \"Save\"}\n                    </button>\n                </div>\n            </div>\n        </div>\n    );\n};","import React, { FC, useState, useEffect, useRef } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { AIBrushApi } from \"../../client/api\";\nimport GenerateCode from \"./GenerateCode\";\nimport { GlobalSettings } from \"./GlobalSettings\";\n\ninterface Props {\n    api: AIBrushApi;\n}\n\nexport const Admin: FC<Props> = ({ api }) => {\n    const [links, setLinks] = useState<string[]>([]);\n\n    const onGenerateLink = async () => {\n        const inviteCode = await api.createInviteCode();\n        setLinks([...links, `/?invite_code=${inviteCode.data.id}`]);\n    };\n\n    return (\n        <div style={{ paddingBottom: \"48px\" }}>\n            {/* Header: Create new image */}\n            <div className=\"row\">\n                <div className=\"col-12\">\n                    <h1>Admin features</h1>\n                </div>\n            </div>\n            {/* 50px vertical spacer */}\n            <div className=\"row\">\n                <div className=\"col-12\">\n                    <div className=\"spacer\" />\n                </div>\n            </div>\n            <div className=\"row\">\n                <div className=\"col-12\">\n                    <div\n                        className=\"d-flex justify-content-center align-items-center\"\n                        style={{ height: \"100%\" }}\n                    >\n                        <GenerateCode api={api} />\n                    </div>\n                </div>\n            </div>\n            <hr />\n            <GlobalSettings api={api} />\n        </div>\n    );\n};\n","import React, { FC, useEffect, useState } from \"react\";\nimport { AIBrushApi, Image } from \"../client\";\nimport moment from \"moment\";\nimport { ImageThumbnail } from \"../components/ImageThumbnail\";\nimport { useHistory } from \"react-router-dom\";\nimport { BusyModal } from \"../components/BusyModal\";\n\ninterface Props {\n    api: AIBrushApi;\n    assetsUrl: string;\n}\n\nexport const DeletedImages: FC<Props> = ({ api, assetsUrl }) => {\n    const [images, setImages] = useState<Image[]>([]);\n    const [deleting, setDeleting] = useState(false);\n\n    const history = useHistory();\n\n    const loadImages = async () => {\n        const cursor = moment().add(-24, \"hours\").valueOf();\n        // TODO: special api call for deleted images?\n        const resp = await api.listImages(cursor, \"\", 100, \"asc\");\n        setImages(\n            (\n                resp.data.images?.filter((image) => !!image.deleted_at) || []\n            ).sort((a, b) => {\n                if (a.deleted_at && b.deleted_at) {\n                    return b.deleted_at - a.deleted_at;\n                }\n                return 0;\n            })\n        );\n    };\n\n    const onDeleteImage = async (image: Image) => {\n        setImages(images.filter((i) => i.id !== image.id));\n        await api.deleteImage(image.id);\n    };\n\n    const onDeleteAllImages = async () => {\n        setDeleting(true);\n        try {\n            await Promise.all(images.map((image) => api.deleteImage(image.id)));\n            setImages([]);\n        } finally {\n            setDeleting(false);\n        }\n    };\n\n    const onRestoreImage = async (image: Image) => {\n        setImages(images.filter((i) => i.id !== image.id));\n        await api.updateImage(image.id, { deleted_at: null });\n    };\n\n    useEffect(() => {\n        loadImages();\n    }, [api]);\n\n    return (\n        <div>\n            <div>\n                <div className=\"row\">\n                    <div className=\"col-12\">\n                        <h1 style={{ fontSize: \"40px\", textAlign: \"left\" }}>\n                            <i\n                                style={{ cursor: \"pointer\" }}\n                                onClick={() => history.goBack()}\n                                className=\"fas fa-chevron-left\"\n                            ></i>\n                            &nbsp; Deleted Images\n                        </h1>\n                        {/* float right \"delete all\" button */}\n                        <button\n                            className=\"btn btn-danger btn-sm image-popup-delete-button\"\n                            onClick={onDeleteAllImages}\n                            style={{\n                                float: \"right\",\n                                marginRight: \"8px\",\n                            }}\n                        >\n                            <i className=\"fa fa-trash\"></i>&nbsp;Delete All\n                        </button>\n                    </div>\n                </div>\n                <div className=\"row\" style={{ marginTop: \"32px\" }}>\n                    <div className=\"col-sm-2 offset-sm-2\">Image</div>\n                    <div className=\"col-sm-8\">Action</div>\n                </div>\n                {images.map((image) => (\n                    <div\n                        className=\"row\"\n                        style={{\n                            marginTop: \"16px\",\n                            borderBottom: \"1px solid #303030\",\n                        }}\n                        key={image.id}\n                    >\n                        <div className=\"col-sm-2 offset-sm-2\">\n                            <ImageThumbnail\n                                assetsUrl={assetsUrl}\n                                image={image}\n                                censorNSFW={true}\n                            />\n                        </div>\n                        <div\n                            className=\"col-sm-8\"\n                            style={{\n                                paddingTop: \"64px\",\n                                paddingBottom: \"64px\",\n                            }}\n                        >\n                            <button\n                                className=\"btn btn-danger btn-sm image-popup-delete-button\"\n                                onClick={() => onDeleteImage(image)}\n                                style={{\n                                    marginRight: \"8px\",\n                                }}\n                            >\n                                <i className=\"fa fa-trash\"></i>&nbsp;Delete\n                            </button>\n                            <button\n                                className=\"btn btn-primary btn-sm image-popup-restore-button\"\n                                onClick={() => onRestoreImage(image)}\n                            >\n                                <i className=\"fa fa-undo\"></i>&nbsp;Restore\n                            </button>\n                        </div>\n                    </div>\n                ))}\n            </div>\n            <BusyModal show={deleting} title=\"Deleting Images\">\n                Please wait while we delete all images...\n            </BusyModal>\n        </div>\n    );\n};\n","import React, { useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { AIBrushApi, LoginResult } from \"../client\";\n\ninterface LoginProps {\n    client: AIBrushApi;\n    onLogin: (loginResult: LoginResult) => void;\n}\n\nexport const DiscordLogin: React.FC<LoginProps> = ({client, onLogin}) => {\n    const history = useHistory();\n    const code = new URLSearchParams(window.location.search).get(\"code\");\n    \n    useEffect(() => {\n        if (code) {\n            console.log(\"logging in with code\", code);\n            client.discordLogin({code}).then((result) => {\n                console.log(\"login result\", result);\n                if (result.data.accessToken) {\n                    onLogin(result.data);\n                }\n                \n                history.push(\"/\");\n            });\n        } else {\n            history.push(\"/\");\n        }\n    }, [])\n\n    return null;\n}","import React, { FC, useEffect, useState } from \"react\";\nimport { AIBrushApi, Image } from \"../client\";\nimport moment from \"moment\";\nimport { ImageThumbnail } from \"../components/ImageThumbnail\";\nimport { useHistory } from \"react-router-dom\";\nimport { LocalImagesStore } from \"../lib/localImagesStore\";\nimport { BusyModal } from \"../components/BusyModal\";\n\ninterface Props {\n    localImages: LocalImagesStore;\n}\n\nexport const LocalDeletedImages: FC<Props> = ({ localImages }) => {\n    const [images, setImages] = useState<Image[]>([]);\n    const [deleting, setDeleting] = useState(false);\n\n    const history = useHistory();\n\n    const loadImages = async () => {\n        const deletedImages = await localImages.getDeletedImages();\n        setImages(deletedImages);\n    };\n\n    const onDeleteImage = async (image: Image) => {\n        setImages(images.filter((i) => i.id !== image.id));\n        await localImages.deleteImage(image.id);\n        if (images.length <= 5) {\n            loadImages();\n        }\n    };\n\n    const onDeleteAllImages = async () => {\n        setDeleting(true);\n        try {\n            await localImages.clearDeletedImages();\n            setImages([]);\n        } finally {\n            setDeleting(false);\n        }\n    };\n\n    const onRestoreImage = async (image: Image) => {\n        setImages(images.filter((i) => i.id !== image.id));\n        await localImages.saveImage({\n            ...image,\n            deleted_at: undefined,\n        });\n    };\n\n    useEffect(() => {\n        loadImages();\n    }, [localImages]);\n\n    return (\n        <div>\n            <div>\n                <div className=\"row\">\n                    <div className=\"col-12\">\n                        <h1 style={{ fontSize: \"40px\", textAlign: \"left\" }}>\n                            <i\n                                style={{ cursor: \"pointer\" }}\n                                onClick={() => history.goBack()}\n                                className=\"fas fa-chevron-left\"\n                            ></i>\n                            &nbsp; Deleted Images\n                        </h1>\n                        <button\n                            className=\"btn btn-danger btn-sm image-popup-delete-button\"\n                            onClick={onDeleteAllImages}\n                            style={{\n                                float: \"right\",\n                                marginRight: \"8px\",\n                            }}\n                        >\n                            <i className=\"fa fa-trash\"></i>&nbsp;Delete All\n                        </button>\n                    </div>\n                </div>\n                <div className=\"row\" style={{ marginTop: \"32px\" }}>\n                    <div className=\"col-sm-2 offset-sm-2\">Image</div>\n                    <div className=\"col-sm-8\">Action</div>\n                </div>\n                {images.map((image) => (\n                    <div\n                        className=\"row\"\n                        style={{\n                            marginTop: \"16px\",\n                            borderBottom: \"1px solid #303030\",\n                        }}\n                        key={image.id}\n                    >\n                        <div className=\"col-sm-2 offset-sm-2\">\n                            <ImageThumbnail\n                                assetsUrl={\"\"}\n                                image={image}\n                                censorNSFW={true}\n                            />\n                        </div>\n                        <div\n                            className=\"col-sm-8\"\n                            style={{\n                                paddingTop: \"64px\",\n                                paddingBottom: \"64px\",\n                            }}\n                        >\n                            <button\n                                className=\"btn btn-danger btn-sm image-popup-delete-button\"\n                                onClick={() => onDeleteImage(image)}\n                                style={{\n                                    marginRight: \"8px\",\n                                }}\n                            >\n                                <i className=\"fa fa-trash\"></i>&nbsp;Delete\n                            </button>\n                            <button\n                                className=\"btn btn-primary btn-sm image-popup-restore-button\"\n                                onClick={() => onRestoreImage(image)}\n                            >\n                                <i className=\"fa fa-undo\"></i>&nbsp;Restore\n                            </button>\n                        </div>\n                    </div>\n                ))}\n            </div>\n            <BusyModal show={deleting} title=\"Deleting Images\">\n                Please wait while we delete all images...\n            </BusyModal>\n        </div>\n    );\n};\n","export interface DBConfig {\n    dbName: string;\n    storeName: string;\n};\n\nexport class KVStore<T> {\n    private dbConfig: DBConfig;\n    private db: IDBDatabase | null = null;\n\n    constructor(dbConfig: DBConfig) {\n        this.dbConfig = dbConfig;\n    }\n\n    private async createDB(): Promise<IDBDatabase> {\n        return new Promise((resolve, reject) => {\n            const request = indexedDB.open(this.dbConfig.dbName);\n\n            request.onupgradeneeded = () => {\n                const db = request.result;\n                db.createObjectStore(this.dbConfig.storeName);\n            };\n\n            request.onsuccess = () => {\n                resolve(request.result);\n            };\n\n            request.onerror = () => {\n                reject(request.error);\n            };\n        });\n    }\n\n    private async getDB(): Promise<IDBDatabase> {\n        if (!this.db) {\n            this.db = await this.createDB();\n        }\n        return this.db;\n    }\n\n\n    async getItem(key: string): Promise<T | null> {\n        const db = await this.getDB();\n\n        return new Promise((resolve, reject) => {\n            const transaction = db.transaction(this.dbConfig.storeName);\n            const store = transaction.objectStore(this.dbConfig.storeName);\n            const request = store.get(key);\n\n            request.onsuccess = () => {\n                resolve(request.result);\n            };\n\n            request.onerror = () => {\n                resolve(null);\n            };\n        });\n    }\n\n    async setItem(key: string, value: T): Promise<void> {\n        const db = await this.getDB();\n\n        return new Promise((resolve, reject) => {\n            const transaction = db.transaction(\n                this.dbConfig.storeName,\n                \"readwrite\"\n            );\n            const store = transaction.objectStore(this.dbConfig.storeName);\n            const request = store.put(value, key);\n\n            request.onsuccess = () => {\n                resolve();\n            };\n\n            request.onerror = () => {\n                resolve();\n            };\n        });\n    }\n\n    async deleteItem(key: string): Promise<void> {\n        const db = await this.getDB();\n\n        return new Promise((resolve, reject) => {\n            const transaction = db.transaction(\n                this.dbConfig.storeName,\n                \"readwrite\"\n            );\n            const store = transaction.objectStore(this.dbConfig.storeName);\n            const request = store.delete(key);\n\n            request.onsuccess = () => {\n                resolve();\n            };\n\n            request.onerror = () => {\n                resolve();\n            };\n        });\n    }\n}\n","// V2 page\nimport React, { FC, useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport Dropdown from \"react-bootstrap/Dropdown\";\nimport { useParams, useHistory, Link } from \"react-router-dom\";\nimport moment from \"moment\";\nimport ScrollToTop from \"react-scroll-to-top\";\nimport { AIBrushApi } from \"../client\";\nimport { CreateImageInput, Image, StatusEnum } from \"../client/api\";\nimport { ImageThumbnail } from \"../components/ImageThumbnail\";\nimport { ImagePrompt, defaultArgs } from \"../components/ImagePrompt\";\nimport {\n    createEncodedThumbnail,\n    encodedImageToBlob,\n    uploadBlob,\n} from \"../lib/imageutil\";\n\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport { ImagePopup } from \"../components/ImagePopup\";\nimport { BusyModal } from \"../components/BusyModal\";\nimport { PendingImagesThumbnail } from \"../components/PendingImagesThumbnail\";\nimport { PendingImages } from \"../components/PendingImages\";\nimport {\n    ApiSocket,\n    NOTIFICATION_IMAGE_DELETED,\n    NOTIFICATION_IMAGE_UPDATED,\n} from \"../lib/apisocket\";\nimport { KVStore } from \"../lib/kvstore\";\nimport { ImagesCache } from \"../lib/imagesCache\";\n\ninterface Props {\n    api: AIBrushApi;\n    apiSocket: ApiSocket;\n    assetsUrl: string;\n}\n\nconst savedImagesCache = new ImagesCache();\n\nexport const SavedImagesPage: FC<Props> = ({ api, apiSocket, assetsUrl }) => {\n    const [creating, setCreating] = useState(false);\n    const [selectedImage, setSelectedImage] = useState<Image | null>(null);\n    const [parentImage, setParentImage] = useState<Image | null>(null);\n\n    const [showPendingImages, setShowPendingImages] = useState(false);\n\n    const [images, setImages] = useState<Array<Image>>([]);\n    const [err, setErr] = useState<string | null>(null);\n    const [hasMore, setHasMore] = useState<boolean>(true);\n    const [search, setSearch] = useState<string>(\"\");\n    const [searchDebounce, setSearchDebounce] = useState<string>(\"\");\n\n    const [bulkDeleteSelecting, setBulkDeleteSelecting] = useState(false);\n    const [bulkDeleting, setBulkDeleting] = useState(false);\n    const [bulkDeleteIds, setBulkDeleteIds] = useState<{\n        [key: string]: boolean;\n    }>({});\n\n    const [censorNSFW, setCensorNSFW] = useState(true);\n\n    const { id } = useParams<{ id?: string }>();\n    const history = useHistory();\n\n    useEffect(() => {\n        let handle = setTimeout(() => {\n            setSearch(searchDebounce);\n        }, 500);\n        return () => {\n            clearTimeout(handle);\n        };\n    }, [searchDebounce]);\n\n    useEffect(() => {\n        if (id) {\n            // check if the image is already loaded\n            const image = images.find((image) => image.id === id);\n            if (image) {\n                setSelectedImage(image);\n            }\n            // refresh\n            api.getImage(id).then((image) => {\n                setSelectedImage(image.data);\n            });\n        } else {\n            setSelectedImage(null);\n        }\n    }, [id]);\n\n    const onSubmit = async (input: CreateImageInput) => {\n        setCreating(true);\n        setParentImage(null);\n        setErr(null);\n        window.scrollTo(0, 0);\n        try {\n            await api.createImage(input);\n        } catch (e: any) {\n            console.error(e);\n            setErr(\"Error creating image\");\n        } finally {\n            setCreating(false);\n        }\n    };\n\n    const onEditNewImage = async (input: CreateImageInput) => {\n        setCreating(true);\n        setParentImage(null);\n        setErr(null);\n        window.scrollTo(0, 0);\n        try {\n            const encodedImage = input.encoded_image!;\n            const encodedThumbnail = await createEncodedThumbnail(encodedImage);\n            const newImages = await api.createImage({\n                ...input,\n                encoded_image: undefined,\n            });\n            if (newImages.data.images) {\n                const image = newImages.data.images![0];\n                const uploadUrls = await api.getImageUploadUrls(image.id);\n                // convert base64 encoded image to binary to upload as image/png with axios\n                const blob = encodedImageToBlob(encodedImage);\n                const thumbnailBlob = encodedImageToBlob(encodedThumbnail);\n                const imagePromise = uploadBlob(\n                    uploadUrls.data.image_url!,\n                    blob\n                );\n                const thumbnailPromise = uploadBlob(\n                    uploadUrls.data.thumbnail_url!,\n                    thumbnailBlob\n                );\n                await Promise.all([imagePromise, thumbnailPromise]);\n\n                history.push(`/image-editor/${image.id}`);\n            }\n        } catch (e: any) {\n            console.error(e);\n            setErr(\"Error creating image\");\n        } finally {\n            setCreating(false);\n        }\n    };\n\n    const onNSFW = (image: Image, nsfw: boolean) => {\n        api.updateImage(image.id, { nsfw }).then((res) => {\n            setImages((images) => {\n                return images.map((i) => {\n                    if (i.id === image.id) {\n                        return res.data;\n                    }\n                    return i;\n                });\n            });\n            setSelectedImage(res.data);\n        });\n    };\n\n    useEffect(() => {\n        if (!api) {\n            return;\n        }\n        const loadImages = async () => {\n            console.log(\"Initial load images\");\n            // clear error\n            setErr(null);\n            setHasMore(true);\n            try {\n                const cursor = moment().add(1, \"minutes\").valueOf();\n                // const resp = await api.listImages(cursor, search, 100, \"desc\");\n                const imagesResult = await savedImagesCache.listImages(\n                    api,\n                    cursor,\n                    search,\n                    100,\n                    \"desc\"\n                );\n                if (imagesResult) {\n                    console.log(\"Initial load images\", imagesResult.length);\n                    setImages(imagesResult.sort(sortImages));\n                }\n                return 0;\n            } catch (err) {\n                setErr(\"Could not load images\");\n                console.error(err);\n            }\n        };\n        loadImages();\n    }, [api, search]);\n\n    useEffect(() => {\n        if (!api) {\n            return;\n        }\n\n        const pollImages = async (images: Array<Image>) => {\n            // clear error\n            setErr(null);\n            // set cursor to max updated_at from images\n            const cursor = images.reduce((max, image) => {\n                return Math.max(max, image.updated_at);\n            }, 0);\n\n            try {\n                const imagesResult = await savedImagesCache.listImages(\n                    api,\n                    cursor + 1,\n                    search,\n                    100,\n                    \"asc\"\n                );\n                if (imagesResult) {\n                    let latestCursor = cursor;\n                    for (let image of imagesResult) {\n                        if (image.updated_at > latestCursor) {\n                            latestCursor = image.updated_at;\n                        }\n                    }\n\n                    // split resp.data.images into \"new\" and \"updated\" lists\n                    // image is \"new\" if it's not in images\n                    const newImages = imagesResult.filter((image) => {\n                        return images.findIndex((i) => i.id === image.id) < 0;\n                    });\n                    const updatedImages = imagesResult.filter((image) => {\n                        return images.findIndex((i) => i.id === image.id) >= 0;\n                    });\n                    setImages((images) => {\n                        const deletedIds: { [key: string]: boolean } = {};\n                        for (let image of newImages) {\n                            if (image.deleted_at) {\n                                deletedIds[image.id] = true;\n                                console.log(\n                                    `Deleting image ${image.id} from list`\n                                );\n                            }\n                        }\n                        for (let image of updatedImages) {\n                            if (image.deleted_at) {\n                                deletedIds[image.id] = true;\n                                console.log(\n                                    `Deleting image ${image.id} from list`\n                                );\n                            }\n                        }\n                        images = images.filter(\n                            (image) => !deletedIds[image.id]\n                        );\n                        return [\n                            ...images.map((image) => {\n                                const updatedImage = updatedImages.find(\n                                    (i) => i.id === image.id\n                                );\n                                if (updatedImage) {\n                                    return updatedImage;\n                                }\n                                return image;\n                            }),\n                            ...newImages.filter((image) => !image.deleted_at),\n                        ].sort(sortImages);\n                    });\n                }\n                return images;\n            } catch (err) {\n                setErr(\"Could not load images\");\n                console.error(err);\n            }\n        };\n\n        // polling is now a fallback for when the websocket connection fails\n        const timerHandle = setInterval(() => {\n            pollImages(images);\n        }, 60 * 1000);\n        return () => {\n            clearInterval(timerHandle);\n        };\n    }, [api, images, search]);\n\n    useEffect(() => {\n        // de-duplicate images by id\n        // first check if there are any duplicates\n        // I know, I should figure out where the duplicates are coming from,\n        // but I'm lazy.\n        const ids = images.map((image) => image.id);\n        const uniqueIds = new Set(ids);\n        if (ids.length !== uniqueIds.size) {\n            setImages((images) => {\n                // there are duplicates\n                const uniqueImages = images.filter((image, index) => {\n                    return ids.indexOf(image.id) === index;\n                });\n                return uniqueImages.sort(sortImages);\n            });\n        }\n    }, [images]);\n\n    useEffect(() => {\n        const onMessage = async (message: string) => {\n            const payload = JSON.parse(message);\n            if (\n                payload.type === NOTIFICATION_IMAGE_UPDATED ||\n                payload.type === NOTIFICATION_IMAGE_DELETED\n            ) {\n                const updatedImage = await api.getImage(payload.id);\n                if (updatedImage.data.temporary) {\n                    return;\n                }\n                setImages((images) => {\n                    const index = images.findIndex(\n                        (image) => image.id === updatedImage.data.id\n                    );\n                    let updatedImages = images;\n                    if (index >= 0) {\n                        updatedImages = images.map((image) => {\n                            if (image.id === updatedImage.data.id) {\n                                return updatedImage.data;\n                            }\n                            return image;\n                        });\n                    } else {\n                        updatedImages = [...images, updatedImage.data];\n                    }\n                    return updatedImages.sort(sortImages);\n                });\n            }\n        };\n        apiSocket.addMessageListener(onMessage);\n        return () => {\n            apiSocket.removeMessageListener(onMessage);\n        };\n    }, [apiSocket]);\n\n    const isPendingOrProcessing = (image: Image) => {\n        return (\n            image.status === StatusEnum.Pending ||\n            image.status === StatusEnum.Processing\n        );\n    };\n\n    const sortImages = (a: Image, b: Image) => {\n        // pending and processing images always come first\n        if (isPendingOrProcessing(a) && !isPendingOrProcessing(b)) {\n            return -1;\n        } else if (!isPendingOrProcessing(a) && isPendingOrProcessing(b)) {\n            return 1;\n        }\n        // if the parent is the same, sort by score descending\n        // otherwise, sort by updated_at\n        if (\n            a.parent === b.parent &&\n            a.params.prompt == b.params.prompt &&\n            a.status !== StatusEnum.Pending &&\n            b.status !== StatusEnum.Pending\n        ) {\n            // if the score is the same, sort by updated_at\n            let aScore = a.score;\n            let bScore = b.score;\n            // working around a bug where negative score was assigned\n            // for an empty negative prompt.\n            if (a.params.prompt!.trim() !== \"\") {\n                aScore = aScore - a.negative_score;\n            }\n            if (b.params.prompt!.trim() !== \"\") {\n                bScore = bScore - b.negative_score;\n            }\n            if (aScore == bScore) {\n                return b.updated_at - a.updated_at;\n            }\n            return bScore - aScore;\n        }\n\n        return b.updated_at - a.updated_at;\n    };\n\n    const onLoadMore = async () => {\n        // get the minimum updated_at from images\n        let minUpdatedAt = moment().valueOf();\n        images.forEach((image) => {\n            minUpdatedAt = Math.min(minUpdatedAt, image.updated_at);\n        });\n        // load images in descending order from updated_at\n        let imagesResult = await savedImagesCache.listImages(\n            api,\n            minUpdatedAt - 1,\n            search,\n            100,\n            \"desc\"\n        );\n        if (imagesResult && imagesResult.length > 0) {\n            // combine images with new images and sort by updated_at descending\n            setImages((images) => {\n                const imagesById = images.reduce((acc, image) => {\n                    acc[image.id] = image;\n                    return acc;\n                }, {} as { [key: string]: Image });\n                imagesResult = (imagesResult || []).filter(\n                    (image) => !imagesById[image.id]\n                );\n                return [...images, ...(imagesResult || [])].sort(sortImages);\n            });\n        } else {\n            setHasMore(false);\n        }\n    };\n\n    const onDelete = async (image: Image) => {\n        try {\n            await api.deleteImage(image.id);\n        } catch (e) {\n            console.error(e);\n            setErr(\"Error deleting image\");\n        }\n    };\n\n    const onFork = async (image: Image) => {\n        history.push({\n            pathname: \"/\",\n            search: `?parent=${image.id}`,\n        });\n    };\n\n    const onEdit = async (image: Image) => {\n        history.push(`/image-editor/${image.id}`);\n    };\n\n    const onThumbnailClicked = (image: Image) => {\n        // setSelectedImage(image);\n        if (bulkDeleteSelecting) {\n            setBulkDeleteIds({\n                ...bulkDeleteIds,\n                [image.id]: !bulkDeleteIds[image.id],\n            });\n        } else {\n            history.push(`/saved/${image.id}`);\n        }\n    };\n\n    const handleCancelFork = () => {\n        setParentImage(null);\n        window.scrollTo(0, 0);\n    };\n\n    const onConfirmBulkDelete = async () => {\n        try {\n            setBulkDeleting(true);\n            // await api.deleteImages(Object.keys(bulkDeleteIds));\n            const promises = Object.keys(bulkDeleteIds).map((id) => {\n                return api.deleteImage(id);\n            });\n            await Promise.all(promises);\n            setImages((images) => {\n                return images.filter((image) => !bulkDeleteIds[image.id]);\n            });\n            setBulkDeleteIds({});\n            setBulkDeleteSelecting(false);\n        } catch (e) {\n            console.error(e);\n            setErr(\"Error deleting images\");\n        } finally {\n            setBulkDeleting(false);\n        }\n    };\n\n    const completedOrSavedImages = images.filter((image) => {\n        return (\n            !image.deleted_at &&\n            (image.status === StatusEnum.Completed ||\n                image.status === StatusEnum.Saved)\n        );\n    });\n\n    const pendingOrProcessingImages = images.filter(\n        (image) =>\n            !image.deleted_at &&\n            (image.status === StatusEnum.Pending ||\n                image.status === StatusEnum.Processing)\n    );\n\n    const pendingImages = pendingOrProcessingImages.filter(\n        (image) => image.status === StatusEnum.Pending\n    );\n\n    const processingImages = pendingOrProcessingImages.filter(\n        (image) => image.status === StatusEnum.Processing\n    );\n\n    return (\n        <>\n            <h1 style={{ fontSize: \"40px\", textAlign: \"left\" }}>\n                Welcome to AiBrush - Saved\n            </h1>\n\n            <div\n                className=\"saved-images\"\n                style={{ marginTop: \"48px\", paddingBottom: \"48px\" }}\n            >\n                <div style={{ textAlign: \"left\" }}>\n                    <div\n                        className=\"input-group\"\n                        style={{ marginBottom: \"16px\" }}\n                    >\n                        <input\n                            style={{}}\n                            value={searchDebounce}\n                            type=\"search\"\n                            className=\"form-control image-search\"\n                            placeholder=\"Search...\"\n                            onChange={(e) => setSearchDebounce(e.target.value)}\n                        />\n\n                        <div\n                            style={{\n                                float: \"right\",\n                            }}\n                        >\n                            {!bulkDeleteSelecting && (\n                                <>\n                                    <button\n                                        style={{ display: \"inline\" }}\n                                        className=\"btn btn-primary image-popup-button\"\n                                        onClick={() =>\n                                            setCensorNSFW(!censorNSFW)\n                                        }\n                                    >\n                                        {!censorNSFW && (\n                                            <i className=\"fas fa-eye\"></i>\n                                        )}\n                                        {censorNSFW && (\n                                            <i className=\"fas fa-eye-slash\"></i>\n                                        )}\n                                    </button>\n                                    <Dropdown\n                                        style={{\n                                            display: \"inline\",\n                                            marginLeft: \"8px\",\n                                        }}\n                                    >\n                                        <Dropdown.Toggle variant=\"danger\">\n                                            <i className=\"fas fa-trash\"></i>\n                                        </Dropdown.Toggle>\n\n                                        <Dropdown.Menu>\n                                            <Dropdown.Item\n                                                onClick={() =>\n                                                    setBulkDeleteSelecting(true)\n                                                }\n                                            >\n                                                Bulk Delete\n                                            </Dropdown.Item>\n                                            <Dropdown.Item\n                                                onClick={() =>\n                                                    history.push(\n                                                        \"/deleted-images\"\n                                                    )\n                                                }\n                                            >\n                                                View Deleted Images\n                                            </Dropdown.Item>\n                                        </Dropdown.Menu>\n                                    </Dropdown>\n                                </>\n                            )}\n                            {bulkDeleteSelecting && (\n                                <>\n                                    <button\n                                        className=\"btn btn-primary image-popup-button\"\n                                        onClick={() => {\n                                            setBulkDeleteSelecting(false);\n                                            setBulkDeleteIds({});\n                                        }}\n                                    >\n                                        Cancel\n                                    </button>\n                                    <button\n                                        style={{ marginLeft: \"8px\" }}\n                                        className=\"btn image-popup-delete-button\"\n                                        onClick={() => {\n                                            onConfirmBulkDelete();\n                                        }}\n                                    >\n                                        Delete\n                                    </button>\n                                </>\n                            )}\n                        </div>\n                    </div>\n                </div>\n                <InfiniteScroll\n                    dataLength={images.length}\n                    next={onLoadMore}\n                    hasMore={hasMore}\n                    loader={\n                        <>\n                            <hr />\n                            <h4>Loading...</h4>\n                        </>\n                    }\n                >\n                    {pendingOrProcessingImages.length > 0 && (\n                        <PendingImagesThumbnail\n                            pendingCount={pendingImages.length}\n                            processingCount={processingImages.length}\n                            onClick={() => {\n                                setShowPendingImages(true);\n                            }}\n                        />\n                    )}\n                    {completedOrSavedImages.map((image) => (\n                        <ImageThumbnail\n                            key={image.id}\n                            image={image}\n                            assetsUrl={assetsUrl}\n                            onClick={onThumbnailClicked}\n                            bulkDelete={\n                                bulkDeleteSelecting && bulkDeleteIds[image.id]\n                            }\n                            censorNSFW={censorNSFW}\n                        />\n                    ))}\n                </InfiniteScroll>\n            </div>\n\n            {selectedImage && (\n                <ImagePopup\n                    assetsUrl={assetsUrl}\n                    image={selectedImage}\n                    onClose={() => history.push(\"/saved\")}\n                    onDelete={(image) => {\n                        onDelete(image);\n                        setImages(images.filter((i) => i.id !== image.id));\n                        history.push(\"/saved\");\n                    }}\n                    onFork={(image) => {\n                        onFork(image);\n                    }}\n                    onEdit={(image) => {\n                        onEdit(image);\n                    }}\n                    onNSFW={onNSFW}\n                    censorNSFW={censorNSFW}\n                />\n            )}\n            <ScrollToTop />\n            <BusyModal show={creating} title=\"Creating images\">\n                <p>Please wait while we create your image.</p>\n            </BusyModal>\n            <BusyModal show={bulkDeleting} title=\"Deleting images\">\n                <p>Please wait while we delete your images.</p>\n            </BusyModal>\n            <PendingImages\n                images={pendingOrProcessingImages}\n                onCancel={() => setShowPendingImages(false)}\n                show={showPendingImages}\n                onDeleteImage={(image) => {\n                    onDelete(image);\n                    setImages(images.filter((i) => i.id !== image.id));\n                }}\n            />\n        </>\n    );\n};\n","\n\n// const imagesCache = new KVStore({\n//     dbName: \"saved-images\",\n//     storeName: \"images\",\n// })\n\nimport { AIBrushApi, Image } from \"../client\";\nimport { KVStore } from \"./kvstore\";\n\nexport class ImagesCache {\n\n    private kvstore: KVStore<Image>;\n\n    constructor() {\n        this.kvstore = new KVStore<Image>({\n            dbName: \"saved-images\",\n            storeName: \"images\",\n        });\n    }\n\n    async listImages(api: AIBrushApi, cursor: number, search: string, limit: number, order: \"asc\" | \"desc\"): Promise<Image[] | undefined> {\n        const resp = await api.listImages(cursor, search, limit, order, \"id,updated_at,deleted_at\");\n        if (!resp.data.images) {\n            return undefined;\n        }\n\n        const result: Image[] = [];\n        const batchGetIds: string[] = [];\n        for (const image of resp.data.images) {\n            if (image.deleted_at) {\n                await this.kvstore.deleteItem(image.id);\n            } else {\n                const savedImage = await this.kvstore.getItem(image.id);\n                if (savedImage && savedImage.updated_at === image.updated_at) {\n                    result.push(savedImage);\n                } else {\n                    batchGetIds.push(image.id);\n                }\n            }\n        }\n        if (batchGetIds.length > 0) {\n            const batchResult = await api.batchGetImages(undefined, {\n                ids: batchGetIds,\n            });\n            if (batchResult.data.images) {\n                for (const image of batchResult.data.images) {\n                    await this.kvstore.setItem(image.id, image);\n                    result.push(image);\n                }\n            }\n        }\n        return result;\n    }\n}","import { useEffect, useState, FC } from \"react\";\nimport loadImage from \"blueimp-load-image\";\nimport {\n    splitImage,\n    mergeTiles,\n    SplitResult,\n    ImageUtilWorker,\n} from \"../lib/imageutil\";\nimport * as uuid from \"uuid\";\n\nexport const TestPage: FC = () => {\n    const [originalImage, setOriginalImage] = useState<string | undefined>();\n    const [upscaledImage, setUpscaledImage] = useState<string | undefined>();\n    const [imageWorker, setImageWorker] = useState<\n        ImageUtilWorker | undefined\n    >();\n\n    useEffect(() => {\n        const imageWorker = new ImageUtilWorker();\n        setImageWorker(imageWorker);\n        return () => {\n            imageWorker.destroy();\n        };\n    }, []);\n\n    const imageDataToCanvas = (imageData: ImageData): HTMLCanvasElement => {\n        const canvas = document.createElement(\"canvas\");\n        canvas.width = imageData.width;\n        canvas.height = imageData.height;\n        const ctx = canvas.getContext(\"2d\");\n        if (!ctx) {\n            throw new Error(\"Could not get canvas context\");\n        }\n        ctx.putImageData(imageData, 0, 0);\n        return canvas;\n    };\n\n    const upscaleImageData = (imageData: ImageData): HTMLCanvasElement => {\n        console.log(\"upscaling image data\", imageData.width, imageData.height);\n        const canvas = document.createElement(\"canvas\");\n        canvas.width = imageData.width * 2;\n        canvas.height = imageData.height * 2;\n        const ctx = canvas.getContext(\"2d\");\n        if (!ctx) {\n            throw new Error(\"Could not get canvas context\");\n        }\n        const image = imageDataToCanvas(imageData);\n        ctx.drawImage(image, 0, 0, canvas.width, canvas.height);\n        return canvas;\n    };\n\n    const onImageSelected = async (\n        event: React.ChangeEvent<HTMLInputElement>\n    ) => {\n        if (!imageWorker) {\n            throw new Error(\"Image worker not initialized\");\n        }\n        const files = event.target.files;\n        if (files && files.length > 0) {\n            loadImage(\n                files[0],\n                async (img) => {\n                    const c = img as HTMLCanvasElement;\n                    const originalImage = c.toDataURL(\"image/png\");\n                    setOriginalImage(originalImage);\n\n                    const ctx = c.getContext(\"2d\");\n                    if (ctx) {\n                        const originalImageData = ctx.getImageData(\n                            0,\n                            0,\n                            c.width,\n                            c.height\n                        );\n                        const splitResult = splitImage(originalImageData);\n                        if (!splitResult) {\n                            setUpscaledImage(originalImage);\n                            return;\n                        }\n                        console.log(\"splitResult\", {\n                            numTilesX: splitResult.numTilesX,\n                            numTilesY: splitResult.numTilesY,\n                            tileSize: splitResult.tileSize,\n                        });\n                        splitResult.tileSize *= 2;\n                        splitResult.imageWidth *= 2;\n                        splitResult.imageHeight *= 2;\n                        for (let x = 0; x < splitResult.numTilesX; x++) {\n                            for (let y = 0; y < splitResult.numTilesY; y++) {\n                                const tile = splitResult.tiles[x][y];\n                                const upscaledTile = upscaleImageData(tile);\n                                const upscaledImageData = upscaledTile\n                                .getContext(\"2d\")!\n                                .getImageData(\n                                    0,\n                                    0,\n                                    upscaledTile.width,\n                                    upscaledTile.height\n                                );\n                                const id = uuid.v4();\n                                const feathered =\n                                    await imageWorker.processRequest({\n                                        id,\n                                        alphaMode: \"none\",\n                                        feather: true,\n                                        width: splitResult.imageWidth,\n                                        height: splitResult.imageHeight,\n                                        pixels: upscaledImageData.data,\n                                        selectionOverlay: {\n                                            x:\n                                                x *\n                                                (splitResult.tileSize - 64),\n                                            y:\n                                                y *\n                                                (splitResult.tileSize - 64),\n                                            width: upscaledTile.width,\n                                            height: upscaledTile.height,\n                                        },\n                                        upscale: true,\n                                        featherWidth: 64,\n                                    });\n\n                                splitResult.tiles[x][y] = new ImageData(feathered.pixels, upscaledTile.width, upscaledTile.height)\n                            }\n                        }\n                        const upscaledImageData = mergeTiles(splitResult);\n                        console.log(\n                            \"upscaled image data size\",\n                            upscaledImageData.width,\n                            upscaledImageData.height\n                        );\n                        const upscaledCanvas =\n                            imageDataToCanvas(upscaledImageData);\n                        const upscaledImage =\n                            upscaledCanvas.toDataURL(\"image/png\");\n                        setUpscaledImage(upscaledImage);\n                    }\n                },\n                { canvas: true }\n            );\n        }\n    };\n\n    return (\n        <div>\n            <input type=\"file\" onChange={onImageSelected} />\n            {originalImage && upscaledImage && (\n                <div>\n                    Original:\n                    <br />\n                    <img src={originalImage} />\n                    <br />\n                    Upscaled:\n                    <br />\n                    <img src={upscaledImage} />\n                </div>\n            )}\n        </div>\n    );\n};\n","import {FC, useEffect, useState} from \"react\";\nimport { AIBrushApi } from \"../client\";\nimport { ApiSocket, NOTIFICATION_CREDITS_UPDATED } from \"../lib/apisocket\";\n\ninterface Props {\n    api: AIBrushApi;\n    apisocket: ApiSocket;\n}\n\n// TODO: restore when refactoring to kudos\n// this component should fetch the credits balance {free_credits, paid_credits} from the server on mount.\n// it should also subscribe to the apisocket to receive updates to the credits balance (NOTIFICATION_CREDITS_UPDATED).\n// display paid credits above, free credits below.\n\nexport const CreditsBalance: FC<Props> = ({api, apisocket}) => {\n    // const [credits, setCredits] = useState({free_credits: 0, paid_credits: 0});\n\n    // useEffect(() => {\n    //     const fetchCredits = async () => {\n    //         const credits = await api.getCredits();\n    //         setCredits(credits.data);\n    //     };\n    //     fetchCredits();\n    //     const pollHandle = setInterval(fetchCredits, 60000);\n\n    //     const onMessage = (message: string) => {\n    //         const data = JSON.parse(message);\n    //         if (data.type === NOTIFICATION_CREDITS_UPDATED) {\n    //             fetchCredits();\n    //         }\n    //     }\n    //     apisocket.addMessageListener(onMessage);\n\n    //     return () => {\n    //         clearInterval(pollHandle);\n    //         apisocket.removeMessageListener(onMessage);\n    //     }\n    // }, [api, apisocket]);\n\n    // return (\n    //     <div>\n    //         <div style={{color: \"#00f0f0\"}}>\n    //             <span>Paid credits: </span>\n    //             <span>{credits.paid_credits}</span>\n    //         </div>\n    //         <div>\n    //             <span>Free credits: </span>\n    //             <span>{credits.free_credits}</span>\n    //         </div>\n    //     </div>\n    // );\n    return <></>;\n};","import React, { useState, useEffect } from \"react\";\nimport * as axios from \"axios\";\nimport { BrowserRouter, Switch, Route, Link } from \"react-router-dom\";\nimport \"./App.css\";\nimport \"./bootstrap.min.css\";\nimport { AIBrushApi, LoginResult, FeatureList } from \"./client/api\";\nimport { LocalImagesStore } from \"./lib/localImagesStore\";\nimport { getConfig } from \"./config\";\nimport { Login } from \"./pages/Login\";\nimport { TokenRefresher } from \"./components/TokenRefresher\";\nimport { Healthchecker } from \"./components/Healthchecker\";\nimport { Admin } from \"./pages/admin/Admin\";\nimport { ImageEditor } from \"./pages/image-editor/ImageEditor\";\nimport { DeletedImages } from \"./pages/DeletedImages\";\n\n// V2 UI\nimport { Homepage } from \"./pages/Homepage\";\nimport { ApiSocket } from \"./lib/apisocket\";\nimport { DiscordLogin } from \"./pages/DiscordLogin\";\nimport { LocalDeletedImages } from \"./pages/LocalDeletedImages\";\nimport { SavedImagesPage } from \"./pages/SavedImagesPage\";\nimport { TestPage } from \"./pages/TestPage\";\nimport { CreditsBalance } from \"./components/CreditsBalance\";\n\nconst config = getConfig();\nconst httpClient = axios.default.create();\nconst client = new AIBrushApi(\n    undefined,\n    localStorage.getItem(\"apiUrl\") || config.apiUrl,\n    httpClient\n);\nconst apiSocket: ApiSocket = new ApiSocket();\nconst localImages = new LocalImagesStore();\n\nfunction updateHttpClient(loginResult: LoginResult) {\n    if (loginResult.accessToken) {\n        httpClient.defaults.headers.common[\n            \"Authorization\"\n        ] = `Bearer ${loginResult.accessToken}`;\n    }\n}\n\nfunction App() {\n    const [credentials, setCredentials] = useState<LoginResult | null>(null);\n    const [assetsUrl, setAssetsUrl] = useState<string>(\"/api/images\");\n    const [isAdmin, setIsAdmin] = useState<boolean>(false);\n    const [features, setFeatures] = useState<FeatureList | null>(null);\n\n    const onLogout = () => {\n        setCredentials(null);\n        localStorage.removeItem(\"credentials\");\n        httpClient.defaults.headers.common[\"Authorization\"] = undefined;\n    };\n\n    const init = async () => {\n        console.log(\"App.init\");\n        await localImages.init();\n        client\n            .getAssetsUrl()\n            .then((result) => setAssetsUrl(result.data.assets_url));\n        client.getFeatures().then((result) => setFeatures(result.data));\n        const storedCredentials = localStorage.getItem(\"credentials\");\n        if (storedCredentials) {\n            // attempt to refresh token\n            try {\n                const credentials = JSON.parse(\n                    storedCredentials\n                ) as LoginResult;\n                updateHttpClient(credentials);\n                const result = await client.refresh({\n                    refreshToken: credentials.refreshToken,\n                });\n                setCredentials(result.data);\n\n                // save to storage\n                localStorage.setItem(\n                    \"credentials\",\n                    JSON.stringify(result.data)\n                );\n                updateHttpClient(result.data);\n                const isAdmin = await client.isAdmin();\n                setIsAdmin(!!isAdmin.data.is_admin);\n                apiSocket.updateToken(result.data.accessToken!);\n                apiSocket.connect();\n            } catch (e) {\n                console.log(e);\n                localStorage.removeItem(\"credentials\");\n            }\n        }\n    };\n\n    const onLogin = async (credentials: LoginResult) => {\n        localStorage.setItem(\"credentials\", JSON.stringify(credentials));\n        setCredentials(credentials);\n        updateHttpClient(credentials);\n        apiSocket.updateToken(credentials.accessToken!);\n        apiSocket.connect();\n    };\n\n    const onCredentialsExpired = () => {\n        onLogout();\n    };\n\n    useEffect(() => {\n        init();\n    }, []);\n\n    return (\n        <div className=\"App\">\n            <TokenRefresher\n                api={client}\n                credentials={credentials as LoginResult}\n                onCredentialsRefreshed={onLogin}\n                onCredentialsExpired={onCredentialsExpired}\n            />\n            <Healthchecker api={client} />\n\n            <BrowserRouter>\n                {/* if credentials are not set, show Login component */}\n                {!credentials && (\n                    <Switch>\n                        <Route path=\"/\" exact={true}>\n                            <Login client={client} onLogin={onLogin} />\n                        </Route>\n                        <Route path=\"/discord-login\">\n                            <DiscordLogin client={client} onLogin={onLogin} />\n                        </Route>\n                        {/* fallback route is login page */}\n                        <Route path=\"*\">\n                            <Login client={client} onLogin={onLogin} />\n                        </Route>\n                    </Switch>\n                )}\n                {credentials && (\n                    <div className=\"container\">\n                        <div className=\"row\">\n                            <div className=\"col-lg-12\">\n                                {/* if credentials are set, show a bootstrap logout button a the far top right corner div */}\n                                {credentials && (\n                                    <>\n                                        <button\n                                            className=\"btn btn-primary top-button\"\n                                            onClick={() => onLogout()}\n                                        >\n                                            {/* font awesome logout icon */}\n                                            <i className=\"fas fa-sign-out-alt\"></i>\n                                        </button>\n                                        {/* saved images */}\n                                        <Link\n                                            className=\"btn btn-primary top-button\"\n                                            to=\"/saved\"\n                                        >\n                                            {/* font awesome save icon */}\n                                            <i className=\"fas fa-save\"></i>\n                                        </Link>\n                                        {/* home button */}\n                                        <Link\n                                            className=\"btn btn-primary top-button\"\n                                            to=\"/\"\n                                        >\n                                            {/* font awesome home icon */}\n                                            <i className=\"fas fa-home\"></i>\n                                        </Link>\n                                        {/* Link to discord */}\n                                        <a\n                                            className=\"btn btn-primary top-button\"\n                                            href=\"https://discord.gg/HYcFpDeqKJ\"\n                                            target=\"_blank\"\n                                        >\n                                            {/* font awesome discord icon */}\n                                            <i className=\"fab fa-discord\"></i>\n                                        </a>\n                                        {/* link to github */}\n                                        <a\n                                            className=\"btn btn-primary top-button\"\n                                            href=\"https://github.com/wolfgangmeyers/aibrush-2\"\n                                            target=\"_blank\"\n                                        >\n                                            {/* font awesome github icon */}\n                                            <i className=\"fab fa-github\"></i>\n                                        </a>\n                                    </>\n                                )}\n                            </div>\n                            <div\n                                className=\"col-lg-12\"\n                                style={{ textAlign: \"right\" }}\n                            >\n                                <CreditsBalance\n                                    api={client}\n                                    apisocket={apiSocket}\n                                />\n                            </div>\n                        </div>\n\n                        {/* if credentials are set, show the rest of the app */}\n\n                        <Switch>\n                            <Route path=\"/\" exact={true}>\n                                {/* <MainMenu isAdmin={isAdmin} /> */}\n                                <Homepage\n                                    api={client}\n                                    apiSocket={apiSocket}\n                                    assetsUrl={assetsUrl}\n                                    localImages={localImages}\n                                />\n                            </Route>\n                            <Route path=\"/stripe-success\">\n                                <Homepage\n                                    api={client}\n                                    apiSocket={apiSocket}\n                                    assetsUrl={assetsUrl}\n                                    localImages={localImages}\n                                    paymentStatus=\"success\"\n                                />\n                            </Route>\n                            <Route path=\"/stripe-cancel\">\n                                <Homepage\n                                    api={client}\n                                    apiSocket={apiSocket}\n                                    assetsUrl={assetsUrl}\n                                    localImages={localImages}\n                                    paymentStatus=\"canceled\"\n                                />\n                            </Route>\n                            <Route path=\"/images/:id\">\n                                <Homepage\n                                    api={client}\n                                    apiSocket={apiSocket}\n                                    assetsUrl={assetsUrl}\n                                    localImages={localImages}\n                                />\n                            </Route>\n                            <Route path=\"/saved\" exact={true}>\n                                {/* <MainMenu isAdmin={isAdmin} /> */}\n                                <SavedImagesPage\n                                    api={client}\n                                    apiSocket={apiSocket}\n                                    assetsUrl={assetsUrl}\n                                />\n                            </Route>\n                            <Route path=\"/saved/:id\" exact={true}>\n                                {/* <MainMenu isAdmin={isAdmin} /> */}\n                                <SavedImagesPage\n                                    api={client}\n                                    apiSocket={apiSocket}\n                                    assetsUrl={assetsUrl}\n                                />\n                            </Route>\n                            <Route path=\"/image-editor/:id\">\n                                <ImageEditor\n                                    api={client}\n                                    apisocket={apiSocket}\n                                    assetsUrl={assetsUrl}\n                                    localImages={localImages}\n                                />\n                            </Route>\n                            <Route path=\"/deleted-images\">\n                                <DeletedImages\n                                    api={client}\n                                    assetsUrl={assetsUrl}\n                                />\n                            </Route>\n                            <Route path=\"/local-deleted-images\">\n                                <LocalDeletedImages localImages={localImages} />\n                            </Route>\n                            <Route path=\"/testpage\">\n                                <TestPage />\n                            </Route>\n                            {isAdmin && (\n                                <>\n                                    <Route path=\"/admin\">\n                                        <Admin api={client} />\n                                    </Route>\n                                </>\n                            )}\n                        </Switch>\n                        <div\n                            // style={{ marginTop: \"100px\", padding: \"50px\" }}\n\n                            // use position:fixed to make the footer stick to the bottom of the page\n                            style={{\n                                position: \"fixed\",\n                                bottom: \"0\",\n                                left: \"0\",\n                                width: \"100%\",\n                                height: \"50px\",\n                                paddingTop: \"16px\",\n                                backgroundColor: \"#000000\",\n                            }}\n                        >\n                            {/* show external popout pages to terms and privacy policy, if they are present in the features */}\n                            {features && features.privacy_uri && (\n                                <a href={features.privacy_uri} target=\"_blank\">\n                                    Privacy Policy\n                                </a>\n                            )}\n                            {features && features.terms_uri && (\n                                <a\n                                    href={features.terms_uri}\n                                    target=\"_blank\"\n                                    style={{ marginLeft: \"20px\" }}\n                                >\n                                    Terms of Service\n                                </a>\n                            )}\n                            {/* link to mail to admin@aibrush.art */}\n                            <a\n                                href=\"mailto:admin@aibrush.art\"\n                                style={{ marginLeft: \"20px\" }}\n                            >\n                                Contact\n                            </a>\n                            <span\n                                style={{ float: \"right\", marginRight: \"50px\" }}\n                            >\n                                Powered by the{\" \"}\n                                <a\n                                    href=\"https://stablehorde.net/\"\n                                    target=\"_blank\"\n                                >\n                                    Stable Horde\n                                </a>\n                            </span>\n                        </div>\n                    </div>\n                )}\n            </BrowserRouter>\n        </div>\n    );\n}\n\nexport default App;\n","export interface Config {\n    apiUrl: string;\n}\n\nexport function getConfig(): Config {\n    // if (process.env.REACT_APP_ENV === \"prod\") {\n    //     return {\n    //         apiUrl: \"https://aibrush.ngrok.io\"\n    //     };\n    // } else if (process.env.REACT_APP_ENV === \"alt\") {\n    //     return {\n    //         apiUrl: \"\"\n    //     };\n    // } else {\n    //     return {\n    //         apiUrl: \"http://localhost:3000\"\n    //     };\n    // }\n    return {\n        apiUrl: \"\"\n    };\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import { Renderer } from \"./renderer\";\n\nexport class ZoomHelper {\n\n    private startTouches: React.TouchList | null;\n    private startZoom = 1;\n    private startOffsetX = 0;\n    private startOffsetY = 0;\n\n    constructor(private renderer: Renderer) {\n        this.startTouches = null;\n    }\n\n    onWheel(event: WheelEvent) {\n        const originalZoom = this.renderer.getZoom();\n        let zoom = this.renderer.getZoom();\n        let offsetX = this.renderer.getOffsetX();\n        let offsetY = this.renderer.getOffsetY();\n\n        let canvasPoint = this.translateMouseToCanvasCoordinates(\n            event.offsetX,\n            event.offsetY\n        );\n        // console.log(\"x: \" + x + \", y: \" + y);\n        \n        if (event.deltaY < 0) {\n            zoom += 0.1 * zoom;\n        } else {\n            zoom -= 0.1 * zoom;\n        }\n        zoom = Math.max(0.1, Math.min(zoom, 8.0));\n\n        let xDiff = canvasPoint.x - -offsetX;\n        let yDiff = canvasPoint.y - -offsetY;\n\n        // offsetX = canvasPoint.x - xDiff * (zoom / originalZoom);\n        // offsetY = canvasPoint.y - yDiff * (zoom / originalZoom);\n        offsetX -= xDiff * (zoom / originalZoom) - xDiff;\n        offsetY -= yDiff * (zoom / originalZoom) - yDiff;\n\n        this.renderer.updateZoomAndOffset(zoom, offsetX, offsetY);\n    }\n\n    onPan(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        let movementX = event.movementX;\n        let movementY = event.movementY;\n        // translate offset to canvas coordinates\n        let rect = (\n            event.target as HTMLCanvasElement\n        ).getBoundingClientRect();\n        movementX = (movementX / rect.width) * 512;\n        movementY = (movementY / rect.height) * 512;\n\n        let zoom = this.renderer.getZoom();\n        let offsetX = this.renderer.getOffsetX();\n        let offsetY = this.renderer.getOffsetY();\n\n        offsetX += movementX / zoom;\n        offsetY += movementY / zoom;\n\n        this.renderer.updateZoomAndOffset(zoom, offsetX, offsetY);\n    }\n\n    onTouchStart(event: React.TouchEvent<HTMLCanvasElement>) {\n        if (event.touches.length === 2) {\n            this.startTouches = event.touches;\n            this.startZoom = this.renderer.getZoom();\n            this.startOffsetX = this.renderer.getOffsetX();\n            this.startOffsetY = this.renderer.getOffsetY();\n        }\n    }\n\n    onTouchMove(event: React.TouchEvent<HTMLCanvasElement>) {\n        if (this.startTouches) {\n            const canvasRect = this.renderer.getCanvas().getBoundingClientRect();\n            const startTouch1 = this.startTouches[0];\n            const startTouch2 = this.startTouches[1];\n            const touch1 = event.touches[0];\n            const touch2 = event.touches[1];\n\n            const startDistance = Math.sqrt(\n                Math.pow(startTouch1.clientX - startTouch2.clientX, 2) +\n                Math.pow(startTouch1.clientY - startTouch2.clientY, 2)\n            );\n            const distance = Math.sqrt(\n                Math.pow(touch1.clientX - touch2.clientX, 2) +\n                Math.pow(touch1.clientY - touch2.clientY, 2)\n            );\n            const zoom = this.startZoom * (distance / startDistance);\n\n            const startCenterX = (startTouch1.clientX + startTouch2.clientX) / 2;\n            const startCenterY = (startTouch1.clientY + startTouch2.clientY) / 2;\n            const centerX = (touch1.clientX + touch2.clientX) / 2;\n            const centerY = (touch1.clientY + touch2.clientY) / 2;\n\n            const startCanvasPoint = this.translateMouseToCanvasCoordinates(\n                startCenterX - canvasRect.left,\n                startCenterY - canvasRect.top\n            );\n            const canvasPoint = this.translateMouseToCanvasCoordinates(\n                centerX - canvasRect.left,\n                centerY - canvasRect.top\n            );\n\n            let offsetX = this.startOffsetX;\n            let offsetY = this.startOffsetY;\n\n            let xDiff = canvasPoint.x - startCanvasPoint.x;\n            let yDiff = canvasPoint.y - startCanvasPoint.y;\n\n            let xDiff2 = canvasPoint.x - -this.renderer.getOffsetX();\n            let yDiff2 = canvasPoint.y - -this.renderer.getOffsetY();\n\n            offsetX -= xDiff2 * (zoom / this.startZoom) - xDiff2 - (xDiff * (distance / startDistance));\n            offsetY -= yDiff2 * (zoom / this.startZoom) - yDiff2 - (yDiff * (distance / startDistance));\n\n            this.renderer.updateZoomAndOffset(zoom, offsetX, offsetY);\n        }\n    }\n\n    onTouchEnd(event: React.TouchEvent<HTMLCanvasElement>) {\n        this.startTouches = null;\n    }\n\n\n    translateMouseToCanvasCoordinates(mouseX: number, mouseY: number, zoom?: number, offsetX?: number, offsetY?: number) {\n        let x = mouseX;\n        let y = mouseY;\n        // adjust for zoom\n        zoom = zoom || this.renderer.getZoom();\n        offsetX = offsetX || this.renderer.getOffsetX();\n        offsetY = offsetY || this.renderer.getOffsetY();\n        x = x / zoom;\n        y = y / zoom;\n\n        // translate offset to canvas coordinates\n        let rect = this.renderer.getCanvas().getBoundingClientRect();\n\n        // x = (x / rect.width) * this.renderer.getWidth();\n        // y = (y / rect.height) * this.renderer.getHeight();\n\n        x = (x / rect.width) * 512;\n        y = (y / rect.height) * 512;\n\n        x = Math.round(x - offsetX);\n        y = Math.round(y - offsetY);\n\n        return { x: x, y: y };\n    }\n\n    translateCanvasToMouseCoordinates(x: number, y: number, zoom?: number, offsetX?: number, offsetY?: number) {\n        zoom = zoom || this.renderer.getZoom();\n        offsetX = offsetX || this.renderer.getOffsetX();\n        offsetY = offsetY || this.renderer.getOffsetY();\n        x = x + offsetX;\n        y = y + offsetY;\n        x = x * zoom;\n        y = y * zoom;\n\n        // translate offset to canvas coordinates\n        let rect = this.renderer.getCanvas().getBoundingClientRect();\n        x = Math.round((x / this.renderer.getWidth()) * rect.width);\n        y = Math.round((y / this.renderer.getHeight()) * rect.height);\n\n        return { x: x, y: y };\n    }\n}","import React from \"react\";\nimport { Renderer } from \"./renderer\";\nimport { ZoomHelper } from \"./zoomHelper\";\n\nexport interface Tool {\n    name: string;\n    getArgs(): any;\n    updateArgs(args: any): void;\n    onMouseDown(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>): void;\n    onMouseMove(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>): void;\n    onMouseUp(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>): void;\n    onMouseLeave(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>): void;\n\n    onTouchStart(event: React.TouchEvent<HTMLCanvasElement>): void;\n    onTouchMove(event: React.TouchEvent<HTMLCanvasElement>): void;\n    onTouchEnd(event: React.TouchEvent<HTMLCanvasElement>): void;\n\n    onKeyDown(event: KeyboardEvent): void;\n    onKeyUp(event: KeyboardEvent): void;\n    onWheel(event: WheelEvent): void;\n    destroy(): boolean;\n    onShowSelectionControls(listener: (show: boolean) => void): void;\n    select(direction: \"left\" | \"right\"): void;\n    onSaveImage(listener: (encodedImage: string) => void): void;\n}\n\nexport class BaseTool implements Tool {\n    saveListener?: (encodedImage: string, args?: any) => void = () => {};\n\n    private touchHandle: number | undefined;\n\n    readonly zoomHelper: ZoomHelper;\n\n    private _pinchZooming = false;\n    private _panning = false;\n\n    constructor(readonly renderer: Renderer, readonly name: string) {\n        this.zoomHelper = new ZoomHelper(renderer);\n    }\n\n    getArgs(): any {\n        return JSON.parse(\n            localStorage.getItem(`tool_args_${this.name}`) || \"{}\"\n        );\n    }\n    updateArgs(args: any) {\n        localStorage.setItem(`tool_args_${this.name}`, JSON.stringify(args));\n    }\n    onMouseDown(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        if (event.button === 1) {\n            this._panning = true;\n        }\n    }\n    onMouseMove(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        if (this._panning) {\n            this.zoomHelper.onPan(event);\n        }\n        let { x, y } = this.zoomHelper.translateMouseToCanvasCoordinates(\n            event.nativeEvent.offsetX,\n            event.nativeEvent.offsetY\n        );\n        this._updateCursor(x, y);\n    }\n\n    private _updateCursor(x: number, y: number) {\n        this.renderer.setCursor({\n            color: \"white\",\n            radius: 10,\n            type: \"crosshairs\",\n            x,\n            y,\n        });\n    }\n\n    onMouseUp(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        if (this._panning) {\n            this._panning = false;\n        }\n    }\n    onMouseLeave(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {}\n\n    onTouchStart(event: React.TouchEvent<HTMLCanvasElement>) {\n        if (this.touchHandle) {\n            window.clearTimeout(this.touchHandle);\n        }\n        const touches: React.Touch[] = [];\n        // make a deep copy so that the values live past the delay\n        for (let i = 0; i < event.touches.length; i++) {\n            const touch = event.touches[i];\n            touches.push({\n                identifier: touch.identifier,\n                clientX: touch.clientX,\n                clientY: touch.clientY,\n                pageX: touch.pageX,\n                pageY: touch.pageY,\n                screenX: touch.screenX,\n                screenY: touch.screenY,\n                target: null,\n            } as any);\n        }\n        event = {\n            touches,\n        } as any;\n        this.touchHandle = window.setTimeout(() => {\n            this.touchHandle = undefined;\n            if (event.touches.length === 2) {\n                this._pinchZooming = true;\n                this.zoomHelper.onTouchStart(event);\n            } else {\n                const rect = this.renderer.getCanvas().getBoundingClientRect();\n                const touch = event.touches[0];\n                if (touch) {\n                    this.onMouseDown({\n                        type: \"touch\",\n                        button: 0,\n                        nativeEvent: {\n                            offsetX: touch.clientX - rect.left,\n                            offsetY: touch.clientY - rect.top,\n                        },\n                    } as any);\n                }\n            }\n        }, 200);\n    }\n    onTouchMove(event: React.TouchEvent<HTMLCanvasElement>) {\n        if (event.touches.length === 2) {\n            this.zoomHelper.onTouchMove(event);\n        } else {\n            const rect = this.renderer.getCanvas().getBoundingClientRect();\n            const touch = event.touches[0];\n            if (touch) {\n                this.onMouseMove({\n                    type: \"touch\",\n                    button: 0,\n                    nativeEvent: {\n                        offsetX: touch.clientX - rect.left,\n                        offsetY: touch.clientY - rect.top,\n                    },\n                } as any);\n            }\n        }\n    }\n    onTouchEnd(event: React.TouchEvent<HTMLCanvasElement>) {\n        if (this._pinchZooming) {\n            this._pinchZooming = false;\n            this.zoomHelper.onTouchEnd(event);\n        } else {\n            this.onMouseUp({\n                button: 0,\n                type: \"touch\",\n            } as any);\n        }\n    }\n\n    onKeyDown(event: KeyboardEvent) {}\n    onKeyUp(event: KeyboardEvent) {}\n    onWheel(event: WheelEvent) {\n        this.zoomHelper.onWheel(event);\n    }\n    destroy(): boolean {\n        return true;\n    }\n    onShowSelectionControls(listener: (show: boolean) => void) {}\n    select(direction: \"left\" | \"right\") {}\n    onSaveImage(listener: (encodedImage: string) => void) {\n        this.saveListener = listener;\n    }\n}\n","export class RecentList {\n    private key: string;\n    private listSize: number;\n\n    constructor(key: string, listSize: number) {\n        this.key = key;\n        this.listSize = listSize;\n    }\n\n    private getRecentItems(): string[] {\n        const modelsJson = localStorage.getItem(this.key);\n        return modelsJson ? JSON.parse(modelsJson) : [];\n    }\n\n    private saveRecentItems(models: string[]): void {\n        localStorage.setItem(this.key, JSON.stringify(models));\n    }\n\n    addItem(model: string): void {\n        const recentModels = this.getRecentItems();\n        const modelIndex = recentModels.indexOf(model);\n\n        if (modelIndex !== -1) {\n            recentModels.splice(modelIndex, 1);\n        }\n\n        recentModels.unshift(model);\n\n        if (recentModels.length > this.listSize) {\n            recentModels.pop();\n        }\n\n        this.saveRecentItems(recentModels);\n    }\n\n    getItems(): string[] {\n        return this.getRecentItems();\n    }\n}\n\nexport const recentModels = new RecentList(\"recent-models\", 20);\nexport const recentNegativePrompts = new RecentList(\"recent-negative-prompts\", 20);\nexport const recentPrompts = new RecentList(\"recent-positive-prompts\", 20);","\nexport const NOTIFICATION_IMAGE_UPDATED = \"image_updated\";\nexport const NOTIFICATION_IMAGE_DELETED = \"image_deleted\";\nexport const NOTIFICATION_PENDING_IMAGE = \"pending_image\";\nexport const NOTIFICATION_CREDITS_UPDATED = \"credits_updated\";\n\ntype MessageListener = (message: string) => void;\n\nexport class ApiSocket {\n    private client?: WebSocket;\n    private accessToken?: string\n    // private messageListener?: (message: string) => void;\n    private messageListeners: MessageListener[] = [];\n\n    updateToken(accessToken: string) {\n        this.accessToken = accessToken;\n    }\n\n    // onMessage(listener?: (message: string) => void) {\n    //     this.messageListener = listener;\n    // }\n\n    addMessageListener(listener: MessageListener) {\n        this.messageListeners.push(listener);\n    }\n\n    removeMessageListener(listener: MessageListener) {\n        this.messageListeners = this.messageListeners.filter(l => l !== listener);\n    }\n\n    connect() {\n        if (!this.accessToken) {\n            throw new Error(\"unauthenticated\");\n        }\n        if (this.client) {\n            // will reconnect in one second automatically\n            // this is called every time the auth refreshes\n            this.client.close();\n            return;\n        }\n        // let host = window.location.host;\n        let host = \"www.aibrush.art\";\n        let protocol = \"wss\";\n        // if (host.includes(\"localhost\")) {\n        //   host = \"localhost:3000\";\n        //   protocol = \"ws\";\n        // }\n        this.client = new WebSocket(`${protocol}://${host}`);\n        this.client.onerror = err => console.error(err);\n        this.client.onopen = () => {\n            console.log(\"websocket connected\");\n            this.client!.send(this.accessToken!);\n        }\n        this.client.onmessage = evt => {\n            console.log(\"server push\", evt.data);\n            for (const listener of this.messageListeners) {\n                listener(evt.data as string);\n            }\n        }\n        this.client.onclose = () => {\n          console.log(\"websocket closed\");\n          this.client = undefined;\n          setTimeout(() => this.connect(), 500);\n        }\n    }\n}\n","import { FC } from \"react\";\n\ninterface Props {\n    imagesCost: number;\n}\n\n//TODO: restore when doing kudos cost calculation\nexport const CostIndicator: FC<Props> = ({ imagesCost }) => {\n    return (\n        // <div style={{ textAlign: \"left\" }}>\n        //     <span className=\"helptext\" style={{ color: \"#00f0f0\" }}>\n        //         Cost: {imagesCost} credit{imagesCost > 1 ? \"s\" : \"\"}&nbsp;\n        //         <i\n        //             className=\"fas fa-info-circle\"\n        //             style={{ cursor: \"pointer\" }}\n        //             onClick={() =>\n        //                 alert(\n        //                     \"The cost is based on the image count and the size of each image. A single 512x512 image costs 1 credit.\"\n        //                 )\n        //             }\n        //         ></i>\n        //     </span>\n        // </div>\n        <></>\n    );\n};\n","import React, { FC, useEffect, useState } from \"react\";\nimport moment from \"moment\";\nimport { Image, StatusEnum } from \"../client/api\";\nimport { LocalImage } from \"../lib/localImagesStore\";\n\ninterface Props {\n    assetsUrl: string;\n    image: LocalImage;\n    censorNSFW: boolean;\n    bulkDelete?: boolean;\n    onClick?: (image: Image) => void;\n}\n\nexport const ImageThumbnail: FC<Props> = ({ assetsUrl, image, censorNSFW, bulkDelete, onClick }) => {\n    const src = `${assetsUrl}/${image.id}.thumbnail.png?updated_at=${image.updated_at}`;\n    const [retry, setRetry] = useState(\"\");\n\n    useEffect(() => {\n        // This is to help deal with eventual consistency from S3.\n        // if image.updated_at (unix timestamp in milliseconds) is less than a minute ago, try to reload the image\n        if (moment().diff(moment(image.updated_at), \"minutes\") < 1) {\n            setRetry(\"\");\n            const t = setTimeout(() => {\n                setRetry(\"&retry\")\n            }, 3000);\n            return () => clearTimeout(t);\n        }\n    }, [image.id, image.updated_at])\n\n    let label = image.label;\n    if (image.label === \"\") {\n        label = image.params.prompt || \"\";\n    }\n    if (label.indexOf(\",\") !== -1) {\n        label = label.substring(0, label.indexOf(\",\"));\n    }\n    \n    let className = \"image-thumbnail\";\n    if (bulkDelete) {\n        className += \" bulk-delete\";\n    }\n\n    let backgroundImage = `url(${src}${retry}), url(/images/default.png)`;\n    if (image.imageData) {\n        backgroundImage = `url(${image.imageData}), url(/images/default.png)`;\n    }\n\n    return (\n        <div\n            className={className}\n            style={{\n                backgroundImage,\n                backgroundRepeat: \"no-repeat\",\n                backgroundPosition: \"center\",\n                filter: (image.nsfw && censorNSFW) ? \"blur(8px)\" : undefined,\n            }}\n            onClick={() => onClick && onClick(image)}\n        >\n            {!bulkDelete && <div className=\"image-thumbnail-label\">\n                {label}\n            </div>}\n\n            {bulkDelete && <div className=\"image-thumbnail-label\">\n                <input type=\"checkbox\" style={{\n                    width: \"20px\",\n                    height: \"20px\",\n                    marginLeft: \"16px\",\n                    marginTop: \"16px\",\n                }} checked readOnly />\n            </div>}\n\n            {image.status === StatusEnum.Pending && <div className=\"image-thumbnail-pending\">\n                <i style={{marginTop: \"20px\"}} className=\"fa fa-hourglass-half\"></i>\n            </div>}\n            {\n                image.status === StatusEnum.Processing && <div className=\"image-thumbnail-pending\">\n                    <i style={{marginTop: \"20px\"}} className=\"fa fa-cog fa-spin\"></i>\n                </div>\n            }\n        </div>\n    );\n};\n","\nexport const supportedModels = [\n    \"Epic Diffusion\",\n    \"Rev Animated\",\n    \"Anything v3\",\n    \"Hentai Diffusion\",\n    \"Ranma Diffusion\",\n    \"URPM\",\n    \"Deliberate\",\n    \"GTA5 Artwork Diffusion\",\n    \"ChilloutMix\",\n    \"Realism Engine\",\n    \"AIO Pixel Art\",\n    \"Microworlds\",\n    \"Microchars\",\n    \"OrbAI\",\n    \"App Icon Diffusion\",\n];\n\n// canny, hed, depth, normal, openpose, seg, scribble, fakescribbles, hough\nexport const controlnetTypes = [\n    \"canny\",\n    \"hed\",\n    \"depth\",\n    \"normal\",\n    \"openpose\",\n    \"seg\",\n    \"scribble\",\n    \"fakescribbles\",\n    \"hough\",\n]","import { FC, useState, FormEvent } from \"react\";\nimport { Form, FormGroup, FormControl, FormText, FormCheck } from \"react-bootstrap\";\n\ninterface Props {\n    seed: string;\n    setSeed: (seed: string) => void;\n}\n\nexport const SeedInput: FC<Props> = ({seed, setSeed}) => {\n    const [useCustomSeed, setUseCustomSeed] = useState(false);\n\n    const onChangeCustomSeed = () => {\n        setUseCustomSeed(!useCustomSeed);\n        if (useCustomSeed) {\n            setSeed(\"\");\n        } else {\n            // set seed to a random number\n            setSeed(Math.floor(Math.random() * 1000000000).toString());\n        }\n    };\n\n    return (\n        <Form>\n            <FormGroup>\n                <FormCheck \n                    type=\"checkbox\"\n                    label=\"Use Custom Seed\"\n                    checked={useCustomSeed}\n                    onChange={(e) => onChangeCustomSeed()}\n                />\n            </FormGroup>\n\n            {useCustomSeed && (\n                <FormGroup>\n                    <FormControl\n                        type=\"text\"\n                        // value={seed}\n                        // onChange={(e) => setSeed(e.target.value)}\n                        placeholder=\"Enter seed\"\n                        value={seed}\n                        onChange={(e: any) => setSeed(e.target.value)}\n                    />\n                </FormGroup> \n            )}\n        </Form>\n    );\n};\n","import React, { useState } from \"react\";\nimport { InputGroup, FormControl, Dropdown } from \"react-bootstrap\";\n\ninterface TextInputWithHistoryProps {\n    value: string;\n    onChange: (newValue: string) => void;\n    history: string[];\n}\n\nconst TextInputWithHistory: React.FC<TextInputWithHistoryProps> = ({\n    value,\n    onChange,\n    history,\n}) => {\n    const [show, setShow] = useState(false);\n\n    const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        onChange(event.target.value);\n    };\n\n    const handleDropdownSelect = (eventKey: string | null) => {\n        if (eventKey) {\n            onChange(eventKey);\n        }\n        setShow(false);\n    };\n\n    const handleInputClick = () => {\n        setShow(!show);\n    };\n\n    return (\n        <div>\n            <FormControl\n                value={value}\n                onChange={handleInputChange}\n                onClick={handleInputClick}\n                onBlur={() => {\n                    setTimeout(() => setShow(false), 200);\n                }}\n            />\n            <Dropdown show={show} onSelect={handleDropdownSelect}>\n                <Dropdown.Toggle\n                    variant=\"success\"\n                    id=\"dropdown-basic\"\n                    style={{ height: \"0px\", padding: \"0px\", visibility: \"hidden\", position: \"absolute\" }}\n                />\n                <Dropdown.Menu style={{width: \"100%\", overflow: \"hidden\"}}>\n                    {history.map((item, index) => (\n                        <Dropdown.Item eventKey={item} key={index}>\n                            {item}\n                        </Dropdown.Item>\n                    ))}\n                </Dropdown.Menu>\n            </Dropdown>\n        </div>\n    );\n};\n\nexport default TextInputWithHistory;\n","import React, { FC, useEffect, useState } from \"react\";\nimport { CreateImageInput, StatusEnum, Image, AIBrushApi } from \"../client\";\nimport {\n    aspectRatios,\n    DEFAULT_ASPECT_RATIO,\n    getClosestAspectRatio,\n    AspectRatio,\n} from \"../lib/aspecRatios\";\nimport loadImage from \"blueimp-load-image\";\nimport { AspectRatioSelector } from \"./AspectRatioSelector\";\nimport { getUpscaleLevel } from \"../lib/upscale\";\nimport { resizeEncodedImage } from \"../lib/imageutil\";\nimport { LocalImage } from \"../lib/localImagesStore\";\nimport { controlnetTypes, supportedModels } from \"../lib/supportedModels\";\nimport { SeedInput } from \"./SeedInput\";\nimport ModelSelector from \"./ModelSelector\";\nimport { calculateImagesCost } from \"../lib/credits\";\nimport { CostIndicator } from \"./CostIndicator\";\nimport { recentPrompts, recentNegativePrompts } from \"../lib/recentList\";\nimport TextInputWithHistory from \"./TextInputWithHistory\";\n\ninterface Props {\n    api: AIBrushApi;\n    parent: LocalImage | null;\n    creating: boolean;\n    assetsUrl: string;\n    onSubmit: (input: CreateImageInput) => void;\n    // go straight to editor without variations\n    onEdit: (input: CreateImageInput) => void;\n    onCancel: () => void;\n}\n\nexport function defaultArgs(): CreateImageInput {\n    return {\n        params: {\n            prompt: \"\",\n            negative_prompt: defaultNegativePrompt(),\n            width: 512,\n            height: 512,\n            steps: 20,\n            denoising_strength: 0.75,\n        },\n        label: \"\",\n        encoded_image: \"\",\n        encoded_mask: \"\",\n        model: \"Epic Diffusion\",\n        count: 4,\n    };\n}\n\nfunction defaultNegativePrompt(): string {\n    return recentNegativePrompts.getItems()[0] || \"low quality, distorted, deformed, dull, boring, plain, ugly, noise\";\n}\n\nexport const ImagePrompt: FC<Props> = ({\n    api,\n    parent,\n    creating,\n    assetsUrl,\n    onSubmit,\n    onCancel,\n    onEdit,\n}) => {\n    const [prompt, setPrompt] = useState<string>(\"\");\n    const [negativePrompt, setNegativePrompt] = useState<string>(\n        defaultNegativePrompt()\n    );\n    const [count, setCount] = useState<number>(4);\n    const [variationStrength, setVariationStrength] = useState<number>(0.75);\n    const [aspectRatio, setAspectRatio] =\n        useState<number>(DEFAULT_ASPECT_RATIO);\n    const [parentId, setParentId] = useState<string | null>(null);\n    const [advancedView, setAdvancedView] = useState<boolean>(false);\n    const [encodedImage, setEncodedImage] = useState<string>(\"\");\n    const [model, setModel] = useState<string>(\"Epic Diffusion\");\n\n    const [selectingModel, setSelectingModel] = useState<boolean>(false);\n\n    const [controlnetType, setControlnetType] = useState<string | undefined>();\n    const [cfgScale, setCfgScale] = useState<number>(7.5);\n    const [seed, setSeed] = useState<string>(\"\");\n    const [size, setSize] = useState<number>(1);\n    const defaultAspectRatio = aspectRatios[DEFAULT_ASPECT_RATIO];\n\n    const [aspectRatioDetails, setAspectRatioDetails] = useState<AspectRatio>(\n        aspectRatios[DEFAULT_ASPECT_RATIO]\n    );\n    let [originalWidth, setOriginalWidth] = useState<number>(\n        defaultAspectRatio.width\n    );\n    let [originalHeight, setOriginalHeight] = useState<number>(\n        defaultAspectRatio.height\n    );\n\n    // const aspectRatioDetails = aspectRatios[aspectRatio];\n\n    const resetState = () => {\n        setPrompt(\"\");\n        setNegativePrompt(recentNegativePrompts.getItems()[0] || defaultNegativePrompt);\n        // setCount(4);\n        setAdvancedView(false);\n        setParentId(null);\n        // setVariationStrength(0.75);\n        setAspectRatio(DEFAULT_ASPECT_RATIO);\n        setAspectRatioDetails(aspectRatios[DEFAULT_ASPECT_RATIO]);\n        setEncodedImage(\"\");\n        // setCfgScale(7.5);\n        setSeed(\"\");\n    };\n\n    const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\n        if (negativePrompt) {\n            recentNegativePrompts.addItem(negativePrompt);\n        }\n        e.preventDefault();\n        const args = defaultArgs();\n        args.params.prompt = prompt || \"\";\n        args.params.negative_prompt = negativePrompt || \"\";\n        args.count = seed ? 1 : count;\n        args.parent = parentId || undefined;\n        args.params.denoising_strength = variationStrength;\n        args.nsfw = true;\n        args.model = model;\n        args.temporary = true;\n        args.params.controlnet_type = controlnetType as any;\n        args.params.cfg_scale = cfgScale;\n        args.params.seed = seed || undefined;\n        if (parent) {\n            const bestMatch = getClosestAspectRatio(\n                parent.params.width!,\n                parent.params.height!\n            ).scale(size);\n            args.params.width = bestMatch.width;\n            args.params.height = bestMatch.height;\n        } else {\n            const bestMatch = getClosestAspectRatio(\n                aspectRatioDetails.width,\n                aspectRatioDetails.height\n            ).scale(size);\n            args.params.width = bestMatch.width;\n            args.params.height = bestMatch.height;\n        }\n        if (encodedImage) {\n            args.encoded_image = await resizeEncodedImage(\n                encodedImage,\n                args.params.width,\n                args.params.height,\n                \"png\"\n            );\n        }\n\n        resetState();\n        onSubmit(args);\n    };\n\n    const handleEdit = () => {\n        if (!encodedImage) {\n            console.error(\"Cannot edit without existing image\");\n            return;\n        }\n        if (negativePrompt) {\n            recentNegativePrompts.addItem(negativePrompt);\n        }\n        const args = defaultArgs();\n        args.params.prompt = prompt || \"\";\n        args.params.negative_prompt = negativePrompt || \"\";\n        args.count = 1;\n        args.parent = parentId || undefined;\n        // args.stable_diffusion_strength = variationStrength;\n        args.params.denoising_strength = variationStrength;\n        args.status = StatusEnum.Completed;\n        args.params.width = originalWidth;\n        args.params.height = originalHeight;\n        args.params.cfg_scale = cfgScale;\n        args.nsfw = true;\n        args.model = model;\n        if (encodedImage) {\n            args.encoded_image = encodedImage;\n        }\n\n        resetState();\n        onEdit(args);\n    };\n\n    const handleCancel = () => {\n        resetState();\n        onCancel();\n    };\n\n    const onSelectModel = (model: string) => {\n        setModel(model);\n        setSelectingModel(false);\n    };\n\n    const onImageSelected = async (e: React.ChangeEvent<HTMLInputElement>) => {\n        const file = e.target.files && e.target.files[0];\n        if (!file) {\n            return;\n        }\n        loadImage(\n            file,\n            (img: Event | HTMLImageElement | HTMLCanvasElement) => {\n                if (!(img instanceof HTMLCanvasElement)) {\n                    return;\n                }\n                // try to match width and height to a supported aspect ratio\n                const width = img.width;\n                const height = img.height;\n                let bestMatch = getClosestAspectRatio(width, height);\n\n                const canvas = document.createElement(\"canvas\");\n                // canvas.width = bestMatch.width;\n                // canvas.height = bestMatch.height;\n                canvas.width = width;\n                canvas.height = height;\n                const ctx = canvas.getContext(\"2d\");\n                if (!ctx) {\n                    return;\n                }\n                ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n\n                // convert image to base64\n                // const canvas = img as HTMLCanvasElement\n                const dataUrl = canvas.toDataURL(\"image/png\");\n                const base64 = dataUrl.split(\",\")[1];\n                setEncodedImage(base64);\n                // get the index of the best match\n                setAspectRatio(\n                    aspectRatios.findIndex((a) => a.id === bestMatch.id)\n                );\n                setAspectRatioDetails(bestMatch);\n                setOriginalWidth(width);\n                setOriginalHeight(height);\n                // remove canvas\n                canvas.remove();\n            },\n            {\n                maxWidth: 4096,\n                maxHeight: 4096,\n                canvas: true,\n            }\n        );\n    };\n\n    useEffect(() => {\n        if (parent) {\n            const imageData = parent.imageData;\n            if (imageData) {\n                setEncodedImage(imageData.split(\",\")[1]);\n            }\n            setPrompt(parent.params.prompt || \"\");\n            setNegativePrompt(\n                parent.params.negative_prompt || defaultNegativePrompt()\n            );\n            setCount(4);\n            setParentId(parent.id);\n            setAdvancedView(true);\n            setVariationStrength(parent.params.denoising_strength || 0.75);\n            setModel(\n                supportedModels.indexOf(parent.model) > -1\n                    ? parent.model\n                    : \"Epic Diffusion\"\n            );\n            setCfgScale(parent.params.cfg_scale || 7.5);\n        } else {\n            resetState();\n        }\n    }, [parent]);\n\n    // unset controlnet when encodedImage is null\n    useEffect(() => {\n        if (!encodedImage) {\n            setControlnetType(undefined);\n        }\n    }, [encodedImage]);\n\n    const scaledAspectRatio = aspectRatioDetails.scale(size);\n    const imagesCost = calculateImagesCost(\n        count,\n        scaledAspectRatio.width,\n        scaledAspectRatio.height\n    );\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <div className=\"homepage-prompt\">\n                <div className=\"input-group\">\n                    <input\n                        className=\"form-control prompt\"\n                        placeholder=\"What would you like to create?\"\n                        value={prompt}\n                        onChange={(e) => setPrompt(e.target.value)}\n                    />\n\n                    <div className=\"input-group-append\">\n                        <select\n                            className=\"form-control prompt-count\"\n                            style={{ borderTopLeftRadius: \"0px\" }}\n                            value={seed ? 1 : count}\n                            onChange={(e) => setCount(parseInt(e.target.value))}\n                            disabled={!!seed}\n                        >\n                            <option value={1}>1</option>\n                            <option>2</option>\n                            <option>3</option>\n                            <option>4</option>\n                            <option>5</option>\n                            <option>6</option>\n                            <option>7</option>\n                            <option>8</option>\n                            <option>9</option>\n                            <option>10</option>\n                        </select>\n                        <button\n                            type=\"submit\"\n                            className=\"btn btn-secondary light-button\"\n                            style={{ marginLeft: \"8px\" }}\n                            disabled={!prompt || creating}\n                        >\n                            {/* paintbrush button */}\n                            {!creating && (\n                                <i className=\"fas fa-paint-brush\"></i>\n                            )}\n                            {/* spinner button */}\n                            {creating && (\n                                <i className=\"fas fa-spinner fa-spin\"></i>\n                            )}\n                        </button>\n                    </div>\n                </div>\n                <CostIndicator imagesCost={imagesCost} />\n                <div\n                    style={{\n                        marginTop: \"24px\",\n                    }}\n                >\n                    <a\n                        href=\"javascript:void(0)\"\n                        onClick={() => setAdvancedView(!advancedView)}\n                        style={{\n                            color: \"white\",\n                            textDecoration: \"underline\",\n                        }}\n                    >\n                        Advanced\n                    </a>\n                    &nbsp;\n                    {advancedView ? (\n                        <i className=\"fas fa-chevron-up\"></i>\n                    ) : (\n                        <i className=\"fas fa-chevron-down\"></i>\n                    )}\n                </div>\n                {advancedView && (\n                    <div className=\"homepage-prompt-advanced\">\n                        {encodedImage && (\n                            <div className=\"form-group\">\n                                <label>Init Image</label>\n                                <img\n                                    style={{\n                                        display: \"block\",\n                                        marginLeft: \"auto\",\n                                        marginRight: \"auto\",\n                                        maxWidth: \"100%\",\n                                    }}\n                                    src={`data:image/png;base64,${encodedImage}`}\n                                />\n                            </div>\n                        )}\n                        {!parent && !encodedImage && (\n                            <AspectRatioSelector\n                                aspectRatio={aspectRatio}\n                                onChange={(aspectRatioId) => {\n                                    setAspectRatio(aspectRatioId);\n                                    setAspectRatioDetails(\n                                        aspectRatios[aspectRatioId]\n                                    );\n                                }}\n                            />\n                        )}\n                        <div className=\"form-group\">\n                            <div\n                                style={{\n                                    display: \"block\",\n                                    maxWidth: encodedImage ? \"350px\" : \"180px\",\n                                    marginTop: \"40px\",\n                                    marginRight: \"auto\",\n                                    marginLeft: \"auto\",\n                                }}\n                            >\n                                <label\n                                    id=\"loadimage-wrapper\"\n                                    className={`btn btn-primary `}\n                                    style={{ display: \"inline\" }}\n                                >\n                                    {/* upload image */}\n                                    <i className=\"fas fa-upload\"></i>&nbsp;\n                                    {encodedImage || parent\n                                        ? \"Replace\"\n                                        : \"Upload\"}\n                                    <input\n                                        id=\"loadimage\"\n                                        type=\"file\"\n                                        style={{ display: \"none\" }}\n                                        onChange={onImageSelected}\n                                    />\n                                </label>\n                                {encodedImage && (\n                                    <label\n                                        className=\"btn btn-secondary\"\n                                        onClick={() => setEncodedImage(\"\")}\n                                        style={{ display: \"inline\" }}\n                                    >\n                                        {/* remove image */}\n                                        <i className=\"fas fa-trash\"></i>&nbsp;\n                                        Remove\n                                    </label>\n                                )}\n                            </div>\n                        </div>\n                        <div className=\"form-group\">\n                            <label htmlFor=\"model\">Model</label>\n                            <div>\n                                <button\n                                    type=\"button\"\n                                    className=\"btn btn-secondary light-button\"\n                                    onClick={() => setSelectingModel(true)}\n                                >\n                                    {model}&nbsp;\n                                    <i className=\"fas fa-caret-down\"></i>\n                                </button>\n                            </div>\n                        </div>\n                        <div className=\"form-group\">\n                            {/* negative prompt */}\n                            <label htmlFor=\"negativePrompt\">\n                                Negative Prompt\n                            </label>\n                            {/* <input\n                                type=\"text\"\n                                className=\"form-control\"\n                                id=\"negativePrompt\"\n                                placeholder=\"What would you like to avoid?\"\n                                value={negativePrompt}\n                                onChange={(e) =>\n                                    setNegativePrompt(e.target.value)\n                                }\n                            /> */}\n                            <TextInputWithHistory\n                                history={recentNegativePrompts.getItems()}\n                                value={negativePrompt}\n                                onChange={setNegativePrompt}\n                            />\n                            <span className=\"helptext\">\n                                Try descriptive words like \"blurry\" or\n                                \"distorted\"\n                            </span>\n                        </div>\n                        {!seed && (\n                            <div className=\"form-group\">\n                                <label htmlFor=\"count\">Count: {count}</label>\n                                {/* range slider from 1 to 20 */}\n                                <input\n                                    type=\"range\"\n                                    className=\"form-control-range\"\n                                    id=\"count\"\n                                    min=\"1\"\n                                    max=\"10\"\n                                    value={count}\n                                    onChange={(e) =>\n                                        setCount(parseInt(e.target.value))\n                                    }\n                                />\n                                <span className=\"helptext\">\n                                    This is how many images you want to generate\n                                </span>\n                            </div>\n                        )}\n                        {/* size slider */}\n                        <div className=\"form-group\">\n                            <label htmlFor=\"size\">Size: {scaledAspectRatio.width} x {scaledAspectRatio.height}</label>\n                            {/* range slider from 1 to 2 in increments of 0.1 */}\n                            <input\n                                type=\"range\"\n                                className=\"form-control-range\"\n                                id=\"size\"\n                                min=\"1\"\n                                max=\"2\"\n                                step=\"0.1\"\n                                value={size}\n                                onChange={(e) =>\n                                    setSize(parseFloat(e.target.value))\n                                }\n                            />\n                            <span className=\"helptext\">\n                                This allows you to adjust the size of your images. Larger images cost more credits.\n                            </span>\n                        </div>\n\n                        {(parentId || encodedImage) && (\n                            <div className=\"form-group\">\n                                {/* variation strength */}\n                                <label htmlFor=\"variationStrength\">\n                                    Variation Strength:&nbsp;\n                                    {(variationStrength * 100).toFixed(0)}%\n                                </label>\n                                <input\n                                    type=\"range\"\n                                    className=\"form-control-range\"\n                                    id=\"variationStrength\"\n                                    min=\"0.05\"\n                                    max=\"0.95\"\n                                    step=\"0.05\"\n                                    value={variationStrength}\n                                    onChange={(e) =>\n                                        setVariationStrength(\n                                            parseFloat(e.target.value)\n                                        )\n                                    }\n                                />\n                                <span className=\"helptext\">\n                                    This is how much variation you want to see\n                                    from the parent image\n                                </span>\n                            </div>\n                        )}\n                        {encodedImage && (\n                            // controlnet type - canny, hed, depth, normal, openpose, seg, scribble, fakescribbles, hough\n                            <div className=\"form-group\">\n                                <label htmlFor=\"controlNetType\">\n                                    Control Net Type\n                                </label>\n                                <select\n                                    className=\"form-control\"\n                                    id=\"controlNetType\"\n                                    value={controlnetType}\n                                    onChange={(e) =>\n                                        setControlnetType(e.target.value)\n                                    }\n                                >\n                                    <option value=\"\">None</option>\n                                    {controlnetTypes.map((type) => (\n                                        <option\n                                            value={type}\n                                            key={`type-${type}`}\n                                        >\n                                            {type}\n                                        </option>\n                                    ))}\n                                </select>\n                                <span className=\"helptext\">\n                                    Controlnet is an advanced way of controlling\n                                    the output of image generation. You can read\n                                    more about it{\" \"}\n                                    <a\n                                        target=\"_blank\"\n                                        href=\"https://bootcamp.uxdesign.cc/controlnet-and-stable-diffusion-a-game-changer-for-ai-image-generation-83555cb942fc\"\n                                    >\n                                        here.\n                                    </a>\n                                </span>\n                            </div>\n                        )}\n                        {/* cfg scale. Slider from 1 to 20 in increments of 0.1 */}\n                        <div className=\"form-group\">\n                            <label>CFG Scale: {cfgScale.toFixed(1)}</label>\n                            <input\n                                type=\"range\"\n                                className=\"form-control-range\"\n                                min=\"1\"\n                                max=\"20\"\n                                step=\"0.5\"\n                                value={cfgScale}\n                                onChange={(e) =>\n                                    setCfgScale(parseFloat(e.target.value))\n                                }\n                            />\n                            <span className=\"helptext\">\n                                Adjust the CFG scale to control how much the\n                                image looks like the prompt.\n                            </span>\n                        </div>\n                        <SeedInput seed={seed} setSeed={setSeed} />\n\n                        <div\n                            className=\"form-group\"\n                            style={{ minHeight: \"20px\" }}\n                        >\n                            <div className=\"float-right\">\n                                {parent && (\n                                    <button\n                                        type=\"button\"\n                                        className=\"btn btn-secondary light-button\"\n                                        onClick={handleCancel}\n                                    >\n                                        <i className=\"fas fa-times\"></i>\n                                        &nbsp;CANCEL\n                                    </button>\n                                )}\n                                <button\n                                    type=\"submit\"\n                                    className=\"btn btn-primary\"\n                                    style={{ marginLeft: \"8px\" }}\n                                    disabled={!prompt || creating}\n                                >\n                                    {/* paintbrush button */}\n                                    {!creating && (\n                                        <i className=\"fas fa-paint-brush\"></i>\n                                    )}\n                                    {/* spinner button */}\n                                    {creating && (\n                                        <i className=\"fas fa-spinner fa-spin\"></i>\n                                    )}\n                                    &nbsp;PAINT\n                                </button>\n                                {encodedImage && (\n                                    <button\n                                        type=\"button\"\n                                        className=\"btn btn-secondary light-button\"\n                                        onClick={handleEdit}\n                                        style={{ marginLeft: \"8px\" }}\n                                        disabled={!prompt || creating}\n                                    >\n                                        <i className=\"fas fa-edit\"></i>\n                                        &nbsp;EDIT\n                                    </button>\n                                )}\n                            </div>\n                        </div>\n                    </div>\n                )}\n            </div>\n            {selectingModel && (\n                <ModelSelector\n                    api={api}\n                    onCancel={() => setSelectingModel(false)}\n                    onSelectModel={onSelectModel}\n                    initialSelectedModel={model}\n                    inpainting={false}\n                />\n            )}\n        </form>\n    );\n};\n","import { FC } from \"react\";\n\ninterface Props {\n    progress: number;\n}\n\nexport const ProgressBar: FC<Props> = ({ progress }) => {\n    return (\n        <div className=\"progress\" style={{ height: \"20px\", marginTop: \"16px\" }}>\n            <div\n                className=\"progress-bar\"\n                role=\"progressbar\"\n                style={{ width: `${progress * 100}%` }}\n                aria-valuenow={progress * 100}\n                aria-valuemin={0}\n                aria-valuemax={100}\n            >\n                {Math.round(progress * 100)}%\n            </div>\n        </div>\n    );\n};\n","export function sleep(ms: number): Promise<void> {\n    return new Promise(resolve => window.setTimeout(resolve, ms));\n}\n","const BASE_IMAGE_SIZE = 512 * 512;\n\nexport function calculateImagesCost(count: number, width: number, height: number): number {\n    // 512x512 = 1 credit\n    // floor(count * width * height / 512 / 512)\n    return Math.max(count * Math.floor(width * height / BASE_IMAGE_SIZE), 1);\n}","import { FC, useEffect, useState } from \"react\";\nimport { ListGroup } from \"react-bootstrap\";\nimport { StableDiffusionModel } from \"../client\";\n\ninterface Props {\n    models: StableDiffusionModel[];\n    onSelectModel: (model: StableDiffusionModel) => void;\n    selectedModel: string;\n}\n\nconst MOBILE_HEIGHT_PERCENT = 0.3;\n\nexport const ModelList: FC<Props> = ({ models, onSelectModel, selectedModel }) => {\n    const [maxHeight, setMaxHeight] = useState(window.innerWidth < 576 ? window.innerHeight * MOBILE_HEIGHT_PERCENT : window.innerHeight * 0.7); // Set maxHeight to 80% of the viewport height\n\n    useEffect(() => {\n        const handleResize = () => {\n            let maxHeight = window.innerHeight * 0.7;\n            if (window.innerWidth < 576) {\n                maxHeight = window.innerHeight * MOBILE_HEIGHT_PERCENT;\n            }\n            setMaxHeight(maxHeight); // Update maxHeight based on the current viewport height\n        };\n\n        window.addEventListener(\"resize\", handleResize);\n        return () => {\n            window.removeEventListener(\"resize\", handleResize);\n        };\n    }, []);\n\n    return (\n        <ListGroup\n            style={{\n                maxHeight: `${maxHeight}px`,\n                overflowY: \"auto\",\n                border: \"1px solid #808080\",\n                marginBottom: \"8px\",\n            }}\n        >\n            {models.map((model) => (\n                <ListGroup.Item\n                    key={model.name}\n                    active={selectedModel === model.name}\n                    onClick={() => onSelectModel(model)}\n                    style={{\n                        cursor: \"pointer\",\n                    }}\n                >\n                    {model.name}\n                </ListGroup.Item>\n            ))}\n        </ListGroup>\n    );\n};\n","import { useState, useEffect } from \"react\";\n\nexport class SimpleCache {\n    private storage: Storage;\n\n    constructor() {\n        this.storage = window.localStorage;\n    }\n\n    setItem(key: string, value: any, ttl = 60 * 60) {\n        const item: {\n            value: any;\n            expiry: number;\n        } = {\n            value,\n            expiry: Date.now() + ttl * 1000,\n        };\n        this.storage.setItem(key, JSON.stringify(item));\n    }\n\n    getItem(key: string): any {\n        try {\n            const itemStr = this.storage.getItem(key);\n            if (!itemStr) {\n                return null;\n            }\n    \n            const item: {\n                value: any;\n                expiry: number;\n            } = JSON.parse(itemStr);\n            if (Date.now() > item.expiry) {\n                this.storage.removeItem(key);\n                return null;\n            }\n            return item.value;\n        } catch (error) {\n            console.error(error);\n            return null;\n        }\n    }\n\n    removeItem(key: string) {\n        this.storage.removeItem(key);\n    }\n\n    clear() {\n        this.storage.clear();\n    }\n}\n\nconst cache = new SimpleCache();\n\nexport function useCache<T>(key: string, initialValue: T): [T, React.Dispatch<React.SetStateAction<T>>] {\n  const [value, setValue] = useState<T>(() => {\n    const cachedValue = cache.getItem(key);\n    return cachedValue !== null ? cachedValue : initialValue;\n  });\n\n  useEffect(() => {\n    cache.setItem(key, value);\n  }, [key, value]);\n\n  return [value, setValue];\n}\n","import React, { useEffect, useState } from \"react\";\nimport { Button, Modal, Form, ListGroup, Row, Col } from \"react-bootstrap\";\nimport axios from \"axios\";\nimport { AIBrushApi, StableDiffusionModel } from \"../client\";\nimport { ModelList } from \"./ModelList\";\nimport { useCache } from \"../lib/localcache\";\nimport { recentModels } from \"../lib/recentList\";\n\nconst httpclient = axios.create();\n\ninterface ModelSelectorProps {\n    api: AIBrushApi;\n    initialSelectedModel: string;\n    onSelectModel: (model: string) => void;\n    onCancel: () => void;\n    inpainting: boolean;\n}\n\n\n\nconst ModelSelector: React.FC<ModelSelectorProps> = ({\n    api,\n    initialSelectedModel,\n    onSelectModel,\n    onCancel,\n    inpainting,\n}) => {\n    const [models, setModels] = useCache<StableDiffusionModel[]>(\"models\", []);\n    const [selectedModel, setSelectedModel] =\n        useState<StableDiffusionModel | null>(null);\n    const [searchTerm, setSearchTerm] = useState(\"\");\n\n    const filteredModels = models.filter((model) =>\n        model.inpainting === inpainting && model.name.toLowerCase().includes(searchTerm.toLowerCase())\n    );\n\n    const handleSelect = () => {\n        console.log(\"Selected model:\", selectedModel);\n        if (selectedModel) {\n            onSelectModel(selectedModel.name);\n        }\n    };\n\n    const handleSearch = (e: React.ChangeEvent<HTMLInputElement>) => {\n        setSearchTerm(e.target.value);\n    };\n\n    const handleModelClick = (model: StableDiffusionModel) => {\n        setSelectedModel(model);\n    };\n\n    useEffect(() => {\n        const setSortedModels = (\n            selectedModel: StableDiffusionModel,\n            models: StableDiffusionModel[]\n        ) => {\n            recentModels.addItem(selectedModel.name);\n\n            const recentModelNames = recentModels.getItems();\n            // map from model name to index\n            const recentModelIndices: { [key: string]: number } = {};\n            recentModelNames.forEach((name, index) => {\n                recentModelIndices[name] = index;\n            });\n            // sort models by recentness\n            const sortedModels = models.sort((a, b) => {\n                const aIndex = recentModelIndices[a.name];\n                const bIndex = recentModelIndices[b.name];\n                if (aIndex === undefined && bIndex === undefined) {\n                    return 0;\n                } else if (aIndex === undefined) {\n                    return 1;\n                } else if (bIndex === undefined) {\n                    return -1;\n                } else {\n                    return aIndex - bIndex;\n                }\n            });\n\n            setModels(sortedModels);\n        };\n\n        if (!models || models.length === 0) {\n            api.getModels().then((res) => {\n                console.log(res);\n                const selectedModel =\n                    res.data[initialSelectedModel] ||\n                    Object.values(res.data)[0];\n                console.log(\"Selected model:\", selectedModel);\n                setSelectedModel(selectedModel);\n                setSortedModels(selectedModel, Object.values(res.data));\n            });\n        } else {\n            const selectedModel =\n                models.find((model) => model.name === initialSelectedModel) ||\n                models[0];\n            setSelectedModel(selectedModel);\n            setSortedModels(selectedModel, models);\n        }\n    }, [api, models]);\n\n    useEffect(() => {\n        if (initialSelectedModel) {\n            recentModels.addItem(initialSelectedModel);\n        }\n    }, [initialSelectedModel]);\n\n    return (\n        <>\n            <Modal show={true} onHide={onCancel} size=\"xl\">\n                <Modal.Header closeButton>\n                    <Modal.Title>Select Model</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <Form.Control\n                        type=\"text\"\n                        placeholder=\"Search\"\n                        value={searchTerm}\n                        onChange={handleSearch}\n                    />\n                    <Row className=\"mt-3\">\n                        <Col sm={4}>\n                            <ModelList\n                                models={filteredModels}\n                                onSelectModel={handleModelClick}\n                                selectedModel={selectedModel?.name || \"\"}\n                            />\n                        </Col>\n                        <Col sm={8}>\n                            {selectedModel && (\n                                <>\n                                    <h5>{selectedModel.name}</h5>\n                                    <p>{selectedModel.description}</p>\n                                    {selectedModel.showcases &&\n                                        selectedModel.showcases.length > 0 && (\n                                            <img\n                                                src={selectedModel.showcases[0]}\n                                                alt=\"Showcase\"\n                                                style={{\n                                                    width: \"70%\",\n                                                }}\n                                            />\n                                        )}\n                                </>\n                            )}\n                        </Col>\n                    </Row>\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button variant=\"secondary\" onClick={onCancel}>\n                        Cancel\n                    </Button>\n                    <Button\n                        variant=\"primary\"\n                        onClick={handleSelect}\n                        disabled={!selectedModel}\n                    >\n                        Select\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n        </>\n    );\n};\n\nexport default ModelSelector;\n","import { OverlayTrigger, Tooltip } from \"react-bootstrap\";\n\ninterface Props {\n    onClick: () => void;\n}\n\nexport const ResetToDefaultIcon = ({ onClick }: Props) => {\n    return (\n        <OverlayTrigger\n            placement=\"top\"\n            overlay={<Tooltip id=\"reset-tooltip\">Reset to Default</Tooltip>}\n        >\n            <i className=\"fa fa-sync\" style={{\n                cursor: \"pointer\",\n            }} onClick={onClick}></i>\n        </OverlayTrigger>\n    );\n};\n","import React, { FC, useEffect, useState } from 'react';\nimport moment from \"moment\";\n\n// implement an error notification component\n// error message and timestamp are passed in as props\n// but close button can make the error message disappear\n\n// show error when the timestamp or message changes with useEffect hook\n// hide error when the close button is clicked\n\ninterface Props {\n    message: string | null;\n    timestamp: number;\n}\n\ninterface AlertProps {\n    message: string;\n    timestamp: number;\n    alertType: 'success' | 'info' | 'warning' | 'danger';\n}\n\nconst Alert: FC<AlertProps> = ({ message, timestamp, alertType }) => {\n    const [show, setShow] = useState(!!message);\n\n    useEffect(() => {\n        setShow(!!message);\n        // set a timeout of 10 seconds to hide the message if it is currently showing\n        if (message) {\n            const timeout = setTimeout(() => {\n                setShow(false);\n            }, 10000);\n            return () => {\n                clearTimeout(timeout);\n            };\n        }\n    }, [message, timestamp]);\n\n    if (!show) {\n        return null;\n    }\n\n    return (\n        <div className={`alert alert-${alertType} ${show ? 'show' : 'hide'}`}>\n            <button\n                type=\"button\"\n                className=\"close\"\n                onClick={() => setShow(false)}\n            >\n                &times;\n            </button>\n            {message}\n        </div>\n    );\n};\n\nexport const ErrorNotification: FC<Props> = ({ message, timestamp }) => {\n    return (\n        <Alert message={message || ''} timestamp={timestamp} alertType=\"danger\" />\n    );\n};\n\nexport const SuccessNotification: FC<Props> = ({ message, timestamp }) => {\n    return (\n        <Alert message={message || ''} timestamp={timestamp} alertType=\"success\" />\n    );\n};\n","import React, { FC, useState, useEffect } from \"react\";\nimport { ChromePicker } from \"react-color\";\n\nimport \"./ColorPicker.css\"\n\ninterface Props {\n    color: string;\n    onColorSelected: (color: string) => void;\n}\n\nexport const ColorPicker: FC<Props> = ({ color, onColorSelected }) => {\n    const [displayColorPicker, setDisplayColorPicker] = useState(false);\n    const [tmpColor, setTmpColor] = useState(color);\n\n    const handleClick = () => {\n        setDisplayColorPicker(!displayColorPicker);\n        if (displayColorPicker) {\n            onColorSelected(tmpColor);\n        }\n    };\n\n    const handleClose = () => {\n        setDisplayColorPicker(false);\n        if (displayColorPicker) {\n            onColorSelected(tmpColor);\n        }\n    };\n\n    const popover: React.CSSProperties = {\n        position: \"absolute\",\n        zIndex: 2,\n    };\n    const cover: React.CSSProperties = {\n        position: \"fixed\",\n        top: \"0px\",\n        right: \"0px\",\n        bottom: \"0px\",\n        left: \"0px\",\n    };\n\n    return (\n        <>\n            <button className=\"color-picker\" onClick={handleClick}>\n                <i className=\"fas fa-plus\" />\n            </button>\n            {displayColorPicker ? (\n                <div style={popover}>\n                    <div style={cover} onClick={handleClose} />\n                    <ChromePicker\n                        color={tmpColor}\n                        onChange={(color) => setTmpColor(color.hex)}\n                        onChangeComplete={(color) => setTmpColor(color.hex)}\n                    />\n                </div>\n            ) : null}\n        </>\n    );\n};\n","import React, { FC, useEffect, useState } from \"react\";\nimport { ChromePicker } from \"react-color\";\n\nimport { Renderer } from \"./renderer\";\nimport { BaseTool, Tool } from \"./tool\";\nimport { ZoomHelper } from \"./zoomHelper\";\nimport { PaletteButton } from \"./PaletteButton\";\nimport { ColorPicker } from \"./ColorPicker\";\n\nexport const defaultColors = [\n    \"#FFFFFF\",\n    \"#5A2C02\",\n    \"#386EB6\",\n    \"#6B31A1\",\n    \"#CB2C26\",\n    \"#000000\",\n    \"#888888\",\n    \"#50B050\",\n    \"#FBDB37\",\n    \"#E88D2D\",\n];\n\nexport class PencilTool extends BaseTool implements Tool {\n    private brushSize = 10;\n\n    private panning = false;\n    private isDrawing = false;\n    private lastX = 0;\n    private lastY = 0;\n    private colorPicking = false;\n    private lastPickedColor = \"#000000\";\n    private _dirty = false;\n\n    set dirty(dirty: boolean) {\n        this._dirty = dirty;\n        if (this.dirtyListener) {\n            this.dirtyListener(dirty);\n        }\n    }\n\n    get dirty() {\n        return this._dirty;\n    }\n\n    private dirtyListener?: (dirty: boolean) => void;\n    private colorPickedListener?: (color: string) => void;\n\n    constructor(\n        renderer: Renderer,\n        private layer: \"base\" | \"mask\",\n        private brushColor = defaultColors[0],\n        name = \"pencil\"\n    ) {\n        super(renderer, name);\n    }\n\n    private sync() {\n        if (this.colorPicking) {\n            this.renderer.setCursor({\n                x: this.lastX,\n                y: this.lastY,\n                radius: this.renderer.getWidth() / 20,\n                color: this.lastPickedColor,\n                type: \"colorpicker\",\n            });\n        } else {\n            this.renderer.setCursor({\n                x: this.lastX,\n                y: this.lastY,\n                radius: this.brushSize / 2,\n                color: this.brushColor,\n                type: \"circle-fill\",\n            });\n        }\n    }\n\n    updateArgs(args: any) {\n        super.updateArgs(args);\n        this.brushSize = args.brushSize || 10;\n        this.brushColor = args.brushColor || defaultColors[0];\n        this.sync();\n    }\n\n    onMouseDown(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        if (this.colorPicking) {\n            return;\n        }\n        if (event.button === 0) {\n            let { x, y } = this.zoomHelper.translateMouseToCanvasCoordinates(\n                event.nativeEvent.offsetX,\n                event.nativeEvent.offsetY\n            );\n            this.renderer.drawPoint(\n                x,\n                y,\n                this.brushSize,\n                this.brushColor,\n                this.layer\n            );\n            this.isDrawing = true;\n            this.lastX = x;\n            this.lastY = y;\n            this.dirty = true;\n        } else if (event.button === 1) {\n            this.panning = true;\n        }\n        this.sync();\n    }\n\n    onMouseMove(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>): void {\n        let { x, y } = this.zoomHelper.translateMouseToCanvasCoordinates(\n            event.nativeEvent.offsetX,\n            event.nativeEvent.offsetY\n        );\n        if (this.colorPicking) {\n            this.lastPickedColor = this.renderer.getPixel(x, y);\n        } else if (this.panning) {\n            this.zoomHelper.onPan(event);\n        } else {\n            if (this.isDrawing) {\n                this.renderer.drawLine(\n                    this.lastX,\n                    this.lastY,\n                    x,\n                    y,\n                    this.brushSize,\n                    this.brushColor,\n                    this.layer\n                );\n                this.dirty = true;\n            }\n        }\n        this.lastX = x;\n        this.lastY = y;\n        this.sync();\n    }\n\n    onMouseUp(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>): void {\n        if (event.button === 0) {\n            this.isDrawing = false;\n            if (this.colorPicking) {\n                this.colorPicking = false;\n                this.brushColor = this.lastPickedColor;\n                if (this.colorPickedListener) {\n                    this.colorPickedListener(this.lastPickedColor);\n                }\n            }\n        } else if (event.button === 1) {\n            this.panning = false;\n        }\n        this.sync();\n    }\n\n    onWheel(event: WheelEvent) {\n        this.zoomHelper.onWheel(event);\n        this.sync();\n    }\n\n    cancel() {\n        // kind of a hack, clears the selection layer\n        this.renderer.setEditImage(null);\n        this.dirty = false;\n    }\n\n    confirm() {\n        this.renderer.commitSelection();\n        const encodedImage = this.renderer.getEncodedImage(null);\n        if (encodedImage && this.saveListener) {\n            this.saveListener(encodedImage);\n        }\n        this.dirty = false;\n    }\n\n    onSaveImage(listener: (encodedImage: string) => void): void {\n        this.saveListener = listener;\n    }\n\n    onDirty(listener: (dirty: boolean) => void): void {\n        this.dirtyListener = listener;\n    }\n\n    destroy(): boolean {\n        if (this.dirty) {\n            this.renderer.commitSelection();\n        }\n        return true;\n    }\n\n    beginColorpicker(): void {\n        this.colorPicking = true;\n        this.sync();\n    }\n\n    onColorPicked(listener: (color: string) => void): void {\n        this.colorPickedListener = listener;\n    }\n}\n\ninterface ControlsProps {\n    renderer: Renderer;\n    tool: PencilTool;\n    colors: string[];\n}\n\nconst MAX_PALETTE_SIZE = 30;\n\nfunction addToPalette(palette: string[], color: string): string[] {\n    if (palette.indexOf(color) === -1) {\n        // insert at the beginning\n        palette = [color, ...palette];\n    }\n    if (palette.length > MAX_PALETTE_SIZE) {\n        palette = palette.slice(0, MAX_PALETTE_SIZE);\n    }\n    return palette;\n}\n\nexport const Controls: FC<ControlsProps> = ({ renderer, tool, colors }) => {\n    const [brushSize, setBrushSize] = useState(10);\n    const [brushColor, setBrushColor] = useState(colors[0]);\n    const [palette, setPalette] = useState(colors);\n    const [dirty, setDirty] = useState(false);\n\n    tool.onDirty(setDirty);\n\n    useEffect(() => {\n        tool.updateArgs({\n            brushSize,\n            brushColor,\n            palette,\n        });\n    }, [brushSize, brushColor, palette]);\n\n    const onColorSelected = (color: string) => {\n        setBrushColor(color);\n        setPalette(addToPalette(palette, color));\n    };\n\n    tool.onColorPicked(onColorSelected);\n\n    return (\n        <div style={{ marginTop: \"16px\" }}>\n            <div className=\"form-group\">\n                <label style={{ width: \"100%\" }}>\n                    Brush size\n                    <small\n                        className=\"form-text text-muted\"\n                        style={{ float: \"right\" }}\n                    >\n                        {brushSize}px\n                    </small>\n                </label>\n                <input\n                    type=\"range\"\n                    className=\"form-control-range\"\n                    min=\"1\"\n                    max=\"100\"\n                    value={brushSize}\n                    onChange={(e) => setBrushSize(parseInt(e.target.value))}\n                />\n            </div>\n            <div\n                style={{\n                    display: \"flex\",\n                    flexDirection: \"row\",\n                    flexWrap: \"wrap\",\n                }}\n            >\n                {palette.map((color, i) => (\n                    <PaletteButton\n                        key={i}\n                        selectedColor={brushColor}\n                        color={color}\n                        onClick={(color) => setBrushColor(color)}\n                        onColorSelected={(color) => onColorSelected(color)}\n                    />\n                ))}\n                {/* <div\n                    className=\"color-picker\"\n                    style={{ textAlign: \"center\", backgroundColor: \"#ccc\" }}\n                >\n                    <i className=\"fas fa-eye-dropper\" />\n                </div> */}\n                <button\n                    className=\"color-picker\"\n                    onClick={() => tool.beginColorpicker()}\n                >\n                    <i className=\"fas fa-eye-dropper\" />\n                </button>\n                <ColorPicker\n                    color={brushColor}\n                    onColorSelected={(color) => onColorSelected(color)}\n                />\n            </div>\n            <div\n                className=\"form-group\"\n                style={{\n                    marginTop: \"16px\",\n                    visibility: dirty ? \"visible\" : \"hidden\",\n                }}\n            >\n                <button\n                    className=\"btn btn-secondary\"\n                    onClick={() => tool.cancel()}\n                >\n                    Revert\n                </button>\n                <button\n                    className=\"btn btn-primary\"\n                    onClick={() => tool.confirm()}\n                    style={{ marginLeft: \"8px\" }}\n                >\n                    Save\n                </button>\n            </div>\n        </div>\n    );\n};\n","import React, { useState, useEffect } from \"react\";\nimport { Renderer } from \"./renderer\";\nimport { Cursor, Rect } from \"./models\";\nimport { Tool, BaseTool } from \"./tool\";\nimport { AspectRatioSelector } from \"../../components/AspectRatioSelector\";\nimport { getUpscaleLevel } from \"../../lib/upscale\";\nimport {\n    DEFAULT_ASPECT_RATIO,\n    aspectRatios,\n    getClosestAspectRatio,\n} from \"../../lib/aspecRatios\";\nimport { ZoomHelper } from \"./zoomHelper\";\nimport { runInThisContext } from \"vm\";\n\nexport class SelectionTool extends BaseTool implements Tool {\n    private selectionOverlay: Rect | undefined;\n    private selectionOverlayPreview: Rect | undefined;\n    private outpaint?: boolean;\n\n    // private selectionWidth: number = 512;\n    // private selectionHeight: number = 512;\n\n    private panning = false;\n\n    // TODO: size modifier to make the selection overlay smaller\n\n    constructor(renderer: Renderer) {\n        super(renderer, \"select\");\n    }\n\n    updateArgs(args: any) {\n        args = {\n            ...this.getArgs(),\n            ...args,\n        }\n        super.updateArgs(args);\n        this.selectionOverlay = args.selectionOverlay || {\n            x: 0,\n            y: 0,\n            width: 512,\n            height: 512,\n        };\n        this.outpaint = args.outpaint;\n        if (!this.outpaint) {\n            this.selectionOverlay = this.clamp(this.selectionOverlay!);\n        }\n        this.sync();\n    }\n\n    private clamp(rect: Rect): Rect {\n        const imageWidth = this.renderer.getWidth();\n        const imageHeight = this.renderer.getHeight();\n        let x = rect.x;\n        let y = rect.y;\n        let width = rect.width;\n        let height = rect.height;\n        // clamp to the canvas\n        x = Math.max(0, Math.min(x, imageWidth - this.selectionOverlay!.width));\n        y = Math.max(0, Math.min(y, imageHeight - rect.height));\n        x = Math.min(x, imageWidth - rect.width);\n        y = Math.min(y, imageHeight - rect.height);\n        width = Math.min(width, imageWidth);\n        height = Math.min(height, imageHeight);\n        return {\n            x: x,\n            y: y,\n            width: width,\n            height: height,\n        };\n    }\n\n    private sync(): void {\n        this.renderer.setSelectionOverlay(this.selectionOverlay);\n        this.renderer.setSelectionOverlayPreview(this.selectionOverlayPreview);\n    }\n\n    onMouseDown(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        if (event.type == \"touch\") {\n            this.onMouseMove(event);\n        } else if (event.button === 0) {\n            this.selectionOverlay = this.selectionOverlayPreview;\n            this.selectionOverlayPreview = undefined;\n            this.sync();\n            this.updateArgs({\n                selectionOverlay: this.selectionOverlay,\n            });\n        } else if (event.button === 1) {\n            this.panning = true;\n        }\n    }\n\n    onMouseMove(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        const imageWidth = this.renderer.getWidth();\n        const imageHeight = this.renderer.getHeight();\n        if (this.panning) {\n            this.zoomHelper.onPan(event);\n        } else {\n            let { x, y } = this.zoomHelper.translateMouseToCanvasCoordinates(\n                event.nativeEvent.offsetX,\n                event.nativeEvent.offsetY\n            );\n\n            // round to the nearest 16 pixels\n            x = Math.round(x / 16) * 16;\n            y = Math.round(y / 16) * 16;\n            // offset by -256 to center the rect\n            x -= 256;\n            y -= 256;\n\n            this.selectionOverlayPreview = {\n                x: x,\n                y: y,\n                width: this.selectionOverlay!.width,\n                height: this.selectionOverlay!.height,\n            };\n\n            if (!this.outpaint) {\n                this.selectionOverlayPreview = this.clamp(this.selectionOverlayPreview);\n            }\n\n            \n            this.sync();\n        }\n    }\n\n    onMouseUp(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        if (event.button === 0 && event.type == \"touch\") {\n            this.selectionOverlay = this.selectionOverlayPreview;\n            this.selectionOverlayPreview = undefined;\n            this.sync();\n            this.updateArgs({\n                selectionOverlay: this.selectionOverlay,\n            });\n        }\n        this.panning = false;\n    }\n\n    onMouseLeave(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        this.selectionOverlayPreview = undefined;\n        this.panning = false;\n        this.sync();\n    }\n\n    onWheel(event: WheelEvent) {\n        this.zoomHelper.onWheel(event);\n    }\n\n    destroy() {\n        // this.renderer.setSelectionOverlay(undefined);\n        this.renderer.setSelectionOverlayPreview(undefined);\n        return true;\n    }\n}\n\ninterface ControlsProps {\n    renderer: Renderer;\n    tool: Tool;\n    /** Lock aspect ratio for smaller images */\n    lockAspectRatio?: boolean;\n    outpaint?: boolean;\n}\n\nexport const Controls: React.FC<ControlsProps> = ({\n    renderer,\n    tool,\n    lockAspectRatio,\n    outpaint,\n}) => {\n    const upscaleLevel = getUpscaleLevel(\n        renderer.getWidth(),\n        renderer.getHeight()\n    );\n    const [aspectRatio, setAspectRatio] = useState(DEFAULT_ASPECT_RATIO);\n    const [size, setSize] = useState(1);\n\n    useEffect(() => {\n        const upscaleLevel = getUpscaleLevel(\n            renderer.getWidth(),\n            renderer.getHeight()\n        );\n        // lock aspect ratio to image\n        if (upscaleLevel === 0 && lockAspectRatio) {\n            const aspectRatio = getClosestAspectRatio(\n                renderer.getWidth(),\n                renderer.getHeight()\n            );\n            setAspectRatio(aspectRatio.id);\n            tool.updateArgs({\n                selectionOverlay: {\n                    x: 0,\n                    y: 0,\n                    width: aspectRatio.width,\n                    height: aspectRatio.height,\n                },\n                outpaint,\n            });\n        } else {\n            const args = tool.getArgs();\n            if (args.selectionOverlay) {\n                // restore args\n                const aspectRatio = getClosestAspectRatio(\n                    args.selectionOverlay.width,\n                    args.selectionOverlay.height\n                );\n                setAspectRatio(aspectRatio.id);\n                setSize(args.selectionOverlay.width / aspectRatio.width);\n                tool.updateArgs(args);\n            } else {\n                // set default args\n                args.selectionOverlay = {\n                    x: 0,\n                    y: 0,\n                    width: aspectRatios[aspectRatio].width,\n                    height: aspectRatios[aspectRatio].height,\n                };\n                args.outpaint = outpaint;\n                tool.updateArgs(args);\n            }\n        }\n    }, [tool]);\n\n    function onChange(aspectRatioId: number, size: number) {\n        const args = tool.getArgs();\n        const aspectRatio = aspectRatios[aspectRatioId];\n        if (args.selectionOverlay) {\n            const xDiff =\n                args.selectionOverlay.width - aspectRatio.width * size;\n            const yDiff =\n                args.selectionOverlay.height - aspectRatio.height * size;\n            args.selectionOverlay.width = Math.round(aspectRatio.width * size);\n            args.selectionOverlay.height = Math.round(\n                aspectRatio.height * size\n            );\n            args.selectionOverlay.x += xDiff / 2;\n            args.selectionOverlay.y += yDiff / 2;\n            if (!outpaint) {\n                // clamp to canvas\n                args.selectionOverlay.x = Math.round(\n                    Math.max(\n                        0,\n                        Math.min(\n                            args.selectionOverlay.x,\n                            renderer.getWidth() - args.selectionOverlay.width\n                        )\n                    )\n                );\n                args.selectionOverlay.y = Math.round(\n                    Math.max(\n                        0,\n                        Math.min(\n                            args.selectionOverlay.y,\n                            renderer.getHeight() - args.selectionOverlay.height\n                        )\n                    )\n                );\n            }\n        }\n        tool.updateArgs({\n            selectionOverlay: args.selectionOverlay,\n        });\n    }\n\n    return (\n        <>\n            {upscaleLevel > 0 && (\n                <AspectRatioSelector\n                    aspectRatio={aspectRatio}\n                    onChange={(aspectRatioId) => {\n                        onChange(aspectRatioId, size);\n                        setAspectRatio(aspectRatioId);\n                    }}\n                />\n            )}\n            <div className=\"form-group\">\n                <label htmlFor=\"size\" style={{ width: \"100%\" }}>\n                    Size\n                    <small\n                        className=\"form-text text-muted\"\n                        style={{ float: \"right\" }}\n                    >\n                        {Math.round(size * 100)}%\n                    </small>\n                </label>\n                {/* range from 0.1 to 1 */}\n                <input\n                    type=\"range\"\n                    className=\"form-control-range\"\n                    id=\"size\"\n                    min=\"1\"\n                    max=\"2\"\n                    step=\"0.1\"\n                    value={size}\n                    onChange={(event) => {\n                        onChange(aspectRatio, parseFloat(event.target.value));\n                        setSize(parseFloat(event.target.value));\n                    }}\n                />\n            </div>\n        </>\n    );\n};\n","import { aspectRatios } from \"./aspecRatios\";\n\nexport function getUpscaleLevel(width: number, height: number): number {\n    for (let i = 0; i < aspectRatios.length; i++) {\n        const aspectRatio = aspectRatios[i];\n        if (width * height <= aspectRatio.width * aspectRatio.height) {\n            return 0;\n        }\n        // if (width === aspectRatio.width && height === aspectRatio.height) {\n        //     return upscaleLevel;\n        // }\n    }\n    width /= 2;\n    height /= 2;\n    for (let i = 0; i < aspectRatios.length; i++) {\n        const aspectRatio = aspectRatios[i];\n        if (width * height <= aspectRatio.width * aspectRatio.height) {\n            return 1;\n        }\n        // if (width === aspectRatio.width && height === aspectRatio.height) {\n        //     return upscaleLevel;\n        // }\n    }\n    return 2;\n}\n"],"sourceRoot":""}